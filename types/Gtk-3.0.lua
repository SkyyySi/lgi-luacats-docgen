---@meta Gtk

---@class Gtk
local Gtk = {}

---@alias Gtk.Allocation Gdk.Rectangle

---@alias Gtk.Stock string

--- # class Gtk.AboutDialog
---
--- The GtkAboutDialog offers a simple way to display information about
--- a program like its logo, name, copyright, website and license. It is
--- also possible to give credits to the authors, documenters, translators
--- and artists who have worked on the program. An about dialog is typically
--- opened when the user selects the `About` option from the `Help` menu.
--- All parts of the dialog are optional.
--- 
--- About dialogs often contain links and email addresses. GtkAboutDialog
--- displays these as clickable links. By default, it calls `gtk_show_uri_on_window()`
--- when a user clicks one. The behaviour can be overridden with the
--- `GtkAboutDialog`::activate-link signal.
--- 
--- To specify a person with an email address, use a string like
--- "Edgar Allan Poe <edgar\`poe`.com>". To specify a website with a title,
--- use a string like "GTK+ team http://www.gtk.org".
--- 
--- To make constructing a GtkAboutDialog as convenient as possible, you can
--- use the function `gtk_show_about_dialog()` which constructs and shows a dialog
--- and keeps it around so that it can be shown again.
--- 
--- Note that GTK+ sets a default title of `_("About %s")` on the dialog
--- window (where \%s is replaced by the name of the application, but in
--- order to ensure proper translation of the title, applications should
--- set the title property explicitly when constructing a GtkAboutDialog,
--- as shown in the following example:
--- ```c
--- GdkPixbuf *example_logo = gdk_pixbuf_new_from_file ("./logo.png", NULL);
--- gtk_show_about_dialog (NULL,
---                        "program-name", "ExampleCode",
---                        "logo", example_logo,
---                        "title", _("About ExampleCode"),
---                        NULL);
--- ```
--- 
--- It is also possible to show a `GtkAboutDialog` like any other `GtkDialog`,
--- e.g. using `gtk_dialog_run()`. In this case, you might need to know that
--- the “Close” button returns the `GTK_RESPONSE_CANCEL` response id.
---
--- ---
---
---@class Gtk.AboutDialog : Gtk.Dialog, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent_instance Gtk.Dialog
---@field priv Gtk.AboutDialogPrivate
---@operator call: Gtk.AboutDialog
Gtk.AboutDialog = {}

--- # method Gtk.AboutDialog:add_credit_section()
---
--- Creates a new section in the Credits page.
---
--- ---
---
---@param self Gtk.AboutDialog # A `GtkAboutDialog`
---@param section_name string # The name of the section
---@param people unknown[] # The people who belong to that section
---@return nil
function Gtk.AboutDialog:add_credit_section(section_name, people) end

--- # method Gtk.AboutDialog:get_artists()
---
--- Returns the string which are displayed in the artists tab
--- of the secondary credits dialog.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@return unknown[] # A `nil`-terminated string array containing the artists. The array is owned by the about dialog and must not be modified.
function Gtk.AboutDialog:get_artists() end

--- # method Gtk.AboutDialog:get_authors()
---
--- Returns the string which are displayed in the authors tab
--- of the secondary credits dialog.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@return unknown[] # A `nil`-terminated string array containing the authors. The array is owned by the about dialog and must not be modified.
function Gtk.AboutDialog:get_authors() end

--- # method Gtk.AboutDialog:get_comments()
---
--- Returns the comments string.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@return string # The comments. The string is owned by the about dialog and must not be modified.
function Gtk.AboutDialog:get_comments() end

--- # method Gtk.AboutDialog:get_copyright()
---
--- Returns the copyright string.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@return string # The copyright string. The string is owned by the about dialog and must not be modified.
function Gtk.AboutDialog:get_copyright() end

--- # method Gtk.AboutDialog:get_documenters()
---
--- Returns the string which are displayed in the documenters
--- tab of the secondary credits dialog.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@return unknown[] # A `nil`-terminated string array containing the documenters. The array is owned by the about dialog and must not be modified.
function Gtk.AboutDialog:get_documenters() end

--- # method Gtk.AboutDialog:get_license()
---
--- Returns the license information.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@return string # The license information. The string is owned by the about dialog and must not be modified.
function Gtk.AboutDialog:get_license() end

--- # method Gtk.AboutDialog:get_license_type()
---
--- Retrieves the license set using `gtk_about_dialog_set_license_type()`
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@return Gtk.License # a `GtkLicense` value
function Gtk.AboutDialog:get_license_type() end

--- # method Gtk.AboutDialog:get_logo()
---
--- Returns the pixbuf displayed as logo in the about dialog.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@return GdkPixbuf.Pixbuf # the pixbuf displayed as logo. The pixbuf is owned by the about dialog. If you want to keep a reference to it, you have to call `g_object_ref()` on it.
function Gtk.AboutDialog:get_logo() end

--- # method Gtk.AboutDialog:get_logo_icon_name()
---
--- Returns the icon name displayed as logo in the about dialog.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@return string # the icon name displayed as logo. The string is owned by the dialog. If you want to keep a reference to it, you have to call `g_strdup()` on it.
function Gtk.AboutDialog:get_logo_icon_name() end

--- # method Gtk.AboutDialog:get_program_name()
---
--- Returns the program name displayed in the about dialog.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@return string # The program name. The string is owned by the about dialog and must not be modified.
function Gtk.AboutDialog:get_program_name() end

--- # method Gtk.AboutDialog:get_translator_credits()
---
--- Returns the translator credits string which is displayed
--- in the translators tab of the secondary credits dialog.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@return string # The translator credits string. The string is owned by the about dialog and must not be modified.
function Gtk.AboutDialog:get_translator_credits() end

--- # method Gtk.AboutDialog:get_version()
---
--- Returns the version string.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@return string # The version string. The string is owned by the about dialog and must not be modified.
function Gtk.AboutDialog:get_version() end

--- # method Gtk.AboutDialog:get_website()
---
--- Returns the website URL.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@return string # The website URL. The string is owned by the about dialog and must not be modified.
function Gtk.AboutDialog:get_website() end

--- # method Gtk.AboutDialog:get_website_label()
---
--- Returns the label used for the website link.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@return string # The label used for the website link. The string is owned by the about dialog and must not be modified.
function Gtk.AboutDialog:get_website_label() end

--- # method Gtk.AboutDialog:get_wrap_license()
---
--- Returns whether the license text in `about` is
--- automatically wrapped.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@return (boolean|nil) # `true` if the license text is wrapped
function Gtk.AboutDialog:get_wrap_license() end

--- # method Gtk.AboutDialog:set_artists()
---
--- Sets the strings which are displayed in the artists tab
--- of the secondary credits dialog.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@param artists unknown[] # a `nil`-terminated array of strings
---@return nil
function Gtk.AboutDialog:set_artists(artists) end

--- # method Gtk.AboutDialog:set_authors()
---
--- Sets the strings which are displayed in the authors tab
--- of the secondary credits dialog.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@param authors unknown[] # a `nil`-terminated array of strings
---@return nil
function Gtk.AboutDialog:set_authors(authors) end

--- # method Gtk.AboutDialog:set_comments()
---
--- Sets the comments string to display in the about dialog.
--- This should be a short string of one or two lines.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@param comments? string # a comments string
---@return nil
function Gtk.AboutDialog:set_comments(comments) end

--- # method Gtk.AboutDialog:set_copyright()
---
--- Sets the copyright string to display in the about dialog.
--- This should be a short string of one or two lines.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@param copyright? string # the copyright string
---@return nil
function Gtk.AboutDialog:set_copyright(copyright) end

--- # method Gtk.AboutDialog:set_documenters()
---
--- Sets the strings which are displayed in the documenters tab
--- of the secondary credits dialog.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@param documenters unknown[] # a `nil`-terminated array of strings
---@return nil
function Gtk.AboutDialog:set_documenters(documenters) end

--- # method Gtk.AboutDialog:set_license()
---
--- Sets the license information to be displayed in the secondary
--- license dialog. If `license` is `nil`, the license button is
--- hidden.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@param license? string # the license information or `nil`
---@return nil
function Gtk.AboutDialog:set_license(license) end

--- # method Gtk.AboutDialog:set_license_type()
---
--- Sets the license of the application showing the `about` dialog from a
--- list of known licenses.
--- 
--- This function overrides the license set using
--- `gtk_about_dialog_set_license()`.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@param license_type Gtk.License # the type of license
---@return nil
function Gtk.AboutDialog:set_license_type(license_type) end

--- # method Gtk.AboutDialog:set_logo()
---
--- Sets the pixbuf to be displayed as logo in the about dialog.
--- If it is `nil`, the default window icon set with
--- `gtk_window_set_default_icon()` will be used.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@param logo? GdkPixbuf.Pixbuf # a `GdkPixbuf`, or `nil`
---@return nil
function Gtk.AboutDialog:set_logo(logo) end

--- # method Gtk.AboutDialog:set_logo_icon_name()
---
--- Sets the pixbuf to be displayed as logo in the about dialog.
--- If it is `nil`, the default window icon set with
--- `gtk_window_set_default_icon()` will be used.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@param icon_name? string # an icon name, or `nil`
---@return nil
function Gtk.AboutDialog:set_logo_icon_name(icon_name) end

--- # method Gtk.AboutDialog:set_program_name()
---
--- Sets the name to display in the about dialog.
--- If this is not set, it defaults to `g_get_application_name()`.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@param name string # the program name
---@return nil
function Gtk.AboutDialog:set_program_name(name) end

--- # method Gtk.AboutDialog:set_translator_credits()
---
--- Sets the translator credits string which is displayed in
--- the translators tab of the secondary credits dialog.
--- 
--- The intended use for this string is to display the translator
--- of the language which is currently used in the user interface.
--- Using `gettext()`, a simple way to achieve that is to mark the
--- string for translation:
--- ```c
--- GtkWidget *about = gtk_about_dialog_new ();
--- gtk_about_dialog_set_translator_credits (GTK_ABOUT_DIALOG (about),
---                                          _("translator-credits"));
--- ```
--- It is a good idea to use the customary msgid “translator-credits” for this
--- purpose, since translators will already know the purpose of that msgid, and
--- since `GtkAboutDialog` will detect if “translator-credits” is untranslated
--- and hide the tab.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@param translator_credits? string # the translator credits
---@return nil
function Gtk.AboutDialog:set_translator_credits(translator_credits) end

--- # method Gtk.AboutDialog:set_version()
---
--- Sets the version string to display in the about dialog.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@param version? string # the version string
---@return nil
function Gtk.AboutDialog:set_version(version) end

--- # method Gtk.AboutDialog:set_website()
---
--- Sets the URL to use for the website link.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@param website? string # a URL string starting with "http://"
---@return nil
function Gtk.AboutDialog:set_website(website) end

--- # method Gtk.AboutDialog:set_website_label()
---
--- Sets the label to be used for the website link.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@param website_label string # the label used for the website link
---@return nil
function Gtk.AboutDialog:set_website_label(website_label) end

--- # method Gtk.AboutDialog:set_wrap_license()
---
--- Sets whether the license text in `about` is
--- automatically wrapped.
---
--- ---
---
---@param self Gtk.AboutDialog # a `GtkAboutDialog`
---@param wrap_license (boolean|nil) # whether to wrap the license
---@return nil
function Gtk.AboutDialog:set_wrap_license(wrap_license) end

--- # function Gtk.AboutDialog.new()
---
--- Creates a new `GtkAboutDialog`.
---
--- ---
---
---@return Gtk.Widget # a newly created `GtkAboutDialog`
function Gtk.AboutDialog.new() end

--- # record Gtk.AboutDialogClass
---
---@class Gtk.AboutDialogClass
---@field parent_class Gtk.DialogClass
---@field activate_link fun(dialog: Gtk.AboutDialog, uri: string): (boolean|nil)
Gtk.AboutDialogClass = {}

--- # record Gtk.AboutDialogPrivate
---
---@class Gtk.AboutDialogPrivate
Gtk.AboutDialogPrivate = {}

---@enum Gtk.AccelFlags
Gtk.AccelFlags = {}

--- # class Gtk.AccelGroup
---
--- A `GtkAccelGroup` represents a group of keyboard accelerators,
--- typically attached to a toplevel `GtkWindow` (with
--- `gtk_window_add_accel_group()`). Usually you won’t need to create a
--- `GtkAccelGroup` directly; instead, when using `GtkUIManager`, GTK+
--- automatically sets up the accelerators for your menus in the ui
--- manager’s `GtkAccelGroup`.
--- 
--- Note that “accelerators” are different from
--- “mnemonics”. Accelerators are shortcuts for
--- activating a menu item; they appear alongside the menu item they’re a
--- shortcut for. For example “Ctrl+Q” might appear alongside the “Quit”
--- menu item. Mnemonics are shortcuts for GUI elements such as text
--- entries or buttons; they appear as underlined characters. See
--- `gtk_label_new_with_mnemonic()`. Menu items can have both accelerators
--- and mnemonics, of course.
---
--- ---
---
---@class Gtk.AccelGroup : GObject.Object
---@field parent GObject.Object
---@field priv Gtk.AccelGroupPrivate
---@operator call: Gtk.AccelGroup
Gtk.AccelGroup = {}

--- # method Gtk.AccelGroup:activate()
---
--- Finds the first accelerator in `accel_group` that matches
--- `accel_key` and `accel_mods`, and activates it.
---
--- ---
---
---@param self Gtk.AccelGroup # a `GtkAccelGroup`
---@param accel_quark GLib.Quark # the quark for the accelerator name
---@param acceleratable GObject.Object # the `GObject`, usually a `GtkWindow`, on which to activate the accelerator
---@param accel_key integer # accelerator keyval from a key event
---@param accel_mods Gdk.ModifierType # keyboard state mask from a key event
---@return (boolean|nil) # `true` if an accelerator was activated and handled this keypress
function Gtk.AccelGroup:activate(accel_quark, acceleratable, accel_key, accel_mods) end

--- # method Gtk.AccelGroup:connect()
---
--- Installs an accelerator in this group. When `accel_group` is being
--- activated in response to a call to `gtk_accel_groups_activate()`,
--- `closure` will be invoked if the `accel_key` and `accel_mods` from
--- `gtk_accel_groups_activate()` match those of this connection.
--- 
--- The signature used for the `closure` is that of `GtkAccelGroupActivate`.
--- 
--- Note that, due to implementation details, a single closure can
--- only be connected to one accelerator group.
---
--- ---
---
---@param self Gtk.AccelGroup # the accelerator group to install an accelerator in
---@param accel_key integer # key value of the accelerator
---@param accel_mods Gdk.ModifierType # modifier combination of the accelerator
---@param accel_flags Gtk.AccelFlags # a flag mask to configure this accelerator
---@param closure GObject.Closure # closure to be executed upon accelerator activation
---@return nil
function Gtk.AccelGroup:connect(accel_key, accel_mods, accel_flags, closure) end

--- # method Gtk.AccelGroup:connect_by_path()
---
--- Installs an accelerator in this group, using an accelerator path
--- to look up the appropriate key and modifiers (see
--- `gtk_accel_map_add_entry()`). When `accel_group` is being activated
--- in response to a call to `gtk_accel_groups_activate()`, `closure` will
--- be invoked if the `accel_key` and `accel_mods` from
--- `gtk_accel_groups_activate()` match the key and modifiers for the path.
--- 
--- The signature used for the `closure` is that of `GtkAccelGroupActivate`.
--- 
--- Note that `accel_path` string will be stored in a `GQuark`. Therefore,
--- if you pass a static string, you can save some memory by interning it
--- first with `g_intern_static_string()`.
---
--- ---
---
---@param self Gtk.AccelGroup # the accelerator group to install an accelerator in
---@param accel_path string # path used for determining key and modifiers
---@param closure GObject.Closure # closure to be executed upon accelerator activation
---@return nil
function Gtk.AccelGroup:connect_by_path(accel_path, closure) end

--- # method Gtk.AccelGroup:disconnect()
---
--- Removes an accelerator previously installed through
--- `gtk_accel_group_connect()`.
--- 
--- Since 2.20 `closure` can be `nil`.
---
--- ---
---
---@param self Gtk.AccelGroup # the accelerator group to remove an accelerator from
---@param closure? GObject.Closure # the closure to remove from this accelerator group, or `nil` to remove all closures
---@return (boolean|nil) # `true` if the closure was found and got disconnected
function Gtk.AccelGroup:disconnect(closure) end

--- # method Gtk.AccelGroup:disconnect_key()
---
--- Removes an accelerator previously installed through
--- `gtk_accel_group_connect()`.
---
--- ---
---
---@param self Gtk.AccelGroup # the accelerator group to install an accelerator in
---@param accel_key integer # key value of the accelerator
---@param accel_mods Gdk.ModifierType # modifier combination of the accelerator
---@return (boolean|nil) # `true` if there was an accelerator which could be removed, `false` otherwise
function Gtk.AccelGroup:disconnect_key(accel_key, accel_mods) end

--- # method Gtk.AccelGroup:find()
---
--- Finds the first entry in an accelerator group for which
--- `find_func` returns `true` and returns its `GtkAccelKey`.
---
--- ---
---
---@param self Gtk.AccelGroup # a `GtkAccelGroup`
---@param find_func Gtk.AccelGroupFindFunc # a function to filter the entries of `accel_group` with
---@param data? userdata # data to pass to `find_func`
---@return Gtk.AccelKey # the key of the first entry passing `find_func`. The key is owned by GTK+ and must not be freed.
function Gtk.AccelGroup:find(find_func, data) end

--- # method Gtk.AccelGroup:get_is_locked()
---
--- Locks are added and removed using `gtk_accel_group_lock()` and
--- `gtk_accel_group_unlock()`.
---
--- ---
---
---@param self Gtk.AccelGroup # a `GtkAccelGroup`
---@return (boolean|nil) # `true` if there are 1 or more locks on the `accel_group`, `false` otherwise.
function Gtk.AccelGroup:get_is_locked() end

--- # method Gtk.AccelGroup:get_modifier_mask()
---
--- Gets a `GdkModifierType` representing the mask for this
--- `accel_group`. For example, `GDK_CONTROL_MASK`, `GDK_SHIFT_MASK`, etc.
---
--- ---
---
---@param self Gtk.AccelGroup # a `GtkAccelGroup`
---@return Gdk.ModifierType # the modifier mask for this accel group.
function Gtk.AccelGroup:get_modifier_mask() end

--- # method Gtk.AccelGroup:lock()
---
--- Locks the given accelerator group.
--- 
--- Locking an acelerator group prevents the accelerators contained
--- within it to be changed during runtime. Refer to
--- `gtk_accel_map_change_entry()` about runtime accelerator changes.
--- 
--- If called more than once, `accel_group` remains locked until
--- `gtk_accel_group_unlock()` has been called an equivalent number
--- of times.
---
--- ---
---
---@param self Gtk.AccelGroup # a `GtkAccelGroup`
---@return nil
function Gtk.AccelGroup:lock() end

--- # method Gtk.AccelGroup:query()
---
--- Queries an accelerator group for all entries matching `accel_key`
--- and `accel_mods`.
---
--- ---
---
---@param self Gtk.AccelGroup # the accelerator group to query
---@param accel_key integer # key value of the accelerator
---@param accel_mods Gdk.ModifierType # modifier combination of the accelerator
---@param n_entries? integer # location to return the number of entries found, or `nil`
---@return unknown[] # an array of `n_entries` `GtkAccelGroupEntry` elements, or `nil`. The array is owned by GTK+ and must not be freed.
function Gtk.AccelGroup:query(accel_key, accel_mods, n_entries) end

--- # method Gtk.AccelGroup:unlock()
---
--- Undoes the last call to `gtk_accel_group_lock()` on this `accel_group`.
---
--- ---
---
---@param self Gtk.AccelGroup # a `GtkAccelGroup`
---@return nil
function Gtk.AccelGroup:unlock() end

--- # function Gtk.AccelGroup.from_accel_closure()
---
--- Finds the `GtkAccelGroup` to which `closure` is connected;
--- see `gtk_accel_group_connect()`.
---
--- ---
---
---@param closure GObject.Closure # a `GClosure`
---@return Gtk.AccelGroup # the `GtkAccelGroup` to which `closure` is connected, or `nil`
function Gtk.AccelGroup.from_accel_closure(closure) end

--- # function Gtk.AccelGroup.new()
---
--- Creates a new `GtkAccelGroup`.
---
--- ---
---
---@return Gtk.AccelGroup # a new `GtkAccelGroup` object
function Gtk.AccelGroup.new() end

---@alias Gtk.AccelGroupActivate fun(accel_group: Gtk.AccelGroup, acceleratable: GObject.Object, keyval: integer, modifier: Gdk.ModifierType): (boolean|nil)

--- # record Gtk.AccelGroupClass
---
---@class Gtk.AccelGroupClass
---@field parent_class GObject.ObjectClass # The parent class.
---@field accel_changed fun(accel_group: Gtk.AccelGroup, keyval: integer, modifier: Gdk.ModifierType, accel_closure: GObject.Closure): nil
Gtk.AccelGroupClass = {}

--- # record Gtk.AccelGroupEntry
---
---@class Gtk.AccelGroupEntry
---@field key Gtk.AccelKey
---@field closure GObject.Closure
---@field accel_path_quark GLib.Quark
Gtk.AccelGroupEntry = {}

---@alias Gtk.AccelGroupFindFunc fun(key: Gtk.AccelKey, closure: GObject.Closure, data: userdata): (boolean|nil)

--- # record Gtk.AccelGroupPrivate
---
---@class Gtk.AccelGroupPrivate
Gtk.AccelGroupPrivate = {}

--- # record Gtk.AccelKey
---
---@class Gtk.AccelKey
---@field accel_key integer # The accelerator keyval
---@field accel_mods Gdk.ModifierType # The accelerator modifiers
---@field accel_flags integer # The accelerator flags
Gtk.AccelKey = {}

--- # class Gtk.AccelLabel
---
--- The `GtkAccelLabel` widget is a subclass of `GtkLabel` that also displays an
--- accelerator key on the right of the label text, e.g. “Ctrl+S”.
--- It is commonly used in menus to show the keyboard short-cuts for commands.
--- 
--- The accelerator key to display is typically not set explicitly (although it
--- can be, with `gtk_accel_label_set_accel()`). Instead, the `GtkAccelLabel` displays
--- the accelerators which have been added to a particular widget. This widget is
--- set by calling `gtk_accel_label_set_accel_widget()`.
--- 
--- For example, a `GtkMenuItem` widget may have an accelerator added to emit
--- the “activate” signal when the “Ctrl+S” key combination is pressed.
--- A `GtkAccelLabel` is created and added to the `GtkMenuItem`, and
--- `gtk_accel_label_set_accel_widget()` is called with the `GtkMenuItem` as the
--- second argument. The `GtkAccelLabel` will now display “Ctrl+S” after its label.
--- 
--- Note that creating a `GtkMenuItem` with `gtk_menu_item_new_with_label()` (or
--- one of the similar functions for `GtkCheckMenuItem` and `GtkRadioMenuItem`)
--- automatically adds a `GtkAccelLabel` to the `GtkMenuItem` and calls
--- `gtk_accel_label_set_accel_widget()` to set it up for you.
--- 
--- A `GtkAccelLabel` will only display accelerators which have %GTK_ACCEL_VISIBLE
--- set (see `GtkAccelFlags`).
--- A `GtkAccelLabel` can display multiple accelerators and even signal names,
--- though it is almost always used to display just one accelerator key.
--- 
--- ## Creating a simple menu item with an accelerator key.
--- 
--- ```c
---   GtkWidget *window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
---   GtkWidget *menu = gtk_menu_new ();
---   GtkWidget *save_item;
---   GtkAccelGroup *accel_group;
--- 
---   // Create a GtkAccelGroup and add it to the window.
---   accel_group = gtk_accel_group_new ();
---   gtk_window_add_accel_group (GTK_WINDOW (window), accel_group);
--- 
---   // Create the menu item using the convenience function.
---   save_item = gtk_menu_item_new_with_label ("Save");
---   gtk_widget_show (save_item);
---   gtk_container_add (GTK_CONTAINER (menu), save_item);
--- 
---   // Now add the accelerator to the GtkMenuItem. Note that since we
---   // called `gtk_menu_item_new_with_label()` to create the GtkMenuItem
---   // the GtkAccelLabel is automatically set up to display the
---   // GtkMenuItem accelerators. We just need to make sure we use
---   // GTK_ACCEL_VISIBLE here.
---   gtk_widget_add_accelerator (save_item, "activate", accel_group,
---                               GDK_KEY_s, GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);
--- ```
--- 
--- # CSS nodes
--- 
--- ```plain
--- label
--- ╰── accelerator
--- ```
--- 
--- Like `GtkLabel`, GtkAccelLabel has a main CSS node with the name label.
--- It adds a subnode with name accelerator.
---
--- ---
---
---@class Gtk.AccelLabel : Gtk.Label, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field label Gtk.Label
---@field priv Gtk.AccelLabelPrivate
---@operator call: Gtk.AccelLabel
Gtk.AccelLabel = {}

--- # method Gtk.AccelLabel:get_accel()
---
--- Gets the keyval and modifier mask set with
--- `gtk_accel_label_set_accel()`.
---
--- ---
---
---@param self Gtk.AccelLabel # a `GtkAccelLabel`
---@param accelerator_key integer # return location for the keyval
---@param accelerator_mods Gdk.ModifierType # return location for the modifier mask
---@return nil
function Gtk.AccelLabel:get_accel(accelerator_key, accelerator_mods) end

--- # method Gtk.AccelLabel:get_accel_widget()
---
--- Fetches the widget monitored by this accelerator label. See
--- `gtk_accel_label_set_accel_widget()`.
---
--- ---
---
---@param self Gtk.AccelLabel # a `GtkAccelLabel`
---@return Gtk.Widget # the object monitored by the accelerator label, or `nil`.
function Gtk.AccelLabel:get_accel_widget() end

--- # method Gtk.AccelLabel:get_accel_width()
---
--- Returns the width needed to display the accelerator key(s).
--- This is used by menus to align all of the `GtkMenuItem` widgets, and shouldn't
--- be needed by applications.
---
--- ---
---
---@param self Gtk.AccelLabel # a `GtkAccelLabel`.
---@return integer # the width needed to display the accelerator key(s).
function Gtk.AccelLabel:get_accel_width() end

--- # method Gtk.AccelLabel:refetch()
---
--- Recreates the string representing the accelerator keys.
--- This should not be needed since the string is automatically updated whenever
--- accelerators are added or removed from the associated widget.
---
--- ---
---
---@param self Gtk.AccelLabel # a `GtkAccelLabel`.
---@return (boolean|nil) # always returns `false`.
function Gtk.AccelLabel:refetch() end

--- # method Gtk.AccelLabel:set_accel()
---
--- Manually sets a keyval and modifier mask as the accelerator rendered
--- by `accel_label`.
--- 
--- If a keyval and modifier are explicitly set then these values are
--- used regardless of any associated accel closure or widget.
--- 
--- Providing an `accelerator_key` of 0 removes the manual setting.
---
--- ---
---
---@param self Gtk.AccelLabel # a `GtkAccelLabel`
---@param accelerator_key integer # a keyval, or 0
---@param accelerator_mods Gdk.ModifierType # the modifier mask for the accel
---@return nil
function Gtk.AccelLabel:set_accel(accelerator_key, accelerator_mods) end

--- # method Gtk.AccelLabel:set_accel_closure()
---
--- Sets the closure to be monitored by this accelerator label. The closure
--- must be connected to an accelerator group; see `gtk_accel_group_connect()`.
--- Passing `nil` for `accel_closure` will dissociate `accel_label` from its
--- current closure, if any.
---
--- ---
---
---@param self Gtk.AccelLabel # a `GtkAccelLabel`
---@param accel_closure? GObject.Closure # the closure to monitor for accelerator changes, or `nil`
---@return nil
function Gtk.AccelLabel:set_accel_closure(accel_closure) end

--- # method Gtk.AccelLabel:set_accel_widget()
---
--- Sets the widget to be monitored by this accelerator label. Passing `nil` for
--- `accel_widget` will dissociate `accel_label` from its current widget, if any.
---
--- ---
---
---@param self Gtk.AccelLabel # a `GtkAccelLabel`
---@param accel_widget? Gtk.Widget # the widget to be monitored, or `nil`
---@return nil
function Gtk.AccelLabel:set_accel_widget(accel_widget) end

--- # function Gtk.AccelLabel.new()
---
--- Creates a new `GtkAccelLabel`.
---
--- ---
---
---@param string string # the label string. Must be non-`nil`.
---@return Gtk.Widget # a new `GtkAccelLabel`.
function Gtk.AccelLabel.new(string) end

--- # record Gtk.AccelLabelClass
---
---@class Gtk.AccelLabelClass
---@field parent_class Gtk.LabelClass
---@field signal_quote1 string
---@field signal_quote2 string
---@field mod_name_shift string
---@field mod_name_control string
---@field mod_name_alt string
---@field mod_separator string
Gtk.AccelLabelClass = {}

--- # record Gtk.AccelLabelPrivate
---
---@class Gtk.AccelLabelPrivate
Gtk.AccelLabelPrivate = {}

--- # class Gtk.AccelMap
---
--- Accelerator maps are used to define runtime configurable accelerators.
--- Functions for manipulating them are are usually used by higher level
--- convenience mechanisms like `GtkUIManager` and are thus considered
--- “low-level”. You’ll want to use them if you’re manually creating menus that
--- should have user-configurable accelerators.
--- 
--- An accelerator is uniquely defined by:
--- - accelerator path
--- - accelerator key
--- - accelerator modifiers
--- 
--- The accelerator path must consist of
--- “<WINDOWTYPE>/Category1/Category2/.../Action”, where WINDOWTYPE
--- should be a unique application-specific identifier that corresponds
--- to the kind of window the accelerator is being used in, e.g.
--- “Gimp-Image”, “Abiword-Document” or “Gnumeric-Settings”.
--- The “Category1/.../Action” portion is most appropriately chosen by
--- the action the accelerator triggers, i.e. for accelerators on menu
--- items, choose the item’s menu path, e.g. “File/Save As”,
--- “Image/View/Zoom” or “Edit/Select All”. So a full valid accelerator
--- path may look like: “<Gimp-Toolbox>/File/Dialogs/Tool Options...”.
--- 
--- All accelerators are stored inside one global `GtkAccelMap` that can
--- be obtained using `gtk_accel_map_get()`. See
--- [Monitoring changes][monitoring-changes] for additional
--- details.
--- 
--- # Manipulating accelerators
--- 
--- New accelerators can be added using `gtk_accel_map_add_entry()`.
--- To search for specific accelerator, use `gtk_accel_map_lookup_entry()`.
--- Modifications of existing accelerators should be done using
--- `gtk_accel_map_change_entry()`.
--- 
--- In order to avoid having some accelerators changed, they can be
--- locked using `gtk_accel_map_lock_path()`. Unlocking is done using
--- `gtk_accel_map_unlock_path()`.
--- 
--- # Saving and loading accelerator maps
--- 
--- Accelerator maps can be saved to and loaded from some external
--- resource. For simple saving and loading from file,
--- `gtk_accel_map_save()` and `gtk_accel_map_load()` are provided.
--- Saving and loading can also be done by providing file descriptor
--- to `gtk_accel_map_save_fd()` and `gtk_accel_map_load_fd()`.
--- 
--- # Monitoring changes
--- 
--- `GtkAccelMap` object is only useful for monitoring changes of
--- accelerators. By connecting to `GtkAccelMap`::changed signal, one
--- can monitor changes of all accelerators. It is also possible to
--- monitor only single accelerator path by using it as a detail of
--- the `GtkAccelMap`::changed signal.
---
--- ---
---
---@class Gtk.AccelMap : GObject.Object
Gtk.AccelMap = {}

--- # function Gtk.AccelMap.add_entry()
---
--- Registers a new accelerator with the global accelerator map.
--- This function should only be called once per `accel_path`
--- with the canonical `accel_key` and `accel_mods` for this path.
--- To change the accelerator during runtime programatically, use
--- `gtk_accel_map_change_entry()`.
--- 
--- Set `accel_key` and `accel_mods` to 0 to request a removal of
--- the accelerator.
--- 
--- Note that `accel_path` string will be stored in a `GQuark`. Therefore, if you
--- pass a static string, you can save some memory by interning it first with
--- `g_intern_static_string()`.
---
--- ---
---
---@param accel_path string # valid accelerator path
---@param accel_key integer # the accelerator key
---@param accel_mods Gdk.ModifierType # the accelerator modifiers
---@return nil
function Gtk.AccelMap.add_entry(accel_path, accel_key, accel_mods) end

--- # function Gtk.AccelMap.add_filter()
---
--- Adds a filter to the global list of accel path filters.
--- 
--- Accel map entries whose accel path matches one of the filters
--- are skipped by `gtk_accel_map_foreach()`.
--- 
--- This function is intended for GTK+ modules that create their own
--- menus, but don’t want them to be saved into the applications accelerator
--- map dump.
---
--- ---
---
---@param filter_pattern string # a pattern (see `GPatternSpec`)
---@return nil
function Gtk.AccelMap.add_filter(filter_pattern) end

--- # function Gtk.AccelMap.change_entry()
---
--- Changes the `accel_key` and `accel_mods` currently associated with `accel_path`.
--- Due to conflicts with other accelerators, a change may not always be possible,
--- `replace` indicates whether other accelerators may be deleted to resolve such
--- conflicts. A change will only occur if all conflicts could be resolved (which
--- might not be the case if conflicting accelerators are locked). Successful
--- changes are indicated by a `true` return value.
--- 
--- Note that `accel_path` string will be stored in a `GQuark`. Therefore, if you
--- pass a static string, you can save some memory by interning it first with
--- `g_intern_static_string()`.
---
--- ---
---
---@param accel_path string # a valid accelerator path
---@param accel_key integer # the new accelerator key
---@param accel_mods Gdk.ModifierType # the new accelerator modifiers
---@param replace (boolean|nil) # `true` if other accelerators may be deleted upon conflicts
---@return (boolean|nil) # `true` if the accelerator could be changed, `false` otherwise
function Gtk.AccelMap.change_entry(accel_path, accel_key, accel_mods, replace) end

--- # function Gtk.AccelMap.foreach()
---
--- Loops over the entries in the accelerator map whose accel path
--- doesn’t match any of the filters added with `gtk_accel_map_add_filter()`,
--- and execute `foreach_func` on each. The signature of `foreach_func` is
--- that of `GtkAccelMapForeach`, the `changed` parameter indicates whether
--- this accelerator was changed during runtime (thus, would need
--- saving during an accelerator map dump).
---
--- ---
---
---@param data? userdata # data to be passed into `foreach_func`
---@param foreach_func Gtk.AccelMapForeach # function to be executed for each accel map entry which is not filtered out
---@return nil
function Gtk.AccelMap.foreach(data, foreach_func) end

--- # function Gtk.AccelMap.foreach_unfiltered()
---
--- Loops over all entries in the accelerator map, and execute
--- `foreach_func` on each. The signature of `foreach_func` is that of
--- `GtkAccelMapForeach`, the `changed` parameter indicates whether
--- this accelerator was changed during runtime (thus, would need
--- saving during an accelerator map dump).
---
--- ---
---
---@param data? userdata # data to be passed into `foreach_func`
---@param foreach_func Gtk.AccelMapForeach # function to be executed for each accel map entry
---@return nil
function Gtk.AccelMap.foreach_unfiltered(data, foreach_func) end

--- # function Gtk.AccelMap.get()
---
--- Gets the singleton global `GtkAccelMap` object. This object
--- is useful only for notification of changes to the accelerator
--- map via the ::changed signal; it isn’t a parameter to the
--- other accelerator map functions.
---
--- ---
---
---@return Gtk.AccelMap # the global `GtkAccelMap` object
function Gtk.AccelMap.get() end

--- # function Gtk.AccelMap.load()
---
--- Parses a file previously saved with `gtk_accel_map_save()` for
--- accelerator specifications, and propagates them accordingly.
---
--- ---
---
---@param file_name string # a file containing accelerator specifications, in the GLib file name encoding
---@return nil
function Gtk.AccelMap.load(file_name) end

--- # function Gtk.AccelMap.load_fd()
---
--- Filedescriptor variant of `gtk_accel_map_load()`.
--- 
--- Note that the file descriptor will not be closed by this function.
---
--- ---
---
---@param fd integer # a valid readable file descriptor
---@return nil
function Gtk.AccelMap.load_fd(fd) end

--- # function Gtk.AccelMap.load_scanner()
---
--- `GScanner` variant of `gtk_accel_map_load()`.
---
--- ---
---
---@param scanner GLib.Scanner # a `GScanner` which has already been provided with an input file
---@return nil
function Gtk.AccelMap.load_scanner(scanner) end

--- # function Gtk.AccelMap.lock_path()
---
--- Locks the given accelerator path. If the accelerator map doesn’t yet contain
--- an entry for `accel_path`, a new one is created.
--- 
--- Locking an accelerator path prevents its accelerator from being changed
--- during runtime. A locked accelerator path can be unlocked by
--- `gtk_accel_map_unlock_path()`. Refer to `gtk_accel_map_change_entry()`
--- for information about runtime accelerator changes.
--- 
--- If called more than once, `accel_path` remains locked until
--- `gtk_accel_map_unlock_path()` has been called an equivalent number
--- of times.
--- 
--- Note that locking of individual accelerator paths is independent from
--- locking the `GtkAccelGroup` containing them. For runtime accelerator
--- changes to be possible, both the accelerator path and its `GtkAccelGroup`
--- have to be unlocked.
---
--- ---
---
---@param accel_path string # a valid accelerator path
---@return nil
function Gtk.AccelMap.lock_path(accel_path) end

--- # function Gtk.AccelMap.lookup_entry()
---
--- Looks up the accelerator entry for `accel_path` and fills in `key`.
---
--- ---
---
---@param accel_path string # a valid accelerator path
---@param key? Gtk.AccelKey # the accelerator key to be filled in (optional)
---@return (boolean|nil) # `true` if `accel_path` is known, `false` otherwise
function Gtk.AccelMap.lookup_entry(accel_path, key) end

--- # function Gtk.AccelMap.save()
---
--- Saves current accelerator specifications (accelerator path, key
--- and modifiers) to `file_name`.
--- The file is written in a format suitable to be read back in by
--- `gtk_accel_map_load()`.
---
--- ---
---
---@param file_name string # the name of the file to contain accelerator specifications, in the GLib file name encoding
---@return nil
function Gtk.AccelMap.save(file_name) end

--- # function Gtk.AccelMap.save_fd()
---
--- Filedescriptor variant of `gtk_accel_map_save()`.
--- 
--- Note that the file descriptor will not be closed by this function.
---
--- ---
---
---@param fd integer # a valid writable file descriptor
---@return nil
function Gtk.AccelMap.save_fd(fd) end

--- # function Gtk.AccelMap.unlock_path()
---
--- Undoes the last call to `gtk_accel_map_lock_path()` on this `accel_path`.
--- Refer to `gtk_accel_map_lock_path()` for information about accelerator path locking.
---
--- ---
---
---@param accel_path string # a valid accelerator path
---@return nil
function Gtk.AccelMap.unlock_path(accel_path) end

--- # record Gtk.AccelMapClass
---
---@class Gtk.AccelMapClass
Gtk.AccelMapClass = {}

---@alias Gtk.AccelMapForeach fun(data: userdata, accel_path: string, accel_key: integer, accel_mods: Gdk.ModifierType, changed: (boolean|nil)): nil

--- # class Gtk.Accessible
---
--- The `GtkAccessible` class is the base class for accessible
--- implementations for `GtkWidget` subclasses. It is a thin
--- wrapper around `AtkObject`, which adds facilities for associating
--- a widget with its accessible object.
--- 
--- An accessible implementation for a third-party widget should
--- derive from `GtkAccessible` and implement the suitable interfaces
--- from ATK, such as `AtkText` or `AtkSelection`. To establish
--- the connection between the widget class and its corresponding
--- acccessible implementation, override the get_accessible vfunc
--- in `GtkWidgetClass`.
---
--- ---
---
---@class Gtk.Accessible : Atk.Object
---@field parent Atk.Object
---@field priv Gtk.AccessiblePrivate
Gtk.Accessible = {}

--- # method Gtk.Accessible:connect_widget_destroyed()
---
--- This function specifies the callback function to be called
--- when the widget corresponding to a GtkAccessible is destroyed.
---
--- ---
---
---@param self Gtk.Accessible # a `GtkAccessible`
---@return nil
function Gtk.Accessible:connect_widget_destroyed() end

--- # method Gtk.Accessible:get_widget()
---
--- Gets the `GtkWidget` corresponding to the `GtkAccessible`.
--- The returned widget does not have a reference added, so
--- you do not need to unref it.
---
--- ---
---
---@param self Gtk.Accessible # a `GtkAccessible`
---@return Gtk.Widget # pointer to the `GtkWidget` corresponding to the `GtkAccessible`, or `nil`.
function Gtk.Accessible:get_widget() end

--- # method Gtk.Accessible:set_widget()
---
--- Sets the `GtkWidget` corresponding to the `GtkAccessible`.
--- 
--- `accessible` will not hold a reference to `widget`.
--- It is the caller’s responsibility to ensure that when `widget`
--- is destroyed, the widget is unset by calling this function
--- again with `widget` set to `nil`.
---
--- ---
---
---@param self Gtk.Accessible # a `GtkAccessible`
---@param widget? Gtk.Widget # a `GtkWidget` or `nil` to unset
---@return nil
function Gtk.Accessible:set_widget(widget) end

--- # record Gtk.AccessibleClass
---
---@class Gtk.AccessibleClass
---@field parent_class Atk.ObjectClass
---@field connect_widget_destroyed fun(accessible: Gtk.Accessible): nil
---@field widget_set fun(accessible: Gtk.Accessible): nil
---@field widget_unset fun(accessible: Gtk.Accessible): nil
Gtk.AccessibleClass = {}

--- # record Gtk.AccessiblePrivate
---
---@class Gtk.AccessiblePrivate
Gtk.AccessiblePrivate = {}

--- # class Gtk.Action
---
--- > In GTK+ 3.10, GtkAction has been deprecated. Use `GAction`
--- > instead, and associate actions with `GtkActionable` widgets. Use
--- > `GMenuModel` for creating menus with `gtk_menu_new_from_model()`.
--- 
--- Actions represent operations that the user can be perform, along with
--- some information how it should be presented in the interface. Each action
--- provides methods to create icons, menu items and toolbar items
--- representing itself.
--- 
--- As well as the callback that is called when the action gets activated,
--- the following also gets associated with the action:
--- 
--- - a name (not translated, for path lookup)
--- 
--- - a label (translated, for display)
--- 
--- - an accelerator
--- 
--- - whether label indicates a stock id
--- 
--- - a tooltip (optional, translated)
--- 
--- - a toolbar label (optional, shorter than label)
--- 
--- 
--- The action will also have some state information:
--- 
--- - visible (shown/hidden)
--- 
--- - sensitive (enabled/disabled)
--- 
--- Apart from regular actions, there are [toggle actions][GtkToggleAction],
--- which can be toggled between two states and
--- [radio actions][GtkRadioAction], of which only one in a group
--- can be in the “active” state. Other actions can be implemented as `GtkAction`
--- subclasses.
--- 
--- Each action can have one or more proxy widgets. To act as an action proxy,
--- widget needs to implement `GtkActivatable` interface. Proxies mirror the state
--- of the action and should change when the action’s state changes. Properties
--- that are always mirrored by proxies are `GtkAction`:sensitive and
--- `GtkAction`:visible. `GtkAction`:gicon, `GtkAction`:icon-name, `GtkAction`:label,
--- `GtkAction`:short-label and `GtkAction`:stock-id properties are only mirorred
--- if proxy widget has `GtkActivatable`:use-action-appearance property set to
--- `true`.
--- 
--- When the proxy is activated, it should activate its action.
---
--- ---
---
---@class Gtk.Action : GObject.Object, Gtk.Buildable
---@field object GObject.Object
---@field private_data Gtk.ActionPrivate
---@operator call: Gtk.Action
Gtk.Action = {}

--- # method Gtk.Action:activate()
---
--- Emits the “activate” signal on the specified action, if it isn't
--- insensitive. This gets called by the proxy widgets when they get
--- activated.
--- 
--- It can also be used to manually activate an action.
---
--- ---
---
---@param self Gtk.Action # the action object
---@return nil
function Gtk.Action:activate() end

--- # method Gtk.Action:block_activate()
---
--- Disable activation signals from the action
--- 
--- This is needed when updating the state of your proxy
--- `GtkActivatable` widget could result in calling `gtk_action_activate()`,
--- this is a convenience function to avoid recursing in those
--- cases (updating toggle state for instance).
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@return nil
function Gtk.Action:block_activate() end

--- # method Gtk.Action:connect_accelerator()
---
--- Installs the accelerator for `action` if `action` has an
--- accel path and group. See `gtk_action_set_accel_path()` and
--- `gtk_action_set_accel_group()`
--- 
--- Since multiple proxies may independently trigger the installation
--- of the accelerator, the `action` counts the number of times this
--- function has been called and doesn’t remove the accelerator until
--- `gtk_action_disconnect_accelerator()` has been called as many times.
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@return nil
function Gtk.Action:connect_accelerator() end

--- # method Gtk.Action:create_icon()
---
--- This function is intended for use by action implementations to
--- create icons displayed in the proxy widgets.
---
--- ---
---
---@param self Gtk.Action # the action object
---@param icon_size integer # the size of the icon (`GtkIconSize`) that should be created.
---@return Gtk.Widget # a widget that displays the icon for this action.
function Gtk.Action:create_icon(icon_size) end

--- # method Gtk.Action:create_menu()
---
--- If `action` provides a `GtkMenu` widget as a submenu for the menu
--- item or the toolbar item it creates, this function returns an
--- instance of that menu.
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@return Gtk.Widget # the menu item provided by the action, or `nil`.
function Gtk.Action:create_menu() end

--- # method Gtk.Action:create_menu_item()
---
--- Creates a menu item widget that proxies for the given action.
---
--- ---
---
---@param self Gtk.Action # the action object
---@return Gtk.Widget # a menu item connected to the action.
function Gtk.Action:create_menu_item() end

--- # method Gtk.Action:create_tool_item()
---
--- Creates a toolbar item widget that proxies for the given action.
---
--- ---
---
---@param self Gtk.Action # the action object
---@return Gtk.Widget # a toolbar item connected to the action.
function Gtk.Action:create_tool_item() end

--- # method Gtk.Action:disconnect_accelerator()
---
--- Undoes the effect of one call to `gtk_action_connect_accelerator()`.
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@return nil
function Gtk.Action:disconnect_accelerator() end

--- # method Gtk.Action:get_accel_closure()
---
--- Returns the accel closure for this action.
---
--- ---
---
---@param self Gtk.Action # the action object
---@return GObject.Closure # the accel closure for this action. The returned closure is owned by GTK+ and must not be unreffed or modified.
function Gtk.Action:get_accel_closure() end

--- # method Gtk.Action:get_accel_path()
---
--- Returns the accel path for this action.
---
--- ---
---
---@param self Gtk.Action # the action object
---@return string # the accel path for this action, or `nil` if none is set. The returned string is owned by GTK+ and must not be freed or modified.
function Gtk.Action:get_accel_path() end

--- # method Gtk.Action:get_always_show_image()
---
--- Returns whether `action`'s menu item proxies will always
--- show their image, if available.
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@return (boolean|nil) # `true` if the menu item proxies will always show their image
function Gtk.Action:get_always_show_image() end

--- # method Gtk.Action:get_gicon()
---
--- Gets the gicon of `action`.
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@return Gio.Icon # The action’s `GIcon` if one is set.
function Gtk.Action:get_gicon() end

--- # method Gtk.Action:get_icon_name()
---
--- Gets the icon name of `action`.
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@return string # the icon name
function Gtk.Action:get_icon_name() end

--- # method Gtk.Action:get_is_important()
---
--- Checks whether `action` is important or not
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@return (boolean|nil) # whether `action` is important
function Gtk.Action:get_is_important() end

--- # method Gtk.Action:get_label()
---
--- Gets the label text of `action`.
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@return string # the label text
function Gtk.Action:get_label() end

--- # method Gtk.Action:get_name()
---
--- Returns the name of the action.
---
--- ---
---
---@param self Gtk.Action # the action object
---@return string # the name of the action. The string belongs to GTK+ and should not be freed.
function Gtk.Action:get_name() end

--- # method Gtk.Action:get_proxies()
---
--- Returns the proxy widgets for an action.
--- See also `gtk_activatable_get_related_action()`.
---
--- ---
---
---@param self Gtk.Action # the action object
---@return Gtk.Widget[] # a `GSList` of proxy widgets. The list is owned by GTK+ and must not be modified.
function Gtk.Action:get_proxies() end

--- # method Gtk.Action:get_sensitive()
---
--- Returns whether the action itself is sensitive. Note that this doesn’t
--- necessarily mean effective sensitivity. See `gtk_action_is_sensitive()`
--- for that.
---
--- ---
---
---@param self Gtk.Action # the action object
---@return (boolean|nil) # `true` if the action itself is sensitive.
function Gtk.Action:get_sensitive() end

--- # method Gtk.Action:get_short_label()
---
--- Gets the short label text of `action`.
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@return string # the short label text.
function Gtk.Action:get_short_label() end

--- # method Gtk.Action:get_stock_id()
---
--- Gets the stock id of `action`.
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@return string # the stock id
function Gtk.Action:get_stock_id() end

--- # method Gtk.Action:get_tooltip()
---
--- Gets the tooltip text of `action`.
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@return string # the tooltip text
function Gtk.Action:get_tooltip() end

--- # method Gtk.Action:get_visible()
---
--- Returns whether the action itself is visible. Note that this doesn’t
--- necessarily mean effective visibility. See `gtk_action_is_sensitive()`
--- for that.
---
--- ---
---
---@param self Gtk.Action # the action object
---@return (boolean|nil) # `true` if the action itself is visible.
function Gtk.Action:get_visible() end

--- # method Gtk.Action:get_visible_horizontal()
---
--- Checks whether `action` is visible when horizontal
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@return (boolean|nil) # whether `action` is visible when horizontal
function Gtk.Action:get_visible_horizontal() end

--- # method Gtk.Action:get_visible_vertical()
---
--- Checks whether `action` is visible when horizontal
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@return (boolean|nil) # whether `action` is visible when horizontal
function Gtk.Action:get_visible_vertical() end

--- # method Gtk.Action:is_sensitive()
---
--- Returns whether the action is effectively sensitive.
---
--- ---
---
---@param self Gtk.Action # the action object
---@return (boolean|nil) # `true` if the action and its associated action group are both sensitive.
function Gtk.Action:is_sensitive() end

--- # method Gtk.Action:is_visible()
---
--- Returns whether the action is effectively visible.
---
--- ---
---
---@param self Gtk.Action # the action object
---@return (boolean|nil) # `true` if the action and its associated action group are both visible.
function Gtk.Action:is_visible() end

--- # method Gtk.Action:set_accel_group()
---
--- Sets the `GtkAccelGroup` in which the accelerator for this action
--- will be installed.
---
--- ---
---
---@param self Gtk.Action # the action object
---@param accel_group? Gtk.AccelGroup # a `GtkAccelGroup` or `nil`
---@return nil
function Gtk.Action:set_accel_group(accel_group) end

--- # method Gtk.Action:set_accel_path()
---
--- Sets the accel path for this action.  All proxy widgets associated
--- with the action will have this accel path, so that their
--- accelerators are consistent.
--- 
--- Note that `accel_path` string will be stored in a `GQuark`. Therefore, if you
--- pass a static string, you can save some memory by interning it first with
--- `g_intern_static_string()`.
---
--- ---
---
---@param self Gtk.Action # the action object
---@param accel_path string # the accelerator path
---@return nil
function Gtk.Action:set_accel_path(accel_path) end

--- # method Gtk.Action:set_always_show_image()
---
--- Sets whether `action`'s menu item proxies will ignore the
--- `GtkSettings`:gtk-menu-images setting and always show their image, if available.
--- 
--- Use this if the menu item would be useless or hard to use
--- without their image.
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@param always_show (boolean|nil) # `true` if menuitem proxies should always show their image
---@return nil
function Gtk.Action:set_always_show_image(always_show) end

--- # method Gtk.Action:set_gicon()
---
--- Sets the icon of `action`.
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@param icon Gio.Icon # the `GIcon` to set
---@return nil
function Gtk.Action:set_gicon(icon) end

--- # method Gtk.Action:set_icon_name()
---
--- Sets the icon name on `action`
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@param icon_name string # the icon name to set
---@return nil
function Gtk.Action:set_icon_name(icon_name) end

--- # method Gtk.Action:set_is_important()
---
--- Sets whether the action is important, this attribute is used
--- primarily by toolbar items to decide whether to show a label
--- or not.
---
--- ---
---
---@param self Gtk.Action # the action object
---@param is_important (boolean|nil) # `true` to make the action important
---@return nil
function Gtk.Action:set_is_important(is_important) end

--- # method Gtk.Action:set_label()
---
--- Sets the label of `action`.
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@param label string # the label text to set
---@return nil
function Gtk.Action:set_label(label) end

--- # method Gtk.Action:set_sensitive()
---
--- Sets the :sensitive property of the action to `sensitive`. Note that
--- this doesn’t necessarily mean effective sensitivity. See
--- `gtk_action_is_sensitive()`
--- for that.
---
--- ---
---
---@param self Gtk.Action # the action object
---@param sensitive (boolean|nil) # `true` to make the action sensitive
---@return nil
function Gtk.Action:set_sensitive(sensitive) end

--- # method Gtk.Action:set_short_label()
---
--- Sets a shorter label text on `action`.
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@param short_label string # the label text to set
---@return nil
function Gtk.Action:set_short_label(short_label) end

--- # method Gtk.Action:set_stock_id()
---
--- Sets the stock id on `action`
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@param stock_id string # the stock id
---@return nil
function Gtk.Action:set_stock_id(stock_id) end

--- # method Gtk.Action:set_tooltip()
---
--- Sets the tooltip text on `action`
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@param tooltip string # the tooltip text
---@return nil
function Gtk.Action:set_tooltip(tooltip) end

--- # method Gtk.Action:set_visible()
---
--- Sets the :visible property of the action to `visible`. Note that
--- this doesn’t necessarily mean effective visibility. See
--- `gtk_action_is_visible()`
--- for that.
---
--- ---
---
---@param self Gtk.Action # the action object
---@param visible (boolean|nil) # `true` to make the action visible
---@return nil
function Gtk.Action:set_visible(visible) end

--- # method Gtk.Action:set_visible_horizontal()
---
--- Sets whether `action` is visible when horizontal
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@param visible_horizontal (boolean|nil) # whether the action is visible horizontally
---@return nil
function Gtk.Action:set_visible_horizontal(visible_horizontal) end

--- # method Gtk.Action:set_visible_vertical()
---
--- Sets whether `action` is visible when vertical
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@param visible_vertical (boolean|nil) # whether the action is visible vertically
---@return nil
function Gtk.Action:set_visible_vertical(visible_vertical) end

--- # method Gtk.Action:unblock_activate()
---
--- Reenable activation signals from the action
---
--- ---
---
---@param self Gtk.Action # a `GtkAction`
---@return nil
function Gtk.Action:unblock_activate() end

--- # function Gtk.Action.new()
---
--- Creates a new `GtkAction` object. To add the action to a
--- `GtkActionGroup` and set the accelerator for the action,
--- call `gtk_action_group_add_action_with_accel()`.
--- See the [UI Definition section][XML-UI] for information on allowed action
--- names.
---
--- ---
---
---@param name string # A unique name for the action
---@param label? string # the label displayed in menu items and on buttons, or `nil`
---@param tooltip? string # a tooltip for the action, or `nil`
---@param stock_id? string # the stock icon to display in widgets representing the action, or `nil`
---@return Gtk.Action # a new `GtkAction`
function Gtk.Action.new(name, label, tooltip, stock_id) end

--- # class Gtk.ActionBar
---
--- GtkActionBar is designed to present contextual actions. It is
--- expected to be displayed below the content and expand horizontally
--- to fill the area.
--- 
--- It allows placing children at the start or the end. In addition, it
--- contains an internal centered box which is centered with respect to
--- the full width of the box, even if the children at either side take
--- up different amounts of space.
--- 
--- # CSS nodes
--- 
--- GtkActionBar has a single CSS node with name actionbar.
---
--- ---
---
---@class Gtk.ActionBar : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field bin Gtk.Bin
---@operator call: Gtk.ActionBar
Gtk.ActionBar = {}

--- # method Gtk.ActionBar:get_center_widget()
---
--- Retrieves the center bar widget of the bar.
---
--- ---
---
---@param self Gtk.ActionBar # a `GtkActionBar`
---@return Gtk.Widget # the center `GtkWidget` or `nil`.
function Gtk.ActionBar:get_center_widget() end

--- # method Gtk.ActionBar:pack_end()
---
--- Adds `child` to `action_bar`, packed with reference to the
--- end of the `action_bar`.
---
--- ---
---
---@param self Gtk.ActionBar # A `GtkActionBar`
---@param child Gtk.Widget # the `GtkWidget` to be added to `action_bar`
---@return nil
function Gtk.ActionBar:pack_end(child) end

--- # method Gtk.ActionBar:pack_start()
---
--- Adds `child` to `action_bar`, packed with reference to the
--- start of the `action_bar`.
---
--- ---
---
---@param self Gtk.ActionBar # A `GtkActionBar`
---@param child Gtk.Widget # the `GtkWidget` to be added to `action_bar`
---@return nil
function Gtk.ActionBar:pack_start(child) end

--- # method Gtk.ActionBar:set_center_widget()
---
--- Sets the center widget for the `GtkActionBar`.
---
--- ---
---
---@param self Gtk.ActionBar # a `GtkActionBar`
---@param center_widget? Gtk.Widget # a widget to use for the center
---@return nil
function Gtk.ActionBar:set_center_widget(center_widget) end

--- # function Gtk.ActionBar.new()
---
--- Creates a new `GtkActionBar` widget.
---
--- ---
---
---@return Gtk.Widget # a new `GtkActionBar`
function Gtk.ActionBar.new() end

--- # record Gtk.ActionBarClass
---
---@class Gtk.ActionBarClass
---@field parent_class Gtk.BinClass
Gtk.ActionBarClass = {}

--- # record Gtk.ActionBarPrivate
---
---@class Gtk.ActionBarPrivate
Gtk.ActionBarPrivate = {}

--- # record Gtk.ActionClass
---
---@class Gtk.ActionClass
---@field parent_class GObject.ObjectClass # The parent class.
---@field activate fun(action: Gtk.Action): nil
---@field menu_item_type Gtk.GType
---@field toolbar_item_type Gtk.GType
---@field create_menu_item fun(action: Gtk.Action): Gtk.Widget
---@field create_tool_item fun(action: Gtk.Action): Gtk.Widget
---@field connect_proxy fun(action: Gtk.Action, proxy: Gtk.Widget): nil
---@field disconnect_proxy fun(action: Gtk.Action, proxy: Gtk.Widget): nil
---@field create_menu fun(action: Gtk.Action): Gtk.Widget
Gtk.ActionClass = {}

--- # record Gtk.ActionEntry
---
--- `GtkActionEntry` structs are used with `gtk_action_group_add_actions()` to
--- construct actions.
---
--- ---
---
---@class Gtk.ActionEntry
---@field name string # The name of the action.
---@field stock_id string # The stock id for the action, or the name of an icon from the icon theme.
---@field label string # The label for the action. This field should typically be marked for translation, see `gtk_action_group_set_translation_domain()`. If `label` is `nil`, the label of the stock item with id `stock_id` is used.
---@field accelerator string # The accelerator for the action, in the format understood by `gtk_accelerator_parse()`.
---@field tooltip string # The tooltip for the action. This field should typically be marked for translation, see `gtk_action_group_set_translation_domain()`.
---@field callback GObject.Callback # The function to call when the action is activated.
Gtk.ActionEntry = {}

--- # class Gtk.ActionGroup
---
--- Actions are organised into groups. An action group is essentially a
--- map from names to `GtkAction` objects.
--- 
--- All actions that would make sense to use in a particular context
--- should be in a single group. Multiple action groups may be used for a
--- particular user interface. In fact, it is expected that most nontrivial
--- applications will make use of multiple groups. For example, in an
--- application that can edit multiple documents, one group holding global
--- actions (e.g. quit, about, new), and one group per document holding
--- actions that act on that document (eg. save, cut/copy/paste, etc). Each
--- window’s menus would be constructed from a combination of two action
--- groups.
--- 
--- ## Accelerators ## {`Action`-Accel}
--- 
--- Accelerators are handled by the GTK+ accelerator map. All actions are
--- assigned an accelerator path (which normally has the form
--- `<Actions>/group-name/action-name`) and a shortcut is associated with
--- this accelerator path. All menuitems and toolitems take on this accelerator
--- path. The GTK+ accelerator map code makes sure that the correct shortcut
--- is displayed next to the menu item.
--- 
--- # GtkActionGroup as GtkBuildable # {`GtkActionGroup`-BUILDER-UI}
--- 
--- The `GtkActionGroup` implementation of the `GtkBuildable` interface accepts
--- `GtkAction` objects as `<child>` elements in UI definitions.
--- 
--- Note that it is probably more common to define actions and action groups
--- in the code, since they are directly related to what the code can do.
--- 
--- The GtkActionGroup implementation of the GtkBuildable interface supports
--- a custom `<accelerator>` element, which has attributes named “key“ and
--- “modifiers“ and allows to specify accelerators. This is similar to the
--- `<accelerator>` element of `GtkWidget`, the main difference is that
--- it doesn’t allow you to specify a signal.
--- 
--- ## A `GtkDialog` UI definition fragment. ##
--- 
--- ```xml
--- <object class="GtkActionGroup" id="actiongroup">
---   <child>
---       <object class="GtkAction" id="About">
---           <property name="name">About</property>
---           <property name="stock_id">gtk-about</property>
---           <signal handler="about_activate" name="activate"/>
---       </object>
---       <accelerator key="F1" modifiers="GDK_CONTROL_MASK | GDK_SHIFT_MASK"/>
---   </child>
--- </object>
--- ```
---
--- ---
---
---@class Gtk.ActionGroup : GObject.Object, Gtk.Buildable
---@field parent GObject.Object
---@field priv Gtk.ActionGroupPrivate
---@operator call: Gtk.ActionGroup
Gtk.ActionGroup = {}

--- # method Gtk.ActionGroup:add_action()
---
--- Adds an action object to the action group. Note that this function
--- does not set up the accel path of the action, which can lead to problems
--- if a user tries to modify the accelerator of a menuitem associated with
--- the action. Therefore you must either set the accel path yourself with
--- `gtk_action_set_accel_path()`, or use
--- `gtk_action_group_add_action_with_accel (..., NULL)`.
---
--- ---
---
---@param self Gtk.ActionGroup # the action group
---@param action Gtk.Action # an action
---@return nil
function Gtk.ActionGroup:add_action(action) end

--- # method Gtk.ActionGroup:add_action_with_accel()
---
--- Adds an action object to the action group and sets up the accelerator.
--- 
--- If `accelerator` is `nil`, attempts to use the accelerator associated
--- with the stock_id of the action.
--- 
--- Accel paths are set to `<Actions>/group-name/action-name`.
---
--- ---
---
---@param self Gtk.ActionGroup # the action group
---@param action Gtk.Action # the action to add
---@param accelerator? string # the accelerator for the action, in the format understood by `gtk_accelerator_parse()`, or "" for no accelerator, or `nil` to use the stock accelerator
---@return nil
function Gtk.ActionGroup:add_action_with_accel(action, accelerator) end

--- # method Gtk.ActionGroup:get_accel_group()
---
--- Gets the accelerator group.
---
--- ---
---
---@param self Gtk.ActionGroup # a `GtkActionGroup`
---@return Gtk.AccelGroup # the accelerator group associated with this action group or `nil` if there is none.
function Gtk.ActionGroup:get_accel_group() end

--- # method Gtk.ActionGroup:get_action()
---
--- Looks up an action in the action group by name.
---
--- ---
---
---@param self Gtk.ActionGroup # the action group
---@param action_name string # the name of the action
---@return Gtk.Action # the action, or `nil` if no action by that name exists
function Gtk.ActionGroup:get_action(action_name) end

--- # method Gtk.ActionGroup:get_name()
---
--- Gets the name of the action group.
---
--- ---
---
---@param self Gtk.ActionGroup # the action group
---@return string # the name of the action group.
function Gtk.ActionGroup:get_name() end

--- # method Gtk.ActionGroup:get_sensitive()
---
--- Returns `true` if the group is sensitive.  The constituent actions
--- can only be logically sensitive (see `gtk_action_is_sensitive()`) if
--- they are sensitive (see `gtk_action_get_sensitive()`) and their group
--- is sensitive.
---
--- ---
---
---@param self Gtk.ActionGroup # the action group
---@return (boolean|nil) # `true` if the group is sensitive.
function Gtk.ActionGroup:get_sensitive() end

--- # method Gtk.ActionGroup:get_visible()
---
--- Returns `true` if the group is visible.  The constituent actions
--- can only be logically visible (see `gtk_action_is_visible()`) if
--- they are visible (see `gtk_action_get_visible()`) and their group
--- is visible.
---
--- ---
---
---@param self Gtk.ActionGroup # the action group
---@return (boolean|nil) # `true` if the group is visible.
function Gtk.ActionGroup:get_visible() end

--- # method Gtk.ActionGroup:list_actions()
---
--- Lists the actions in the action group.
---
--- ---
---
---@param self Gtk.ActionGroup # the action group
---@return Gtk.Action[] # an allocated list of the action objects in the action group
function Gtk.ActionGroup:list_actions() end

--- # method Gtk.ActionGroup:remove_action()
---
--- Removes an action object from the action group.
---
--- ---
---
---@param self Gtk.ActionGroup # the action group
---@param action Gtk.Action # an action
---@return nil
function Gtk.ActionGroup:remove_action(action) end

--- # method Gtk.ActionGroup:set_accel_group()
---
--- Sets the accelerator group to be used by every action in this group.
---
--- ---
---
---@param self Gtk.ActionGroup # a `GtkActionGroup`
---@param accel_group? Gtk.AccelGroup # a `GtkAccelGroup` to set or `nil`
---@return nil
function Gtk.ActionGroup:set_accel_group(accel_group) end

--- # method Gtk.ActionGroup:set_sensitive()
---
--- Changes the sensitivity of `action_group`
---
--- ---
---
---@param self Gtk.ActionGroup # the action group
---@param sensitive (boolean|nil) # new sensitivity
---@return nil
function Gtk.ActionGroup:set_sensitive(sensitive) end

--- # method Gtk.ActionGroup:set_translate_func()
---
--- Sets a function to be used for translating the `label` and `tooltip` of
--- `GtkActionEntrys` added by `gtk_action_group_add_actions()`.
--- 
--- If you’re using `gettext()`, it is enough to set the translation domain
--- with `gtk_action_group_set_translation_domain()`.
---
--- ---
---
---@param self Gtk.ActionGroup # a `GtkActionGroup`
---@param func Gtk.TranslateFunc # a `GtkTranslateFunc`
---@param data? userdata # data to be passed to `func` and `notify`
---@param notify GLib.DestroyNotify # a `GDestroyNotify` function to be called when `action_group` is destroyed and when the translation function is changed again
---@return nil
function Gtk.ActionGroup:set_translate_func(func, data, notify) end

--- # method Gtk.ActionGroup:set_translation_domain()
---
--- Sets the translation domain and uses `g_dgettext()` for translating the
--- `label` and `tooltip` of `GtkActionEntrys` added by
--- `gtk_action_group_add_actions()`.
--- 
--- If you’re not using `gettext()` for localization, see
--- `gtk_action_group_set_translate_func()`.
---
--- ---
---
---@param self Gtk.ActionGroup # a `GtkActionGroup`
---@param domain? string # the translation domain to use for `g_dgettext()` calls, or `nil` to use the domain set with `textdomain()`
---@return nil
function Gtk.ActionGroup:set_translation_domain(domain) end

--- # method Gtk.ActionGroup:set_visible()
---
--- Changes the visible of `action_group`.
---
--- ---
---
---@param self Gtk.ActionGroup # the action group
---@param visible (boolean|nil) # new visiblity
---@return nil
function Gtk.ActionGroup:set_visible(visible) end

--- # method Gtk.ActionGroup:translate_string()
---
--- Translates a string using the function set with
--- `gtk_action_group_set_translate_func()`. This
--- is mainly intended for language bindings.
---
--- ---
---
---@param self Gtk.ActionGroup # a `GtkActionGroup`
---@param string string # a string
---@return string # the translation of `string`
function Gtk.ActionGroup:translate_string(string) end

--- # function Gtk.ActionGroup.new()
---
--- Creates a new `GtkActionGroup` object. The name of the action group
--- is used when associating [keybindings][Action-Accel]
--- with the actions.
---
--- ---
---
---@param name string # the name of the action group.
---@return Gtk.ActionGroup # the new `GtkActionGroup`
function Gtk.ActionGroup.new(name) end

--- # record Gtk.ActionGroupClass
---
---@class Gtk.ActionGroupClass
---@field parent_class GObject.ObjectClass # The parent class.
---@field get_action fun(action_group: Gtk.ActionGroup, action_name: string): Gtk.Action
Gtk.ActionGroupClass = {}

--- # record Gtk.ActionGroupPrivate
---
---@class Gtk.ActionGroupPrivate
Gtk.ActionGroupPrivate = {}

--- # record Gtk.ActionPrivate
---
---@class Gtk.ActionPrivate
Gtk.ActionPrivate = {}

--- # interface Gtk.Actionable
---
--- This interface provides a convenient way of associating widgets with
--- actions on a `GtkApplicationWindow` or `GtkApplication`.
--- 
--- It primarily consists of two properties: `GtkActionable`:action-name
--- and `GtkActionable`:action-target. There are also some convenience APIs
--- for setting these properties.
--- 
--- The action will be looked up in action groups that are found among
--- the widgets ancestors. Most commonly, these will be the actions with
--- the “win.” or “app.” prefix that are associated with the `GtkApplicationWindow`
--- or `GtkApplication`, but other action groups that are added with
--- `gtk_widget_insert_action_group()` will be consulted as well.
---
--- ---
---
---@class Gtk.Actionable
Gtk.Actionable = {}

--- # method Gtk.Actionable:get_action_name()
---
--- Gets the action name for `actionable`.
--- 
--- See `gtk_actionable_set_action_name()` for more information.
---
--- ---
---
---@param self Gtk.Actionable # a `GtkActionable` widget
---@return string # the action name, or `nil` if none is set
function Gtk.Actionable:get_action_name() end

--- # method Gtk.Actionable:get_action_target_value()
---
--- Gets the current target value of `actionable`.
--- 
--- See `gtk_actionable_set_action_target_value()` for more information.
---
--- ---
---
---@param self Gtk.Actionable # a `GtkActionable` widget
---@return GLib.Variant # the current target value
function Gtk.Actionable:get_action_target_value() end

--- # method Gtk.Actionable:set_action_name()
---
--- Specifies the name of the action with which this widget should be
--- associated.  If `action_name` is `nil` then the widget will be
--- unassociated from any previous action.
--- 
--- Usually this function is used when the widget is located (or will be
--- located) within the hierarchy of a `GtkApplicationWindow`.
--- 
--- Names are of the form “win.save” or “app.quit” for actions on the
--- containing `GtkApplicationWindow` or its associated `GtkApplication`,
--- respectively.  This is the same form used for actions in the `GMenu`
--- associated with the window.
---
--- ---
---
---@param self Gtk.Actionable # a `GtkActionable` widget
---@param action_name? string # an action name, or `nil`
---@return nil
function Gtk.Actionable:set_action_name(action_name) end

--- # method Gtk.Actionable:set_action_target_value()
---
--- Sets the target value of an actionable widget.
--- 
--- If `target_value` is `nil` then the target value is unset.
--- 
--- The target value has two purposes.  First, it is used as the
--- parameter to activation of the action associated with the
--- `GtkActionable` widget. Second, it is used to determine if the widget
--- should be rendered as “active” — the widget is active if the state
--- is equal to the given target.
--- 
--- Consider the example of associating a set of buttons with a `GAction`
--- with string state in a typical “radio button” situation.  Each button
--- will be associated with the same action, but with a different target
--- value for that action.  Clicking on a particular button will activate
--- the action with the target of that button, which will typically cause
--- the action’s state to change to that value.  Since the action’s state
--- is now equal to the target value of the button, the button will now
--- be rendered as active (and the other buttons, with different targets,
--- rendered inactive).
---
--- ---
---
---@param self Gtk.Actionable # a `GtkActionable` widget
---@param target_value? GLib.Variant # a `GVariant` to set as the target value, or `nil`
---@return nil
function Gtk.Actionable:set_action_target_value(target_value) end

--- # method Gtk.Actionable:set_detailed_action_name()
---
--- Sets the action-name and associated string target value of an
--- actionable widget.
--- 
--- `detailed_action_name` is a string in the format accepted by
--- `g_action_parse_detailed_name()`.
--- 
--- (Note that prior to version 3.22.25,
--- this function is only usable for actions with a simple "s" target, and
--- `detailed_action_name` must be of the form `"action::target"` where
--- `action` is the action name and `target` is the string to use
--- as the target.)
---
--- ---
---
---@param self Gtk.Actionable # a `GtkActionable` widget
---@param detailed_action_name string # the detailed action name
---@return nil
function Gtk.Actionable:set_detailed_action_name(detailed_action_name) end

--- # record Gtk.ActionableInterface
---
--- The interface vtable for `GtkActionable`.
---
--- ---
---
---@class Gtk.ActionableInterface
---@field g_iface GObject.TypeInterface
---@field get_action_name fun(actionable: Gtk.Actionable): string
---@field set_action_name fun(actionable: Gtk.Actionable, action_name: string): nil
---@field get_action_target_value fun(actionable: Gtk.Actionable): GLib.Variant
---@field set_action_target_value fun(actionable: Gtk.Actionable, target_value: GLib.Variant): nil
Gtk.ActionableInterface = {}

--- # interface Gtk.Activatable
---
--- Activatable widgets can be connected to a `GtkAction` and reflects
--- the state of its action. A `GtkActivatable` can also provide feedback
--- through its action, as they are responsible for activating their
--- related actions.
--- 
--- # Implementing GtkActivatable
--- 
--- When extending a class that is already `GtkActivatable`; it is only
--- necessary to implement the `GtkActivatable`->`sync_action_properties()`
--- and `GtkActivatable`->`update()` methods and chain up to the parent
--- implementation, however when introducing
--- a new `GtkActivatable` class; the `GtkActivatable`:related-action and
--- `GtkActivatable`:use-action-appearance properties need to be handled by
--- the implementor. Handling these properties is mostly a matter of installing
--- the action pointer and boolean flag on your instance, and calling
--- `gtk_activatable_do_set_related_action()` and
--- `gtk_activatable_sync_action_properties()` at the appropriate times.
--- 
--- ## A class fragment implementing `GtkActivatable`
--- 
--- ```c
--- 
--- enum {
--- ...
--- 
--- PROP_ACTIVATABLE_RELATED_ACTION,
--- PROP_ACTIVATABLE_USE_ACTION_APPEARANCE
--- }
--- 
--- struct _FooBarPrivate
--- {
--- 
---   ...
--- 
---   GtkAction      *action;
---   gboolean        use_action_appearance;
--- };
--- 
--- ...
--- 
--- static void foo_bar_activatable_interface_init         (GtkActivatableIface  *iface);
--- static void foo_bar_activatable_update                 (GtkActivatable       *activatable,
--- 						           GtkAction            *action,
--- 						           const gchar          *property_name);
--- static void foo_bar_activatable_sync_action_properties (GtkActivatable       *activatable,
--- 						           GtkAction            *action);
--- ...
--- 
--- 
--- static void
--- foo_bar_class_init (FooBarClass *klass)
--- {
--- 
---   ...
--- 
---   g_object_class_override_property (gobject_class, PROP_ACTIVATABLE_RELATED_ACTION, "related-action");
---   g_object_class_override_property (gobject_class, PROP_ACTIVATABLE_USE_ACTION_APPEARANCE, "use-action-appearance");
--- 
---   ...
--- }
--- 
--- 
--- static void
--- foo_bar_activatable_interface_init (GtkActivatableIface  *iface)
--- {
---   iface->update = foo_bar_activatable_update;
---   iface->sync_action_properties = foo_bar_activatable_sync_action_properties;
--- }
--- 
--- ... Break the reference using `gtk_activatable_do_set_related_action()`...
--- 
--- static void
--- foo_bar_dispose (GObject *object)
--- {
---   FooBar *bar = FOO_BAR (object);
---   FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (bar);
--- 
---   ...
--- 
---   if (priv->action)
---     {
---       gtk_activatable_do_set_related_action (GTK_ACTIVATABLE (bar), NULL);
---       priv->action = NULL;
---     }
---   G_OBJECT_CLASS (foo_bar_parent_class)->dispose (object);
--- }
--- 
--- ... Handle the “related-action” and “use-action-appearance” properties ...
--- 
--- static void
--- foo_bar_set_property (GObject         *object,
---                       guint            prop_id,
---                       const GValue    *value,
---                       GParamSpec      *pspec)
--- {
---   FooBar *bar = FOO_BAR (object);
---   FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (bar);
--- 
---   switch (prop_id)
---     {
--- 
---       ...
--- 
---     case PROP_ACTIVATABLE_RELATED_ACTION:
---       foo_bar_set_related_action (bar, g_value_get_object (value));
---       break;
---     case PROP_ACTIVATABLE_USE_ACTION_APPEARANCE:
---       foo_bar_set_use_action_appearance (bar, g_value_get_boolean (value));
---       break;
---     default:
---       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
---       break;
---     }
--- }
--- 
--- static void
--- foo_bar_get_property (GObject         *object,
---                          guint            prop_id,
---                          GValue          *value,
---                          GParamSpec      *pspec)
--- {
---   FooBar *bar = FOO_BAR (object);
---   FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (bar);
--- 
---   switch (prop_id)
---     {
--- 
---       ...
--- 
---     case PROP_ACTIVATABLE_RELATED_ACTION:
---       g_value_set_object (value, priv->action);
---       break;
---     case PROP_ACTIVATABLE_USE_ACTION_APPEARANCE:
---       g_value_set_boolean (value, priv->use_action_appearance);
---       break;
---     default:
---       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
---       break;
---     }
--- }
--- 
--- 
--- static void
--- foo_bar_set_use_action_appearance (FooBar   *bar,
--- 				   gboolean  use_appearance)
--- {
---   FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (bar);
--- 
---   if (priv->use_action_appearance != use_appearance)
---     {
---       priv->use_action_appearance = use_appearance;
---       
---       gtk_activatable_sync_action_properties (GTK_ACTIVATABLE (bar), priv->action);
---     }
--- }
--- 
--- ... call `gtk_activatable_do_set_related_action()` and then assign the action pointer,
--- no need to reference the action here since `gtk_activatable_do_set_related_action()` already
--- holds a reference here for you...
--- static void
--- foo_bar_set_related_action (FooBar    *bar,
--- 			    GtkAction *action)
--- {
---   FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (bar);
--- 
---   if (priv->action == action)
---     return;
--- 
---   gtk_activatable_do_set_related_action (GTK_ACTIVATABLE (bar), action);
--- 
---   priv->action = action;
--- }
--- 
--- ... Selectively reset and update activatable depending on the use-action-appearance property ...
--- static void
--- gtk_button_activatable_sync_action_properties (GtkActivatable       *activatable,
--- 		                                  GtkAction            *action)
--- {
---   GtkButtonPrivate *priv = GTK_BUTTON_GET_PRIVATE (activatable);
--- 
---   if (!action)
---     return;
--- 
---   if (gtk_action_is_visible (action))
---     gtk_widget_show (GTK_WIDGET (activatable));
---   else
---     gtk_widget_hide (GTK_WIDGET (activatable));
---   
---   gtk_widget_set_sensitive (GTK_WIDGET (activatable), gtk_action_is_sensitive (action));
--- 
---   ...
---   
---   if (priv->use_action_appearance)
---     {
---       if (gtk_action_get_stock_id (action))
--- 	foo_bar_set_stock (button, gtk_action_get_stock_id (action));
---       else if (gtk_action_get_label (action))
--- 	foo_bar_set_label (button, gtk_action_get_label (action));
--- 
---       ...
--- 
---     }
--- }
--- 
--- static void
--- foo_bar_activatable_update (GtkActivatable       *activatable,
--- 			       GtkAction            *action,
--- 			       const gchar          *property_name)
--- {
---   FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (activatable);
--- 
---   if (strcmp (property_name, "visible") == 0)
---     {
---       if (gtk_action_is_visible (action))
--- 	gtk_widget_show (GTK_WIDGET (activatable));
---       else
--- 	gtk_widget_hide (GTK_WIDGET (activatable));
---     }
---   else if (strcmp (property_name, "sensitive") == 0)
---     gtk_widget_set_sensitive (GTK_WIDGET (activatable), gtk_action_is_sensitive (action));
--- 
---   ...
--- 
---   if (!priv->use_action_appearance)
---     return;
--- 
---   if (strcmp (property_name, "stock-id") == 0)
---     foo_bar_set_stock (button, gtk_action_get_stock_id (action));
---   else if (strcmp (property_name, "label") == 0)
---     foo_bar_set_label (button, gtk_action_get_label (action));
--- 
---   ...
--- }
--- ```
---
--- ---
---
---@class Gtk.Activatable
Gtk.Activatable = {}

--- # method Gtk.Activatable:do_set_related_action()
---
--- This is a utility function for `GtkActivatable` implementors.
--- 
--- When implementing `GtkActivatable` you must call this when
--- handling changes of the `GtkActivatable`:related-action, and
--- you must also use this to break references in `GObject`->`dispose()`.
--- 
--- This function adds a reference to the currently set related
--- action for you, it also makes sure the `GtkActivatable`->`update()`
--- method is called when the related `GtkAction` properties change
--- and registers to the action’s proxy list.
--- 
--- > Be careful to call this before setting the local
--- > copy of the `GtkAction` property, since this function uses
--- > `gtk_activatable_get_related_action()` to retrieve the
--- > previous action.
---
--- ---
---
---@param self Gtk.Activatable # a `GtkActivatable`
---@param action Gtk.Action # the `GtkAction` to set
---@return nil
function Gtk.Activatable:do_set_related_action(action) end

--- # method Gtk.Activatable:get_related_action()
---
--- Gets the related `GtkAction` for `activatable`.
---
--- ---
---
---@param self Gtk.Activatable # a `GtkActivatable`
---@return Gtk.Action # the related `GtkAction` if one is set.
function Gtk.Activatable:get_related_action() end

--- # method Gtk.Activatable:get_use_action_appearance()
---
--- Gets whether this activatable should reset its layout
--- and appearance when setting the related action or when
--- the action changes appearance.
---
--- ---
---
---@param self Gtk.Activatable # a `GtkActivatable`
---@return (boolean|nil) # whether `activatable` uses its actions appearance.
function Gtk.Activatable:get_use_action_appearance() end

--- # method Gtk.Activatable:set_related_action()
---
--- Sets the related action on the `activatable` object.
--- 
--- > `GtkActivatable` implementors need to handle the `GtkActivatable`:related-action
--- > property and call `gtk_activatable_do_set_related_action()` when it changes.
---
--- ---
---
---@param self Gtk.Activatable # a `GtkActivatable`
---@param action Gtk.Action # the `GtkAction` to set
---@return nil
function Gtk.Activatable:set_related_action(action) end

--- # method Gtk.Activatable:set_use_action_appearance()
---
--- Sets whether this activatable should reset its layout and appearance
--- when setting the related action or when the action changes appearance
--- 
--- > `GtkActivatable` implementors need to handle the
--- > `GtkActivatable`:use-action-appearance property and call
--- > `gtk_activatable_sync_action_properties()` to update `activatable`
--- > if needed.
---
--- ---
---
---@param self Gtk.Activatable # a `GtkActivatable`
---@param use_appearance (boolean|nil) # whether to use the actions appearance
---@return nil
function Gtk.Activatable:set_use_action_appearance(use_appearance) end

--- # method Gtk.Activatable:sync_action_properties()
---
--- This is called to update the activatable completely, this is called
--- internally when the `GtkActivatable`:related-action property is set
--- or unset and by the implementing class when
--- `GtkActivatable`:use-action-appearance changes.
---
--- ---
---
---@param self Gtk.Activatable # a `GtkActivatable`
---@param action? Gtk.Action # the related `GtkAction` or `nil`
---@return nil
function Gtk.Activatable:sync_action_properties(action) end

--- # record Gtk.ActivatableIface
---
--- > This method can be called with a `nil` action at times.
---
--- ---
---
---@class Gtk.ActivatableIface
---@field g_iface GObject.TypeInterface
---@field update fun(activatable: Gtk.Activatable, action: Gtk.Action, property_name: string): nil
---@field sync_action_properties fun(activatable: Gtk.Activatable, action: Gtk.Action): nil
Gtk.ActivatableIface = {}

--- # class Gtk.Adjustment
---
--- The `GtkAdjustment` object represents a value which has an associated lower
--- and upper bound, together with step and page increments, and a page size.
--- It is used within several GTK+ widgets, including `GtkSpinButton`, `GtkViewport`,
--- and `GtkRange` (which is a base class for `GtkScrollbar` and `GtkScale`).
--- 
--- The `GtkAdjustment` object does not update the value itself. Instead
--- it is left up to the owner of the `GtkAdjustment` to control the value.
---
--- ---
---
---@class Gtk.Adjustment : GObject.InitiallyUnowned
---@field parent_instance GObject.InitiallyUnowned
---@field priv Gtk.AdjustmentPrivate
---@operator call: Gtk.Adjustment
Gtk.Adjustment = {}

--- # method Gtk.Adjustment:changed()
---
--- Emits a `GtkAdjustment`::changed signal from the `GtkAdjustment`.
--- This is typically called by the owner of the `GtkAdjustment` after it has
--- changed any of the `GtkAdjustment` properties other than the value.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@return nil
function Gtk.Adjustment:changed() end

--- # method Gtk.Adjustment:clamp_page()
---
--- Updates the `GtkAdjustment`:value property to ensure that the range
--- between `lower` and `upper` is in the current page (i.e. between
--- `GtkAdjustment`:value and `GtkAdjustment`:value + `GtkAdjustment`:page-size).
--- If the range is larger than the page size, then only the start of it will
--- be in the current page.
--- 
--- A `GtkAdjustment`::value-changed signal will be emitted if the value is changed.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@param lower number # the lower value
---@param upper number # the upper value
---@return nil
function Gtk.Adjustment:clamp_page(lower, upper) end

--- # method Gtk.Adjustment:configure()
---
--- Sets all properties of the adjustment at once.
--- 
--- Use this function to avoid multiple emissions of the
--- `GtkAdjustment`::changed signal. See `gtk_adjustment_set_lower()`
--- for an alternative way of compressing multiple emissions of
--- `GtkAdjustment`::changed into one.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@param value number # the new value
---@param lower number # the new minimum value
---@param upper number # the new maximum value
---@param step_increment number # the new step increment
---@param page_increment number # the new page increment
---@param page_size number # the new page size
---@return nil
function Gtk.Adjustment:configure(value, lower, upper, step_increment, page_increment, page_size) end

--- # method Gtk.Adjustment:get_lower()
---
--- Retrieves the minimum value of the adjustment.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@return number # The current minimum value of the adjustment
function Gtk.Adjustment:get_lower() end

--- # method Gtk.Adjustment:get_minimum_increment()
---
--- Gets the smaller of step increment and page increment.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@return number # the minimum increment of `adjustment`
function Gtk.Adjustment:get_minimum_increment() end

--- # method Gtk.Adjustment:get_page_increment()
---
--- Retrieves the page increment of the adjustment.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@return number # The current page increment of the adjustment
function Gtk.Adjustment:get_page_increment() end

--- # method Gtk.Adjustment:get_page_size()
---
--- Retrieves the page size of the adjustment.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@return number # The current page size of the adjustment
function Gtk.Adjustment:get_page_size() end

--- # method Gtk.Adjustment:get_step_increment()
---
--- Retrieves the step increment of the adjustment.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@return number # The current step increment of the adjustment.
function Gtk.Adjustment:get_step_increment() end

--- # method Gtk.Adjustment:get_upper()
---
--- Retrieves the maximum value of the adjustment.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@return number # The current maximum value of the adjustment
function Gtk.Adjustment:get_upper() end

--- # method Gtk.Adjustment:get_value()
---
--- Gets the current value of the adjustment.
--- See `gtk_adjustment_set_value()`.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@return number # The current value of the adjustment
function Gtk.Adjustment:get_value() end

--- # method Gtk.Adjustment:set_lower()
---
--- Sets the minimum value of the adjustment.
--- 
--- When setting multiple adjustment properties via their individual
--- setters, multiple `GtkAdjustment`::changed signals will be emitted.
--- However, since the emission of the `GtkAdjustment`::changed signal
--- is tied to the emission of the `GObject`::notify signals of the changed
--- properties, it’s possible to compress the `GtkAdjustment`::changed
--- signals into one by calling `g_object_freeze_notify()` and
--- `g_object_thaw_notify()` around the calls to the individual setters.
--- 
--- Alternatively, using a single `g_object_set()` for all the properties
--- to change, or using `gtk_adjustment_configure()` has the same effect
--- of compressing `GtkAdjustment`::changed emissions.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@param lower number # the new minimum value
---@return nil
function Gtk.Adjustment:set_lower(lower) end

--- # method Gtk.Adjustment:set_page_increment()
---
--- Sets the page increment of the adjustment.
--- 
--- See `gtk_adjustment_set_lower()` about how to compress multiple
--- emissions of the `GtkAdjustment`::changed signal when setting
--- multiple adjustment properties.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@param page_increment number # the new page increment
---@return nil
function Gtk.Adjustment:set_page_increment(page_increment) end

--- # method Gtk.Adjustment:set_page_size()
---
--- Sets the page size of the adjustment.
--- 
--- See `gtk_adjustment_set_lower()` about how to compress multiple
--- emissions of the GtkAdjustment::changed signal when setting
--- multiple adjustment properties.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@param page_size number # the new page size
---@return nil
function Gtk.Adjustment:set_page_size(page_size) end

--- # method Gtk.Adjustment:set_step_increment()
---
--- Sets the step increment of the adjustment.
--- 
--- See `gtk_adjustment_set_lower()` about how to compress multiple
--- emissions of the `GtkAdjustment`::changed signal when setting
--- multiple adjustment properties.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@param step_increment number # the new step increment
---@return nil
function Gtk.Adjustment:set_step_increment(step_increment) end

--- # method Gtk.Adjustment:set_upper()
---
--- Sets the maximum value of the adjustment.
--- 
--- Note that values will be restricted by `upper - page-size`
--- if the page-size property is nonzero.
--- 
--- See `gtk_adjustment_set_lower()` about how to compress multiple
--- emissions of the `GtkAdjustment`::changed signal when setting
--- multiple adjustment properties.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@param upper number # the new maximum value
---@return nil
function Gtk.Adjustment:set_upper(upper) end

--- # method Gtk.Adjustment:set_value()
---
--- Sets the `GtkAdjustment` value. The value is clamped to lie between
--- `GtkAdjustment`:lower and `GtkAdjustment`:upper.
--- 
--- Note that for adjustments which are used in a `GtkScrollbar`, the
--- effective range of allowed values goes from `GtkAdjustment`:lower to
--- `GtkAdjustment`:upper - `GtkAdjustment`:page-size.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@param value number # the new value
---@return nil
function Gtk.Adjustment:set_value(value) end

--- # method Gtk.Adjustment:value_changed()
---
--- Emits a `GtkAdjustment`::value-changed signal from the `GtkAdjustment`.
--- This is typically called by the owner of the `GtkAdjustment` after it has
--- changed the `GtkAdjustment`:value property.
---
--- ---
---
---@param self Gtk.Adjustment # a `GtkAdjustment`
---@return nil
function Gtk.Adjustment:value_changed() end

--- # function Gtk.Adjustment.new()
---
--- Creates a new `GtkAdjustment`.
---
--- ---
---
---@param value number # the initial value
---@param lower number # the minimum value
---@param upper number # the maximum value
---@param step_increment number # the step increment
---@param page_increment number # the page increment
---@param page_size number # the page size
---@return Gtk.Adjustment # a new `GtkAdjustment`
function Gtk.Adjustment.new(value, lower, upper, step_increment, page_increment, page_size) end

--- # record Gtk.AdjustmentClass
---
---@class Gtk.AdjustmentClass
---@field parent_class GObject.InitiallyUnownedClass
---@field changed fun(adjustment: Gtk.Adjustment): nil
---@field value_changed fun(adjustment: Gtk.Adjustment): nil
Gtk.AdjustmentClass = {}

--- # record Gtk.AdjustmentPrivate
---
---@class Gtk.AdjustmentPrivate
Gtk.AdjustmentPrivate = {}

---@enum Gtk.Align
Gtk.Align = {}

--- # class Gtk.Alignment
---
--- The `GtkAlignment` widget controls the alignment and size of its child widget.
--- It has four settings: xscale, yscale, xalign, and yalign.
--- 
--- The scale settings are used to specify how much the child widget should
--- expand to fill the space allocated to the `GtkAlignment`.
--- The values can range from 0 (meaning the child doesn’t expand at all) to
--- 1 (meaning the child expands to fill all of the available space).
--- 
--- The align settings are used to place the child widget within the available
--- area. The values range from 0 (top or left) to 1 (bottom or right).
--- Of course, if the scale settings are both set to 1, the alignment settings
--- have no effect.
--- 
--- GtkAlignment has been deprecated in 3.14 and should not be used in
--- newly-written code. The desired effect can be achieved by using the
--- `GtkWidget`:halign, `GtkWidget`:valign and `GtkWidget`:margin properties on the
--- child widget.
---
--- ---
---
---@class Gtk.Alignment : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field bin Gtk.Bin
---@field priv Gtk.AlignmentPrivate
---@operator call: Gtk.Alignment
Gtk.Alignment = {}

--- # method Gtk.Alignment:get_padding()
---
--- Gets the padding on the different sides of the widget.
--- See gtk_alignment_set_padding ().
---
--- ---
---
---@param self Gtk.Alignment # a `GtkAlignment`
---@param padding_top? integer # location to store the padding for the top of the widget, or `nil`
---@param padding_bottom? integer # location to store the padding for the bottom of the widget, or `nil`
---@param padding_left? integer # location to store the padding for the left of the widget, or `nil`
---@param padding_right? integer # location to store the padding for the right of the widget, or `nil`
---@return nil
function Gtk.Alignment:get_padding(padding_top, padding_bottom, padding_left, padding_right) end

--- # method Gtk.Alignment:set()
---
--- Sets the `GtkAlignment` values.
---
--- ---
---
---@param self Gtk.Alignment # a `GtkAlignment`.
---@param xalign number # the horizontal alignment of the child widget, from 0 (left) to 1 (right).
---@param yalign number # the vertical alignment of the child widget, from 0 (top) to 1 (bottom).
---@param xscale number # the amount that the child widget expands horizontally to fill up unused space, from 0 to 1. A value of 0 indicates that the child widget should never expand. A value of 1 indicates that the child widget will expand to fill all of the space allocated for the `GtkAlignment`.
---@param yscale number # the amount that the child widget expands vertically to fill up unused space, from 0 to 1. The values are similar to `xscale`.
---@return nil
function Gtk.Alignment:set(xalign, yalign, xscale, yscale) end

--- # method Gtk.Alignment:set_padding()
---
--- Sets the padding on the different sides of the widget.
--- The padding adds blank space to the sides of the widget. For instance,
--- this can be used to indent the child widget towards the right by adding
--- padding on the left.
---
--- ---
---
---@param self Gtk.Alignment # a `GtkAlignment`
---@param padding_top integer # the padding at the top of the widget
---@param padding_bottom integer # the padding at the bottom of the widget
---@param padding_left integer # the padding at the left of the widget
---@param padding_right integer # the padding at the right of the widget.
---@return nil
function Gtk.Alignment:set_padding(padding_top, padding_bottom, padding_left, padding_right) end

--- # function Gtk.Alignment.new()
---
--- Creates a new `GtkAlignment`.
---
--- ---
---
---@param xalign number # the horizontal alignment of the child widget, from 0 (left) to 1 (right).
---@param yalign number # the vertical alignment of the child widget, from 0 (top) to 1 (bottom).
---@param xscale number # the amount that the child widget expands horizontally to fill up unused space, from 0 to 1. A value of 0 indicates that the child widget should never expand. A value of 1 indicates that the child widget will expand to fill all of the space allocated for the `GtkAlignment`.
---@param yscale number # the amount that the child widget expands vertically to fill up unused space, from 0 to 1. The values are similar to `xscale`.
---@return Gtk.Widget # the new `GtkAlignment`
function Gtk.Alignment.new(xalign, yalign, xscale, yscale) end

--- # record Gtk.AlignmentClass
---
---@class Gtk.AlignmentClass
---@field parent_class Gtk.BinClass # The parent class.
Gtk.AlignmentClass = {}

--- # record Gtk.AlignmentPrivate
---
---@class Gtk.AlignmentPrivate
Gtk.AlignmentPrivate = {}

--- # interface Gtk.AppChooser
---
--- `GtkAppChooser` is an interface that can be implemented by widgets which
--- allow the user to choose an application (typically for the purpose of
--- opening a file). The main objects that implement this interface are
--- `GtkAppChooserWidget`, `GtkAppChooserDialog` and `GtkAppChooserButton`.
--- 
--- Applications are represented by GIO `GAppInfo` objects here.
--- GIO has a concept of recommended and fallback applications for a
--- given content type. Recommended applications are those that claim
--- to handle the content type itself, while fallback also includes
--- applications that handle a more generic content type. GIO also
--- knows the default and last-used application for a given content
--- type. The `GtkAppChooserWidget` provides detailed control over
--- whether the shown list of applications should include default,
--- recommended or fallback applications.
--- 
--- To obtain the application that has been selected in a `GtkAppChooser`,
--- use `gtk_app_chooser_get_app_info()`.
---
--- ---
---
---@class Gtk.AppChooser
Gtk.AppChooser = {}

--- # method Gtk.AppChooser:get_app_info()
---
--- Returns the currently selected application.
---
--- ---
---
---@param self Gtk.AppChooser # a `GtkAppChooser`
---@return Gio.AppInfo # a `GAppInfo` for the currently selected application, or `nil` if none is selected. Free with `g_object_unref()`
function Gtk.AppChooser:get_app_info() end

--- # method Gtk.AppChooser:get_content_type()
---
--- Returns the current value of the `GtkAppChooser`:content-type property.
---
--- ---
---
---@param self Gtk.AppChooser # a `GtkAppChooser`
---@return string # the content type of `self`. Free with `g_free()`
function Gtk.AppChooser:get_content_type() end

--- # method Gtk.AppChooser:refresh()
---
--- Reloads the list of applications.
---
--- ---
---
---@param self Gtk.AppChooser # a `GtkAppChooser`
---@return nil
function Gtk.AppChooser:refresh() end

--- # class Gtk.AppChooserButton
---
--- The `GtkAppChooserButton` is a widget that lets the user select
--- an application. It implements the `GtkAppChooser` interface.
--- 
--- Initially, a `GtkAppChooserButton` selects the first application
--- in its list, which will either be the most-recently used application
--- or, if `GtkAppChooserButton`:show-default-item is `true`, the
--- default application.
--- 
--- The list of applications shown in a `GtkAppChooserButton` includes
--- the recommended applications for the given content type. When
--- `GtkAppChooserButton`:show-default-item is set, the default application
--- is also included. To let the user chooser other applications,
--- you can set the `GtkAppChooserButton`:show-dialog-item property,
--- which allows to open a full `GtkAppChooserDialog`.
--- 
--- It is possible to add custom items to the list, using
--- `gtk_app_chooser_button_append_custom_item()`. These items cause
--- the `GtkAppChooserButton`::custom-item-activated signal to be
--- emitted when they are selected.
--- 
--- To track changes in the selected application, use the
--- `GtkComboBox`::changed signal.
---
--- ---
---
---@class Gtk.AppChooserButton : Gtk.ComboBox, Gtk.Atk.ImplementorIface, Gtk.AppChooser, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout
---@field parent Gtk.ComboBox
---@field priv Gtk.AppChooserButtonPrivate
---@operator call: Gtk.AppChooserButton
Gtk.AppChooserButton = {}

--- # method Gtk.AppChooserButton:append_custom_item()
---
--- Appends a custom item to the list of applications that is shown
--- in the popup; the item name must be unique per-widget.
--- Clients can use the provided name as a detail for the
--- `GtkAppChooserButton`::custom-item-activated signal, to add a
--- callback for the activation of a particular custom item in the list.
--- See also `gtk_app_chooser_button_append_separator()`.
---
--- ---
---
---@param self Gtk.AppChooserButton # a `GtkAppChooserButton`
---@param name string # the name of the custom item
---@param label string # the label for the custom item
---@param icon Gio.Icon # the icon for the custom item
---@return nil
function Gtk.AppChooserButton:append_custom_item(name, label, icon) end

--- # method Gtk.AppChooserButton:append_separator()
---
--- Appends a separator to the list of applications that is shown
--- in the popup.
---
--- ---
---
---@param self Gtk.AppChooserButton # a `GtkAppChooserButton`
---@return nil
function Gtk.AppChooserButton:append_separator() end

--- # method Gtk.AppChooserButton:get_heading()
---
--- Returns the text to display at the top of the dialog.
---
--- ---
---
---@param self Gtk.AppChooserButton # a `GtkAppChooserButton`
---@return string # the text to display at the top of the dialog, or `nil`, in which case a default text is displayed
function Gtk.AppChooserButton:get_heading() end

--- # method Gtk.AppChooserButton:get_show_default_item()
---
--- Returns the current value of the `GtkAppChooserButton`:show-default-item
--- property.
---
--- ---
---
---@param self Gtk.AppChooserButton # a `GtkAppChooserButton`
---@return (boolean|nil) # the value of `GtkAppChooserButton`:show-default-item
function Gtk.AppChooserButton:get_show_default_item() end

--- # method Gtk.AppChooserButton:get_show_dialog_item()
---
--- Returns the current value of the `GtkAppChooserButton`:show-dialog-item
--- property.
---
--- ---
---
---@param self Gtk.AppChooserButton # a `GtkAppChooserButton`
---@return (boolean|nil) # the value of `GtkAppChooserButton`:show-dialog-item
function Gtk.AppChooserButton:get_show_dialog_item() end

--- # method Gtk.AppChooserButton:set_active_custom_item()
---
--- Selects a custom item previously added with
--- `gtk_app_chooser_button_append_custom_item()`.
--- 
--- Use `gtk_app_chooser_refresh()` to bring the selection
--- to its initial state.
---
--- ---
---
---@param self Gtk.AppChooserButton # a `GtkAppChooserButton`
---@param name string # the name of the custom item
---@return nil
function Gtk.AppChooserButton:set_active_custom_item(name) end

--- # method Gtk.AppChooserButton:set_heading()
---
--- Sets the text to display at the top of the dialog.
--- If the heading is not set, the dialog displays a default text.
---
--- ---
---
---@param self Gtk.AppChooserButton # a `GtkAppChooserButton`
---@param heading string # a string containing Pango markup
---@return nil
function Gtk.AppChooserButton:set_heading(heading) end

--- # method Gtk.AppChooserButton:set_show_default_item()
---
--- Sets whether the dropdown menu of this button should show the
--- default application for the given content type at top.
---
--- ---
---
---@param self Gtk.AppChooserButton # a `GtkAppChooserButton`
---@param setting (boolean|nil) # the new value for `GtkAppChooserButton`:show-default-item
---@return nil
function Gtk.AppChooserButton:set_show_default_item(setting) end

--- # method Gtk.AppChooserButton:set_show_dialog_item()
---
--- Sets whether the dropdown menu of this button should show an
--- entry to trigger a `GtkAppChooserDialog`.
---
--- ---
---
---@param self Gtk.AppChooserButton # a `GtkAppChooserButton`
---@param setting (boolean|nil) # the new value for `GtkAppChooserButton`:show-dialog-item
---@return nil
function Gtk.AppChooserButton:set_show_dialog_item(setting) end

--- # function Gtk.AppChooserButton.new()
---
--- Creates a new `GtkAppChooserButton` for applications
--- that can handle content of the given type.
---
--- ---
---
---@param content_type string # the content type to show applications for
---@return Gtk.Widget # a newly created `GtkAppChooserButton`
function Gtk.AppChooserButton.new(content_type) end

--- # record Gtk.AppChooserButtonClass
---
---@class Gtk.AppChooserButtonClass
---@field parent_class Gtk.ComboBoxClass # The parent class.
---@field custom_item_activated fun(self: Gtk.AppChooserButton, item_name: string): nil
---@field padding unknown[]
Gtk.AppChooserButtonClass = {}

--- # record Gtk.AppChooserButtonPrivate
---
---@class Gtk.AppChooserButtonPrivate
Gtk.AppChooserButtonPrivate = {}

--- # class Gtk.AppChooserDialog
---
--- `GtkAppChooserDialog` shows a `GtkAppChooserWidget` inside a `GtkDialog`.
--- 
--- Note that `GtkAppChooserDialog` does not have any interesting methods
--- of its own. Instead, you should get the embedded `GtkAppChooserWidget`
--- using `gtk_app_chooser_dialog_get_widget()` and call its methods if
--- the generic `GtkAppChooser` interface is not sufficient for your needs.
--- 
--- To set the heading that is shown above the `GtkAppChooserWidget`,
--- use `gtk_app_chooser_dialog_set_heading()`.
---
--- ---
---
---@class Gtk.AppChooserDialog : Gtk.Dialog, Gtk.Atk.ImplementorIface, Gtk.AppChooser, Gtk.Buildable
---@field parent Gtk.Dialog
---@field priv Gtk.AppChooserDialogPrivate
---@operator call: Gtk.AppChooserDialog
Gtk.AppChooserDialog = {}

--- # method Gtk.AppChooserDialog:get_heading()
---
--- Returns the text to display at the top of the dialog.
---
--- ---
---
---@param self Gtk.AppChooserDialog # a `GtkAppChooserDialog`
---@return string # the text to display at the top of the dialog, or `nil`, in which case a default text is displayed
function Gtk.AppChooserDialog:get_heading() end

--- # method Gtk.AppChooserDialog:get_widget()
---
--- Returns the `GtkAppChooserWidget` of this dialog.
---
--- ---
---
---@param self Gtk.AppChooserDialog # a `GtkAppChooserDialog`
---@return Gtk.Widget # the `GtkAppChooserWidget` of `self`
function Gtk.AppChooserDialog:get_widget() end

--- # method Gtk.AppChooserDialog:set_heading()
---
--- Sets the text to display at the top of the dialog.
--- If the heading is not set, the dialog displays a default text.
---
--- ---
---
---@param self Gtk.AppChooserDialog # a `GtkAppChooserDialog`
---@param heading string # a string containing Pango markup
---@return nil
function Gtk.AppChooserDialog:set_heading(heading) end

--- # function Gtk.AppChooserDialog.new()
---
--- Creates a new `GtkAppChooserDialog` for the provided `GFile`,
--- to allow the user to select an application for it.
---
--- ---
---
---@param parent? Gtk.Window # a `GtkWindow`, or `nil`
---@param flags Gtk.DialogFlags # flags for this dialog
---@param file Gio.File # a `GFile`
---@return Gtk.Widget # a newly created `GtkAppChooserDialog`
function Gtk.AppChooserDialog.new(parent, flags, file) end

--- # function Gtk.AppChooserDialog.new_for_content_type()
---
--- Creates a new `GtkAppChooserDialog` for the provided content type,
--- to allow the user to select an application for it.
---
--- ---
---
---@param parent? Gtk.Window # a `GtkWindow`, or `nil`
---@param flags Gtk.DialogFlags # flags for this dialog
---@param content_type string # a content type string
---@return Gtk.Widget # a newly created `GtkAppChooserDialog`
function Gtk.AppChooserDialog.new_for_content_type(parent, flags, content_type) end

--- # record Gtk.AppChooserDialogClass
---
---@class Gtk.AppChooserDialogClass
---@field parent_class Gtk.DialogClass # The parent class.
---@field padding unknown[]
Gtk.AppChooserDialogClass = {}

--- # record Gtk.AppChooserDialogPrivate
---
---@class Gtk.AppChooserDialogPrivate
Gtk.AppChooserDialogPrivate = {}

--- # class Gtk.AppChooserWidget
---
--- `GtkAppChooserWidget` is a widget for selecting applications.
--- It is the main building block for `GtkAppChooserDialog`. Most
--- applications only need to use the latter; but you can use
--- this widget as part of a larger widget if you have special needs.
--- 
--- `GtkAppChooserWidget` offers detailed control over what applications
--- are shown, using the
--- `GtkAppChooserWidget`:show-default,
--- `GtkAppChooserWidget`:show-recommended,
--- `GtkAppChooserWidget`:show-fallback,
--- `GtkAppChooserWidget`:show-other and
--- `GtkAppChooserWidget`:show-all
--- properties. See the `GtkAppChooser` documentation for more information
--- about these groups of applications.
--- 
--- To keep track of the selected application, use the
--- `GtkAppChooserWidget`::application-selected and `GtkAppChooserWidget`::application-activated signals.
--- 
--- # CSS nodes
--- 
--- GtkAppChooserWidget has a single CSS node with name appchooser.
---
--- ---
---
---@class Gtk.AppChooserWidget : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.AppChooser, Gtk.Buildable, Gtk.Orientable
---@field parent Gtk.Box
---@field priv Gtk.AppChooserWidgetPrivate
---@operator call: Gtk.AppChooserWidget
Gtk.AppChooserWidget = {}

--- # method Gtk.AppChooserWidget:get_default_text()
---
--- Returns the text that is shown if there are not applications
--- that can handle the content type.
---
--- ---
---
---@param self Gtk.AppChooserWidget # a `GtkAppChooserWidget`
---@return string # the value of `GtkAppChooserWidget`:default-text
function Gtk.AppChooserWidget:get_default_text() end

--- # method Gtk.AppChooserWidget:get_show_all()
---
--- Returns the current value of the `GtkAppChooserWidget`:show-all
--- property.
---
--- ---
---
---@param self Gtk.AppChooserWidget # a `GtkAppChooserWidget`
---@return (boolean|nil) # the value of `GtkAppChooserWidget`:show-all
function Gtk.AppChooserWidget:get_show_all() end

--- # method Gtk.AppChooserWidget:get_show_default()
---
--- Returns the current value of the `GtkAppChooserWidget`:show-default
--- property.
---
--- ---
---
---@param self Gtk.AppChooserWidget # a `GtkAppChooserWidget`
---@return (boolean|nil) # the value of `GtkAppChooserWidget`:show-default
function Gtk.AppChooserWidget:get_show_default() end

--- # method Gtk.AppChooserWidget:get_show_fallback()
---
--- Returns the current value of the `GtkAppChooserWidget`:show-fallback
--- property.
---
--- ---
---
---@param self Gtk.AppChooserWidget # a `GtkAppChooserWidget`
---@return (boolean|nil) # the value of `GtkAppChooserWidget`:show-fallback
function Gtk.AppChooserWidget:get_show_fallback() end

--- # method Gtk.AppChooserWidget:get_show_other()
---
--- Returns the current value of the `GtkAppChooserWidget`:show-other
--- property.
---
--- ---
---
---@param self Gtk.AppChooserWidget # a `GtkAppChooserWidget`
---@return (boolean|nil) # the value of `GtkAppChooserWidget`:show-other
function Gtk.AppChooserWidget:get_show_other() end

--- # method Gtk.AppChooserWidget:get_show_recommended()
---
--- Returns the current value of the `GtkAppChooserWidget`:show-recommended
--- property.
---
--- ---
---
---@param self Gtk.AppChooserWidget # a `GtkAppChooserWidget`
---@return (boolean|nil) # the value of `GtkAppChooserWidget`:show-recommended
function Gtk.AppChooserWidget:get_show_recommended() end

--- # method Gtk.AppChooserWidget:set_default_text()
---
--- Sets the text that is shown if there are not applications
--- that can handle the content type.
---
--- ---
---
---@param self Gtk.AppChooserWidget # a `GtkAppChooserWidget`
---@param text string # the new value for `GtkAppChooserWidget`:default-text
---@return nil
function Gtk.AppChooserWidget:set_default_text(text) end

--- # method Gtk.AppChooserWidget:set_show_all()
---
--- Sets whether the app chooser should show all applications
--- in a flat list.
---
--- ---
---
---@param self Gtk.AppChooserWidget # a `GtkAppChooserWidget`
---@param setting (boolean|nil) # the new value for `GtkAppChooserWidget`:show-all
---@return nil
function Gtk.AppChooserWidget:set_show_all(setting) end

--- # method Gtk.AppChooserWidget:set_show_default()
---
--- Sets whether the app chooser should show the default handler
--- for the content type in a separate section.
---
--- ---
---
---@param self Gtk.AppChooserWidget # a `GtkAppChooserWidget`
---@param setting (boolean|nil) # the new value for `GtkAppChooserWidget`:show-default
---@return nil
function Gtk.AppChooserWidget:set_show_default(setting) end

--- # method Gtk.AppChooserWidget:set_show_fallback()
---
--- Sets whether the app chooser should show related applications
--- for the content type in a separate section.
---
--- ---
---
---@param self Gtk.AppChooserWidget # a `GtkAppChooserWidget`
---@param setting (boolean|nil) # the new value for `GtkAppChooserWidget`:show-fallback
---@return nil
function Gtk.AppChooserWidget:set_show_fallback(setting) end

--- # method Gtk.AppChooserWidget:set_show_other()
---
--- Sets whether the app chooser should show applications
--- which are unrelated to the content type.
---
--- ---
---
---@param self Gtk.AppChooserWidget # a `GtkAppChooserWidget`
---@param setting (boolean|nil) # the new value for `GtkAppChooserWidget`:show-other
---@return nil
function Gtk.AppChooserWidget:set_show_other(setting) end

--- # method Gtk.AppChooserWidget:set_show_recommended()
---
--- Sets whether the app chooser should show recommended applications
--- for the content type in a separate section.
---
--- ---
---
---@param self Gtk.AppChooserWidget # a `GtkAppChooserWidget`
---@param setting (boolean|nil) # the new value for `GtkAppChooserWidget`:show-recommended
---@return nil
function Gtk.AppChooserWidget:set_show_recommended(setting) end

--- # function Gtk.AppChooserWidget.new()
---
--- Creates a new `GtkAppChooserWidget` for applications
--- that can handle content of the given type.
---
--- ---
---
---@param content_type string # the content type to show applications for
---@return Gtk.Widget # a newly created `GtkAppChooserWidget`
function Gtk.AppChooserWidget.new(content_type) end

--- # record Gtk.AppChooserWidgetClass
---
---@class Gtk.AppChooserWidgetClass
---@field parent_class Gtk.BoxClass # The parent class.
---@field application_selected fun(self: Gtk.AppChooserWidget, app_info: Gio.AppInfo): nil
---@field application_activated fun(self: Gtk.AppChooserWidget, app_info: Gio.AppInfo): nil
---@field populate_popup fun(self: Gtk.AppChooserWidget, menu: Gtk.Menu, app_info: Gio.AppInfo): nil
---@field padding unknown[]
Gtk.AppChooserWidgetClass = {}

--- # record Gtk.AppChooserWidgetPrivate
---
---@class Gtk.AppChooserWidgetPrivate
Gtk.AppChooserWidgetPrivate = {}

--- # class Gtk.Application
---
--- `GtkApplication` is a class that handles many important aspects
--- of a GTK+ application in a convenient fashion, without enforcing
--- a one-size-fits-all application model.
--- 
--- Currently, GtkApplication handles GTK+ initialization, application
--- uniqueness, session management, provides some basic scriptability and
--- desktop shell integration by exporting actions and menus and manages a
--- list of toplevel windows whose life-cycle is automatically tied to the
--- life-cycle of your application.
--- 
--- While GtkApplication works fine with plain `GtkWindows`, it is recommended
--- to use it together with `GtkApplicationWindow`.
--- 
--- When GDK threads are enabled, GtkApplication will acquire the GDK
--- lock when invoking actions that arrive from other processes.  The GDK
--- lock is not touched for local action invocations.  In order to have
--- actions invoked in a predictable context it is therefore recommended
--- that the GDK lock be held while invoking actions locally with
--- `g_action_group_activate_action()`.  The same applies to actions
--- associated with `GtkApplicationWindow` and to the “activate” and
--- “open” `GApplication` methods.
--- 
--- ## Automatic resources ## {`automatic`-resources}
--- 
--- `GtkApplication` will automatically load menus from the `GtkBuilder`
--- resource located at "gtk/menus.ui", relative to the application's
--- resource base path (see `g_application_set_resource_base_path()`).  The
--- menu with the ID "app-menu" is taken as the application's app menu
--- and the menu with the ID "menubar" is taken as the application's
--- menubar.  Additional menus (most interesting submenus) can be named
--- and accessed via `gtk_application_get_menu_by_id()` which allows for
--- dynamic population of a part of the menu structure.
--- 
--- If the resources "gtk/menus-appmenu.ui" or "gtk/menus-traditional.ui" are
--- present then these files will be used in preference, depending on the value
--- of `gtk_application_prefers_app_menu()`. If the resource "gtk/menus-common.ui"
--- is present it will be loaded as well. This is useful for storing items that
--- are referenced from both "gtk/menus-appmenu.ui" and
--- "gtk/menus-traditional.ui".
--- 
--- It is also possible to provide the menus manually using
--- `gtk_application_set_app_menu()` and `gtk_application_set_menubar()`.
--- 
--- `GtkApplication` will also automatically setup an icon search path for
--- the default icon theme by appending "icons" to the resource base
--- path.  This allows your application to easily store its icons as
--- resources.  See `gtk_icon_theme_add_resource_path()` for more
--- information.
--- 
--- If there is a resource located at "gtk/help-overlay.ui" which
--- defines a `GtkShortcutsWindow` with ID "help_overlay" then GtkApplication
--- associates an instance of this shortcuts window with each
--- `GtkApplicationWindow` and sets up keyboard accelerators (Control-F1
--- and Control-?) to open it. To create a menu item that displays the
--- shortcuts window, associate the item with the action win.show-help-overlay.
--- 
--- ## A simple application ## {`gtkapplication`}
--- 
--- [A simple example](https://gitlab.gnome.org/GNOME/gtk/-/blob/gtk-3-24/examples/bp/bloatpad.c)
--- 
--- GtkApplication optionally registers with a session manager
--- of the users session (if you set the `GtkApplication`:register-session
--- property) and offers various functionality related to the session
--- life-cycle.
--- 
--- An application can block various ways to end the session with
--- the `gtk_application_inhibit()` function. Typical use cases for
--- this kind of inhibiting are long-running, uninterruptible operations,
--- such as burning a CD or performing a disk backup. The session
--- manager may not honor the inhibitor, but it can be expected to
--- inform the user about the negative consequences of ending the
--- session while inhibitors are present.
--- 
--- ## See Also ## {`seealso`}
--- [HowDoI: Using GtkApplication](https://wiki.gnome.org/HowDoI/GtkApplication),
--- [Getting Started with GTK+: Basics](https://developer.gnome.org/gtk3/stable/gtk-getting-started.html`id`-1.2.3.3)
---
--- ---
---
---@class Gtk.Application : Gio.Application, Gtk.Gio.ActionGroup, Gtk.Gio.ActionMap
---@field parent Gio.Application
---@field priv Gtk.ApplicationPrivate
---@operator call: Gtk.Application
Gtk.Application = {}

--- # method Gtk.Application:add_accelerator()
---
--- Installs an accelerator that will cause the named action
--- to be activated when the key combination specificed by `accelerator`
--- is pressed.
--- 
--- `accelerator` must be a string that can be parsed by `gtk_accelerator_parse()`,
--- e.g. "<Primary>q" or “<Control><Alt>p”.
--- 
--- `action_name` must be the name of an action as it would be used
--- in the app menu, i.e. actions that have been added to the application
--- are referred to with an “app.” prefix, and window-specific actions
--- with a “win.” prefix.
--- 
--- GtkApplication also extracts accelerators out of “accel” attributes
--- in the `GMenuModels` passed to `gtk_application_set_app_menu()` and
--- `gtk_application_set_menubar()`, which is usually more convenient
--- than calling this function for each accelerator.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@param accelerator string # accelerator string
---@param action_name string # the name of the action to activate
---@param parameter? GLib.Variant # parameter to pass when activating the action, or `nil` if the action does not accept an activation parameter
---@return nil
function Gtk.Application:add_accelerator(accelerator, action_name, parameter) end

--- # method Gtk.Application:add_window()
---
--- Adds a window to `application`.
--- 
--- This call can only happen after the `application` has started;
--- typically, you should add new application windows in response
--- to the emission of the `GApplication`::activate signal.
--- 
--- This call is equivalent to setting the `GtkWindow`:application
--- property of `window` to `application`.
--- 
--- Normally, the connection between the application and the window
--- will remain until the window is destroyed, but you can explicitly
--- remove it with `gtk_application_remove_window()`.
--- 
--- GTK+ will keep the `application` running as long as it has
--- any windows.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@param window Gtk.Window # a `GtkWindow`
---@return nil
function Gtk.Application:add_window(window) end

--- # method Gtk.Application:get_accels_for_action()
---
--- Gets the accelerators that are currently associated with
--- the given action.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@param detailed_action_name string # a detailed action name, specifying an action and target to obtain accelerators for
---@return unknown[] # accelerators for `detailed_action_name`, as a `nil`-terminated array. Free with `g_strfreev()` when no longer needed
function Gtk.Application:get_accels_for_action(detailed_action_name) end

--- # method Gtk.Application:get_actions_for_accel()
---
--- Returns the list of actions (possibly empty) that `accel` maps to.
--- Each item in the list is a detailed action name in the usual form.
--- 
--- This might be useful to discover if an accel already exists in
--- order to prevent installation of a conflicting accelerator (from
--- an accelerator editor or a plugin system, for example). Note that
--- having more than one action per accelerator may not be a bad thing
--- and might make sense in cases where the actions never appear in the
--- same context.
--- 
--- In case there are no actions for a given accelerator, an empty array
--- is returned.  `nil` is never returned.
--- 
--- It is a programmer error to pass an invalid accelerator string.
--- If you are unsure, check it with `gtk_accelerator_parse()` first.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@param accel string # an accelerator that can be parsed by `gtk_accelerator_parse()`
---@return unknown[] # a `nil`-terminated array of actions for `accel`
function Gtk.Application:get_actions_for_accel(accel) end

--- # method Gtk.Application:get_active_window()
---
--- Gets the “active” window for the application.
--- 
--- The active window is the one that was most recently focused (within
--- the application).  This window may not have the focus at the moment
--- if another application has it — this is just the most
--- recently-focused window within this application.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@return Gtk.Window # the active window, or `nil` if there isn't one.
function Gtk.Application:get_active_window() end

--- # method Gtk.Application:get_app_menu()
---
--- Returns the menu model that has been set with
--- `gtk_application_set_app_menu()`.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@return Gio.MenuModel # the application menu of `application` or `nil` if no application menu has been set.
function Gtk.Application:get_app_menu() end

--- # method Gtk.Application:get_menu_by_id()
---
--- Gets a menu from automatically loaded resources.
--- See [Automatic resources][automatic-resources]
--- for more information.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@param id string # the id of the menu to look up
---@return Gio.Menu # Gets the menu with the given id from the automatically loaded resources
function Gtk.Application:get_menu_by_id(id) end

--- # method Gtk.Application:get_menubar()
---
--- Returns the menu model that has been set with
--- `gtk_application_set_menubar()`.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@return Gio.MenuModel # the menubar for windows of `application`
function Gtk.Application:get_menubar() end

--- # method Gtk.Application:get_window_by_id()
---
--- Returns the `GtkApplicationWindow` with the given ID.
--- 
--- The ID of a `GtkApplicationWindow` can be retrieved with
--- `gtk_application_window_get_id()`.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@param id integer # an identifier number
---@return Gtk.Window # the window with ID `id`, or `nil` if there is no window with this ID
function Gtk.Application:get_window_by_id(id) end

--- # method Gtk.Application:get_windows()
---
--- Gets a list of the `GtkWindows` associated with `application`.
--- 
--- The list is sorted by most recently focused window, such that the first
--- element is the currently focused window. (Useful for choosing a parent
--- for a transient window.)
--- 
--- The list that is returned should not be modified in any way. It will
--- only remain valid until the next focus change or window creation or
--- deletion.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@return Gtk.Window[] # a `GList` of `GtkWindow`
function Gtk.Application:get_windows() end

--- # method Gtk.Application:inhibit()
---
--- Inform the session manager that certain types of actions should be
--- inhibited. This is not guaranteed to work on all platforms and for
--- all types of actions.
--- 
--- Applications should invoke this method when they begin an operation
--- that should not be interrupted, such as creating a CD or DVD. The
--- types of actions that may be blocked are specified by the `flags`
--- parameter. When the application completes the operation it should
--- call `gtk_application_uninhibit()` to remove the inhibitor. Note that
--- an application can have multiple inhibitors, and all of them must
--- be individually removed. Inhibitors are also cleared when the
--- application exits.
--- 
--- Applications should not expect that they will always be able to block
--- the action. In most cases, users will be given the option to force
--- the action to take place.
--- 
--- Reasons should be short and to the point.
--- 
--- If `window` is given, the session manager may point the user to
--- this window to find out more about why the action is inhibited.
---
--- ---
---
---@param self Gtk.Application # the `GtkApplication`
---@param window? Gtk.Window # a `GtkWindow`, or `nil`
---@param flags Gtk.ApplicationInhibitFlags # what types of actions should be inhibited
---@param reason? string # a short, human-readable string that explains why these operations are inhibited
---@return integer # A non-zero cookie that is used to uniquely identify this request. It should be used as an argument to `gtk_application_uninhibit()` in order to remove the request. If the platform does not support inhibiting or the request failed for some reason, 0 is returned.
function Gtk.Application:inhibit(window, flags, reason) end

--- # method Gtk.Application:is_inhibited()
---
--- Determines if any of the actions specified in `flags` are
--- currently inhibited (possibly by another application).
--- 
--- Note that this information may not be available (for example
--- when the application is running in a sandbox).
---
--- ---
---
---@param self Gtk.Application # the `GtkApplication`
---@param flags Gtk.ApplicationInhibitFlags # what types of actions should be queried
---@return (boolean|nil) # `true` if any of the actions specified in `flags` are inhibited
function Gtk.Application:is_inhibited(flags) end

--- # method Gtk.Application:list_action_descriptions()
---
--- Lists the detailed action names which have associated accelerators.
--- See `gtk_application_set_accels_for_action()`.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@return unknown[] # a `nil`-terminated array of strings, free with `g_strfreev()` when done
function Gtk.Application:list_action_descriptions() end

--- # method Gtk.Application:prefers_app_menu()
---
--- Determines if the desktop environment in which the application is
--- running would prefer an application menu be shown.
--- 
--- If this function returns `true` then the application should call
--- `gtk_application_set_app_menu()` with the contents of an application
--- menu, which will be shown by the desktop environment.  If it returns
--- `false` then you should consider using an alternate approach, such as
--- a menubar.
--- 
--- The value returned by this function is purely advisory and you are
--- free to ignore it.  If you call `gtk_application_set_app_menu()` even
--- if the desktop environment doesn't support app menus, then a fallback
--- will be provided.
--- 
--- Applications are similarly free not to set an app menu even if the
--- desktop environment wants to show one.  In that case, a fallback will
--- also be created by the desktop environment (GNOME, for example, uses
--- a menu with only a "Quit" item in it).
--- 
--- The value returned by this function never changes.  Once it returns a
--- particular value, it is guaranteed to always return the same value.
--- 
--- You may only call this function after the application has been
--- registered and after the base startup handler has run.  You're most
--- likely to want to use this from your own startup handler.  It may
--- also make sense to consult this function while constructing UI (in
--- activate, open or an action activation handler) in order to determine
--- if you should show a gear menu or not.
--- 
--- This function will return `false` on Mac OS and a default app menu
--- will be created automatically with the "usual" contents of that menu
--- typical to most Mac OS applications.  If you call
--- `gtk_application_set_app_menu()` anyway, then this menu will be
--- replaced with your own.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@return (boolean|nil) # `true` if you should set an app menu
function Gtk.Application:prefers_app_menu() end

--- # method Gtk.Application:remove_accelerator()
---
--- Removes an accelerator that has been previously added
--- with `gtk_application_add_accelerator()`.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@param action_name string # the name of the action to activate
---@param parameter? GLib.Variant # parameter to pass when activating the action, or `nil` if the action does not accept an activation parameter
---@return nil
function Gtk.Application:remove_accelerator(action_name, parameter) end

--- # method Gtk.Application:remove_window()
---
--- Remove a window from `application`.
--- 
--- If `window` belongs to `application` then this call is equivalent to
--- setting the `GtkWindow`:application property of `window` to
--- `nil`.
--- 
--- The application may stop running as a result of a call to this
--- function.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@param window Gtk.Window # a `GtkWindow`
---@return nil
function Gtk.Application:remove_window(window) end

--- # method Gtk.Application:set_accels_for_action()
---
--- Sets zero or more keyboard accelerators that will trigger the
--- given action. The first item in `accels` will be the primary
--- accelerator, which may be displayed in the UI.
--- 
--- To remove all accelerators for an action, use an empty, zero-terminated
--- array for `accels`.
--- 
--- For the `detailed_action_name`, see `g_action_parse_detailed_name()` and
--- `g_action_print_detailed_name()`.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@param detailed_action_name string # a detailed action name, specifying an action and target to associate accelerators with
---@param accels unknown[] # a list of accelerators in the format understood by `gtk_accelerator_parse()`
---@return nil
function Gtk.Application:set_accels_for_action(detailed_action_name, accels) end

--- # method Gtk.Application:set_app_menu()
---
--- Sets or unsets the application menu for `application`.
--- 
--- This can only be done in the primary instance of the application,
--- after it has been registered.  `GApplication`::startup is a good place
--- to call this.
--- 
--- The application menu is a single menu containing items that typically
--- impact the application as a whole, rather than acting on a specific
--- window or document.  For example, you would expect to see
--- “Preferences” or “Quit” in an application menu, but not “Save” or
--- “Print”.
--- 
--- If supported, the application menu will be rendered by the desktop
--- environment.
--- 
--- Use the base `GActionMap` interface to add actions, to respond to the user
--- selecting these menu items.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@param app_menu? Gio.MenuModel # a `GMenuModel`, or `nil`
---@return nil
function Gtk.Application:set_app_menu(app_menu) end

--- # method Gtk.Application:set_menubar()
---
--- Sets or unsets the menubar for windows of `application`.
--- 
--- This is a menubar in the traditional sense.
--- 
--- This can only be done in the primary instance of the application,
--- after it has been registered.  `GApplication`::startup is a good place
--- to call this.
--- 
--- Depending on the desktop environment, this may appear at the top of
--- each window, or at the top of the screen.  In some environments, if
--- both the application menu and the menubar are set, the application
--- menu will be presented as if it were the first item of the menubar.
--- Other environments treat the two as completely separate — for example,
--- the application menu may be rendered by the desktop shell while the
--- menubar (if set) remains in each individual window.
--- 
--- Use the base `GActionMap` interface to add actions, to respond to the
--- user selecting these menu items.
---
--- ---
---
---@param self Gtk.Application # a `GtkApplication`
---@param menubar? Gio.MenuModel # a `GMenuModel`, or `nil`
---@return nil
function Gtk.Application:set_menubar(menubar) end

--- # method Gtk.Application:uninhibit()
---
--- Removes an inhibitor that has been established with `gtk_application_inhibit()`.
--- Inhibitors are also cleared when the application exits.
---
--- ---
---
---@param self Gtk.Application # the `GtkApplication`
---@param cookie integer # a cookie that was returned by `gtk_application_inhibit()`
---@return nil
function Gtk.Application:uninhibit(cookie) end

--- # function Gtk.Application.new()
---
--- Creates a new `GtkApplication` instance.
--- 
--- When using `GtkApplication`, it is not necessary to call `gtk_init()`
--- manually. It is called as soon as the application gets registered as
--- the primary instance.
--- 
--- Concretely, `gtk_init()` is called in the default handler for the
--- `GApplication`::startup signal. Therefore, `GtkApplication` subclasses should
--- chain up in their `GApplication`::startup handler before using any GTK+ API.
--- 
--- Note that commandline arguments are not passed to `gtk_init()`.
--- All GTK+ functionality that is available via commandline arguments
--- can also be achieved by setting suitable environment variables
--- such as `G_DEBUG`, so this should not be a big
--- problem. If you absolutely must support GTK+ commandline arguments,
--- you can explicitly call `gtk_init()` before creating the application
--- instance.
--- 
--- If non-`nil`, the application ID must be valid.  See
--- `g_application_id_is_valid()`.
--- 
--- If no application ID is given then some features (most notably application
--- uniqueness) will be disabled. A null application ID is only allowed with
--- GTK+ 3.6 or later.
---
--- ---
---
---@param application_id? string # The application ID.
---@param flags Gio.ApplicationFlags # the application flags
---@return Gtk.Application # a new `GtkApplication` instance
function Gtk.Application.new(application_id, flags) end

--- # record Gtk.ApplicationClass
---
---@class Gtk.ApplicationClass
---@field parent_class Gio.ApplicationClass # The parent class.
---@field window_added fun(application: Gtk.Application, window: Gtk.Window): nil
---@field window_removed fun(application: Gtk.Application, window: Gtk.Window): nil
---@field padding unknown[]
Gtk.ApplicationClass = {}

---@enum Gtk.ApplicationInhibitFlags
Gtk.ApplicationInhibitFlags = {}

--- # record Gtk.ApplicationPrivate
---
---@class Gtk.ApplicationPrivate
Gtk.ApplicationPrivate = {}

--- # class Gtk.ApplicationWindow
---
--- `GtkApplicationWindow` is a `GtkWindow` subclass that offers some
--- extra functionality for better integration with `GtkApplication`
--- features.  Notably, it can handle both the application menu as well
--- as the menubar. See `gtk_application_set_app_menu()` and
--- `gtk_application_set_menubar()`.
--- 
--- This class implements the `GActionGroup` and `GActionMap` interfaces,
--- to let you add window-specific actions that will be exported by the
--- associated `GtkApplication`, together with its application-wide
--- actions.  Window-specific actions are prefixed with the “win.”
--- prefix and application-wide actions are prefixed with the “app.”
--- prefix.  Actions must be addressed with the prefixed name when
--- referring to them from a `GMenuModel`.
--- 
--- Note that widgets that are placed inside a `GtkApplicationWindow`
--- can also activate these actions, if they implement the
--- `GtkActionable` interface.
--- 
--- As with `GtkApplication`, the GDK lock will be acquired when
--- processing actions arriving from other processes and should therefore
--- be held when activating actions locally (if GDK threads are enabled).
--- 
--- The settings `GtkSettings`:gtk-shell-shows-app-menu and
--- `GtkSettings`:gtk-shell-shows-menubar tell GTK+ whether the
--- desktop environment is showing the application menu and menubar
--- models outside the application as part of the desktop shell.
--- For instance, on OS X, both menus will be displayed remotely;
--- on Windows neither will be. gnome-shell (starting with version 3.4)
--- will display the application menu, but not the menubar.
--- 
--- If the desktop environment does not display the menubar, then
--- `GtkApplicationWindow` will automatically show a `GtkMenuBar` for it.
--- This behaviour can be overridden with the `GtkApplicationWindow`:show-menubar
--- property. If the desktop environment does not display the application
--- menu, then it will automatically be included in the menubar or in the
--- windows client-side decorations.
--- 
--- ## A GtkApplicationWindow with a menubar
--- 
--- ```c
--- GtkApplication *app = gtk_application_new ("org.gtk.test", 0);
--- 
--- GtkBuilder *builder = gtk_builder_new_from_string (
---     "<interface>"
---     "  <menu id='menubar'>"
---     "    <submenu label='_Edit'>"
---     "      <item label='_Copy' action='win.copy'/>"
---     "      <item label='_Paste' action='win.paste'/>"
---     "    </submenu>"
---     "  </menu>"
---     "</interface>",
---     -1);
--- 
--- GMenuModel *menubar = G_MENU_MODEL (gtk_builder_get_object (builder,
---                                                             "menubar"));
--- gtk_application_set_menubar (GTK_APPLICATION (app), menubar);
--- g_object_unref (builder);
--- 
--- // ...
--- 
--- GtkWidget *window = gtk_application_window_new (app);
--- ```
--- 
--- ## Handling fallback yourself
--- 
--- [A simple example](https://git.gnome.org/browse/gtk+/tree/examples/sunny.c)
--- 
--- The XML format understood by `GtkBuilder` for `GMenuModel` consists
--- of a toplevel `<menu>` element, which contains one or more `<item>`
--- elements. Each `<item>` element contains `<attribute>` and `<link>`
--- elements with a mandatory name attribute. `<link>` elements have the
--- same content model as `<menu>`. Instead of `<link name="submenu>` or
--- `<link name="section">`, you can use `<submenu>` or `<section>`
--- elements.
--- 
--- Attribute values can be translated using gettext, like other `GtkBuilder`
--- content. `<attribute>` elements can be marked for translation with a
--- `translatable="yes"` attribute. It is also possible to specify message
--- context and translator comments, using the context and comments attributes.
--- To make use of this, the `GtkBuilder` must have been given the gettext
--- domain to use.
--- 
--- The following attributes are used when constructing menu items:
--- - "label": a user-visible string to display
--- - "action": the prefixed name of the action to trigger
--- - "target": the parameter to use when activating the action
--- - "icon" and "verb-icon": names of icons that may be displayed
--- - "submenu-action": name of an action that may be used to determine
---      if a submenu can be opened
--- - "hidden-when": a string used to determine when the item will be hidden.
---      Possible values include "action-disabled", "action-missing", "macos-menubar".
--- 
--- The following attributes are used when constructing sections:
--- - "label": a user-visible string to use as section heading
--- - "display-hint": a string used to determine special formatting for the section.
---     Possible values include "horizontal-buttons".
--- - "text-direction": a string used to determine the `GtkTextDirection` to use
---     when "display-hint" is set to "horizontal-buttons". Possible values
---     include "rtl", "ltr", and "none".
--- 
--- The following attributes are used when constructing submenus:
--- - "label": a user-visible string to display
--- - "icon": icon name to display
---
--- ---
---
---@class Gtk.ApplicationWindow : Gtk.Window, Gtk.Atk.ImplementorIface, Gtk.Gio.ActionGroup, Gtk.Gio.ActionMap, Gtk.Buildable
---@field parent_instance Gtk.Window
---@field priv Gtk.ApplicationWindowPrivate
---@operator call: Gtk.ApplicationWindow
Gtk.ApplicationWindow = {}

--- # method Gtk.ApplicationWindow:get_help_overlay()
---
--- Gets the `GtkShortcutsWindow` that has been set up with
--- a prior call to `gtk_application_window_set_help_overlay()`.
---
--- ---
---
---@param self Gtk.ApplicationWindow # a `GtkApplicationWindow`
---@return Gtk.ShortcutsWindow # the help overlay associated with `window`, or `nil`
function Gtk.ApplicationWindow:get_help_overlay() end

--- # method Gtk.ApplicationWindow:get_id()
---
--- Returns the unique ID of the window. If the window has not yet been added to
--- a `GtkApplication`, returns `0`.
---
--- ---
---
---@param self Gtk.ApplicationWindow # a `GtkApplicationWindow`
---@return integer # the unique ID for `window`, or `0` if the window has not yet been added to a `GtkApplication`
function Gtk.ApplicationWindow:get_id() end

--- # method Gtk.ApplicationWindow:get_show_menubar()
---
--- Returns whether the window will display a menubar for the app menu
--- and menubar as needed.
---
--- ---
---
---@param self Gtk.ApplicationWindow # a `GtkApplicationWindow`
---@return (boolean|nil) # `true` if `window` will display a menubar when needed
function Gtk.ApplicationWindow:get_show_menubar() end

--- # method Gtk.ApplicationWindow:set_help_overlay()
---
--- Associates a shortcuts window with the application window, and
--- sets up an action with the name win.show-help-overlay to present
--- it.
--- 
--- `window` takes resposibility for destroying `help_overlay`.
---
--- ---
---
---@param self Gtk.ApplicationWindow # a `GtkApplicationWindow`
---@param help_overlay? Gtk.ShortcutsWindow # a `GtkShortcutsWindow`
---@return nil
function Gtk.ApplicationWindow:set_help_overlay(help_overlay) end

--- # method Gtk.ApplicationWindow:set_show_menubar()
---
--- Sets whether the window will display a menubar for the app menu
--- and menubar as needed.
---
--- ---
---
---@param self Gtk.ApplicationWindow # a `GtkApplicationWindow`
---@param show_menubar (boolean|nil) # whether to show a menubar when needed
---@return nil
function Gtk.ApplicationWindow:set_show_menubar(show_menubar) end

--- # function Gtk.ApplicationWindow.new()
---
--- Creates a new `GtkApplicationWindow`.
---
--- ---
---
---@param application Gtk.Application # a `GtkApplication`
---@return Gtk.Widget # a newly created `GtkApplicationWindow`
function Gtk.ApplicationWindow.new(application) end

--- # record Gtk.ApplicationWindowClass
---
---@class Gtk.ApplicationWindowClass
---@field parent_class Gtk.WindowClass # The parent class.
---@field padding unknown[]
Gtk.ApplicationWindowClass = {}

--- # record Gtk.ApplicationWindowPrivate
---
---@class Gtk.ApplicationWindowPrivate
Gtk.ApplicationWindowPrivate = {}

--- # class Gtk.Arrow
---
--- GtkArrow should be used to draw simple arrows that need to point in
--- one of the four cardinal directions (up, down, left, or right).  The
--- style of the arrow can be one of shadow in, shadow out, etched in, or
--- etched out.  Note that these directions and style types may be
--- amended in versions of GTK+ to come.
--- 
--- GtkArrow will fill any space alloted to it, but since it is inherited
--- from `GtkMisc`, it can be padded and/or aligned, to fill exactly the
--- space the programmer desires.
--- 
--- Arrows are created with a call to `gtk_arrow_new()`.  The direction or
--- style of an arrow can be changed after creation by using `gtk_arrow_set()`.
--- 
--- GtkArrow has been deprecated; you can simply use a `GtkImage` with a
--- suitable icon name, such as “pan-down-symbolic“. When replacing
--- GtkArrow by an image, pay attention to the fact that GtkArrow is
--- doing automatic flipping between `GTK_ARROW_LEFT` and `GTK_ARROW_RIGHT`,
--- depending on the text direction. To get the same effect with an image,
--- use the icon names “pan-start-symbolic“ and “pan-end-symbolic“, which
--- react to the text direction.
---
--- ---
---
---@class Gtk.Arrow : Gtk.Misc, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field misc Gtk.Misc
---@field priv Gtk.ArrowPrivate
---@operator call: Gtk.Arrow
Gtk.Arrow = {}

--- # method Gtk.Arrow:set()
---
--- Sets the direction and style of the `GtkArrow`, `arrow`.
---
--- ---
---
---@param self Gtk.Arrow # a widget of type `GtkArrow`.
---@param arrow_type Gtk.ArrowType # a valid `GtkArrowType`.
---@param shadow_type Gtk.ShadowType # a valid `GtkShadowType`.
---@return nil
function Gtk.Arrow:set(arrow_type, shadow_type) end

--- # function Gtk.Arrow.new()
---
--- Creates a new `GtkArrow` widget.
---
--- ---
---
---@param arrow_type Gtk.ArrowType # a valid `GtkArrowType`.
---@param shadow_type Gtk.ShadowType # a valid `GtkShadowType`.
---@return Gtk.Widget # the new `GtkArrow` widget.
function Gtk.Arrow.new(arrow_type, shadow_type) end

--- # class Gtk.ArrowAccessible
---
---@class Gtk.ArrowAccessible : Gtk.WidgetAccessible, Gtk.Atk.Component, Gtk.Atk.Image
---@field parent Gtk.WidgetAccessible
---@field priv Gtk.ArrowAccessiblePrivate
Gtk.ArrowAccessible = {}

--- # record Gtk.ArrowAccessibleClass
---
---@class Gtk.ArrowAccessibleClass
---@field parent_class Gtk.WidgetAccessibleClass
Gtk.ArrowAccessibleClass = {}

--- # record Gtk.ArrowAccessiblePrivate
---
---@class Gtk.ArrowAccessiblePrivate
Gtk.ArrowAccessiblePrivate = {}

--- # record Gtk.ArrowClass
---
---@class Gtk.ArrowClass
---@field parent_class Gtk.MiscClass
Gtk.ArrowClass = {}

---@enum Gtk.ArrowPlacement
Gtk.ArrowPlacement = {}

--- # record Gtk.ArrowPrivate
---
---@class Gtk.ArrowPrivate
Gtk.ArrowPrivate = {}

---@enum Gtk.ArrowType
Gtk.ArrowType = {}

--- # class Gtk.AspectFrame
---
--- The `GtkAspectFrame` is useful when you want
--- pack a widget so that it can resize but always retains
--- the same aspect ratio. For instance, one might be
--- drawing a small preview of a larger image. `GtkAspectFrame`
--- derives from `GtkFrame`, so it can draw a label and
--- a frame around the child. The frame will be
--- “shrink-wrapped” to the size of the child.
--- 
--- # CSS nodes
--- 
--- GtkAspectFrame uses a CSS node with name frame.
---
--- ---
---
---@class Gtk.AspectFrame : Gtk.Frame, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field frame Gtk.Frame
---@field priv Gtk.AspectFramePrivate
---@operator call: Gtk.AspectFrame
Gtk.AspectFrame = {}

--- # method Gtk.AspectFrame:set()
---
--- Set parameters for an existing `GtkAspectFrame`.
---
--- ---
---
---@param self Gtk.AspectFrame # a `GtkAspectFrame`
---@param xalign number # Horizontal alignment of the child within the allocation of the `GtkAspectFrame`. This ranges from 0.0 (left aligned) to 1.0 (right aligned)
---@param yalign number # Vertical alignment of the child within the allocation of the `GtkAspectFrame`. This ranges from 0.0 (top aligned) to 1.0 (bottom aligned)
---@param ratio number # The desired aspect ratio.
---@param obey_child (boolean|nil) # If `true`, `ratio` is ignored, and the aspect ratio is taken from the requistion of the child.
---@return nil
function Gtk.AspectFrame:set(xalign, yalign, ratio, obey_child) end

--- # function Gtk.AspectFrame.new()
---
--- Create a new `GtkAspectFrame`.
---
--- ---
---
---@param label? string # Label text.
---@param xalign number # Horizontal alignment of the child within the allocation of the `GtkAspectFrame`. This ranges from 0.0 (left aligned) to 1.0 (right aligned)
---@param yalign number # Vertical alignment of the child within the allocation of the `GtkAspectFrame`. This ranges from 0.0 (top aligned) to 1.0 (bottom aligned)
---@param ratio number # The desired aspect ratio.
---@param obey_child (boolean|nil) # If `true`, `ratio` is ignored, and the aspect ratio is taken from the requistion of the child.
---@return Gtk.Widget # the new `GtkAspectFrame`.
function Gtk.AspectFrame.new(label, xalign, yalign, ratio, obey_child) end

--- # record Gtk.AspectFrameClass
---
---@class Gtk.AspectFrameClass
---@field parent_class Gtk.FrameClass # The parent class.
Gtk.AspectFrameClass = {}

--- # record Gtk.AspectFramePrivate
---
---@class Gtk.AspectFramePrivate
Gtk.AspectFramePrivate = {}

--- # class Gtk.Assistant
---
--- A `GtkAssistant` is a widget used to represent a generally complex
--- operation splitted in several steps, guiding the user through its
--- pages and controlling the page flow to collect the necessary data.
--- 
--- The design of GtkAssistant is that it controls what buttons to show
--- and to make sensitive, based on what it knows about the page sequence
--- and the [type][GtkAssistantPageType] of each page,
--- in addition to state information like the page
--- [completion][gtk-assistant-set-page-complete]
--- and [committed][gtk-assistant-commit] status.
--- 
--- If you have a case that doesn’t quite fit in `GtkAssistants` way of
--- handling buttons, you can use the `GTK_ASSISTANT_PAGE_CUSTOM` page
--- type and handle buttons yourself.
--- 
--- # GtkAssistant as GtkBuildable
--- 
--- The GtkAssistant implementation of the `GtkBuildable` interface
--- exposes the `action_area` as internal children with the name
--- “action_area”.
--- 
--- To add pages to an assistant in `GtkBuilder`, simply add it as a
--- child to the GtkAssistant object, and set its child properties
--- as necessary.
--- 
--- # CSS nodes
--- 
--- GtkAssistant has a single CSS node with the name assistant.
---
--- ---
---
---@class Gtk.Assistant : Gtk.Window, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent Gtk.Window
---@field priv Gtk.AssistantPrivate
---@operator call: Gtk.Assistant
Gtk.Assistant = {}

--- # method Gtk.Assistant:add_action_widget()
---
--- Adds a widget to the action area of a `GtkAssistant`.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param child Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Assistant:add_action_widget(child) end

--- # method Gtk.Assistant:append_page()
---
--- Appends a page to the `assistant`.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page Gtk.Widget # a `GtkWidget`
---@return integer # the index (starting at 0) of the inserted page
function Gtk.Assistant:append_page(page) end

--- # method Gtk.Assistant:commit()
---
--- Erases the visited page history so the back button is not
--- shown on the current page, and removes the cancel button
--- from subsequent pages.
--- 
--- Use this when the information provided up to the current
--- page is hereafter deemed permanent and cannot be modified
--- or undone. For example, showing a progress page to track
--- a long-running, unreversible operation after the user has
--- clicked apply on a confirmation page.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@return nil
function Gtk.Assistant:commit() end

--- # method Gtk.Assistant:get_current_page()
---
--- Returns the page number of the current page.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@return integer # The index (starting from 0) of the current page in the `assistant`, or -1 if the `assistant` has no pages, or no current page.
function Gtk.Assistant:get_current_page() end

--- # method Gtk.Assistant:get_n_pages()
---
--- Returns the number of pages in the `assistant`
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@return integer # the number of pages in the `assistant`
function Gtk.Assistant:get_n_pages() end

--- # method Gtk.Assistant:get_nth_page()
---
--- Returns the child widget contained in page number `page_num`.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page_num integer # the index of a page in the `assistant`, or -1 to get the last page
---@return Gtk.Widget # the child widget, or `nil` if `page_num` is out of bounds
function Gtk.Assistant:get_nth_page(page_num) end

--- # method Gtk.Assistant:get_page_complete()
---
--- Gets whether `page` is complete.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page Gtk.Widget # a page of `assistant`
---@return (boolean|nil) # `true` if `page` is complete.
function Gtk.Assistant:get_page_complete(page) end

--- # method Gtk.Assistant:get_page_has_padding()
---
--- Gets whether page has padding.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page Gtk.Widget # a page of `assistant`
---@return (boolean|nil) # `true` if `page` has padding
function Gtk.Assistant:get_page_has_padding(page) end

--- # method Gtk.Assistant:get_page_header_image()
---
--- Gets the header image for `page`.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page Gtk.Widget # a page of `assistant`
---@return GdkPixbuf.Pixbuf # the header image for `page`, or `nil` if there’s no header image for the page
function Gtk.Assistant:get_page_header_image(page) end

--- # method Gtk.Assistant:get_page_side_image()
---
--- Gets the side image for `page`.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page Gtk.Widget # a page of `assistant`
---@return GdkPixbuf.Pixbuf # the side image for `page`, or `nil` if there’s no side image for the page
function Gtk.Assistant:get_page_side_image(page) end

--- # method Gtk.Assistant:get_page_title()
---
--- Gets the title for `page`.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page Gtk.Widget # a page of `assistant`
---@return string # the title for `page`
function Gtk.Assistant:get_page_title(page) end

--- # method Gtk.Assistant:get_page_type()
---
--- Gets the page type of `page`.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page Gtk.Widget # a page of `assistant`
---@return Gtk.AssistantPageType # the page type of `page`
function Gtk.Assistant:get_page_type(page) end

--- # method Gtk.Assistant:insert_page()
---
--- Inserts a page in the `assistant` at a given position.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page Gtk.Widget # a `GtkWidget`
---@param position integer # the index (starting at 0) at which to insert the page, or -1 to append the page to the `assistant`
---@return integer # the index (starting from 0) of the inserted page
function Gtk.Assistant:insert_page(page, position) end

--- # method Gtk.Assistant:next_page()
---
--- Navigate to the next page.
--- 
--- It is a programming error to call this function when
--- there is no next page.
--- 
--- This function is for use when creating pages of the
--- `GTK_ASSISTANT_PAGE_CUSTOM` type.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@return nil
function Gtk.Assistant:next_page() end

--- # method Gtk.Assistant:prepend_page()
---
--- Prepends a page to the `assistant`.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page Gtk.Widget # a `GtkWidget`
---@return integer # the index (starting at 0) of the inserted page
function Gtk.Assistant:prepend_page(page) end

--- # method Gtk.Assistant:previous_page()
---
--- Navigate to the previous visited page.
--- 
--- It is a programming error to call this function when
--- no previous page is available.
--- 
--- This function is for use when creating pages of the
--- `GTK_ASSISTANT_PAGE_CUSTOM` type.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@return nil
function Gtk.Assistant:previous_page() end

--- # method Gtk.Assistant:remove_action_widget()
---
--- Removes a widget from the action area of a `GtkAssistant`.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param child Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Assistant:remove_action_widget(child) end

--- # method Gtk.Assistant:remove_page()
---
--- Removes the `page_num`’s page from `assistant`.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page_num integer # the index of a page in the `assistant`, or -1 to remove the last page
---@return nil
function Gtk.Assistant:remove_page(page_num) end

--- # method Gtk.Assistant:set_current_page()
---
--- Switches the page to `page_num`.
--- 
--- Note that this will only be necessary in custom buttons,
--- as the `assistant` flow can be set with
--- `gtk_assistant_set_forward_page_func()`.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page_num integer # index of the page to switch to, starting from 0. If negative, the last page will be used. If greater than the number of pages in the `assistant`, nothing will be done.
---@return nil
function Gtk.Assistant:set_current_page(page_num) end

--- # method Gtk.Assistant:set_forward_page_func()
---
--- Sets the page forwarding function to be `page_func`.
--- 
--- This function will be used to determine what will be
--- the next page when the user presses the forward button.
--- Setting `page_func` to `nil` will make the assistant to
--- use the default forward function, which just goes to the
--- next visible page.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page_func? Gtk.AssistantPageFunc # the `GtkAssistantPageFunc`, or `nil` to use the default one
---@param data? userdata # user data for `page_func`
---@param destroy GLib.DestroyNotify # destroy notifier for `data`
---@return nil
function Gtk.Assistant:set_forward_page_func(page_func, data, destroy) end

--- # method Gtk.Assistant:set_page_complete()
---
--- Sets whether `page` contents are complete.
--- 
--- This will make `assistant` update the buttons state
--- to be able to continue the task.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page Gtk.Widget # a page of `assistant`
---@param complete (boolean|nil) # the completeness status of the page
---@return nil
function Gtk.Assistant:set_page_complete(page, complete) end

--- # method Gtk.Assistant:set_page_has_padding()
---
--- Sets whether the assistant is adding padding around
--- the page.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page Gtk.Widget # a page of `assistant`
---@param has_padding (boolean|nil) # whether this page has padding
---@return nil
function Gtk.Assistant:set_page_has_padding(page, has_padding) end

--- # method Gtk.Assistant:set_page_header_image()
---
--- Sets a header image for `page`.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page Gtk.Widget # a page of `assistant`
---@param pixbuf? GdkPixbuf.Pixbuf # the new header image `page`
---@return nil
function Gtk.Assistant:set_page_header_image(page, pixbuf) end

--- # method Gtk.Assistant:set_page_side_image()
---
--- Sets a side image for `page`.
--- 
--- This image used to be displayed in the side area of the assistant
--- when `page` is the current page.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page Gtk.Widget # a page of `assistant`
---@param pixbuf? GdkPixbuf.Pixbuf # the new side image `page`
---@return nil
function Gtk.Assistant:set_page_side_image(page, pixbuf) end

--- # method Gtk.Assistant:set_page_title()
---
--- Sets a title for `page`.
--- 
--- The title is displayed in the header area of the assistant
--- when `page` is the current page.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page Gtk.Widget # a page of `assistant`
---@param title string # the new title for `page`
---@return nil
function Gtk.Assistant:set_page_title(page, title) end

--- # method Gtk.Assistant:set_page_type()
---
--- Sets the page type for `page`.
--- 
--- The page type determines the page behavior in the `assistant`.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@param page Gtk.Widget # a page of `assistant`
---@param type Gtk.AssistantPageType # the new type for `page`
---@return nil
function Gtk.Assistant:set_page_type(page, type) end

--- # method Gtk.Assistant:update_buttons_state()
---
--- Forces `assistant` to recompute the buttons state.
--- 
--- GTK+ automatically takes care of this in most situations,
--- e.g. when the user goes to a different page, or when the
--- visibility or completeness of a page changes.
--- 
--- One situation where it can be necessary to call this
--- function is when changing a value on the current page
--- affects the future page flow of the assistant.
---
--- ---
---
---@param self Gtk.Assistant # a `GtkAssistant`
---@return nil
function Gtk.Assistant:update_buttons_state() end

--- # function Gtk.Assistant.new()
---
--- Creates a new `GtkAssistant`.
---
--- ---
---
---@return Gtk.Widget # a newly created `GtkAssistant`
function Gtk.Assistant.new() end

--- # record Gtk.AssistantClass
---
---@class Gtk.AssistantClass
---@field parent_class Gtk.WindowClass # The parent class.
---@field prepare fun(assistant: Gtk.Assistant, page: Gtk.Widget): nil
---@field apply fun(assistant: Gtk.Assistant): nil
---@field close fun(assistant: Gtk.Assistant): nil
---@field cancel fun(assistant: Gtk.Assistant): nil
Gtk.AssistantClass = {}

---@alias Gtk.AssistantPageFunc fun(current_page: integer, data: userdata): integer

---@enum Gtk.AssistantPageType
Gtk.AssistantPageType = {}

--- # record Gtk.AssistantPrivate
---
---@class Gtk.AssistantPrivate
Gtk.AssistantPrivate = {}

---@enum Gtk.AttachOptions
Gtk.AttachOptions = {}

---@enum Gtk.BaselinePosition
Gtk.BaselinePosition = {}

--- # class Gtk.Bin
---
--- The `GtkBin` widget is a container with just one child.
--- It is not very useful itself, but it is useful for deriving subclasses,
--- since it provides common code needed for handling a single child widget.
--- 
--- Many GTK+ widgets are subclasses of `GtkBin`, including `GtkWindow`,
--- `GtkButton`, `GtkFrame`, `GtkHandleBox` or `GtkScrolledWindow`.
---
--- ---
---
---@class Gtk.Bin : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field container Gtk.Container
---@field priv Gtk.BinPrivate
Gtk.Bin = {}

--- # method Gtk.Bin:get_child()
---
--- Gets the child of the `GtkBin`, or `nil` if the bin contains
--- no child widget. The returned widget does not have a reference
--- added, so you do not need to unref it.
---
--- ---
---
---@param self Gtk.Bin # a `GtkBin`
---@return Gtk.Widget # the child of `bin`, or `nil` if it does not have a child.
function Gtk.Bin:get_child() end

--- # record Gtk.BinClass
---
---@class Gtk.BinClass
---@field parent_class Gtk.ContainerClass # The parent class.
Gtk.BinClass = {}

--- # record Gtk.BinPrivate
---
---@class Gtk.BinPrivate
Gtk.BinPrivate = {}

--- # record Gtk.BindingArg
---
--- A `GtkBindingArg` holds the data associated with
--- an argument for a key binding signal emission as
--- stored in `GtkBindingSignal`.
---
--- ---
---
---@class Gtk.BindingArg
---@field arg_type Gtk.GType # implementation detail
Gtk.BindingArg = {}

--- # record Gtk.BindingEntry
---
--- Each key binding element of a binding sets binding list is
--- represented by a GtkBindingEntry.
---
--- ---
---
---@class Gtk.BindingEntry
---@field keyval integer # key value to match
---@field modifiers Gdk.ModifierType # key modifiers to match
---@field binding_set Gtk.BindingSet # binding set this entry belongs to
---@field destroyed integer # implementation detail
---@field in_emission integer # implementation detail
---@field marks_unbound integer # implementation detail
---@field set_next Gtk.BindingEntry # linked list of entries maintained by binding set
---@field hash_next Gtk.BindingEntry # implementation detail
---@field signals Gtk.BindingSignal # action signals of this entry
Gtk.BindingEntry = {}

--- # function Gtk.BindingEntry.add_signal_from_string()
---
--- Parses a signal description from `signal_desc` and incorporates
--- it into `binding_set`.
--- 
--- Signal descriptions may either bind a key combination to
--- one or more signals:
--- ```c
---   bind "key" {
---     "signalname" (param, ...)
---     ...
---   }
--- ```
--- 
--- Or they may also unbind a key combination:
--- ```c
---   unbind "key"
--- ```
--- 
--- Key combinations must be in a format that can be parsed by
--- `gtk_accelerator_parse()`.
---
--- ---
---
---@param binding_set Gtk.BindingSet # a `GtkBindingSet`
---@param signal_desc string # a signal description
---@return GLib.TokenType # %G_TOKEN_NONE if the signal was successfully parsed and added, the expected token otherwise
function Gtk.BindingEntry.add_signal_from_string(binding_set, signal_desc) end

--- # function Gtk.BindingEntry.add_signall()
---
--- Override or install a new key binding for `keyval` with `modifiers` on
--- `binding_set`.
---
--- ---
---
---@param binding_set Gtk.BindingSet # a `GtkBindingSet` to add a signal to
---@param keyval integer # key value
---@param modifiers Gdk.ModifierType # key modifier
---@param signal_name string # signal name to be bound
---@param binding_args Gtk.BindingArg[] # list of `GtkBindingArg` signal arguments
---@return nil
function Gtk.BindingEntry.add_signall(binding_set, keyval, modifiers, signal_name, binding_args) end

--- # function Gtk.BindingEntry.remove()
---
--- Remove a binding previously installed via
--- `gtk_binding_entry_add_signal()` on `binding_set`.
---
--- ---
---
---@param binding_set Gtk.BindingSet # a `GtkBindingSet` to remove an entry of
---@param keyval integer # key value of binding to remove
---@param modifiers Gdk.ModifierType # key modifier of binding to remove
---@return nil
function Gtk.BindingEntry.remove(binding_set, keyval, modifiers) end

--- # function Gtk.BindingEntry.skip()
---
--- Install a binding on `binding_set` which causes key lookups
--- to be aborted, to prevent bindings from lower priority sets
--- to be activated.
---
--- ---
---
---@param binding_set Gtk.BindingSet # a `GtkBindingSet` to skip an entry of
---@param keyval integer # key value of binding to skip
---@param modifiers Gdk.ModifierType # key modifier of binding to skip
---@return nil
function Gtk.BindingEntry.skip(binding_set, keyval, modifiers) end

--- # record Gtk.BindingSet
---
--- A binding set maintains a list of activatable key bindings.
--- A single binding set can match multiple types of widgets.
--- Similar to style contexts, can be matched by any information contained
--- in a widgets `GtkWidgetPath`. When a binding within a set is matched upon
--- activation, an action signal is emitted on the target widget to carry out
--- the actual activation.
---
--- ---
---
---@class Gtk.BindingSet
---@field set_name string # unique name of this binding set
---@field priority integer # unused
---@field widget_path_pspecs userdata[] # unused
---@field widget_class_pspecs userdata[] # unused
---@field class_branch_pspecs userdata[] # unused
---@field entries Gtk.BindingEntry # the key binding entries in this binding set
---@field current Gtk.BindingEntry # implementation detail
---@field parsed integer # whether this binding set stems from a CSS file and is reset upon theme changes
Gtk.BindingSet = {}

--- # method Gtk.BindingSet:activate()
---
--- Find a key binding matching `keyval` and `modifiers` within
--- `binding_set` and activate the binding on `object`.
---
--- ---
---
---@param self Gtk.BindingSet # a `GtkBindingSet` set to activate
---@param keyval integer # key value of the binding
---@param modifiers Gdk.ModifierType # key modifier of the binding
---@param object GObject.Object # object to activate when binding found
---@return (boolean|nil) # `true` if a binding was found and activated
function Gtk.BindingSet:activate(keyval, modifiers, object) end

--- # method Gtk.BindingSet:add_path()
---
--- This function was used internally by the GtkRC parsing mechanism
--- to assign match patterns to `GtkBindingSet` structures.
--- 
--- In GTK+ 3, these match patterns are unused.
---
--- ---
---
---@param self Gtk.BindingSet # a `GtkBindingSet` to add a path to
---@param path_type Gtk.PathType # path type the pattern applies to
---@param path_pattern string # the actual match pattern
---@param priority Gtk.PathPriorityType # binding priority
---@return nil
function Gtk.BindingSet:add_path(path_type, path_pattern, priority) end

--- # function Gtk.BindingSet.find()
---
--- Find a binding set by its globally unique name.
--- 
--- The `set_name` can either be a name used for `gtk_binding_set_new()`
--- or the type name of a class used in `gtk_binding_set_by_class()`.
---
--- ---
---
---@param set_name string # unique binding set name
---@return Gtk.BindingSet # `nil` or the specified binding set
function Gtk.BindingSet.find(set_name) end

--- # record Gtk.BindingSignal
---
--- A GtkBindingSignal stores the necessary information to
--- activate a widget in response to a key press via a signal
--- emission.
---
--- ---
---
---@class Gtk.BindingSignal
---@field next Gtk.BindingSignal # implementation detail
---@field signal_name string # the action signal to be emitted
---@field n_args integer # number of arguments specified for the signal
---@field args unknown[] # the arguments specified for the signal
Gtk.BindingSignal = {}

--- # class Gtk.BooleanCellAccessible
---
---@class Gtk.BooleanCellAccessible : Gtk.RendererCellAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.TableCell
---@field parent Gtk.RendererCellAccessible
---@field priv Gtk.BooleanCellAccessiblePrivate
Gtk.BooleanCellAccessible = {}

--- # record Gtk.BooleanCellAccessibleClass
---
---@class Gtk.BooleanCellAccessibleClass
---@field parent_class Gtk.RendererCellAccessibleClass
Gtk.BooleanCellAccessibleClass = {}

--- # record Gtk.BooleanCellAccessiblePrivate
---
---@class Gtk.BooleanCellAccessiblePrivate
Gtk.BooleanCellAccessiblePrivate = {}

--- # record Gtk.Border
---
--- A struct that specifies a border around a rectangular area
--- that can be of different width on each side.
---
--- ---
---
---@class Gtk.Border
---@field left integer # The width of the left border
---@field right integer # The width of the right border
---@field top integer # The width of the top border
---@field bottom integer # The width of the bottom border
---@operator call: Gtk.Border
Gtk.Border = {}

--- # method Gtk.Border:copy()
---
--- Copies a `GtkBorder`-struct.
---
--- ---
---
---@param self Gtk.Border # a `GtkBorder`-struct
---@return Gtk.Border # a copy of `border_`.
function Gtk.Border:copy() end

--- # method Gtk.Border:free()
---
--- Frees a `GtkBorder`-struct.
---
--- ---
---
---@param self Gtk.Border # a `GtkBorder`-struct
---@return nil
function Gtk.Border:free() end

--- # function Gtk.Border.new()
---
--- Allocates a new `GtkBorder`-struct and initializes its elements to zero.
---
--- ---
---
---@return Gtk.Border # a newly allocated `GtkBorder`-struct. Free with `gtk_border_free()`
function Gtk.Border.new() end

---@enum Gtk.BorderStyle
Gtk.BorderStyle = {}

--- # class Gtk.Box
---
--- The GtkBox widget arranges child widgets into a single row or column,
--- depending upon the value of its `GtkOrientable`:orientation property. Within
--- the other dimension, all children are allocated the same size. Of course,
--- the `GtkWidget`:halign and `GtkWidget`:valign properties can be used on
--- the children to influence their allocation.
--- 
--- GtkBox uses a notion of packing. Packing refers
--- to adding widgets with reference to a particular position in a
--- `GtkContainer`. For a GtkBox, there are two reference positions: the
--- start and the end of the box.
--- For a vertical `GtkBox`, the start is defined as the top of the box and
--- the end is defined as the bottom. For a horizontal `GtkBox` the start
--- is defined as the left side and the end is defined as the right side.
--- 
--- Use repeated calls to `gtk_box_pack_start()` to pack widgets into a
--- GtkBox from start to end. Use `gtk_box_pack_end()` to add widgets from
--- end to start. You may intersperse these calls and add widgets from
--- both ends of the same GtkBox.
--- 
--- Because GtkBox is a `GtkContainer`, you may also use `gtk_container_add()`
--- to insert widgets into the box, and they will be packed with the default
--- values for expand and fill child properties. Use `gtk_container_remove()`
--- to remove widgets from the GtkBox.
--- 
--- Use `gtk_box_set_homogeneous()` to specify whether or not all children
--- of the GtkBox are forced to get the same amount of space.
--- 
--- Use `gtk_box_set_spacing()` to determine how much space will be
--- minimally placed between all children in the GtkBox. Note that
--- spacing is added between the children, while
--- padding added by `gtk_box_pack_start()` or `gtk_box_pack_end()` is added
--- on either side of the widget it belongs to.
--- 
--- Use `gtk_box_reorder_child()` to move a GtkBox child to a different
--- place in the box.
--- 
--- Use `gtk_box_set_child_packing()` to reset the expand,
--- fill and padding child properties.
--- Use `gtk_box_query_child_packing()` to query these fields.
--- 
--- # CSS nodes
--- 
--- GtkBox uses a single CSS node with name box.
--- 
--- In horizontal orientation, the nodes of the children are always arranged
--- from left to right. So :first-child will always select the leftmost child,
--- regardless of text direction.
---
--- ---
---
---@class Gtk.Box : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field container Gtk.Container
---@field priv Gtk.BoxPrivate
---@operator call: Gtk.Box
Gtk.Box = {}

--- # method Gtk.Box:get_baseline_position()
---
--- Gets the value set by `gtk_box_set_baseline_position()`.
---
--- ---
---
---@param self Gtk.Box # a `GtkBox`
---@return Gtk.BaselinePosition # the baseline position
function Gtk.Box:get_baseline_position() end

--- # method Gtk.Box:get_center_widget()
---
--- Retrieves the center widget of the box.
---
--- ---
---
---@param self Gtk.Box # a `GtkBox`
---@return Gtk.Widget # the center widget or `nil` in case no center widget is set.
function Gtk.Box:get_center_widget() end

--- # method Gtk.Box:get_homogeneous()
---
--- Returns whether the box is homogeneous (all children are the
--- same size). See `gtk_box_set_homogeneous()`.
---
--- ---
---
---@param self Gtk.Box # a `GtkBox`
---@return (boolean|nil) # `true` if the box is homogeneous.
function Gtk.Box:get_homogeneous() end

--- # method Gtk.Box:get_spacing()
---
--- Gets the value set by `gtk_box_set_spacing()`.
---
--- ---
---
---@param self Gtk.Box # a `GtkBox`
---@return integer # spacing between children
function Gtk.Box:get_spacing() end

--- # method Gtk.Box:pack_end()
---
--- Adds `child` to `box`, packed with reference to the end of `box`.
--- The `child` is packed after (away from end of) any other child
--- packed with reference to the end of `box`.
---
--- ---
---
---@param self Gtk.Box # a `GtkBox`
---@param child Gtk.Widget # the `GtkWidget` to be added to `box`
---@param expand (boolean|nil) # `true` if the new child is to be given extra space allocated to `box`. The extra space will be divided evenly between all children of `box` that use this option
---@param fill (boolean|nil) # `true` if space given to `child` by the `expand` option is actually allocated to `child`, rather than just padding it. This parameter has no effect if `expand` is set to `false`. A child is always allocated the full height of a horizontal `GtkBox` and the full width of a vertical `GtkBox`. This option affects the other dimension
---@param padding integer # extra space in pixels to put between this child and its neighbors, over and above the global amount specified by `GtkBox`:spacing property. If `child` is a widget at one of the reference ends of `box`, then `padding` pixels are also put between `child` and the reference edge of `box`
---@return nil
function Gtk.Box:pack_end(child, expand, fill, padding) end

--- # method Gtk.Box:pack_start()
---
--- Adds `child` to `box`, packed with reference to the start of `box`.
--- The `child` is packed after any other child packed with reference
--- to the start of `box`.
---
--- ---
---
---@param self Gtk.Box # a `GtkBox`
---@param child Gtk.Widget # the `GtkWidget` to be added to `box`
---@param expand (boolean|nil) # `true` if the new child is to be given extra space allocated to `box`. The extra space will be divided evenly between all children that use this option
---@param fill (boolean|nil) # `true` if space given to `child` by the `expand` option is actually allocated to `child`, rather than just padding it. This parameter has no effect if `expand` is set to `false`. A child is always allocated the full height of a horizontal `GtkBox` and the full width of a vertical `GtkBox`. This option affects the other dimension
---@param padding integer # extra space in pixels to put between this child and its neighbors, over and above the global amount specified by `GtkBox`:spacing property. If `child` is a widget at one of the reference ends of `box`, then `padding` pixels are also put between `child` and the reference edge of `box`
---@return nil
function Gtk.Box:pack_start(child, expand, fill, padding) end

--- # method Gtk.Box:query_child_packing()
---
--- Obtains information about how `child` is packed into `box`.
---
--- ---
---
---@param self Gtk.Box # a `GtkBox`
---@param child Gtk.Widget # the `GtkWidget` of the child to query
---@param expand (boolean|nil) # pointer to return location for expand child property
---@param fill (boolean|nil) # pointer to return location for fill child property
---@param padding integer # pointer to return location for padding child property
---@param pack_type Gtk.PackType # pointer to return location for pack-type child property
---@return nil
function Gtk.Box:query_child_packing(child, expand, fill, padding, pack_type) end

--- # method Gtk.Box:reorder_child()
---
--- Moves `child` to a new `position` in the list of `box` children.
--- The list contains widgets packed `GTK_PACK_START`
--- as well as widgets packed `GTK_PACK_END`, in the order that these
--- widgets were added to `box`.
--- 
--- A widget’s position in the `box` children list determines where
--- the widget is packed into `box`.  A child widget at some position
--- in the list will be packed just after all other widgets of the
--- same packing type that appear earlier in the list.
---
--- ---
---
---@param self Gtk.Box # a `GtkBox`
---@param child Gtk.Widget # the `GtkWidget` to move
---@param position integer # the new position for `child` in the list of children of `box`, starting from 0. If negative, indicates the end of the list
---@return nil
function Gtk.Box:reorder_child(child, position) end

--- # method Gtk.Box:set_baseline_position()
---
--- Sets the baseline position of a box. This affects
--- only horizontal boxes with at least one baseline aligned
--- child. If there is more vertical space available than requested,
--- and the baseline is not allocated by the parent then
--- `position` is used to allocate the baseline wrt the
--- extra space available.
---
--- ---
---
---@param self Gtk.Box # a `GtkBox`
---@param position Gtk.BaselinePosition # a `GtkBaselinePosition`
---@return nil
function Gtk.Box:set_baseline_position(position) end

--- # method Gtk.Box:set_center_widget()
---
--- Sets a center widget; that is a child widget that will be
--- centered with respect to the full width of the box, even
--- if the children at either side take up different amounts
--- of space.
---
--- ---
---
---@param self Gtk.Box # a `GtkBox`
---@param widget? Gtk.Widget # the widget to center
---@return nil
function Gtk.Box:set_center_widget(widget) end

--- # method Gtk.Box:set_child_packing()
---
--- Sets the way `child` is packed into `box`.
---
--- ---
---
---@param self Gtk.Box # a `GtkBox`
---@param child Gtk.Widget # the `GtkWidget` of the child to set
---@param expand (boolean|nil) # the new value of the expand child property
---@param fill (boolean|nil) # the new value of the fill child property
---@param padding integer # the new value of the padding child property
---@param pack_type Gtk.PackType # the new value of the pack-type child property
---@return nil
function Gtk.Box:set_child_packing(child, expand, fill, padding, pack_type) end

--- # method Gtk.Box:set_homogeneous()
---
--- Sets the `GtkBox`:homogeneous property of `box`, controlling
--- whether or not all children of `box` are given equal space
--- in the box.
---
--- ---
---
---@param self Gtk.Box # a `GtkBox`
---@param homogeneous (boolean|nil) # a boolean value, `true` to create equal allotments, `false` for variable allotments
---@return nil
function Gtk.Box:set_homogeneous(homogeneous) end

--- # method Gtk.Box:set_spacing()
---
--- Sets the `GtkBox`:spacing property of `box`, which is the
--- number of pixels to place between children of `box`.
---
--- ---
---
---@param self Gtk.Box # a `GtkBox`
---@param spacing integer # the number of pixels to put between children
---@return nil
function Gtk.Box:set_spacing(spacing) end

--- # function Gtk.Box.new()
---
--- Creates a new `GtkBox`.
---
--- ---
---
---@param orientation Gtk.Orientation # the box’s orientation.
---@param spacing integer # the number of pixels to place by default between children.
---@return Gtk.Widget # a new `GtkBox`.
function Gtk.Box.new(orientation, spacing) end

--- # record Gtk.BoxClass
---
---@class Gtk.BoxClass
---@field parent_class Gtk.ContainerClass # The parent class.
Gtk.BoxClass = {}

--- # record Gtk.BoxPrivate
---
---@class Gtk.BoxPrivate
Gtk.BoxPrivate = {}

--- # interface Gtk.Buildable
---
--- GtkBuildable allows objects to extend and customize their deserialization
--- from [GtkBuilder UI descriptions][BUILDER-UI].
--- The interface includes methods for setting names and properties of objects,
--- parsing custom tags and constructing child objects.
--- 
--- The GtkBuildable interface is implemented by all widgets and
--- many of the non-widget objects that are provided by GTK+. The
--- main user of this interface is `GtkBuilder`. There should be
--- very little need for applications to call any of these functions directly.
--- 
--- An object only needs to implement this interface if it needs to extend the
--- `GtkBuilder` format or run any extra routines at deserialization time.
---
--- ---
---
---@class Gtk.Buildable
Gtk.Buildable = {}

--- # method Gtk.Buildable:add_child()
---
--- Adds a child to `buildable`. `type` is an optional string
--- describing how the child should be added.
---
--- ---
---
---@param self Gtk.Buildable # a `GtkBuildable`
---@param builder Gtk.Builder # a `GtkBuilder`
---@param child GObject.Object # child to add
---@param type? string # kind of child or `nil`
---@return nil
function Gtk.Buildable:add_child(builder, child, type) end

--- # method Gtk.Buildable:construct_child()
---
--- Constructs a child of `buildable` with the name `name`.
--- 
--- `GtkBuilder` calls this function if a “constructor” has been
--- specified in the UI definition.
---
--- ---
---
---@param self Gtk.Buildable # A `GtkBuildable`
---@param builder Gtk.Builder # `GtkBuilder` used to construct this object
---@param name string # name of child to construct
---@return GObject.Object # the constructed child
function Gtk.Buildable:construct_child(builder, name) end

--- # method Gtk.Buildable:custom_finished()
---
--- This is similar to `gtk_buildable_parser_finished()` but is
--- called once for each custom tag handled by the `buildable`.
---
--- ---
---
---@param self Gtk.Buildable # a `GtkBuildable`
---@param builder Gtk.Builder # a `GtkBuilder`
---@param child? GObject.Object # child object or `nil` for non-child tags
---@param tagname string # the name of the tag
---@param data? userdata # user data created in custom_tag_start
---@return nil
function Gtk.Buildable:custom_finished(builder, child, tagname, data) end

--- # method Gtk.Buildable:custom_tag_end()
---
--- This is called at the end of each custom element handled by
--- the buildable.
---
--- ---
---
---@param self Gtk.Buildable # A `GtkBuildable`
---@param builder Gtk.Builder # `GtkBuilder` used to construct this object
---@param child? GObject.Object # child object or `nil` for non-child tags
---@param tagname string # name of tag
---@param data? userdata # user data that will be passed in to parser functions
---@return nil
function Gtk.Buildable:custom_tag_end(builder, child, tagname, data) end

--- # method Gtk.Buildable:custom_tag_start()
---
--- This is called for each unknown element under `<child>`.
---
--- ---
---
---@param self Gtk.Buildable # a `GtkBuildable`
---@param builder Gtk.Builder # a `GtkBuilder` used to construct this object
---@param child? GObject.Object # child object or `nil` for non-child tags
---@param tagname string # name of tag
---@param parser GLib.MarkupParser # a `GMarkupParser` to fill in
---@param data? userdata # return location for user data that will be passed in to parser functions
---@return (boolean|nil) # `true` if a object has a custom implementation, `false` if it doesn't.
function Gtk.Buildable:custom_tag_start(builder, child, tagname, parser, data) end

--- # method Gtk.Buildable:get_internal_child()
---
--- Get the internal child called `childname` of the `buildable` object.
---
--- ---
---
---@param self Gtk.Buildable # a `GtkBuildable`
---@param builder Gtk.Builder # a `GtkBuilder`
---@param childname string # name of child
---@return GObject.Object # the internal child of the buildable object
function Gtk.Buildable:get_internal_child(builder, childname) end

--- # method Gtk.Buildable:get_name()
---
--- Gets the name of the `buildable` object.
--- 
--- `GtkBuilder` sets the name based on the
--- [GtkBuilder UI definition][BUILDER-UI]
--- used to construct the `buildable`.
---
--- ---
---
---@param self Gtk.Buildable # a `GtkBuildable`
---@return string # the name set with `gtk_buildable_set_name()`
function Gtk.Buildable:get_name() end

--- # method Gtk.Buildable:parser_finished()
---
--- Called when the builder finishes the parsing of a
--- [GtkBuilder UI definition][BUILDER-UI].
--- Note that this will be called once for each time
--- `gtk_builder_add_from_file()` or `gtk_builder_add_from_string()`
--- is called on a builder.
---
--- ---
---
---@param self Gtk.Buildable # a `GtkBuildable`
---@param builder Gtk.Builder # a `GtkBuilder`
---@return nil
function Gtk.Buildable:parser_finished(builder) end

--- # method Gtk.Buildable:set_buildable_property()
---
--- Sets the property name `name` to `value` on the `buildable` object.
---
--- ---
---
---@param self Gtk.Buildable # a `GtkBuildable`
---@param builder Gtk.Builder # a `GtkBuilder`
---@param name string # name of property
---@param value GObject.Value # value of property
---@return nil
function Gtk.Buildable:set_buildable_property(builder, name, value) end

--- # method Gtk.Buildable:set_name()
---
--- Sets the name of the `buildable` object.
---
--- ---
---
---@param self Gtk.Buildable # a `GtkBuildable`
---@param name string # name to set
---@return nil
function Gtk.Buildable:set_name(name) end

--- # record Gtk.BuildableIface
---
--- The `GtkBuildableIface` interface contains method that are
--- necessary to allow `GtkBuilder` to construct an object from
--- a `GtkBuilder` UI definition.
---
--- ---
---
---@class Gtk.BuildableIface
---@field g_iface GObject.TypeInterface # the parent class
---@field set_name fun(buildable: Gtk.Buildable, name: string): nil
---@field get_name fun(buildable: Gtk.Buildable): string
---@field add_child fun(buildable: Gtk.Buildable, builder: Gtk.Builder, child: GObject.Object, type: string): nil
---@field set_buildable_property fun(buildable: Gtk.Buildable, builder: Gtk.Builder, name: string, value: GObject.Value): nil
---@field construct_child fun(buildable: Gtk.Buildable, builder: Gtk.Builder, name: string): GObject.Object
---@field custom_tag_start fun(buildable: Gtk.Buildable, builder: Gtk.Builder, child: GObject.Object, tagname: string, parser: GLib.MarkupParser, data: userdata): (boolean|nil)
---@field custom_tag_end fun(buildable: Gtk.Buildable, builder: Gtk.Builder, child: GObject.Object, tagname: string, data: userdata): nil
---@field custom_finished fun(buildable: Gtk.Buildable, builder: Gtk.Builder, child: GObject.Object, tagname: string, data: userdata): nil
---@field parser_finished fun(buildable: Gtk.Buildable, builder: Gtk.Builder): nil
---@field get_internal_child fun(buildable: Gtk.Buildable, builder: Gtk.Builder, childname: string): GObject.Object
Gtk.BuildableIface = {}

--- # class Gtk.Builder
---
--- A GtkBuilder is an auxiliary object that reads textual descriptions
--- of a user interface and instantiates the described objects. To create
--- a GtkBuilder from a user interface description, call
--- `gtk_builder_new_from_file()`, `gtk_builder_new_from_resource()` or
--- `gtk_builder_new_from_string()`.
--- 
--- In the (unusual) case that you want to add user interface
--- descriptions from multiple sources to the same GtkBuilder you can
--- call `gtk_builder_new()` to get an empty builder and populate it by
--- (multiple) calls to `gtk_builder_add_from_file()`,
--- `gtk_builder_add_from_resource()` or `gtk_builder_add_from_string()`.
--- 
--- A GtkBuilder holds a reference to all objects that it has constructed
--- and drops these references when it is finalized. This finalization can
--- cause the destruction of non-widget objects or widgets which are not
--- contained in a toplevel window. For toplevel windows constructed by a
--- builder, it is the responsibility of the user to call `gtk_widget_destroy()`
--- to get rid of them and all the widgets they contain.
--- 
--- The functions `gtk_builder_get_object()` and `gtk_builder_get_objects()`
--- can be used to access the widgets in the interface by the names assigned
--- to them inside the UI description. Toplevel windows returned by these
--- functions will stay around until the user explicitly destroys them
--- with `gtk_widget_destroy()`. Other widgets will either be part of a
--- larger hierarchy constructed by the builder (in which case you should
--- not have to worry about their lifecycle), or without a parent, in which
--- case they have to be added to some container to make use of them.
--- Non-widget objects need to be reffed with `g_object_ref()` to keep them
--- beyond the lifespan of the builder.
--- 
--- The function `gtk_builder_connect_signals()` and variants thereof can be
--- used to connect handlers to the named signals in the description.
--- 
--- # GtkBuilder UI Definitions # {`BUILDER`-UI}
--- 
--- GtkBuilder parses textual descriptions of user interfaces which are
--- specified in an XML format which can be roughly described by the
--- RELAX NG schema below. We refer to these descriptions as “GtkBuilder
--- UI definitions” or just “UI definitions” if the context is clear.
--- Do not confuse GtkBuilder UI Definitions with
--- [GtkUIManager UI Definitions][XML-UI], which are more limited in scope.
--- It is common to use `.ui` as the filename extension for files containing
--- GtkBuilder UI definitions.
--- 
--- [RELAX NG Compact Syntax](https://gitlab.gnome.org/GNOME/gtk/-/blob/gtk-3-24/gtk/gtkbuilder.rnc)
--- 
--- The toplevel element is `<interface>`. It optionally takes a “domain”
--- attribute, which will make the builder look for translated strings
--- using `dgettext()` in the domain specified. This can also be done by
--- calling `gtk_builder_set_translation_domain()` on the builder.
--- Objects are described by `<object>` elements, which can contain
--- `<property>` elements to set properties, `<signal>` elements which
--- connect signals to handlers, and `<child>` elements, which describe
--- child objects (most often widgets inside a container, but also e.g.
--- actions in an action group, or columns in a tree model). A `<child>`
--- element contains an `<object>` element which describes the child object.
--- The target toolkit version(s) are described by `<requires>` elements,
--- the “lib” attribute specifies the widget library in question (currently
--- the only supported value is “gtk+”) and the “version” attribute specifies
--- the target version in the form `<major>.<minor>`. The builder will error
--- out if the version requirements are not met.
--- 
--- Typically, the specific kind of object represented by an `<object>`
--- element is specified by the “class” attribute. If the type has not
--- been loaded yet, GTK+ tries to find the ``get_type()`` function from the
--- class name by applying heuristics. This works in most cases, but if
--- necessary, it is possible to specify the name of the `get_type()` function
--- explictly with the "type-func" attribute. As a special case, GtkBuilder
--- allows to use an object that has been constructed by a `GtkUIManager` in
--- another part of the UI definition by specifying the id of the `GtkUIManager`
--- in the “constructor” attribute and the name of the object in the “id”
--- attribute.
--- 
--- Objects may be given a name with the “id” attribute, which allows the
--- application to retrieve them from the builder with `gtk_builder_get_object()`.
--- An id is also necessary to use the object as property value in other
--- parts of the UI definition. GTK+ reserves ids starting and ending
--- with `___` (3 underscores) for its own purposes.
--- 
--- Setting properties of objects is pretty straightforward with the
--- `<property>` element: the “name” attribute specifies the name of the
--- property, and the content of the element specifies the value.
--- If the “translatable” attribute is set to a true value, GTK+ uses
--- `gettext()` (or `dgettext()` if the builder has a translation domain set)
--- to find a translation for the value. This happens before the value
--- is parsed, so it can be used for properties of any type, but it is
--- probably most useful for string properties. It is also possible to
--- specify a context to disambiguate short strings, and comments which
--- may help the translators.
--- 
--- GtkBuilder can parse textual representations for the most common
--- property types: characters, strings, integers, floating-point numbers,
--- booleans (strings like “TRUE”, “t”, “yes”, “y”, “1” are interpreted
--- as `true`, strings like “FALSE”, “f”, “no”, “n”, “0” are interpreted
--- as `false`), enumerations (can be specified by their name, nick or
--- integer value), flags (can be specified by their name, nick, integer
--- value, optionally combined with “|”, e.g. “GTK_VISIBLE|GTK_REALIZED”)
--- and colors (in a format understood by `gdk_rgba_parse()`).
--- 
--- GVariants can be specified in the format understood by `g_variant_parse()`,
--- and pixbufs can be specified as a filename of an image file to load.
--- 
--- Objects can be referred to by their name and by default refer to
--- objects declared in the local xml fragment and objects exposed via
--- `gtk_builder_expose_object()`. In general, GtkBuilder allows forward
--- references to objects — declared in the local xml; an object doesn’t
--- have to be constructed before it can be referred to. The exception
--- to this rule is that an object has to be constructed before it can
--- be used as the value of a construct-only property.
--- 
--- It is also possible to bind a property value to another object's
--- property value using the attributes
--- "bind-source" to specify the source object of the binding,
--- "bind-property" to specify the source property and optionally
--- "bind-flags" to specify the binding flags.
--- Internally builder implements this using GBinding objects.
--- For more information see `g_object_bind_property()`
--- 
--- Signal handlers are set up with the `<signal>` element. The “name”
--- attribute specifies the name of the signal, and the “handler” attribute
--- specifies the function to connect to the signal. By default, GTK+ tries
--- to find the handler using `g_module_symbol()`, but this can be changed by
--- passing a custom `GtkBuilderConnectFunc` to
--- `gtk_builder_connect_signals_full()`. The remaining attributes, “after”,
--- “swapped” and “object”, have the same meaning as the corresponding
--- parameters of the `g_signal_connect_object()` or
--- `g_signal_connect_data()` functions. A “last_modification_time”
--- attribute is also allowed, but it does not have a meaning to the
--- builder.
--- 
--- Sometimes it is necessary to refer to widgets which have implicitly
--- been constructed by GTK+ as part of a composite widget, to set
--- properties on them or to add further children (e.g. the `vbox` of
--- a `GtkDialog`). This can be achieved by setting the “internal-child”
--- property of the `<child>` element to a true value. Note that GtkBuilder
--- still requires an `<object>` element for the internal child, even if it
--- has already been constructed.
--- 
--- A number of widgets have different places where a child can be added
--- (e.g. tabs vs. page content in notebooks). This can be reflected in
--- a UI definition by specifying the “type” attribute on a `<child>`
--- The possible values for the “type” attribute are described in the
--- sections describing the widget-specific portions of UI definitions.
--- 
--- # A GtkBuilder UI Definition
--- 
--- ```xml
--- <interface>
---   <object class="GtkDialog" id="dialog1">
---     <child internal-child="vbox">
---       <object class="GtkBox" id="vbox1">
---         <property name="border-width">10</property>
---         <child internal-child="action_area">
---           <object class="GtkButtonBox" id="hbuttonbox1">
---             <property name="border-width">20</property>
---             <child>
---               <object class="GtkButton" id="ok_button">
---                 <property name="label">gtk-ok</property>
---                 <property name="use-stock">TRUE</property>
---                 <signal name="clicked" handler="ok_button_clicked"/>
---               </object>
---             </child>
---           </object>
---         </child>
---       </object>
---     </child>
---   </object>
--- </interface>
--- ```
--- 
--- Beyond this general structure, several object classes define their
--- own XML DTD fragments for filling in the ANY placeholders in the DTD
--- above. Note that a custom element in a `<child>` element gets parsed by
--- the custom tag handler of the parent object, while a custom element in
--- an `<object>` element gets parsed by the custom tag handler of the object.
--- 
--- These XML fragments are explained in the documentation of the
--- respective objects.
--- 
--- Additionally, since 3.10 a special `<template>` tag has been added
--- to the format allowing one to define a widget class’s components.
--- See the [GtkWidget documentation][composite-templates] for details.
---
--- ---
---
---@class Gtk.Builder : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gtk.BuilderPrivate
---@operator call: Gtk.Builder
Gtk.Builder = {}

--- # method Gtk.Builder:add_callback_symbol()
---
--- Adds the `callback_symbol` to the scope of `builder` under the given `callback_name`.
--- 
--- Using this function overrides the behavior of `gtk_builder_connect_signals()`
--- for any callback symbols that are added. Using this method allows for better
--- encapsulation as it does not require that callback symbols be declared in
--- the global namespace.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param callback_name string # The name of the callback, as expected in the XML
---@param callback_symbol GObject.Callback # The callback pointer
---@return nil
function Gtk.Builder:add_callback_symbol(callback_name, callback_symbol) end

--- # method Gtk.Builder:add_from_file()
---
--- Parses a file containing a [GtkBuilder UI definition][BUILDER-UI]
--- and merges it with the current contents of `builder`.
--- 
--- Most users will probably want to use `gtk_builder_new_from_file()`.
--- 
--- If an error occurs, 0 will be returned and `error` will be assigned a
--- `GError` from the `GTK_BUILDER_ERROR`, `G_MARKUP_ERROR` or `G_FILE_ERROR`
--- domain.
--- 
--- It’s not really reasonable to attempt to handle failures of this
--- call. You should not use this function with untrusted files (ie:
--- files that are not part of your application). Broken `GtkBuilder`
--- files can easily crash your program, and it’s possible that memory
--- was leaked leading up to the reported failure. The only reasonable
--- thing to do when an error is detected is to call `g_error()`.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param filename string # the name of the file to parse
---@return integer # A positive value on success, 0 if an error occurred
function Gtk.Builder:add_from_file(filename) end

--- # method Gtk.Builder:add_from_resource()
---
--- Parses a resource file containing a [GtkBuilder UI definition][BUILDER-UI]
--- and merges it with the current contents of `builder`.
--- 
--- Most users will probably want to use `gtk_builder_new_from_resource()`.
--- 
--- If an error occurs, 0 will be returned and `error` will be assigned a
--- `GError` from the `GTK_BUILDER_ERROR`, `G_MARKUP_ERROR` or `G_RESOURCE_ERROR`
--- domain.
--- 
--- It’s not really reasonable to attempt to handle failures of this
--- call.  The only reasonable thing to do when an error is detected is
--- to call `g_error()`.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param resource_path string # the path of the resource file to parse
---@return integer # A positive value on success, 0 if an error occurred
function Gtk.Builder:add_from_resource(resource_path) end

--- # method Gtk.Builder:add_from_string()
---
--- Parses a string containing a [GtkBuilder UI definition][BUILDER-UI]
--- and merges it with the current contents of `builder`.
--- 
--- Most users will probably want to use `gtk_builder_new_from_string()`.
--- 
--- Upon errors 0 will be returned and `error` will be assigned a
--- `GError` from the `GTK_BUILDER_ERROR`, `G_MARKUP_ERROR` or
--- `G_VARIANT_PARSE_ERROR` domain.
--- 
--- It’s not really reasonable to attempt to handle failures of this
--- call.  The only reasonable thing to do when an error is detected is
--- to call `g_error()`.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param buffer string # the string to parse
---@param length integer # the length of `buffer` (may be -1 if `buffer` is nul-terminated)
---@return integer # A positive value on success, 0 if an error occurred
function Gtk.Builder:add_from_string(buffer, length) end

--- # method Gtk.Builder:add_objects_from_file()
---
--- Parses a file containing a [GtkBuilder UI definition][BUILDER-UI]
--- building only the requested objects and merges
--- them with the current contents of `builder`.
--- 
--- Upon errors 0 will be returned and `error` will be assigned a
--- `GError` from the `GTK_BUILDER_ERROR`, `G_MARKUP_ERROR` or `G_FILE_ERROR`
--- domain.
--- 
--- If you are adding an object that depends on an object that is not
--- its child (for instance a `GtkTreeView` that depends on its
--- `GtkTreeModel`), you have to explicitly list all of them in `object_ids`.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param filename string # the name of the file to parse
---@param object_ids unknown[] # nul-terminated array of objects to build
---@return integer # A positive value on success, 0 if an error occurred
function Gtk.Builder:add_objects_from_file(filename, object_ids) end

--- # method Gtk.Builder:add_objects_from_resource()
---
--- Parses a resource file containing a [GtkBuilder UI definition][BUILDER-UI]
--- building only the requested objects and merges
--- them with the current contents of `builder`.
--- 
--- Upon errors 0 will be returned and `error` will be assigned a
--- `GError` from the `GTK_BUILDER_ERROR`, `G_MARKUP_ERROR` or `G_RESOURCE_ERROR`
--- domain.
--- 
--- If you are adding an object that depends on an object that is not
--- its child (for instance a `GtkTreeView` that depends on its
--- `GtkTreeModel`), you have to explicitly list all of them in `object_ids`.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param resource_path string # the path of the resource file to parse
---@param object_ids unknown[] # nul-terminated array of objects to build
---@return integer # A positive value on success, 0 if an error occurred
function Gtk.Builder:add_objects_from_resource(resource_path, object_ids) end

--- # method Gtk.Builder:add_objects_from_string()
---
--- Parses a string containing a [GtkBuilder UI definition][BUILDER-UI]
--- building only the requested objects and merges
--- them with the current contents of `builder`.
--- 
--- Upon errors 0 will be returned and `error` will be assigned a
--- `GError` from the `GTK_BUILDER_ERROR` or `G_MARKUP_ERROR` domain.
--- 
--- If you are adding an object that depends on an object that is not
--- its child (for instance a `GtkTreeView` that depends on its
--- `GtkTreeModel`), you have to explicitly list all of them in `object_ids`.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param buffer string # the string to parse
---@param length integer # the length of `buffer` (may be -1 if `buffer` is nul-terminated)
---@param object_ids unknown[] # nul-terminated array of objects to build
---@return integer # A positive value on success, 0 if an error occurred
function Gtk.Builder:add_objects_from_string(buffer, length, object_ids) end

--- # method Gtk.Builder:connect_signals()
---
--- This method is a simpler variation of `gtk_builder_connect_signals_full()`.
--- It uses symbols explicitly added to `builder` with prior calls to
--- `gtk_builder_add_callback_symbol()`. In the case that symbols are not
--- explicitly added; it uses `GModule`’s introspective features (by opening the module `nil`)
--- to look at the application’s symbol table. From here it tries to match
--- the signal handler names given in the interface description with
--- symbols in the application and connects the signals. Note that this
--- function can only be called once, subsequent calls will do nothing.
--- 
--- Note that unless `gtk_builder_add_callback_symbol()` is called for
--- all signal callbacks which are referenced by the loaded XML, this
--- function will require that `GModule` be supported on the platform.
--- 
--- If you rely on `GModule` support to lookup callbacks in the symbol table,
--- the following details should be noted:
--- 
--- When compiling applications for Windows, you must declare signal callbacks
--- with `G_MODULE_EXPORT`, or they will not be put in the symbol table.
--- On Linux and Unices, this is not necessary; applications should instead
--- be compiled with the -Wl,--export-dynamic CFLAGS, and linked against
--- gmodule-export-2.0.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param user_data? userdata # user data to pass back with all signals
---@return nil
function Gtk.Builder:connect_signals(user_data) end

--- # method Gtk.Builder:connect_signals_full()
---
--- This function can be thought of the interpreted language binding
--- version of `gtk_builder_connect_signals()`, except that it does not
--- require GModule to function correctly.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param func Gtk.BuilderConnectFunc # the function used to connect the signals
---@param user_data? userdata # arbitrary data that will be passed to the connection function
---@return nil
function Gtk.Builder:connect_signals_full(func, user_data) end

--- # method Gtk.Builder:expose_object()
---
--- Add `object` to the `builder` object pool so it can be referenced just like any
--- other object built by builder.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param name string # the name of the object exposed to the builder
---@param object GObject.Object # the object to expose
---@return nil
function Gtk.Builder:expose_object(name, object) end

--- # method Gtk.Builder:extend_with_template()
---
--- Main private entry point for building composite container
--- components from template XML.
--- 
--- This is exported purely to let gtk-builder-tool validate
--- templates, applications have no need to call this function.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param widget Gtk.Widget # the widget that is being extended
---@param template_type Gtk.GType # the type that the template is for
---@param buffer string # the string to parse
---@param length integer # the length of `buffer` (may be -1 if `buffer` is nul-terminated)
---@return integer # A positive value on success, 0 if an error occurred
function Gtk.Builder:extend_with_template(widget, template_type, buffer, length) end

--- # method Gtk.Builder:get_application()
---
--- Gets the `GtkApplication` associated with the builder.
--- 
--- The `GtkApplication` is used for creating action proxies as requested
--- from XML that the builder is loading.
--- 
--- By default, the builder uses the default application: the one from
--- `g_application_get_default()`. If you want to use another application
--- for constructing proxies, use `gtk_builder_set_application()`.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@return Gtk.Application # the application being used by the builder, or `nil`
function Gtk.Builder:get_application() end

--- # method Gtk.Builder:get_object()
---
--- Gets the object named `name`. Note that this function does not
--- increment the reference count of the returned object.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param name string # name of object to get
---@return GObject.Object # the object named `name` or `nil` if it could not be found in the object tree.
function Gtk.Builder:get_object(name) end

--- # method Gtk.Builder:get_objects()
---
--- Gets all objects that have been constructed by `builder`. Note that
--- this function does not increment the reference counts of the returned
--- objects.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@return GObject.Object[] # a newly-allocated `GSList` containing all the objects constructed by the `GtkBuilder` instance. It should be freed by `g_slist_free()`
function Gtk.Builder:get_objects() end

--- # method Gtk.Builder:get_translation_domain()
---
--- Gets the translation domain of `builder`.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@return string # the translation domain. This string is owned by the builder object and must not be modified or freed.
function Gtk.Builder:get_translation_domain() end

--- # method Gtk.Builder:get_type_from_name()
---
--- Looks up a type by name, using the virtual function that
--- `GtkBuilder` has for that purpose. This is mainly used when
--- implementing the `GtkBuildable` interface on a type.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param type_name string # type name to lookup
---@return Gtk.GType # the `GType` found for `type_name` or `G_TYPE_INVALID` if no type was found
function Gtk.Builder:get_type_from_name(type_name) end

--- # method Gtk.Builder:set_application()
---
--- Sets the application associated with `builder`.
--- 
--- You only need this function if there is more than one `GApplication`
--- in your process. `application` cannot be `nil`.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param application Gtk.Application # a `GtkApplication`
---@return nil
function Gtk.Builder:set_application(application) end

--- # method Gtk.Builder:set_translation_domain()
---
--- Sets the translation domain of `builder`.
--- See `GtkBuilder`:translation-domain.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param domain? string # the translation domain or `nil`
---@return nil
function Gtk.Builder:set_translation_domain(domain) end

--- # method Gtk.Builder:value_from_string()
---
--- This function demarshals a value from a string. This function
--- calls `g_value_init()` on the `value` argument, so it need not be
--- initialised beforehand.
--- 
--- This function can handle char, uchar, boolean, int, uint, long,
--- ulong, enum, flags, float, double, string, `GdkColor`, `GdkRGBA` and
--- `GtkAdjustment` type values. Support for `GtkWidget` type values is
--- still to come.
--- 
--- Upon errors `false` will be returned and `error` will be assigned a
--- `GError` from the `GTK_BUILDER_ERROR` domain.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param pspec GObject.ParamSpec # the `GParamSpec` for the property
---@param string string # the string representation of the value
---@param value GObject.Value # the `GValue` to store the result in
---@return (boolean|nil) # `true` on success
function Gtk.Builder:value_from_string(pspec, string, value) end

--- # method Gtk.Builder:value_from_string_type()
---
--- Like `gtk_builder_value_from_string()`, this function demarshals
--- a value from a string, but takes a `GType` instead of `GParamSpec`.
--- This function calls `g_value_init()` on the `value` argument, so it
--- need not be initialised beforehand.
--- 
--- Upon errors `false` will be returned and `error` will be assigned a
--- `GError` from the `GTK_BUILDER_ERROR` domain.
---
--- ---
---
---@param self Gtk.Builder # a `GtkBuilder`
---@param type Gtk.GType # the `GType` of the value
---@param string string # the string representation of the value
---@param value GObject.Value # the `GValue` to store the result in
---@return (boolean|nil) # `true` on success
function Gtk.Builder:value_from_string_type(type, string, value) end

--- # function Gtk.Builder.new()
---
--- Creates a new empty builder object.
--- 
--- This function is only useful if you intend to make multiple calls
--- to `gtk_builder_add_from_file()`, `gtk_builder_add_from_resource()`
--- or `gtk_builder_add_from_string()` in order to merge multiple UI
--- descriptions into a single builder.
--- 
--- Most users will probably want to use `gtk_builder_new_from_file()`,
--- `gtk_builder_new_from_resource()` or `gtk_builder_new_from_string()`.
---
--- ---
---
---@return Gtk.Builder # a new (empty) `GtkBuilder` object
function Gtk.Builder.new() end

--- # function Gtk.Builder.new_from_file()
---
--- Builds the [GtkBuilder UI definition][BUILDER-UI]
--- in the file `filename`.
--- 
--- If there is an error opening the file or parsing the description then
--- the program will be aborted.  You should only ever attempt to parse
--- user interface descriptions that are shipped as part of your program.
---
--- ---
---
---@param filename string # filename of user interface description file
---@return Gtk.Builder # a `GtkBuilder` containing the described interface
function Gtk.Builder.new_from_file(filename) end

--- # function Gtk.Builder.new_from_resource()
---
--- Builds the [GtkBuilder UI definition][BUILDER-UI]
--- at `resource_path`.
--- 
--- If there is an error locating the resource or parsing the
--- description, then the program will be aborted.
---
--- ---
---
---@param resource_path string # a `GResource` resource path
---@return Gtk.Builder # a `GtkBuilder` containing the described interface
function Gtk.Builder.new_from_resource(resource_path) end

--- # function Gtk.Builder.new_from_string()
---
--- Builds the user interface described by `string` (in the
--- [GtkBuilder UI definition][BUILDER-UI] format).
--- 
--- If `string` is `nil`-terminated, then `length` should be -1.
--- If `length` is not -1, then it is the length of `string`.
--- 
--- If there is an error parsing `string` then the program will be
--- aborted. You should not attempt to parse user interface description
--- from untrusted sources.
---
--- ---
---
---@param string string # a user interface (XML) description
---@param length integer # the length of `string`, or -1
---@return Gtk.Builder # a `GtkBuilder` containing the interface described by `string`
function Gtk.Builder.new_from_string(string, length) end

--- # record Gtk.BuilderClass
---
---@class Gtk.BuilderClass
---@field parent_class GObject.ObjectClass
---@field get_type_from_name fun(builder: Gtk.Builder, type_name: string): Gtk.GType
Gtk.BuilderClass = {}

---@alias Gtk.BuilderConnectFunc fun(builder: Gtk.Builder, object: GObject.Object, signal_name: string, handler_name: string, connect_object: GObject.Object, flags: GObject.ConnectFlags, user_data: userdata): nil

---@enum Gtk.BuilderError
Gtk.BuilderError = {}

--- # record Gtk.BuilderPrivate
---
---@class Gtk.BuilderPrivate
Gtk.BuilderPrivate = {}

--- # class Gtk.Button
---
--- The `GtkButton` widget is generally used to trigger a callback function that is
--- called when the button is pressed.  The various signals and how to use them
--- are outlined below.
--- 
--- The `GtkButton` widget can hold any valid child widget.  That is, it can hold
--- almost any other standard `GtkWidget`.  The most commonly used child is the
--- `GtkLabel`.
--- 
--- # CSS nodes
--- 
--- GtkButton has a single CSS node with name button. The node will get the
--- style classes .image-button or .text-button, if the content is just an
--- image or label, respectively. It may also receive the .flat style class.
--- 
--- Other style classes that are commonly used with GtkButton include
--- .suggested-action and .destructive-action. In special cases, buttons
--- can be made round by adding the .circular style class.
--- 
--- Button-like widgets like `GtkToggleButton`, `GtkMenuButton`, `GtkVolumeButton`,
--- `GtkLockButton`, `GtkColorButton`, `GtkFontButton` or `GtkFileChooserButton` use
--- style classes such as .toggle, .popup, .scale, .lock, .color, .font, .file
--- to differentiate themselves from a plain GtkButton.
---
--- ---
---
---@class Gtk.Button : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field bin Gtk.Bin
---@field priv Gtk.ButtonPrivate
---@operator call: Gtk.Button
Gtk.Button = {}

--- # method Gtk.Button:clicked()
---
--- Emits a `GtkButton`::clicked signal to the given `GtkButton`.
---
--- ---
---
---@param self Gtk.Button # The `GtkButton` you want to send the signal to.
---@return nil
function Gtk.Button:clicked() end

--- # method Gtk.Button:enter()
---
--- Emits a `GtkButton`::enter signal to the given `GtkButton`.
---
--- ---
---
---@param self Gtk.Button # The `GtkButton` you want to send the signal to.
---@return nil
function Gtk.Button:enter() end

--- # method Gtk.Button:get_alignment()
---
--- Gets the alignment of the child in the button.
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@param xalign number # return location for horizontal alignment
---@param yalign number # return location for vertical alignment
---@return nil
function Gtk.Button:get_alignment(xalign, yalign) end

--- # method Gtk.Button:get_always_show_image()
---
--- Returns whether the button will ignore the `GtkSettings`:gtk-button-images
--- setting and always show the image, if available.
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@return (boolean|nil) # `true` if the button will always show the image
function Gtk.Button:get_always_show_image() end

--- # method Gtk.Button:get_event_window()
---
--- Returns the button’s event window if it is realized, `nil` otherwise.
--- This function should be rarely needed.
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@return Gdk.Window # `button`’s event window.
function Gtk.Button:get_event_window() end

--- # method Gtk.Button:get_focus_on_click()
---
--- Returns whether the button grabs focus when it is clicked with the mouse.
--- See `gtk_button_set_focus_on_click()`.
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@return (boolean|nil) # `true` if the button grabs focus when it is clicked with the mouse.
function Gtk.Button:get_focus_on_click() end

--- # method Gtk.Button:get_image()
---
--- Gets the widget that is currenty set as the image of `button`.
--- This may have been explicitly set by `gtk_button_set_image()`
--- or constructed by `gtk_button_new_from_stock()`.
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@return Gtk.Widget # a `GtkWidget` or `nil` in case there is no image
function Gtk.Button:get_image() end

--- # method Gtk.Button:get_image_position()
---
--- Gets the position of the image relative to the text
--- inside the button.
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@return Gtk.PositionType # the position
function Gtk.Button:get_image_position() end

--- # method Gtk.Button:get_label()
---
--- Fetches the text from the label of the button, as set by
--- `gtk_button_set_label()`. If the label text has not
--- been set the return value will be `nil`. This will be the
--- case if you create an empty button with `gtk_button_new()` to
--- use as a container.
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@return string # The text of the label widget. This string is owned by the widget and must not be modified or freed.
function Gtk.Button:get_label() end

--- # method Gtk.Button:get_relief()
---
--- Returns the current relief style of the given `GtkButton`.
---
--- ---
---
---@param self Gtk.Button # The `GtkButton` you want the `GtkReliefStyle` from.
---@return Gtk.ReliefStyle # The current `GtkReliefStyle`
function Gtk.Button:get_relief() end

--- # method Gtk.Button:get_use_stock()
---
--- Returns whether the button label is a stock item.
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@return (boolean|nil) # `true` if the button label is used to select a stock item instead of being used directly as the label text.
function Gtk.Button:get_use_stock() end

--- # method Gtk.Button:get_use_underline()
---
--- Returns whether an embedded underline in the button label indicates a
--- mnemonic. See gtk_button_set_use_underline ().
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@return (boolean|nil) # `true` if an embedded underline in the button label indicates the mnemonic accelerator keys.
function Gtk.Button:get_use_underline() end

--- # method Gtk.Button:leave()
---
--- Emits a `GtkButton`::leave signal to the given `GtkButton`.
---
--- ---
---
---@param self Gtk.Button # The `GtkButton` you want to send the signal to.
---@return nil
function Gtk.Button:leave() end

--- # method Gtk.Button:pressed()
---
--- Emits a `GtkButton`::pressed signal to the given `GtkButton`.
---
--- ---
---
---@param self Gtk.Button # The `GtkButton` you want to send the signal to.
---@return nil
function Gtk.Button:pressed() end

--- # method Gtk.Button:released()
---
--- Emits a `GtkButton`::released signal to the given `GtkButton`.
---
--- ---
---
---@param self Gtk.Button # The `GtkButton` you want to send the signal to.
---@return nil
function Gtk.Button:released() end

--- # method Gtk.Button:set_alignment()
---
--- Sets the alignment of the child. This property has no effect unless
--- the child is a `GtkMisc` or a `GtkAlignment`.
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@param xalign number # the horizontal position of the child, 0.0 is left aligned, 1.0 is right aligned
---@param yalign number # the vertical position of the child, 0.0 is top aligned, 1.0 is bottom aligned
---@return nil
function Gtk.Button:set_alignment(xalign, yalign) end

--- # method Gtk.Button:set_always_show_image()
---
--- If `true`, the button will ignore the `GtkSettings`:gtk-button-images
--- setting and always show the image, if available.
--- 
--- Use this property if the button  would be useless or hard to use
--- without the image.
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@param always_show (boolean|nil) # `true` if the menuitem should always show the image
---@return nil
function Gtk.Button:set_always_show_image(always_show) end

--- # method Gtk.Button:set_focus_on_click()
---
--- Sets whether the button will grab focus when it is clicked with the mouse.
--- Making mouse clicks not grab focus is useful in places like toolbars where
--- you don’t want the keyboard focus removed from the main area of the
--- application.
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@param focus_on_click (boolean|nil) # whether the button grabs focus when clicked with the mouse
---@return nil
function Gtk.Button:set_focus_on_click(focus_on_click) end

--- # method Gtk.Button:set_image()
---
--- Set the image of `button` to the given widget. The image will be
--- displayed if the label text is `nil` or if
--- `GtkButton`:always-show-image is `true`. You don’t have to call
--- `gtk_widget_show()` on `image` yourself.
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@param image? Gtk.Widget # a widget to set as the image for the button, or `nil` to unset
---@return nil
function Gtk.Button:set_image(image) end

--- # method Gtk.Button:set_image_position()
---
--- Sets the position of the image relative to the text
--- inside the button.
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@param position Gtk.PositionType # the position
---@return nil
function Gtk.Button:set_image_position(position) end

--- # method Gtk.Button:set_label()
---
--- Sets the text of the label of the button to `str`. This text is
--- also used to select the stock item if `gtk_button_set_use_stock()`
--- is used.
--- 
--- This will also clear any previously set labels.
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@param label string # a string
---@return nil
function Gtk.Button:set_label(label) end

--- # method Gtk.Button:set_relief()
---
--- Sets the relief style of the edges of the given `GtkButton` widget.
--- Two styles exist, %GTK_RELIEF_NORMAL and %GTK_RELIEF_NONE.
--- The default style is, as one can guess, %GTK_RELIEF_NORMAL.
--- The deprecated value %GTK_RELIEF_HALF behaves the same as
--- %GTK_RELIEF_NORMAL.
---
--- ---
---
---@param self Gtk.Button # The `GtkButton` you want to set relief styles of
---@param relief Gtk.ReliefStyle # The GtkReliefStyle as described above
---@return nil
function Gtk.Button:set_relief(relief) end

--- # method Gtk.Button:set_use_stock()
---
--- If `true`, the label set on the button is used as a
--- stock id to select the stock item for the button.
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@param use_stock (boolean|nil) # `true` if the button should use a stock item
---@return nil
function Gtk.Button:set_use_stock(use_stock) end

--- # method Gtk.Button:set_use_underline()
---
--- If true, an underline in the text of the button label indicates
--- the next character should be used for the mnemonic accelerator key.
---
--- ---
---
---@param self Gtk.Button # a `GtkButton`
---@param use_underline (boolean|nil) # `true` if underlines in the text indicate mnemonics
---@return nil
function Gtk.Button:set_use_underline(use_underline) end

--- # function Gtk.Button.new()
---
--- Creates a new `GtkButton` widget. To add a child widget to the button,
--- use `gtk_container_add()`.
---
--- ---
---
---@return Gtk.Widget # The newly created `GtkButton` widget.
function Gtk.Button.new() end

--- # function Gtk.Button.new_from_icon_name()
---
--- Creates a new button containing an icon from the current icon theme.
--- 
--- If the icon name isn’t known, a “broken image” icon will be
--- displayed instead. If the current icon theme is changed, the icon
--- will be updated appropriately.
--- 
--- This function is a convenience wrapper around `gtk_button_new()` and
--- `gtk_button_set_image()`.
---
--- ---
---
---@param icon_name? string # an icon name or `nil`
---@param size integer # an icon size (`GtkIconSize`)
---@return Gtk.Widget # a new `GtkButton` displaying the themed icon
function Gtk.Button.new_from_icon_name(icon_name, size) end

--- # function Gtk.Button.new_from_stock()
---
--- Creates a new `GtkButton` containing the image and text from a
--- [stock item][gtkstock].
--- Some stock ids have preprocessor macros like `GTK_STOCK_OK` and
--- `GTK_STOCK_APPLY`.
--- 
--- If `stock_id` is unknown, then it will be treated as a mnemonic
--- label (as for `gtk_button_new_with_mnemonic()`).
---
--- ---
---
---@param stock_id string # the name of the stock item
---@return Gtk.Widget # a new `GtkButton`
function Gtk.Button.new_from_stock(stock_id) end

--- # function Gtk.Button.new_with_label()
---
--- Creates a `GtkButton` widget with a `GtkLabel` child containing the given
--- text.
---
--- ---
---
---@param label string # The text you want the `GtkLabel` to hold.
---@return Gtk.Widget # The newly created `GtkButton` widget.
function Gtk.Button.new_with_label(label) end

--- # function Gtk.Button.new_with_mnemonic()
---
--- Creates a new `GtkButton` containing a label.
--- If characters in `label` are preceded by an underscore, they are underlined.
--- If you need a literal underscore character in a label, use “__” (two
--- underscores). The first underlined character represents a keyboard
--- accelerator called a mnemonic.
--- Pressing Alt and that key activates the button.
---
--- ---
---
---@param label string # The text of the button, with an underscore in front of the mnemonic character
---@return Gtk.Widget # a new `GtkButton`
function Gtk.Button.new_with_mnemonic(label) end

--- # class Gtk.ButtonAccessible
---
---@class Gtk.ButtonAccessible : Gtk.ContainerAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.Image
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.ButtonAccessiblePrivate
Gtk.ButtonAccessible = {}

--- # record Gtk.ButtonAccessibleClass
---
---@class Gtk.ButtonAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.ButtonAccessibleClass = {}

--- # record Gtk.ButtonAccessiblePrivate
---
---@class Gtk.ButtonAccessiblePrivate
Gtk.ButtonAccessiblePrivate = {}

--- # class Gtk.ButtonBox
---
---@class Gtk.ButtonBox : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field box Gtk.Box
---@field priv Gtk.ButtonBoxPrivate
---@operator call: Gtk.ButtonBox
Gtk.ButtonBox = {}

--- # method Gtk.ButtonBox:get_child_non_homogeneous()
---
--- Returns whether the child is exempted from homogenous
--- sizing.
---
--- ---
---
---@param self Gtk.ButtonBox # a `GtkButtonBox`
---@param child Gtk.Widget # a child of `widget`
---@return (boolean|nil) # `true` if the child is not subject to homogenous sizing
function Gtk.ButtonBox:get_child_non_homogeneous(child) end

--- # method Gtk.ButtonBox:get_child_secondary()
---
--- Returns whether `child` should appear in a secondary group of children.
---
--- ---
---
---@param self Gtk.ButtonBox # a `GtkButtonBox`
---@param child Gtk.Widget # a child of `widget`
---@return (boolean|nil) # whether `child` should appear in a secondary group of children.
function Gtk.ButtonBox:get_child_secondary(child) end

--- # method Gtk.ButtonBox:get_layout()
---
--- Retrieves the method being used to arrange the buttons in a button box.
---
--- ---
---
---@param self Gtk.ButtonBox # a `GtkButtonBox`
---@return Gtk.ButtonBoxStyle # the method used to lay out buttons in `widget`.
function Gtk.ButtonBox:get_layout() end

--- # method Gtk.ButtonBox:set_child_non_homogeneous()
---
--- Sets whether the child is exempted from homogeous sizing.
---
--- ---
---
---@param self Gtk.ButtonBox # a `GtkButtonBox`
---@param child Gtk.Widget # a child of `widget`
---@param non_homogeneous (boolean|nil) # the new value
---@return nil
function Gtk.ButtonBox:set_child_non_homogeneous(child, non_homogeneous) end

--- # method Gtk.ButtonBox:set_child_secondary()
---
--- Sets whether `child` should appear in a secondary group of children.
--- A typical use of a secondary child is the help button in a dialog.
--- 
--- This group appears after the other children if the style
--- is %GTK_BUTTONBOX_START, %GTK_BUTTONBOX_SPREAD or
--- %GTK_BUTTONBOX_EDGE, and before the other children if the style
--- is %GTK_BUTTONBOX_END. For horizontal button boxes, the definition
--- of before/after depends on direction of the widget (see
--- `gtk_widget_set_direction()`). If the style is %GTK_BUTTONBOX_START
--- or %GTK_BUTTONBOX_END, then the secondary children are aligned at
--- the other end of the button box from the main children. For the
--- other styles, they appear immediately next to the main children.
---
--- ---
---
---@param self Gtk.ButtonBox # a `GtkButtonBox`
---@param child Gtk.Widget # a child of `widget`
---@param is_secondary (boolean|nil) # if `true`, the `child` appears in a secondary group of the button box.
---@return nil
function Gtk.ButtonBox:set_child_secondary(child, is_secondary) end

--- # method Gtk.ButtonBox:set_layout()
---
--- Changes the way buttons are arranged in their container.
---
--- ---
---
---@param self Gtk.ButtonBox # a `GtkButtonBox`
---@param layout_style Gtk.ButtonBoxStyle # the new layout style
---@return nil
function Gtk.ButtonBox:set_layout(layout_style) end

--- # function Gtk.ButtonBox.new()
---
--- Creates a new `GtkButtonBox`.
---
--- ---
---
---@param orientation Gtk.Orientation # the box's orientation.
---@return Gtk.Widget # a new `GtkButtonBox`.
function Gtk.ButtonBox.new(orientation) end

--- # record Gtk.ButtonBoxClass
---
---@class Gtk.ButtonBoxClass
---@field parent_class Gtk.BoxClass # The parent class.
Gtk.ButtonBoxClass = {}

--- # record Gtk.ButtonBoxPrivate
---
---@class Gtk.ButtonBoxPrivate
Gtk.ButtonBoxPrivate = {}

---@enum Gtk.ButtonBoxStyle
Gtk.ButtonBoxStyle = {}

--- # record Gtk.ButtonClass
---
---@class Gtk.ButtonClass
---@field parent_class Gtk.BinClass # The parent class.
---@field pressed fun(button: Gtk.Button): nil
---@field released fun(button: Gtk.Button): nil
---@field clicked fun(button: Gtk.Button): nil
---@field enter fun(button: Gtk.Button): nil
---@field leave fun(button: Gtk.Button): nil
---@field activate fun(button: Gtk.Button): nil
Gtk.ButtonClass = {}

--- # record Gtk.ButtonPrivate
---
---@class Gtk.ButtonPrivate
Gtk.ButtonPrivate = {}

---@enum Gtk.ButtonRole
Gtk.ButtonRole = {}

---@enum Gtk.ButtonsType
Gtk.ButtonsType = {}

--- # class Gtk.Calendar
---
--- `GtkCalendar` is a widget that displays a Gregorian calendar, one month
--- at a time. It can be created with `gtk_calendar_new()`.
--- 
--- The month and year currently displayed can be altered with
--- `gtk_calendar_select_month()`. The exact day can be selected from the
--- displayed month using `gtk_calendar_select_day()`.
--- 
--- To place a visual marker on a particular day, use `gtk_calendar_mark_day()`
--- and to remove the marker, `gtk_calendar_unmark_day()`. Alternative, all
--- marks can be cleared with `gtk_calendar_clear_marks()`.
--- 
--- The way in which the calendar itself is displayed can be altered using
--- `gtk_calendar_set_display_options()`.
--- 
--- The selected date can be retrieved from a `GtkCalendar` using
--- `gtk_calendar_get_date()`.
--- 
--- Users should be aware that, although the Gregorian calendar is the
--- legal calendar in most countries, it was adopted progressively
--- between 1582 and 1929. Display before these dates is likely to be
--- historically incorrect.
---
--- ---
---
---@class Gtk.Calendar : Gtk.Widget, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field widget Gtk.Widget
---@field priv Gtk.CalendarPrivate
---@operator call: Gtk.Calendar
Gtk.Calendar = {}

--- # method Gtk.Calendar:clear_marks()
---
--- Remove all visual markers.
---
--- ---
---
---@param self Gtk.Calendar # a `GtkCalendar`
---@return nil
function Gtk.Calendar:clear_marks() end

--- # method Gtk.Calendar:get_date()
---
--- Obtains the selected date from a `GtkCalendar`.
---
--- ---
---
---@param self Gtk.Calendar # a `GtkCalendar`
---@param year? integer # location to store the year as a decimal number (e.g. 2011), or `nil`
---@param month? integer # location to store the month number (between 0 and 11), or `nil`
---@param day? integer # location to store the day number (between 1 and 31), or `nil`
---@return nil
function Gtk.Calendar:get_date(year, month, day) end

--- # method Gtk.Calendar:get_day_is_marked()
---
--- Returns if the `day` of the `calendar` is already marked.
---
--- ---
---
---@param self Gtk.Calendar # a `GtkCalendar`
---@param day integer # the day number between 1 and 31.
---@return (boolean|nil) # whether the day is marked.
function Gtk.Calendar:get_day_is_marked(day) end

--- # method Gtk.Calendar:get_detail_height_rows()
---
--- Queries the height of detail cells, in rows.
--- See `GtkCalendar`:detail-width-chars.
---
--- ---
---
---@param self Gtk.Calendar # a `GtkCalendar`.
---@return integer # The height of detail cells, in rows.
function Gtk.Calendar:get_detail_height_rows() end

--- # method Gtk.Calendar:get_detail_width_chars()
---
--- Queries the width of detail cells, in characters.
--- See `GtkCalendar`:detail-width-chars.
---
--- ---
---
---@param self Gtk.Calendar # a `GtkCalendar`.
---@return integer # The width of detail cells, in characters.
function Gtk.Calendar:get_detail_width_chars() end

--- # method Gtk.Calendar:get_display_options()
---
--- Returns the current display options of `calendar`.
---
--- ---
---
---@param self Gtk.Calendar # a `GtkCalendar`
---@return Gtk.CalendarDisplayOptions # the display options.
function Gtk.Calendar:get_display_options() end

--- # method Gtk.Calendar:mark_day()
---
--- Places a visual marker on a particular day.
---
--- ---
---
---@param self Gtk.Calendar # a `GtkCalendar`
---@param day integer # the day number to mark between 1 and 31.
---@return nil
function Gtk.Calendar:mark_day(day) end

--- # method Gtk.Calendar:select_day()
---
--- Selects a day from the current month.
---
--- ---
---
---@param self Gtk.Calendar # a `GtkCalendar`.
---@param day integer # the day number between 1 and 31, or 0 to unselect the currently selected day.
---@return nil
function Gtk.Calendar:select_day(day) end

--- # method Gtk.Calendar:select_month()
---
--- Shifts the calendar to a different month.
---
--- ---
---
---@param self Gtk.Calendar # a `GtkCalendar`
---@param month integer # a month number between 0 and 11.
---@param year integer # the year the month is in.
---@return nil
function Gtk.Calendar:select_month(month, year) end

--- # method Gtk.Calendar:set_detail_func()
---
--- Installs a function which provides Pango markup with detail information
--- for each day. Examples for such details are holidays or appointments. That
--- information is shown below each day when `GtkCalendar`:show-details is set.
--- A tooltip containing with full detail information is provided, if the entire
--- text should not fit into the details area, or if `GtkCalendar`:show-details
--- is not set.
--- 
--- The size of the details area can be restricted by setting the
--- `GtkCalendar`:detail-width-chars and `GtkCalendar`:detail-height-rows
--- properties.
---
--- ---
---
---@param self Gtk.Calendar # a `GtkCalendar`.
---@param func Gtk.CalendarDetailFunc # a function providing details for each day.
---@param data? userdata # data to pass to `func` invokations.
---@param destroy GLib.DestroyNotify # a function for releasing `data`.
---@return nil
function Gtk.Calendar:set_detail_func(func, data, destroy) end

--- # method Gtk.Calendar:set_detail_height_rows()
---
--- Updates the height of detail cells.
--- See `GtkCalendar`:detail-height-rows.
---
--- ---
---
---@param self Gtk.Calendar # a `GtkCalendar`.
---@param rows integer # detail height in rows.
---@return nil
function Gtk.Calendar:set_detail_height_rows(rows) end

--- # method Gtk.Calendar:set_detail_width_chars()
---
--- Updates the width of detail cells.
--- See `GtkCalendar`:detail-width-chars.
---
--- ---
---
---@param self Gtk.Calendar # a `GtkCalendar`.
---@param chars integer # detail width in characters.
---@return nil
function Gtk.Calendar:set_detail_width_chars(chars) end

--- # method Gtk.Calendar:set_display_options()
---
--- Sets display options (whether to display the heading and the month
--- headings).
---
--- ---
---
---@param self Gtk.Calendar # a `GtkCalendar`
---@param flags Gtk.CalendarDisplayOptions # the display options to set
---@return nil
function Gtk.Calendar:set_display_options(flags) end

--- # method Gtk.Calendar:unmark_day()
---
--- Removes the visual marker from a particular day.
---
--- ---
---
---@param self Gtk.Calendar # a `GtkCalendar`.
---@param day integer # the day number to unmark between 1 and 31.
---@return nil
function Gtk.Calendar:unmark_day(day) end

--- # function Gtk.Calendar.new()
---
--- Creates a new calendar, with the current date being selected.
---
--- ---
---
---@return Gtk.Widget # a newly `GtkCalendar` widget
function Gtk.Calendar.new() end

--- # record Gtk.CalendarClass
---
---@class Gtk.CalendarClass
---@field parent_class Gtk.WidgetClass
---@field month_changed fun(calendar: Gtk.Calendar): nil
---@field day_selected fun(calendar: Gtk.Calendar): nil
---@field day_selected_double_click fun(calendar: Gtk.Calendar): nil
---@field prev_month fun(calendar: Gtk.Calendar): nil
---@field next_month fun(calendar: Gtk.Calendar): nil
---@field prev_year fun(calendar: Gtk.Calendar): nil
---@field next_year fun(calendar: Gtk.Calendar): nil
Gtk.CalendarClass = {}

---@alias Gtk.CalendarDetailFunc fun(calendar: Gtk.Calendar, year: integer, month: integer, day: integer, user_data: userdata): string

---@enum Gtk.CalendarDisplayOptions
Gtk.CalendarDisplayOptions = {}

--- # record Gtk.CalendarPrivate
---
---@class Gtk.CalendarPrivate
Gtk.CalendarPrivate = {}

---@alias Gtk.Callback fun(widget: Gtk.Widget, data: userdata): nil

--- # class Gtk.CellAccessible
---
---@class Gtk.CellAccessible : Gtk.Accessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.TableCell
---@field parent Gtk.Accessible
---@field priv Gtk.CellAccessiblePrivate
Gtk.CellAccessible = {}

--- # record Gtk.CellAccessibleClass
---
---@class Gtk.CellAccessibleClass
---@field parent_class Gtk.AccessibleClass
---@field update_cache fun(cell: Gtk.CellAccessible, emit_signal: (boolean|nil)): nil
Gtk.CellAccessibleClass = {}

--- # interface Gtk.CellAccessibleParent
---
---@class Gtk.CellAccessibleParent
Gtk.CellAccessibleParent = {}

--- # method Gtk.CellAccessibleParent:activate()
---
---@param self Gtk.CellAccessibleParent
---@param cell Gtk.CellAccessible
---@return nil
function Gtk.CellAccessibleParent:activate(cell) end

--- # method Gtk.CellAccessibleParent:edit()
---
---@param self Gtk.CellAccessibleParent
---@param cell Gtk.CellAccessible
---@return nil
function Gtk.CellAccessibleParent:edit(cell) end

--- # method Gtk.CellAccessibleParent:expand_collapse()
---
---@param self Gtk.CellAccessibleParent
---@param cell Gtk.CellAccessible
---@return nil
function Gtk.CellAccessibleParent:expand_collapse(cell) end

--- # method Gtk.CellAccessibleParent:get_cell_area()
---
---@param self Gtk.CellAccessibleParent
---@param cell Gtk.CellAccessible
---@param cell_rect Gdk.Rectangle
---@return nil
function Gtk.CellAccessibleParent:get_cell_area(cell, cell_rect) end

--- # method Gtk.CellAccessibleParent:get_cell_extents()
---
---@param self Gtk.CellAccessibleParent
---@param cell Gtk.CellAccessible
---@param x integer
---@param y integer
---@param width integer
---@param height integer
---@param coord_type Atk.CoordType
---@return nil
function Gtk.CellAccessibleParent:get_cell_extents(cell, x, y, width, height, coord_type) end

--- # method Gtk.CellAccessibleParent:get_cell_position()
---
---@param self Gtk.CellAccessibleParent
---@param cell Gtk.CellAccessible
---@param row integer
---@param column integer
---@return nil
function Gtk.CellAccessibleParent:get_cell_position(cell, row, column) end

--- # method Gtk.CellAccessibleParent:get_child_index()
---
---@param self Gtk.CellAccessibleParent
---@param cell Gtk.CellAccessible
---@return integer
function Gtk.CellAccessibleParent:get_child_index(cell) end

--- # method Gtk.CellAccessibleParent:get_column_header_cells()
---
---@param self Gtk.CellAccessibleParent
---@param cell Gtk.CellAccessible
---@return unknown[]
function Gtk.CellAccessibleParent:get_column_header_cells(cell) end

--- # method Gtk.CellAccessibleParent:get_renderer_state()
---
---@param self Gtk.CellAccessibleParent
---@param cell Gtk.CellAccessible
---@return Gtk.CellRendererState
function Gtk.CellAccessibleParent:get_renderer_state(cell) end

--- # method Gtk.CellAccessibleParent:get_row_header_cells()
---
---@param self Gtk.CellAccessibleParent
---@param cell Gtk.CellAccessible
---@return unknown[]
function Gtk.CellAccessibleParent:get_row_header_cells(cell) end

--- # method Gtk.CellAccessibleParent:grab_focus()
---
---@param self Gtk.CellAccessibleParent
---@param cell Gtk.CellAccessible
---@return (boolean|nil)
function Gtk.CellAccessibleParent:grab_focus(cell) end

--- # method Gtk.CellAccessibleParent:update_relationset()
---
---@param self Gtk.CellAccessibleParent
---@param cell Gtk.CellAccessible
---@param relationset Atk.RelationSet
---@return nil
function Gtk.CellAccessibleParent:update_relationset(cell, relationset) end

--- # record Gtk.CellAccessibleParentIface
---
---@class Gtk.CellAccessibleParentIface
---@field parent GObject.TypeInterface
---@field get_cell_extents fun(parent: Gtk.CellAccessibleParent, cell: Gtk.CellAccessible, x: integer, y: integer, width: integer, height: integer, coord_type: Atk.CoordType): nil
---@field get_cell_area fun(parent: Gtk.CellAccessibleParent, cell: Gtk.CellAccessible, cell_rect: Gdk.Rectangle): nil
---@field grab_focus fun(parent: Gtk.CellAccessibleParent, cell: Gtk.CellAccessible): (boolean|nil)
---@field get_child_index fun(parent: Gtk.CellAccessibleParent, cell: Gtk.CellAccessible): integer
---@field get_renderer_state fun(parent: Gtk.CellAccessibleParent, cell: Gtk.CellAccessible): Gtk.CellRendererState
---@field expand_collapse fun(parent: Gtk.CellAccessibleParent, cell: Gtk.CellAccessible): nil
---@field activate fun(parent: Gtk.CellAccessibleParent, cell: Gtk.CellAccessible): nil
---@field edit fun(parent: Gtk.CellAccessibleParent, cell: Gtk.CellAccessible): nil
---@field update_relationset fun(parent: Gtk.CellAccessibleParent, cell: Gtk.CellAccessible, relationset: Atk.RelationSet): nil
---@field get_cell_position fun(parent: Gtk.CellAccessibleParent, cell: Gtk.CellAccessible, row: integer, column: integer): nil
---@field get_column_header_cells fun(parent: Gtk.CellAccessibleParent, cell: Gtk.CellAccessible): unknown[]
---@field get_row_header_cells fun(parent: Gtk.CellAccessibleParent, cell: Gtk.CellAccessible): unknown[]
Gtk.CellAccessibleParentIface = {}

--- # record Gtk.CellAccessiblePrivate
---
---@class Gtk.CellAccessiblePrivate
Gtk.CellAccessiblePrivate = {}

---@alias Gtk.CellAllocCallback fun(renderer: Gtk.CellRenderer, cell_area: Gdk.Rectangle, cell_background: Gdk.Rectangle, data: userdata): (boolean|nil)

--- # class Gtk.CellArea
---
--- The `GtkCellArea` is an abstract class for `GtkCellLayout` widgets
--- (also referred to as "layouting widgets") to interface with an
--- arbitrary number of `GtkCellRenderers` and interact with the user
--- for a given `GtkTreeModel` row.
--- 
--- The cell area handles events, focus navigation, drawing and
--- size requests and allocations for a given row of data.
--- 
--- Usually users dont have to interact with the `GtkCellArea` directly
--- unless they are implementing a cell-layouting widget themselves.
--- 
--- # Requesting area sizes
--- 
--- As outlined in
--- [GtkWidget’s geometry management section][geometry-management],
--- GTK+ uses a height-for-width
--- geometry management system to compute the sizes of widgets and user
--- interfaces. `GtkCellArea` uses the same semantics to calculate the
--- size of an area for an arbitrary number of `GtkTreeModel` rows.
--- 
--- When requesting the size of a cell area one needs to calculate
--- the size for a handful of rows, and this will be done differently by
--- different layouting widgets. For instance a `GtkTreeViewColumn`
--- always lines up the areas from top to bottom while a `GtkIconView`
--- on the other hand might enforce that all areas received the same
--- width and wrap the areas around, requesting height for more cell
--- areas when allocated less width.
--- 
--- It’s also important for areas to maintain some cell
--- alignments with areas rendered for adjacent rows (cells can
--- appear “columnized” inside an area even when the size of
--- cells are different in each row). For this reason the `GtkCellArea`
--- uses a `GtkCellAreaContext` object to store the alignments
--- and sizes along the way (as well as the overall largest minimum
--- and natural size for all the rows which have been calculated
--- with the said context).
--- 
--- The `GtkCellAreaContext` is an opaque object specific to the
--- `GtkCellArea` which created it (see `gtk_cell_area_create_context()`).
--- The owning cell-layouting widget can create as many contexts as
--- it wishes to calculate sizes of rows which should receive the
--- same size in at least one orientation (horizontally or vertically),
--- However, it’s important that the same `GtkCellAreaContext` which
--- was used to request the sizes for a given `GtkTreeModel` row be
--- used when rendering or processing events for that row.
--- 
--- In order to request the width of all the rows at the root level
--- of a `GtkTreeModel` one would do the following:
--- 
--- ```c
--- GtkTreeIter iter;
--- gint        minimum_width;
--- gint        natural_width;
--- 
--- valid = gtk_tree_model_get_iter_first (model, &iter);
--- while (valid)
---   {
---     gtk_cell_area_apply_attributes (area, model, &iter, FALSE, FALSE);
---     gtk_cell_area_get_preferred_width (area, context, widget, NULL, NULL);
--- 
---     valid = gtk_tree_model_iter_next (model, &iter);
---   }
--- gtk_cell_area_context_get_preferred_width (context, &minimum_width, &natural_width);
--- ```
--- 
--- Note that in this example it’s not important to observe the
--- returned minimum and natural width of the area for each row
--- unless the cell-layouting object is actually interested in the
--- widths of individual rows. The overall width is however stored
--- in the accompanying `GtkCellAreaContext` object and can be consulted
--- at any time.
--- 
--- This can be useful since `GtkCellLayout` widgets usually have to
--- support requesting and rendering rows in treemodels with an
--- exceedingly large amount of rows. The `GtkCellLayout` widget in
--- that case would calculate the required width of the rows in an
--- idle or timeout source (see `g_timeout_add()`) and when the widget
--- is requested its actual width in `GtkWidgetClass`.`get_preferred_width()`
--- it can simply consult the width accumulated so far in the
--- `GtkCellAreaContext` object.
--- 
--- A simple example where rows are rendered from top to bottom and
--- take up the full width of the layouting widget would look like:
--- 
--- ```c
--- static void
--- foo_get_preferred_width (GtkWidget       *widget,
---                          gint            *minimum_size,
---                          gint            *natural_size)
--- {
---   Foo        *foo  = FOO (widget);
---   FooPrivate *priv = foo->priv;
--- 
---   foo_ensure_at_least_one_handfull_of_rows_have_been_requested (foo);
--- 
---   gtk_cell_area_context_get_preferred_width (priv->context, minimum_size, natural_size);
--- }
--- ```
--- 
--- In the above example the Foo widget has to make sure that some
--- row sizes have been calculated (the amount of rows that Foo judged
--- was appropriate to request space for in a single timeout iteration)
--- before simply returning the amount of space required by the area via
--- the `GtkCellAreaContext`.
--- 
--- Requesting the height for width (or width for height) of an area is
--- a similar task except in this case the `GtkCellAreaContext` does not
--- store the data (actually, it does not know how much space the layouting
--- widget plans to allocate it for every row. It’s up to the layouting
--- widget to render each row of data with the appropriate height and
--- width which was requested by the `GtkCellArea`).
--- 
--- In order to request the height for width of all the rows at the
--- root level of a `GtkTreeModel` one would do the following:
--- 
--- ```c
--- GtkTreeIter iter;
--- gint        minimum_height;
--- gint        natural_height;
--- gint        full_minimum_height = 0;
--- gint        full_natural_height = 0;
--- 
--- valid = gtk_tree_model_get_iter_first (model, &iter);
--- while (valid)
---   {
---     gtk_cell_area_apply_attributes (area, model, &iter, FALSE, FALSE);
---     gtk_cell_area_get_preferred_height_for_width (area, context, widget,
---                                                   width, &minimum_height, &natural_height);
--- 
---     if (width_is_for_allocation)
---        cache_row_height (&iter, minimum_height, natural_height);
--- 
---     full_minimum_height += minimum_height;
---     full_natural_height += natural_height;
--- 
---     valid = gtk_tree_model_iter_next (model, &iter);
---   }
--- ```
--- 
--- Note that in the above example we would need to cache the heights
--- returned for each row so that we would know what sizes to render the
--- areas for each row. However we would only want to really cache the
--- heights if the request is intended for the layouting widgets real
--- allocation.
--- 
--- In some cases the layouting widget is requested the height for an
--- arbitrary for_width, this is a special case for layouting widgets
--- who need to request size for tens of thousands  of rows. For this
--- case it’s only important that the layouting widget calculate
--- one reasonably sized chunk of rows and return that height
--- synchronously. The reasoning here is that any layouting widget is
--- at least capable of synchronously calculating enough height to fill
--- the screen height (or scrolled window height) in response to a single
--- call to `GtkWidgetClass`.`get_preferred_height_for_width()`. Returning
--- a perfect height for width that is larger than the screen area is
--- inconsequential since after the layouting receives an allocation
--- from a scrolled window it simply continues to drive the scrollbar
--- values while more and more height is required for the row heights
--- that are calculated in the background.
--- 
--- # Rendering Areas
--- 
--- Once area sizes have been aquired at least for the rows in the
--- visible area of the layouting widget they can be rendered at
--- `GtkWidgetClass`.`draw()` time.
--- 
--- A crude example of how to render all the rows at the root level
--- runs as follows:
--- 
--- ```c
--- GtkAllocation allocation;
--- GdkRectangle  cell_area = { 0, };
--- GtkTreeIter   iter;
--- gint          minimum_width;
--- gint          natural_width;
--- 
--- gtk_widget_get_allocation (widget, &allocation);
--- cell_area.width = allocation.width;
--- 
--- valid = gtk_tree_model_get_iter_first (model, &iter);
--- while (valid)
---   {
---     cell_area.height = get_cached_height_for_row (&iter);
--- 
---     gtk_cell_area_apply_attributes (area, model, &iter, FALSE, FALSE);
---     gtk_cell_area_render (area, context, widget, cr,
---                           &cell_area, &cell_area, state_flags, FALSE);
--- 
---     cell_area.y += cell_area.height;
--- 
---     valid = gtk_tree_model_iter_next (model, &iter);
---   }
--- ```
--- 
--- Note that the cached height in this example really depends on how
--- the layouting widget works. The layouting widget might decide to
--- give every row its minimum or natural height or, if the model content
--- is expected to fit inside the layouting widget without scrolling, it
--- would make sense to calculate the allocation for each row at
--- `GtkWidget`::size-allocate time using `gtk_distribute_natural_allocation()`.
--- 
--- # Handling Events and Driving Keyboard Focus
--- 
--- Passing events to the area is as simple as handling events on any
--- normal widget and then passing them to the `gtk_cell_area_event()`
--- API as they come in. Usually `GtkCellArea` is only interested in
--- button events, however some customized derived areas can be implemented
--- who are interested in handling other events. Handling an event can
--- trigger the `GtkCellArea`::focus-changed signal to fire; as well as
--- `GtkCellArea`::add-editable in the case that an editable cell was
--- clicked and needs to start editing. You can call
--- `gtk_cell_area_stop_editing()` at any time to cancel any cell editing
--- that is currently in progress.
--- 
--- The `GtkCellArea` drives keyboard focus from cell to cell in a way
--- similar to `GtkWidget`. For layouting widgets that support giving
--- focus to cells it’s important to remember to pass %GTK_CELL_RENDERER_FOCUSED
--- to the area functions for the row that has focus and to tell the
--- area to paint the focus at render time.
--- 
--- Layouting widgets that accept focus on cells should implement the
--- `GtkWidgetClass`.`focus()` virtual method. The layouting widget is always
--- responsible for knowing where `GtkTreeModel` rows are rendered inside
--- the widget, so at `GtkWidgetClass`.`focus()` time the layouting widget
--- should use the `GtkCellArea` methods to navigate focus inside the area
--- and then observe the GtkDirectionType to pass the focus to adjacent
--- rows and areas.
--- 
--- A basic example of how the `GtkWidgetClass`.`focus()` virtual method
--- should be implemented:
--- 
--- ```c
--- static gboolean
--- foo_focus (GtkWidget       *widget,
---            GtkDirectionType direction)
--- {
---   Foo        *foo  = FOO (widget);
---   FooPrivate *priv = foo->priv;
---   gint        focus_row;
---   gboolean    have_focus = FALSE;
--- 
---   focus_row = priv->focus_row;
--- 
---   if (!gtk_widget_has_focus (widget))
---     gtk_widget_grab_focus (widget);
--- 
---   valid = gtk_tree_model_iter_nth_child (priv->model, &iter, NULL, priv->focus_row);
---   while (valid)
---     {
---       gtk_cell_area_apply_attributes (priv->area, priv->model, &iter, FALSE, FALSE);
--- 
---       if (gtk_cell_area_focus (priv->area, direction))
---         {
---            priv->focus_row = focus_row;
---            have_focus = TRUE;
---            break;
---         }
---       else
---         {
---           if (direction == GTK_DIR_RIGHT ||
---               direction == GTK_DIR_LEFT)
---             break;
---           else if (direction == GTK_DIR_UP ||
---                    direction == GTK_DIR_TAB_BACKWARD)
---            {
---               if (focus_row == 0)
---                 break;
---               else
---                {
---                   focus_row--;
---                   valid = gtk_tree_model_iter_nth_child (priv->model, &iter, NULL, focus_row);
---                }
---             }
---           else
---             {
---               if (focus_row == last_row)
---                 break;
---               else
---                 {
---                   focus_row++;
---                   valid = gtk_tree_model_iter_next (priv->model, &iter);
---                 }
---             }
---         }
---     }
---     return have_focus;
--- }
--- ```
--- 
--- Note that the layouting widget is responsible for matching the
--- GtkDirectionType values to the way it lays out its cells.
--- 
--- # Cell Properties
--- 
--- The `GtkCellArea` introduces cell properties for `GtkCellRenderers`
--- in very much the same way that `GtkContainer` introduces
--- [child properties][child-properties]
--- for `GtkWidgets`. This provides some general interfaces for defining
--- the relationship cell areas have with their cells. For instance in a
--- `GtkCellAreaBox` a cell might “expand” and receive extra space when
--- the area is allocated more than its full natural request, or a cell
--- might be configured to “align” with adjacent rows which were requested
--- and rendered with the same `GtkCellAreaContext`.
--- 
--- Use `gtk_cell_area_class_install_cell_property()` to install cell
--- properties for a cell area class and `gtk_cell_area_class_find_cell_property()`
--- or `gtk_cell_area_class_list_cell_properties()` to get information about
--- existing cell properties.
--- 
--- To set the value of a cell property, use `gtk_cell_area_cell_set_property()`,
--- `gtk_cell_area_cell_set()` or `gtk_cell_area_cell_set_valist()`. To obtain
--- the value of a cell property, use `gtk_cell_area_cell_get_property()`,
--- `gtk_cell_area_cell_get()` or `gtk_cell_area_cell_get_valist()`.
---
--- ---
---
---@class Gtk.CellArea : GObject.InitiallyUnowned, Gtk.Buildable, Gtk.CellLayout
---@field parent_instance GObject.InitiallyUnowned
---@field priv Gtk.CellAreaPrivate
Gtk.CellArea = {}

--- # method Gtk.CellArea:activate()
---
--- Activates `area`, usually by activating the currently focused
--- cell, however some subclasses which embed widgets in the area
--- can also activate a widget if it currently has the focus.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param context Gtk.CellAreaContext # the `GtkCellAreaContext` in context with the current row data
---@param widget Gtk.Widget # the `GtkWidget` that `area` is rendering on
---@param cell_area Gdk.Rectangle # the size and location of `area` relative to `widget`’s allocation
---@param flags Gtk.CellRendererState # the `GtkCellRendererState` flags for `area` for this row of data.
---@param edit_only (boolean|nil) # if `true` then only cell renderers that are %GTK_CELL_RENDERER_MODE_EDITABLE will be activated.
---@return (boolean|nil) # Whether `area` was successfully activated.
function Gtk.CellArea:activate(context, widget, cell_area, flags, edit_only) end

--- # method Gtk.CellArea:activate_cell()
---
--- This is used by `GtkCellArea` subclasses when handling events
--- to activate cells, the base `GtkCellArea` class activates cells
--- for keyboard events for free in its own GtkCellArea->`activate()`
--- implementation.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param widget Gtk.Widget # the `GtkWidget` that `area` is rendering onto
---@param renderer Gtk.CellRenderer # the `GtkCellRenderer` in `area` to activate
---@param event Gdk.Event # the `GdkEvent` for which cell activation should occur
---@param cell_area Gdk.Rectangle # the `GdkRectangle` in `widget` relative coordinates of `renderer` for the current row.
---@param flags Gtk.CellRendererState # the `GtkCellRendererState` for `renderer`
---@return (boolean|nil) # whether cell activation was successful
function Gtk.CellArea:activate_cell(widget, renderer, event, cell_area, flags) end

--- # method Gtk.CellArea:add()
---
--- Adds `renderer` to `area` with the default child cell properties.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param renderer Gtk.CellRenderer # the `GtkCellRenderer` to add to `area`
---@return nil
function Gtk.CellArea:add(renderer) end

--- # method Gtk.CellArea:add_focus_sibling()
---
--- Adds `sibling` to `renderer`’s focusable area, focus will be drawn
--- around `renderer` and all of its siblings if `renderer` can
--- focus for a given row.
--- 
--- Events handled by focus siblings can also activate the given
--- focusable `renderer`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param renderer Gtk.CellRenderer # the `GtkCellRenderer` expected to have focus
---@param sibling Gtk.CellRenderer # the `GtkCellRenderer` to add to `renderer`’s focus area
---@return nil
function Gtk.CellArea:add_focus_sibling(renderer, sibling) end

--- # method Gtk.CellArea:apply_attributes()
---
--- Applies any connected attributes to the renderers in
--- `area` by pulling the values from `tree_model`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param tree_model Gtk.TreeModel # the `GtkTreeModel` to pull values from
---@param iter Gtk.TreeIter # the `GtkTreeIter` in `tree_model` to apply values for
---@param is_expander (boolean|nil) # whether `iter` has children
---@param is_expanded (boolean|nil) # whether `iter` is expanded in the view and children are visible
---@return nil
function Gtk.CellArea:apply_attributes(tree_model, iter, is_expander, is_expanded) end

--- # method Gtk.CellArea:attribute_connect()
---
--- Connects an `attribute` to apply values from `column` for the
--- `GtkTreeModel` in use.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param renderer Gtk.CellRenderer # the `GtkCellRenderer` to connect an attribute for
---@param attribute string # the attribute name
---@param column integer # the `GtkTreeModel` column to fetch attribute values from
---@return nil
function Gtk.CellArea:attribute_connect(renderer, attribute, column) end

--- # method Gtk.CellArea:attribute_disconnect()
---
--- Disconnects `attribute` for the `renderer` in `area` so that
--- attribute will no longer be updated with values from the
--- model.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param renderer Gtk.CellRenderer # the `GtkCellRenderer` to disconnect an attribute for
---@param attribute string # the attribute name
---@return nil
function Gtk.CellArea:attribute_disconnect(renderer, attribute) end

--- # method Gtk.CellArea:attribute_get_column()
---
--- Returns the model column that an attribute has been mapped to,
--- or -1 if the attribute is not mapped.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param renderer Gtk.CellRenderer # a `GtkCellRenderer`
---@param attribute string # an attribute on the renderer
---@return integer # the model column, or -1
function Gtk.CellArea:attribute_get_column(renderer, attribute) end

--- # method Gtk.CellArea:cell_get_property()
---
--- Gets the value of a cell property for `renderer` in `area`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param renderer Gtk.CellRenderer # a `GtkCellRenderer` inside `area`
---@param property_name string # the name of the property to get
---@param value GObject.Value # a location to return the value
---@return nil
function Gtk.CellArea:cell_get_property(renderer, property_name, value) end

--- # method Gtk.CellArea:cell_set_property()
---
--- Sets a cell property for `renderer` in `area`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param renderer Gtk.CellRenderer # a `GtkCellRenderer` inside `area`
---@param property_name string # the name of the cell property to set
---@param value GObject.Value # the value to set the cell property to
---@return nil
function Gtk.CellArea:cell_set_property(renderer, property_name, value) end

--- # method Gtk.CellArea:copy_context()
---
--- This is sometimes needed for cases where rows need to share
--- alignments in one orientation but may be separately grouped
--- in the opposing orientation.
--- 
--- For instance, `GtkIconView` creates all icons (rows) to have
--- the same width and the cells theirin to have the same
--- horizontal alignments. However each row of icons may have
--- a separate collective height. `GtkIconView` uses this to
--- request the heights of each row based on a context which
--- was already used to request all the row widths that are
--- to be displayed.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param context Gtk.CellAreaContext # the `GtkCellAreaContext` to copy
---@return Gtk.CellAreaContext # a newly created `GtkCellAreaContext` copy of `context`.
function Gtk.CellArea:copy_context(context) end

--- # method Gtk.CellArea:create_context()
---
--- Creates a `GtkCellAreaContext` to be used with `area` for
--- all purposes. `GtkCellAreaContext` stores geometry information
--- for rows for which it was operated on, it is important to use
--- the same context for the same row of data at all times (i.e.
--- one should render and handle events with the same `GtkCellAreaContext`
--- which was used to request the size of those rows of data).
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@return Gtk.CellAreaContext # a newly created `GtkCellAreaContext` which can be used with `area`.
function Gtk.CellArea:create_context() end

--- # method Gtk.CellArea:event()
---
--- Delegates event handling to a `GtkCellArea`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param context Gtk.CellAreaContext # the `GtkCellAreaContext` for this row of data.
---@param widget Gtk.Widget # the `GtkWidget` that `area` is rendering to
---@param event Gdk.Event # the `GdkEvent` to handle
---@param cell_area Gdk.Rectangle # the `widget` relative coordinates for `area`
---@param flags Gtk.CellRendererState # the `GtkCellRendererState` for `area` in this row.
---@return integer # `true` if the event was handled by `area`.
function Gtk.CellArea:event(context, widget, event, cell_area, flags) end

--- # method Gtk.CellArea:focus()
---
--- This should be called by the `area`’s owning layout widget
--- when focus is to be passed to `area`, or moved within `area`
--- for a given `direction` and row data.
--- 
--- Implementing `GtkCellArea` classes should implement this
--- method to receive and navigate focus in its own way particular
--- to how it lays out cells.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param direction Gtk.DirectionType # the `GtkDirectionType`
---@return (boolean|nil) # `true` if focus remains inside `area` as a result of this call.
function Gtk.CellArea:focus(direction) end

--- # method Gtk.CellArea:foreach()
---
--- Calls `callback` for every `GtkCellRenderer` in `area`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param callback Gtk.CellCallback # the `GtkCellCallback` to call
---@param callback_data? userdata # user provided data pointer
---@return nil
function Gtk.CellArea:foreach(callback, callback_data) end

--- # method Gtk.CellArea:foreach_alloc()
---
--- Calls `callback` for every `GtkCellRenderer` in `area` with the
--- allocated rectangle inside `cell_area`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param context Gtk.CellAreaContext # the `GtkCellAreaContext` for this row of data.
---@param widget Gtk.Widget # the `GtkWidget` that `area` is rendering to
---@param cell_area Gdk.Rectangle # the `widget` relative coordinates and size for `area`
---@param background_area Gdk.Rectangle # the `widget` relative coordinates of the background area
---@param callback Gtk.CellAllocCallback # the `GtkCellAllocCallback` to call
---@param callback_data? userdata # user provided data pointer
---@return nil
function Gtk.CellArea:foreach_alloc(context, widget, cell_area, background_area, callback, callback_data) end

--- # method Gtk.CellArea:get_cell_allocation()
---
--- Derives the allocation of `renderer` inside `area` if `area`
--- were to be renderered in `cell_area`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param context Gtk.CellAreaContext # the `GtkCellAreaContext` used to hold sizes for `area`.
---@param widget Gtk.Widget # the `GtkWidget` that `area` is rendering on
---@param renderer Gtk.CellRenderer # the `GtkCellRenderer` to get the allocation for
---@param cell_area Gdk.Rectangle # the whole allocated area for `area` in `widget` for this row
---@param allocation Gdk.Rectangle # where to store the allocation for `renderer`
---@return nil
function Gtk.CellArea:get_cell_allocation(context, widget, renderer, cell_area, allocation) end

--- # method Gtk.CellArea:get_cell_at_position()
---
--- Gets the `GtkCellRenderer` at `x` and `y` coordinates inside `area` and optionally
--- returns the full cell allocation for it inside `cell_area`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param context Gtk.CellAreaContext # the `GtkCellAreaContext` used to hold sizes for `area`.
---@param widget Gtk.Widget # the `GtkWidget` that `area` is rendering on
---@param cell_area Gdk.Rectangle # the whole allocated area for `area` in `widget` for this row
---@param x integer # the x position
---@param y integer # the y position
---@param alloc_area? Gdk.Rectangle # where to store the inner allocated area of the returned cell renderer, or `nil`.
---@return Gtk.CellRenderer # the `GtkCellRenderer` at `x` and `y`.
function Gtk.CellArea:get_cell_at_position(context, widget, cell_area, x, y, alloc_area) end

--- # method Gtk.CellArea:get_current_path_string()
---
--- Gets the current `GtkTreePath` string for the currently
--- applied `GtkTreeIter`, this is implicitly updated when
--- `gtk_cell_area_apply_attributes()` is called and can be
--- used to interact with renderers from `GtkCellArea`
--- subclasses.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@return string # The current `GtkTreePath` string for the current attributes applied to `area`. This string belongs to the area and should not be freed.
function Gtk.CellArea:get_current_path_string() end

--- # method Gtk.CellArea:get_edit_widget()
---
--- Gets the `GtkCellEditable` widget currently used
--- to edit the currently edited cell.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@return Gtk.CellEditable # The currently active `GtkCellEditable` widget
function Gtk.CellArea:get_edit_widget() end

--- # method Gtk.CellArea:get_edited_cell()
---
--- Gets the `GtkCellRenderer` in `area` that is currently
--- being edited.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@return Gtk.CellRenderer # The currently edited `GtkCellRenderer`
function Gtk.CellArea:get_edited_cell() end

--- # method Gtk.CellArea:get_focus_cell()
---
--- Retrieves the currently focused cell for `area`
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@return Gtk.CellRenderer # the currently focused cell in `area`.
function Gtk.CellArea:get_focus_cell() end

--- # method Gtk.CellArea:get_focus_from_sibling()
---
--- Gets the `GtkCellRenderer` which is expected to be focusable
--- for which `renderer` is, or may be a sibling.
--- 
--- This is handy for `GtkCellArea` subclasses when handling events,
--- after determining the renderer at the event location it can
--- then chose to activate the focus cell for which the event
--- cell may have been a sibling.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param renderer Gtk.CellRenderer # the `GtkCellRenderer`
---@return Gtk.CellRenderer # the `GtkCellRenderer` for which `renderer` is a sibling, or `nil`.
function Gtk.CellArea:get_focus_from_sibling(renderer) end

--- # method Gtk.CellArea:get_focus_siblings()
---
--- Gets the focus sibling cell renderers for `renderer`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param renderer Gtk.CellRenderer # the `GtkCellRenderer` expected to have focus
---@return Gtk.CellRenderer[] # A `GList` of `GtkCellRenderers`. The returned list is internal and should not be freed.
function Gtk.CellArea:get_focus_siblings(renderer) end

--- # method Gtk.CellArea:get_preferred_height()
---
--- Retrieves a cell area’s initial minimum and natural height.
--- 
--- `area` will store some geometrical information in `context` along the way;
--- when requesting sizes over an arbitrary number of rows, it’s not important
--- to check the `minimum_height` and `natural_height` of this call but rather to
--- consult `gtk_cell_area_context_get_preferred_height()` after a series of
--- requests.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param context Gtk.CellAreaContext # the `GtkCellAreaContext` to perform this request with
---@param widget Gtk.Widget # the `GtkWidget` where `area` will be rendering
---@param minimum_height? integer # location to store the minimum height, or `nil`
---@param natural_height? integer # location to store the natural height, or `nil`
---@return nil
function Gtk.CellArea:get_preferred_height(context, widget, minimum_height, natural_height) end

--- # method Gtk.CellArea:get_preferred_height_for_width()
---
--- Retrieves a cell area’s minimum and natural height if it would be given
--- the specified `width`.
--- 
--- `area` stores some geometrical information in `context` along the way
--- while calling `gtk_cell_area_get_preferred_width()`. It’s important to
--- perform a series of `gtk_cell_area_get_preferred_width()` requests with
--- `context` first and then call `gtk_cell_area_get_preferred_height_for_width()`
--- on each cell area individually to get the height for width of each
--- fully requested row.
--- 
--- If at some point, the width of a single row changes, it should be
--- requested with `gtk_cell_area_get_preferred_width()` again and then
--- the full width of the requested rows checked again with
--- `gtk_cell_area_context_get_preferred_width()`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param context Gtk.CellAreaContext # the `GtkCellAreaContext` which has already been requested for widths.
---@param widget Gtk.Widget # the `GtkWidget` where `area` will be rendering
---@param width integer # the width for which to check the height of this area
---@param minimum_height? integer # location to store the minimum height, or `nil`
---@param natural_height? integer # location to store the natural height, or `nil`
---@return nil
function Gtk.CellArea:get_preferred_height_for_width(context, widget, width, minimum_height, natural_height) end

--- # method Gtk.CellArea:get_preferred_width()
---
--- Retrieves a cell area’s initial minimum and natural width.
--- 
--- `area` will store some geometrical information in `context` along the way;
--- when requesting sizes over an arbitrary number of rows, it’s not important
--- to check the `minimum_width` and `natural_width` of this call but rather to
--- consult `gtk_cell_area_context_get_preferred_width()` after a series of
--- requests.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param context Gtk.CellAreaContext # the `GtkCellAreaContext` to perform this request with
---@param widget Gtk.Widget # the `GtkWidget` where `area` will be rendering
---@param minimum_width? integer # location to store the minimum width, or `nil`
---@param natural_width? integer # location to store the natural width, or `nil`
---@return nil
function Gtk.CellArea:get_preferred_width(context, widget, minimum_width, natural_width) end

--- # method Gtk.CellArea:get_preferred_width_for_height()
---
--- Retrieves a cell area’s minimum and natural width if it would be given
--- the specified `height`.
--- 
--- `area` stores some geometrical information in `context` along the way
--- while calling `gtk_cell_area_get_preferred_height()`. It’s important to
--- perform a series of `gtk_cell_area_get_preferred_height()` requests with
--- `context` first and then call `gtk_cell_area_get_preferred_width_for_height()`
--- on each cell area individually to get the height for width of each
--- fully requested row.
--- 
--- If at some point, the height of a single row changes, it should be
--- requested with `gtk_cell_area_get_preferred_height()` again and then
--- the full height of the requested rows checked again with
--- `gtk_cell_area_context_get_preferred_height()`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param context Gtk.CellAreaContext # the `GtkCellAreaContext` which has already been requested for widths.
---@param widget Gtk.Widget # the `GtkWidget` where `area` will be rendering
---@param height integer # the height for which to check the width of this area
---@param minimum_width? integer # location to store the minimum width, or `nil`
---@param natural_width? integer # location to store the natural width, or `nil`
---@return nil
function Gtk.CellArea:get_preferred_width_for_height(context, widget, height, minimum_width, natural_width) end

--- # method Gtk.CellArea:get_request_mode()
---
--- Gets whether the area prefers a height-for-width layout
--- or a width-for-height layout.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@return Gtk.SizeRequestMode # The `GtkSizeRequestMode` preferred by `area`.
function Gtk.CellArea:get_request_mode() end

--- # method Gtk.CellArea:has_renderer()
---
--- Checks if `area` contains `renderer`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param renderer Gtk.CellRenderer # the `GtkCellRenderer` to check
---@return (boolean|nil) # `true` if `renderer` is in the `area`.
function Gtk.CellArea:has_renderer(renderer) end

--- # method Gtk.CellArea:inner_cell_area()
---
--- This is a convenience function for `GtkCellArea` implementations
--- to get the inner area where a given `GtkCellRenderer` will be
--- rendered. It removes any padding previously added by `gtk_cell_area_request_renderer()`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param widget Gtk.Widget # the `GtkWidget` that `area` is rendering onto
---@param cell_area Gdk.Rectangle # the `widget` relative coordinates where one of `area`’s cells is to be placed
---@param inner_area Gdk.Rectangle # the return location for the inner cell area
---@return nil
function Gtk.CellArea:inner_cell_area(widget, cell_area, inner_area) end

--- # method Gtk.CellArea:is_activatable()
---
--- Returns whether the area can do anything when activated,
--- after applying new attributes to `area`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@return (boolean|nil) # whether `area` can do anything when activated.
function Gtk.CellArea:is_activatable() end

--- # method Gtk.CellArea:is_focus_sibling()
---
--- Returns whether `sibling` is one of `renderer`’s focus siblings
--- (see `gtk_cell_area_add_focus_sibling()`).
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param renderer Gtk.CellRenderer # the `GtkCellRenderer` expected to have focus
---@param sibling Gtk.CellRenderer # the `GtkCellRenderer` to check against `renderer`’s sibling list
---@return (boolean|nil) # `true` if `sibling` is a focus sibling of `renderer`
function Gtk.CellArea:is_focus_sibling(renderer, sibling) end

--- # method Gtk.CellArea:remove()
---
--- Removes `renderer` from `area`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param renderer Gtk.CellRenderer # the `GtkCellRenderer` to remove from `area`
---@return nil
function Gtk.CellArea:remove(renderer) end

--- # method Gtk.CellArea:remove_focus_sibling()
---
--- Removes `sibling` from `renderer`’s focus sibling list
--- (see `gtk_cell_area_add_focus_sibling()`).
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param renderer Gtk.CellRenderer # the `GtkCellRenderer` expected to have focus
---@param sibling Gtk.CellRenderer # the `GtkCellRenderer` to remove from `renderer`’s focus area
---@return nil
function Gtk.CellArea:remove_focus_sibling(renderer, sibling) end

--- # method Gtk.CellArea:render()
---
--- Renders `area`’s cells according to `area`’s layout onto `widget` at
--- the given coordinates.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param context Gtk.CellAreaContext # the `GtkCellAreaContext` for this row of data.
---@param widget Gtk.Widget # the `GtkWidget` that `area` is rendering to
---@param cr cairo.Context # the `cairo_t` to render with
---@param background_area Gdk.Rectangle # the `widget` relative coordinates for `area`’s background
---@param cell_area Gdk.Rectangle # the `widget` relative coordinates for `area`
---@param flags Gtk.CellRendererState # the `GtkCellRendererState` for `area` in this row.
---@param paint_focus (boolean|nil) # whether `area` should paint focus on focused cells for focused rows or not.
---@return nil
function Gtk.CellArea:render(context, widget, cr, background_area, cell_area, flags, paint_focus) end

--- # method Gtk.CellArea:request_renderer()
---
--- This is a convenience function for `GtkCellArea` implementations
--- to request size for cell renderers. It’s important to use this
--- function to request size and then use `gtk_cell_area_inner_cell_area()`
--- at render and event time since this function will add padding
--- around the cell for focus painting.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param renderer Gtk.CellRenderer # the `GtkCellRenderer` to request size for
---@param orientation Gtk.Orientation # the `GtkOrientation` in which to request size
---@param widget Gtk.Widget # the `GtkWidget` that `area` is rendering onto
---@param for_size integer # the allocation contextual size to request for, or -1 if the base request for the orientation is to be returned.
---@param minimum_size? integer # location to store the minimum size, or `nil`
---@param natural_size? integer # location to store the natural size, or `nil`
---@return nil
function Gtk.CellArea:request_renderer(renderer, orientation, widget, for_size, minimum_size, natural_size) end

--- # method Gtk.CellArea:set_focus_cell()
---
--- Explicitly sets the currently focused cell to `renderer`.
--- 
--- This is generally called by implementations of
--- `GtkCellAreaClass`.`focus()` or `GtkCellAreaClass`.`event()`,
--- however it can also be used to implement functions such
--- as `gtk_tree_view_set_cursor_on_cell()`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param renderer Gtk.CellRenderer # the `GtkCellRenderer` to give focus to
---@return nil
function Gtk.CellArea:set_focus_cell(renderer) end

--- # method Gtk.CellArea:stop_editing()
---
--- Explicitly stops the editing of the currently edited cell.
--- 
--- If `canceled` is `true`, the currently edited cell renderer
--- will emit the ::editing-canceled signal, otherwise the
--- the ::editing-done signal will be emitted on the current
--- edit widget.
--- 
--- See `gtk_cell_area_get_edited_cell()` and `gtk_cell_area_get_edit_widget()`.
---
--- ---
---
---@param self Gtk.CellArea # a `GtkCellArea`
---@param canceled (boolean|nil) # whether editing was canceled.
---@return nil
function Gtk.CellArea:stop_editing(canceled) end

--- # class Gtk.CellAreaBox
---
--- The `GtkCellAreaBox` renders cell renderers into a row or a column
--- depending on its `GtkOrientation`.
--- 
--- GtkCellAreaBox uses a notion of packing. Packing
--- refers to adding cell renderers with reference to a particular position
--- in a `GtkCellAreaBox`. There are two reference positions: the
--- start and the end of the box.
--- When the `GtkCellAreaBox` is oriented in the %GTK_ORIENTATION_VERTICAL
--- orientation, the start is defined as the top of the box and the end is
--- defined as the bottom. In the %GTK_ORIENTATION_HORIZONTAL orientation
--- start is defined as the left side and the end is defined as the right
--- side.
--- 
--- Alignments of `GtkCellRenderers` rendered in adjacent rows can be
--- configured by configuring the `GtkCellAreaBox` align child cell property
--- with `gtk_cell_area_cell_set_property()` or by specifying the "align"
--- argument to `gtk_cell_area_box_pack_start()` and `gtk_cell_area_box_pack_end()`.
---
--- ---
---
---@class Gtk.CellAreaBox : Gtk.CellArea, Gtk.Buildable, Gtk.CellLayout, Gtk.Orientable
---@field parent_instance Gtk.CellArea
---@field priv Gtk.CellAreaBoxPrivate
---@operator call: Gtk.CellAreaBox
Gtk.CellAreaBox = {}

--- # method Gtk.CellAreaBox:get_spacing()
---
--- Gets the spacing added between cell renderers.
---
--- ---
---
---@param self Gtk.CellAreaBox # a `GtkCellAreaBox`
---@return integer # the space added between cell renderers in `box`.
function Gtk.CellAreaBox:get_spacing() end

--- # method Gtk.CellAreaBox:pack_end()
---
--- Adds `renderer` to `box`, packed with reference to the end of `box`.
--- 
--- The `renderer` is packed after (away from end of) any other
--- `GtkCellRenderer` packed with reference to the end of `box`.
---
--- ---
---
---@param self Gtk.CellAreaBox # a `GtkCellAreaBox`
---@param renderer Gtk.CellRenderer # the `GtkCellRenderer` to add
---@param expand (boolean|nil) # whether `renderer` should receive extra space when the area receives more than its natural size
---@param align (boolean|nil) # whether `renderer` should be aligned in adjacent rows
---@param fixed (boolean|nil) # whether `renderer` should have the same size in all rows
---@return nil
function Gtk.CellAreaBox:pack_end(renderer, expand, align, fixed) end

--- # method Gtk.CellAreaBox:pack_start()
---
--- Adds `renderer` to `box`, packed with reference to the start of `box`.
--- 
--- The `renderer` is packed after any other `GtkCellRenderer` packed
--- with reference to the start of `box`.
---
--- ---
---
---@param self Gtk.CellAreaBox # a `GtkCellAreaBox`
---@param renderer Gtk.CellRenderer # the `GtkCellRenderer` to add
---@param expand (boolean|nil) # whether `renderer` should receive extra space when the area receives more than its natural size
---@param align (boolean|nil) # whether `renderer` should be aligned in adjacent rows
---@param fixed (boolean|nil) # whether `renderer` should have the same size in all rows
---@return nil
function Gtk.CellAreaBox:pack_start(renderer, expand, align, fixed) end

--- # method Gtk.CellAreaBox:set_spacing()
---
--- Sets the spacing to add between cell renderers in `box`.
---
--- ---
---
---@param self Gtk.CellAreaBox # a `GtkCellAreaBox`
---@param spacing integer # the space to add between `GtkCellRenderers`
---@return nil
function Gtk.CellAreaBox:set_spacing(spacing) end

--- # function Gtk.CellAreaBox.new()
---
--- Creates a new `GtkCellAreaBox`.
---
--- ---
---
---@return Gtk.CellArea # a newly created `GtkCellAreaBox`
function Gtk.CellAreaBox.new() end

--- # record Gtk.CellAreaBoxClass
---
---@class Gtk.CellAreaBoxClass
---@field parent_class Gtk.CellAreaClass
Gtk.CellAreaBoxClass = {}

--- # record Gtk.CellAreaBoxPrivate
---
---@class Gtk.CellAreaBoxPrivate
Gtk.CellAreaBoxPrivate = {}

--- # record Gtk.CellAreaClass
---
---@class Gtk.CellAreaClass
---@field parent_class GObject.InitiallyUnownedClass
---@field add fun(area: Gtk.CellArea, renderer: Gtk.CellRenderer): nil
---@field remove fun(area: Gtk.CellArea, renderer: Gtk.CellRenderer): nil
---@field foreach fun(area: Gtk.CellArea, callback: Gtk.CellCallback, callback_data: userdata): nil
---@field foreach_alloc fun(area: Gtk.CellArea, context: Gtk.CellAreaContext, widget: Gtk.Widget, cell_area: Gdk.Rectangle, background_area: Gdk.Rectangle, callback: Gtk.CellAllocCallback, callback_data: userdata): nil
---@field event fun(area: Gtk.CellArea, context: Gtk.CellAreaContext, widget: Gtk.Widget, event: Gdk.Event, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState): integer
---@field render fun(area: Gtk.CellArea, context: Gtk.CellAreaContext, widget: Gtk.Widget, cr: cairo.Context, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState, paint_focus: (boolean|nil)): nil
---@field apply_attributes fun(area: Gtk.CellArea, tree_model: Gtk.TreeModel, iter: Gtk.TreeIter, is_expander: (boolean|nil), is_expanded: (boolean|nil)): nil
---@field create_context fun(area: Gtk.CellArea): Gtk.CellAreaContext
---@field copy_context fun(area: Gtk.CellArea, context: Gtk.CellAreaContext): Gtk.CellAreaContext
---@field get_request_mode fun(area: Gtk.CellArea): Gtk.SizeRequestMode
---@field get_preferred_width fun(area: Gtk.CellArea, context: Gtk.CellAreaContext, widget: Gtk.Widget, minimum_width: integer, natural_width: integer): nil
---@field get_preferred_height_for_width fun(area: Gtk.CellArea, context: Gtk.CellAreaContext, widget: Gtk.Widget, width: integer, minimum_height: integer, natural_height: integer): nil
---@field get_preferred_height fun(area: Gtk.CellArea, context: Gtk.CellAreaContext, widget: Gtk.Widget, minimum_height: integer, natural_height: integer): nil
---@field get_preferred_width_for_height fun(area: Gtk.CellArea, context: Gtk.CellAreaContext, widget: Gtk.Widget, height: integer, minimum_width: integer, natural_width: integer): nil
---@field set_cell_property fun(area: Gtk.CellArea, renderer: Gtk.CellRenderer, property_id: integer, value: GObject.Value, pspec: GObject.ParamSpec): nil
---@field get_cell_property fun(area: Gtk.CellArea, renderer: Gtk.CellRenderer, property_id: integer, value: GObject.Value, pspec: GObject.ParamSpec): nil
---@field focus fun(area: Gtk.CellArea, direction: Gtk.DirectionType): (boolean|nil)
---@field is_activatable fun(area: Gtk.CellArea): (boolean|nil)
---@field activate fun(area: Gtk.CellArea, context: Gtk.CellAreaContext, widget: Gtk.Widget, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState, edit_only: (boolean|nil)): (boolean|nil)
Gtk.CellAreaClass = {}

--- # method Gtk.CellAreaClass:find_cell_property()
---
--- Finds a cell property of a cell area class by name.
---
--- ---
---
---@param self Gtk.CellAreaClass # a `GtkCellAreaClass`
---@param property_name string # the name of the child property to find
---@return GObject.ParamSpec # the `GParamSpec` of the child property or `nil` if `aclass` has no child property with that name.
function Gtk.CellAreaClass:find_cell_property(property_name) end

--- # method Gtk.CellAreaClass:install_cell_property()
---
--- Installs a cell property on a cell area class.
---
--- ---
---
---@param self Gtk.CellAreaClass # a `GtkCellAreaClass`
---@param property_id integer # the id for the property
---@param pspec GObject.ParamSpec # the `GParamSpec` for the property
---@return nil
function Gtk.CellAreaClass:install_cell_property(property_id, pspec) end

--- # method Gtk.CellAreaClass:list_cell_properties()
---
--- Returns all cell properties of a cell area class.
---
--- ---
---
---@param self Gtk.CellAreaClass # a `GtkCellAreaClass`
---@param n_properties integer # location to return the number of cell properties found
---@return unknown[] # a newly allocated `nil`-terminated array of `GParamSpec`*. The array must be freed with `g_free()`.
function Gtk.CellAreaClass:list_cell_properties(n_properties) end

--- # class Gtk.CellAreaContext
---
--- The `GtkCellAreaContext` object is created by a given `GtkCellArea`
--- implementation via its `GtkCellAreaClass`.`create_context()` virtual
--- method and is used to store cell sizes and alignments for a series of
--- `GtkTreeModel` rows that are requested and rendered in the same context.
--- 
--- `GtkCellLayout` widgets can create any number of contexts in which to
--- request and render groups of data rows. However, it’s important that the
--- same context which was used to request sizes for a given `GtkTreeModel`
--- row also be used for the same row when calling other `GtkCellArea` APIs
--- such as `gtk_cell_area_render()` and `gtk_cell_area_event()`.
---
--- ---
---
---@class Gtk.CellAreaContext : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gtk.CellAreaContextPrivate
Gtk.CellAreaContext = {}

--- # method Gtk.CellAreaContext:allocate()
---
--- Allocates a width and/or a height for all rows which are to be
--- rendered with `context`.
--- 
--- Usually allocation is performed only horizontally or sometimes
--- vertically since a group of rows are usually rendered side by
--- side vertically or horizontally and share either the same width
--- or the same height. Sometimes they are allocated in both horizontal
--- and vertical orientations producing a homogeneous effect of the
--- rows. This is generally the case for `GtkTreeView` when
--- `GtkTreeView`:fixed-height-mode is enabled.
--- 
--- Since 3.0
---
--- ---
---
---@param self Gtk.CellAreaContext # a `GtkCellAreaContext`
---@param width integer # the allocated width for all `GtkTreeModel` rows rendered with `context`, or -1.
---@param height integer # the allocated height for all `GtkTreeModel` rows rendered with `context`, or -1.
---@return nil
function Gtk.CellAreaContext:allocate(width, height) end

--- # method Gtk.CellAreaContext:get_allocation()
---
--- Fetches the current allocation size for `context`.
--- 
--- If the context was not allocated in width or height, or if the
--- context was recently reset with `gtk_cell_area_context_reset()`,
--- the returned value will be -1.
---
--- ---
---
---@param self Gtk.CellAreaContext # a `GtkCellAreaContext`
---@param width? integer # location to store the allocated width, or `nil`
---@param height? integer # location to store the allocated height, or `nil`
---@return nil
function Gtk.CellAreaContext:get_allocation(width, height) end

--- # method Gtk.CellAreaContext:get_area()
---
--- Fetches the `GtkCellArea` this `context` was created by.
--- 
--- This is generally unneeded by layouting widgets; however,
--- it is important for the context implementation itself to
--- fetch information about the area it is being used for.
--- 
--- For instance at `GtkCellAreaContextClass`.`allocate()` time
--- it’s important to know details about any cell spacing
--- that the `GtkCellArea` is configured with in order to
--- compute a proper allocation.
---
--- ---
---
---@param self Gtk.CellAreaContext # a `GtkCellAreaContext`
---@return Gtk.CellArea # the `GtkCellArea` this context was created by.
function Gtk.CellAreaContext:get_area() end

--- # method Gtk.CellAreaContext:get_preferred_height()
---
--- Gets the accumulative preferred height for all rows which have been
--- requested with this context.
--- 
--- After `gtk_cell_area_context_reset()` is called and/or before ever
--- requesting the size of a `GtkCellArea`, the returned values are 0.
---
--- ---
---
---@param self Gtk.CellAreaContext # a `GtkCellAreaContext`
---@param minimum_height? integer # location to store the minimum height, or `nil`
---@param natural_height? integer # location to store the natural height, or `nil`
---@return nil
function Gtk.CellAreaContext:get_preferred_height(minimum_height, natural_height) end

--- # method Gtk.CellAreaContext:get_preferred_height_for_width()
---
--- Gets the accumulative preferred height for `width` for all rows
--- which have been requested for the same said `width` with this context.
--- 
--- After `gtk_cell_area_context_reset()` is called and/or before ever
--- requesting the size of a `GtkCellArea`, the returned values are -1.
---
--- ---
---
---@param self Gtk.CellAreaContext # a `GtkCellAreaContext`
---@param width integer # a proposed width for allocation
---@param minimum_height? integer # location to store the minimum height, or `nil`
---@param natural_height? integer # location to store the natural height, or `nil`
---@return nil
function Gtk.CellAreaContext:get_preferred_height_for_width(width, minimum_height, natural_height) end

--- # method Gtk.CellAreaContext:get_preferred_width()
---
--- Gets the accumulative preferred width for all rows which have been
--- requested with this context.
--- 
--- After `gtk_cell_area_context_reset()` is called and/or before ever
--- requesting the size of a `GtkCellArea`, the returned values are 0.
---
--- ---
---
---@param self Gtk.CellAreaContext # a `GtkCellAreaContext`
---@param minimum_width? integer # location to store the minimum width, or `nil`
---@param natural_width? integer # location to store the natural width, or `nil`
---@return nil
function Gtk.CellAreaContext:get_preferred_width(minimum_width, natural_width) end

--- # method Gtk.CellAreaContext:get_preferred_width_for_height()
---
--- Gets the accumulative preferred width for `height` for all rows which
--- have been requested for the same said `height` with this context.
--- 
--- After `gtk_cell_area_context_reset()` is called and/or before ever
--- requesting the size of a `GtkCellArea`, the returned values are -1.
---
--- ---
---
---@param self Gtk.CellAreaContext # a `GtkCellAreaContext`
---@param height integer # a proposed height for allocation
---@param minimum_width? integer # location to store the minimum width, or `nil`
---@param natural_width? integer # location to store the natural width, or `nil`
---@return nil
function Gtk.CellAreaContext:get_preferred_width_for_height(height, minimum_width, natural_width) end

--- # method Gtk.CellAreaContext:push_preferred_height()
---
--- Causes the minimum and/or natural height to grow if the new
--- proposed sizes exceed the current minimum and natural height.
--- 
--- This is used by `GtkCellAreaContext` implementations during
--- the request process over a series of `GtkTreeModel` rows to
--- progressively push the requested height over a series of
--- `gtk_cell_area_get_preferred_height()` requests.
---
--- ---
---
---@param self Gtk.CellAreaContext # a `GtkCellAreaContext`
---@param minimum_height integer # the proposed new minimum height for `context`
---@param natural_height integer # the proposed new natural height for `context`
---@return nil
function Gtk.CellAreaContext:push_preferred_height(minimum_height, natural_height) end

--- # method Gtk.CellAreaContext:push_preferred_width()
---
--- Causes the minimum and/or natural width to grow if the new
--- proposed sizes exceed the current minimum and natural width.
--- 
--- This is used by `GtkCellAreaContext` implementations during
--- the request process over a series of `GtkTreeModel` rows to
--- progressively push the requested width over a series of
--- `gtk_cell_area_get_preferred_width()` requests.
---
--- ---
---
---@param self Gtk.CellAreaContext # a `GtkCellAreaContext`
---@param minimum_width integer # the proposed new minimum width for `context`
---@param natural_width integer # the proposed new natural width for `context`
---@return nil
function Gtk.CellAreaContext:push_preferred_width(minimum_width, natural_width) end

--- # method Gtk.CellAreaContext:reset()
---
--- Resets any previously cached request and allocation
--- data.
--- 
--- When underlying `GtkTreeModel` data changes its
--- important to reset the context if the content
--- size is allowed to shrink. If the content size
--- is only allowed to grow (this is usually an option
--- for views rendering large data stores as a measure
--- of optimization), then only the row that changed
--- or was inserted needs to be (re)requested with
--- `gtk_cell_area_get_preferred_width()`.
--- 
--- When the new overall size of the context requires
--- that the allocated size changes (or whenever this
--- allocation changes at all), the variable row
--- sizes need to be re-requested for every row.
--- 
--- For instance, if the rows are displayed all with
--- the same width from top to bottom then a change
--- in the allocated width necessitates a recalculation
--- of all the displayed row heights using
--- `gtk_cell_area_get_preferred_height_for_width()`.
--- 
--- Since 3.0
---
--- ---
---
---@param self Gtk.CellAreaContext # a `GtkCellAreaContext`
---@return nil
function Gtk.CellAreaContext:reset() end

--- # record Gtk.CellAreaContextClass
---
---@class Gtk.CellAreaContextClass
---@field parent_class GObject.ObjectClass
---@field allocate fun(context: Gtk.CellAreaContext, width: integer, height: integer): nil
---@field reset fun(context: Gtk.CellAreaContext): nil
---@field get_preferred_height_for_width fun(context: Gtk.CellAreaContext, width: integer, minimum_height: integer, natural_height: integer): nil
---@field get_preferred_width_for_height fun(context: Gtk.CellAreaContext, height: integer, minimum_width: integer, natural_width: integer): nil
Gtk.CellAreaContextClass = {}

--- # record Gtk.CellAreaContextPrivate
---
---@class Gtk.CellAreaContextPrivate
Gtk.CellAreaContextPrivate = {}

--- # record Gtk.CellAreaPrivate
---
---@class Gtk.CellAreaPrivate
Gtk.CellAreaPrivate = {}

---@alias Gtk.CellCallback fun(renderer: Gtk.CellRenderer, data: userdata): (boolean|nil)

--- # interface Gtk.CellEditable
---
--- The `GtkCellEditable` interface must be implemented for widgets to be usable
--- to edit the contents of a `GtkTreeView` cell. It provides a way to specify how
--- temporary widgets should be configured for editing, get the new value, etc.
---
--- ---
---
---@class Gtk.CellEditable
Gtk.CellEditable = {}

--- # method Gtk.CellEditable:editing_done()
---
--- Emits the `GtkCellEditable`::editing-done signal.
---
--- ---
---
---@param self Gtk.CellEditable # A `GtkCellEditable`
---@return nil
function Gtk.CellEditable:editing_done() end

--- # method Gtk.CellEditable:remove_widget()
---
--- Emits the `GtkCellEditable`::remove-widget signal.
---
--- ---
---
---@param self Gtk.CellEditable # A `GtkCellEditable`
---@return nil
function Gtk.CellEditable:remove_widget() end

--- # method Gtk.CellEditable:start_editing()
---
--- Begins editing on a `cell_editable`.
--- 
--- The `GtkCellRenderer` for the cell creates and returns a `GtkCellEditable` from
--- `gtk_cell_renderer_start_editing()`, configured for the `GtkCellRenderer` type.
--- 
--- `gtk_cell_editable_start_editing()` can then set up `cell_editable` suitably for
--- editing a cell, e.g. making the Esc key emit `GtkCellEditable`::editing-done.
--- 
--- Note that the `cell_editable` is created on-demand for the current edit; its
--- lifetime is temporary and does not persist across other edits and/or cells.
---
--- ---
---
---@param self Gtk.CellEditable # A `GtkCellEditable`
---@param event? Gdk.Event # The `GdkEvent` that began the editing process, or `nil` if editing was initiated programmatically
---@return nil
function Gtk.CellEditable:start_editing(event) end

--- # record Gtk.CellEditableIface
---
---@class Gtk.CellEditableIface
---@field g_iface GObject.TypeInterface
---@field editing_done fun(cell_editable: Gtk.CellEditable): nil
---@field remove_widget fun(cell_editable: Gtk.CellEditable): nil
---@field start_editing fun(cell_editable: Gtk.CellEditable, event: Gdk.Event): nil
Gtk.CellEditableIface = {}

--- # interface Gtk.CellLayout
---
--- `GtkCellLayout` is an interface to be implemented by all objects which
--- want to provide a `GtkTreeViewColumn` like API for packing cells,
--- setting attributes and data funcs.
--- 
--- One of the notable features provided by implementations of
--- GtkCellLayout are attributes. Attributes let you set the properties
--- in flexible ways. They can just be set to constant values like regular
--- properties. But they can also be mapped to a column of the underlying
--- tree model with `gtk_cell_layout_set_attributes()`, which means that the value
--- of the attribute can change from cell to cell as they are rendered by
--- the cell renderer. Finally, it is possible to specify a function with
--- `gtk_cell_layout_set_cell_data_func()` that is called to determine the
--- value of the attribute for each cell that is rendered.
--- 
--- # GtkCellLayouts as GtkBuildable
--- 
--- Implementations of GtkCellLayout which also implement the GtkBuildable
--- interface (`GtkCellView`, `GtkIconView`, `GtkComboBox`,
--- `GtkEntryCompletion`, `GtkTreeViewColumn`) accept GtkCellRenderer objects
--- as `<child>` elements in UI definitions. They support a custom `<attributes>`
--- element for their children, which can contain multiple `<attribute>`
--- elements. Each `<attribute>` element has a name attribute which specifies
--- a property of the cell renderer; the content of the element is the
--- attribute value.
--- 
--- This is an example of a UI definition fragment specifying attributes:
--- 
--- ```xml
--- <object class="GtkCellView">
---   <child>
---     <object class="GtkCellRendererText"/>
---     <attributes>
---       <attribute name="text">0</attribute>
---     </attributes>
---   </child>
--- </object>
--- ```
--- 
--- Furthermore for implementations of GtkCellLayout that use a `GtkCellArea`
--- to lay out cells (all GtkCellLayouts in GTK+ use a GtkCellArea)
--- [cell properties][cell-properties] can also be defined in the format by
--- specifying the custom `<cell-packing>` attribute which can contain multiple
--- `<property>` elements defined in the normal way.
--- 
--- Here is a UI definition fragment specifying cell properties:
--- 
--- ```xml
--- <object class="GtkTreeViewColumn">
---   <child>
---     <object class="GtkCellRendererText"/>
---     <cell-packing>
---       <property name="align">True</property>
---       <property name="expand">False</property>
---     </cell-packing>
---   </child>
--- </object>
--- ```
--- 
--- # Subclassing GtkCellLayout implementations
--- 
--- When subclassing a widget that implements `GtkCellLayout` like
--- `GtkIconView` or `GtkComboBox`, there are some considerations related
--- to the fact that these widgets internally use a `GtkCellArea`.
--- The cell area is exposed as a construct-only property by these
--- widgets. This means that it is possible to e.g. do
--- 
--- ```c
--- combo = g_object_new (GTK_TYPE_COMBO_BOX, "cell-area", my_cell_area, NULL);
--- ```
--- 
--- to use a custom cell area with a combo box. But construct properties
--- are only initialized after instance `init()`
--- functions have run, which means that using functions which rely on
--- the existence of the cell area in your subclass’ `init()` function will
--- cause the default cell area to be instantiated. In this case, a provided
--- construct property value will be ignored (with a warning, to alert
--- you to the problem).
--- 
--- ```c
--- static void
--- my_combo_box_init (MyComboBox *b)
--- {
---   GtkCellRenderer *cell;
--- 
---   cell = gtk_cell_renderer_pixbuf_new ();
---   // The following call causes the default cell area for combo boxes,
---   // a GtkCellAreaBox, to be instantiated
---   gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (b), cell, FALSE);
---   ...
--- }
--- 
--- GtkWidget *
--- my_combo_box_new (GtkCellArea *area)
--- {
---   // This call is going to cause a warning about area being ignored
---   return g_object_new (MY_TYPE_COMBO_BOX, "cell-area", area, NULL);
--- }
--- ```
--- 
--- If supporting alternative cell areas with your derived widget is
--- not important, then this does not have to concern you. If you want
--- to support alternative cell areas, you can do so by moving the
--- problematic calls out of `init()` and into a `constructor()`
--- for your class.
---
--- ---
---
---@class Gtk.CellLayout
Gtk.CellLayout = {}

--- # method Gtk.CellLayout:add_attribute()
---
--- Adds an attribute mapping to the list in `cell_layout`.
--- 
--- The `column` is the column of the model to get a value from, and the
--- `attribute` is the parameter on `cell` to be set from the value. So for
--- example if column 2 of the model contains strings, you could have the
--- “text” attribute of a `GtkCellRendererText` get its values from column 2.
---
--- ---
---
---@param self Gtk.CellLayout # a `GtkCellLayout`
---@param cell Gtk.CellRenderer # a `GtkCellRenderer`
---@param attribute string # an attribute on the renderer
---@param column integer # the column position on the model to get the attribute from
---@return nil
function Gtk.CellLayout:add_attribute(cell, attribute, column) end

--- # method Gtk.CellLayout:clear()
---
--- Unsets all the mappings on all renderers on `cell_layout` and
--- removes all renderers from `cell_layout`.
---
--- ---
---
---@param self Gtk.CellLayout # a `GtkCellLayout`
---@return nil
function Gtk.CellLayout:clear() end

--- # method Gtk.CellLayout:clear_attributes()
---
--- Clears all existing attributes previously set with
--- `gtk_cell_layout_set_attributes()`.
---
--- ---
---
---@param self Gtk.CellLayout # a `GtkCellLayout`
---@param cell Gtk.CellRenderer # a `GtkCellRenderer` to clear the attribute mapping on
---@return nil
function Gtk.CellLayout:clear_attributes(cell) end

--- # method Gtk.CellLayout:get_area()
---
--- Returns the underlying `GtkCellArea` which might be `cell_layout`
--- if called on a `GtkCellArea` or might be `nil` if no `GtkCellArea`
--- is used by `cell_layout`.
---
--- ---
---
---@param self Gtk.CellLayout # a `GtkCellLayout`
---@return Gtk.CellArea # the cell area used by `cell_layout`, or `nil` in case no cell area is used.
function Gtk.CellLayout:get_area() end

--- # method Gtk.CellLayout:get_cells()
---
--- Returns the cell renderers which have been added to `cell_layout`.
---
--- ---
---
---@param self Gtk.CellLayout # a `GtkCellLayout`
---@return Gtk.CellRenderer[] # a list of cell renderers. The list, but not the renderers has been newly allocated and should be freed with `g_list_free()` when no longer needed.
function Gtk.CellLayout:get_cells() end

--- # method Gtk.CellLayout:pack_end()
---
--- Adds the `cell` to the end of `cell_layout`. If `expand` is `false`, then the
--- `cell` is allocated no more space than it needs. Any unused space is
--- divided evenly between cells for which `expand` is `true`.
--- 
--- Note that reusing the same cell renderer is not supported.
---
--- ---
---
---@param self Gtk.CellLayout # a `GtkCellLayout`
---@param cell Gtk.CellRenderer # a `GtkCellRenderer`
---@param expand (boolean|nil) # `true` if `cell` is to be given extra space allocated to `cell_layout`
---@return nil
function Gtk.CellLayout:pack_end(cell, expand) end

--- # method Gtk.CellLayout:pack_start()
---
--- Packs the `cell` into the beginning of `cell_layout`. If `expand` is `false`,
--- then the `cell` is allocated no more space than it needs. Any unused space
--- is divided evenly between cells for which `expand` is `true`.
--- 
--- Note that reusing the same cell renderer is not supported.
---
--- ---
---
---@param self Gtk.CellLayout # a `GtkCellLayout`
---@param cell Gtk.CellRenderer # a `GtkCellRenderer`
---@param expand (boolean|nil) # `true` if `cell` is to be given extra space allocated to `cell_layout`
---@return nil
function Gtk.CellLayout:pack_start(cell, expand) end

--- # method Gtk.CellLayout:reorder()
---
--- Re-inserts `cell` at `position`.
--- 
--- Note that `cell` has already to be packed into `cell_layout`
--- for this to function properly.
---
--- ---
---
---@param self Gtk.CellLayout # a `GtkCellLayout`
---@param cell Gtk.CellRenderer # a `GtkCellRenderer` to reorder
---@param position integer # new position to insert `cell` at
---@return nil
function Gtk.CellLayout:reorder(cell, position) end

--- # method Gtk.CellLayout:set_cell_data_func()
---
--- Sets the `GtkCellLayoutDataFunc` to use for `cell_layout`.
--- 
--- This function is used instead of the standard attributes mapping
--- for setting the column value, and should set the value of `cell_layout`’s
--- cell renderer(s) as appropriate.
--- 
--- `func` may be `nil` to remove a previously set function.
---
--- ---
---
---@param self Gtk.CellLayout # a `GtkCellLayout`
---@param cell Gtk.CellRenderer # a `GtkCellRenderer`
---@param func? Gtk.CellLayoutDataFunc # the `GtkCellLayoutDataFunc` to use, or `nil`
---@param func_data? userdata # user data for `func`
---@param destroy GLib.DestroyNotify # destroy notify for `func_data`
---@return nil
function Gtk.CellLayout:set_cell_data_func(cell, func, func_data, destroy) end

---@alias Gtk.CellLayoutDataFunc fun(cell_layout: Gtk.CellLayout, cell: Gtk.CellRenderer, tree_model: Gtk.TreeModel, iter: Gtk.TreeIter, data: userdata): nil

--- # record Gtk.CellLayoutIface
---
---@class Gtk.CellLayoutIface
---@field g_iface GObject.TypeInterface
---@field pack_start fun(cell_layout: Gtk.CellLayout, cell: Gtk.CellRenderer, expand: (boolean|nil)): nil
---@field pack_end fun(cell_layout: Gtk.CellLayout, cell: Gtk.CellRenderer, expand: (boolean|nil)): nil
---@field clear fun(cell_layout: Gtk.CellLayout): nil
---@field add_attribute fun(cell_layout: Gtk.CellLayout, cell: Gtk.CellRenderer, attribute: string, column: integer): nil
---@field set_cell_data_func fun(cell_layout: Gtk.CellLayout, cell: Gtk.CellRenderer, func: Gtk.CellLayoutDataFunc, func_data: userdata, destroy: GLib.DestroyNotify): nil
---@field clear_attributes fun(cell_layout: Gtk.CellLayout, cell: Gtk.CellRenderer): nil
---@field reorder fun(cell_layout: Gtk.CellLayout, cell: Gtk.CellRenderer, position: integer): nil
---@field get_cells fun(cell_layout: Gtk.CellLayout): Gtk.CellRenderer[]
---@field get_area fun(cell_layout: Gtk.CellLayout): Gtk.CellArea
Gtk.CellLayoutIface = {}

--- # class Gtk.CellRenderer
---
--- The `GtkCellRenderer` is a base class of a set of objects used for
--- rendering a cell to a `cairo_t`.  These objects are used primarily by
--- the `GtkTreeView` widget, though they aren’t tied to them in any
--- specific way.  It is worth noting that `GtkCellRenderer` is not a
--- `GtkWidget` and cannot be treated as such.
--- 
--- The primary use of a `GtkCellRenderer` is for drawing a certain graphical
--- elements on a `cairo_t`. Typically, one cell renderer is used to
--- draw many cells on the screen.  To this extent, it isn’t expected that a
--- CellRenderer keep any permanent state around.  Instead, any state is set
--- just prior to use using `GObjects` property system.  Then, the
--- cell is measured using `gtk_cell_renderer_get_size()`. Finally, the cell
--- is rendered in the correct location using `gtk_cell_renderer_render()`.
--- 
--- There are a number of rules that must be followed when writing a new
--- `GtkCellRenderer`.  First and foremost, it’s important that a certain set
--- of properties will always yield a cell renderer of the same size,
--- barring a `GtkStyle` change.  The `GtkCellRenderer` also has a number of
--- generic properties that are expected to be honored by all children.
--- 
--- Beyond merely rendering a cell, cell renderers can optionally
--- provide active user interface elements. A cell renderer can be
--- “activatable” like `GtkCellRendererToggle`,
--- which toggles when it gets activated by a mouse click, or it can be
--- “editable” like `GtkCellRendererText`, which
--- allows the user to edit the text using a widget implementing the
--- `GtkCellEditable` interface, e.g. `GtkEntry`.
--- To make a cell renderer activatable or editable, you have to
--- implement the `GtkCellRendererClass`.activate or
--- `GtkCellRendererClass`.start_editing virtual functions, respectively.
--- 
--- Many properties of `GtkCellRenderer` and its subclasses have a
--- corresponding “set” property, e.g. “cell-background-set” corresponds
--- to “cell-background”. These “set” properties reflect whether a property
--- has been set or not. You should not set them independently.
---
--- ---
---
---@class Gtk.CellRenderer : GObject.InitiallyUnowned
---@field parent_instance GObject.InitiallyUnowned
---@field priv Gtk.CellRendererPrivate
Gtk.CellRenderer = {}

--- # method Gtk.CellRenderer:activate()
---
--- Passes an activate event to the cell renderer for possible processing.
--- Some cell renderers may use events; for example, `GtkCellRendererToggle`
--- toggles when it gets a mouse click.
---
--- ---
---
---@param self Gtk.CellRenderer # a `GtkCellRenderer`
---@param event Gdk.Event # a `GdkEvent`
---@param widget Gtk.Widget # widget that received the event
---@param path string # widget-dependent string representation of the event location; e.g. for `GtkTreeView`, a string representation of `GtkTreePath`
---@param background_area Gdk.Rectangle # background area as passed to `gtk_cell_renderer_render()`
---@param cell_area Gdk.Rectangle # cell area as passed to `gtk_cell_renderer_render()`
---@param flags Gtk.CellRendererState # render flags
---@return (boolean|nil) # `true` if the event was consumed/handled
function Gtk.CellRenderer:activate(event, widget, path, background_area, cell_area, flags) end

--- # method Gtk.CellRenderer:get_aligned_area()
---
--- Gets the aligned area used by `cell` inside `cell_area`. Used for finding
--- the appropriate edit and focus rectangle.
---
--- ---
---
---@param self Gtk.CellRenderer # a `GtkCellRenderer` instance
---@param widget Gtk.Widget # the `GtkWidget` this cell will be rendering to
---@param flags Gtk.CellRendererState # render flags
---@param cell_area Gdk.Rectangle # cell area which would be passed to `gtk_cell_renderer_render()`
---@param aligned_area Gdk.Rectangle # the return location for the space inside `cell_area` that would acually be used to render.
---@return nil
function Gtk.CellRenderer:get_aligned_area(widget, flags, cell_area, aligned_area) end

--- # method Gtk.CellRenderer:get_alignment()
---
--- Fills in `xalign` and `yalign` with the appropriate values of `cell`.
---
--- ---
---
---@param self Gtk.CellRenderer # A `GtkCellRenderer`
---@param xalign? number # location to fill in with the x alignment of the cell, or `nil`
---@param yalign? number # location to fill in with the y alignment of the cell, or `nil`
---@return nil
function Gtk.CellRenderer:get_alignment(xalign, yalign) end

--- # method Gtk.CellRenderer:get_fixed_size()
---
--- Fills in `width` and `height` with the appropriate size of `cell`.
---
--- ---
---
---@param self Gtk.CellRenderer # A `GtkCellRenderer`
---@param width? integer # location to fill in with the fixed width of the cell, or `nil`
---@param height? integer # location to fill in with the fixed height of the cell, or `nil`
---@return nil
function Gtk.CellRenderer:get_fixed_size(width, height) end

--- # method Gtk.CellRenderer:get_padding()
---
--- Fills in `xpad` and `ypad` with the appropriate values of `cell`.
---
--- ---
---
---@param self Gtk.CellRenderer # A `GtkCellRenderer`
---@param xpad? integer # location to fill in with the x padding of the cell, or `nil`
---@param ypad? integer # location to fill in with the y padding of the cell, or `nil`
---@return nil
function Gtk.CellRenderer:get_padding(xpad, ypad) end

--- # method Gtk.CellRenderer:get_preferred_height()
---
--- Retreives a renderer’s natural size when rendered to `widget`.
---
--- ---
---
---@param self Gtk.CellRenderer # a `GtkCellRenderer` instance
---@param widget Gtk.Widget # the `GtkWidget` this cell will be rendering to
---@param minimum_size? integer # location to store the minimum size, or `nil`
---@param natural_size? integer # location to store the natural size, or `nil`
---@return nil
function Gtk.CellRenderer:get_preferred_height(widget, minimum_size, natural_size) end

--- # method Gtk.CellRenderer:get_preferred_height_for_width()
---
--- Retreives a cell renderers’s minimum and natural height if it were rendered to
--- `widget` with the specified `width`.
---
--- ---
---
---@param self Gtk.CellRenderer # a `GtkCellRenderer` instance
---@param widget Gtk.Widget # the `GtkWidget` this cell will be rendering to
---@param width integer # the size which is available for allocation
---@param minimum_height? integer # location for storing the minimum size, or `nil`
---@param natural_height? integer # location for storing the preferred size, or `nil`
---@return nil
function Gtk.CellRenderer:get_preferred_height_for_width(widget, width, minimum_height, natural_height) end

--- # method Gtk.CellRenderer:get_preferred_size()
---
--- Retrieves the minimum and natural size of a cell taking
--- into account the widget’s preference for height-for-width management.
---
--- ---
---
---@param self Gtk.CellRenderer # a `GtkCellRenderer` instance
---@param widget Gtk.Widget # the `GtkWidget` this cell will be rendering to
---@param minimum_size? Gtk.Requisition # location for storing the minimum size, or `nil`
---@param natural_size? Gtk.Requisition # location for storing the natural size, or `nil`
---@return nil
function Gtk.CellRenderer:get_preferred_size(widget, minimum_size, natural_size) end

--- # method Gtk.CellRenderer:get_preferred_width()
---
--- Retreives a renderer’s natural size when rendered to `widget`.
---
--- ---
---
---@param self Gtk.CellRenderer # a `GtkCellRenderer` instance
---@param widget Gtk.Widget # the `GtkWidget` this cell will be rendering to
---@param minimum_size? integer # location to store the minimum size, or `nil`
---@param natural_size? integer # location to store the natural size, or `nil`
---@return nil
function Gtk.CellRenderer:get_preferred_width(widget, minimum_size, natural_size) end

--- # method Gtk.CellRenderer:get_preferred_width_for_height()
---
--- Retreives a cell renderers’s minimum and natural width if it were rendered to
--- `widget` with the specified `height`.
---
--- ---
---
---@param self Gtk.CellRenderer # a `GtkCellRenderer` instance
---@param widget Gtk.Widget # the `GtkWidget` this cell will be rendering to
---@param height integer # the size which is available for allocation
---@param minimum_width? integer # location for storing the minimum size, or `nil`
---@param natural_width? integer # location for storing the preferred size, or `nil`
---@return nil
function Gtk.CellRenderer:get_preferred_width_for_height(widget, height, minimum_width, natural_width) end

--- # method Gtk.CellRenderer:get_request_mode()
---
--- Gets whether the cell renderer prefers a height-for-width layout
--- or a width-for-height layout.
---
--- ---
---
---@param self Gtk.CellRenderer # a `GtkCellRenderer` instance
---@return Gtk.SizeRequestMode # The `GtkSizeRequestMode` preferred by this renderer.
function Gtk.CellRenderer:get_request_mode() end

--- # method Gtk.CellRenderer:get_sensitive()
---
--- Returns the cell renderer’s sensitivity.
---
--- ---
---
---@param self Gtk.CellRenderer # A `GtkCellRenderer`
---@return (boolean|nil) # `true` if the cell renderer is sensitive
function Gtk.CellRenderer:get_sensitive() end

--- # method Gtk.CellRenderer:get_size()
---
--- Obtains the width and height needed to render the cell. Used by view
--- widgets to determine the appropriate size for the cell_area passed to
--- `gtk_cell_renderer_render()`.  If `cell_area` is not `nil`, fills in the
--- x and y offsets (if set) of the cell relative to this location.
--- 
--- Please note that the values set in `width` and `height`, as well as those
--- in `x_offset` and `y_offset` are inclusive of the xpad and ypad properties.
---
--- ---
---
---@param self Gtk.CellRenderer # a `GtkCellRenderer`
---@param widget Gtk.Widget # the widget the renderer is rendering to
---@param cell_area? Gdk.Rectangle # The area a cell will be allocated, or `nil`
---@param x_offset? integer # location to return x offset of cell relative to `cell_area`, or `nil`
---@param y_offset? integer # location to return y offset of cell relative to `cell_area`, or `nil`
---@param width? integer # location to return width needed to render a cell, or `nil`
---@param height? integer # location to return height needed to render a cell, or `nil`
---@return nil
function Gtk.CellRenderer:get_size(widget, cell_area, x_offset, y_offset, width, height) end

--- # method Gtk.CellRenderer:get_state()
---
--- Translates the cell renderer state to `GtkStateFlags`,
--- based on the cell renderer and widget sensitivity, and
--- the given `GtkCellRendererState`.
---
--- ---
---
---@param self? Gtk.CellRenderer # a `GtkCellRenderer`, or `nil`
---@param widget? Gtk.Widget # a `GtkWidget`, or `nil`
---@param cell_state Gtk.CellRendererState # cell renderer state
---@return Gtk.StateFlags # the widget state flags applying to `cell`
function Gtk.CellRenderer:get_state(widget, cell_state) end

--- # method Gtk.CellRenderer:get_visible()
---
--- Returns the cell renderer’s visibility.
---
--- ---
---
---@param self Gtk.CellRenderer # A `GtkCellRenderer`
---@return (boolean|nil) # `true` if the cell renderer is visible
function Gtk.CellRenderer:get_visible() end

--- # method Gtk.CellRenderer:is_activatable()
---
--- Checks whether the cell renderer can do something when activated.
---
--- ---
---
---@param self Gtk.CellRenderer # A `GtkCellRenderer`
---@return (boolean|nil) # `true` if the cell renderer can do anything when activated
function Gtk.CellRenderer:is_activatable() end

--- # method Gtk.CellRenderer:render()
---
--- Invokes the virtual render function of the `GtkCellRenderer`. The three
--- passed-in rectangles are areas in `cr`. Most renderers will draw within
--- `cell_area`; the xalign, yalign, xpad, and ypad fields of the `GtkCellRenderer`
--- should be honored with respect to `cell_area`. `background_area` includes the
--- blank space around the cell, and also the area containing the tree expander;
--- so the `background_area` rectangles for all cells tile to cover the entire
--- `window`.
---
--- ---
---
---@param self Gtk.CellRenderer # a `GtkCellRenderer`
---@param cr cairo.Context # a cairo context to draw to
---@param widget Gtk.Widget # the widget owning `window`
---@param background_area Gdk.Rectangle # entire cell area (including tree expanders and maybe padding on the sides)
---@param cell_area Gdk.Rectangle # area normally rendered by a cell renderer
---@param flags Gtk.CellRendererState # flags that affect rendering
---@return nil
function Gtk.CellRenderer:render(cr, widget, background_area, cell_area, flags) end

--- # method Gtk.CellRenderer:set_alignment()
---
--- Sets the renderer’s alignment within its available space.
---
--- ---
---
---@param self Gtk.CellRenderer # A `GtkCellRenderer`
---@param xalign number # the x alignment of the cell renderer
---@param yalign number # the y alignment of the cell renderer
---@return nil
function Gtk.CellRenderer:set_alignment(xalign, yalign) end

--- # method Gtk.CellRenderer:set_fixed_size()
---
--- Sets the renderer size to be explicit, independent of the properties set.
---
--- ---
---
---@param self Gtk.CellRenderer # A `GtkCellRenderer`
---@param width integer # the width of the cell renderer, or -1
---@param height integer # the height of the cell renderer, or -1
---@return nil
function Gtk.CellRenderer:set_fixed_size(width, height) end

--- # method Gtk.CellRenderer:set_padding()
---
--- Sets the renderer’s padding.
---
--- ---
---
---@param self Gtk.CellRenderer # A `GtkCellRenderer`
---@param xpad integer # the x padding of the cell renderer
---@param ypad integer # the y padding of the cell renderer
---@return nil
function Gtk.CellRenderer:set_padding(xpad, ypad) end

--- # method Gtk.CellRenderer:set_sensitive()
---
--- Sets the cell renderer’s sensitivity.
---
--- ---
---
---@param self Gtk.CellRenderer # A `GtkCellRenderer`
---@param sensitive (boolean|nil) # the sensitivity of the cell
---@return nil
function Gtk.CellRenderer:set_sensitive(sensitive) end

--- # method Gtk.CellRenderer:set_visible()
---
--- Sets the cell renderer’s visibility.
---
--- ---
---
---@param self Gtk.CellRenderer # A `GtkCellRenderer`
---@param visible (boolean|nil) # the visibility of the cell
---@return nil
function Gtk.CellRenderer:set_visible(visible) end

--- # method Gtk.CellRenderer:start_editing()
---
--- Starts editing the contents of this `cell`, through a new `GtkCellEditable`
--- widget created by the `GtkCellRendererClass`.start_editing virtual function.
---
--- ---
---
---@param self Gtk.CellRenderer # a `GtkCellRenderer`
---@param event? Gdk.Event # a `GdkEvent`
---@param widget Gtk.Widget # widget that received the event
---@param path string # widget-dependent string representation of the event location; e.g. for `GtkTreeView`, a string representation of `GtkTreePath`
---@param background_area Gdk.Rectangle # background area as passed to `gtk_cell_renderer_render()`
---@param cell_area Gdk.Rectangle # cell area as passed to `gtk_cell_renderer_render()`
---@param flags Gtk.CellRendererState # render flags
---@return Gtk.CellEditable # A new `GtkCellEditable` for editing this `cell`, or `nil` if editing is not possible
function Gtk.CellRenderer:start_editing(event, widget, path, background_area, cell_area, flags) end

--- # method Gtk.CellRenderer:stop_editing()
---
--- Informs the cell renderer that the editing is stopped.
--- If `canceled` is `true`, the cell renderer will emit the
--- `GtkCellRenderer`::editing-canceled signal.
--- 
--- This function should be called by cell renderer implementations
--- in response to the `GtkCellEditable`::editing-done signal of
--- `GtkCellEditable`.
---
--- ---
---
---@param self Gtk.CellRenderer # A `GtkCellRenderer`
---@param canceled (boolean|nil) # `true` if the editing has been canceled
---@return nil
function Gtk.CellRenderer:stop_editing(canceled) end

--- # class Gtk.CellRendererAccel
---
--- `GtkCellRendererAccel` displays a keyboard accelerator (i.e. a key
--- combination like `Control + a`). If the cell renderer is editable,
--- the accelerator can be changed by simply typing the new combination.
--- 
--- The `GtkCellRendererAccel` cell renderer was added in GTK+ 2.10.
---
--- ---
---
---@class Gtk.CellRendererAccel : Gtk.CellRendererText
---@field parent Gtk.CellRendererText
---@field priv Gtk.CellRendererAccelPrivate
---@operator call: Gtk.CellRendererAccel
Gtk.CellRendererAccel = {}

--- # function Gtk.CellRendererAccel.new()
---
--- Creates a new `GtkCellRendererAccel`.
---
--- ---
---
---@return Gtk.CellRenderer # the new cell renderer
function Gtk.CellRendererAccel.new() end

--- # record Gtk.CellRendererAccelClass
---
---@class Gtk.CellRendererAccelClass
---@field parent_class Gtk.CellRendererTextClass
---@field accel_edited fun(accel: Gtk.CellRendererAccel, path_string: string, accel_key: integer, accel_mods: Gdk.ModifierType, hardware_keycode: integer): nil
---@field accel_cleared fun(accel: Gtk.CellRendererAccel, path_string: string): nil
Gtk.CellRendererAccelClass = {}

---@enum Gtk.CellRendererAccelMode
Gtk.CellRendererAccelMode = {}

--- # record Gtk.CellRendererAccelPrivate
---
---@class Gtk.CellRendererAccelPrivate
Gtk.CellRendererAccelPrivate = {}

--- # record Gtk.CellRendererClass
---
---@class Gtk.CellRendererClass
---@field parent_class GObject.InitiallyUnownedClass
---@field get_request_mode fun(cell: Gtk.CellRenderer): Gtk.SizeRequestMode
---@field get_preferred_width fun(cell: Gtk.CellRenderer, widget: Gtk.Widget, minimum_size: integer, natural_size: integer): nil
---@field get_preferred_height_for_width fun(cell: Gtk.CellRenderer, widget: Gtk.Widget, width: integer, minimum_height: integer, natural_height: integer): nil
---@field get_preferred_height fun(cell: Gtk.CellRenderer, widget: Gtk.Widget, minimum_size: integer, natural_size: integer): nil
---@field get_preferred_width_for_height fun(cell: Gtk.CellRenderer, widget: Gtk.Widget, height: integer, minimum_width: integer, natural_width: integer): nil
---@field get_aligned_area fun(cell: Gtk.CellRenderer, widget: Gtk.Widget, flags: Gtk.CellRendererState, cell_area: Gdk.Rectangle, aligned_area: Gdk.Rectangle): nil
---@field get_size fun(cell: Gtk.CellRenderer, widget: Gtk.Widget, cell_area: Gdk.Rectangle, x_offset: integer, y_offset: integer, width: integer, height: integer): nil
---@field render fun(cell: Gtk.CellRenderer, cr: cairo.Context, widget: Gtk.Widget, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState): nil
---@field activate fun(cell: Gtk.CellRenderer, event: Gdk.Event, widget: Gtk.Widget, path: string, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState): (boolean|nil)
---@field start_editing fun(cell: Gtk.CellRenderer, event: Gdk.Event, widget: Gtk.Widget, path: string, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState): Gtk.CellEditable
---@field editing_canceled fun(cell: Gtk.CellRenderer): nil
---@field editing_started fun(cell: Gtk.CellRenderer, editable: Gtk.CellEditable, path: string): nil
---@field priv Gtk.CellRendererClassPrivate
Gtk.CellRendererClass = {}

--- # method Gtk.CellRendererClass:set_accessible_type()
---
--- Sets the type to be used for creating accessibles for cells rendered by
--- cell renderers of `renderer_class`. Note that multiple accessibles will
--- be created.
--- 
--- This function should only be called from class init functions of cell
--- renderers.
---
--- ---
---
---@param self Gtk.CellRendererClass # class to set the accessible type for
---@param type Gtk.GType # The object type that implements the accessible for `widget_class`. The type must be a subtype of `GtkRendererCellAccessible`
---@return nil
function Gtk.CellRendererClass:set_accessible_type(type) end

--- # record Gtk.CellRendererClassPrivate
---
---@class Gtk.CellRendererClassPrivate
Gtk.CellRendererClassPrivate = {}

--- # class Gtk.CellRendererCombo
---
--- `GtkCellRendererCombo` renders text in a cell like `GtkCellRendererText` from
--- which it is derived. But while `GtkCellRendererText` offers a simple entry to
--- edit the text, `GtkCellRendererCombo` offers a `GtkComboBox`
--- widget to edit the text. The values to display in the combo box are taken from
--- the tree model specified in the `GtkCellRendererCombo`:model property.
--- 
--- The combo cell renderer takes care of adding a text cell renderer to the combo
--- box and sets it to display the column specified by its
--- `GtkCellRendererCombo`:text-column property. Further properties of the combo box
--- can be set in a handler for the `GtkCellRenderer`::editing-started signal.
--- 
--- The `GtkCellRendererCombo` cell renderer was added in GTK+ 2.6.
---
--- ---
---
---@class Gtk.CellRendererCombo : Gtk.CellRendererText
---@field parent Gtk.CellRendererText
---@field priv Gtk.CellRendererComboPrivate
---@operator call: Gtk.CellRendererCombo
Gtk.CellRendererCombo = {}

--- # function Gtk.CellRendererCombo.new()
---
--- Creates a new `GtkCellRendererCombo`.
--- Adjust how text is drawn using object properties.
--- Object properties can be set globally (with `g_object_set()`).
--- Also, with `GtkTreeViewColumn`, you can bind a property to a value
--- in a `GtkTreeModel`. For example, you can bind the “text” property
--- on the cell renderer to a string value in the model, thus rendering
--- a different string in each row of the `GtkTreeView`.
---
--- ---
---
---@return Gtk.CellRenderer # the new cell renderer
function Gtk.CellRendererCombo.new() end

--- # record Gtk.CellRendererComboClass
---
---@class Gtk.CellRendererComboClass
---@field parent Gtk.CellRendererTextClass
Gtk.CellRendererComboClass = {}

--- # record Gtk.CellRendererComboPrivate
---
---@class Gtk.CellRendererComboPrivate
Gtk.CellRendererComboPrivate = {}

---@enum Gtk.CellRendererMode
Gtk.CellRendererMode = {}

--- # class Gtk.CellRendererPixbuf
---
--- A `GtkCellRendererPixbuf` can be used to render an image in a cell. It allows
--- to render either a given `GdkPixbuf` (set via the
--- `GtkCellRendererPixbuf`:pixbuf property) or a named icon (set via the
--- `GtkCellRendererPixbuf`:icon-name property).
--- 
--- To support the tree view, `GtkCellRendererPixbuf` also supports rendering two
--- alternative pixbufs, when the `GtkCellRenderer`:is-expander property is `true`.
--- If the `GtkCellRenderer`:is-expanded property is `true` and the
--- `GtkCellRendererPixbuf`:pixbuf-expander-open property is set to a pixbuf, it
--- renders that pixbuf, if the `GtkCellRenderer`:is-expanded property is `false`
--- and the `GtkCellRendererPixbuf`:pixbuf-expander-closed property is set to a
--- pixbuf, it renders that one.
---
--- ---
---
---@class Gtk.CellRendererPixbuf : Gtk.CellRenderer
---@field parent Gtk.CellRenderer
---@field priv Gtk.CellRendererPixbufPrivate
---@operator call: Gtk.CellRendererPixbuf
Gtk.CellRendererPixbuf = {}

--- # function Gtk.CellRendererPixbuf.new()
---
--- Creates a new `GtkCellRendererPixbuf`. Adjust rendering
--- parameters using object properties. Object properties can be set
--- globally (with `g_object_set()`). Also, with `GtkTreeViewColumn`, you
--- can bind a property to a value in a `GtkTreeModel`. For example, you
--- can bind the “pixbuf” property on the cell renderer to a pixbuf value
--- in the model, thus rendering a different image in each row of the
--- `GtkTreeView`.
---
--- ---
---
---@return Gtk.CellRenderer # the new cell renderer
function Gtk.CellRendererPixbuf.new() end

--- # record Gtk.CellRendererPixbufClass
---
---@class Gtk.CellRendererPixbufClass
---@field parent_class Gtk.CellRendererClass
Gtk.CellRendererPixbufClass = {}

--- # record Gtk.CellRendererPixbufPrivate
---
---@class Gtk.CellRendererPixbufPrivate
Gtk.CellRendererPixbufPrivate = {}

--- # record Gtk.CellRendererPrivate
---
---@class Gtk.CellRendererPrivate
Gtk.CellRendererPrivate = {}

--- # class Gtk.CellRendererProgress
---
--- `GtkCellRendererProgress` renders a numeric value as a progress par in a cell.
--- Additionally, it can display a text on top of the progress bar.
--- 
--- The `GtkCellRendererProgress` cell renderer was added in GTK+ 2.6.
---
--- ---
---
---@class Gtk.CellRendererProgress : Gtk.CellRenderer, Gtk.Orientable
---@field parent_instance Gtk.CellRenderer
---@field priv Gtk.CellRendererProgressPrivate
---@operator call: Gtk.CellRendererProgress
Gtk.CellRendererProgress = {}

--- # function Gtk.CellRendererProgress.new()
---
--- Creates a new `GtkCellRendererProgress`.
---
--- ---
---
---@return Gtk.CellRenderer # the new cell renderer
function Gtk.CellRendererProgress.new() end

--- # record Gtk.CellRendererProgressClass
---
---@class Gtk.CellRendererProgressClass
---@field parent_class Gtk.CellRendererClass
Gtk.CellRendererProgressClass = {}

--- # record Gtk.CellRendererProgressPrivate
---
---@class Gtk.CellRendererProgressPrivate
Gtk.CellRendererProgressPrivate = {}

--- # class Gtk.CellRendererSpin
---
--- `GtkCellRendererSpin` renders text in a cell like `GtkCellRendererText` from
--- which it is derived. But while `GtkCellRendererText` offers a simple entry to
--- edit the text, `GtkCellRendererSpin` offers a `GtkSpinButton` widget. Of course,
--- that means that the text has to be parseable as a floating point number.
--- 
--- The range of the spinbutton is taken from the adjustment property of the
--- cell renderer, which can be set explicitly or mapped to a column in the
--- tree model, like all properties of cell renders. `GtkCellRendererSpin`
--- also has properties for the `GtkCellRendererSpin`:climb-rate and the number
--- of `GtkCellRendererSpin`:digits to display. Other `GtkSpinButton` properties
--- can be set in a handler for the `GtkCellRenderer`::editing-started signal.
--- 
--- The `GtkCellRendererSpin` cell renderer was added in GTK+ 2.10.
---
--- ---
---
---@class Gtk.CellRendererSpin : Gtk.CellRendererText
---@field parent Gtk.CellRendererText
---@field priv Gtk.CellRendererSpinPrivate
---@operator call: Gtk.CellRendererSpin
Gtk.CellRendererSpin = {}

--- # function Gtk.CellRendererSpin.new()
---
--- Creates a new `GtkCellRendererSpin`.
---
--- ---
---
---@return Gtk.CellRenderer # a new `GtkCellRendererSpin`
function Gtk.CellRendererSpin.new() end

--- # record Gtk.CellRendererSpinClass
---
---@class Gtk.CellRendererSpinClass
---@field parent Gtk.CellRendererTextClass
Gtk.CellRendererSpinClass = {}

--- # record Gtk.CellRendererSpinPrivate
---
---@class Gtk.CellRendererSpinPrivate
Gtk.CellRendererSpinPrivate = {}

--- # class Gtk.CellRendererSpinner
---
--- GtkCellRendererSpinner renders a spinning animation in a cell, very
--- similar to `GtkSpinner`. It can often be used as an alternative
--- to a `GtkCellRendererProgress` for displaying indefinite activity,
--- instead of actual progress.
--- 
--- To start the animation in a cell, set the `GtkCellRendererSpinner`:active
--- property to `true` and increment the `GtkCellRendererSpinner`:pulse property
--- at regular intervals. The usual way to set the cell renderer properties
--- for each cell is to bind them to columns in your tree model using e.g.
--- `gtk_tree_view_column_add_attribute()`.
---
--- ---
---
---@class Gtk.CellRendererSpinner : Gtk.CellRenderer
---@field parent Gtk.CellRenderer
---@field priv Gtk.CellRendererSpinnerPrivate
---@operator call: Gtk.CellRendererSpinner
Gtk.CellRendererSpinner = {}

--- # function Gtk.CellRendererSpinner.new()
---
--- Returns a new cell renderer which will show a spinner to indicate
--- activity.
---
--- ---
---
---@return Gtk.CellRenderer # a new `GtkCellRenderer`
function Gtk.CellRendererSpinner.new() end

--- # record Gtk.CellRendererSpinnerClass
---
---@class Gtk.CellRendererSpinnerClass
---@field parent_class Gtk.CellRendererClass
Gtk.CellRendererSpinnerClass = {}

--- # record Gtk.CellRendererSpinnerPrivate
---
---@class Gtk.CellRendererSpinnerPrivate
Gtk.CellRendererSpinnerPrivate = {}

---@enum Gtk.CellRendererState
Gtk.CellRendererState = {}

--- # class Gtk.CellRendererText
---
--- A `GtkCellRendererText` renders a given text in its cell, using the font, color and
--- style information provided by its properties. The text will be ellipsized if it is
--- too long and the `GtkCellRendererText`:ellipsize property allows it.
--- 
--- If the `GtkCellRenderer`:mode is %GTK_CELL_RENDERER_MODE_EDITABLE,
--- the `GtkCellRendererText` allows to edit its text using an entry.
---
--- ---
---
---@class Gtk.CellRendererText : Gtk.CellRenderer
---@field parent Gtk.CellRenderer
---@field priv Gtk.CellRendererTextPrivate
---@operator call: Gtk.CellRendererText
Gtk.CellRendererText = {}

--- # method Gtk.CellRendererText:set_fixed_height_from_font()
---
--- Sets the height of a renderer to explicitly be determined by the “font” and
--- “y_pad” property set on it.  Further changes in these properties do not
--- affect the height, so they must be accompanied by a subsequent call to this
--- function.  Using this function is unflexible, and should really only be used
--- if calculating the size of a cell is too slow (ie, a massive number of cells
--- displayed).  If `number_of_rows` is -1, then the fixed height is unset, and
--- the height is determined by the properties again.
---
--- ---
---
---@param self Gtk.CellRendererText # A `GtkCellRendererText`
---@param number_of_rows integer # Number of rows of text each cell renderer is allocated, or -1
---@return nil
function Gtk.CellRendererText:set_fixed_height_from_font(number_of_rows) end

--- # function Gtk.CellRendererText.new()
---
--- Creates a new `GtkCellRendererText`. Adjust how text is drawn using
--- object properties. Object properties can be
--- set globally (with `g_object_set()`). Also, with `GtkTreeViewColumn`,
--- you can bind a property to a value in a `GtkTreeModel`. For example,
--- you can bind the “text” property on the cell renderer to a string
--- value in the model, thus rendering a different string in each row
--- of the `GtkTreeView`
---
--- ---
---
---@return Gtk.CellRenderer # the new cell renderer
function Gtk.CellRendererText.new() end

--- # record Gtk.CellRendererTextClass
---
---@class Gtk.CellRendererTextClass
---@field parent_class Gtk.CellRendererClass
---@field edited fun(cell_renderer_text: Gtk.CellRendererText, path: string, new_text: string): nil
Gtk.CellRendererTextClass = {}

--- # record Gtk.CellRendererTextPrivate
---
---@class Gtk.CellRendererTextPrivate
Gtk.CellRendererTextPrivate = {}

--- # class Gtk.CellRendererToggle
---
--- `GtkCellRendererToggle` renders a toggle button in a cell. The
--- button is drawn as a radio or a checkbutton, depending on the
--- `GtkCellRendererToggle`:radio property.
--- When activated, it emits the `GtkCellRendererToggle`::toggled signal.
---
--- ---
---
---@class Gtk.CellRendererToggle : Gtk.CellRenderer
---@field parent Gtk.CellRenderer
---@field priv Gtk.CellRendererTogglePrivate
---@operator call: Gtk.CellRendererToggle
Gtk.CellRendererToggle = {}

--- # method Gtk.CellRendererToggle:get_activatable()
---
--- Returns whether the cell renderer is activatable. See
--- `gtk_cell_renderer_toggle_set_activatable()`.
---
--- ---
---
---@param self Gtk.CellRendererToggle # a `GtkCellRendererToggle`
---@return (boolean|nil) # `true` if the cell renderer is activatable.
function Gtk.CellRendererToggle:get_activatable() end

--- # method Gtk.CellRendererToggle:get_active()
---
--- Returns whether the cell renderer is active. See
--- `gtk_cell_renderer_toggle_set_active()`.
---
--- ---
---
---@param self Gtk.CellRendererToggle # a `GtkCellRendererToggle`
---@return (boolean|nil) # `true` if the cell renderer is active.
function Gtk.CellRendererToggle:get_active() end

--- # method Gtk.CellRendererToggle:get_radio()
---
--- Returns whether we’re rendering radio toggles rather than checkboxes.
---
--- ---
---
---@param self Gtk.CellRendererToggle # a `GtkCellRendererToggle`
---@return (boolean|nil) # `true` if we’re rendering radio toggles rather than checkboxes
function Gtk.CellRendererToggle:get_radio() end

--- # method Gtk.CellRendererToggle:set_activatable()
---
--- Makes the cell renderer activatable.
---
--- ---
---
---@param self Gtk.CellRendererToggle # a `GtkCellRendererToggle`.
---@param setting (boolean|nil) # the value to set.
---@return nil
function Gtk.CellRendererToggle:set_activatable(setting) end

--- # method Gtk.CellRendererToggle:set_active()
---
--- Activates or deactivates a cell renderer.
---
--- ---
---
---@param self Gtk.CellRendererToggle # a `GtkCellRendererToggle`.
---@param setting (boolean|nil) # the value to set.
---@return nil
function Gtk.CellRendererToggle:set_active(setting) end

--- # method Gtk.CellRendererToggle:set_radio()
---
--- If `radio` is `true`, the cell renderer renders a radio toggle
--- (i.e. a toggle in a group of mutually-exclusive toggles).
--- If `false`, it renders a check toggle (a standalone boolean option).
--- This can be set globally for the cell renderer, or changed just
--- before rendering each cell in the model (for `GtkTreeView`, you set
--- up a per-row setting using `GtkTreeViewColumn` to associate model
--- columns with cell renderer properties).
---
--- ---
---
---@param self Gtk.CellRendererToggle # a `GtkCellRendererToggle`
---@param radio (boolean|nil) # `true` to make the toggle look like a radio button
---@return nil
function Gtk.CellRendererToggle:set_radio(radio) end

--- # function Gtk.CellRendererToggle.new()
---
--- Creates a new `GtkCellRendererToggle`. Adjust rendering
--- parameters using object properties. Object properties can be set
--- globally (with `g_object_set()`). Also, with `GtkTreeViewColumn`, you
--- can bind a property to a value in a `GtkTreeModel`. For example, you
--- can bind the “active” property on the cell renderer to a boolean value
--- in the model, thus causing the check button to reflect the state of
--- the model.
---
--- ---
---
---@return Gtk.CellRenderer # the new cell renderer
function Gtk.CellRendererToggle.new() end

--- # record Gtk.CellRendererToggleClass
---
---@class Gtk.CellRendererToggleClass
---@field parent_class Gtk.CellRendererClass
---@field toggled fun(cell_renderer_toggle: Gtk.CellRendererToggle, path: string): nil
Gtk.CellRendererToggleClass = {}

--- # record Gtk.CellRendererTogglePrivate
---
---@class Gtk.CellRendererTogglePrivate
Gtk.CellRendererTogglePrivate = {}

--- # class Gtk.CellView
---
--- A `GtkCellView` displays a single row of a `GtkTreeModel` using a `GtkCellArea`
--- and `GtkCellAreaContext`. A `GtkCellAreaContext` can be provided to the
--- `GtkCellView` at construction time in order to keep the cellview in context
--- of a group of cell views, this ensures that the renderers displayed will
--- be properly aligned with eachother (like the aligned cells in the menus
--- of `GtkComboBox`).
--- 
--- `GtkCellView` is `GtkOrientable` in order to decide in which orientation
--- the underlying `GtkCellAreaContext` should be allocated. Taking the `GtkComboBox`
--- menu as an example, cellviews should be oriented horizontally if the menus are
--- listed top-to-bottom and thus all share the same width but may have separate
--- individual heights (left-to-right menus should be allocated vertically since
--- they all share the same height but may have variable widths).
--- 
--- # CSS nodes
--- 
--- GtkCellView has a single CSS node with name cellview.
---
--- ---
---
---@class Gtk.CellView : Gtk.Widget, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.CellLayout, Gtk.Orientable
---@field parent_instance Gtk.Widget
---@field priv Gtk.CellViewPrivate
---@operator call: Gtk.CellView
Gtk.CellView = {}

--- # method Gtk.CellView:get_displayed_row()
---
--- Returns a `GtkTreePath` referring to the currently
--- displayed row. If no row is currently displayed,
--- `nil` is returned.
---
--- ---
---
---@param self Gtk.CellView # a `GtkCellView`
---@return Gtk.TreePath # the currently displayed row or `nil`
function Gtk.CellView:get_displayed_row() end

--- # method Gtk.CellView:get_draw_sensitive()
---
--- Gets whether `cell_view` is configured to draw all of its
--- cells in a sensitive state.
---
--- ---
---
---@param self Gtk.CellView # a `GtkCellView`
---@return (boolean|nil) # whether `cell_view` draws all of its cells in a sensitive state
function Gtk.CellView:get_draw_sensitive() end

--- # method Gtk.CellView:get_fit_model()
---
--- Gets whether `cell_view` is configured to request space
--- to fit the entire `GtkTreeModel`.
---
--- ---
---
---@param self Gtk.CellView # a `GtkCellView`
---@return (boolean|nil) # whether `cell_view` requests space to fit the entire `GtkTreeModel`.
function Gtk.CellView:get_fit_model() end

--- # method Gtk.CellView:get_model()
---
--- Returns the model for `cell_view`. If no model is used `nil` is
--- returned.
---
--- ---
---
---@param self Gtk.CellView # a `GtkCellView`
---@return Gtk.TreeModel # a `GtkTreeModel` used or `nil`
function Gtk.CellView:get_model() end

--- # method Gtk.CellView:get_size_of_row()
---
--- Sets `requisition` to the size needed by `cell_view` to display
--- the model row pointed to by `path`.
---
--- ---
---
---@param self Gtk.CellView # a `GtkCellView`
---@param path Gtk.TreePath # a `GtkTreePath`
---@param requisition Gtk.Requisition # return location for the size
---@return (boolean|nil) # `true`
function Gtk.CellView:get_size_of_row(path, requisition) end

--- # method Gtk.CellView:set_background_color()
---
--- Sets the background color of `view`.
---
--- ---
---
---@param self Gtk.CellView # a `GtkCellView`
---@param color Gdk.Color # the new background color
---@return nil
function Gtk.CellView:set_background_color(color) end

--- # method Gtk.CellView:set_background_rgba()
---
--- Sets the background color of `cell_view`.
---
--- ---
---
---@param self Gtk.CellView # a `GtkCellView`
---@param rgba Gdk.RGBA # the new background color
---@return nil
function Gtk.CellView:set_background_rgba(rgba) end

--- # method Gtk.CellView:set_displayed_row()
---
--- Sets the row of the model that is currently displayed
--- by the `GtkCellView`. If the path is unset, then the
--- contents of the cellview “stick” at their last value;
--- this is not normally a desired result, but may be
--- a needed intermediate state if say, the model for
--- the `GtkCellView` becomes temporarily empty.
---
--- ---
---
---@param self Gtk.CellView # a `GtkCellView`
---@param path? Gtk.TreePath # a `GtkTreePath` or `nil` to unset.
---@return nil
function Gtk.CellView:set_displayed_row(path) end

--- # method Gtk.CellView:set_draw_sensitive()
---
--- Sets whether `cell_view` should draw all of its
--- cells in a sensitive state, this is used by `GtkComboBox` menus
--- to ensure that rows with insensitive cells that contain
--- children appear sensitive in the parent menu item.
---
--- ---
---
---@param self Gtk.CellView # a `GtkCellView`
---@param draw_sensitive (boolean|nil) # whether to draw all cells in a sensitive state.
---@return nil
function Gtk.CellView:set_draw_sensitive(draw_sensitive) end

--- # method Gtk.CellView:set_fit_model()
---
--- Sets whether `cell_view` should request space to fit the entire `GtkTreeModel`.
--- 
--- This is used by `GtkComboBox` to ensure that the cell view displayed on
--- the combo box’s button always gets enough space and does not resize
--- when selection changes.
---
--- ---
---
---@param self Gtk.CellView # a `GtkCellView`
---@param fit_model (boolean|nil) # whether `cell_view` should request space for the whole model.
---@return nil
function Gtk.CellView:set_fit_model(fit_model) end

--- # method Gtk.CellView:set_model()
---
--- Sets the model for `cell_view`.  If `cell_view` already has a model
--- set, it will remove it before setting the new model.  If `model` is
--- `nil`, then it will unset the old model.
---
--- ---
---
---@param self Gtk.CellView # a `GtkCellView`
---@param model? Gtk.TreeModel # a `GtkTreeModel`
---@return nil
function Gtk.CellView:set_model(model) end

--- # function Gtk.CellView.new()
---
--- Creates a new `GtkCellView` widget.
---
--- ---
---
---@return Gtk.Widget # A newly created `GtkCellView` widget.
function Gtk.CellView.new() end

--- # function Gtk.CellView.new_with_context()
---
--- Creates a new `GtkCellView` widget with a specific `GtkCellArea`
--- to layout cells and a specific `GtkCellAreaContext`.
--- 
--- Specifying the same context for a handfull of cells lets
--- the underlying area synchronize the geometry for those cells,
--- in this way alignments with cellviews for other rows are
--- possible.
---
--- ---
---
---@param area Gtk.CellArea # the `GtkCellArea` to layout cells
---@param context Gtk.CellAreaContext # the `GtkCellAreaContext` in which to calculate cell geometry
---@return Gtk.Widget # A newly created `GtkCellView` widget.
function Gtk.CellView.new_with_context(area, context) end

--- # function Gtk.CellView.new_with_markup()
---
--- Creates a new `GtkCellView` widget, adds a `GtkCellRendererText`
--- to it, and makes it show `markup`. The text can be
--- marked up with the [Pango text markup language][PangoMarkupFormat].
---
--- ---
---
---@param markup string # the text to display in the cell view
---@return Gtk.Widget # A newly created `GtkCellView` widget.
function Gtk.CellView.new_with_markup(markup) end

--- # function Gtk.CellView.new_with_pixbuf()
---
--- Creates a new `GtkCellView` widget, adds a `GtkCellRendererPixbuf`
--- to it, and makes it show `pixbuf`.
---
--- ---
---
---@param pixbuf GdkPixbuf.Pixbuf # the image to display in the cell view
---@return Gtk.Widget # A newly created `GtkCellView` widget.
function Gtk.CellView.new_with_pixbuf(pixbuf) end

--- # function Gtk.CellView.new_with_text()
---
--- Creates a new `GtkCellView` widget, adds a `GtkCellRendererText`
--- to it, and makes it show `text`.
---
--- ---
---
---@param text string # the text to display in the cell view
---@return Gtk.Widget # A newly created `GtkCellView` widget.
function Gtk.CellView.new_with_text(text) end

--- # record Gtk.CellViewClass
---
---@class Gtk.CellViewClass
---@field parent_class Gtk.WidgetClass # The parent class.
Gtk.CellViewClass = {}

--- # record Gtk.CellViewPrivate
---
---@class Gtk.CellViewPrivate
Gtk.CellViewPrivate = {}

--- # class Gtk.CheckButton
---
--- A `GtkCheckButton` places a discrete `GtkToggleButton` next to a widget,
--- (usually a `GtkLabel`). See the section on `GtkToggleButton` widgets for
--- more information about toggle/check buttons.
--- 
--- The important signal ( `GtkToggleButton`::toggled ) is also inherited from
--- `GtkToggleButton`.
--- 
--- # CSS nodes
--- 
--- ```plain
--- checkbutton
--- ├── check
--- ╰── <child>
--- ```
--- 
--- A GtkCheckButton with indicator (see `gtk_toggle_button_set_mode()`) has a
--- main CSS node with name checkbutton and a subnode with name check.
--- 
--- ```plain
--- button.check
--- ├── check
--- ╰── <child>
--- ```
--- 
--- A GtkCheckButton without indicator changes the name of its main node
--- to button and adds a .check style class to it. The subnode is invisible
--- in this case.
---
--- ---
---
---@class Gtk.CheckButton : Gtk.ToggleButton, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field toggle_button Gtk.ToggleButton
---@operator call: Gtk.CheckButton
Gtk.CheckButton = {}

--- # function Gtk.CheckButton.new()
---
--- Creates a new `GtkCheckButton`.
---
--- ---
---
---@return Gtk.Widget # a `GtkWidget`.
function Gtk.CheckButton.new() end

--- # function Gtk.CheckButton.new_with_label()
---
--- Creates a new `GtkCheckButton` with a `GtkLabel` to the right of it.
---
--- ---
---
---@param label string # the text for the check button.
---@return Gtk.Widget # a `GtkWidget`.
function Gtk.CheckButton.new_with_label(label) end

--- # function Gtk.CheckButton.new_with_mnemonic()
---
--- Creates a new `GtkCheckButton` containing a label. The label
--- will be created using `gtk_label_new_with_mnemonic()`, so underscores
--- in `label` indicate the mnemonic for the check button.
---
--- ---
---
---@param label string # The text of the button, with an underscore in front of the mnemonic character
---@return Gtk.Widget # a new `GtkCheckButton`
function Gtk.CheckButton.new_with_mnemonic(label) end

--- # record Gtk.CheckButtonClass
---
---@class Gtk.CheckButtonClass
---@field parent_class Gtk.ToggleButtonClass
---@field draw_indicator fun(check_button: Gtk.CheckButton, cr: cairo.Context): nil
Gtk.CheckButtonClass = {}

--- # class Gtk.CheckMenuItem
---
--- A `GtkCheckMenuItem` is a menu item that maintains the state of a boolean
--- value in addition to a `GtkMenuItem` usual role in activating application
--- code.
--- 
--- A check box indicating the state of the boolean value is displayed
--- at the left side of the `GtkMenuItem`.  Activating the `GtkMenuItem`
--- toggles the value.
--- 
--- # CSS nodes
--- 
--- ```plain
--- menuitem
--- ├── check.left
--- ╰── <child>
--- ```
--- 
--- GtkCheckMenuItem has a main CSS node with name menuitem, and a subnode
--- with name check, which gets the .left or .right style class.
---
--- ---
---
---@class Gtk.CheckMenuItem : Gtk.MenuItem, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field menu_item Gtk.MenuItem
---@field priv Gtk.CheckMenuItemPrivate
---@operator call: Gtk.CheckMenuItem
Gtk.CheckMenuItem = {}

--- # method Gtk.CheckMenuItem:get_active()
---
--- Returns whether the check menu item is active. See
--- gtk_check_menu_item_set_active ().
---
--- ---
---
---@param self Gtk.CheckMenuItem # a `GtkCheckMenuItem`
---@return (boolean|nil) # `true` if the menu item is checked.
function Gtk.CheckMenuItem:get_active() end

--- # method Gtk.CheckMenuItem:get_draw_as_radio()
---
--- Returns whether `check_menu_item` looks like a `GtkRadioMenuItem`
---
--- ---
---
---@param self Gtk.CheckMenuItem # a `GtkCheckMenuItem`
---@return (boolean|nil) # Whether `check_menu_item` looks like a `GtkRadioMenuItem`
function Gtk.CheckMenuItem:get_draw_as_radio() end

--- # method Gtk.CheckMenuItem:get_inconsistent()
---
--- Retrieves the value set by `gtk_check_menu_item_set_inconsistent()`.
---
--- ---
---
---@param self Gtk.CheckMenuItem # a `GtkCheckMenuItem`
---@return (boolean|nil) # `true` if inconsistent
function Gtk.CheckMenuItem:get_inconsistent() end

--- # method Gtk.CheckMenuItem:set_active()
---
--- Sets the active state of the menu item’s check box.
---
--- ---
---
---@param self Gtk.CheckMenuItem # a `GtkCheckMenuItem`.
---@param is_active (boolean|nil) # boolean value indicating whether the check box is active.
---@return nil
function Gtk.CheckMenuItem:set_active(is_active) end

--- # method Gtk.CheckMenuItem:set_draw_as_radio()
---
--- Sets whether `check_menu_item` is drawn like a `GtkRadioMenuItem`
---
--- ---
---
---@param self Gtk.CheckMenuItem # a `GtkCheckMenuItem`
---@param draw_as_radio (boolean|nil) # whether `check_menu_item` is drawn like a `GtkRadioMenuItem`
---@return nil
function Gtk.CheckMenuItem:set_draw_as_radio(draw_as_radio) end

--- # method Gtk.CheckMenuItem:set_inconsistent()
---
--- If the user has selected a range of elements (such as some text or
--- spreadsheet cells) that are affected by a boolean setting, and the
--- current values in that range are inconsistent, you may want to
--- display the check in an “in between” state. This function turns on
--- “in between” display.  Normally you would turn off the inconsistent
--- state again if the user explicitly selects a setting. This has to be
--- done manually, `gtk_check_menu_item_set_inconsistent()` only affects
--- visual appearance, it doesn’t affect the semantics of the widget.
---
--- ---
---
---@param self Gtk.CheckMenuItem # a `GtkCheckMenuItem`
---@param setting (boolean|nil) # `true` to display an “inconsistent” third state check
---@return nil
function Gtk.CheckMenuItem:set_inconsistent(setting) end

--- # method Gtk.CheckMenuItem:toggled()
---
--- Emits the `GtkCheckMenuItem`::toggled signal.
---
--- ---
---
---@param self Gtk.CheckMenuItem # a `GtkCheckMenuItem`.
---@return nil
function Gtk.CheckMenuItem:toggled() end

--- # function Gtk.CheckMenuItem.new()
---
--- Creates a new `GtkCheckMenuItem`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkCheckMenuItem`.
function Gtk.CheckMenuItem.new() end

--- # function Gtk.CheckMenuItem.new_with_label()
---
--- Creates a new `GtkCheckMenuItem` with a label.
---
--- ---
---
---@param label string # the string to use for the label.
---@return Gtk.Widget # a new `GtkCheckMenuItem`.
function Gtk.CheckMenuItem.new_with_label(label) end

--- # function Gtk.CheckMenuItem.new_with_mnemonic()
---
--- Creates a new `GtkCheckMenuItem` containing a label. The label
--- will be created using `gtk_label_new_with_mnemonic()`, so underscores
--- in `label` indicate the mnemonic for the menu item.
---
--- ---
---
---@param label string # The text of the button, with an underscore in front of the character
---@return Gtk.Widget # a new `GtkCheckMenuItem`
function Gtk.CheckMenuItem.new_with_mnemonic(label) end

--- # class Gtk.CheckMenuItemAccessible
---
---@class Gtk.CheckMenuItemAccessible : Gtk.MenuItemAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.Selection
---@field parent Gtk.MenuItemAccessible
---@field priv Gtk.CheckMenuItemAccessiblePrivate
Gtk.CheckMenuItemAccessible = {}

--- # record Gtk.CheckMenuItemAccessibleClass
---
---@class Gtk.CheckMenuItemAccessibleClass
---@field parent_class Gtk.MenuItemAccessibleClass
Gtk.CheckMenuItemAccessibleClass = {}

--- # record Gtk.CheckMenuItemAccessiblePrivate
---
---@class Gtk.CheckMenuItemAccessiblePrivate
Gtk.CheckMenuItemAccessiblePrivate = {}

--- # record Gtk.CheckMenuItemClass
---
---@class Gtk.CheckMenuItemClass
---@field parent_class Gtk.MenuItemClass # The parent class.
---@field toggled fun(check_menu_item: Gtk.CheckMenuItem): nil
---@field draw_indicator fun(check_menu_item: Gtk.CheckMenuItem, cr: cairo.Context): nil
Gtk.CheckMenuItemClass = {}

--- # record Gtk.CheckMenuItemPrivate
---
---@class Gtk.CheckMenuItemPrivate
Gtk.CheckMenuItemPrivate = {}

--- # class Gtk.Clipboard
---
--- The `GtkClipboard` object represents a clipboard of data shared
--- between different processes or between different widgets in
--- the same process. Each clipboard is identified by a name encoded as a
--- `GdkAtom`. (Conversion to and from strings can be done with
--- `gdk_atom_intern()` and `gdk_atom_name()`.) The default clipboard
--- corresponds to the “CLIPBOARD” atom; another commonly used clipboard
--- is the “PRIMARY” clipboard, which, in X, traditionally contains
--- the currently selected text.
--- 
--- To support having a number of different formats on the clipboard
--- at the same time, the clipboard mechanism allows providing
--- callbacks instead of the actual data.  When you set the contents
--- of the clipboard, you can either supply the data directly (via
--- functions like `gtk_clipboard_set_text()`), or you can supply a
--- callback to be called at a later time when the data is needed (via
--- `gtk_clipboard_set_with_data()` or `gtk_clipboard_set_with_owner()`.)
--- Providing a callback also avoids having to make copies of the data
--- when it is not needed.
--- 
--- `gtk_clipboard_set_with_data()` and `gtk_clipboard_set_with_owner()`
--- are quite similar; the choice between the two depends mostly on
--- which is more convenient in a particular situation.
--- The former is most useful when you want to have a blob of data
--- with callbacks to convert it into the various data types that you
--- advertise. When the `clear_func` you provided is called, you
--- simply free the data blob. The latter is more useful when the
--- contents of clipboard reflect the internal state of a `GObject`
--- (As an example, for the PRIMARY clipboard, when an entry widget
--- provides the clipboard’s contents the contents are simply the
--- text within the selected region.) If the contents change, the
--- entry widget can call `gtk_clipboard_set_with_owner()` to update
--- the timestamp for clipboard ownership, without having to worry
--- about `clear_func` being called.
--- 
--- Requesting the data from the clipboard is essentially
--- asynchronous. If the contents of the clipboard are provided within
--- the same process, then a direct function call will be made to
--- retrieve the data, but if they are provided by another process,
--- then the data needs to be retrieved from the other process, which
--- may take some time. To avoid blocking the user interface, the call
--- to request the selection, `gtk_clipboard_request_contents()` takes a
--- callback that will be called when the contents are received (or
--- when the request fails.) If you don’t want to deal with providing
--- a separate callback, you can also use `gtk_clipboard_wait_for_contents()`.
--- What this does is run the GLib main loop recursively waiting for
--- the contents. This can simplify the code flow, but you still have
--- to be aware that other callbacks in your program can be called
--- while this recursive mainloop is running.
--- 
--- Along with the functions to get the clipboard contents as an
--- arbitrary data chunk, there are also functions to retrieve
--- it as text, `gtk_clipboard_request_text()` and
--- `gtk_clipboard_wait_for_text()`. These functions take care of
--- determining which formats are advertised by the clipboard
--- provider, asking for the clipboard in the best available format
--- and converting the results into the UTF-8 encoding. (The standard
--- form for representing strings in GTK+.)
---
--- ---
---
---@class Gtk.Clipboard : GObject.Object
Gtk.Clipboard = {}

--- # method Gtk.Clipboard:clear()
---
--- Clears the contents of the clipboard. Generally this should only
--- be called between the time you call `gtk_clipboard_set_with_owner()`
--- or `gtk_clipboard_set_with_data()`,
--- and when the `clear_func` you supplied is called. Otherwise, the
--- clipboard may be owned by someone else.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@return nil
function Gtk.Clipboard:clear() end

--- # method Gtk.Clipboard:get_display()
---
--- Gets the `GdkDisplay` associated with `clipboard`
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@return Gdk.Display # the `GdkDisplay` associated with `clipboard`
function Gtk.Clipboard:get_display() end

--- # method Gtk.Clipboard:get_owner()
---
--- If the clipboard contents callbacks were set with
--- `gtk_clipboard_set_with_owner()`, and the `gtk_clipboard_set_with_data()` or
--- `gtk_clipboard_clear()` has not subsequently called, returns the owner set
--- by `gtk_clipboard_set_with_owner()`.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@return GObject.Object # the owner of the clipboard, if any; otherwise `nil`.
function Gtk.Clipboard:get_owner() end

--- # method Gtk.Clipboard:get_selection()
---
--- Gets the selection that this clipboard is for.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@return Gdk.Atom # the selection
function Gtk.Clipboard:get_selection() end

--- # method Gtk.Clipboard:request_contents()
---
--- Requests the contents of clipboard as the given target.
--- When the results of the result are later received the supplied callback
--- will be called.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@param target Gdk.Atom # an atom representing the form into which the clipboard owner should convert the selection.
---@param callback Gtk.ClipboardReceivedFunc # A function to call when the results are received (or the retrieval fails). If the retrieval fails the length field of `selection_data` will be negative.
---@param user_data? userdata # user data to pass to `callback`
---@return nil
function Gtk.Clipboard:request_contents(target, callback, user_data) end

--- # method Gtk.Clipboard:request_image()
---
--- Requests the contents of the clipboard as image. When the image is
--- later received, it will be converted to a `GdkPixbuf`, and
--- `callback` will be called.
--- 
--- The `pixbuf` parameter to `callback` will contain the resulting
--- `GdkPixbuf` if the request succeeded, or `nil` if it failed. This
--- could happen for various reasons, in particular if the clipboard
--- was empty or if the contents of the clipboard could not be
--- converted into an image.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@param callback Gtk.ClipboardImageReceivedFunc # a function to call when the image is received, or the retrieval fails. (It will always be called one way or the other.)
---@param user_data? userdata # user data to pass to `callback`.
---@return nil
function Gtk.Clipboard:request_image(callback, user_data) end

--- # method Gtk.Clipboard:request_rich_text()
---
--- Requests the contents of the clipboard as rich text. When the rich
--- text is later received, `callback` will be called.
--- 
--- The `text` parameter to `callback` will contain the resulting rich
--- text if the request succeeded, or `nil` if it failed. The `length`
--- parameter will contain `text`’s length. This function can fail for
--- various reasons, in particular if the clipboard was empty or if the
--- contents of the clipboard could not be converted into rich text form.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@param buffer Gtk.TextBuffer # a `GtkTextBuffer`
---@param callback Gtk.ClipboardRichTextReceivedFunc # a function to call when the text is received, or the retrieval fails. (It will always be called one way or the other.)
---@param user_data? userdata # user data to pass to `callback`.
---@return nil
function Gtk.Clipboard:request_rich_text(buffer, callback, user_data) end

--- # method Gtk.Clipboard:request_targets()
---
--- Requests the contents of the clipboard as list of supported targets.
--- When the list is later received, `callback` will be called.
--- 
--- The `targets` parameter to `callback` will contain the resulting targets if
--- the request succeeded, or `nil` if it failed.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@param callback Gtk.ClipboardTargetsReceivedFunc # a function to call when the targets are received, or the retrieval fails. (It will always be called one way or the other.)
---@param user_data? userdata # user data to pass to `callback`.
---@return nil
function Gtk.Clipboard:request_targets(callback, user_data) end

--- # method Gtk.Clipboard:request_text()
---
--- Requests the contents of the clipboard as text. When the text is
--- later received, it will be converted to UTF-8 if necessary, and
--- `callback` will be called.
--- 
--- The `text` parameter to `callback` will contain the resulting text if
--- the request succeeded, or `nil` if it failed. This could happen for
--- various reasons, in particular if the clipboard was empty or if the
--- contents of the clipboard could not be converted into text form.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@param callback Gtk.ClipboardTextReceivedFunc # a function to call when the text is received, or the retrieval fails. (It will always be called one way or the other.)
---@param user_data? userdata # user data to pass to `callback`.
---@return nil
function Gtk.Clipboard:request_text(callback, user_data) end

--- # method Gtk.Clipboard:request_uris()
---
--- Requests the contents of the clipboard as URIs. When the URIs are
--- later received `callback` will be called.
--- 
--- The `uris` parameter to `callback` will contain the resulting array of
--- URIs if the request succeeded, or `nil` if it failed. This could happen
--- for various reasons, in particular if the clipboard was empty or if the
--- contents of the clipboard could not be converted into URI form.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@param callback Gtk.ClipboardURIReceivedFunc # a function to call when the URIs are received, or the retrieval fails. (It will always be called one way or the other.)
---@param user_data? userdata # user data to pass to `callback`.
---@return nil
function Gtk.Clipboard:request_uris(callback, user_data) end

--- # method Gtk.Clipboard:set_can_store()
---
--- Hints that the clipboard data should be stored somewhere when the
--- application exits or when gtk_clipboard_store () is called.
--- 
--- This value is reset when the clipboard owner changes.
--- Where the clipboard data is stored is platform dependent,
--- see gdk_display_store_clipboard () for more information.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@param targets? unknown[] # array containing information about which forms should be stored or `nil` to indicate that all forms should be stored.
---@param n_targets integer # number of elements in `targets`
---@return nil
function Gtk.Clipboard:set_can_store(targets, n_targets) end

--- # method Gtk.Clipboard:set_image()
---
--- Sets the contents of the clipboard to the given `GdkPixbuf`.
--- GTK+ will take responsibility for responding for requests
--- for the image, and for converting the image into the
--- requested format.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard` object
---@param pixbuf GdkPixbuf.Pixbuf # a `GdkPixbuf`
---@return nil
function Gtk.Clipboard:set_image(pixbuf) end

--- # method Gtk.Clipboard:set_text()
---
--- Sets the contents of the clipboard to the given UTF-8 string. GTK+ will
--- make a copy of the text and take responsibility for responding
--- for requests for the text, and for converting the text into
--- the requested format.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard` object
---@param text string # a UTF-8 string.
---@param len integer # length of `text`, in bytes, or -1, in which case the length will be determined with `strlen()`.
---@return nil
function Gtk.Clipboard:set_text(text, len) end

--- # method Gtk.Clipboard:store()
---
--- Stores the current clipboard data somewhere so that it will stay
--- around after the application has quit.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@return nil
function Gtk.Clipboard:store() end

--- # method Gtk.Clipboard:wait_for_contents()
---
--- Requests the contents of the clipboard using the given target.
--- This function waits for the data to be received using the main
--- loop, so events, timeouts, etc, may be dispatched during the wait.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@param target Gdk.Atom # an atom representing the form into which the clipboard owner should convert the selection.
---@return Gtk.SelectionData # a newly-allocated `GtkSelectionData` object or `nil` if retrieving the given target failed. If non-`nil`, this value must be freed with `gtk_selection_data_free()` when you are finished with it.
function Gtk.Clipboard:wait_for_contents(target) end

--- # method Gtk.Clipboard:wait_for_image()
---
--- Requests the contents of the clipboard as image and converts
--- the result to a `GdkPixbuf`. This function waits for
--- the data to be received using the main loop, so events,
--- timeouts, etc, may be dispatched during the wait.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@return GdkPixbuf.Pixbuf # a newly-allocated `GdkPixbuf` object which must be disposed with `g_object_unref()`, or `nil` if retrieving the selection data failed. (This could happen for various reasons, in particular if the clipboard was empty or if the contents of the clipboard could not be converted into an image.)
function Gtk.Clipboard:wait_for_image() end

--- # method Gtk.Clipboard:wait_for_rich_text()
---
--- Requests the contents of the clipboard as rich text.  This function
--- waits for the data to be received using the main loop, so events,
--- timeouts, etc, may be dispatched during the wait.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@param buffer Gtk.TextBuffer # a `GtkTextBuffer`
---@param format Gdk.Atom # return location for the format of the returned data
---@param length integer # return location for the length of the returned data
---@return unknown[] # a newly-allocated binary block of data which must be freed with `g_free()`, or `nil` if retrieving the selection data failed. (This could happen for various reasons, in particular if the clipboard was empty or if the contents of the clipboard could not be converted into text form.)
function Gtk.Clipboard:wait_for_rich_text(buffer, format, length) end

--- # method Gtk.Clipboard:wait_for_targets()
---
--- Returns a list of targets that are present on the clipboard, or `nil`
--- if there aren’t any targets available. The returned list must be
--- freed with `g_free()`.
--- This function waits for the data to be received using the main
--- loop, so events, timeouts, etc, may be dispatched during the wait.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@param targets unknown[] # location to store an array of targets. The result stored here must be freed with `g_free()`.
---@param n_targets integer # location to store number of items in `targets`.
---@return (boolean|nil) # `true` if any targets are present on the clipboard, otherwise `false`.
function Gtk.Clipboard:wait_for_targets(targets, n_targets) end

--- # method Gtk.Clipboard:wait_for_text()
---
--- Requests the contents of the clipboard as text and converts
--- the result to UTF-8 if necessary. This function waits for
--- the data to be received using the main loop, so events,
--- timeouts, etc, may be dispatched during the wait.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@return string # a newly-allocated UTF-8 string which must be freed with `g_free()`, or `nil` if retrieving the selection data failed. (This could happen for various reasons, in particular if the clipboard was empty or if the contents of the clipboard could not be converted into text form.)
function Gtk.Clipboard:wait_for_text() end

--- # method Gtk.Clipboard:wait_for_uris()
---
--- Requests the contents of the clipboard as URIs. This function waits
--- for the data to be received using the main loop, so events,
--- timeouts, etc, may be dispatched during the wait.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@return unknown[] # a newly-allocated `nil`-terminated array of strings which must be freed with `g_strfreev()`, or `nil` if retrieving the selection data failed. (This could happen for various reasons, in particular if the clipboard was empty or if the contents of the clipboard could not be converted into URI form.)
function Gtk.Clipboard:wait_for_uris() end

--- # method Gtk.Clipboard:wait_is_image_available()
---
--- Test to see if there is an image available to be pasted
--- This is done by requesting the TARGETS atom and checking
--- if it contains any of the supported image targets. This function
--- waits for the data to be received using the main loop, so events,
--- timeouts, etc, may be dispatched during the wait.
--- 
--- This function is a little faster than calling
--- `gtk_clipboard_wait_for_image()` since it doesn’t need to retrieve
--- the actual image data.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@return (boolean|nil) # `true` is there is an image available, `false` otherwise.
function Gtk.Clipboard:wait_is_image_available() end

--- # method Gtk.Clipboard:wait_is_rich_text_available()
---
--- Test to see if there is rich text available to be pasted
--- This is done by requesting the TARGETS atom and checking
--- if it contains any of the supported rich text targets. This function
--- waits for the data to be received using the main loop, so events,
--- timeouts, etc, may be dispatched during the wait.
--- 
--- This function is a little faster than calling
--- `gtk_clipboard_wait_for_rich_text()` since it doesn’t need to retrieve
--- the actual text.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@param buffer Gtk.TextBuffer # a `GtkTextBuffer`
---@return (boolean|nil) # `true` is there is rich text available, `false` otherwise.
function Gtk.Clipboard:wait_is_rich_text_available(buffer) end

--- # method Gtk.Clipboard:wait_is_target_available()
---
--- Checks if a clipboard supports pasting data of a given type. This
--- function can be used to determine if a “Paste” menu item should be
--- insensitive or not.
--- 
--- If you want to see if there’s text available on the clipboard, use
--- gtk_clipboard_wait_is_text_available () instead.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@param target Gdk.Atom # A `GdkAtom` indicating which target to look for.
---@return (boolean|nil) # `true` if the target is available, `false` otherwise.
function Gtk.Clipboard:wait_is_target_available(target) end

--- # method Gtk.Clipboard:wait_is_text_available()
---
--- Test to see if there is text available to be pasted
--- This is done by requesting the TARGETS atom and checking
--- if it contains any of the supported text targets. This function
--- waits for the data to be received using the main loop, so events,
--- timeouts, etc, may be dispatched during the wait.
--- 
--- This function is a little faster than calling
--- `gtk_clipboard_wait_for_text()` since it doesn’t need to retrieve
--- the actual text.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@return (boolean|nil) # `true` is there is text available, `false` otherwise.
function Gtk.Clipboard:wait_is_text_available() end

--- # method Gtk.Clipboard:wait_is_uris_available()
---
--- Test to see if there is a list of URIs available to be pasted
--- This is done by requesting the TARGETS atom and checking
--- if it contains the URI targets. This function
--- waits for the data to be received using the main loop, so events,
--- timeouts, etc, may be dispatched during the wait.
--- 
--- This function is a little faster than calling
--- `gtk_clipboard_wait_for_uris()` since it doesn’t need to retrieve
--- the actual URI data.
---
--- ---
---
---@param self Gtk.Clipboard # a `GtkClipboard`
---@return (boolean|nil) # `true` is there is an URI list available, `false` otherwise.
function Gtk.Clipboard:wait_is_uris_available() end

--- # function Gtk.Clipboard.get()
---
--- Returns the clipboard object for the given selection.
--- See `gtk_clipboard_get_for_display()` for complete details.
---
--- ---
---
---@param selection Gdk.Atom # a `GdkAtom` which identifies the clipboard to use
---@return Gtk.Clipboard # the appropriate clipboard object. If no clipboard already exists, a new one will be created. Once a clipboard object has been created, it is persistent and, since it is owned by GTK+, must not be freed or unreffed.
function Gtk.Clipboard.get(selection) end

--- # function Gtk.Clipboard.get_default()
---
--- Returns the default clipboard object for use with cut/copy/paste menu items
--- and keyboard shortcuts.
---
--- ---
---
---@param display Gdk.Display # the `GdkDisplay` for which the clipboard is to be retrieved.
---@return Gtk.Clipboard # the default clipboard object.
function Gtk.Clipboard.get_default(display) end

--- # function Gtk.Clipboard.get_for_display()
---
--- Returns the clipboard object for the given selection.
--- Cut/copy/paste menu items and keyboard shortcuts should use
--- the default clipboard, returned by passing %GDK_SELECTION_CLIPBOARD for `selection`.
--- (%GDK_NONE is supported as a synonym for GDK_SELECTION_CLIPBOARD
--- for backwards compatibility reasons.)
--- The currently-selected object or text should be provided on the clipboard
--- identified by `GDK_SELECTION_PRIMARY`. Cut/copy/paste menu items
--- conceptually copy the contents of the `GDK_SELECTION_PRIMARY` clipboard
--- to the default clipboard, i.e. they copy the selection to what the
--- user sees as the clipboard.
--- 
--- (Passing `GDK_NONE` is the same as using `gdk_atom_intern
--- ("CLIPBOARD", FALSE)`.
--- 
--- See the
--- [FreeDesktop Clipboard Specification](http://www.freedesktop.org/Standards/clipboards-spec)
--- for a detailed discussion of the “CLIPBOARD” vs. “PRIMARY”
--- selections under the X window system. On Win32 the
--- `GDK_SELECTION_PRIMARY` clipboard is essentially ignored.)
--- 
--- It’s possible to have arbitrary named clipboards; if you do invent
--- new clipboards, you should prefix the selection name with an
--- underscore (because the ICCCM requires that nonstandard atoms are
--- underscore-prefixed), and namespace it as well. For example,
--- if your application called “Foo” has a special-purpose
--- clipboard, you might call it “_FOO_SPECIAL_CLIPBOARD”.
---
--- ---
---
---@param display Gdk.Display # the `GdkDisplay` for which the clipboard is to be retrieved or created.
---@param selection Gdk.Atom # a `GdkAtom` which identifies the clipboard to use.
---@return Gtk.Clipboard # the appropriate clipboard object. If no clipboard already exists, a new one will be created. Once a clipboard object has been created, it is persistent and, since it is owned by GTK+, must not be freed or unrefd.
function Gtk.Clipboard.get_for_display(display, selection) end

---@alias Gtk.ClipboardClearFunc fun(clipboard: Gtk.Clipboard, user_data_or_owner: userdata): nil

---@alias Gtk.ClipboardGetFunc fun(clipboard: Gtk.Clipboard, selection_data: Gtk.SelectionData, info: integer, user_data_or_owner: userdata): nil

---@alias Gtk.ClipboardImageReceivedFunc fun(clipboard: Gtk.Clipboard, pixbuf: GdkPixbuf.Pixbuf, data: userdata): nil

---@alias Gtk.ClipboardReceivedFunc fun(clipboard: Gtk.Clipboard, selection_data: Gtk.SelectionData, data: userdata): nil

---@alias Gtk.ClipboardRichTextReceivedFunc fun(clipboard: Gtk.Clipboard, format: Gdk.Atom, text: string, length: integer, data: userdata): nil

---@alias Gtk.ClipboardTargetsReceivedFunc fun(clipboard: Gtk.Clipboard, atoms: unknown[], n_atoms: integer, data: userdata): nil

---@alias Gtk.ClipboardTextReceivedFunc fun(clipboard: Gtk.Clipboard, text: string, data: userdata): nil

---@alias Gtk.ClipboardURIReceivedFunc fun(clipboard: Gtk.Clipboard, uris: unknown[], data: userdata): nil

--- # class Gtk.ColorButton
---
--- The `GtkColorButton` is a button which displays the currently selected
--- color and allows to open a color selection dialog to change the color.
--- It is suitable widget for selecting a color in a preference dialog.
--- 
--- # CSS nodes
--- 
--- GtkColorButton has a single CSS node with name button. To differentiate
--- it from a plain `GtkButton`, it gets the .color style class.
---
--- ---
---
---@class Gtk.ColorButton : Gtk.Button, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable, Gtk.ColorChooser
---@field button Gtk.Button
---@field priv Gtk.ColorButtonPrivate
---@operator call: Gtk.ColorButton
Gtk.ColorButton = {}

--- # method Gtk.ColorButton:get_alpha()
---
--- Returns the current alpha value.
---
--- ---
---
---@param self Gtk.ColorButton # a `GtkColorButton`
---@return integer # an integer between 0 and 65535
function Gtk.ColorButton:get_alpha() end

--- # method Gtk.ColorButton:get_color()
---
--- Sets `color` to be the current color in the `GtkColorButton` widget.
---
--- ---
---
---@param self Gtk.ColorButton # a `GtkColorButton`
---@param color Gdk.Color # a `GdkColor` to fill in with the current color
---@return nil
function Gtk.ColorButton:get_color(color) end

--- # method Gtk.ColorButton:get_title()
---
--- Gets the title of the color selection dialog.
---
--- ---
---
---@param self Gtk.ColorButton # a `GtkColorButton`
---@return string # An internal string, do not free the return value
function Gtk.ColorButton:get_title() end

--- # method Gtk.ColorButton:get_use_alpha()
---
--- Does the color selection dialog use the alpha channel ?
---
--- ---
---
---@param self Gtk.ColorButton # a `GtkColorButton`
---@return (boolean|nil) # `true` if the color sample uses alpha channel, `false` if not
function Gtk.ColorButton:get_use_alpha() end

--- # method Gtk.ColorButton:set_alpha()
---
--- Sets the current opacity to be `alpha`.
---
--- ---
---
---@param self Gtk.ColorButton # a `GtkColorButton`
---@param alpha integer # an integer between 0 and 65535
---@return nil
function Gtk.ColorButton:set_alpha(alpha) end

--- # method Gtk.ColorButton:set_color()
---
--- Sets the current color to be `color`.
---
--- ---
---
---@param self Gtk.ColorButton # a `GtkColorButton`
---@param color Gdk.Color # A `GdkColor` to set the current color with
---@return nil
function Gtk.ColorButton:set_color(color) end

--- # method Gtk.ColorButton:set_title()
---
--- Sets the title for the color selection dialog.
---
--- ---
---
---@param self Gtk.ColorButton # a `GtkColorButton`
---@param title string # String containing new window title
---@return nil
function Gtk.ColorButton:set_title(title) end

--- # method Gtk.ColorButton:set_use_alpha()
---
--- Sets whether or not the color button should use the alpha channel.
---
--- ---
---
---@param self Gtk.ColorButton # a `GtkColorButton`
---@param use_alpha (boolean|nil) # `true` if color button should use alpha channel, `false` if not
---@return nil
function Gtk.ColorButton:set_use_alpha(use_alpha) end

--- # function Gtk.ColorButton.new()
---
--- Creates a new color button.
--- 
--- This returns a widget in the form of a small button containing
--- a swatch representing the current selected color. When the button
--- is clicked, a color-selection dialog will open, allowing the user
--- to select a color. The swatch will be updated to reflect the new
--- color when the user finishes.
---
--- ---
---
---@return Gtk.Widget # a new color button
function Gtk.ColorButton.new() end

--- # function Gtk.ColorButton.new_with_color()
---
--- Creates a new color button.
---
--- ---
---
---@param color Gdk.Color # A `GdkColor` to set the current color with
---@return Gtk.Widget # a new color button
function Gtk.ColorButton.new_with_color(color) end

--- # function Gtk.ColorButton.new_with_rgba()
---
--- Creates a new color button.
---
--- ---
---
---@param rgba Gdk.RGBA # A `GdkRGBA` to set the current color with
---@return Gtk.Widget # a new color button
function Gtk.ColorButton.new_with_rgba(rgba) end

--- # record Gtk.ColorButtonClass
---
---@class Gtk.ColorButtonClass
---@field parent_class Gtk.ButtonClass
---@field color_set fun(cp: Gtk.ColorButton): nil
Gtk.ColorButtonClass = {}

--- # record Gtk.ColorButtonPrivate
---
---@class Gtk.ColorButtonPrivate
Gtk.ColorButtonPrivate = {}

--- # interface Gtk.ColorChooser
---
--- `GtkColorChooser` is an interface that is implemented by widgets
--- for choosing colors. Depending on the situation, colors may be
--- allowed to have alpha (translucency).
--- 
--- In GTK+, the main widgets that implement this interface are
--- `GtkColorChooserWidget`, `GtkColorChooserDialog` and `GtkColorButton`.
---
--- ---
---
---@class Gtk.ColorChooser
Gtk.ColorChooser = {}

--- # method Gtk.ColorChooser:add_palette()
---
--- Adds a palette to the color chooser. If `orientation` is horizontal,
--- the colors are grouped in rows, with `colors_per_line` colors
--- in each row. If `horizontal` is `false`, the colors are grouped
--- in columns instead.
--- 
--- The default color palette of `GtkColorChooserWidget` has
--- 27 colors, organized in columns of 3 colors. The default gray
--- palette has 9 grays in a single row.
--- 
--- The layout of the color chooser widget works best when the
--- palettes have 9-10 columns.
--- 
--- Calling this function for the first time has the
--- side effect of removing the default color and gray palettes
--- from the color chooser.
--- 
--- If `colors` is `nil`, removes all previously added palettes.
---
--- ---
---
---@param self Gtk.ColorChooser # a `GtkColorChooser`
---@param orientation Gtk.Orientation # %GTK_ORIENTATION_HORIZONTAL if the palette should be displayed in rows, %GTK_ORIENTATION_VERTICAL for columns
---@param colors_per_line integer # the number of colors to show in each row/column
---@param n_colors integer # the total number of elements in `colors`
---@param colors? unknown[] # the colors of the palette, or `nil`
---@return nil
function Gtk.ColorChooser:add_palette(orientation, colors_per_line, n_colors, colors) end

--- # method Gtk.ColorChooser:get_rgba()
---
--- Gets the currently-selected color.
---
--- ---
---
---@param self Gtk.ColorChooser # a `GtkColorChooser`
---@param color Gdk.RGBA # a `GdkRGBA` to fill in with the current color
---@return nil
function Gtk.ColorChooser:get_rgba(color) end

--- # method Gtk.ColorChooser:get_use_alpha()
---
--- Returns whether the color chooser shows the alpha channel.
---
--- ---
---
---@param self Gtk.ColorChooser # a `GtkColorChooser`
---@return (boolean|nil) # `true` if the color chooser uses the alpha channel, `false` if not
function Gtk.ColorChooser:get_use_alpha() end

--- # method Gtk.ColorChooser:set_rgba()
---
--- Sets the color.
---
--- ---
---
---@param self Gtk.ColorChooser # a `GtkColorChooser`
---@param color Gdk.RGBA # the new color
---@return nil
function Gtk.ColorChooser:set_rgba(color) end

--- # method Gtk.ColorChooser:set_use_alpha()
---
--- Sets whether or not the color chooser should use the alpha channel.
---
--- ---
---
---@param self Gtk.ColorChooser # a `GtkColorChooser`
---@param use_alpha (boolean|nil) # `true` if color chooser should use alpha channel, `false` if not
---@return nil
function Gtk.ColorChooser:set_use_alpha(use_alpha) end

--- # class Gtk.ColorChooserDialog
---
--- The `GtkColorChooserDialog` widget is a dialog for choosing
--- a color. It implements the `GtkColorChooser` interface.
---
--- ---
---
---@class Gtk.ColorChooserDialog : Gtk.Dialog, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.ColorChooser
---@field parent_instance Gtk.Dialog
---@field priv Gtk.ColorChooserDialogPrivate
---@operator call: Gtk.ColorChooserDialog
Gtk.ColorChooserDialog = {}

--- # function Gtk.ColorChooserDialog.new()
---
--- Creates a new `GtkColorChooserDialog`.
---
--- ---
---
---@param title? string # Title of the dialog, or `nil`
---@param parent? Gtk.Window # Transient parent of the dialog, or `nil`
---@return Gtk.Widget # a new `GtkColorChooserDialog`
function Gtk.ColorChooserDialog.new(title, parent) end

--- # record Gtk.ColorChooserDialogClass
---
---@class Gtk.ColorChooserDialogClass
---@field parent_class Gtk.DialogClass
Gtk.ColorChooserDialogClass = {}

--- # record Gtk.ColorChooserDialogPrivate
---
---@class Gtk.ColorChooserDialogPrivate
Gtk.ColorChooserDialogPrivate = {}

--- # record Gtk.ColorChooserInterface
---
---@class Gtk.ColorChooserInterface
---@field base_interface GObject.TypeInterface
---@field get_rgba fun(chooser: Gtk.ColorChooser, color: Gdk.RGBA): nil
---@field set_rgba fun(chooser: Gtk.ColorChooser, color: Gdk.RGBA): nil
---@field add_palette fun(chooser: Gtk.ColorChooser, orientation: Gtk.Orientation, colors_per_line: integer, n_colors: integer, colors: unknown[]): nil
---@field color_activated fun(chooser: Gtk.ColorChooser, color: Gdk.RGBA): nil
---@field padding unknown[]
Gtk.ColorChooserInterface = {}

--- # class Gtk.ColorChooserWidget
---
--- The `GtkColorChooserWidget` widget lets the user select a
--- color. By default, the chooser presents a predefined palette
--- of colors, plus a small number of settable custom colors.
--- It is also possible to select a different color with the
--- single-color editor. To enter the single-color editing mode,
--- use the context menu of any color of the palette, or use the
--- '+' button to add a new custom color.
--- 
--- The chooser automatically remembers the last selection, as well
--- as custom colors.
--- 
--- To change the initially selected color, use `gtk_color_chooser_set_rgba()`.
--- To get the selected color use `gtk_color_chooser_get_rgba()`.
--- 
--- The `GtkColorChooserWidget` is used in the `GtkColorChooserDialog`
--- to provide a dialog for selecting colors.
--- 
--- # CSS names
--- 
--- GtkColorChooserWidget has a single CSS node with name colorchooser.
---
--- ---
---
---@class Gtk.ColorChooserWidget : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.ColorChooser, Gtk.Orientable
---@field parent_instance Gtk.Box
---@field priv Gtk.ColorChooserWidgetPrivate
---@operator call: Gtk.ColorChooserWidget
Gtk.ColorChooserWidget = {}

--- # function Gtk.ColorChooserWidget.new()
---
--- Creates a new `GtkColorChooserWidget`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkColorChooserWidget`
function Gtk.ColorChooserWidget.new() end

--- # record Gtk.ColorChooserWidgetClass
---
---@class Gtk.ColorChooserWidgetClass
---@field parent_class Gtk.BoxClass # The parent class.
Gtk.ColorChooserWidgetClass = {}

--- # record Gtk.ColorChooserWidgetPrivate
---
---@class Gtk.ColorChooserWidgetPrivate
Gtk.ColorChooserWidgetPrivate = {}

--- # class Gtk.ColorSelection
---
---@class Gtk.ColorSelection : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field parent_instance Gtk.Box
---@field private_data Gtk.ColorSelectionPrivate
---@operator call: Gtk.ColorSelection
Gtk.ColorSelection = {}

--- # method Gtk.ColorSelection:get_current_alpha()
---
--- Returns the current alpha value.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@return integer # an integer between 0 and 65535
function Gtk.ColorSelection:get_current_alpha() end

--- # method Gtk.ColorSelection:get_current_color()
---
--- Sets `color` to be the current color in the GtkColorSelection widget.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@param color Gdk.Color # a `GdkColor` to fill in with the current color
---@return nil
function Gtk.ColorSelection:get_current_color(color) end

--- # method Gtk.ColorSelection:get_current_rgba()
---
--- Sets `rgba` to be the current color in the GtkColorSelection widget.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@param rgba Gdk.RGBA # a `GdkRGBA` to fill in with the current color
---@return nil
function Gtk.ColorSelection:get_current_rgba(rgba) end

--- # method Gtk.ColorSelection:get_has_opacity_control()
---
--- Determines whether the colorsel has an opacity control.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@return (boolean|nil) # `true` if the `colorsel` has an opacity control, `false` if it does't
function Gtk.ColorSelection:get_has_opacity_control() end

--- # method Gtk.ColorSelection:get_has_palette()
---
--- Determines whether the color selector has a color palette.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@return (boolean|nil) # `true` if the selector has a palette, `false` if it hasn't
function Gtk.ColorSelection:get_has_palette() end

--- # method Gtk.ColorSelection:get_previous_alpha()
---
--- Returns the previous alpha value.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@return integer # an integer between 0 and 65535
function Gtk.ColorSelection:get_previous_alpha() end

--- # method Gtk.ColorSelection:get_previous_color()
---
--- Fills `color` in with the original color value.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@param color Gdk.Color # a `GdkColor` to fill in with the original color value
---@return nil
function Gtk.ColorSelection:get_previous_color(color) end

--- # method Gtk.ColorSelection:get_previous_rgba()
---
--- Fills `rgba` in with the original color value.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@param rgba Gdk.RGBA # a `GdkRGBA` to fill in with the original color value
---@return nil
function Gtk.ColorSelection:get_previous_rgba(rgba) end

--- # method Gtk.ColorSelection:is_adjusting()
---
--- Gets the current state of the `colorsel`.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@return (boolean|nil) # `true` if the user is currently dragging a color around, and `false` if the selection has stopped
function Gtk.ColorSelection:is_adjusting() end

--- # method Gtk.ColorSelection:set_current_alpha()
---
--- Sets the current opacity to be `alpha`.
--- 
--- The first time this is called, it will also set
--- the original opacity to be `alpha` too.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@param alpha integer # an integer between 0 and 65535
---@return nil
function Gtk.ColorSelection:set_current_alpha(alpha) end

--- # method Gtk.ColorSelection:set_current_color()
---
--- Sets the current color to be `color`.
--- 
--- The first time this is called, it will also set
--- the original color to be `color` too.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@param color Gdk.Color # a `GdkColor` to set the current color with
---@return nil
function Gtk.ColorSelection:set_current_color(color) end

--- # method Gtk.ColorSelection:set_current_rgba()
---
--- Sets the current color to be `rgba`.
--- 
--- The first time this is called, it will also set
--- the original color to be `rgba` too.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@param rgba Gdk.RGBA # A `GdkRGBA` to set the current color with
---@return nil
function Gtk.ColorSelection:set_current_rgba(rgba) end

--- # method Gtk.ColorSelection:set_has_opacity_control()
---
--- Sets the `colorsel` to use or not use opacity.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@param has_opacity (boolean|nil) # `true` if `colorsel` can set the opacity, `false` otherwise
---@return nil
function Gtk.ColorSelection:set_has_opacity_control(has_opacity) end

--- # method Gtk.ColorSelection:set_has_palette()
---
--- Shows and hides the palette based upon the value of `has_palette`.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@param has_palette (boolean|nil) # `true` if palette is to be visible, `false` otherwise
---@return nil
function Gtk.ColorSelection:set_has_palette(has_palette) end

--- # method Gtk.ColorSelection:set_previous_alpha()
---
--- Sets the “previous” alpha to be `alpha`.
--- 
--- This function should be called with some hesitations,
--- as it might seem confusing to have that alpha change.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@param alpha integer # an integer between 0 and 65535
---@return nil
function Gtk.ColorSelection:set_previous_alpha(alpha) end

--- # method Gtk.ColorSelection:set_previous_color()
---
--- Sets the “previous” color to be `color`.
--- 
--- This function should be called with some hesitations,
--- as it might seem confusing to have that color change.
--- Calling `gtk_color_selection_set_current_color()` will also
--- set this color the first time it is called.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@param color Gdk.Color # a `GdkColor` to set the previous color with
---@return nil
function Gtk.ColorSelection:set_previous_color(color) end

--- # method Gtk.ColorSelection:set_previous_rgba()
---
--- Sets the “previous” color to be `rgba`.
--- 
--- This function should be called with some hesitations,
--- as it might seem confusing to have that color change.
--- Calling `gtk_color_selection_set_current_rgba()` will also
--- set this color the first time it is called.
---
--- ---
---
---@param self Gtk.ColorSelection # a `GtkColorSelection`
---@param rgba Gdk.RGBA # a `GdkRGBA` to set the previous color with
---@return nil
function Gtk.ColorSelection:set_previous_rgba(rgba) end

--- # function Gtk.ColorSelection.palette_from_string()
---
--- Parses a color palette string; the string is a colon-separated
--- list of color names readable by `gdk_color_parse()`.
---
--- ---
---
---@param str string # a string encoding a color palette
---@param colors unknown[] # return location for allocated array of `GdkColor`
---@param n_colors integer # return location for length of array
---@return (boolean|nil) # `true` if a palette was successfully parsed
function Gtk.ColorSelection.palette_from_string(str, colors, n_colors) end

--- # function Gtk.ColorSelection.palette_to_string()
---
--- Encodes a palette as a string, useful for persistent storage.
---
--- ---
---
---@param colors unknown[] # an array of colors
---@param n_colors integer # length of the array
---@return string # allocated string encoding the palette
function Gtk.ColorSelection.palette_to_string(colors, n_colors) end

--- # function Gtk.ColorSelection.new()
---
--- Creates a new GtkColorSelection.
---
--- ---
---
---@return Gtk.Widget # a new `GtkColorSelection`
function Gtk.ColorSelection.new() end

---@alias Gtk.ColorSelectionChangePaletteFunc fun(colors: unknown[], n_colors: integer): nil

---@alias Gtk.ColorSelectionChangePaletteWithScreenFunc fun(screen: Gdk.Screen, colors: unknown[], n_colors: integer): nil

--- # record Gtk.ColorSelectionClass
---
---@class Gtk.ColorSelectionClass
---@field parent_class Gtk.BoxClass # The parent class.
---@field color_changed fun(color_selection: Gtk.ColorSelection): nil
Gtk.ColorSelectionClass = {}

--- # class Gtk.ColorSelectionDialog
---
---@class Gtk.ColorSelectionDialog : Gtk.Dialog, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent_instance Gtk.Dialog
---@field priv Gtk.ColorSelectionDialogPrivate
---@operator call: Gtk.ColorSelectionDialog
Gtk.ColorSelectionDialog = {}

--- # method Gtk.ColorSelectionDialog:get_color_selection()
---
--- Retrieves the `GtkColorSelection` widget embedded in the dialog.
---
--- ---
---
---@param self Gtk.ColorSelectionDialog # a `GtkColorSelectionDialog`
---@return Gtk.Widget # the embedded `GtkColorSelection`
function Gtk.ColorSelectionDialog:get_color_selection() end

--- # function Gtk.ColorSelectionDialog.new()
---
--- Creates a new `GtkColorSelectionDialog`.
---
--- ---
---
---@param title string # a string containing the title text for the dialog.
---@return Gtk.Widget # a `GtkColorSelectionDialog`.
function Gtk.ColorSelectionDialog.new(title) end

--- # record Gtk.ColorSelectionDialogClass
---
---@class Gtk.ColorSelectionDialogClass
---@field parent_class Gtk.DialogClass
Gtk.ColorSelectionDialogClass = {}

--- # record Gtk.ColorSelectionDialogPrivate
---
---@class Gtk.ColorSelectionDialogPrivate
Gtk.ColorSelectionDialogPrivate = {}

--- # record Gtk.ColorSelectionPrivate
---
---@class Gtk.ColorSelectionPrivate
Gtk.ColorSelectionPrivate = {}

--- # class Gtk.ComboBox
---
--- A GtkComboBox is a widget that allows the user to choose from a list of
--- valid choices. The GtkComboBox displays the selected choice. When
--- activated, the GtkComboBox displays a popup which allows the user to
--- make a new choice. The style in which the selected value is displayed,
--- and the style of the popup is determined by the current theme. It may
--- be similar to a Windows-style combo box.
--- 
--- The GtkComboBox uses the model-view pattern; the list of valid choices
--- is specified in the form of a tree model, and the display of the choices
--- can be adapted to the data in the model by using cell renderers, as you
--- would in a tree view. This is possible since GtkComboBox implements the
--- `GtkCellLayout` interface. The tree model holding the valid choices is
--- not restricted to a flat list, it can be a real tree, and the popup will
--- reflect the tree structure.
--- 
--- To allow the user to enter values not in the model, the “has-entry”
--- property allows the GtkComboBox to contain a `GtkEntry`. This entry
--- can be accessed by calling `gtk_bin_get_child()` on the combo box.
--- 
--- For a simple list of textual choices, the model-view API of GtkComboBox
--- can be a bit overwhelming. In this case, `GtkComboBoxText` offers a
--- simple alternative. Both GtkComboBox and `GtkComboBoxText` can contain
--- an entry.
--- 
--- # CSS nodes
--- 
--- ```plain
--- combobox
--- ├── box.linked
--- │   ╰── button.combo
--- │       ╰── box
--- │           ├── cellview
--- │           ╰── arrow
--- ╰── window.popup
--- ```
--- 
--- A normal combobox contains a box with the .linked class, a button
--- with the .combo class and inside those buttons, there are a cellview and
--- an arrow.
--- 
--- ```plain
--- combobox
--- ├── box.linked
--- │   ├── entry.combo
--- │   ╰── button.combo
--- │       ╰── box
--- │           ╰── arrow
--- ╰── window.popup
--- ```
--- 
--- A GtkComboBox with an entry has a single CSS node with name combobox. It
--- contains a box with the .linked class. That box contains an entry and a
--- button, both with the .combo class added.
--- The button also contains another node with name arrow.
---
--- ---
---
---@class Gtk.ComboBox : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout
---@field parent_instance Gtk.Bin
---@field priv Gtk.ComboBoxPrivate
---@operator call: Gtk.ComboBox
Gtk.ComboBox = {}

--- # method Gtk.ComboBox:get_active()
---
--- Returns the index of the currently active item, or -1 if there’s no
--- active item. If the model is a non-flat treemodel, and the active item
--- is not an immediate child of the root of the tree, this function returns
--- `gtk_tree_path_get_indices (path)[0]`, where
--- `path` is the `GtkTreePath` of the active item.
---
--- ---
---
---@param self Gtk.ComboBox # A `GtkComboBox`
---@return integer # An integer which is the index of the currently active item, or -1 if there’s no active item.
function Gtk.ComboBox:get_active() end

--- # method Gtk.ComboBox:get_active_id()
---
--- Returns the ID of the active row of `combo_box`.  This value is taken
--- from the active row and the column specified by the `GtkComboBox`:id-column
--- property of `combo_box` (see `gtk_combo_box_set_id_column()`).
--- 
--- The returned value is an interned string which means that you can
--- compare the pointer by value to other interned strings and that you
--- must not free it.
--- 
--- If the `GtkComboBox`:id-column property of `combo_box` is not set, or if
--- no row is active, or if the active row has a `nil` ID value, then `nil`
--- is returned.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@return string # the ID of the active row, or `nil`
function Gtk.ComboBox:get_active_id() end

--- # method Gtk.ComboBox:get_active_iter()
---
--- Sets `iter` to point to the currently active item, if any item is active.
--- Otherwise, `iter` is left unchanged.
---
--- ---
---
---@param self Gtk.ComboBox # A `GtkComboBox`
---@param iter Gtk.TreeIter # A `GtkTreeIter`
---@return (boolean|nil) # `true` if `iter` was set, `false` otherwise
function Gtk.ComboBox:get_active_iter(iter) end

--- # method Gtk.ComboBox:get_add_tearoffs()
---
--- Gets the current value of the :add-tearoffs property.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@return (boolean|nil) # the current value of the :add-tearoffs property.
function Gtk.ComboBox:get_add_tearoffs() end

--- # method Gtk.ComboBox:get_button_sensitivity()
---
--- Returns whether the combo box sets the dropdown button
--- sensitive or not when there are no items in the model.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@return Gtk.SensitivityType # %GTK_SENSITIVITY_ON if the dropdown button is sensitive when the model is empty, %GTK_SENSITIVITY_OFF if the button is always insensitive or %GTK_SENSITIVITY_AUTO if it is only sensitive as long as the model has one item to be selected.
function Gtk.ComboBox:get_button_sensitivity() end

--- # method Gtk.ComboBox:get_column_span_column()
---
--- Returns the column with column span information for `combo_box`.
---
--- ---
---
---@param self Gtk.ComboBox # A `GtkComboBox`
---@return integer # the column span column.
function Gtk.ComboBox:get_column_span_column() end

--- # method Gtk.ComboBox:get_entry_text_column()
---
--- Returns the column which `combo_box` is using to get the strings
--- from to display in the internal entry.
---
--- ---
---
---@param self Gtk.ComboBox # A `GtkComboBox`.
---@return integer # A column in the data source model of `combo_box`.
function Gtk.ComboBox:get_entry_text_column() end

--- # method Gtk.ComboBox:get_focus_on_click()
---
--- Returns whether the combo box grabs focus when it is clicked
--- with the mouse. See `gtk_combo_box_set_focus_on_click()`.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@return (boolean|nil) # `true` if the combo box grabs focus when it is clicked with the mouse.
function Gtk.ComboBox:get_focus_on_click() end

--- # method Gtk.ComboBox:get_has_entry()
---
--- Returns whether the combo box has an entry.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@return (boolean|nil) # whether there is an entry in `combo_box`.
function Gtk.ComboBox:get_has_entry() end

--- # method Gtk.ComboBox:get_id_column()
---
--- Returns the column which `combo_box` is using to get string IDs
--- for values from.
---
--- ---
---
---@param self Gtk.ComboBox # A `GtkComboBox`
---@return integer # A column in the data source model of `combo_box`.
function Gtk.ComboBox:get_id_column() end

--- # method Gtk.ComboBox:get_model()
---
--- Returns the `GtkTreeModel` which is acting as data source for `combo_box`.
---
--- ---
---
---@param self Gtk.ComboBox # A `GtkComboBox`
---@return Gtk.TreeModel # A `GtkTreeModel` which was passed during construction.
function Gtk.ComboBox:get_model() end

--- # method Gtk.ComboBox:get_popup_accessible()
---
--- Gets the accessible object corresponding to the combo box’s popup.
--- 
--- This function is mostly intended for use by accessibility technologies;
--- applications should have little use for it.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@return Atk.Object # the accessible object corresponding to the combo box’s popup.
function Gtk.ComboBox:get_popup_accessible() end

--- # method Gtk.ComboBox:get_popup_fixed_width()
---
--- Gets whether the popup uses a fixed width matching
--- the allocated width of the combo box.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@return (boolean|nil) # `true` if the popup uses a fixed width
function Gtk.ComboBox:get_popup_fixed_width() end

--- # method Gtk.ComboBox:get_row_span_column()
---
--- Returns the column with row span information for `combo_box`.
---
--- ---
---
---@param self Gtk.ComboBox # A `GtkComboBox`
---@return integer # the row span column.
function Gtk.ComboBox:get_row_span_column() end

--- # method Gtk.ComboBox:get_title()
---
--- Gets the current title of the menu in tearoff mode. See
--- `gtk_combo_box_set_add_tearoffs()`.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@return string # the menu’s title in tearoff mode. This is an internal copy of the string which must not be freed.
function Gtk.ComboBox:get_title() end

--- # method Gtk.ComboBox:get_wrap_width()
---
--- Returns the wrap width which is used to determine the number of columns
--- for the popup menu. If the wrap width is larger than 1, the combo box
--- is in table mode.
---
--- ---
---
---@param self Gtk.ComboBox # A `GtkComboBox`
---@return integer # the wrap width.
function Gtk.ComboBox:get_wrap_width() end

--- # method Gtk.ComboBox:popdown()
---
--- Hides the menu or dropdown list of `combo_box`.
--- 
--- This function is mostly intended for use by accessibility technologies;
--- applications should have little use for it.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@return nil
function Gtk.ComboBox:popdown() end

--- # method Gtk.ComboBox:popup()
---
--- Pops up the menu or dropdown list of `combo_box`.
--- 
--- This function is mostly intended for use by accessibility technologies;
--- applications should have little use for it.
--- 
--- Before calling this, `combo_box` must be mapped, or nothing will happen.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@return nil
function Gtk.ComboBox:popup() end

--- # method Gtk.ComboBox:popup_for_device()
---
--- Pops up the menu or dropdown list of `combo_box`, the popup window
--- will be grabbed so only `device` and its associated pointer/keyboard
--- are the only `GdkDevices` able to send events to it.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@param device Gdk.Device # a `GdkDevice`
---@return nil
function Gtk.ComboBox:popup_for_device(device) end

--- # method Gtk.ComboBox:set_active()
---
--- Sets the active item of `combo_box` to be the item at `index`.
---
--- ---
---
---@param self Gtk.ComboBox # A `GtkComboBox`
---@param index_ integer # An index in the model passed during construction, or -1 to have no active item
---@return nil
function Gtk.ComboBox:set_active(index_) end

--- # method Gtk.ComboBox:set_active_id()
---
--- Changes the active row of `combo_box` to the one that has an ID equal to
--- `active_id`, or unsets the active row if `active_id` is `nil`.  Rows having
--- a `nil` ID string cannot be made active by this function.
--- 
--- If the `GtkComboBox`:id-column property of `combo_box` is unset or if no
--- row has the given ID then the function does nothing and returns `false`.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@param active_id? string # the ID of the row to select, or `nil`
---@return (boolean|nil) # `true` if a row with a matching ID was found. If a `nil` `active_id` was given to unset the active row, the function always returns `true`.
function Gtk.ComboBox:set_active_id(active_id) end

--- # method Gtk.ComboBox:set_active_iter()
---
--- Sets the current active item to be the one referenced by `iter`, or
--- unsets the active item if `iter` is `nil`.
---
--- ---
---
---@param self Gtk.ComboBox # A `GtkComboBox`
---@param iter? Gtk.TreeIter # The `GtkTreeIter`, or `nil`
---@return nil
function Gtk.ComboBox:set_active_iter(iter) end

--- # method Gtk.ComboBox:set_add_tearoffs()
---
--- Sets whether the popup menu should have a tearoff
--- menu item.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@param add_tearoffs (boolean|nil) # `true` to add tearoff menu items
---@return nil
function Gtk.ComboBox:set_add_tearoffs(add_tearoffs) end

--- # method Gtk.ComboBox:set_button_sensitivity()
---
--- Sets whether the dropdown button of the combo box should be
--- always sensitive (%GTK_SENSITIVITY_ON), never sensitive (%GTK_SENSITIVITY_OFF)
--- or only if there is at least one item to display (%GTK_SENSITIVITY_AUTO).
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@param sensitivity Gtk.SensitivityType # specify the sensitivity of the dropdown button
---@return nil
function Gtk.ComboBox:set_button_sensitivity(sensitivity) end

--- # method Gtk.ComboBox:set_column_span_column()
---
--- Sets the column with column span information for `combo_box` to be
--- `column_span`. The column span column contains integers which indicate
--- how many columns an item should span.
---
--- ---
---
---@param self Gtk.ComboBox # A `GtkComboBox`
---@param column_span integer # A column in the model passed during construction
---@return nil
function Gtk.ComboBox:set_column_span_column(column_span) end

--- # method Gtk.ComboBox:set_entry_text_column()
---
--- Sets the model column which `combo_box` should use to get strings from
--- to be `text_column`. The column `text_column` in the model of `combo_box`
--- must be of type %G_TYPE_STRING.
--- 
--- This is only relevant if `combo_box` has been created with
--- `GtkComboBox`:has-entry as `true`.
---
--- ---
---
---@param self Gtk.ComboBox # A `GtkComboBox`
---@param text_column integer # A column in `model` to get the strings from for the internal entry
---@return nil
function Gtk.ComboBox:set_entry_text_column(text_column) end

--- # method Gtk.ComboBox:set_focus_on_click()
---
--- Sets whether the combo box will grab focus when it is clicked with
--- the mouse. Making mouse clicks not grab focus is useful in places
--- like toolbars where you don’t want the keyboard focus removed from
--- the main area of the application.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@param focus_on_click (boolean|nil) # whether the combo box grabs focus when clicked with the mouse
---@return nil
function Gtk.ComboBox:set_focus_on_click(focus_on_click) end

--- # method Gtk.ComboBox:set_id_column()
---
--- Sets the model column which `combo_box` should use to get string IDs
--- for values from. The column `id_column` in the model of `combo_box`
--- must be of type %G_TYPE_STRING.
---
--- ---
---
---@param self Gtk.ComboBox # A `GtkComboBox`
---@param id_column integer # A column in `model` to get string IDs for values from
---@return nil
function Gtk.ComboBox:set_id_column(id_column) end

--- # method Gtk.ComboBox:set_model()
---
--- Sets the model used by `combo_box` to be `model`. Will unset a previously set
--- model (if applicable). If model is `nil`, then it will unset the model.
--- 
--- Note that this function does not clear the cell renderers, you have to
--- call `gtk_cell_layout_clear()` yourself if you need to set up different
--- cell renderers for the new model.
---
--- ---
---
---@param self Gtk.ComboBox # A `GtkComboBox`
---@param model? Gtk.TreeModel # A `GtkTreeModel`
---@return nil
function Gtk.ComboBox:set_model(model) end

--- # method Gtk.ComboBox:set_popup_fixed_width()
---
--- Specifies whether the popup’s width should be a fixed width
--- matching the allocated width of the combo box.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@param fixed (boolean|nil) # whether to use a fixed popup width
---@return nil
function Gtk.ComboBox:set_popup_fixed_width(fixed) end

--- # method Gtk.ComboBox:set_row_separator_func()
---
--- Sets the row separator function, which is used to determine
--- whether a row should be drawn as a separator. If the row separator
--- function is `nil`, no separators are drawn. This is the default value.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@param func Gtk.TreeViewRowSeparatorFunc # a `GtkTreeViewRowSeparatorFunc`
---@param data? userdata # user data to pass to `func`, or `nil`
---@param destroy? GLib.DestroyNotify # destroy notifier for `data`, or `nil`
---@return nil
function Gtk.ComboBox:set_row_separator_func(func, data, destroy) end

--- # method Gtk.ComboBox:set_row_span_column()
---
--- Sets the column with row span information for `combo_box` to be `row_span`.
--- The row span column contains integers which indicate how many rows
--- an item should span.
---
--- ---
---
---@param self Gtk.ComboBox # A `GtkComboBox`.
---@param row_span integer # A column in the model passed during construction.
---@return nil
function Gtk.ComboBox:set_row_span_column(row_span) end

--- # method Gtk.ComboBox:set_title()
---
--- Sets the menu’s title in tearoff mode.
---
--- ---
---
---@param self Gtk.ComboBox # a `GtkComboBox`
---@param title string # a title for the menu in tearoff mode
---@return nil
function Gtk.ComboBox:set_title(title) end

--- # method Gtk.ComboBox:set_wrap_width()
---
--- Sets the wrap width of `combo_box` to be `width`. The wrap width is basically
--- the preferred number of columns when you want the popup to be layed out
--- in a table.
---
--- ---
---
---@param self Gtk.ComboBox # A `GtkComboBox`
---@param width integer # Preferred number of columns
---@return nil
function Gtk.ComboBox:set_wrap_width(width) end

--- # function Gtk.ComboBox.new()
---
--- Creates a new empty `GtkComboBox`.
---
--- ---
---
---@return Gtk.Widget # A new `GtkComboBox`.
function Gtk.ComboBox.new() end

--- # function Gtk.ComboBox.new_with_area()
---
--- Creates a new empty `GtkComboBox` using `area` to layout cells.
---
--- ---
---
---@param area Gtk.CellArea # the `GtkCellArea` to use to layout cell renderers
---@return Gtk.Widget # A new `GtkComboBox`.
function Gtk.ComboBox.new_with_area(area) end

--- # function Gtk.ComboBox.new_with_area_and_entry()
---
--- Creates a new empty `GtkComboBox` with an entry.
--- 
--- The new combo box will use `area` to layout cells.
---
--- ---
---
---@param area Gtk.CellArea # the `GtkCellArea` to use to layout cell renderers
---@return Gtk.Widget # A new `GtkComboBox`.
function Gtk.ComboBox.new_with_area_and_entry(area) end

--- # function Gtk.ComboBox.new_with_entry()
---
--- Creates a new empty `GtkComboBox` with an entry.
---
--- ---
---
---@return Gtk.Widget # A new `GtkComboBox`.
function Gtk.ComboBox.new_with_entry() end

--- # function Gtk.ComboBox.new_with_model()
---
--- Creates a new `GtkComboBox` with the model initialized to `model`.
---
--- ---
---
---@param model Gtk.TreeModel # A `GtkTreeModel`.
---@return Gtk.Widget # A new `GtkComboBox`.
function Gtk.ComboBox.new_with_model(model) end

--- # function Gtk.ComboBox.new_with_model_and_entry()
---
--- Creates a new empty `GtkComboBox` with an entry
--- and with the model initialized to `model`.
---
--- ---
---
---@param model Gtk.TreeModel # A `GtkTreeModel`
---@return Gtk.Widget # A new `GtkComboBox`
function Gtk.ComboBox.new_with_model_and_entry(model) end

--- # class Gtk.ComboBoxAccessible
---
---@class Gtk.ComboBoxAccessible : Gtk.ContainerAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.Selection
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.ComboBoxAccessiblePrivate
Gtk.ComboBoxAccessible = {}

--- # record Gtk.ComboBoxAccessibleClass
---
---@class Gtk.ComboBoxAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.ComboBoxAccessibleClass = {}

--- # record Gtk.ComboBoxAccessiblePrivate
---
---@class Gtk.ComboBoxAccessiblePrivate
Gtk.ComboBoxAccessiblePrivate = {}

--- # record Gtk.ComboBoxClass
---
---@class Gtk.ComboBoxClass
---@field parent_class Gtk.BinClass # The parent class.
---@field changed fun(combo_box: Gtk.ComboBox): nil
---@field format_entry_text fun(combo_box: Gtk.ComboBox, path: string): string
Gtk.ComboBoxClass = {}

--- # record Gtk.ComboBoxPrivate
---
---@class Gtk.ComboBoxPrivate
Gtk.ComboBoxPrivate = {}

--- # class Gtk.ComboBoxText
---
--- A GtkComboBoxText is a simple variant of `GtkComboBox` that hides
--- the model-view complexity for simple text-only use cases.
--- 
--- To create a GtkComboBoxText, use `gtk_combo_box_text_new()` or
--- `gtk_combo_box_text_new_with_entry()`.
--- 
--- You can add items to a GtkComboBoxText with
--- `gtk_combo_box_text_append_text()`, `gtk_combo_box_text_insert_text()`
--- or `gtk_combo_box_text_prepend_text()` and remove options with
--- `gtk_combo_box_text_remove()`.
--- 
--- If the GtkComboBoxText contains an entry (via the “has-entry” property),
--- its contents can be retrieved using `gtk_combo_box_text_get_active_text()`.
--- The entry itself can be accessed by calling `gtk_bin_get_child()` on the
--- combo box.
--- 
--- You should not call `gtk_combo_box_set_model()` or attempt to pack more cells
--- into this combo box via its GtkCellLayout interface.
--- 
--- # GtkComboBoxText as GtkBuildable
--- 
--- The GtkComboBoxText implementation of the GtkBuildable interface supports
--- adding items directly using the `<items>` element and specifying `<item>`
--- elements for each item. Each `<item>` element can specify the “id”
--- corresponding to the appended text and also supports the regular
--- translation attributes “translatable”, “context” and “comments”.
--- 
--- Here is a UI definition fragment specifying GtkComboBoxText items:
--- 
--- ```xml
--- <object class="GtkComboBoxText">
---   <items>
---     <item translatable="yes" id="factory">Factory</item>
---     <item translatable="yes" id="home">Home</item>
---     <item translatable="yes" id="subway">Subway</item>
---   </items>
--- </object>
--- ```
--- 
--- # CSS nodes
--- 
--- ```plain
--- combobox
--- ╰── box.linked
---     ├── entry.combo
---     ├── button.combo
---     ╰── window.popup
--- ```
--- 
--- GtkComboBoxText has a single CSS node with name combobox. It adds
--- the style class .combo to the main CSS nodes of its entry and button
--- children, and the .linked class to the node of its internal box.
---
--- ---
---
---@class Gtk.ComboBoxText : Gtk.ComboBox, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout
---@field parent_instance Gtk.ComboBox
---@field priv Gtk.ComboBoxTextPrivate
---@operator call: Gtk.ComboBoxText
Gtk.ComboBoxText = {}

--- # method Gtk.ComboBoxText:append()
---
--- Appends `text` to the list of strings stored in `combo_box`.
--- If `id` is non-`nil` then it is used as the ID of the row.
--- 
--- This is the same as calling `gtk_combo_box_text_insert()` with a
--- position of -1.
---
--- ---
---
---@param self Gtk.ComboBoxText # A `GtkComboBoxText`
---@param id? string # a string ID for this value, or `nil`
---@param text string # A string
---@return nil
function Gtk.ComboBoxText:append(id, text) end

--- # method Gtk.ComboBoxText:append_text()
---
--- Appends `text` to the list of strings stored in `combo_box`.
--- 
--- This is the same as calling `gtk_combo_box_text_insert_text()` with a
--- position of -1.
---
--- ---
---
---@param self Gtk.ComboBoxText # A `GtkComboBoxText`
---@param text string # A string
---@return nil
function Gtk.ComboBoxText:append_text(text) end

--- # method Gtk.ComboBoxText:get_active_text()
---
--- Returns the currently active string in `combo_box`, or `nil`
--- if none is selected. If `combo_box` contains an entry, this
--- function will return its contents (which will not necessarily
--- be an item from the list).
---
--- ---
---
---@param self Gtk.ComboBoxText # A `GtkComboBoxText`
---@return string # a newly allocated string containing the currently active text. Must be freed with `g_free()`.
function Gtk.ComboBoxText:get_active_text() end

--- # method Gtk.ComboBoxText:insert()
---
--- Inserts `text` at `position` in the list of strings stored in `combo_box`.
--- If `id` is non-`nil` then it is used as the ID of the row.  See
--- `GtkComboBox`:id-column.
--- 
--- If `position` is negative then `text` is appended.
---
--- ---
---
---@param self Gtk.ComboBoxText # A `GtkComboBoxText`
---@param position integer # An index to insert `text`
---@param id? string # a string ID for this value, or `nil`
---@param text string # A string to display
---@return nil
function Gtk.ComboBoxText:insert(position, id, text) end

--- # method Gtk.ComboBoxText:insert_text()
---
--- Inserts `text` at `position` in the list of strings stored in `combo_box`.
--- 
--- If `position` is negative then `text` is appended.
--- 
--- This is the same as calling `gtk_combo_box_text_insert()` with a `nil`
--- ID string.
---
--- ---
---
---@param self Gtk.ComboBoxText # A `GtkComboBoxText`
---@param position integer # An index to insert `text`
---@param text string # A string
---@return nil
function Gtk.ComboBoxText:insert_text(position, text) end

--- # method Gtk.ComboBoxText:prepend()
---
--- Prepends `text` to the list of strings stored in `combo_box`.
--- If `id` is non-`nil` then it is used as the ID of the row.
--- 
--- This is the same as calling `gtk_combo_box_text_insert()` with a
--- position of 0.
---
--- ---
---
---@param self Gtk.ComboBoxText # A `GtkComboBox`
---@param id? string # a string ID for this value, or `nil`
---@param text string # a string
---@return nil
function Gtk.ComboBoxText:prepend(id, text) end

--- # method Gtk.ComboBoxText:prepend_text()
---
--- Prepends `text` to the list of strings stored in `combo_box`.
--- 
--- This is the same as calling `gtk_combo_box_text_insert_text()` with a
--- position of 0.
---
--- ---
---
---@param self Gtk.ComboBoxText # A `GtkComboBox`
---@param text string # A string
---@return nil
function Gtk.ComboBoxText:prepend_text(text) end

--- # method Gtk.ComboBoxText:remove()
---
--- Removes the string at `position` from `combo_box`.
---
--- ---
---
---@param self Gtk.ComboBoxText # A `GtkComboBox`
---@param position integer # Index of the item to remove
---@return nil
function Gtk.ComboBoxText:remove(position) end

--- # method Gtk.ComboBoxText:remove_all()
---
--- Removes all the text entries from the combo box.
---
--- ---
---
---@param self Gtk.ComboBoxText # A `GtkComboBoxText`
---@return nil
function Gtk.ComboBoxText:remove_all() end

--- # function Gtk.ComboBoxText.new()
---
--- Creates a new `GtkComboBoxText`, which is a `GtkComboBox` just displaying
--- strings.
---
--- ---
---
---@return Gtk.Widget # A new `GtkComboBoxText`
function Gtk.ComboBoxText.new() end

--- # function Gtk.ComboBoxText.new_with_entry()
---
--- Creates a new `GtkComboBoxText`, which is a `GtkComboBox` just displaying
--- strings. The combo box created by this function has an entry.
---
--- ---
---
---@return Gtk.Widget # a new `GtkComboBoxText`
function Gtk.ComboBoxText.new_with_entry() end

--- # record Gtk.ComboBoxTextClass
---
---@class Gtk.ComboBoxTextClass
---@field parent_class Gtk.ComboBoxClass
Gtk.ComboBoxTextClass = {}

--- # record Gtk.ComboBoxTextPrivate
---
---@class Gtk.ComboBoxTextPrivate
Gtk.ComboBoxTextPrivate = {}

--- # class Gtk.Container
---
--- A GTK+ user interface is constructed by nesting widgets inside widgets.
--- Container widgets are the inner nodes in the resulting tree of widgets:
--- they contain other widgets. So, for example, you might have a `GtkWindow`
--- containing a `GtkFrame` containing a `GtkLabel`. If you wanted an image instead
--- of a textual label inside the frame, you might replace the `GtkLabel` widget
--- with a `GtkImage` widget.
--- 
--- There are two major kinds of container widgets in GTK+. Both are subclasses
--- of the abstract GtkContainer base class.
--- 
--- The first type of container widget has a single child widget and derives
--- from `GtkBin`. These containers are decorators, which
--- add some kind of functionality to the child. For example, a `GtkButton` makes
--- its child into a clickable button; a `GtkFrame` draws a frame around its child
--- and a `GtkWindow` places its child widget inside a top-level window.
--- 
--- The second type of container can have more than one child; its purpose is to
--- manage layout. This means that these containers assign
--- sizes and positions to their children. For example, a `GtkHBox` arranges its
--- children in a horizontal row, and a `GtkGrid` arranges the widgets it contains
--- in a two-dimensional grid.
--- 
--- For implementations of `GtkContainer` the virtual method `GtkContainerClass`.`forall()`
--- is always required, since it's used for drawing and other internal operations
--- on the children.
--- If the `GtkContainer` implementation expect to have non internal children
--- it's needed to implement both `GtkContainerClass`.`add()` and `GtkContainerClass`.`remove()`.
--- If the GtkContainer implementation has internal children, they should be added
--- with `gtk_widget_set_parent()` on `init()` and removed with `gtk_widget_unparent()`
--- in the `GtkWidgetClass`.`destroy()` implementation.
--- See more about implementing custom widgets at https://wiki.gnome.org/HowDoI/CustomWidgets
--- 
--- # Height for width geometry management
--- 
--- GTK+ uses a height-for-width (and width-for-height) geometry management system.
--- Height-for-width means that a widget can change how much vertical space it needs,
--- depending on the amount of horizontal space that it is given (and similar for
--- width-for-height).
--- 
--- There are some things to keep in mind when implementing container widgets
--- that make use of GTK+’s height for width geometry management system. First,
--- it’s important to note that a container must prioritize one of its
--- dimensions, that is to say that a widget or container can only have a
--- `GtkSizeRequestMode` that is %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH or
--- %GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT. However, every widget and container
--- must be able to respond to the APIs for both dimensions, i.e. even if a
--- widget has a request mode that is height-for-width, it is possible that
--- its parent will request its sizes using the width-for-height APIs.
--- 
--- To ensure that everything works properly, here are some guidelines to follow
--- when implementing height-for-width (or width-for-height) containers.
--- 
--- Each request mode involves 2 virtual methods. Height-for-width apis run
--- through `gtk_widget_get_preferred_width()` and then through `gtk_widget_get_preferred_height_for_width()`.
--- When handling requests in the opposite `GtkSizeRequestMode` it is important that
--- every widget request at least enough space to display all of its content at all times.
--- 
--- When `gtk_widget_get_preferred_height()` is called on a container that is height-for-width,
--- the container must return the height for its minimum width. This is easily achieved by
--- simply calling the reverse apis implemented for itself as follows:
--- 
--- ```c
--- static void
--- foo_container_get_preferred_height (GtkWidget *widget,
---                                     gint *min_height,
---                                     gint *nat_height)
--- {
---    if (i_am_in_height_for_width_mode)
---      {
---        gint min_width;
--- 
---        GTK_WIDGET_GET_CLASS (widget)->get_preferred_width (widget,
---                                                            &min_width,
---                                                            NULL);
---        GTK_WIDGET_GET_CLASS (widget)->get_preferred_height_for_width
---                                                           (widget,
---                                                            min_width,
---                                                            min_height,
---                                                            nat_height);
---      }
---    else
---      {
---        ... many containers support both request modes, execute the
---        real width-for-height request here by returning the
---        collective heights of all widgets that are stacked
---        vertically (or whatever is appropriate for this container)
---        ...
---      }
--- }
--- ```
--- 
--- Similarly, when `gtk_widget_get_preferred_width_for_height()` is called for a container or widget
--- that is height-for-width, it then only needs to return the base minimum width like so:
--- 
--- ```c
--- static void
--- foo_container_get_preferred_width_for_height (GtkWidget *widget,
---                                               gint for_height,
---                                               gint *min_width,
---                                               gint *nat_width)
--- {
---    if (i_am_in_height_for_width_mode)
---      {
---        GTK_WIDGET_GET_CLASS (widget)->get_preferred_width (widget,
---                                                            min_width,
---                                                            nat_width);
---      }
---    else
---      {
---        ... execute the real width-for-height request here based on
---        the required width of the children collectively if the
---        container were to be allocated the said height ...
---      }
--- }
--- ```
--- 
--- Height for width requests are generally implemented in terms of a virtual allocation
--- of widgets in the input orientation. Assuming an height-for-width request mode, a container
--- would implement the `get_preferred_height_for_width()` virtual function by first calling
--- `gtk_widget_get_preferred_width()` for each of its children.
--- 
--- For each potential group of children that are lined up horizontally, the values returned by
--- `gtk_widget_get_preferred_width()` should be collected in an array of `GtkRequestedSize` structures.
--- Any child spacing should be removed from the input `for_width` and then the collective size should be
--- allocated using the `gtk_distribute_natural_allocation()` convenience function.
--- 
--- The container will then move on to request the preferred height for each child by using
--- `gtk_widget_get_preferred_height_for_width()` and using the sizes stored in the `GtkRequestedSize` array.
--- 
--- To allocate a height-for-width container, it’s again important
--- to consider that a container must prioritize one dimension over the other. So if
--- a container is a height-for-width container it must first allocate all widgets horizontally
--- using a `GtkRequestedSize` array and `gtk_distribute_natural_allocation()` and then add any
--- extra space (if and where appropriate) for the widget to expand.
--- 
--- After adding all the expand space, the container assumes it was allocated sufficient
--- height to fit all of its content. At this time, the container must use the total horizontal sizes
--- of each widget to request the height-for-width of each of its children and store the requests in a
--- `GtkRequestedSize` array for any widgets that stack vertically (for tabular containers this can
--- be generalized into the heights and widths of rows and columns).
--- The vertical space must then again be distributed using `gtk_distribute_natural_allocation()`
--- while this time considering the allocated height of the widget minus any vertical spacing
--- that the container adds. Then vertical expand space should be added where appropriate and available
--- and the container should go on to actually allocating the child widgets.
--- 
--- See [GtkWidget’s geometry management section][geometry-management]
--- to learn more about implementing height-for-width geometry management for widgets.
--- 
--- # Child properties
--- 
--- GtkContainer introduces child properties.
--- These are object properties that are not specific
--- to either the container or the contained widget, but rather to their relation.
--- Typical examples of child properties are the position or pack-type of a widget
--- which is contained in a `GtkBox`.
--- 
--- Use `gtk_container_class_install_child_property()` to install child properties
--- for a container class and `gtk_container_class_find_child_property()` or
--- `gtk_container_class_list_child_properties()` to get information about existing
--- child properties.
--- 
--- To set the value of a child property, use `gtk_container_child_set_property()`,
--- `gtk_container_child_set()` or `gtk_container_child_set_valist()`.
--- To obtain the value of a child property, use
--- `gtk_container_child_get_property()`, `gtk_container_child_get()` or
--- `gtk_container_child_get_valist()`. To emit notification about child property
--- changes, use `gtk_widget_child_notify()`.
--- 
--- # GtkContainer as GtkBuildable
--- 
--- The GtkContainer implementation of the GtkBuildable interface supports
--- a `<packing>` element for children, which can contain multiple `<property>`
--- elements that specify child properties for the child.
--- 
--- Since 2.16, child properties can also be marked as translatable using
--- the same “translatable”, “comments” and “context” attributes that are used
--- for regular properties.
--- 
--- Since 3.16, containers can have a `<focus-chain>` element containing multiple
--- `<widget>` elements, one for each child that should be added to the focus
--- chain. The ”name” attribute gives the id of the widget.
--- 
--- An example of these properties in UI definitions:
--- 
--- ```xml
--- <object class="GtkBox">
---   <child>
---     <object class="GtkEntry" id="entry1"/>
---     <packing>
---       <property name="pack-type">start</property>
---     </packing>
---   </child>
---   <child>
---     <object class="GtkEntry" id="entry2"/>
---   </child>
---   <focus-chain>
---     <widget name="entry1"/>
---     <widget name="entry2"/>
---   </focus-chain>
--- </object>
--- ```
---
--- ---
---
---@class Gtk.Container : Gtk.Widget, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field widget Gtk.Widget
---@field priv Gtk.ContainerPrivate
Gtk.Container = {}

--- # method Gtk.Container:add()
---
--- Adds `widget` to `container`. Typically used for simple containers
--- such as `GtkWindow`, `GtkFrame`, or `GtkButton`; for more complicated
--- layout containers such as `GtkBox` or `GtkGrid`, this function will
--- pick default packing parameters that may not be correct.  So
--- consider functions such as `gtk_box_pack_start()` and
--- `gtk_grid_attach()` as an alternative to `gtk_container_add()` in
--- those cases. A widget may be added to only one container at a time;
--- you can’t place the same widget inside two different containers.
--- 
--- Note that some containers, such as `GtkScrolledWindow` or `GtkListBox`,
--- may add intermediate children between the added widget and the
--- container.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@param widget Gtk.Widget # a widget to be placed inside `container`
---@return nil
function Gtk.Container:add(widget) end

--- # method Gtk.Container:check_resize()
---
---@param self Gtk.Container
---@return nil
function Gtk.Container:check_resize() end

--- # method Gtk.Container:child_get_property()
---
--- Gets the value of a child property for `child` and `container`.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@param child Gtk.Widget # a widget which is a child of `container`
---@param property_name string # the name of the property to get
---@param value GObject.Value # a location to return the value
---@return nil
function Gtk.Container:child_get_property(child, property_name, value) end

--- # method Gtk.Container:child_notify()
---
--- Emits a `GtkWidget`::child-notify signal for the
--- [child property][child-properties]
--- `child_property` on the child.
--- 
--- This is an analogue of `g_object_notify()` for child properties.
--- 
--- Also see `gtk_widget_child_notify()`.
---
--- ---
---
---@param self Gtk.Container # the `GtkContainer`
---@param child Gtk.Widget # the child widget
---@param child_property string # the name of a child property installed on the class of `container`
---@return nil
function Gtk.Container:child_notify(child, child_property) end

--- # method Gtk.Container:child_notify_by_pspec()
---
--- Emits a `GtkWidget`::child-notify signal for the
--- [child property][child-properties] specified by
--- `pspec` on the child.
--- 
--- This is an analogue of `g_object_notify_by_pspec()` for child properties.
---
--- ---
---
---@param self Gtk.Container # the `GtkContainer`
---@param child Gtk.Widget # the child widget
---@param pspec GObject.ParamSpec # the `GParamSpec` of a child property instealled on the class of `container`
---@return nil
function Gtk.Container:child_notify_by_pspec(child, pspec) end

--- # method Gtk.Container:child_set_property()
---
--- Sets a child property for `child` and `container`.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@param child Gtk.Widget # a widget which is a child of `container`
---@param property_name string # the name of the property to set
---@param value GObject.Value # the value to set the property to
---@return nil
function Gtk.Container:child_set_property(child, property_name, value) end

--- # method Gtk.Container:child_type()
---
--- Returns the type of the children supported by the container.
--- 
--- Note that this may return %G_TYPE_NONE to indicate that no more
--- children can be added, e.g. for a `GtkPaned` which already has two
--- children.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@return Gtk.GType # a `GType`.
function Gtk.Container:child_type() end

--- # method Gtk.Container:forall()
---
--- Invokes `callback` on each direct child of `container`, including
--- children that are considered “internal” (implementation details
--- of the container). “Internal” children generally weren’t added
--- by the user of the container, but were added by the container
--- implementation itself.
--- 
--- Most applications should use `gtk_container_foreach()`, rather
--- than `gtk_container_forall()`.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@param callback Gtk.Callback # a callback
---@param callback_data? userdata # callback user data
---@return nil
function Gtk.Container:forall(callback, callback_data) end

--- # method Gtk.Container:foreach()
---
--- Invokes `callback` on each non-internal child of `container`.
--- See `gtk_container_forall()` for details on what constitutes
--- an “internal” child. For all practical purposes, this function
--- should iterate over precisely those child widgets that were
--- added to the container by the application with explicit `add()`
--- calls.
--- 
--- It is permissible to remove the child from the `callback` handler.
--- 
--- Most applications should use `gtk_container_foreach()`,
--- rather than `gtk_container_forall()`.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@param callback Gtk.Callback # a callback
---@param callback_data? userdata # callback user data
---@return nil
function Gtk.Container:foreach(callback, callback_data) end

--- # method Gtk.Container:get_border_width()
---
--- Retrieves the border width of the container. See
--- `gtk_container_set_border_width()`.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@return integer # the current border width
function Gtk.Container:get_border_width() end

--- # method Gtk.Container:get_children()
---
--- Returns the container’s non-internal children. See
--- `gtk_container_forall()` for details on what constitutes an "internal" child.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@return Gtk.Widget[] # a newly-allocated list of the container’s non-internal children.
function Gtk.Container:get_children() end

--- # method Gtk.Container:get_focus_chain()
---
--- Retrieves the focus chain of the container, if one has been
--- set explicitly. If no focus chain has been explicitly
--- set, GTK+ computes the focus chain based on the positions
--- of the children. In that case, GTK+ stores `nil` in
--- `focusable_widgets` and returns `false`.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@param focusable_widgets Gtk.Widget[] # location to store the focus chain of the container, or `nil`. You should free this list using `g_list_free()` when you are done with it, however no additional reference count is added to the individual widgets in the focus chain.
---@return (boolean|nil) # `true` if the focus chain of the container has been set explicitly.
function Gtk.Container:get_focus_chain(focusable_widgets) end

--- # method Gtk.Container:get_focus_child()
---
--- Returns the current focus child widget inside `container`. This is not the
--- currently focused widget. That can be obtained by calling
--- `gtk_window_get_focus()`.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@return Gtk.Widget # The child widget which will receive the focus inside `container` when the `container` is focused, or `nil` if none is set.
function Gtk.Container:get_focus_child() end

--- # method Gtk.Container:get_focus_hadjustment()
---
--- Retrieves the horizontal focus adjustment for the container. See
--- gtk_container_set_focus_hadjustment ().
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@return Gtk.Adjustment # the horizontal focus adjustment, or `nil` if none has been set.
function Gtk.Container:get_focus_hadjustment() end

--- # method Gtk.Container:get_focus_vadjustment()
---
--- Retrieves the vertical focus adjustment for the container. See
--- `gtk_container_set_focus_vadjustment()`.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@return Gtk.Adjustment # the vertical focus adjustment, or `nil` if none has been set.
function Gtk.Container:get_focus_vadjustment() end

--- # method Gtk.Container:get_path_for_child()
---
--- Returns a newly created widget path representing all the widget hierarchy
--- from the toplevel down to and including `child`.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@param child Gtk.Widget # a child of `container`
---@return Gtk.WidgetPath # A newly created `GtkWidgetPath`
function Gtk.Container:get_path_for_child(child) end

--- # method Gtk.Container:get_resize_mode()
---
--- Returns the resize mode for the container. See
--- gtk_container_set_resize_mode ().
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@return Gtk.ResizeMode # the current resize mode
function Gtk.Container:get_resize_mode() end

--- # method Gtk.Container:propagate_draw()
---
--- When a container receives a call to the draw function, it must send
--- synthetic `GtkWidget`::draw calls to all children that don’t have their
--- own `GdkWindows`. This function provides a convenient way of doing this.
--- A container, when it receives a call to its `GtkWidget`::draw function,
--- calls `gtk_container_propagate_draw()` once for each child, passing in
--- the `cr` the container received.
--- 
--- `gtk_container_propagate_draw()` takes care of translating the origin of `cr`,
--- and deciding whether the draw needs to be sent to the child. It is a
--- convenient and optimized way of getting the same effect as calling
--- `gtk_widget_draw()` on the child directly.
--- 
--- In most cases, a container can simply either inherit the
--- `GtkWidget`::draw implementation from `GtkContainer`, or do some drawing
--- and then chain to the ::draw implementation from `GtkContainer`.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@param child Gtk.Widget # a child of `container`
---@param cr cairo.Context # Cairo context as passed to the container. If you want to use `cr` in container’s draw function, consider using `cairo_save()` and `cairo_restore()` before calling this function.
---@return nil
function Gtk.Container:propagate_draw(child, cr) end

--- # method Gtk.Container:remove()
---
--- Removes `widget` from `container`. `widget` must be inside `container`.
--- Note that `container` will own a reference to `widget`, and that this
--- may be the last reference held; so removing a widget from its
--- container can destroy that widget. If you want to use `widget`
--- again, you need to add a reference to it before removing it from
--- a container, using `g_object_ref()`. If you don’t want to use `widget`
--- again it’s usually more efficient to simply destroy it directly
--- using `gtk_widget_destroy()` since this will remove it from the
--- container and help break any circular reference count cycles.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@param widget Gtk.Widget # a current child of `container`
---@return nil
function Gtk.Container:remove(widget) end

--- # method Gtk.Container:resize_children()
---
---@param self Gtk.Container # a `GtkContainer`
---@return nil
function Gtk.Container:resize_children() end

--- # method Gtk.Container:set_border_width()
---
--- Sets the border width of the container.
--- 
--- The border width of a container is the amount of space to leave
--- around the outside of the container. The only exception to this is
--- `GtkWindow`; because toplevel windows can’t leave space outside,
--- they leave the space inside. The border is added on all sides of
--- the container. To add space to only one side, use a specific
--- `GtkWidget`:margin property on the child widget, for example
--- `GtkWidget`:margin-top.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@param border_width integer # amount of blank space to leave outside the container. Valid values are in the range 0-65535 pixels.
---@return nil
function Gtk.Container:set_border_width(border_width) end

--- # method Gtk.Container:set_focus_chain()
---
--- Sets a focus chain, overriding the one computed automatically by GTK+.
--- 
--- In principle each widget in the chain should be a descendant of the
--- container, but this is not enforced by this method, since it’s allowed
--- to set the focus chain before you pack the widgets, or have a widget
--- in the chain that isn’t always packed. The necessary checks are done
--- when the focus chain is actually traversed.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@param focusable_widgets Gtk.Widget[] # the new focus chain
---@return nil
function Gtk.Container:set_focus_chain(focusable_widgets) end

--- # method Gtk.Container:set_focus_child()
---
--- Sets, or unsets if `child` is `nil`, the focused child of `container`.
--- 
--- This function emits the GtkContainer::set_focus_child signal of
--- `container`. Implementations of `GtkContainer` can override the
--- default behaviour by overriding the class closure of this signal.
--- 
--- This is function is mostly meant to be used by widgets. Applications can use
--- `gtk_widget_grab_focus()` to manually set the focus to a specific widget.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@param child? Gtk.Widget # a `GtkWidget`, or `nil`
---@return nil
function Gtk.Container:set_focus_child(child) end

--- # method Gtk.Container:set_focus_hadjustment()
---
--- Hooks up an adjustment to focus handling in a container, so when a child
--- of the container is focused, the adjustment is scrolled to show that
--- widget. This function sets the horizontal alignment.
--- See `gtk_scrolled_window_get_hadjustment()` for a typical way of obtaining
--- the adjustment and `gtk_container_set_focus_vadjustment()` for setting
--- the vertical adjustment.
--- 
--- The adjustments have to be in pixel units and in the same coordinate
--- system as the allocation for immediate children of the container.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@param adjustment Gtk.Adjustment # an adjustment which should be adjusted when the focus is moved among the descendents of `container`
---@return nil
function Gtk.Container:set_focus_hadjustment(adjustment) end

--- # method Gtk.Container:set_focus_vadjustment()
---
--- Hooks up an adjustment to focus handling in a container, so when a
--- child of the container is focused, the adjustment is scrolled to
--- show that widget. This function sets the vertical alignment. See
--- `gtk_scrolled_window_get_vadjustment()` for a typical way of obtaining
--- the adjustment and `gtk_container_set_focus_hadjustment()` for setting
--- the horizontal adjustment.
--- 
--- The adjustments have to be in pixel units and in the same coordinate
--- system as the allocation for immediate children of the container.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@param adjustment Gtk.Adjustment # an adjustment which should be adjusted when the focus is moved among the descendents of `container`
---@return nil
function Gtk.Container:set_focus_vadjustment(adjustment) end

--- # method Gtk.Container:set_reallocate_redraws()
---
--- Sets the `reallocate_redraws` flag of the container to the given value.
--- 
--- Containers requesting reallocation redraws get automatically
--- redrawn if any of their children changed allocation.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@param needs_redraws (boolean|nil) # the new value for the container’s `reallocate_redraws` flag
---@return nil
function Gtk.Container:set_reallocate_redraws(needs_redraws) end

--- # method Gtk.Container:set_resize_mode()
---
--- Sets the resize mode for the container.
--- 
--- The resize mode of a container determines whether a resize request
--- will be passed to the container’s parent, queued for later execution
--- or executed immediately.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@param resize_mode Gtk.ResizeMode # the new resize mode
---@return nil
function Gtk.Container:set_resize_mode(resize_mode) end

--- # method Gtk.Container:unset_focus_chain()
---
--- Removes a focus chain explicitly set with `gtk_container_set_focus_chain()`.
---
--- ---
---
---@param self Gtk.Container # a `GtkContainer`
---@return nil
function Gtk.Container:unset_focus_chain() end

--- # class Gtk.ContainerAccessible
---
---@class Gtk.ContainerAccessible : Gtk.WidgetAccessible, Gtk.Atk.Component
---@field parent Gtk.WidgetAccessible
---@field priv Gtk.ContainerAccessiblePrivate
Gtk.ContainerAccessible = {}

--- # record Gtk.ContainerAccessibleClass
---
---@class Gtk.ContainerAccessibleClass
---@field parent_class Gtk.WidgetAccessibleClass
---@field add_gtk fun(container: Gtk.Container, widget: Gtk.Widget, data: userdata): integer
---@field remove_gtk fun(container: Gtk.Container, widget: Gtk.Widget, data: userdata): integer
Gtk.ContainerAccessibleClass = {}

--- # record Gtk.ContainerAccessiblePrivate
---
---@class Gtk.ContainerAccessiblePrivate
Gtk.ContainerAccessiblePrivate = {}

--- # class Gtk.ContainerCellAccessible
---
---@class Gtk.ContainerCellAccessible : Gtk.CellAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.TableCell
---@field parent Gtk.CellAccessible
---@field priv Gtk.ContainerCellAccessiblePrivate
---@operator call: Gtk.ContainerCellAccessible
Gtk.ContainerCellAccessible = {}

--- # method Gtk.ContainerCellAccessible:add_child()
---
---@param self Gtk.ContainerCellAccessible
---@param child Gtk.CellAccessible
---@return nil
function Gtk.ContainerCellAccessible:add_child(child) end

--- # method Gtk.ContainerCellAccessible:get_children()
---
--- Get a list of children.
---
--- ---
---
---@param self Gtk.ContainerCellAccessible # the container
---@return Gtk.CellAccessible[]
function Gtk.ContainerCellAccessible:get_children() end

--- # method Gtk.ContainerCellAccessible:remove_child()
---
---@param self Gtk.ContainerCellAccessible
---@param child Gtk.CellAccessible
---@return nil
function Gtk.ContainerCellAccessible:remove_child(child) end

--- # function Gtk.ContainerCellAccessible.new()
---
---@return Gtk.ContainerCellAccessible
function Gtk.ContainerCellAccessible.new() end

--- # record Gtk.ContainerCellAccessibleClass
---
---@class Gtk.ContainerCellAccessibleClass
---@field parent_class Gtk.CellAccessibleClass
Gtk.ContainerCellAccessibleClass = {}

--- # record Gtk.ContainerCellAccessiblePrivate
---
---@class Gtk.ContainerCellAccessiblePrivate
Gtk.ContainerCellAccessiblePrivate = {}

--- # record Gtk.ContainerClass
---
--- Base class for containers.
---
--- ---
---
---@class Gtk.ContainerClass
---@field parent_class Gtk.WidgetClass # The parent class.
---@field add fun(container: Gtk.Container, widget: Gtk.Widget): nil
---@field remove fun(container: Gtk.Container, widget: Gtk.Widget): nil
---@field check_resize fun(container: Gtk.Container): nil
---@field forall fun(container: Gtk.Container, include_internals: (boolean|nil), callback: Gtk.Callback, callback_data: userdata): nil
---@field set_focus_child fun(container: Gtk.Container, child: Gtk.Widget): nil
---@field child_type fun(container: Gtk.Container): Gtk.GType
---@field composite_name fun(container: Gtk.Container, child: Gtk.Widget): string
---@field set_child_property fun(container: Gtk.Container, child: Gtk.Widget, property_id: integer, value: GObject.Value, pspec: GObject.ParamSpec): nil
---@field get_child_property fun(container: Gtk.Container, child: Gtk.Widget, property_id: integer, value: GObject.Value, pspec: GObject.ParamSpec): nil
---@field get_path_for_child fun(container: Gtk.Container, child: Gtk.Widget): Gtk.WidgetPath
---@field _handle_border_width integer
Gtk.ContainerClass = {}

--- # method Gtk.ContainerClass:find_child_property()
---
--- Finds a child property of a container class by name.
---
--- ---
---
---@param self Gtk.ContainerClass # a `GtkContainerClass`
---@param property_name string # the name of the child property to find
---@return GObject.ParamSpec # the `GParamSpec` of the child property or `nil` if `class` has no child property with that name.
function Gtk.ContainerClass:find_child_property(property_name) end

--- # method Gtk.ContainerClass:handle_border_width()
---
--- Modifies a subclass of `GtkContainerClass` to automatically add and
--- remove the border-width setting on GtkContainer.  This allows the
--- subclass to ignore the border width in its size request and
--- allocate methods. The intent is for a subclass to invoke this
--- in its class_init function.
--- 
--- `gtk_container_class_handle_border_width()` is necessary because it
--- would break API too badly to make this behavior the default. So
--- subclasses must “opt in” to the parent class handling border_width
--- for them.
---
--- ---
---
---@param self Gtk.ContainerClass # the class struct of a `GtkContainer` subclass
---@return nil
function Gtk.ContainerClass:handle_border_width() end

--- # method Gtk.ContainerClass:install_child_properties()
---
--- Installs child properties on a container class.
---
--- ---
---
---@param self Gtk.ContainerClass # a `GtkContainerClass`
---@param n_pspecs integer # the length of the `GParamSpec` array
---@param pspecs unknown[] # the `GParamSpec` array defining the new child properties
---@return nil
function Gtk.ContainerClass:install_child_properties(n_pspecs, pspecs) end

--- # method Gtk.ContainerClass:install_child_property()
---
--- Installs a child property on a container class.
---
--- ---
---
---@param self Gtk.ContainerClass # a `GtkContainerClass`
---@param property_id integer # the id for the property
---@param pspec GObject.ParamSpec # the `GParamSpec` for the property
---@return nil
function Gtk.ContainerClass:install_child_property(property_id, pspec) end

--- # method Gtk.ContainerClass:list_child_properties()
---
--- Returns all child properties of a container class.
---
--- ---
---
---@param self Gtk.ContainerClass # a `GtkContainerClass`
---@param n_properties integer # location to return the number of child properties found
---@return unknown[] # a newly allocated `nil`-terminated array of `GParamSpec`*. The array must be freed with `g_free()`.
function Gtk.ContainerClass:list_child_properties(n_properties) end

--- # record Gtk.ContainerPrivate
---
---@class Gtk.ContainerPrivate
Gtk.ContainerPrivate = {}

---@enum Gtk.CornerType
Gtk.CornerType = {}

--- # class Gtk.CssProvider
---
--- GtkCssProvider is an object implementing the `GtkStyleProvider` interface.
--- It is able to parse [CSS-like][css-overview] input in order to style widgets.
--- 
--- An application can make GTK+ parse a specific CSS style sheet by calling
--- `gtk_css_provider_load_from_file()` or `gtk_css_provider_load_from_resource()`
--- and adding the provider with `gtk_style_context_add_provider()` or
--- `gtk_style_context_add_provider_for_screen()`.
--- 
--- In addition, certain files will be read when GTK+ is initialized. First, the
--- file `$XDG_CONFIG_HOME/gtk-3.0/gtk.css` is loaded if it exists. Then, GTK+
--- loads the first existing file among
--- `XDG_DATA_HOME/themes/THEME/gtk-VERSION/gtk.css`,
--- `$HOME/.themes/THEME/gtk-VERSION/gtk.css`,
--- `$XDG_DATA_DIRS/themes/THEME/gtk-VERSION/gtk.css` and
--- `DATADIR/share/themes/THEME/gtk-VERSION/gtk.css`, where `THEME` is the name of
--- the current theme (see the `GtkSettings`:gtk-theme-name setting), `DATADIR`
--- is the prefix configured when GTK+ was compiled (unless overridden by the
--- `GTK_DATA_PREFIX` environment variable), and `VERSION` is the GTK+ version number.
--- If no file is found for the current version, GTK+ tries older versions all the
--- way back to 3.0.
--- 
--- In the same way, GTK+ tries to load a gtk-keys.css file for the current
--- key theme, as defined by `GtkSettings`:gtk-key-theme-name.
---
--- ---
---
---@class Gtk.CssProvider : GObject.Object, Gtk.StyleProvider
---@field parent_instance GObject.Object
---@field priv Gtk.CssProviderPrivate
---@operator call: Gtk.CssProvider
Gtk.CssProvider = {}

--- # method Gtk.CssProvider:load_from_data()
---
--- Loads `data` into `css_provider`, and by doing so clears any previously loaded
--- information.
---
--- ---
---
---@param self Gtk.CssProvider # a `GtkCssProvider`
---@param data unknown[] # CSS data loaded in memory
---@param length integer # the length of `data` in bytes, or -1 for NUL terminated strings. If `length` is not -1, the code will assume it is not NUL terminated and will potentially do a copy.
---@return (boolean|nil) # `true`. The return value is deprecated and `false` will only be returned for backwards compatibility reasons if an `error` is not `nil` and a loading error occurred. To track errors while loading CSS, connect to the `GtkCssProvider`::parsing-error signal.
function Gtk.CssProvider:load_from_data(data, length) end

--- # method Gtk.CssProvider:load_from_file()
---
--- Loads the data contained in `file` into `css_provider`, making it
--- clear any previously loaded information.
---
--- ---
---
---@param self Gtk.CssProvider # a `GtkCssProvider`
---@param file Gio.File # `GFile` pointing to a file to load
---@return (boolean|nil) # `true`. The return value is deprecated and `false` will only be returned for backwards compatibility reasons if an `error` is not `nil` and a loading error occurred. To track errors while loading CSS, connect to the `GtkCssProvider`::parsing-error signal.
function Gtk.CssProvider:load_from_file(file) end

--- # method Gtk.CssProvider:load_from_path()
---
--- Loads the data contained in `path` into `css_provider`, making it clear
--- any previously loaded information.
---
--- ---
---
---@param self Gtk.CssProvider # a `GtkCssProvider`
---@param path string # the path of a filename to load, in the GLib filename encoding
---@return (boolean|nil) # `true`. The return value is deprecated and `false` will only be returned for backwards compatibility reasons if an `error` is not `nil` and a loading error occurred. To track errors while loading CSS, connect to the `GtkCssProvider`::parsing-error signal.
function Gtk.CssProvider:load_from_path(path) end

--- # method Gtk.CssProvider:load_from_resource()
---
--- Loads the data contained in the resource at `resource_path` into
--- the `GtkCssProvider`, clearing any previously loaded information.
--- 
--- To track errors while loading CSS, connect to the
--- `GtkCssProvider`::parsing-error signal.
---
--- ---
---
---@param self Gtk.CssProvider # a `GtkCssProvider`
---@param resource_path string # a `GResource` resource path
---@return nil
function Gtk.CssProvider:load_from_resource(resource_path) end

--- # method Gtk.CssProvider:to_string()
---
--- Converts the `provider` into a string representation in CSS
--- format.
--- 
--- Using `gtk_css_provider_load_from_data()` with the return value
--- from this function on a new provider created with
--- `gtk_css_provider_new()` will basically create a duplicate of
--- this `provider`.
---
--- ---
---
---@param self Gtk.CssProvider # the provider to write to a string
---@return string # a new string representing the `provider`.
function Gtk.CssProvider:to_string() end

--- # function Gtk.CssProvider.get_default()
---
--- Returns the provider containing the style settings used as a
--- fallback for all widgets.
---
--- ---
---
---@return Gtk.CssProvider # The provider used for fallback styling. This memory is owned by GTK+, and you must not free it.
function Gtk.CssProvider.get_default() end

--- # function Gtk.CssProvider.get_named()
---
--- Loads a theme from the usual theme paths
---
--- ---
---
---@param name string # A theme name
---@param variant? string # variant to load, for example, "dark", or `nil` for the default
---@return Gtk.CssProvider # a `GtkCssProvider` with the theme loaded. This memory is owned by GTK+, and you must not free it.
function Gtk.CssProvider.get_named(name, variant) end

--- # function Gtk.CssProvider.new()
---
--- Returns a newly created `GtkCssProvider`.
---
--- ---
---
---@return Gtk.CssProvider # A new `GtkCssProvider`
function Gtk.CssProvider.new() end

--- # record Gtk.CssProviderClass
---
---@class Gtk.CssProviderClass
---@field parent_class GObject.ObjectClass
---@field parsing_error fun(provider: Gtk.CssProvider, section: Gtk.CssSection, error: GLib.Error): nil
Gtk.CssProviderClass = {}

---@enum Gtk.CssProviderError
Gtk.CssProviderError = {}

--- # record Gtk.CssProviderPrivate
---
---@class Gtk.CssProviderPrivate
Gtk.CssProviderPrivate = {}

--- # record Gtk.CssSection
---
--- Defines a part of a CSS document. Because sections are nested into
--- one another, you can use `gtk_css_section_get_parent()` to get the
--- containing region.
---
--- ---
---
---@class Gtk.CssSection
Gtk.CssSection = {}

--- # method Gtk.CssSection:get_end_line()
---
--- Returns the line in the CSS document where this section end.
--- The line number is 0-indexed, so the first line of the document
--- will return 0.
--- This value may change in future invocations of this function if
--- `section` is not yet parsed completely. This will for example
--- happen in the GtkCssProvider::parsing-error signal.
--- The end position and line may be identical to the start
--- position and line for sections which failed to parse anything
--- successfully.
---
--- ---
---
---@param self Gtk.CssSection # the section
---@return integer # the line number
function Gtk.CssSection:get_end_line() end

--- # method Gtk.CssSection:get_end_position()
---
--- Returns the offset in bytes from the start of the current line
--- returned via `gtk_css_section_get_end_line()`.
--- This value may change in future invocations of this function if
--- `section` is not yet parsed completely. This will for example
--- happen in the GtkCssProvider::parsing-error signal.
--- The end position and line may be identical to the start
--- position and line for sections which failed to parse anything
--- successfully.
---
--- ---
---
---@param self Gtk.CssSection # the section
---@return integer # the offset in bytes from the start of the line.
function Gtk.CssSection:get_end_position() end

--- # method Gtk.CssSection:get_file()
---
--- Gets the file that `section` was parsed from. If no such file exists,
--- for example because the CSS was loaded via
--- `gtk_css_provider_load_from_data`(), then `nil` is returned.
---
--- ---
---
---@param self Gtk.CssSection # the section
---@return Gio.File # the `GFile` that `section` was parsed from or `nil` if `section` was parsed from other data
function Gtk.CssSection:get_file() end

--- # method Gtk.CssSection:get_parent()
---
--- Gets the parent section for the given `section`. The parent section is
--- the section that contains this `section`. A special case are sections of
--- type `GTK_CSS_SECTION_DOCUMENT`. Their parent will either be `nil`
--- if they are the original CSS document that was loaded by
--- `gtk_css_provider_load_from_file()` or a section of type
--- `GTK_CSS_SECTION_IMPORT` if it was loaded with an import rule from
--- a different file.
---
--- ---
---
---@param self Gtk.CssSection # the section
---@return Gtk.CssSection # the parent section or `nil` if none
function Gtk.CssSection:get_parent() end

--- # method Gtk.CssSection:get_section_type()
---
--- Gets the type of information that `section` describes.
---
--- ---
---
---@param self Gtk.CssSection # the section
---@return Gtk.CssSectionType # the type of `section`
function Gtk.CssSection:get_section_type() end

--- # method Gtk.CssSection:get_start_line()
---
--- Returns the line in the CSS document where this section starts.
--- The line number is 0-indexed, so the first line of the document
--- will return 0.
---
--- ---
---
---@param self Gtk.CssSection # the section
---@return integer # the line number
function Gtk.CssSection:get_start_line() end

--- # method Gtk.CssSection:get_start_position()
---
--- Returns the offset in bytes from the start of the current line
--- returned via `gtk_css_section_get_start_line()`.
---
--- ---
---
---@param self Gtk.CssSection # the section
---@return integer # the offset in bytes from the start of the line.
function Gtk.CssSection:get_start_position() end

--- # method Gtk.CssSection:ref()
---
--- Increments the reference count on `section`.
---
--- ---
---
---@param self Gtk.CssSection # a `GtkCssSection`
---@return Gtk.CssSection # `section` itself.
function Gtk.CssSection:ref() end

--- # method Gtk.CssSection:unref()
---
--- Decrements the reference count on `section`, freeing the
--- structure if the reference count reaches 0.
---
--- ---
---
---@param self Gtk.CssSection # a `GtkCssSection`
---@return nil
function Gtk.CssSection:unref() end

---@enum Gtk.CssSectionType
Gtk.CssSectionType = {}

---@enum Gtk.DebugFlag
Gtk.DebugFlag = {}

---@enum Gtk.DeleteType
Gtk.DeleteType = {}

---@enum Gtk.DestDefaults
Gtk.DestDefaults = {}

--- # class Gtk.Dialog
---
--- Dialog boxes are a convenient way to prompt the user for a small amount
--- of input, e.g. to display a message, ask a question, or anything else
--- that does not require extensive effort on the user’s part.
--- 
--- GTK+ treats a dialog as a window split vertically. The top section is a
--- `GtkVBox`, and is where widgets such as a `GtkLabel` or a `GtkEntry` should
--- be packed. The bottom area is known as the
--- “action area”. This is generally used for
--- packing buttons into the dialog which may perform functions such as
--- cancel, ok, or apply.
--- 
--- `GtkDialog` boxes are created with a call to `gtk_dialog_new()` or
--- `gtk_dialog_new_with_buttons()`. `gtk_dialog_new_with_buttons()` is
--- recommended; it allows you to set the dialog title, some convenient
--- flags, and add simple buttons.
--- 
--- If “dialog” is a newly created dialog, the two primary areas of the
--- window can be accessed through `gtk_dialog_get_content_area()` and
--- `gtk_dialog_get_action_area()`, as can be seen from the example below.
--- 
--- A “modal” dialog (that is, one which freezes the rest of the application
--- from user input), can be created by calling `gtk_window_set_modal()` on the
--- dialog. Use the GTK_WINDOW() macro to cast the widget returned from
--- `gtk_dialog_new()` into a `GtkWindow`. When using `gtk_dialog_new_with_buttons()`
--- you can also pass the `GTK_DIALOG_MODAL` flag to make a dialog modal.
--- 
--- If you add buttons to `GtkDialog` using `gtk_dialog_new_with_buttons()`,
--- `gtk_dialog_add_button()`, `gtk_dialog_add_buttons()`, or
--- `gtk_dialog_add_action_widget()`, clicking the button will emit a signal
--- called `GtkDialog`::response with a response ID that you specified. GTK+
--- will never assign a meaning to positive response IDs; these are entirely
--- user-defined. But for convenience, you can use the response IDs in the
--- `GtkResponseType` enumeration (these all have values less than zero). If
--- a dialog receives a delete event, the `GtkDialog`::response signal will
--- be emitted with a response ID of `GTK_RESPONSE_DELETE_EVENT`.
--- 
--- If you want to block waiting for a dialog to return before returning
--- control flow to your code, you can call `gtk_dialog_run()`. This function
--- enters a recursive main loop and waits for the user to respond to the
--- dialog, returning the response ID corresponding to the button the user
--- clicked.
--- 
--- For the simple dialog in the following example, in reality you’d probably
--- use `GtkMessageDialog` to save yourself some effort. But you’d need to
--- create the dialog contents manually if you had more than a simple message
--- in the dialog.
--- 
--- An example for simple GtkDialog usage:
--- ```c
--- // Function to open a dialog box with a message
--- void
--- quick_message (GtkWindow *parent, gchar *message)
--- {
---  GtkWidget *dialog, *label, *content_area;
---  GtkDialogFlags flags;
--- 
---  // Create the widgets
---  flags = GTK_DIALOG_DESTROY_WITH_PARENT;
---  dialog = gtk_dialog_new_with_buttons ("Message",
---                                        parent,
---                                        flags,
---                                        _("_OK"),
---                                        GTK_RESPONSE_NONE,
---                                        NULL);
---  content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));
---  label = gtk_label_new (message);
--- 
---  // Ensure that the dialog box is destroyed when the user responds
--- 
---  g_signal_connect_swapped (dialog,
---                            "response",
---                            G_CALLBACK (gtk_widget_destroy),
---                            dialog);
--- 
---  // Add the label, and show everything we’ve added
--- 
---  gtk_container_add (GTK_CONTAINER (content_area), label);
---  gtk_widget_show_all (dialog);
--- }
--- ```
--- 
--- # GtkDialog as GtkBuildable
--- 
--- The GtkDialog implementation of the `GtkBuildable` interface exposes the
--- `vbox` and `action_area` as internal children with the names “vbox” and
--- “action_area”.
--- 
--- GtkDialog supports a custom `<action-widgets>` element, which can contain
--- multiple `<action-widget>` elements. The “response” attribute specifies a
--- numeric response, and the content of the element is the id of widget
--- (which should be a child of the dialogs `action_area`). To mark a response
--- as default, set the “default“ attribute of the `<action-widget>` element
--- to true.
--- 
--- GtkDialog supports adding action widgets by specifying “action“ as
--- the “type“ attribute of a `<child>` element. The widget will be added
--- either to the action area or the headerbar of the dialog, depending
--- on the “use-header-bar“ property. The response id has to be associated
--- with the action widget using the `<action-widgets>` element.
--- 
--- An example of a `GtkDialog` UI definition fragment:
--- 
--- ```xml
--- <object class="GtkDialog" id="dialog1">
---   <child type="action">
---     <object class="GtkButton" id="button_cancel"/>
---   </child>
---   <child type="action">
---     <object class="GtkButton" id="button_ok">
---       <property name="can-default">True</property>
---     </object>
---   </child>
---   <action-widgets>
---     <action-widget response="cancel">button_cancel</action-widget>
---     <action-widget response="ok" default="true">button_ok</action-widget>
---   </action-widgets>
--- </object>
--- ```
---
--- ---
---
---@class Gtk.Dialog : Gtk.Window, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field window Gtk.Window
---@field priv Gtk.DialogPrivate
---@operator call: Gtk.Dialog
Gtk.Dialog = {}

--- # method Gtk.Dialog:add_action_widget()
---
--- Adds an activatable widget to the action area of a `GtkDialog`,
--- connecting a signal handler that will emit the `GtkDialog`::response
--- signal on the dialog when the widget is activated. The widget is
--- appended to the end of the dialog’s action area. If you want to add a
--- non-activatable widget, simply pack it into the `action_area` field
--- of the `GtkDialog` struct.
---
--- ---
---
---@param self Gtk.Dialog # a `GtkDialog`
---@param child Gtk.Widget # an activatable widget
---@param response_id integer # response ID for `child`
---@return nil
function Gtk.Dialog:add_action_widget(child, response_id) end

--- # method Gtk.Dialog:add_button()
---
--- Adds a button with the given text and sets things up so that
--- clicking the button will emit the `GtkDialog`::response signal with
--- the given `response_id`. The button is appended to the end of the
--- dialog’s action area. The button widget is returned, but usually
--- you don’t need it.
---
--- ---
---
---@param self Gtk.Dialog # a `GtkDialog`
---@param button_text string # text of button
---@param response_id integer # response ID for the button
---@return Gtk.Widget # the `GtkButton` widget that was added
function Gtk.Dialog:add_button(button_text, response_id) end

--- # method Gtk.Dialog:get_action_area()
---
--- Returns the action area of `dialog`.
---
--- ---
---
---@param self Gtk.Dialog # a `GtkDialog`
---@return Gtk.Box # the action area
function Gtk.Dialog:get_action_area() end

--- # method Gtk.Dialog:get_content_area()
---
--- Returns the content area of `dialog`.
---
--- ---
---
---@param self Gtk.Dialog # a `GtkDialog`
---@return Gtk.Box # the content area `GtkBox`.
function Gtk.Dialog:get_content_area() end

--- # method Gtk.Dialog:get_header_bar()
---
--- Returns the header bar of `dialog`. Note that the
--- headerbar is only used by the dialog if the
--- `GtkDialog`:use-header-bar property is `true`.
---
--- ---
---
---@param self Gtk.Dialog # a `GtkDialog`
---@return Gtk.HeaderBar # the header bar
function Gtk.Dialog:get_header_bar() end

--- # method Gtk.Dialog:get_response_for_widget()
---
--- Gets the response id of a widget in the action area
--- of a dialog.
---
--- ---
---
---@param self Gtk.Dialog # a `GtkDialog`
---@param widget Gtk.Widget # a widget in the action area of `dialog`
---@return integer # the response id of `widget`, or %GTK_RESPONSE_NONE if `widget` doesn’t have a response id set.
function Gtk.Dialog:get_response_for_widget(widget) end

--- # method Gtk.Dialog:get_widget_for_response()
---
--- Gets the widget button that uses the given response ID in the action area
--- of a dialog.
---
--- ---
---
---@param self Gtk.Dialog # a `GtkDialog`
---@param response_id integer # the response ID used by the `dialog` widget
---@return Gtk.Widget # the `widget` button that uses the given `response_id`, or `nil`.
function Gtk.Dialog:get_widget_for_response(response_id) end

--- # method Gtk.Dialog:response()
---
--- Emits the `GtkDialog`::response signal with the given response ID.
--- Used to indicate that the user has responded to the dialog in some way;
--- typically either you or `gtk_dialog_run()` will be monitoring the
--- ::response signal and take appropriate action.
---
--- ---
---
---@param self Gtk.Dialog # a `GtkDialog`
---@param response_id integer # response ID
---@return nil
function Gtk.Dialog:response(response_id) end

--- # method Gtk.Dialog:run()
---
--- Blocks in a recursive main loop until the `dialog` either emits the
--- `GtkDialog`::response signal, or is destroyed. If the dialog is
--- destroyed during the call to `gtk_dialog_run()`, `gtk_dialog_run()` returns
--- `GTK_RESPONSE_NONE`. Otherwise, it returns the response ID from the
--- ::response signal emission.
--- 
--- Before entering the recursive main loop, `gtk_dialog_run()` calls
--- `gtk_widget_show()` on the dialog for you. Note that you still
--- need to show any children of the dialog yourself.
--- 
--- During `gtk_dialog_run()`, the default behavior of `GtkWidget`::delete-event
--- is disabled; if the dialog receives ::delete_event, it will not be
--- destroyed as windows usually are, and `gtk_dialog_run()` will return
--- `GTK_RESPONSE_DELETE_EVENT`. Also, during `gtk_dialog_run()` the dialog
--- will be modal. You can force `gtk_dialog_run()` to return at any time by
--- calling `gtk_dialog_response()` to emit the ::response signal. Destroying
--- the dialog during `gtk_dialog_run()` is a very bad idea, because your
--- post-run code won’t know whether the dialog was destroyed or not.
--- 
--- After `gtk_dialog_run()` returns, you are responsible for hiding or
--- destroying the dialog if you wish to do so.
--- 
--- Typical usage of this function might be:
--- ```c
---   GtkWidget *dialog = gtk_dialog_new ();
---   // Set up dialog...
--- 
---   int result = gtk_dialog_run (GTK_DIALOG (dialog));
---   switch (result)
---     {
---       case GTK_RESPONSE_ACCEPT:
---          // do_application_specific_something ();
---          break;
---       default:
---          // do_nothing_since_dialog_was_cancelled ();
---          break;
---     }
---   gtk_widget_destroy (dialog);
--- ```
--- 
--- Note that even though the recursive main loop gives the effect of a
--- modal dialog (it prevents the user from interacting with other
--- windows in the same window group while the dialog is run), callbacks
--- such as timeouts, IO channel watches, DND drops, etc, will
--- be triggered during a `gtk_dialog_run()` call.
---
--- ---
---
---@param self Gtk.Dialog # a `GtkDialog`
---@return integer # response ID
function Gtk.Dialog:run() end

--- # method Gtk.Dialog:set_alternative_button_order_from_array()
---
--- Sets an alternative button order. If the
--- `GtkSettings`:gtk-alternative-button-order setting is set to `true`,
--- the dialog buttons are reordered according to the order of the
--- response ids in `new_order`.
--- 
--- See `gtk_dialog_set_alternative_button_order()` for more information.
--- 
--- This function is for use by language bindings.
---
--- ---
---
---@param self Gtk.Dialog # a `GtkDialog`
---@param n_params integer # the number of response ids in `new_order`
---@param new_order unknown[] # an array of response ids of `dialog`’s buttons
---@return nil
function Gtk.Dialog:set_alternative_button_order_from_array(n_params, new_order) end

--- # method Gtk.Dialog:set_default_response()
---
--- Sets the last widget in the dialog’s action area with the given `response_id`
--- as the default widget for the dialog. Pressing “Enter” normally activates
--- the default widget.
---
--- ---
---
---@param self Gtk.Dialog # a `GtkDialog`
---@param response_id integer # a response ID
---@return nil
function Gtk.Dialog:set_default_response(response_id) end

--- # method Gtk.Dialog:set_response_sensitive()
---
--- Calls `gtk_widget_set_sensitive (widget, `setting`)`
--- for each widget in the dialog’s action area with the given `response_id`.
--- A convenient way to sensitize/desensitize dialog buttons.
---
--- ---
---
---@param self Gtk.Dialog # a `GtkDialog`
---@param response_id integer # a response ID
---@param setting (boolean|nil) # `true` for sensitive
---@return nil
function Gtk.Dialog:set_response_sensitive(response_id, setting) end

--- # function Gtk.Dialog.new()
---
--- Creates a new dialog box.
--- 
--- Widgets should not be packed into this `GtkWindow`
--- directly, but into the `vbox` and `action_area`, as described above.
---
--- ---
---
---@return Gtk.Widget # the new dialog as a `GtkWidget`
function Gtk.Dialog.new() end

--- # record Gtk.DialogClass
---
---@class Gtk.DialogClass
---@field parent_class Gtk.WindowClass # The parent class.
---@field response fun(dialog: Gtk.Dialog, response_id: integer): nil
---@field close fun(dialog: Gtk.Dialog): nil
Gtk.DialogClass = {}

---@enum Gtk.DialogFlags
Gtk.DialogFlags = {}

--- # record Gtk.DialogPrivate
---
---@class Gtk.DialogPrivate
Gtk.DialogPrivate = {}

---@enum Gtk.DirectionType
Gtk.DirectionType = {}

---@enum Gtk.DragResult
Gtk.DragResult = {}

--- # class Gtk.DrawingArea
---
--- The `GtkDrawingArea` widget is used for creating custom user interface
--- elements. It’s essentially a blank widget; you can draw on it. After
--- creating a drawing area, the application may want to connect to:
--- 
--- - Mouse and button press signals to respond to input from
---   the user. (Use `gtk_widget_add_events()` to enable events
---   you wish to receive.)
--- 
--- - The `GtkWidget`::realize signal to take any necessary actions
---   when the widget is instantiated on a particular display.
---   (Create GDK resources in response to this signal.)
--- 
--- - The `GtkWidget`::size-allocate signal to take any necessary
---   actions when the widget changes size.
--- 
--- - The `GtkWidget`::draw signal to handle redrawing the
---   contents of the widget.
--- 
--- The following code portion demonstrates using a drawing
--- area to display a circle in the normal widget foreground
--- color.
--- 
--- Note that GDK automatically clears the exposed area before sending
--- the expose event, and that drawing is implicitly clipped to the exposed
--- area. If you want to have a theme-provided background, you need
--- to call `gtk_render_background()` in your ::draw method.
--- 
--- ## Simple GtkDrawingArea usage
--- 
--- ```c
--- gboolean
--- draw_callback (GtkWidget *widget, cairo_t *cr, gpointer data)
--- {
---   guint width, height;
---   GdkRGBA color;
---   GtkStyleContext *context;
--- 
---   context = gtk_widget_get_style_context (widget);
--- 
---   width = gtk_widget_get_allocated_width (widget);
---   height = gtk_widget_get_allocated_height (widget);
--- 
---   gtk_render_background (context, cr, 0, 0, width, height);
--- 
---   cairo_arc (cr,
---              width / 2.0, height / 2.0,
---              MIN (width, height) / 2.0,
---              0, 2 * G_PI);
--- 
---   gtk_style_context_get_color (context,
---                                gtk_style_context_get_state (context),
---                                &color);
---   gdk_cairo_set_source_rgba (cr, &color);
--- 
---   cairo_fill (cr);
--- 
---  return FALSE;
--- }
--- [...]
---   GtkWidget *drawing_area = gtk_drawing_area_new ();
---   gtk_widget_set_size_request (drawing_area, 100, 100);
---   g_signal_connect (G_OBJECT (drawing_area), "draw",
---                     G_CALLBACK (draw_callback), NULL);
--- ```
--- 
--- Draw signals are normally delivered when a drawing area first comes
--- onscreen, or when it’s covered by another window and then uncovered.
--- You can also force an expose event by adding to the “damage region”
--- of the drawing area’s window; `gtk_widget_queue_draw_area()` and
--- `gdk_window_invalidate_rect()` are equally good ways to do this.
--- You’ll then get a draw signal for the invalid region.
--- 
--- The available routines for drawing are documented on the
--- [GDK Drawing Primitives][gdk3-Cairo-Interaction] page
--- and the cairo documentation.
--- 
--- To receive mouse events on a drawing area, you will need to enable
--- them with `gtk_widget_add_events()`. To receive keyboard events, you
--- will need to set the “can-focus” property on the drawing area, and you
--- should probably draw some user-visible indication that the drawing
--- area is focused. Use `gtk_widget_has_focus()` in your expose event
--- handler to decide whether to draw the focus indicator. See
--- `gtk_render_focus()` for one way to draw focus.
---
--- ---
---
---@class Gtk.DrawingArea : Gtk.Widget, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field widget Gtk.Widget
---@field dummy userdata
---@operator call: Gtk.DrawingArea
Gtk.DrawingArea = {}

--- # function Gtk.DrawingArea.new()
---
--- Creates a new drawing area.
---
--- ---
---
---@return Gtk.Widget # a new `GtkDrawingArea`
function Gtk.DrawingArea.new() end

--- # record Gtk.DrawingAreaClass
---
---@class Gtk.DrawingAreaClass
---@field parent_class Gtk.WidgetClass
Gtk.DrawingAreaClass = {}

--- # interface Gtk.Editable
---
--- The `GtkEditable` interface is an interface which should be implemented by
--- text editing widgets, such as `GtkEntry` and `GtkSpinButton`. It contains functions
--- for generically manipulating an editable widget, a large number of action
--- signals used for key bindings, and several signals that an application can
--- connect to to modify the behavior of a widget.
--- 
--- As an example of the latter usage, by connecting
--- the following handler to `GtkEditable`::insert-text, an application
--- can convert all entry into a widget into uppercase.
--- 
--- ## Forcing entry to uppercase.
--- 
--- ```c
--- `include` <ctype.h>;
--- 
--- void
--- insert_text_handler (GtkEditable *editable,
---                      const gchar *text,
---                      gint         length,
---                      gint        *position,
---                      gpointer     data)
--- {
---   gchar *result = g_utf8_strup (text, length);
--- 
---   g_signal_handlers_block_by_func (editable,
---                                (gpointer) insert_text_handler, data);
---   gtk_editable_insert_text (editable, result, length, position);
---   g_signal_handlers_unblock_by_func (editable,
---                                      (gpointer) insert_text_handler, data);
--- 
---   g_signal_stop_emission_by_name (editable, "insert_text");
--- 
---   g_free (result);
--- }
--- ```
---
--- ---
---
---@class Gtk.Editable
Gtk.Editable = {}

--- # method Gtk.Editable:copy_clipboard()
---
--- Copies the contents of the currently selected content in the editable and
--- puts it on the clipboard.
---
--- ---
---
---@param self Gtk.Editable # a `GtkEditable`
---@return nil
function Gtk.Editable:copy_clipboard() end

--- # method Gtk.Editable:cut_clipboard()
---
--- Removes the contents of the currently selected content in the editable and
--- puts it on the clipboard.
---
--- ---
---
---@param self Gtk.Editable # a `GtkEditable`
---@return nil
function Gtk.Editable:cut_clipboard() end

--- # method Gtk.Editable:delete_selection()
---
--- Deletes the currently selected text of the editable.
--- This call doesn’t do anything if there is no selected text.
---
--- ---
---
---@param self Gtk.Editable # a `GtkEditable`
---@return nil
function Gtk.Editable:delete_selection() end

--- # method Gtk.Editable:delete_text()
---
--- Deletes a sequence of characters. The characters that are deleted are
--- those characters at positions from `start_pos` up to, but not including
--- `end_pos`. If `end_pos` is negative, then the characters deleted
--- are those from `start_pos` to the end of the text.
--- 
--- Note that the positions are specified in characters, not bytes.
---
--- ---
---
---@param self Gtk.Editable # a `GtkEditable`
---@param start_pos integer # start position
---@param end_pos integer # end position
---@return nil
function Gtk.Editable:delete_text(start_pos, end_pos) end

--- # method Gtk.Editable:get_chars()
---
--- Retrieves a sequence of characters. The characters that are retrieved
--- are those characters at positions from `start_pos` up to, but not
--- including `end_pos`. If `end_pos` is negative, then the characters
--- retrieved are those characters from `start_pos` to the end of the text.
--- 
--- Note that positions are specified in characters, not bytes.
---
--- ---
---
---@param self Gtk.Editable # a `GtkEditable`
---@param start_pos integer # start of text
---@param end_pos integer # end of text
---@return string # a pointer to the contents of the widget as a string. This string is allocated by the `GtkEditable` implementation and should be freed by the caller.
function Gtk.Editable:get_chars(start_pos, end_pos) end

--- # method Gtk.Editable:get_editable()
---
--- Retrieves whether `editable` is editable. See
--- `gtk_editable_set_editable()`.
---
--- ---
---
---@param self Gtk.Editable # a `GtkEditable`
---@return (boolean|nil) # `true` if `editable` is editable.
function Gtk.Editable:get_editable() end

--- # method Gtk.Editable:get_position()
---
--- Retrieves the current position of the cursor relative to the start
--- of the content of the editable.
--- 
--- Note that this position is in characters, not in bytes.
---
--- ---
---
---@param self Gtk.Editable # a `GtkEditable`
---@return integer # the cursor position
function Gtk.Editable:get_position() end

--- # method Gtk.Editable:get_selection_bounds()
---
--- Retrieves the selection bound of the editable. start_pos will be filled
--- with the start of the selection and `end_pos` with end. If no text was
--- selected both will be identical and `false` will be returned.
--- 
--- Note that positions are specified in characters, not bytes.
---
--- ---
---
---@param self Gtk.Editable # a `GtkEditable`
---@param start_pos? integer # location to store the starting position, or `nil`
---@param end_pos? integer # location to store the end position, or `nil`
---@return (boolean|nil) # `true` if an area is selected, `false` otherwise
function Gtk.Editable:get_selection_bounds(start_pos, end_pos) end

--- # method Gtk.Editable:insert_text()
---
--- Inserts `new_text_length` bytes of `new_text` into the contents of the
--- widget, at position `position`.
--- 
--- Note that the position is in characters, not in bytes.
--- The function updates `position` to point after the newly inserted text.
---
--- ---
---
---@param self Gtk.Editable # a `GtkEditable`
---@param new_text string # the text to append
---@param new_text_length integer # the length of the text in bytes, or -1
---@param position integer # location of the position text will be inserted at
---@return nil
function Gtk.Editable:insert_text(new_text, new_text_length, position) end

--- # method Gtk.Editable:paste_clipboard()
---
--- Pastes the content of the clipboard to the current position of the
--- cursor in the editable.
---
--- ---
---
---@param self Gtk.Editable # a `GtkEditable`
---@return nil
function Gtk.Editable:paste_clipboard() end

--- # method Gtk.Editable:select_region()
---
--- Selects a region of text. The characters that are selected are
--- those characters at positions from `start_pos` up to, but not
--- including `end_pos`. If `end_pos` is negative, then the
--- characters selected are those characters from `start_pos` to
--- the end of the text.
--- 
--- Note that positions are specified in characters, not bytes.
---
--- ---
---
---@param self Gtk.Editable # a `GtkEditable`
---@param start_pos integer # start of region
---@param end_pos integer # end of region
---@return nil
function Gtk.Editable:select_region(start_pos, end_pos) end

--- # method Gtk.Editable:set_editable()
---
--- Determines if the user can edit the text in the editable
--- widget or not.
---
--- ---
---
---@param self Gtk.Editable # a `GtkEditable`
---@param is_editable (boolean|nil) # `true` if the user is allowed to edit the text in the widget
---@return nil
function Gtk.Editable:set_editable(is_editable) end

--- # method Gtk.Editable:set_position()
---
--- Sets the cursor position in the editable to the given value.
--- 
--- The cursor is displayed before the character with the given (base 0)
--- index in the contents of the editable. The value must be less than or
--- equal to the number of characters in the editable. A value of -1
--- indicates that the position should be set after the last character
--- of the editable. Note that `position` is in characters, not in bytes.
---
--- ---
---
---@param self Gtk.Editable # a `GtkEditable`
---@param position integer # the position of the cursor
---@return nil
function Gtk.Editable:set_position(position) end

--- # record Gtk.EditableInterface
---
---@class Gtk.EditableInterface
---@field base_iface GObject.TypeInterface
---@field insert_text fun(editable: Gtk.Editable, new_text: string, new_text_length: integer, position: integer): nil
---@field delete_text fun(editable: Gtk.Editable, start_pos: integer, end_pos: integer): nil
---@field changed fun(editable: Gtk.Editable): nil
---@field do_insert_text fun(editable: Gtk.Editable, new_text: string, new_text_length: integer, position: integer): nil
---@field do_delete_text fun(editable: Gtk.Editable, start_pos: integer, end_pos: integer): nil
---@field get_chars fun(editable: Gtk.Editable, start_pos: integer, end_pos: integer): string
---@field set_selection_bounds fun(editable: Gtk.Editable, start_pos: integer, end_pos: integer): nil
---@field get_selection_bounds fun(editable: Gtk.Editable, start_pos: integer, end_pos: integer): (boolean|nil)
---@field set_position fun(editable: Gtk.Editable, position: integer): nil
---@field get_position fun(editable: Gtk.Editable): integer
Gtk.EditableInterface = {}

--- # class Gtk.Entry
---
--- The `GtkEntry` widget is a single line text entry
--- widget. A fairly large set of key bindings are supported
--- by default. If the entered text is longer than the allocation
--- of the widget, the widget will scroll so that the cursor
--- position is visible.
--- 
--- When using an entry for passwords and other sensitive information,
--- it can be put into “password mode” using `gtk_entry_set_visibility()`.
--- In this mode, entered text is displayed using a “invisible” character.
--- By default, GTK+ picks the best invisible character that is available
--- in the current font, but it can be changed with
--- `gtk_entry_set_invisible_char()`. Since 2.16, GTK+ displays a warning
--- when Caps Lock or input methods might interfere with entering text in
--- a password entry. The warning can be turned off with the
--- `GtkEntry`:caps-lock-warning property.
--- 
--- Since 2.16, GtkEntry has the ability to display progress or activity
--- information behind the text. To make an entry display such information,
--- use `gtk_entry_set_progress_fraction()` or `gtk_entry_set_progress_pulse_step()`.
--- 
--- Additionally, GtkEntry can show icons at either side of the entry. These
--- icons can be activatable by clicking, can be set up as drag source and
--- can have tooltips. To add an icon, use `gtk_entry_set_icon_from_gicon()` or
--- one of the various other functions that set an icon from a stock id, an
--- icon name or a pixbuf. To trigger an action when the user clicks an icon,
--- connect to the `GtkEntry`::icon-press signal. To allow DND operations
--- from an icon, use `gtk_entry_set_icon_drag_source()`. To set a tooltip on
--- an icon, use `gtk_entry_set_icon_tooltip_text()` or the corresponding function
--- for markup.
--- 
--- Note that functionality or information that is only available by clicking
--- on an icon in an entry may not be accessible at all to users which are not
--- able to use a mouse or other pointing device. It is therefore recommended
--- that any such functionality should also be available by other means, e.g.
--- via the context menu of the entry.
--- 
--- # CSS nodes
--- 
--- ```plain
--- entry[.read-only][.flat][.warning][.error]
--- ├── image.left
--- ├── image.right
--- ├── undershoot.left
--- ├── undershoot.right
--- ├── [selection]
--- ├── [progress[.pulse]]
--- ╰── [window.popup]
--- ```
--- 
--- GtkEntry has a main node with the name entry. Depending on the properties
--- of the entry, the style classes .read-only and .flat may appear. The style
--- classes .warning and .error may also be used with entries.
--- 
--- When the entry shows icons, it adds subnodes with the name image and the
--- style class .left or .right, depending on where the icon appears.
--- 
--- When the entry has a selection, it adds a subnode with the name selection.
--- 
--- When the entry shows progress, it adds a subnode with the name progress.
--- The node has the style class .pulse when the shown progress is pulsing.
--- 
--- The CSS node for a context menu is added as a subnode below entry as well.
--- 
--- The undershoot nodes are used to draw the underflow indication when content
--- is scrolled out of view. These nodes get the .left and .right style classes
--- added depending on where the indication is drawn.
--- 
--- When touch is used and touch selection handles are shown, they are using
--- CSS nodes with name cursor-handle. They get the .top or .bottom style class
--- depending on where they are shown in relation to the selection. If there is
--- just a single handle for the text cursor, it gets the style class
--- .insertion-cursor.
---
--- ---
---
---@class Gtk.Entry : Gtk.Widget, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.CellEditable, Gtk.Editable
---@field parent_instance Gtk.Widget
---@field priv Gtk.EntryPrivate
---@operator call: Gtk.Entry
Gtk.Entry = {}

--- # method Gtk.Entry:get_activates_default()
---
--- Retrieves the value set by `gtk_entry_set_activates_default()`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return (boolean|nil) # `true` if the entry will activate the default widget
function Gtk.Entry:get_activates_default() end

--- # method Gtk.Entry:get_alignment()
---
--- Gets the value set by `gtk_entry_set_alignment()`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return number # the alignment
function Gtk.Entry:get_alignment() end

--- # method Gtk.Entry:get_attributes()
---
--- Gets the attribute list that was set on the entry using
--- `gtk_entry_set_attributes()`, if any.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return Pango.AttrList # the attribute list, or `nil` if none was set.
function Gtk.Entry:get_attributes() end

--- # method Gtk.Entry:get_buffer()
---
--- Get the `GtkEntryBuffer` object which holds the text for
--- this widget.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return Gtk.EntryBuffer # A `GtkEntryBuffer` object.
function Gtk.Entry:get_buffer() end

--- # method Gtk.Entry:get_completion()
---
--- Returns the auxiliary completion object currently in use by `entry`.
---
--- ---
---
---@param self Gtk.Entry # A `GtkEntry`
---@return Gtk.EntryCompletion # The auxiliary completion object currently in use by `entry`.
function Gtk.Entry:get_completion() end

--- # method Gtk.Entry:get_current_icon_drag_source()
---
--- Returns the index of the icon which is the source of the current
--- DND operation, or -1.
--- 
--- This function is meant to be used in a `GtkWidget`::drag-data-get
--- callback.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return integer # index of the icon which is the source of the current DND operation, or -1.
function Gtk.Entry:get_current_icon_drag_source() end

--- # method Gtk.Entry:get_cursor_hadjustment()
---
--- Retrieves the horizontal cursor adjustment for the entry.
--- See `gtk_entry_set_cursor_hadjustment()`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return Gtk.Adjustment # the horizontal cursor adjustment, or `nil` if none has been set.
function Gtk.Entry:get_cursor_hadjustment() end

--- # method Gtk.Entry:get_has_frame()
---
--- Gets the value set by `gtk_entry_set_has_frame()`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return (boolean|nil) # whether the entry has a beveled frame
function Gtk.Entry:get_has_frame() end

--- # method Gtk.Entry:get_icon_activatable()
---
--- Returns whether the icon is activatable.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # Icon position
---@return (boolean|nil) # `true` if the icon is activatable.
function Gtk.Entry:get_icon_activatable(icon_pos) end

--- # method Gtk.Entry:get_icon_area()
---
--- Gets the area where entry’s icon at `icon_pos` is drawn.
--- This function is useful when drawing something to the
--- entry in a draw callback.
--- 
--- If the entry is not realized or has no icon at the given position,
--- `icon_area` is filled with zeros. Otherwise, `icon_area` will be filled
--- with the icon’s allocation, relative to `entry`’s allocation.
--- 
--- See also `gtk_entry_get_text_area()`
---
--- ---
---
---@param self Gtk.Entry # A `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # Icon position
---@param icon_area Gdk.Rectangle # Return location for the icon’s area
---@return nil
function Gtk.Entry:get_icon_area(icon_pos, icon_area) end

--- # method Gtk.Entry:get_icon_at_pos()
---
--- Finds the icon at the given position and return its index. The
--- position’s coordinates are relative to the `entry`’s top left corner.
--- If `x`, `y` doesn’t lie inside an icon, -1 is returned.
--- This function is intended for use in a `GtkWidget`::query-tooltip
--- signal handler.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param x integer # the x coordinate of the position to find
---@param y integer # the y coordinate of the position to find
---@return integer # the index of the icon at the given position, or -1
function Gtk.Entry:get_icon_at_pos(x, y) end

--- # method Gtk.Entry:get_icon_gicon()
---
--- Retrieves the `GIcon` used for the icon, or `nil` if there is
--- no icon or if the icon was set by some other method (e.g., by
--- stock, pixbuf, or icon name).
---
--- ---
---
---@param self Gtk.Entry # A `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # Icon position
---@return Gio.Icon # A `GIcon`, or `nil` if no icon is set or if the icon is not a `GIcon`
function Gtk.Entry:get_icon_gicon(icon_pos) end

--- # method Gtk.Entry:get_icon_name()
---
--- Retrieves the icon name used for the icon, or `nil` if there is
--- no icon or if the icon was set by some other method (e.g., by
--- pixbuf, stock or gicon).
---
--- ---
---
---@param self Gtk.Entry # A `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # Icon position
---@return string # An icon name, or `nil` if no icon is set or if the icon wasn’t set from an icon name
function Gtk.Entry:get_icon_name(icon_pos) end

--- # method Gtk.Entry:get_icon_pixbuf()
---
--- Retrieves the image used for the icon.
--- 
--- Unlike the other methods of setting and getting icon data, this
--- method will work regardless of whether the icon was set using a
--- `GdkPixbuf`, a `GIcon`, a stock item, or an icon name.
---
--- ---
---
---@param self Gtk.Entry # A `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # Icon position
---@return GdkPixbuf.Pixbuf # A `GdkPixbuf`, or `nil` if no icon is set for this position.
function Gtk.Entry:get_icon_pixbuf(icon_pos) end

--- # method Gtk.Entry:get_icon_sensitive()
---
--- Returns whether the icon appears sensitive or insensitive.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # Icon position
---@return (boolean|nil) # `true` if the icon is sensitive.
function Gtk.Entry:get_icon_sensitive(icon_pos) end

--- # method Gtk.Entry:get_icon_stock()
---
--- Retrieves the stock id used for the icon, or `nil` if there is
--- no icon or if the icon was set by some other method (e.g., by
--- pixbuf, icon name or gicon).
---
--- ---
---
---@param self Gtk.Entry # A `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # Icon position
---@return string # A stock id, or `nil` if no icon is set or if the icon wasn’t set from a stock id
function Gtk.Entry:get_icon_stock(icon_pos) end

--- # method Gtk.Entry:get_icon_storage_type()
---
--- Gets the type of representation being used by the icon
--- to store image data. If the icon has no image data,
--- the return value will be %GTK_IMAGE_EMPTY.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # Icon position
---@return Gtk.ImageType # image representation being used
function Gtk.Entry:get_icon_storage_type(icon_pos) end

--- # method Gtk.Entry:get_icon_tooltip_markup()
---
--- Gets the contents of the tooltip on the icon at the specified
--- position in `entry`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # the icon position
---@return string # the tooltip text, or `nil`. Free the returned string with `g_free()` when done.
function Gtk.Entry:get_icon_tooltip_markup(icon_pos) end

--- # method Gtk.Entry:get_icon_tooltip_text()
---
--- Gets the contents of the tooltip on the icon at the specified
--- position in `entry`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # the icon position
---@return string # the tooltip text, or `nil`. Free the returned string with `g_free()` when done.
function Gtk.Entry:get_icon_tooltip_text(icon_pos) end

--- # method Gtk.Entry:get_inner_border()
---
--- This function returns the entry’s `GtkEntry`:inner-border property. See
--- `gtk_entry_set_inner_border()` for more information.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return Gtk.Border # the entry’s `GtkBorder`, or `nil` if none was set.
function Gtk.Entry:get_inner_border() end

--- # method Gtk.Entry:get_input_hints()
---
--- Gets the value of the `GtkEntry`:input-hints property.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return Gtk.InputHints
function Gtk.Entry:get_input_hints() end

--- # method Gtk.Entry:get_input_purpose()
---
--- Gets the value of the `GtkEntry`:input-purpose property.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return Gtk.InputPurpose
function Gtk.Entry:get_input_purpose() end

--- # method Gtk.Entry:get_invisible_char()
---
--- Retrieves the character displayed in place of the real characters
--- for entries with visibility set to false. See `gtk_entry_set_invisible_char()`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return integer # the current invisible char, or 0, if the entry does not show invisible text at all.
function Gtk.Entry:get_invisible_char() end

--- # method Gtk.Entry:get_layout()
---
--- Gets the `PangoLayout` used to display the entry.
--- The layout is useful to e.g. convert text positions to
--- pixel positions, in combination with `gtk_entry_get_layout_offsets()`.
--- The returned layout is owned by the entry and must not be
--- modified or freed by the caller.
--- 
--- Keep in mind that the layout text may contain a preedit string, so
--- `gtk_entry_layout_index_to_text_index()` and
--- `gtk_entry_text_index_to_layout_index()` are needed to convert byte
--- indices in the layout to byte indices in the entry contents.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return Pango.Layout # the `PangoLayout` for this entry
function Gtk.Entry:get_layout() end

--- # method Gtk.Entry:get_layout_offsets()
---
--- Obtains the position of the `PangoLayout` used to render text
--- in the entry, in widget coordinates. Useful if you want to line
--- up the text in an entry with some other text, e.g. when using the
--- entry to implement editable cells in a sheet widget.
--- 
--- Also useful to convert mouse events into coordinates inside the
--- `PangoLayout`, e.g. to take some action if some part of the entry text
--- is clicked.
--- 
--- Note that as the user scrolls around in the entry the offsets will
--- change; you’ll need to connect to the “notify::scroll-offset”
--- signal to track this. Remember when using the `PangoLayout`
--- functions you need to convert to and from pixels using
--- PANGO_PIXELS() or `PANGO_SCALE`.
--- 
--- Keep in mind that the layout text may contain a preedit string, so
--- `gtk_entry_layout_index_to_text_index()` and
--- `gtk_entry_text_index_to_layout_index()` are needed to convert byte
--- indices in the layout to byte indices in the entry contents.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param x? integer # location to store X offset of layout, or `nil`
---@param y? integer # location to store Y offset of layout, or `nil`
---@return nil
function Gtk.Entry:get_layout_offsets(x, y) end

--- # method Gtk.Entry:get_max_length()
---
--- Retrieves the maximum allowed length of the text in
--- `entry`. See `gtk_entry_set_max_length()`.
--- 
--- This is equivalent to getting `entry`'s `GtkEntryBuffer` and
--- calling `gtk_entry_buffer_get_max_length()` on it.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return integer # the maximum allowed number of characters in `GtkEntry`, or 0 if there is no maximum.
function Gtk.Entry:get_max_length() end

--- # method Gtk.Entry:get_max_width_chars()
---
--- Retrieves the desired maximum width of `entry`, in characters.
--- See `gtk_entry_set_max_width_chars()`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return integer # the maximum width of the entry, in characters
function Gtk.Entry:get_max_width_chars() end

--- # method Gtk.Entry:get_overwrite_mode()
---
--- Gets the value set by `gtk_entry_set_overwrite_mode()`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return (boolean|nil) # whether the text is overwritten when typing.
function Gtk.Entry:get_overwrite_mode() end

--- # method Gtk.Entry:get_placeholder_text()
---
--- Retrieves the text that will be displayed when `entry` is empty and unfocused
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return string # a pointer to the placeholder text as a string. This string points to internally allocated storage in the widget and must not be freed, modified or stored.
function Gtk.Entry:get_placeholder_text() end

--- # method Gtk.Entry:get_progress_fraction()
---
--- Returns the current fraction of the task that’s been completed.
--- See `gtk_entry_set_progress_fraction()`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return number # a fraction from 0.0 to 1.0
function Gtk.Entry:get_progress_fraction() end

--- # method Gtk.Entry:get_progress_pulse_step()
---
--- Retrieves the pulse step set with `gtk_entry_set_progress_pulse_step()`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return number # a fraction from 0.0 to 1.0
function Gtk.Entry:get_progress_pulse_step() end

--- # method Gtk.Entry:get_tabs()
---
--- Gets the tabstops that were set on the entry using `gtk_entry_set_tabs()`, if
--- any.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return Pango.TabArray # the tabstops, or `nil` if none was set.
function Gtk.Entry:get_tabs() end

--- # method Gtk.Entry:get_text()
---
--- Retrieves the contents of the entry widget.
--- See also `gtk_editable_get_chars()`.
--- 
--- This is equivalent to getting `entry`'s `GtkEntryBuffer` and calling
--- `gtk_entry_buffer_get_text()` on it.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return string # a pointer to the contents of the widget as a string. This string points to internally allocated storage in the widget and must not be freed, modified or stored.
function Gtk.Entry:get_text() end

--- # method Gtk.Entry:get_text_area()
---
--- Gets the area where the entry’s text is drawn. This function is
--- useful when drawing something to the entry in a draw callback.
--- 
--- If the entry is not realized, `text_area` is filled with zeros.
--- 
--- See also `gtk_entry_get_icon_area()`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param text_area Gdk.Rectangle # Return location for the text area.
---@return nil
function Gtk.Entry:get_text_area(text_area) end

--- # method Gtk.Entry:get_text_length()
---
--- Retrieves the current length of the text in
--- `entry`.
--- 
--- This is equivalent to getting `entry`'s `GtkEntryBuffer` and
--- calling `gtk_entry_buffer_get_length()` on it.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return integer # the current number of characters in `GtkEntry`, or 0 if there are none.
function Gtk.Entry:get_text_length() end

--- # method Gtk.Entry:get_visibility()
---
--- Retrieves whether the text in `entry` is visible. See
--- `gtk_entry_set_visibility()`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return (boolean|nil) # `true` if the text is currently visible
function Gtk.Entry:get_visibility() end

--- # method Gtk.Entry:get_width_chars()
---
--- Gets the value set by `gtk_entry_set_width_chars()`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return integer # number of chars to request space for, or negative if unset
function Gtk.Entry:get_width_chars() end

--- # method Gtk.Entry:grab_focus_without_selecting()
---
--- Causes `entry` to have keyboard focus.
--- 
--- It behaves like `gtk_widget_grab_focus()`,
--- except that it doesn't select the contents of the entry.
--- You only want to call this on some special entries
--- which the user usually doesn't want to replace all text in,
--- such as search-as-you-type entries.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return nil
function Gtk.Entry:grab_focus_without_selecting() end

--- # method Gtk.Entry:im_context_filter_keypress()
---
--- Allow the `GtkEntry` input method to internally handle key press
--- and release events. If this function returns `true`, then no further
--- processing should be done for this key event. See
--- `gtk_im_context_filter_keypress()`.
--- 
--- Note that you are expected to call this function from your handler
--- when overriding key event handling. This is needed in the case when
--- you need to insert your own key handling between the input method
--- and the default key event handling of the `GtkEntry`.
--- See `gtk_text_view_reset_im_context()` for an example of use.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param event Gdk.EventKey # the key event
---@return (boolean|nil) # `true` if the input method handled the key event.
function Gtk.Entry:im_context_filter_keypress(event) end

--- # method Gtk.Entry:layout_index_to_text_index()
---
--- Converts from a position in the entry’s `PangoLayout` (returned by
--- `gtk_entry_get_layout()`) to a position in the entry contents
--- (returned by `gtk_entry_get_text()`).
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param layout_index integer # byte index into the entry layout text
---@return integer # byte index into the entry contents
function Gtk.Entry:layout_index_to_text_index(layout_index) end

--- # method Gtk.Entry:progress_pulse()
---
--- Indicates that some progress is made, but you don’t know how much.
--- Causes the entry’s progress indicator to enter “activity mode,”
--- where a block bounces back and forth. Each call to
--- `gtk_entry_progress_pulse()` causes the block to move by a little bit
--- (the amount of movement per pulse is determined by
--- `gtk_entry_set_progress_pulse_step()`).
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return nil
function Gtk.Entry:progress_pulse() end

--- # method Gtk.Entry:reset_im_context()
---
--- Reset the input method context of the entry if needed.
--- 
--- This can be necessary in the case where modifying the buffer
--- would confuse on-going input method behavior.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return nil
function Gtk.Entry:reset_im_context() end

--- # method Gtk.Entry:set_activates_default()
---
--- If `setting` is `true`, pressing Enter in the `entry` will activate the default
--- widget for the window containing the entry. This usually means that
--- the dialog box containing the entry will be closed, since the default
--- widget is usually one of the dialog buttons.
--- 
--- (For experts: if `setting` is `true`, the entry calls
--- `gtk_window_activate_default()` on the window containing the entry, in
--- the default handler for the `GtkEntry`::activate signal.)
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param setting (boolean|nil) # `true` to activate window’s default widget on Enter keypress
---@return nil
function Gtk.Entry:set_activates_default(setting) end

--- # method Gtk.Entry:set_alignment()
---
--- Sets the alignment for the contents of the entry. This controls
--- the horizontal positioning of the contents when the displayed
--- text is shorter than the width of the entry.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param xalign number # The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts
---@return nil
function Gtk.Entry:set_alignment(xalign) end

--- # method Gtk.Entry:set_attributes()
---
--- Sets a `PangoAttrList`; the attributes in the list are applied to the
--- entry text.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param attrs Pango.AttrList # a `PangoAttrList`
---@return nil
function Gtk.Entry:set_attributes(attrs) end

--- # method Gtk.Entry:set_buffer()
---
--- Set the `GtkEntryBuffer` object which holds the text for
--- this widget.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param buffer Gtk.EntryBuffer # a `GtkEntryBuffer`
---@return nil
function Gtk.Entry:set_buffer(buffer) end

--- # method Gtk.Entry:set_completion()
---
--- Sets `completion` to be the auxiliary completion object to use with `entry`.
--- All further configuration of the completion mechanism is done on
--- `completion` using the `GtkEntryCompletion` API. Completion is disabled if
--- `completion` is set to `nil`.
---
--- ---
---
---@param self Gtk.Entry # A `GtkEntry`
---@param completion? Gtk.EntryCompletion # The `GtkEntryCompletion` or `nil`
---@return nil
function Gtk.Entry:set_completion(completion) end

--- # method Gtk.Entry:set_cursor_hadjustment()
---
--- Hooks up an adjustment to the cursor position in an entry, so that when
--- the cursor is moved, the adjustment is scrolled to show that position.
--- See `gtk_scrolled_window_get_hadjustment()` for a typical way of obtaining
--- the adjustment.
--- 
--- The adjustment has to be in pixel units and in the same coordinate system
--- as the entry.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param adjustment? Gtk.Adjustment # an adjustment which should be adjusted when the cursor is moved, or `nil`
---@return nil
function Gtk.Entry:set_cursor_hadjustment(adjustment) end

--- # method Gtk.Entry:set_has_frame()
---
--- Sets whether the entry has a beveled frame around it.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param setting (boolean|nil) # new value
---@return nil
function Gtk.Entry:set_has_frame(setting) end

--- # method Gtk.Entry:set_icon_activatable()
---
--- Sets whether the icon is activatable.
---
--- ---
---
---@param self Gtk.Entry # A `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # Icon position
---@param activatable (boolean|nil) # `true` if the icon should be activatable
---@return nil
function Gtk.Entry:set_icon_activatable(icon_pos, activatable) end

--- # method Gtk.Entry:set_icon_drag_source()
---
--- Sets up the icon at the given position so that GTK+ will start a drag
--- operation when the user clicks and drags the icon.
--- 
--- To handle the drag operation, you need to connect to the usual
--- `GtkWidget`::drag-data-get (or possibly `GtkWidget`::drag-data-delete)
--- signal, and use `gtk_entry_get_current_icon_drag_source()` in
--- your signal handler to find out if the drag was started from
--- an icon.
--- 
--- By default, GTK+ uses the icon as the drag icon. You can use the
--- `GtkWidget`::drag-begin signal to set a different icon. Note that you
--- have to use `g_signal_connect_after()` to ensure that your signal handler
--- gets executed after the default handler.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # icon position
---@param target_list Gtk.TargetList # the targets (data formats) in which the data can be provided
---@param actions Gdk.DragAction # a bitmask of the allowed drag actions
---@return nil
function Gtk.Entry:set_icon_drag_source(icon_pos, target_list, actions) end

--- # method Gtk.Entry:set_icon_from_gicon()
---
--- Sets the icon shown in the entry at the specified position
--- from the current icon theme.
--- If the icon isn’t known, a “broken image” icon will be displayed
--- instead.
--- 
--- If `icon` is `nil`, no icon will be shown in the specified position.
---
--- ---
---
---@param self Gtk.Entry # A `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # The position at which to set the icon
---@param icon? Gio.Icon # The icon to set, or `nil`
---@return nil
function Gtk.Entry:set_icon_from_gicon(icon_pos, icon) end

--- # method Gtk.Entry:set_icon_from_icon_name()
---
--- Sets the icon shown in the entry at the specified position
--- from the current icon theme.
--- 
--- If the icon name isn’t known, a “broken image” icon will be displayed
--- instead.
--- 
--- If `icon_name` is `nil`, no icon will be shown in the specified position.
---
--- ---
---
---@param self Gtk.Entry # A `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # The position at which to set the icon
---@param icon_name? string # An icon name, or `nil`
---@return nil
function Gtk.Entry:set_icon_from_icon_name(icon_pos, icon_name) end

--- # method Gtk.Entry:set_icon_from_pixbuf()
---
--- Sets the icon shown in the specified position using a pixbuf.
--- 
--- If `pixbuf` is `nil`, no icon will be shown in the specified position.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # Icon position
---@param pixbuf? GdkPixbuf.Pixbuf # A `GdkPixbuf`, or `nil`
---@return nil
function Gtk.Entry:set_icon_from_pixbuf(icon_pos, pixbuf) end

--- # method Gtk.Entry:set_icon_from_stock()
---
--- Sets the icon shown in the entry at the specified position from
--- a stock image.
--- 
--- If `stock_id` is `nil`, no icon will be shown in the specified position.
---
--- ---
---
---@param self Gtk.Entry # A `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # Icon position
---@param stock_id? string # The name of the stock item, or `nil`
---@return nil
function Gtk.Entry:set_icon_from_stock(icon_pos, stock_id) end

--- # method Gtk.Entry:set_icon_sensitive()
---
--- Sets the sensitivity for the specified icon.
---
--- ---
---
---@param self Gtk.Entry # A `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # Icon position
---@param sensitive (boolean|nil) # Specifies whether the icon should appear sensitive or insensitive
---@return nil
function Gtk.Entry:set_icon_sensitive(icon_pos, sensitive) end

--- # method Gtk.Entry:set_icon_tooltip_markup()
---
--- Sets `tooltip` as the contents of the tooltip for the icon at
--- the specified position. `tooltip` is assumed to be marked up with
--- the [Pango text markup language][PangoMarkupFormat].
--- 
--- Use `nil` for `tooltip` to remove an existing tooltip.
--- 
--- See also `gtk_widget_set_tooltip_markup()` and
--- `gtk_entry_set_icon_tooltip_text()`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # the icon position
---@param tooltip? string # the contents of the tooltip for the icon, or `nil`
---@return nil
function Gtk.Entry:set_icon_tooltip_markup(icon_pos, tooltip) end

--- # method Gtk.Entry:set_icon_tooltip_text()
---
--- Sets `tooltip` as the contents of the tooltip for the icon
--- at the specified position.
--- 
--- Use `nil` for `tooltip` to remove an existing tooltip.
--- 
--- See also `gtk_widget_set_tooltip_text()` and
--- `gtk_entry_set_icon_tooltip_markup()`.
--- 
--- If you unset the widget tooltip via `gtk_widget_set_tooltip_text()` or
--- `gtk_widget_set_tooltip_markup()`, this sets GtkWidget:has-tooltip to `false`,
--- which suppresses icon tooltips too. You can resolve this by then calling
--- `gtk_widget_set_has_tooltip()` to set GtkWidget:has-tooltip back to `true`, or
--- setting at least one non-empty tooltip on any icon achieves the same result.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param icon_pos Gtk.EntryIconPosition # the icon position
---@param tooltip? string # the contents of the tooltip for the icon, or `nil`
---@return nil
function Gtk.Entry:set_icon_tooltip_text(icon_pos, tooltip) end

--- # method Gtk.Entry:set_inner_border()
---
--- Sets %entry’s inner-border property to `border`, or clears it if `nil`
--- is passed. The inner-border is the area around the entry’s text, but
--- inside its frame.
--- 
--- If set, this property overrides the inner-border style property.
--- Overriding the style-provided border is useful when you want to do
--- in-place editing of some text in a canvas or list widget, where
--- pixel-exact positioning of the entry is important.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param border? Gtk.Border # a `GtkBorder`, or `nil`
---@return nil
function Gtk.Entry:set_inner_border(border) end

--- # method Gtk.Entry:set_input_hints()
---
--- Sets the `GtkEntry`:input-hints property, which
--- allows input methods to fine-tune their behaviour.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param hints Gtk.InputHints # the hints
---@return nil
function Gtk.Entry:set_input_hints(hints) end

--- # method Gtk.Entry:set_input_purpose()
---
--- Sets the `GtkEntry`:input-purpose property which
--- can be used by on-screen keyboards and other input
--- methods to adjust their behaviour.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param purpose Gtk.InputPurpose # the purpose
---@return nil
function Gtk.Entry:set_input_purpose(purpose) end

--- # method Gtk.Entry:set_invisible_char()
---
--- Sets the character to use in place of the actual text when
--- `gtk_entry_set_visibility()` has been called to set text visibility
--- to `false`. i.e. this is the character used in “password mode” to
--- show the user how many characters have been typed. By default, GTK+
--- picks the best invisible char available in the current font. If you
--- set the invisible char to 0, then the user will get no feedback
--- at all; there will be no text on the screen as they type.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param ch integer # a Unicode character
---@return nil
function Gtk.Entry:set_invisible_char(ch) end

--- # method Gtk.Entry:set_max_length()
---
--- Sets the maximum allowed length of the contents of the widget. If
--- the current contents are longer than the given length, then they
--- will be truncated to fit.
--- 
--- This is equivalent to getting `entry`'s `GtkEntryBuffer` and
--- calling `gtk_entry_buffer_set_max_length()` on it.
--- ```
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param max integer # the maximum length of the entry, or 0 for no maximum. (other than the maximum length of entries.) The value passed in will be clamped to the range 0-65536.
---@return nil
function Gtk.Entry:set_max_length(max) end

--- # method Gtk.Entry:set_max_width_chars()
---
--- Sets the desired maximum width in characters of `entry`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param n_chars integer # the new desired maximum width, in characters
---@return nil
function Gtk.Entry:set_max_width_chars(n_chars) end

--- # method Gtk.Entry:set_overwrite_mode()
---
--- Sets whether the text is overwritten when typing in the `GtkEntry`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param overwrite (boolean|nil) # new value
---@return nil
function Gtk.Entry:set_overwrite_mode(overwrite) end

--- # method Gtk.Entry:set_placeholder_text()
---
--- Sets text to be displayed in `entry` when it is empty and unfocused.
--- This can be used to give a visual hint of the expected contents of
--- the `GtkEntry`.
--- 
--- Note that since the placeholder text gets removed when the entry
--- received focus, using this feature is a bit problematic if the entry
--- is given the initial focus in a window. Sometimes this can be
--- worked around by delaying the initial focus setting until the
--- first key event arrives.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param text? string # a string to be displayed when `entry` is empty and unfocused, or `nil`
---@return nil
function Gtk.Entry:set_placeholder_text(text) end

--- # method Gtk.Entry:set_progress_fraction()
---
--- Causes the entry’s progress indicator to “fill in” the given
--- fraction of the bar. The fraction should be between 0.0 and 1.0,
--- inclusive.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param fraction number # fraction of the task that’s been completed
---@return nil
function Gtk.Entry:set_progress_fraction(fraction) end

--- # method Gtk.Entry:set_progress_pulse_step()
---
--- Sets the fraction of total entry width to move the progress
--- bouncing block for each call to `gtk_entry_progress_pulse()`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param fraction number # fraction between 0.0 and 1.0
---@return nil
function Gtk.Entry:set_progress_pulse_step(fraction) end

--- # method Gtk.Entry:set_tabs()
---
--- Sets a `PangoTabArray`; the tabstops in the array are applied to the entry
--- text.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param tabs Pango.TabArray # a `PangoTabArray`
---@return nil
function Gtk.Entry:set_tabs(tabs) end

--- # method Gtk.Entry:set_text()
---
--- Sets the text in the widget to the given
--- value, replacing the current contents.
--- 
--- See `gtk_entry_buffer_set_text()`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param text string # the new text
---@return nil
function Gtk.Entry:set_text(text) end

--- # method Gtk.Entry:set_visibility()
---
--- Sets whether the contents of the entry are visible or not.
--- When visibility is set to `false`, characters are displayed
--- as the invisible char, and will also appear that way when
--- the text in the entry widget is copied elsewhere.
--- 
--- By default, GTK+ picks the best invisible character available
--- in the current font, but it can be changed with
--- `gtk_entry_set_invisible_char()`.
--- 
--- Note that you probably want to set `GtkEntry`:input-purpose
--- to %GTK_INPUT_PURPOSE_PASSWORD or %GTK_INPUT_PURPOSE_PIN to
--- inform input methods about the purpose of this entry,
--- in addition to setting visibility to `false`.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param visible (boolean|nil) # `true` if the contents of the entry are displayed as plaintext
---@return nil
function Gtk.Entry:set_visibility(visible) end

--- # method Gtk.Entry:set_width_chars()
---
--- Changes the size request of the entry to be about the right size
--- for `n_chars` characters. Note that it changes the size
--- request, the size can still be affected by
--- how you pack the widget into containers. If `n_chars` is -1, the
--- size reverts to the default entry size.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param n_chars integer # width in chars
---@return nil
function Gtk.Entry:set_width_chars(n_chars) end

--- # method Gtk.Entry:text_index_to_layout_index()
---
--- Converts from a position in the entry contents (returned
--- by `gtk_entry_get_text()`) to a position in the
--- entry’s `PangoLayout` (returned by `gtk_entry_get_layout()`,
--- with text retrieved via `pango_layout_get_text()`).
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@param text_index integer # byte index into the entry contents
---@return integer # byte index into the entry layout text
function Gtk.Entry:text_index_to_layout_index(text_index) end

--- # method Gtk.Entry:unset_invisible_char()
---
--- Unsets the invisible char previously set with
--- `gtk_entry_set_invisible_char()`. So that the
--- default invisible char is used again.
---
--- ---
---
---@param self Gtk.Entry # a `GtkEntry`
---@return nil
function Gtk.Entry:unset_invisible_char() end

--- # function Gtk.Entry.new()
---
--- Creates a new entry.
---
--- ---
---
---@return Gtk.Widget # a new `GtkEntry`.
function Gtk.Entry.new() end

--- # function Gtk.Entry.new_with_buffer()
---
--- Creates a new entry with the specified text buffer.
---
--- ---
---
---@param buffer Gtk.EntryBuffer # The buffer to use for the new `GtkEntry`.
---@return Gtk.Widget # a new `GtkEntry`
function Gtk.Entry.new_with_buffer(buffer) end

--- # class Gtk.EntryAccessible
---
---@class Gtk.EntryAccessible : Gtk.WidgetAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.EditableText, Gtk.Atk.Text
---@field parent Gtk.WidgetAccessible
---@field priv Gtk.EntryAccessiblePrivate
Gtk.EntryAccessible = {}

--- # record Gtk.EntryAccessibleClass
---
---@class Gtk.EntryAccessibleClass
---@field parent_class Gtk.WidgetAccessibleClass
Gtk.EntryAccessibleClass = {}

--- # record Gtk.EntryAccessiblePrivate
---
---@class Gtk.EntryAccessiblePrivate
Gtk.EntryAccessiblePrivate = {}

--- # class Gtk.EntryBuffer
---
--- The `GtkEntryBuffer` class contains the actual text displayed in a
--- `GtkEntry` widget.
--- 
--- A single `GtkEntryBuffer` object can be shared by multiple `GtkEntry`
--- widgets which will then share the same text content, but not the cursor
--- position, visibility attributes, icon etc.
--- 
--- `GtkEntryBuffer` may be derived from. Such a derived class might allow
--- text to be stored in an alternate location, such as non-pageable memory,
--- useful in the case of important passwords. Or a derived class could
--- integrate with an application’s concept of undo/redo.
---
--- ---
---
---@class Gtk.EntryBuffer : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gtk.EntryBufferPrivate
---@operator call: Gtk.EntryBuffer
Gtk.EntryBuffer = {}

--- # method Gtk.EntryBuffer:delete_text()
---
--- Deletes a sequence of characters from the buffer. `n_chars` characters are
--- deleted starting at `position`. If `n_chars` is negative, then all characters
--- until the end of the text are deleted.
--- 
--- If `position` or `n_chars` are out of bounds, then they are coerced to sane
--- values.
--- 
--- Note that the positions are specified in characters, not bytes.
---
--- ---
---
---@param self Gtk.EntryBuffer # a `GtkEntryBuffer`
---@param position integer # position at which to delete text
---@param n_chars integer # number of characters to delete
---@return integer # The number of characters deleted.
function Gtk.EntryBuffer:delete_text(position, n_chars) end

--- # method Gtk.EntryBuffer:emit_deleted_text()
---
--- Used when subclassing `GtkEntryBuffer`
---
--- ---
---
---@param self Gtk.EntryBuffer # a `GtkEntryBuffer`
---@param position integer # position at which text was deleted
---@param n_chars integer # number of characters deleted
---@return nil
function Gtk.EntryBuffer:emit_deleted_text(position, n_chars) end

--- # method Gtk.EntryBuffer:emit_inserted_text()
---
--- Used when subclassing `GtkEntryBuffer`
---
--- ---
---
---@param self Gtk.EntryBuffer # a `GtkEntryBuffer`
---@param position integer # position at which text was inserted
---@param chars string # text that was inserted
---@param n_chars integer # number of characters inserted
---@return nil
function Gtk.EntryBuffer:emit_inserted_text(position, chars, n_chars) end

--- # method Gtk.EntryBuffer:get_bytes()
---
--- Retrieves the length in bytes of the buffer.
--- See `gtk_entry_buffer_get_length()`.
---
--- ---
---
---@param self Gtk.EntryBuffer # a `GtkEntryBuffer`
---@return integer # The byte length of the buffer.
function Gtk.EntryBuffer:get_bytes() end

--- # method Gtk.EntryBuffer:get_length()
---
--- Retrieves the length in characters of the buffer.
---
--- ---
---
---@param self Gtk.EntryBuffer # a `GtkEntryBuffer`
---@return integer # The number of characters in the buffer.
function Gtk.EntryBuffer:get_length() end

--- # method Gtk.EntryBuffer:get_max_length()
---
--- Retrieves the maximum allowed length of the text in
--- `buffer`. See `gtk_entry_buffer_set_max_length()`.
---
--- ---
---
---@param self Gtk.EntryBuffer # a `GtkEntryBuffer`
---@return integer # the maximum allowed number of characters in `GtkEntryBuffer`, or 0 if there is no maximum.
function Gtk.EntryBuffer:get_max_length() end

--- # method Gtk.EntryBuffer:get_text()
---
--- Retrieves the contents of the buffer.
--- 
--- The memory pointer returned by this call will not change
--- unless this object emits a signal, or is finalized.
---
--- ---
---
---@param self Gtk.EntryBuffer # a `GtkEntryBuffer`
---@return string # a pointer to the contents of the widget as a string. This string points to internally allocated storage in the buffer and must not be freed, modified or stored.
function Gtk.EntryBuffer:get_text() end

--- # method Gtk.EntryBuffer:insert_text()
---
--- Inserts `n_chars` characters of `chars` into the contents of the
--- buffer, at position `position`.
--- 
--- If `n_chars` is negative, then characters from chars will be inserted
--- until a null-terminator is found. If `position` or `n_chars` are out of
--- bounds, or the maximum buffer text length is exceeded, then they are
--- coerced to sane values.
--- 
--- Note that the position and length are in characters, not in bytes.
---
--- ---
---
---@param self Gtk.EntryBuffer # a `GtkEntryBuffer`
---@param position integer # the position at which to insert text.
---@param chars string # the text to insert into the buffer.
---@param n_chars integer # the length of the text in characters, or -1
---@return integer # The number of characters actually inserted.
function Gtk.EntryBuffer:insert_text(position, chars, n_chars) end

--- # method Gtk.EntryBuffer:set_max_length()
---
--- Sets the maximum allowed length of the contents of the buffer. If
--- the current contents are longer than the given length, then they
--- will be truncated to fit.
---
--- ---
---
---@param self Gtk.EntryBuffer # a `GtkEntryBuffer`
---@param max_length integer # the maximum length of the entry buffer, or 0 for no maximum. (other than the maximum length of entries.) The value passed in will be clamped to the range 0-65536.
---@return nil
function Gtk.EntryBuffer:set_max_length(max_length) end

--- # method Gtk.EntryBuffer:set_text()
---
--- Sets the text in the buffer.
--- 
--- This is roughly equivalent to calling `gtk_entry_buffer_delete_text()`
--- and `gtk_entry_buffer_insert_text()`.
--- 
--- Note that `n_chars` is in characters, not in bytes.
---
--- ---
---
---@param self Gtk.EntryBuffer # a `GtkEntryBuffer`
---@param chars string # the new text
---@param n_chars integer # the number of characters in `text`, or -1
---@return nil
function Gtk.EntryBuffer:set_text(chars, n_chars) end

--- # function Gtk.EntryBuffer.new()
---
--- Create a new GtkEntryBuffer object.
--- 
--- Optionally, specify initial text to set in the buffer.
---
--- ---
---
---@param initial_chars? string # initial buffer text, or `nil`
---@param n_initial_chars integer # number of characters in `initial_chars`, or -1
---@return Gtk.EntryBuffer # A new GtkEntryBuffer object.
function Gtk.EntryBuffer.new(initial_chars, n_initial_chars) end

--- # record Gtk.EntryBufferClass
---
---@class Gtk.EntryBufferClass
---@field parent_class GObject.ObjectClass
---@field inserted_text fun(buffer: Gtk.EntryBuffer, position: integer, chars: string, n_chars: integer): nil
---@field deleted_text fun(buffer: Gtk.EntryBuffer, position: integer, n_chars: integer): nil
---@field get_text fun(buffer: Gtk.EntryBuffer, n_bytes: integer): string
---@field get_length fun(buffer: Gtk.EntryBuffer): integer
---@field insert_text fun(buffer: Gtk.EntryBuffer, position: integer, chars: string, n_chars: integer): integer
---@field delete_text fun(buffer: Gtk.EntryBuffer, position: integer, n_chars: integer): integer
Gtk.EntryBufferClass = {}

--- # record Gtk.EntryBufferPrivate
---
---@class Gtk.EntryBufferPrivate
Gtk.EntryBufferPrivate = {}

--- # record Gtk.EntryClass
---
--- Class structure for `GtkEntry`. All virtual functions have a default
--- implementation. Derived classes may set the virtual function pointers for the
--- signal handlers to `nil`, but must keep `get_text_area_size` and
--- `get_frame_size` non-`nil`; either use the default implementation, or provide
--- a custom one.
---
--- ---
---
---@class Gtk.EntryClass
---@field parent_class Gtk.WidgetClass # The parent class.
---@field populate_popup fun(entry: Gtk.Entry, popup: Gtk.Widget): nil
---@field activate fun(entry: Gtk.Entry): nil
---@field move_cursor fun(entry: Gtk.Entry, step: Gtk.MovementStep, count: integer, extend_selection: (boolean|nil)): nil
---@field insert_at_cursor fun(entry: Gtk.Entry, str: string): nil
---@field delete_from_cursor fun(entry: Gtk.Entry, type: Gtk.DeleteType, count: integer): nil
---@field backspace fun(entry: Gtk.Entry): nil
---@field cut_clipboard fun(entry: Gtk.Entry): nil
---@field copy_clipboard fun(entry: Gtk.Entry): nil
---@field paste_clipboard fun(entry: Gtk.Entry): nil
---@field toggle_overwrite fun(entry: Gtk.Entry): nil
---@field get_text_area_size fun(entry: Gtk.Entry, x: integer, y: integer, width: integer, height: integer): nil
---@field get_frame_size fun(entry: Gtk.Entry, x: integer, y: integer, width: integer, height: integer): nil
---@field insert_emoji fun(entry: Gtk.Entry): nil
Gtk.EntryClass = {}

--- # class Gtk.EntryCompletion
---
--- `GtkEntryCompletion` is an auxiliary object to be used in conjunction with
--- `GtkEntry` to provide the completion functionality. It implements the
--- `GtkCellLayout` interface, to allow the user to add extra cells to the
--- `GtkTreeView` with completion matches.
--- 
--- “Completion functionality” means that when the user modifies the text
--- in the entry, `GtkEntryCompletion` checks which rows in the model match
--- the current content of the entry, and displays a list of matches.
--- By default, the matching is done by comparing the entry text
--- case-insensitively against the text column of the model (see
--- `gtk_entry_completion_set_text_column()`), but this can be overridden
--- with a custom match function (see `gtk_entry_completion_set_match_func()`).
--- 
--- When the user selects a completion, the content of the entry is
--- updated. By default, the content of the entry is replaced by the
--- text column of the model, but this can be overridden by connecting
--- to the `GtkEntryCompletion`::match-selected signal and updating the
--- entry in the signal handler. Note that you should return `true` from
--- the signal handler to suppress the default behaviour.
--- 
--- To add completion functionality to an entry, use `gtk_entry_set_completion()`.
--- 
--- In addition to regular completion matches, which will be inserted into the
--- entry when they are selected, `GtkEntryCompletion` also allows to display
--- “actions” in the popup window. Their appearance is similar to menuitems,
--- to differentiate them clearly from completion strings. When an action is
--- selected, the `GtkEntryCompletion`::action-activated signal is emitted.
--- 
--- GtkEntryCompletion uses a `GtkTreeModelFilter` model to represent the
--- subset of the entire model that is currently matching. While the
--- GtkEntryCompletion signals `GtkEntryCompletion`::match-selected and
--- `GtkEntryCompletion`::cursor-on-match take the original model and an
--- iter pointing to that model as arguments, other callbacks and signals
--- (such as `GtkCellLayoutDataFuncs` or `GtkCellArea`::apply-attributes)
--- will generally take the filter model as argument. As long as you are
--- only calling `gtk_tree_model_get()`, this will make no difference to
--- you. If for some reason, you need the original model, use
--- `gtk_tree_model_filter_get_model()`. Don’t forget to use
--- `gtk_tree_model_filter_convert_iter_to_child_iter()` to obtain a
--- matching iter.
---
--- ---
---
---@class Gtk.EntryCompletion : GObject.Object, Gtk.Buildable, Gtk.CellLayout
---@field parent_instance GObject.Object
---@field priv Gtk.EntryCompletionPrivate
---@operator call: Gtk.EntryCompletion
Gtk.EntryCompletion = {}

--- # method Gtk.EntryCompletion:complete()
---
--- Requests a completion operation, or in other words a refiltering of the
--- current list with completions, using the current key. The completion list
--- view will be updated accordingly.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@return nil
function Gtk.EntryCompletion:complete() end

--- # method Gtk.EntryCompletion:compute_prefix()
---
--- Computes the common prefix that is shared by all rows in `completion`
--- that start with `key`. If no row matches `key`, `nil` will be returned.
--- Note that a text column must have been set for this function to work,
--- see `gtk_entry_completion_set_text_column()` for details.
---
--- ---
---
---@param self Gtk.EntryCompletion # the entry completion
---@param key string # The text to complete for
---@return string # The common prefix all rows starting with `key` or `nil` if no row matches `key`.
function Gtk.EntryCompletion:compute_prefix(key) end

--- # method Gtk.EntryCompletion:delete_action()
---
--- Deletes the action at `index_` from `completion`’s action list.
--- 
--- Note that `index_` is a relative position and the position of an
--- action may have changed since it was inserted.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@param index_ integer # the index of the item to delete
---@return nil
function Gtk.EntryCompletion:delete_action(index_) end

--- # method Gtk.EntryCompletion:get_completion_prefix()
---
--- Get the original text entered by the user that triggered
--- the completion or `nil` if there’s no completion ongoing.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@return string # the prefix for the current completion
function Gtk.EntryCompletion:get_completion_prefix() end

--- # method Gtk.EntryCompletion:get_entry()
---
--- Gets the entry `completion` has been attached to.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@return Gtk.Widget # The entry `completion` has been attached to
function Gtk.EntryCompletion:get_entry() end

--- # method Gtk.EntryCompletion:get_inline_completion()
---
--- Returns whether the common prefix of the possible completions should
--- be automatically inserted in the entry.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@return (boolean|nil) # `true` if inline completion is turned on
function Gtk.EntryCompletion:get_inline_completion() end

--- # method Gtk.EntryCompletion:get_inline_selection()
---
--- Returns `true` if inline-selection mode is turned on.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@return (boolean|nil) # `true` if inline-selection mode is on
function Gtk.EntryCompletion:get_inline_selection() end

--- # method Gtk.EntryCompletion:get_minimum_key_length()
---
--- Returns the minimum key length as set for `completion`.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@return integer # The currently used minimum key length
function Gtk.EntryCompletion:get_minimum_key_length() end

--- # method Gtk.EntryCompletion:get_model()
---
--- Returns the model the `GtkEntryCompletion` is using as data source.
--- Returns `nil` if the model is unset.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@return Gtk.TreeModel # A `GtkTreeModel`, or `nil` if none is currently being used
function Gtk.EntryCompletion:get_model() end

--- # method Gtk.EntryCompletion:get_popup_completion()
---
--- Returns whether the completions should be presented in a popup window.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@return (boolean|nil) # `true` if popup completion is turned on
function Gtk.EntryCompletion:get_popup_completion() end

--- # method Gtk.EntryCompletion:get_popup_set_width()
---
--- Returns whether the  completion popup window will be resized to the
--- width of the entry.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@return (boolean|nil) # `true` if the popup window will be resized to the width of the entry
function Gtk.EntryCompletion:get_popup_set_width() end

--- # method Gtk.EntryCompletion:get_popup_single_match()
---
--- Returns whether the completion popup window will appear even if there is
--- only a single match.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@return (boolean|nil) # `true` if the popup window will appear regardless of the number of matches
function Gtk.EntryCompletion:get_popup_single_match() end

--- # method Gtk.EntryCompletion:get_text_column()
---
--- Returns the column in the model of `completion` to get strings from.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@return integer # the column containing the strings
function Gtk.EntryCompletion:get_text_column() end

--- # method Gtk.EntryCompletion:insert_action_markup()
---
--- Inserts an action in `completion`’s action item list at position `index_`
--- with markup `markup`.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@param index_ integer # the index of the item to insert
---@param markup string # markup of the item to insert
---@return nil
function Gtk.EntryCompletion:insert_action_markup(index_, markup) end

--- # method Gtk.EntryCompletion:insert_action_text()
---
--- Inserts an action in `completion`’s action item list at position `index_`
--- with text `text`. If you want the action item to have markup, use
--- `gtk_entry_completion_insert_action_markup()`.
--- 
--- Note that `index_` is a relative position in the list of actions and
--- the position of an action can change when deleting a different action.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@param index_ integer # the index of the item to insert
---@param text string # text of the item to insert
---@return nil
function Gtk.EntryCompletion:insert_action_text(index_, text) end

--- # method Gtk.EntryCompletion:insert_prefix()
---
--- Requests a prefix insertion.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@return nil
function Gtk.EntryCompletion:insert_prefix() end

--- # method Gtk.EntryCompletion:set_inline_completion()
---
--- Sets whether the common prefix of the possible completions should
--- be automatically inserted in the entry.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@param inline_completion (boolean|nil) # `true` to do inline completion
---@return nil
function Gtk.EntryCompletion:set_inline_completion(inline_completion) end

--- # method Gtk.EntryCompletion:set_inline_selection()
---
--- Sets whether it is possible to cycle through the possible completions
--- inside the entry.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@param inline_selection (boolean|nil) # `true` to do inline selection
---@return nil
function Gtk.EntryCompletion:set_inline_selection(inline_selection) end

--- # method Gtk.EntryCompletion:set_match_func()
---
--- Sets the match function for `completion` to be `func`. The match function
--- is used to determine if a row should or should not be in the completion
--- list.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@param func Gtk.EntryCompletionMatchFunc # the `GtkEntryCompletionMatchFunc` to use
---@param func_data? userdata # user data for `func`
---@param func_notify GLib.DestroyNotify # destroy notify for `func_data`.
---@return nil
function Gtk.EntryCompletion:set_match_func(func, func_data, func_notify) end

--- # method Gtk.EntryCompletion:set_minimum_key_length()
---
--- Requires the length of the search key for `completion` to be at least
--- `length`. This is useful for long lists, where completing using a small
--- key takes a lot of time and will come up with meaningless results anyway
--- (ie, a too large dataset).
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@param length integer # the minimum length of the key in order to start completing
---@return nil
function Gtk.EntryCompletion:set_minimum_key_length(length) end

--- # method Gtk.EntryCompletion:set_model()
---
--- Sets the model for a `GtkEntryCompletion`. If `completion` already has
--- a model set, it will remove it before setting the new model.
--- If model is `nil`, then it will unset the model.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@param model? Gtk.TreeModel # the `GtkTreeModel`
---@return nil
function Gtk.EntryCompletion:set_model(model) end

--- # method Gtk.EntryCompletion:set_popup_completion()
---
--- Sets whether the completions should be presented in a popup window.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@param popup_completion (boolean|nil) # `true` to do popup completion
---@return nil
function Gtk.EntryCompletion:set_popup_completion(popup_completion) end

--- # method Gtk.EntryCompletion:set_popup_set_width()
---
--- Sets whether the completion popup window will be resized to be the same
--- width as the entry.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@param popup_set_width (boolean|nil) # `true` to make the width of the popup the same as the entry
---@return nil
function Gtk.EntryCompletion:set_popup_set_width(popup_set_width) end

--- # method Gtk.EntryCompletion:set_popup_single_match()
---
--- Sets whether the completion popup window will appear even if there is
--- only a single match. You may want to set this to `false` if you
--- are using [inline completion][GtkEntryCompletion--inline-completion].
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@param popup_single_match (boolean|nil) # `true` if the popup should appear even for a single match
---@return nil
function Gtk.EntryCompletion:set_popup_single_match(popup_single_match) end

--- # method Gtk.EntryCompletion:set_text_column()
---
--- Convenience function for setting up the most used case of this code: a
--- completion list with just strings. This function will set up `completion`
--- to have a list displaying all (and just) strings in the completion list,
--- and to get those strings from `column` in the model of `completion`.
--- 
--- This functions creates and adds a `GtkCellRendererText` for the selected
--- column. If you need to set the text column, but don't want the cell
--- renderer, use `g_object_set()` to set the `GtkEntryCompletion`:text-column
--- property directly.
---
--- ---
---
---@param self Gtk.EntryCompletion # a `GtkEntryCompletion`
---@param column integer # the column in the model of `completion` to get strings from
---@return nil
function Gtk.EntryCompletion:set_text_column(column) end

--- # function Gtk.EntryCompletion.new()
---
--- Creates a new `GtkEntryCompletion` object.
---
--- ---
---
---@return Gtk.EntryCompletion # A newly created `GtkEntryCompletion` object
function Gtk.EntryCompletion.new() end

--- # function Gtk.EntryCompletion.new_with_area()
---
--- Creates a new `GtkEntryCompletion` object using the
--- specified `area` to layout cells in the underlying
--- `GtkTreeViewColumn` for the drop-down menu.
---
--- ---
---
---@param area Gtk.CellArea # the `GtkCellArea` used to layout cells
---@return Gtk.EntryCompletion # A newly created `GtkEntryCompletion` object
function Gtk.EntryCompletion.new_with_area(area) end

--- # record Gtk.EntryCompletionClass
---
---@class Gtk.EntryCompletionClass
---@field parent_class GObject.ObjectClass
---@field match_selected fun(completion: Gtk.EntryCompletion, model: Gtk.TreeModel, iter: Gtk.TreeIter): (boolean|nil)
---@field action_activated fun(completion: Gtk.EntryCompletion, index_: integer): nil
---@field insert_prefix fun(completion: Gtk.EntryCompletion, prefix: string): (boolean|nil)
---@field cursor_on_match fun(completion: Gtk.EntryCompletion, model: Gtk.TreeModel, iter: Gtk.TreeIter): (boolean|nil)
---@field no_matches fun(completion: Gtk.EntryCompletion): nil
Gtk.EntryCompletionClass = {}

---@alias Gtk.EntryCompletionMatchFunc fun(completion: Gtk.EntryCompletion, key: string, iter: Gtk.TreeIter, user_data: userdata): (boolean|nil)

--- # record Gtk.EntryCompletionPrivate
---
---@class Gtk.EntryCompletionPrivate
Gtk.EntryCompletionPrivate = {}

--- # class Gtk.EntryIconAccessible
---
---@class Gtk.EntryIconAccessible : Atk.Object, Gtk.Atk.Action, Gtk.Atk.Component
Gtk.EntryIconAccessible = {}

---@enum Gtk.EntryIconPosition
Gtk.EntryIconPosition = {}

--- # record Gtk.EntryPrivate
---
---@class Gtk.EntryPrivate
Gtk.EntryPrivate = {}

--- # class Gtk.EventBox
---
--- The `GtkEventBox` widget is a subclass of `GtkBin` which also has its
--- own window. It is useful since it allows you to catch events for widgets
--- which do not have their own window.
---
--- ---
---
---@class Gtk.EventBox : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field bin Gtk.Bin
---@field priv Gtk.EventBoxPrivate
---@operator call: Gtk.EventBox
Gtk.EventBox = {}

--- # method Gtk.EventBox:get_above_child()
---
--- Returns whether the event box window is above or below the
--- windows of its child. See `gtk_event_box_set_above_child()`
--- for details.
---
--- ---
---
---@param self Gtk.EventBox # a `GtkEventBox`
---@return (boolean|nil) # `true` if the event box window is above the window of its child
function Gtk.EventBox:get_above_child() end

--- # method Gtk.EventBox:get_visible_window()
---
--- Returns whether the event box has a visible window.
--- See `gtk_event_box_set_visible_window()` for details.
---
--- ---
---
---@param self Gtk.EventBox # a `GtkEventBox`
---@return (boolean|nil) # `true` if the event box window is visible
function Gtk.EventBox:get_visible_window() end

--- # method Gtk.EventBox:set_above_child()
---
--- Set whether the event box window is positioned above the windows
--- of its child, as opposed to below it. If the window is above, all
--- events inside the event box will go to the event box. If the window
--- is below, events in windows of child widgets will first got to that
--- widget, and then to its parents.
--- 
--- The default is to keep the window below the child.
---
--- ---
---
---@param self Gtk.EventBox # a `GtkEventBox`
---@param above_child (boolean|nil) # `true` if the event box window is above its child
---@return nil
function Gtk.EventBox:set_above_child(above_child) end

--- # method Gtk.EventBox:set_visible_window()
---
--- Set whether the event box uses a visible or invisible child
--- window. The default is to use visible windows.
--- 
--- In an invisible window event box, the window that the
--- event box creates is a %GDK_INPUT_ONLY window, which
--- means that it is invisible and only serves to receive
--- events.
--- 
--- A visible window event box creates a visible (%GDK_INPUT_OUTPUT)
--- window that acts as the parent window for all the widgets
--- contained in the event box.
--- 
--- You should generally make your event box invisible if
--- you just want to trap events. Creating a visible window
--- may cause artifacts that are visible to the user, especially
--- if the user is using a theme with gradients or pixmaps.
--- 
--- The main reason to create a non input-only event box is if
--- you want to set the background to a different color or
--- draw on it.
--- 
--- There is one unexpected issue for an invisible event box that has its
--- window below the child. (See `gtk_event_box_set_above_child()`.)
--- Since the input-only window is not an ancestor window of any windows
--- that descendent widgets of the event box create, events on these
--- windows aren’t propagated up by the windowing system, but only by GTK+.
--- The practical effect of this is if an event isn’t in the event
--- mask for the descendant window (see `gtk_widget_add_events()`),
--- it won’t be received by the event box.
--- 
--- This problem doesn’t occur for visible event boxes, because in
--- that case, the event box window is actually the ancestor of the
--- descendant windows, not just at the same place on the screen.
---
--- ---
---
---@param self Gtk.EventBox # a `GtkEventBox`
---@param visible_window (boolean|nil) # `true` to make the event box have a visible window
---@return nil
function Gtk.EventBox:set_visible_window(visible_window) end

--- # function Gtk.EventBox.new()
---
--- Creates a new `GtkEventBox`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkEventBox`
function Gtk.EventBox.new() end

--- # record Gtk.EventBoxClass
---
---@class Gtk.EventBoxClass
---@field parent_class Gtk.BinClass # The parent class.
Gtk.EventBoxClass = {}

--- # record Gtk.EventBoxPrivate
---
---@class Gtk.EventBoxPrivate
Gtk.EventBoxPrivate = {}

--- # class Gtk.EventController
---
--- `GtkEventController` is a base, low-level implementation for event
--- controllers. Those react to a series of `GdkEvents`, and possibly trigger
--- actions as a consequence of those.
---
--- ---
---
---@class Gtk.EventController : GObject.Object
Gtk.EventController = {}

--- # method Gtk.EventController:get_propagation_phase()
---
--- Gets the propagation phase at which `controller` handles events.
---
--- ---
---
---@param self Gtk.EventController # a `GtkEventController`
---@return Gtk.PropagationPhase # the propagation phase
function Gtk.EventController:get_propagation_phase() end

--- # method Gtk.EventController:get_widget()
---
--- Returns the `GtkWidget` this controller relates to.
---
--- ---
---
---@param self Gtk.EventController # a `GtkEventController`
---@return Gtk.Widget # a `GtkWidget`
function Gtk.EventController:get_widget() end

--- # method Gtk.EventController:handle_event()
---
--- Feeds an events into `controller`, so it can be interpreted
--- and the controller actions triggered.
---
--- ---
---
---@param self Gtk.EventController # a `GtkEventController`
---@param event Gdk.Event # a `GdkEvent`
---@return (boolean|nil) # `true` if the event was potentially useful to trigger the controller action
function Gtk.EventController:handle_event(event) end

--- # method Gtk.EventController:reset()
---
--- Resets the `controller` to a clean state. Every interaction
--- the controller did through `GtkEventController`::handle-event
--- will be dropped at this point.
---
--- ---
---
---@param self Gtk.EventController # a `GtkEventController`
---@return nil
function Gtk.EventController:reset() end

--- # method Gtk.EventController:set_propagation_phase()
---
--- Sets the propagation phase at which a controller handles events.
--- 
--- If `phase` is %GTK_PHASE_NONE, no automatic event handling will be
--- performed, but other additional gesture maintenance will. In that phase,
--- the events can be managed by calling `gtk_event_controller_handle_event()`.
---
--- ---
---
---@param self Gtk.EventController # a `GtkEventController`
---@param phase Gtk.PropagationPhase # a propagation phase
---@return nil
function Gtk.EventController:set_propagation_phase(phase) end

--- # record Gtk.EventControllerClass
---
---@class Gtk.EventControllerClass
Gtk.EventControllerClass = {}

--- # class Gtk.EventControllerKey
---
--- `GtkEventControllerKey` is an event controller meant for situations
--- where you need access to key events.
--- 
--- This object was added in 3.24.
---
--- ---
---
---@class Gtk.EventControllerKey : Gtk.EventController
---@operator call: Gtk.EventControllerKey
Gtk.EventControllerKey = {}

--- # method Gtk.EventControllerKey:forward()
---
---@param self Gtk.EventControllerKey
---@param widget Gtk.Widget
---@return (boolean|nil)
function Gtk.EventControllerKey:forward(widget) end

--- # method Gtk.EventControllerKey:get_group()
---
---@param self Gtk.EventControllerKey
---@return integer
function Gtk.EventControllerKey:get_group() end

--- # method Gtk.EventControllerKey:get_im_context()
---
--- Gets the IM context of a key controller.
---
--- ---
---
---@param self Gtk.EventControllerKey # a `GtkEventControllerKey`
---@return Gtk.IMContext # the IM context
function Gtk.EventControllerKey:get_im_context() end

--- # method Gtk.EventControllerKey:set_im_context()
---
---@param self Gtk.EventControllerKey
---@param im_context Gtk.IMContext
---@return nil
function Gtk.EventControllerKey:set_im_context(im_context) end

--- # function Gtk.EventControllerKey.new()
---
---@param widget Gtk.Widget
---@return Gtk.EventController
function Gtk.EventControllerKey.new(widget) end

--- # record Gtk.EventControllerKeyClass
---
---@class Gtk.EventControllerKeyClass
Gtk.EventControllerKeyClass = {}

--- # class Gtk.EventControllerMotion
---
--- `GtkEventControllerMotion` is an event controller meant for situations
--- where you need to track the position of the pointer.
--- 
--- This object was added in 3.24.
---
--- ---
---
---@class Gtk.EventControllerMotion : Gtk.EventController
---@operator call: Gtk.EventControllerMotion
Gtk.EventControllerMotion = {}

--- # function Gtk.EventControllerMotion.new()
---
--- Creates a new event controller that will handle motion events
--- for the given `widget`.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@return Gtk.EventController # a new `GtkEventControllerMotion`
function Gtk.EventControllerMotion.new(widget) end

--- # record Gtk.EventControllerMotionClass
---
---@class Gtk.EventControllerMotionClass
Gtk.EventControllerMotionClass = {}

--- # class Gtk.EventControllerScroll
---
--- `GtkEventControllerScroll` is an event controller meant to handle
--- scroll events from mice and touchpads. It is capable of handling
--- both discrete and continuous scroll events, abstracting them both
--- on the `GtkEventControllerScroll`::scroll signal (deltas in the
--- discrete case are multiples of 1).
--- 
--- In the case of continuous scroll events, `GtkEventControllerScroll`
--- encloses all `GtkEventControllerScroll`::scroll events between two
--- `GtkEventControllerScroll`::scroll-begin and `GtkEventControllerScroll`::scroll-end
--- signals.
--- 
--- The behavior of the event controller can be modified by the
--- flags given at creation time, or modified at a later point through
--- `gtk_event_controller_scroll_set_flags()` (e.g. because the scrolling
--- conditions of the widget changed).
--- 
--- The controller can be set up to emit motion for either/both vertical
--- and horizontal scroll events through `GTK_EVENT_CONTROLLER_SCROLL_VERTICAL`,
--- `GTK_EVENT_CONTROLLER_SCROLL_HORIZONTAL` and `GTK_EVENT_CONTROLLER_SCROLL_BOTH`.
--- If any axis is disabled, the respective `GtkEventControllerScroll`::scroll
--- delta will be 0. Vertical scroll events will be translated to horizontal
--- motion for the devices incapable of horizontal scrolling.
--- 
--- The event controller can also be forced to emit discrete events on all devices
--- through `GTK_EVENT_CONTROLLER_SCROLL_DISCRETE`. This can be used to implement
--- discrete actions triggered through scroll events (e.g. switching across
--- combobox options).
--- 
--- The `GTK_EVENT_CONTROLLER_SCROLL_KINETIC` flag toggles the emission of the
--- `GtkEventControllerScroll`::decelerate signal, emitted at the end of scrolling
--- with two X/Y velocity arguments that are consistent with the motion that
--- was received.
--- 
--- This object was added in 3.24.
---
--- ---
---
---@class Gtk.EventControllerScroll : Gtk.EventController
---@operator call: Gtk.EventControllerScroll
Gtk.EventControllerScroll = {}

--- # method Gtk.EventControllerScroll:get_flags()
---
--- Gets the flags conditioning the scroll controller behavior.
---
--- ---
---
---@param self Gtk.EventControllerScroll # a `GtkEventControllerScroll`
---@return Gtk.EventControllerScrollFlags # the controller flags.
function Gtk.EventControllerScroll:get_flags() end

--- # method Gtk.EventControllerScroll:set_flags()
---
--- Sets the flags conditioning scroll controller behavior.
---
--- ---
---
---@param self Gtk.EventControllerScroll # a `GtkEventControllerScroll`
---@param flags Gtk.EventControllerScrollFlags # behavior flags
---@return nil
function Gtk.EventControllerScroll:set_flags(flags) end

--- # function Gtk.EventControllerScroll.new()
---
--- Creates a new event controller that will handle scroll events
--- for the given `widget`.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@param flags Gtk.EventControllerScrollFlags # behavior flags
---@return Gtk.EventController # a new `GtkEventControllerScroll`
function Gtk.EventControllerScroll.new(widget, flags) end

--- # record Gtk.EventControllerScrollClass
---
---@class Gtk.EventControllerScrollClass
Gtk.EventControllerScrollClass = {}

---@enum Gtk.EventControllerScrollFlags
Gtk.EventControllerScrollFlags = {}

---@enum Gtk.EventSequenceState
Gtk.EventSequenceState = {}

--- # class Gtk.Expander
---
--- A `GtkExpander` allows the user to hide or show its child by clicking
--- on an expander triangle similar to the triangles used in a `GtkTreeView`.
--- 
--- Normally you use an expander as you would use any other descendant
--- of `GtkBin`; you create the child widget and use `gtk_container_add()`
--- to add it to the expander. When the expander is toggled, it will take
--- care of showing and hiding the child automatically.
--- 
--- # Special Usage
--- 
--- There are situations in which you may prefer to show and hide the
--- expanded widget yourself, such as when you want to actually create
--- the widget at expansion time. In this case, create a `GtkExpander`
--- but do not add a child to it. The expander widget has an
--- `GtkExpander`:expanded property which can be used to monitor
--- its expansion state. You should watch this property with a signal
--- connection as follows:
--- 
--- ```c
--- static void
--- expander_callback (GObject    *object,
---                    GParamSpec *param_spec,
---                    gpointer    user_data)
--- {
---   GtkExpander *expander;
--- 
---   expander = GTK_EXPANDER (object);
--- 
---   if (gtk_expander_get_expanded (expander))
---     {
---       // Show or create widgets
---     }
---   else
---     {
---       // Hide or destroy widgets
---     }
--- }
--- 
--- static void
--- create_expander (void)
--- {
---   GtkWidget *expander = gtk_expander_new_with_mnemonic ("_More Options");
---   g_signal_connect (expander, "notify::expanded",
---                     G_CALLBACK (expander_callback), NULL);
--- 
---   // ...
--- }
--- ```
--- 
--- # GtkExpander as GtkBuildable
--- 
--- The GtkExpander implementation of the GtkBuildable interface supports
--- placing a child in the label position by specifying “label” as the
--- “type” attribute of a `<child>` element. A normal content child can be
--- specified without specifying a `<child>` type attribute.
--- 
--- An example of a UI definition fragment with GtkExpander:
--- 
--- ```xml
--- <object class="GtkExpander">
---   <child type="label">
---     <object class="GtkLabel" id="expander-label"/>
---   </child>
---   <child>
---     <object class="GtkEntry" id="expander-content"/>
---   </child>
--- </object>
--- ```
--- 
--- # CSS nodes
--- 
--- ```plain
--- expander
--- ├── title
--- │   ├── arrow
--- │   ╰── <label widget>
--- ╰── <child>
--- ```
--- 
--- GtkExpander has three CSS nodes, the main node with the name expander,
--- a subnode with name title and node below it with name arrow. The arrow of an
--- expander that is showing its child gets the :checked pseudoclass added to it.
---
--- ---
---
---@class Gtk.Expander : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field bin Gtk.Bin
---@field priv Gtk.ExpanderPrivate
---@operator call: Gtk.Expander
Gtk.Expander = {}

--- # method Gtk.Expander:get_expanded()
---
--- Queries a `GtkExpander` and returns its current state. Returns `true`
--- if the child widget is revealed.
--- 
--- See `gtk_expander_set_expanded()`.
---
--- ---
---
---@param self Gtk.Expander # a `GtkExpander`
---@return (boolean|nil) # the current state of the expander
function Gtk.Expander:get_expanded() end

--- # method Gtk.Expander:get_label()
---
--- Fetches the text from a label widget including any embedded
--- underlines indicating mnemonics and Pango markup, as set by
--- `gtk_expander_set_label()`. If the label text has not been set the
--- return value will be `nil`. This will be the case if you create an
--- empty button with `gtk_button_new()` to use as a container.
--- 
--- Note that this function behaved differently in versions prior to
--- 2.14 and used to return the label text stripped of embedded
--- underlines indicating mnemonics and Pango markup. This problem can
--- be avoided by fetching the label text directly from the label
--- widget.
---
--- ---
---
---@param self Gtk.Expander # a `GtkExpander`
---@return string # The text of the label widget. This string is owned by the widget and must not be modified or freed.
function Gtk.Expander:get_label() end

--- # method Gtk.Expander:get_label_fill()
---
--- Returns whether the label widget will fill all available
--- horizontal space allocated to `expander`.
---
--- ---
---
---@param self Gtk.Expander # a `GtkExpander`
---@return (boolean|nil) # `true` if the label widget will fill all available horizontal space
function Gtk.Expander:get_label_fill() end

--- # method Gtk.Expander:get_label_widget()
---
--- Retrieves the label widget for the frame. See
--- `gtk_expander_set_label_widget()`.
---
--- ---
---
---@param self Gtk.Expander # a `GtkExpander`
---@return Gtk.Widget # the label widget, or `nil` if there is none
function Gtk.Expander:get_label_widget() end

--- # method Gtk.Expander:get_resize_toplevel()
---
--- Returns whether the expander will resize the toplevel widget
--- containing the expander upon resizing and collpasing.
---
--- ---
---
---@param self Gtk.Expander # a `GtkExpander`
---@return (boolean|nil) # the “resize toplevel” setting.
function Gtk.Expander:get_resize_toplevel() end

--- # method Gtk.Expander:get_spacing()
---
--- Gets the value set by `gtk_expander_set_spacing()`.
---
--- ---
---
---@param self Gtk.Expander # a `GtkExpander`
---@return integer # spacing between the expander and child
function Gtk.Expander:get_spacing() end

--- # method Gtk.Expander:get_use_markup()
---
--- Returns whether the label’s text is interpreted as marked up with
--- the [Pango text markup language][PangoMarkupFormat].
--- See `gtk_expander_set_use_markup()`.
---
--- ---
---
---@param self Gtk.Expander # a `GtkExpander`
---@return (boolean|nil) # `true` if the label’s text will be parsed for markup
function Gtk.Expander:get_use_markup() end

--- # method Gtk.Expander:get_use_underline()
---
--- Returns whether an embedded underline in the expander label
--- indicates a mnemonic. See `gtk_expander_set_use_underline()`.
---
--- ---
---
---@param self Gtk.Expander # a `GtkExpander`
---@return (boolean|nil) # `true` if an embedded underline in the expander label indicates the mnemonic accelerator keys
function Gtk.Expander:get_use_underline() end

--- # method Gtk.Expander:set_expanded()
---
--- Sets the state of the expander. Set to `true`, if you want
--- the child widget to be revealed, and `false` if you want the
--- child widget to be hidden.
---
--- ---
---
---@param self Gtk.Expander # a `GtkExpander`
---@param expanded (boolean|nil) # whether the child widget is revealed
---@return nil
function Gtk.Expander:set_expanded(expanded) end

--- # method Gtk.Expander:set_label()
---
--- Sets the text of the label of the expander to `label`.
--- 
--- This will also clear any previously set labels.
---
--- ---
---
---@param self Gtk.Expander # a `GtkExpander`
---@param label? string # a string
---@return nil
function Gtk.Expander:set_label(label) end

--- # method Gtk.Expander:set_label_fill()
---
--- Sets whether the label widget should fill all available
--- horizontal space allocated to `expander`.
--- 
--- Note that this function has no effect since 3.20.
---
--- ---
---
---@param self Gtk.Expander # a `GtkExpander`
---@param label_fill (boolean|nil) # `true` if the label should should fill all available horizontal space
---@return nil
function Gtk.Expander:set_label_fill(label_fill) end

--- # method Gtk.Expander:set_label_widget()
---
--- Set the label widget for the expander. This is the widget
--- that will appear embedded alongside the expander arrow.
---
--- ---
---
---@param self Gtk.Expander # a `GtkExpander`
---@param label_widget? Gtk.Widget # the new label widget
---@return nil
function Gtk.Expander:set_label_widget(label_widget) end

--- # method Gtk.Expander:set_resize_toplevel()
---
--- Sets whether the expander will resize the toplevel widget
--- containing the expander upon resizing and collpasing.
---
--- ---
---
---@param self Gtk.Expander # a `GtkExpander`
---@param resize_toplevel (boolean|nil) # whether to resize the toplevel
---@return nil
function Gtk.Expander:set_resize_toplevel(resize_toplevel) end

--- # method Gtk.Expander:set_spacing()
---
--- Sets the spacing field of `expander`, which is the number of
--- pixels to place between expander and the child.
---
--- ---
---
---@param self Gtk.Expander # a `GtkExpander`
---@param spacing integer # distance between the expander and child in pixels
---@return nil
function Gtk.Expander:set_spacing(spacing) end

--- # method Gtk.Expander:set_use_markup()
---
--- Sets whether the text of the label contains markup in
--- [Pango’s text markup language][PangoMarkupFormat].
--- See `gtk_label_set_markup()`.
---
--- ---
---
---@param self Gtk.Expander # a `GtkExpander`
---@param use_markup (boolean|nil) # `true` if the label’s text should be parsed for markup
---@return nil
function Gtk.Expander:set_use_markup(use_markup) end

--- # method Gtk.Expander:set_use_underline()
---
--- If true, an underline in the text of the expander label indicates
--- the next character should be used for the mnemonic accelerator key.
---
--- ---
---
---@param self Gtk.Expander # a `GtkExpander`
---@param use_underline (boolean|nil) # `true` if underlines in the text indicate mnemonics
---@return nil
function Gtk.Expander:set_use_underline(use_underline) end

--- # function Gtk.Expander.new()
---
--- Creates a new expander using `label` as the text of the label.
---
--- ---
---
---@param label? string # the text of the label
---@return Gtk.Widget # a new `GtkExpander` widget.
function Gtk.Expander.new(label) end

--- # function Gtk.Expander.new_with_mnemonic()
---
--- Creates a new expander using `label` as the text of the label.
--- If characters in `label` are preceded by an underscore, they are underlined.
--- If you need a literal underscore character in a label, use “__” (two
--- underscores). The first underlined character represents a keyboard
--- accelerator called a mnemonic.
--- Pressing Alt and that key activates the button.
---
--- ---
---
---@param label? string # the text of the label with an underscore in front of the mnemonic character
---@return Gtk.Widget # a new `GtkExpander` widget.
function Gtk.Expander.new_with_mnemonic(label) end

--- # class Gtk.ExpanderAccessible
---
---@class Gtk.ExpanderAccessible : Gtk.ContainerAccessible, Gtk.Atk.Action, Gtk.Atk.Component
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.ExpanderAccessiblePrivate
Gtk.ExpanderAccessible = {}

--- # record Gtk.ExpanderAccessibleClass
---
---@class Gtk.ExpanderAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.ExpanderAccessibleClass = {}

--- # record Gtk.ExpanderAccessiblePrivate
---
---@class Gtk.ExpanderAccessiblePrivate
Gtk.ExpanderAccessiblePrivate = {}

--- # record Gtk.ExpanderClass
---
---@class Gtk.ExpanderClass
---@field parent_class Gtk.BinClass # The parent class.
---@field activate fun(expander: Gtk.Expander): nil
Gtk.ExpanderClass = {}

--- # record Gtk.ExpanderPrivate
---
---@class Gtk.ExpanderPrivate
Gtk.ExpanderPrivate = {}

---@enum Gtk.ExpanderStyle
Gtk.ExpanderStyle = {}

--- # interface Gtk.FileChooser
---
--- `GtkFileChooser` is an interface that can be implemented by file
--- selection widgets.  In GTK+, the main objects that implement this
--- interface are `GtkFileChooserWidget`, `GtkFileChooserDialog`, and
--- `GtkFileChooserButton`.  You do not need to write an object that
--- implements the `GtkFileChooser` interface unless you are trying to
--- adapt an existing file selector to expose a standard programming
--- interface.
--- 
--- `GtkFileChooser` allows for shortcuts to various places in the filesystem.
--- In the default implementation these are displayed in the left pane. It
--- may be a bit confusing at first that these shortcuts come from various
--- sources and in various flavours, so lets explain the terminology here:
--- 
--- - Bookmarks: are created by the user, by dragging folders from the
---   right pane to the left pane, or by using the “Add”. Bookmarks
---   can be renamed and deleted by the user.
--- 
--- - Shortcuts: can be provided by the application. For example, a Paint
---   program may want to add a shortcut for a Clipart folder. Shortcuts
---   cannot be modified by the user.
--- 
--- - Volumes: are provided by the underlying filesystem abstraction. They are
---   the “roots” of the filesystem.
--- 
--- # File Names and Encodings
--- 
--- When the user is finished selecting files in a
--- `GtkFileChooser`, your program can get the selected names
--- either as filenames or as URIs.  For URIs, the normal escaping
--- rules are applied if the URI contains non-ASCII characters.
--- However, filenames are always returned in
--- the character set specified by the
--- `G_FILENAME_ENCODING` environment variable.
--- Please see the GLib documentation for more details about this
--- variable.
--- 
--- This means that while you can pass the result of
--- `gtk_file_chooser_get_filename()` to `g_open()` or `g_fopen()`,
--- you may not be able to directly set it as the text of a
--- `GtkLabel` widget unless you convert it first to UTF-8,
--- which all GTK+ widgets expect. You should use g_filename_to_utf8()
--- to convert filenames into strings that can be passed to GTK+
--- widgets.
--- 
--- # Adding a Preview Widget
--- 
--- You can add a custom preview widget to a file chooser and then
--- get notification about when the preview needs to be updated.
--- To install a preview widget, use
--- `gtk_file_chooser_set_preview_widget()`.  Then, connect to the
--- `GtkFileChooser`::update-preview signal to get notified when
--- you need to update the contents of the preview.
--- 
--- Your callback should use
--- `gtk_file_chooser_get_preview_filename()` to see what needs
--- previewing.  Once you have generated the preview for the
--- corresponding file, you must call
--- `gtk_file_chooser_set_preview_widget_active()` with a boolean
--- flag that indicates whether your callback could successfully
--- generate a preview.
--- 
--- ## Example: Using a Preview Widget ## {`gtkfilechooser`-preview}
--- ```c
--- {
---   GtkImage *preview;
--- 
---   ...
--- 
---   preview = gtk_image_new ();
--- 
---   gtk_file_chooser_set_preview_widget (my_file_chooser, preview);
---   g_signal_connect (my_file_chooser, "update-preview",
--- 		    G_CALLBACK (update_preview_cb), preview);
--- }
--- 
--- static void
--- update_preview_cb (GtkFileChooser *file_chooser, gpointer data)
--- {
---   GtkWidget *preview;
---   char *filename;
---   GdkPixbuf *pixbuf;
---   gboolean have_preview;
--- 
---   preview = GTK_WIDGET (data);
---   filename = gtk_file_chooser_get_preview_filename (file_chooser);
--- 
---   pixbuf = gdk_pixbuf_new_from_file_at_size (filename, 128, 128, NULL);
---   have_preview = (pixbuf != NULL);
---   g_free (filename);
--- 
---   gtk_image_set_from_pixbuf (GTK_IMAGE (preview), pixbuf);
---   if (pixbuf)
---     g_object_unref (pixbuf);
--- 
---   gtk_file_chooser_set_preview_widget_active (file_chooser, have_preview);
--- }
--- ```
--- 
--- # Adding Extra Widgets
--- 
--- You can add extra widgets to a file chooser to provide options
--- that are not present in the default design.  For example, you
--- can add a toggle button to give the user the option to open a
--- file in read-only mode.  You can use
--- `gtk_file_chooser_set_extra_widget()` to insert additional
--- widgets in a file chooser.
--- 
--- An example for adding extra widgets:
--- ```c
--- 
---   GtkWidget *toggle;
--- 
---   ...
--- 
---   toggle = gtk_check_button_new_with_label ("Open file read-only");
---   gtk_widget_show (toggle);
---   gtk_file_chooser_set_extra_widget (my_file_chooser, toggle);
--- }
--- ```
--- 
--- If you want to set more than one extra widget in the file
--- chooser, you can a container such as a `GtkBox` or a `GtkGrid`
--- and include your widgets in it.  Then, set the container as
--- the whole extra widget.
---
--- ---
---
---@class Gtk.FileChooser
Gtk.FileChooser = {}

--- # method Gtk.FileChooser:add_choice()
---
--- Adds a 'choice' to the file chooser. This is typically implemented
--- as a combobox or, for boolean choices, as a checkbutton. You can select
--- a value using `gtk_file_chooser_set_choice()` before the dialog is shown,
--- and you can obtain the user-selected value in the ::response signal handler
--- using `gtk_file_chooser_get_choice()`.
--- 
--- Compare `gtk_file_chooser_set_extra_widget()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param id string # id for the added choice
---@param label string # user-visible label for the added choice
---@param options? unknown[] # ids for the options of the choice, or `nil` for a boolean choice
---@param option_labels? unknown[] # user-visible labels for the options, must be the same length as `options`
---@return nil
function Gtk.FileChooser:add_choice(id, label, options, option_labels) end

--- # method Gtk.FileChooser:add_filter()
---
--- Adds `filter` to the list of filters that the user can select between.
--- When a filter is selected, only files that are passed by that
--- filter are displayed.
--- 
--- Note that the `chooser` takes ownership of the filter, so you have to
--- ref and sink it if you want to keep a reference.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param filter Gtk.FileFilter # a `GtkFileFilter`
---@return nil
function Gtk.FileChooser:add_filter(filter) end

--- # method Gtk.FileChooser:add_shortcut_folder()
---
--- Adds a folder to be displayed with the shortcut folders in a file chooser.
--- Note that shortcut folders do not get saved, as they are provided by the
--- application.  For example, you can use this to add a
--- “/usr/share/mydrawprogram/Clipart” folder to the volume list.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param folder string # filename of the folder to add
---@return (boolean|nil) # `true` if the folder could be added successfully, `false` otherwise. In the latter case, the `error` will be set as appropriate.
function Gtk.FileChooser:add_shortcut_folder(folder) end

--- # method Gtk.FileChooser:add_shortcut_folder_uri()
---
--- Adds a folder URI to be displayed with the shortcut folders in a file
--- chooser.  Note that shortcut folders do not get saved, as they are provided
--- by the application.  For example, you can use this to add a
--- “file:///usr/share/mydrawprogram/Clipart” folder to the volume list.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param uri string # URI of the folder to add
---@return (boolean|nil) # `true` if the folder could be added successfully, `false` otherwise. In the latter case, the `error` will be set as appropriate.
function Gtk.FileChooser:add_shortcut_folder_uri(uri) end

--- # method Gtk.FileChooser:get_action()
---
--- Gets the type of operation that the file chooser is performing; see
--- `gtk_file_chooser_set_action()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return Gtk.FileChooserAction # the action that the file selector is performing
function Gtk.FileChooser:get_action() end

--- # method Gtk.FileChooser:get_choice()
---
--- Gets the currently selected option in the 'choice' with the given ID.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param id string # the ID of the choice to get
---@return string # the ID of the currenly selected option
function Gtk.FileChooser:get_choice(id) end

--- # method Gtk.FileChooser:get_create_folders()
---
--- Gets whether file choser will offer to create new folders.
--- See `gtk_file_chooser_set_create_folders()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return (boolean|nil) # `true` if the Create Folder button should be displayed.
function Gtk.FileChooser:get_create_folders() end

--- # method Gtk.FileChooser:get_current_folder()
---
--- Gets the current folder of `chooser` as a local filename.
--- See `gtk_file_chooser_set_current_folder()`.
--- 
--- Note that this is the folder that the file chooser is currently displaying
--- (e.g. "/home/username/Documents"), which is not the same
--- as the currently-selected folder if the chooser is in
--- %GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER mode
--- (e.g. "/home/username/Documents/selected-folder/".  To get the
--- currently-selected folder in that mode, use `gtk_file_chooser_get_uri()` as the
--- usual way to get the selection.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return string # the full path of the current folder, or `nil` if the current path cannot be represented as a local filename. Free with `g_free()`. This function will also return `nil` if the file chooser was unable to load the last folder that was requested from it; for example, as would be for calling `gtk_file_chooser_set_current_folder()` on a nonexistent folder.
function Gtk.FileChooser:get_current_folder() end

--- # method Gtk.FileChooser:get_current_folder_file()
---
--- Gets the current folder of `chooser` as `GFile`.
--- See `gtk_file_chooser_get_current_folder_uri()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return Gio.File # the `GFile` for the current folder.
function Gtk.FileChooser:get_current_folder_file() end

--- # method Gtk.FileChooser:get_current_folder_uri()
---
--- Gets the current folder of `chooser` as an URI.
--- See `gtk_file_chooser_set_current_folder_uri()`.
--- 
--- Note that this is the folder that the file chooser is currently displaying
--- (e.g. "file:///home/username/Documents"), which is not the same
--- as the currently-selected folder if the chooser is in
--- %GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER mode
--- (e.g. "file:///home/username/Documents/selected-folder/".  To get the
--- currently-selected folder in that mode, use `gtk_file_chooser_get_uri()` as the
--- usual way to get the selection.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return string # the URI for the current folder. Free with `g_free()`. This function will also return `nil` if the file chooser was unable to load the last folder that was requested from it; for example, as would be for calling `gtk_file_chooser_set_current_folder_uri()` on a nonexistent folder.
function Gtk.FileChooser:get_current_folder_uri() end

--- # method Gtk.FileChooser:get_current_name()
---
--- Gets the current name in the file selector, as entered by the user in the
--- text entry for “Name”.
--- 
--- This is meant to be used in save dialogs, to get the currently typed filename
--- when the file itself does not exist yet.  For example, an application that
--- adds a custom extra widget to the file chooser for “file format” may want to
--- change the extension of the typed filename based on the chosen format, say,
--- from “.jpg” to “.png”.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return string # The raw text from the file chooser’s “Name” entry. Free this with `g_free()`. Note that this string is not a full pathname or URI; it is whatever the contents of the entry are. Note also that this string is in UTF-8 encoding, which is not necessarily the system’s encoding for filenames.
function Gtk.FileChooser:get_current_name() end

--- # method Gtk.FileChooser:get_do_overwrite_confirmation()
---
--- Queries whether a file chooser is set to confirm for overwriting when the user
--- types a file name that already exists.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return (boolean|nil) # `true` if the file chooser will present a confirmation dialog; `false` otherwise.
function Gtk.FileChooser:get_do_overwrite_confirmation() end

--- # method Gtk.FileChooser:get_extra_widget()
---
--- Gets the current extra widget; see
--- `gtk_file_chooser_set_extra_widget()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return Gtk.Widget # the current extra widget, or `nil`
function Gtk.FileChooser:get_extra_widget() end

--- # method Gtk.FileChooser:get_file()
---
--- Gets the `GFile` for the currently selected file in
--- the file selector. If multiple files are selected,
--- one of the files will be returned at random.
--- 
--- If the file chooser is in folder mode, this function returns the selected
--- folder.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return Gio.File # a selected `GFile`. You own the returned file; use `g_object_unref()` to release it.
function Gtk.FileChooser:get_file() end

--- # method Gtk.FileChooser:get_filename()
---
--- Gets the filename for the currently selected file in
--- the file selector. The filename is returned as an absolute path. If
--- multiple files are selected, one of the filenames will be returned at
--- random.
--- 
--- If the file chooser is in folder mode, this function returns the selected
--- folder.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return string # The currently selected filename, or `nil` if no file is selected, or the selected file can't be represented with a local filename. Free with `g_free()`.
function Gtk.FileChooser:get_filename() end

--- # method Gtk.FileChooser:get_filenames()
---
--- Lists all the selected files and subfolders in the current folder of
--- `chooser`. The returned names are full absolute paths. If files in the current
--- folder cannot be represented as local filenames they will be ignored. (See
--- `gtk_file_chooser_get_uris()`)
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return string[] # a `GSList` containing the filenames of all selected files and subfolders in the current folder. Free the returned list with `g_slist_free()`, and the filenames with `g_free()`.
function Gtk.FileChooser:get_filenames() end

--- # method Gtk.FileChooser:get_files()
---
--- Lists all the selected files and subfolders in the current folder of `chooser`
--- as `GFile`. An internal function, see `gtk_file_chooser_get_uris()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return Gio.File[] # a `GSList` containing a `GFile` for each selected file and subfolder in the current folder. Free the returned list with `g_slist_free()`, and the files with `g_object_unref()`.
function Gtk.FileChooser:get_files() end

--- # method Gtk.FileChooser:get_filter()
---
--- Gets the current filter; see `gtk_file_chooser_set_filter()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return Gtk.FileFilter # the current filter, or `nil`
function Gtk.FileChooser:get_filter() end

--- # method Gtk.FileChooser:get_local_only()
---
--- Gets whether only local files can be selected in the
--- file selector. See `gtk_file_chooser_set_local_only()`
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return (boolean|nil) # `true` if only local files can be selected.
function Gtk.FileChooser:get_local_only() end

--- # method Gtk.FileChooser:get_preview_file()
---
--- Gets the `GFile` that should be previewed in a custom preview
--- Internal function, see `gtk_file_chooser_get_preview_uri()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return Gio.File # the `GFile` for the file to preview, or `nil` if no file is selected. Free with `g_object_unref()`.
function Gtk.FileChooser:get_preview_file() end

--- # method Gtk.FileChooser:get_preview_filename()
---
--- Gets the filename that should be previewed in a custom preview
--- widget. See `gtk_file_chooser_set_preview_widget()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return string # the filename to preview, or `nil` if no file is selected, or if the selected file cannot be represented as a local filename. Free with `g_free()`
function Gtk.FileChooser:get_preview_filename() end

--- # method Gtk.FileChooser:get_preview_uri()
---
--- Gets the URI that should be previewed in a custom preview
--- widget. See `gtk_file_chooser_set_preview_widget()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return string # the URI for the file to preview, or `nil` if no file is selected. Free with `g_free()`.
function Gtk.FileChooser:get_preview_uri() end

--- # method Gtk.FileChooser:get_preview_widget()
---
--- Gets the current preview widget; see
--- `gtk_file_chooser_set_preview_widget()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return Gtk.Widget # the current preview widget, or `nil`
function Gtk.FileChooser:get_preview_widget() end

--- # method Gtk.FileChooser:get_preview_widget_active()
---
--- Gets whether the preview widget set by `gtk_file_chooser_set_preview_widget()`
--- should be shown for the current filename. See
--- `gtk_file_chooser_set_preview_widget_active()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return (boolean|nil) # `true` if the preview widget is active for the current filename.
function Gtk.FileChooser:get_preview_widget_active() end

--- # method Gtk.FileChooser:get_select_multiple()
---
--- Gets whether multiple files can be selected in the file
--- selector. See `gtk_file_chooser_set_select_multiple()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return (boolean|nil) # `true` if multiple files can be selected.
function Gtk.FileChooser:get_select_multiple() end

--- # method Gtk.FileChooser:get_show_hidden()
---
--- Gets whether hidden files and folders are displayed in the file selector.
--- See `gtk_file_chooser_set_show_hidden()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return (boolean|nil) # `true` if hidden files and folders are displayed.
function Gtk.FileChooser:get_show_hidden() end

--- # method Gtk.FileChooser:get_uri()
---
--- Gets the URI for the currently selected file in
--- the file selector. If multiple files are selected,
--- one of the filenames will be returned at random.
--- 
--- If the file chooser is in folder mode, this function returns the selected
--- folder.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return string # The currently selected URI, or `nil` if no file is selected. If `gtk_file_chooser_set_local_only()` is set to `true` (the default) a local URI will be returned for any FUSE locations. Free with `g_free()`
function Gtk.FileChooser:get_uri() end

--- # method Gtk.FileChooser:get_uris()
---
--- Lists all the selected files and subfolders in the current folder of
--- `chooser`. The returned names are full absolute URIs.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return string[] # a `GSList` containing the URIs of all selected files and subfolders in the current folder. Free the returned list with `g_slist_free()`, and the filenames with `g_free()`.
function Gtk.FileChooser:get_uris() end

--- # method Gtk.FileChooser:get_use_preview_label()
---
--- Gets whether a stock label should be drawn with the name of the previewed
--- file.  See `gtk_file_chooser_set_use_preview_label()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return (boolean|nil) # `true` if the file chooser is set to display a label with the name of the previewed file, `false` otherwise.
function Gtk.FileChooser:get_use_preview_label() end

--- # method Gtk.FileChooser:list_filters()
---
--- Lists the current set of user-selectable filters; see
--- `gtk_file_chooser_add_filter()`, `gtk_file_chooser_remove_filter()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return Gtk.FileFilter[] # a `GSList` containing the current set of user selectable filters. The contents of the list are owned by GTK+, but you must free the list itself with `g_slist_free()` when you are done with it.
function Gtk.FileChooser:list_filters() end

--- # method Gtk.FileChooser:list_shortcut_folder_uris()
---
--- Queries the list of shortcut folders in the file chooser, as set by
--- `gtk_file_chooser_add_shortcut_folder_uri()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return string[] # A list of folder URIs, or `nil` if there are no shortcut folders. Free the returned list with `g_slist_free()`, and the URIs with `g_free()`.
function Gtk.FileChooser:list_shortcut_folder_uris() end

--- # method Gtk.FileChooser:list_shortcut_folders()
---
--- Queries the list of shortcut folders in the file chooser, as set by
--- `gtk_file_chooser_add_shortcut_folder()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return string[] # A list of folder filenames, or `nil` if there are no shortcut folders. Free the returned list with `g_slist_free()`, and the filenames with `g_free()`.
function Gtk.FileChooser:list_shortcut_folders() end

--- # method Gtk.FileChooser:remove_choice()
---
--- Removes a 'choice' that has been added with `gtk_file_chooser_add_choice()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param id string # the ID of the choice to remove
---@return nil
function Gtk.FileChooser:remove_choice(id) end

--- # method Gtk.FileChooser:remove_filter()
---
--- Removes `filter` from the list of filters that the user can select between.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param filter Gtk.FileFilter # a `GtkFileFilter`
---@return nil
function Gtk.FileChooser:remove_filter(filter) end

--- # method Gtk.FileChooser:remove_shortcut_folder()
---
--- Removes a folder from a file chooser’s list of shortcut folders.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param folder string # filename of the folder to remove
---@return (boolean|nil) # `true` if the operation succeeds, `false` otherwise. In the latter case, the `error` will be set as appropriate. See also: `gtk_file_chooser_add_shortcut_folder()`
function Gtk.FileChooser:remove_shortcut_folder(folder) end

--- # method Gtk.FileChooser:remove_shortcut_folder_uri()
---
--- Removes a folder URI from a file chooser’s list of shortcut folders.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param uri string # URI of the folder to remove
---@return (boolean|nil) # `true` if the operation succeeds, `false` otherwise. In the latter case, the `error` will be set as appropriate. See also: `gtk_file_chooser_add_shortcut_folder_uri()`
function Gtk.FileChooser:remove_shortcut_folder_uri(uri) end

--- # method Gtk.FileChooser:select_all()
---
--- Selects all the files in the current folder of a file chooser.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return nil
function Gtk.FileChooser:select_all() end

--- # method Gtk.FileChooser:select_file()
---
--- Selects the file referred to by `file`. An internal function. See
--- `_gtk_file_chooser_select_uri()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param file Gio.File # the file to select
---@return (boolean|nil) # Not useful.
function Gtk.FileChooser:select_file(file) end

--- # method Gtk.FileChooser:select_filename()
---
--- Selects a filename. If the file name isn’t in the current
--- folder of `chooser`, then the current folder of `chooser` will
--- be changed to the folder containing `filename`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param filename string # the filename to select
---@return (boolean|nil) # Not useful. See also: `gtk_file_chooser_set_filename()`
function Gtk.FileChooser:select_filename(filename) end

--- # method Gtk.FileChooser:select_uri()
---
--- Selects the file to by `uri`. If the URI doesn’t refer to a
--- file in the current folder of `chooser`, then the current folder of
--- `chooser` will be changed to the folder containing `filename`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param uri string # the URI to select
---@return (boolean|nil) # Not useful.
function Gtk.FileChooser:select_uri(uri) end

--- # method Gtk.FileChooser:set_action()
---
--- Sets the type of operation that the chooser is performing; the
--- user interface is adapted to suit the selected action. For example,
--- an option to create a new folder might be shown if the action is
--- %GTK_FILE_CHOOSER_ACTION_SAVE but not if the action is
--- %GTK_FILE_CHOOSER_ACTION_OPEN.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param action Gtk.FileChooserAction # the action that the file selector is performing
---@return nil
function Gtk.FileChooser:set_action(action) end

--- # method Gtk.FileChooser:set_choice()
---
--- Selects an option in a 'choice' that has been added with
--- `gtk_file_chooser_add_choice()`. For a boolean choice, the
--- possible options are "true" and "false".
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param id string # the ID of the choice to set
---@param option string # the ID of the option to select
---@return nil
function Gtk.FileChooser:set_choice(id, option) end

--- # method Gtk.FileChooser:set_create_folders()
---
--- Sets whether file choser will offer to create new folders.
--- This is only relevant if the action is not set to be
--- %GTK_FILE_CHOOSER_ACTION_OPEN.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param create_folders (boolean|nil) # `true` if the Create Folder button should be displayed
---@return nil
function Gtk.FileChooser:set_create_folders(create_folders) end

--- # method Gtk.FileChooser:set_current_folder()
---
--- Sets the current folder for `chooser` from a local filename.
--- The user will be shown the full contents of the current folder,
--- plus user interface elements for navigating to other folders.
--- 
--- In general, you should not use this function.  See the
--- [section on setting up a file chooser dialog][gtkfilechooserdialog-setting-up]
--- for the rationale behind this.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param filename string # the full path of the new current folder
---@return (boolean|nil) # Not useful.
function Gtk.FileChooser:set_current_folder(filename) end

--- # method Gtk.FileChooser:set_current_folder_file()
---
--- Sets the current folder for `chooser` from a `GFile`.
--- Internal function, see `gtk_file_chooser_set_current_folder_uri()`.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param file Gio.File # the `GFile` for the new folder
---@return (boolean|nil) # `true` if the folder could be changed successfully, `false` otherwise.
function Gtk.FileChooser:set_current_folder_file(file) end

--- # method Gtk.FileChooser:set_current_folder_uri()
---
--- Sets the current folder for `chooser` from an URI.
--- The user will be shown the full contents of the current folder,
--- plus user interface elements for navigating to other folders.
--- 
--- In general, you should not use this function.  See the
--- [section on setting up a file chooser dialog][gtkfilechooserdialog-setting-up]
--- for the rationale behind this.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param uri string # the URI for the new current folder
---@return (boolean|nil) # `true` if the folder could be changed successfully, `false` otherwise.
function Gtk.FileChooser:set_current_folder_uri(uri) end

--- # method Gtk.FileChooser:set_current_name()
---
--- Sets the current name in the file selector, as if entered
--- by the user. Note that the name passed in here is a UTF-8
--- string rather than a filename. This function is meant for
--- such uses as a suggested name in a “Save As...” dialog.  You can
--- pass “Untitled.doc” or a similarly suitable suggestion for the `name`.
--- 
--- If you want to preselect a particular existing file, you should use
--- `gtk_file_chooser_set_filename()` or `gtk_file_chooser_set_uri()` instead.
--- Please see the documentation for those functions for an example of using
--- `gtk_file_chooser_set_current_name()` as well.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param name string # the filename to use, as a UTF-8 string
---@return nil
function Gtk.FileChooser:set_current_name(name) end

--- # method Gtk.FileChooser:set_do_overwrite_confirmation()
---
--- Sets whether a file chooser in %GTK_FILE_CHOOSER_ACTION_SAVE mode will present
--- a confirmation dialog if the user types a file name that already exists.  This
--- is `false` by default.
--- 
--- If set to `true`, the `chooser` will emit the
--- `GtkFileChooser`::confirm-overwrite signal when appropriate.
--- 
--- If all you need is the stock confirmation dialog, set this property to `true`.
--- You can override the way confirmation is done by actually handling the
--- `GtkFileChooser`::confirm-overwrite signal; please refer to its documentation
--- for the details.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param do_overwrite_confirmation (boolean|nil) # whether to confirm overwriting in save mode
---@return nil
function Gtk.FileChooser:set_do_overwrite_confirmation(do_overwrite_confirmation) end

--- # method Gtk.FileChooser:set_extra_widget()
---
--- Sets an application-supplied widget to provide extra options to the user.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param extra_widget Gtk.Widget # widget for extra options
---@return nil
function Gtk.FileChooser:set_extra_widget(extra_widget) end

--- # method Gtk.FileChooser:set_file()
---
--- Sets `file` as the current filename for the file chooser, by changing
--- to the file’s parent folder and actually selecting the file in list.  If
--- the `chooser` is in %GTK_FILE_CHOOSER_ACTION_SAVE mode, the file’s base name
--- will also appear in the dialog’s file name entry.
--- 
--- If the file name isn’t in the current folder of `chooser`, then the current
--- folder of `chooser` will be changed to the folder containing `filename`. This
--- is equivalent to a sequence of `gtk_file_chooser_unselect_all()` followed by
--- `gtk_file_chooser_select_filename()`.
--- 
--- Note that the file must exist, or nothing will be done except
--- for the directory change.
--- 
--- If you are implementing a save dialog,
--- you should use this function if you already have a file name to which the
--- user may save; for example, when the user opens an existing file and then
--- does Save As...  If you don’t have
--- a file name already — for example, if the user just created a new
--- file and is saving it for the first time, do not call this function.
--- Instead, use something similar to this:
--- ```c
--- if (document_is_new)
---   {
---     // the user just created a new document
---     gtk_file_chooser_set_current_folder_file (chooser, default_file_for_saving);
---     gtk_file_chooser_set_current_name (chooser, "Untitled document");
---   }
--- else
---   {
---     // the user edited an existing document
---     gtk_file_chooser_set_file (chooser, existing_file);
---   }
--- ```
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param file Gio.File # the `GFile` to set as current
---@return (boolean|nil) # Not useful.
function Gtk.FileChooser:set_file(file) end

--- # method Gtk.FileChooser:set_filename()
---
--- Sets `filename` as the current filename for the file chooser, by changing to
--- the file’s parent folder and actually selecting the file in list; all other
--- files will be unselected.  If the `chooser` is in
--- %GTK_FILE_CHOOSER_ACTION_SAVE mode, the file’s base name will also appear in
--- the dialog’s file name entry.
--- 
--- Note that the file must exist, or nothing will be done except
--- for the directory change.
--- 
--- You should use this function only when implementing a save
--- dialog for which you already have a file name to which
--- the user may save.  For example, when the user opens an existing file and
--- then does Save As... to save a copy or
--- a modified version.  If you don’t have a file name already — for
--- example, if the user just created a new file and is saving it for the first
--- time, do not call this function.  Instead, use something similar to this:
--- ```c
--- if (document_is_new)
---   {
---     // the user just created a new document
---     gtk_file_chooser_set_current_name (chooser, "Untitled document");
---   }
--- else
---   {
---     // the user edited an existing document
---     gtk_file_chooser_set_filename (chooser, existing_filename);
---   }
--- ```
--- 
--- In the first case, the file chooser will present the user with useful suggestions
--- as to where to save his new file.  In the second case, the file’s existing location
--- is already known, so the file chooser will use it.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param filename string # the filename to set as current
---@return (boolean|nil) # Not useful.
function Gtk.FileChooser:set_filename(filename) end

--- # method Gtk.FileChooser:set_filter()
---
--- Sets the current filter; only the files that pass the
--- filter will be displayed. If the user-selectable list of filters
--- is non-empty, then the filter should be one of the filters
--- in that list. Setting the current filter when the list of
--- filters is empty is useful if you want to restrict the displayed
--- set of files without letting the user change it.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param filter Gtk.FileFilter # a `GtkFileFilter`
---@return nil
function Gtk.FileChooser:set_filter(filter) end

--- # method Gtk.FileChooser:set_local_only()
---
--- Sets whether only local files can be selected in the
--- file selector. If `local_only` is `true` (the default),
--- then the selected file or files are guaranteed to be
--- accessible through the operating systems native file
--- system and therefore the application only
--- needs to worry about the filename functions in
--- `GtkFileChooser`, like `gtk_file_chooser_get_filename()`,
--- rather than the URI functions like
--- `gtk_file_chooser_get_uri()`,
--- 
--- On some systems non-native files may still be
--- available using the native filesystem via a userspace
--- filesystem (FUSE).
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param local_only (boolean|nil) # `true` if only local files can be selected
---@return nil
function Gtk.FileChooser:set_local_only(local_only) end

--- # method Gtk.FileChooser:set_preview_widget()
---
--- Sets an application-supplied widget to use to display a custom preview
--- of the currently selected file. To implement a preview, after setting the
--- preview widget, you connect to the `GtkFileChooser`::update-preview
--- signal, and call `gtk_file_chooser_get_preview_filename()` or
--- `gtk_file_chooser_get_preview_uri()` on each change. If you can
--- display a preview of the new file, update your widget and
--- set the preview active using `gtk_file_chooser_set_preview_widget_active()`.
--- Otherwise, set the preview inactive.
--- 
--- When there is no application-supplied preview widget, or the
--- application-supplied preview widget is not active, the file chooser
--- will display no preview at all.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param preview_widget Gtk.Widget # widget for displaying preview.
---@return nil
function Gtk.FileChooser:set_preview_widget(preview_widget) end

--- # method Gtk.FileChooser:set_preview_widget_active()
---
--- Sets whether the preview widget set by
--- `gtk_file_chooser_set_preview_widget()` should be shown for the
--- current filename. When `active` is set to false, the file chooser
--- may display an internally generated preview of the current file
--- or it may display no preview at all. See
--- `gtk_file_chooser_set_preview_widget()` for more details.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param active (boolean|nil) # whether to display the user-specified preview widget
---@return nil
function Gtk.FileChooser:set_preview_widget_active(active) end

--- # method Gtk.FileChooser:set_select_multiple()
---
--- Sets whether multiple files can be selected in the file selector.  This is
--- only relevant if the action is set to be %GTK_FILE_CHOOSER_ACTION_OPEN or
--- %GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param select_multiple (boolean|nil) # `true` if multiple files can be selected.
---@return nil
function Gtk.FileChooser:set_select_multiple(select_multiple) end

--- # method Gtk.FileChooser:set_show_hidden()
---
--- Sets whether hidden files and folders are displayed in the file selector.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param show_hidden (boolean|nil) # `true` if hidden files and folders should be displayed.
---@return nil
function Gtk.FileChooser:set_show_hidden(show_hidden) end

--- # method Gtk.FileChooser:set_uri()
---
--- Sets the file referred to by `uri` as the current file for the file chooser,
--- by changing to the URI’s parent folder and actually selecting the URI in the
--- list.  If the `chooser` is %GTK_FILE_CHOOSER_ACTION_SAVE mode, the URI’s base
--- name will also appear in the dialog’s file name entry.
--- 
--- Note that the URI must exist, or nothing will be done except for the
--- directory change.
--- 
--- You should use this function only when implementing a save
--- dialog for which you already have a file name to which
--- the user may save.  For example, when the user opens an existing file and then
--- does Save As... to save a copy or a
--- modified version.  If you don’t have a file name already — for example,
--- if the user just created a new file and is saving it for the first time, do
--- not call this function.  Instead, use something similar to this:
--- ```c
--- if (document_is_new)
---   {
---     // the user just created a new document
---     gtk_file_chooser_set_current_name (chooser, "Untitled document");
---   }
--- else
---   {
---     // the user edited an existing document
---     gtk_file_chooser_set_uri (chooser, existing_uri);
---   }
--- ```
--- 
--- 
--- In the first case, the file chooser will present the user with useful suggestions
--- as to where to save his new file.  In the second case, the file’s existing location
--- is already known, so the file chooser will use it.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param uri string # the URI to set as current
---@return (boolean|nil) # Not useful.
function Gtk.FileChooser:set_uri(uri) end

--- # method Gtk.FileChooser:set_use_preview_label()
---
--- Sets whether the file chooser should display a stock label with the name of
--- the file that is being previewed; the default is `true`.  Applications that
--- want to draw the whole preview area themselves should set this to `false` and
--- display the name themselves in their preview widget.
--- 
--- See also: `gtk_file_chooser_set_preview_widget()`
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param use_label (boolean|nil) # whether to display a stock label with the name of the previewed file
---@return nil
function Gtk.FileChooser:set_use_preview_label(use_label) end

--- # method Gtk.FileChooser:unselect_all()
---
--- Unselects all the files in the current folder of a file chooser.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@return nil
function Gtk.FileChooser:unselect_all() end

--- # method Gtk.FileChooser:unselect_file()
---
--- Unselects the file referred to by `file`. If the file is not in the current
--- directory, does not exist, or is otherwise not currently selected, does nothing.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param file Gio.File # a `GFile`
---@return nil
function Gtk.FileChooser:unselect_file(file) end

--- # method Gtk.FileChooser:unselect_filename()
---
--- Unselects a currently selected filename. If the filename
--- is not in the current directory, does not exist, or
--- is otherwise not currently selected, does nothing.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param filename string # the filename to unselect
---@return nil
function Gtk.FileChooser:unselect_filename(filename) end

--- # method Gtk.FileChooser:unselect_uri()
---
--- Unselects the file referred to by `uri`. If the file
--- is not in the current directory, does not exist, or
--- is otherwise not currently selected, does nothing.
---
--- ---
---
---@param self Gtk.FileChooser # a `GtkFileChooser`
---@param uri string # the URI to unselect
---@return nil
function Gtk.FileChooser:unselect_uri(uri) end

---@enum Gtk.FileChooserAction
Gtk.FileChooserAction = {}

--- # class Gtk.FileChooserButton
---
--- The `GtkFileChooserButton` is a widget that lets the user select a
--- file.  It implements the `GtkFileChooser` interface.  Visually, it is a
--- file name with a button to bring up a `GtkFileChooserDialog`.
--- The user can then use that dialog to change the file associated with
--- that button.  This widget does not support setting the
--- `GtkFileChooser`:select-multiple property to `true`.
--- 
--- ## Create a button to let the user select a file in /etc
--- 
--- ```c
--- {
---   GtkWidget *button;
--- 
---   button = gtk_file_chooser_button_new (_("Select a file"),
---                                         GTK_FILE_CHOOSER_ACTION_OPEN);
---   gtk_file_chooser_set_current_folder (GTK_FILE_CHOOSER (button),
---                                        "/etc");
--- }
--- ```
--- 
--- The `GtkFileChooserButton` supports the `GtkFileChooserActions`
--- %GTK_FILE_CHOOSER_ACTION_OPEN and %GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.
--- 
--- > The `GtkFileChooserButton` will ellipsize the label, and will thus
--- > request little horizontal space.  To give the button more space,
--- > you should call `gtk_widget_get_preferred_size()`,
--- > `gtk_file_chooser_button_set_width_chars()`, or pack the button in
--- > such a way that other interface elements give space to the
--- > widget.
--- 
--- # CSS nodes
--- 
--- GtkFileChooserButton has a CSS node with name “filechooserbutton”, containing
--- a subnode for the internal button with name “button” and style class “.file”.
---
--- ---
---
---@class Gtk.FileChooserButton : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.FileChooser, Gtk.Orientable
---@field parent Gtk.Box
---@field priv Gtk.FileChooserButtonPrivate
---@operator call: Gtk.FileChooserButton
Gtk.FileChooserButton = {}

--- # method Gtk.FileChooserButton:get_focus_on_click()
---
--- Returns whether the button grabs focus when it is clicked with the mouse.
--- See `gtk_file_chooser_button_set_focus_on_click()`.
---
--- ---
---
---@param self Gtk.FileChooserButton # a `GtkFileChooserButton`
---@return (boolean|nil) # `true` if the button grabs focus when it is clicked with the mouse.
function Gtk.FileChooserButton:get_focus_on_click() end

--- # method Gtk.FileChooserButton:get_title()
---
--- Retrieves the title of the browse dialog used by `button`. The returned value
--- should not be modified or freed.
---
--- ---
---
---@param self Gtk.FileChooserButton # the button widget to examine.
---@return string # a pointer to the browse dialog’s title.
function Gtk.FileChooserButton:get_title() end

--- # method Gtk.FileChooserButton:get_width_chars()
---
--- Retrieves the width in characters of the `button` widget’s entry and/or label.
---
--- ---
---
---@param self Gtk.FileChooserButton # the button widget to examine.
---@return integer # an integer width (in characters) that the button will use to size itself.
function Gtk.FileChooserButton:get_width_chars() end

--- # method Gtk.FileChooserButton:set_focus_on_click()
---
--- Sets whether the button will grab focus when it is clicked with the mouse.
--- Making mouse clicks not grab focus is useful in places like toolbars where
--- you don’t want the keyboard focus removed from the main area of the
--- application.
---
--- ---
---
---@param self Gtk.FileChooserButton # a `GtkFileChooserButton`
---@param focus_on_click (boolean|nil) # whether the button grabs focus when clicked with the mouse
---@return nil
function Gtk.FileChooserButton:set_focus_on_click(focus_on_click) end

--- # method Gtk.FileChooserButton:set_title()
---
--- Modifies the `title` of the browse dialog used by `button`.
---
--- ---
---
---@param self Gtk.FileChooserButton # the button widget to modify.
---@param title string # the new browse dialog title.
---@return nil
function Gtk.FileChooserButton:set_title(title) end

--- # method Gtk.FileChooserButton:set_width_chars()
---
--- Sets the width (in characters) that `button` will use to `n_chars`.
---
--- ---
---
---@param self Gtk.FileChooserButton # the button widget to examine.
---@param n_chars integer # the new width, in characters.
---@return nil
function Gtk.FileChooserButton:set_width_chars(n_chars) end

--- # function Gtk.FileChooserButton.new()
---
--- Creates a new file-selecting button widget.
---
--- ---
---
---@param title string # the title of the browse dialog.
---@param action Gtk.FileChooserAction # the open mode for the widget.
---@return Gtk.Widget # a new button widget.
function Gtk.FileChooserButton.new(title, action) end

--- # function Gtk.FileChooserButton.new_with_dialog()
---
--- Creates a `GtkFileChooserButton` widget which uses `dialog` as its
--- file-picking window.
--- 
--- Note that `dialog` must be a `GtkDialog` (or subclass) which
--- implements the `GtkFileChooser` interface and must not have
--- %GTK_DIALOG_DESTROY_WITH_PARENT set.
--- 
--- Also note that the dialog needs to have its confirmative button
--- added with response %GTK_RESPONSE_ACCEPT or %GTK_RESPONSE_OK in
--- order for the button to take over the file selected in the dialog.
---
--- ---
---
---@param dialog Gtk.Dialog # the widget to use as dialog
---@return Gtk.Widget # a new button widget.
function Gtk.FileChooserButton.new_with_dialog(dialog) end

--- # record Gtk.FileChooserButtonClass
---
---@class Gtk.FileChooserButtonClass
---@field parent_class Gtk.BoxClass # The parent class.
---@field file_set fun(fc: Gtk.FileChooserButton): nil
Gtk.FileChooserButtonClass = {}

--- # record Gtk.FileChooserButtonPrivate
---
---@class Gtk.FileChooserButtonPrivate
Gtk.FileChooserButtonPrivate = {}

---@enum Gtk.FileChooserConfirmation
Gtk.FileChooserConfirmation = {}

--- # class Gtk.FileChooserDialog
---
--- `GtkFileChooserDialog` is a dialog box suitable for use with
--- “File/Open” or “File/Save as” commands.  This widget works by
--- putting a `GtkFileChooserWidget` inside a `GtkDialog`.  It exposes
--- the `GtkFileChooser` interface, so you can use all of the
--- `GtkFileChooser` functions on the file chooser dialog as well as
--- those for `GtkDialog`.
--- 
--- Note that `GtkFileChooserDialog` does not have any methods of its
--- own.  Instead, you should use the functions that work on a
--- `GtkFileChooser`.
--- 
--- If you want to integrate well with the platform you should use the
--- `GtkFileChooserNative` API, which will use a platform-specific
--- dialog if available and fall back to GtkFileChooserDialog
--- otherwise.
--- 
--- ## Typical usage ## {`gtkfilechooser`-typical-usage}
--- 
--- In the simplest of cases, you can the following code to use
--- `GtkFileChooserDialog` to select a file for opening:
--- 
--- ```c
--- GtkWidget *dialog;
--- GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;
--- gint res;
--- 
--- dialog = gtk_file_chooser_dialog_new ("Open File",
---                                       parent_window,
---                                       action,
---                                       _("_Cancel"),
---                                       GTK_RESPONSE_CANCEL,
---                                       _("_Open"),
---                                       GTK_RESPONSE_ACCEPT,
---                                       NULL);
--- 
--- res = gtk_dialog_run (GTK_DIALOG (dialog));
--- if (res == GTK_RESPONSE_ACCEPT)
---   {
---     char *filename;
---     GtkFileChooser *chooser = GTK_FILE_CHOOSER (dialog);
---     filename = gtk_file_chooser_get_filename (chooser);
---     open_file (filename);
---     g_free (filename);
---   }
--- 
--- gtk_widget_destroy (dialog);
--- ```
--- 
--- To use a dialog for saving, you can use this:
--- 
--- ```c
--- GtkWidget *dialog;
--- GtkFileChooser *chooser;
--- GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_SAVE;
--- gint res;
--- 
--- dialog = gtk_file_chooser_dialog_new ("Save File",
---                                       parent_window,
---                                       action,
---                                       _("_Cancel"),
---                                       GTK_RESPONSE_CANCEL,
---                                       _("_Save"),
---                                       GTK_RESPONSE_ACCEPT,
---                                       NULL);
--- chooser = GTK_FILE_CHOOSER (dialog);
--- 
--- gtk_file_chooser_set_do_overwrite_confirmation (chooser, TRUE);
--- 
--- if (user_edited_a_new_document)
---   gtk_file_chooser_set_current_name (chooser,
---                                      _("Untitled document"));
--- else
---   gtk_file_chooser_set_filename (chooser,
---                                  existing_filename);
--- 
--- res = gtk_dialog_run (GTK_DIALOG (dialog));
--- if (res == GTK_RESPONSE_ACCEPT)
---   {
---     char *filename;
--- 
---     filename = gtk_file_chooser_get_filename (chooser);
---     save_to_file (filename);
---     g_free (filename);
---   }
--- 
--- gtk_widget_destroy (dialog);
--- ```
--- 
--- ## Setting up a file chooser dialog ## {`gtkfilechooserdialog`-setting-up}
--- 
--- There are various cases in which you may need to use a `GtkFileChooserDialog`:
--- 
--- - To select a file for opening. Use `GTK_FILE_CHOOSER_ACTION_OPEN`.
--- 
--- - To save a file for the first time. Use `GTK_FILE_CHOOSER_ACTION_SAVE`,
---   and suggest a name such as “Untitled” with `gtk_file_chooser_set_current_name()`.
--- 
--- - To save a file under a different name. Use `GTK_FILE_CHOOSER_ACTION_SAVE`,
---   and set the existing filename with `gtk_file_chooser_set_filename()`.
--- 
--- - To choose a folder instead of a file. Use `GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER`.
--- 
--- Note that old versions of the file chooser’s documentation suggested
--- using `gtk_file_chooser_set_current_folder()` in various
--- situations, with the intention of letting the application
--- suggest a reasonable default folder.  This is no longer
--- considered to be a good policy, as now the file chooser is
--- able to make good suggestions on its own.  In general, you
--- should only cause the file chooser to show a specific folder
--- when it is appropriate to use `gtk_file_chooser_set_filename()`,
--- i.e. when you are doing a Save As command and you already
--- have a file saved somewhere.
--- 
--- ## Response Codes ## {`gtkfilechooserdialog`-responses}
--- 
--- `GtkFileChooserDialog` inherits from `GtkDialog`, so buttons that
--- go in its action area have response codes such as
--- `GTK_RESPONSE_ACCEPT` and `GTK_RESPONSE_CANCEL`.  For example, you
--- could call `gtk_file_chooser_dialog_new()` as follows:
--- 
--- ```c
--- GtkWidget *dialog;
--- GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;
--- 
--- dialog = gtk_file_chooser_dialog_new ("Open File",
---                                       parent_window,
---                                       action,
---                                       _("_Cancel"),
---                                       GTK_RESPONSE_CANCEL,
---                                       _("_Open"),
---                                       GTK_RESPONSE_ACCEPT,
---                                       NULL);
--- ```
--- 
--- This will create buttons for “Cancel” and “Open” that use stock
--- response identifiers from `GtkResponseType`.  For most dialog
--- boxes you can use your own custom response codes rather than the
--- ones in `GtkResponseType`, but `GtkFileChooserDialog` assumes that
--- its “accept”-type action, e.g. an “Open” or “Save” button,
--- will have one of the following response codes:
--- 
--- - `GTK_RESPONSE_ACCEPT`
--- - `GTK_RESPONSE_OK`
--- - `GTK_RESPONSE_YES`
--- - `GTK_RESPONSE_APPLY`
--- 
--- This is because `GtkFileChooserDialog` must intercept responses
--- and switch to folders if appropriate, rather than letting the
--- dialog terminate — the implementation uses these known
--- response codes to know which responses can be blocked if
--- appropriate.
--- 
--- To summarize, make sure you use a
--- [stock response code][gtkfilechooserdialog-responses]
--- when you use `GtkFileChooserDialog` to ensure proper operation.
---
--- ---
---
---@class Gtk.FileChooserDialog : Gtk.Dialog, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.FileChooser
---@field parent_instance Gtk.Dialog
---@field priv Gtk.FileChooserDialogPrivate
Gtk.FileChooserDialog = {}

--- # record Gtk.FileChooserDialogClass
---
---@class Gtk.FileChooserDialogClass
---@field parent_class Gtk.DialogClass
Gtk.FileChooserDialogClass = {}

--- # record Gtk.FileChooserDialogPrivate
---
---@class Gtk.FileChooserDialogPrivate
Gtk.FileChooserDialogPrivate = {}

---@enum Gtk.FileChooserError
Gtk.FileChooserError = {}

--- # class Gtk.FileChooserNative
---
--- `GtkFileChooserNative` is an abstraction of a dialog box suitable
--- for use with “File/Open” or “File/Save as” commands. By default, this
--- just uses a `GtkFileChooserDialog` to implement the actual dialog.
--- However, on certain platforms, such as Windows and macOS, the native platform
--- file chooser is used instead. When the application is running in a
--- sandboxed environment without direct filesystem access (such as Flatpak),
--- `GtkFileChooserNative` may call the proper APIs (portals) to let the user
--- choose a file and make it available to the application.
--- 
--- While the API of `GtkFileChooserNative` closely mirrors `GtkFileChooserDialog`, the main
--- difference is that there is no access to any `GtkWindow` or `GtkWidget` for the dialog.
--- This is required, as there may not be one in the case of a platform native dialog.
--- Showing, hiding and running the dialog is handled by the `GtkNativeDialog` functions.
--- 
--- ## Typical usage ## {`gtkfilechoosernative`-typical-usage}
--- 
--- In the simplest of cases, you can the following code to use
--- `GtkFileChooserDialog` to select a file for opening:
--- 
--- ```c
--- GtkFileChooserNative *native;
--- GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;
--- gint res;
--- 
--- native = gtk_file_chooser_native_new ("Open File",
---                                       parent_window,
---                                       action,
---                                       "_Open",
---                                       "_Cancel");
--- 
--- res = gtk_native_dialog_run (GTK_NATIVE_DIALOG (native));
--- if (res == GTK_RESPONSE_ACCEPT)
---   {
---     char *filename;
---     GtkFileChooser *chooser = GTK_FILE_CHOOSER (native);
---     filename = gtk_file_chooser_get_filename (chooser);
---     open_file (filename);
---     g_free (filename);
---   }
--- 
--- g_object_unref (native);
--- ```
--- 
--- To use a dialog for saving, you can use this:
--- 
--- ```c
--- GtkFileChooserNative *native;
--- GtkFileChooser *chooser;
--- GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_SAVE;
--- gint res;
--- 
--- native = gtk_file_chooser_native_new ("Save File",
---                                       parent_window,
---                                       action,
---                                       "_Save",
---                                       "_Cancel");
--- chooser = GTK_FILE_CHOOSER (native);
--- 
--- gtk_file_chooser_set_do_overwrite_confirmation (chooser, TRUE);
--- 
--- if (user_edited_a_new_document)
---   gtk_file_chooser_set_current_name (chooser,
---                                      _("Untitled document"));
--- else
---   gtk_file_chooser_set_filename (chooser,
---                                  existing_filename);
--- 
--- res = gtk_native_dialog_run (GTK_NATIVE_DIALOG (native));
--- if (res == GTK_RESPONSE_ACCEPT)
---   {
---     char *filename;
--- 
---     filename = gtk_file_chooser_get_filename (chooser);
---     save_to_file (filename);
---     g_free (filename);
---   }
--- 
--- g_object_unref (native);
--- ```
--- 
--- For more information on how to best set up a file dialog, see `GtkFileChooserDialog`.
--- 
--- ## Response Codes ## {`gtkfilechooserdialognative`-responses}
--- 
--- `GtkFileChooserNative` inherits from `GtkNativeDialog`, which means it
--- will return `GTK_RESPONSE_ACCEPT` if the user accepted, and
--- `GTK_RESPONSE_CANCEL` if he pressed cancel. It can also return
--- `GTK_RESPONSE_DELETE_EVENT` if the window was unexpectedly closed.
--- 
--- ## Differences from `GtkFileChooserDialog` ##  {`gtkfilechooserdialognative`-differences}
--- 
--- There are a few things in the GtkFileChooser API that are not
--- possible to use with `GtkFileChooserNative`, as such use would
--- prohibit the use of a native dialog.
--- 
--- There is no support for the signals that are emitted when the user
--- navigates in the dialog, including:
--- * `GtkFileChooser`::current-folder-changed
--- * `GtkFileChooser`::selection-changed
--- * `GtkFileChooser`::file-activated
--- * `GtkFileChooser`::confirm-overwrite
--- 
--- You can also not use the methods that directly control user navigation:
--- * `gtk_file_chooser_unselect_filename()`
--- * `gtk_file_chooser_select_all()`
--- * `gtk_file_chooser_unselect_all()`
--- 
--- If you need any of the above you will have to use `GtkFileChooserDialog` directly.
--- 
--- No operations that change the the dialog work while the dialog is
--- visible. Set all the properties that are required before showing the dialog.
--- 
--- ## Win32 details ## {`gtkfilechooserdialognative`-win32}
--- 
--- On windows the IFileDialog implementation (added in Windows Vista) is
--- used. It supports many of the features that `GtkFileChooserDialog`
--- does, but there are some things it does not handle:
--- 
--- * Extra widgets added with `gtk_file_chooser_set_extra_widget()`.
--- 
--- * Use of custom previews by connecting to `GtkFileChooser`::update-preview.
--- 
--- * Any `GtkFileFilter` added using a mimetype or custom filter.
--- 
--- If any of these features are used the regular `GtkFileChooserDialog`
--- will be used in place of the native one.
--- 
--- ## Portal details ## {`gtkfilechooserdialognative`-portal}
--- 
--- When the org.freedesktop.portal.FileChooser portal is available on the
--- session bus, it is used to bring up an out-of-process file chooser. Depending
--- on the kind of session the application is running in, this may or may not
--- be a GTK+ file chooser. In this situation, the following things are not
--- supported and will be silently ignored:
--- 
--- * Extra widgets added with `gtk_file_chooser_set_extra_widget()`.
--- 
--- * Use of custom previews by connecting to `GtkFileChooser`::update-preview.
--- 
--- * Any `GtkFileFilter` added with a custom filter.
--- 
--- ## macOS details ## {`gtkfilechooserdialognative`-macos}
--- 
--- On macOS the NSSavePanel and NSOpenPanel classes are used to provide native
--- file chooser dialogs. Some features provided by `GtkFileChooserDialog` are
--- not supported:
--- 
--- * Extra widgets added with `gtk_file_chooser_set_extra_widget()`, unless the
---   widget is an instance of GtkLabel, in which case the label text will be used
---   to set the NSSavePanel message instance property.
--- 
--- * Use of custom previews by connecting to `GtkFileChooser`::update-preview.
--- 
--- * Any `GtkFileFilter` added with a custom filter.
--- 
--- * Shortcut folders.
---
--- ---
---
---@class Gtk.FileChooserNative : Gtk.NativeDialog, Gtk.FileChooser
---@operator call: Gtk.FileChooserNative
Gtk.FileChooserNative = {}

--- # method Gtk.FileChooserNative:get_accept_label()
---
--- Retrieves the custom label text for the accept button.
---
--- ---
---
---@param self Gtk.FileChooserNative # a `GtFileChooserNative`
---@return string # The custom label, or `nil` for the default. This string is owned by GTK+ and should not be modified or freed
function Gtk.FileChooserNative:get_accept_label() end

--- # method Gtk.FileChooserNative:get_cancel_label()
---
--- Retrieves the custom label text for the cancel button.
---
--- ---
---
---@param self Gtk.FileChooserNative # a `GtFileChooserNative`
---@return string # The custom label, or `nil` for the default. This string is owned by GTK+ and should not be modified or freed
function Gtk.FileChooserNative:get_cancel_label() end

--- # method Gtk.FileChooserNative:set_accept_label()
---
--- Sets the custom label text for the accept button.
--- 
--- If characters in `label` are preceded by an underscore, they are underlined.
--- If you need a literal underscore character in a label, use “__” (two
--- underscores). The first underlined character represents a keyboard
--- accelerator called a mnemonic.
--- Pressing Alt and that key activates the button.
---
--- ---
---
---@param self Gtk.FileChooserNative # a `GtFileChooserNative`
---@param accept_label? string # custom label or `nil` for the default
---@return nil
function Gtk.FileChooserNative:set_accept_label(accept_label) end

--- # method Gtk.FileChooserNative:set_cancel_label()
---
--- Sets the custom label text for the cancel button.
--- 
--- If characters in `label` are preceded by an underscore, they are underlined.
--- If you need a literal underscore character in a label, use “__” (two
--- underscores). The first underlined character represents a keyboard
--- accelerator called a mnemonic.
--- Pressing Alt and that key activates the button.
---
--- ---
---
---@param self Gtk.FileChooserNative # a `GtFileChooserNative`
---@param cancel_label? string # custom label or `nil` for the default
---@return nil
function Gtk.FileChooserNative:set_cancel_label(cancel_label) end

--- # function Gtk.FileChooserNative.new()
---
--- Creates a new `GtkFileChooserNative`.
---
--- ---
---
---@param title? string # Title of the native, or `nil`
---@param parent? Gtk.Window # Transient parent of the native, or `nil`
---@param action Gtk.FileChooserAction # Open or save mode for the dialog
---@param accept_label? string # text to go in the accept button, or `nil` for the default
---@param cancel_label? string # text to go in the cancel button, or `nil` for the default
---@return Gtk.FileChooserNative # a new `GtkFileChooserNative`
function Gtk.FileChooserNative.new(title, parent, action, accept_label, cancel_label) end

--- # record Gtk.FileChooserNativeClass
---
---@class Gtk.FileChooserNativeClass
---@field parent_class Gtk.NativeDialogClass
Gtk.FileChooserNativeClass = {}

--- # class Gtk.FileChooserWidget
---
--- `GtkFileChooserWidget` is a widget for choosing files.
--- It exposes the `GtkFileChooser` interface, and you should
--- use the methods of this interface to interact with the
--- widget.
--- 
--- # CSS nodes
--- 
--- GtkFileChooserWidget has a single CSS node with name filechooser.
---
--- ---
---
---@class Gtk.FileChooserWidget : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.FileChooser, Gtk.Orientable
---@field parent_instance Gtk.Box
---@field priv Gtk.FileChooserWidgetPrivate
---@operator call: Gtk.FileChooserWidget
Gtk.FileChooserWidget = {}

--- # function Gtk.FileChooserWidget.new()
---
--- Creates a new `GtkFileChooserWidget`. This is a file chooser widget that can
--- be embedded in custom windows, and it is the same widget that is used by
--- `GtkFileChooserDialog`.
---
--- ---
---
---@param action Gtk.FileChooserAction # Open or save mode for the widget
---@return Gtk.Widget # a new `GtkFileChooserWidget`
function Gtk.FileChooserWidget.new(action) end

--- # class Gtk.FileChooserWidgetAccessible
---
---@class Gtk.FileChooserWidgetAccessible : Gtk.ContainerAccessible, Gtk.Atk.Action, Gtk.Atk.Component
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.FileChooserWidgetAccessiblePrivate
Gtk.FileChooserWidgetAccessible = {}

--- # record Gtk.FileChooserWidgetAccessibleClass
---
---@class Gtk.FileChooserWidgetAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.FileChooserWidgetAccessibleClass = {}

--- # record Gtk.FileChooserWidgetAccessiblePrivate
---
---@class Gtk.FileChooserWidgetAccessiblePrivate
Gtk.FileChooserWidgetAccessiblePrivate = {}

--- # record Gtk.FileChooserWidgetClass
---
---@class Gtk.FileChooserWidgetClass
---@field parent_class Gtk.BoxClass # The parent class.
Gtk.FileChooserWidgetClass = {}

--- # record Gtk.FileChooserWidgetPrivate
---
---@class Gtk.FileChooserWidgetPrivate
Gtk.FileChooserWidgetPrivate = {}

--- # class Gtk.FileFilter
---
--- A GtkFileFilter can be used to restrict the files being shown in a
--- `GtkFileChooser`. Files can be filtered based on their name (with
--- `gtk_file_filter_add_pattern()`), on their mime type (with
--- `gtk_file_filter_add_mime_type()`), or by a custom filter function
--- (with `gtk_file_filter_add_custom()`).
--- 
--- Filtering by mime types handles aliasing and subclassing of mime
--- types; e.g. a filter for text/plain also matches a file with mime
--- type application/rtf, since application/rtf is a subclass of
--- text/plain. Note that `GtkFileFilter` allows wildcards for the
--- subtype of a mime type, so you can e.g. filter for image/\*.
--- 
--- Normally, filters are used by adding them to a `GtkFileChooser`,
--- see `gtk_file_chooser_add_filter()`, but it is also possible
--- to manually use a filter on a file with `gtk_file_filter_filter()`.
--- 
--- # GtkFileFilter as GtkBuildable
--- 
--- The GtkFileFilter implementation of the GtkBuildable interface
--- supports adding rules using the `<mime-types>`, `<patterns>` and
--- `<applications>` elements and listing the rules within. Specifying
--- a `<mime-type>` or `<pattern>` has the same effect as as calling
--- `gtk_file_filter_add_mime_type()` or `gtk_file_filter_add_pattern()`.
--- 
--- An example of a UI definition fragment specifying GtkFileFilter
--- rules:
--- 
--- ```xml
--- <object class="GtkFileFilter">
---   <mime-types>
---     <mime-type>text/plain</mime-type>
---     <mime-type>image/ *</mime-type>
---   </mime-types>
---   <patterns>
---     <pattern>*.txt</pattern>
---     <pattern>*.png</pattern>
---   </patterns>
--- </object>
--- ```
---
--- ---
---
---@class Gtk.FileFilter : GObject.InitiallyUnowned, Gtk.Buildable
---@operator call: Gtk.FileFilter
Gtk.FileFilter = {}

--- # method Gtk.FileFilter:add_custom()
---
--- Adds rule to a filter that allows files based on a custom callback
--- function. The bitfield `needed` which is passed in provides information
--- about what sorts of information that the filter function needs;
--- this allows GTK+ to avoid retrieving expensive information when
--- it isn’t needed by the filter.
---
--- ---
---
---@param self Gtk.FileFilter # a `GtkFileFilter`
---@param needed Gtk.FileFilterFlags # bitfield of flags indicating the information that the custom filter function needs.
---@param func Gtk.FileFilterFunc # callback function; if the function returns `true`, then the file will be displayed.
---@param data? userdata # data to pass to `func`
---@param notify GLib.DestroyNotify # function to call to free `data` when it is no longer needed.
---@return nil
function Gtk.FileFilter:add_custom(needed, func, data, notify) end

--- # method Gtk.FileFilter:add_mime_type()
---
--- Adds a rule allowing a given mime type to `filter`.
---
--- ---
---
---@param self Gtk.FileFilter # A `GtkFileFilter`
---@param mime_type string # name of a MIME type
---@return nil
function Gtk.FileFilter:add_mime_type(mime_type) end

--- # method Gtk.FileFilter:add_pattern()
---
--- Adds a rule allowing a shell style glob to a filter.
---
--- ---
---
---@param self Gtk.FileFilter # a `GtkFileFilter`
---@param pattern string # a shell style glob
---@return nil
function Gtk.FileFilter:add_pattern(pattern) end

--- # method Gtk.FileFilter:add_pixbuf_formats()
---
--- Adds a rule allowing image files in the formats supported
--- by GdkPixbuf.
---
--- ---
---
---@param self Gtk.FileFilter # a `GtkFileFilter`
---@return nil
function Gtk.FileFilter:add_pixbuf_formats() end

--- # method Gtk.FileFilter:filter()
---
--- Tests whether a file should be displayed according to `filter`.
--- The `GtkFileFilterInfo` `filter_info` should include
--- the fields returned from `gtk_file_filter_get_needed()`.
--- 
--- This function will not typically be used by applications; it
--- is intended principally for use in the implementation of
--- `GtkFileChooser`.
---
--- ---
---
---@param self Gtk.FileFilter # a `GtkFileFilter`
---@param filter_info Gtk.FileFilterInfo # a `GtkFileFilterInfo` containing information about a file.
---@return (boolean|nil) # `true` if the file should be displayed
function Gtk.FileFilter:filter(filter_info) end

--- # method Gtk.FileFilter:get_name()
---
--- Gets the human-readable name for the filter. See `gtk_file_filter_set_name()`.
---
--- ---
---
---@param self Gtk.FileFilter # a `GtkFileFilter`
---@return string # The human-readable name of the filter, or `nil`. This value is owned by GTK+ and must not be modified or freed.
function Gtk.FileFilter:get_name() end

--- # method Gtk.FileFilter:get_needed()
---
--- Gets the fields that need to be filled in for the `GtkFileFilterInfo`
--- passed to `gtk_file_filter_filter()`
--- 
--- This function will not typically be used by applications; it
--- is intended principally for use in the implementation of
--- `GtkFileChooser`.
---
--- ---
---
---@param self Gtk.FileFilter # a `GtkFileFilter`
---@return Gtk.FileFilterFlags # bitfield of flags indicating needed fields when calling `gtk_file_filter_filter()`
function Gtk.FileFilter:get_needed() end

--- # method Gtk.FileFilter:set_name()
---
--- Sets the human-readable name of the filter; this is the string
--- that will be displayed in the file selector user interface if
--- there is a selectable list of filters.
---
--- ---
---
---@param self Gtk.FileFilter # a `GtkFileFilter`
---@param name? string # the human-readable-name for the filter, or `nil` to remove any existing name.
---@return nil
function Gtk.FileFilter:set_name(name) end

--- # method Gtk.FileFilter:to_gvariant()
---
--- Serialize a file filter to an a{sv} variant.
---
--- ---
---
---@param self Gtk.FileFilter # a `GtkFileFilter`
---@return GLib.Variant # a new, floating, `GVariant`
function Gtk.FileFilter:to_gvariant() end

--- # function Gtk.FileFilter.new()
---
--- Creates a new `GtkFileFilter` with no rules added to it.
--- Such a filter doesn’t accept any files, so is not
--- particularly useful until you add rules with
--- `gtk_file_filter_add_mime_type()`, `gtk_file_filter_add_pattern()`,
--- or `gtk_file_filter_add_custom()`. To create a filter
--- that accepts any file, use:
--- ```c
--- GtkFileFilter *filter = gtk_file_filter_new ();
--- gtk_file_filter_add_pattern (filter, "*");
--- ```
---
--- ---
---
---@return Gtk.FileFilter # a new `GtkFileFilter`
function Gtk.FileFilter.new() end

--- # function Gtk.FileFilter.new_from_gvariant()
---
--- Deserialize a file filter from an a{sv} variant in
--- the format produced by `gtk_file_filter_to_gvariant()`.
---
--- ---
---
---@param variant GLib.Variant # an a{sv} `GVariant`
---@return Gtk.FileFilter # a new `GtkFileFilter` object
function Gtk.FileFilter.new_from_gvariant(variant) end

---@enum Gtk.FileFilterFlags
Gtk.FileFilterFlags = {}

---@alias Gtk.FileFilterFunc fun(filter_info: Gtk.FileFilterInfo, data: userdata): (boolean|nil)

--- # record Gtk.FileFilterInfo
---
--- A `GtkFileFilterInfo`-struct is used to pass information about the
--- tested file to `gtk_file_filter_filter()`.
---
--- ---
---
---@class Gtk.FileFilterInfo
---@field contains Gtk.FileFilterFlags # Flags indicating which of the following fields need are filled
---@field filename string # the filename of the file being tested
---@field uri string # the URI for the file being tested
---@field display_name string # the string that will be used to display the file in the file chooser
---@field mime_type string # the mime type of the file
Gtk.FileFilterInfo = {}

--- # class Gtk.Fixed
---
--- The `GtkFixed` widget is a container which can place child widgets
--- at fixed positions and with fixed sizes, given in pixels. `GtkFixed`
--- performs no automatic layout management.
--- 
--- For most applications, you should not use this container! It keeps
--- you from having to learn about the other GTK+ containers, but it
--- results in broken applications.  With `GtkFixed`, the following
--- things will result in truncated text, overlapping widgets, and
--- other display bugs:
--- 
--- - Themes, which may change widget sizes.
--- 
--- - Fonts other than the one you used to write the app will of course
---   change the size of widgets containing text; keep in mind that
---   users may use a larger font because of difficulty reading the
---   default, or they may be using a different OS that provides different fonts.
--- 
--- - Translation of text into other languages changes its size. Also,
---   display of non-English text will use a different font in many
---   cases.
--- 
--- In addition, `GtkFixed` does not pay attention to text direction and thus may
--- produce unwanted results if your app is run under right-to-left languages
--- such as Hebrew or Arabic. That is: normally GTK+ will order containers
--- appropriately for the text direction, e.g. to put labels to the right of the
--- thing they label when using an RTL language, but it can’t do that with
--- `GtkFixed`. So if you need to reorder widgets depending on the text direction,
--- you would need to manually detect it and adjust child positions accordingly.
--- 
--- Finally, fixed positioning makes it kind of annoying to add/remove
--- GUI elements, since you have to reposition all the other
--- elements. This is a long-term maintenance problem for your
--- application.
--- 
--- If you know none of these things are an issue for your application,
--- and prefer the simplicity of `GtkFixed`, by all means use the
--- widget. But you should be aware of the tradeoffs.
--- 
--- See also `GtkLayout`, which shares the ability to perform fixed positioning
--- of child widgets and additionally adds custom drawing and scrollability.
---
--- ---
---
---@class Gtk.Fixed : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field container Gtk.Container
---@field priv Gtk.FixedPrivate
---@operator call: Gtk.Fixed
Gtk.Fixed = {}

--- # method Gtk.Fixed:move()
---
--- Moves a child of a `GtkFixed` container to the given position.
---
--- ---
---
---@param self Gtk.Fixed # a `GtkFixed`.
---@param widget Gtk.Widget # the child widget.
---@param x integer # the horizontal position to move the widget to.
---@param y integer # the vertical position to move the widget to.
---@return nil
function Gtk.Fixed:move(widget, x, y) end

--- # method Gtk.Fixed:put()
---
--- Adds a widget to a `GtkFixed` container at the given position.
---
--- ---
---
---@param self Gtk.Fixed # a `GtkFixed`.
---@param widget Gtk.Widget # the widget to add.
---@param x integer # the horizontal position to place the widget at.
---@param y integer # the vertical position to place the widget at.
---@return nil
function Gtk.Fixed:put(widget, x, y) end

--- # function Gtk.Fixed.new()
---
--- Creates a new `GtkFixed`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkFixed`.
function Gtk.Fixed.new() end

--- # record Gtk.FixedChild
---
---@class Gtk.FixedChild
---@field widget Gtk.Widget
---@field x integer
---@field y integer
Gtk.FixedChild = {}

--- # record Gtk.FixedClass
---
---@class Gtk.FixedClass
---@field parent_class Gtk.ContainerClass
Gtk.FixedClass = {}

--- # record Gtk.FixedPrivate
---
---@class Gtk.FixedPrivate
Gtk.FixedPrivate = {}

--- # class Gtk.FlowBox
---
--- A GtkFlowBox positions child widgets in sequence according to its
--- orientation.
--- 
--- For instance, with the horizontal orientation, the widgets will be
--- arranged from left to right, starting a new row under the previous
--- row when necessary. Reducing the width in this case will require more
--- rows, so a larger height will be requested.
--- 
--- Likewise, with the vertical orientation, the widgets will be arranged
--- from top to bottom, starting a new column to the right when necessary.
--- Reducing the height will require more columns, so a larger width will
--- be requested.
--- 
--- The size request of a GtkFlowBox alone may not be what you expect; if you
--- need to be able to shrink it along both axes and dynamically reflow its
--- children, you may have to wrap it in a `GtkScrolledWindow` to enable that.
--- 
--- The children of a GtkFlowBox can be dynamically sorted and filtered.
--- 
--- Although a GtkFlowBox must have only `GtkFlowBoxChild` children,
--- you can add any kind of widget to it via `gtk_container_add()`, and
--- a GtkFlowBoxChild widget will automatically be inserted between
--- the box and the widget.
--- 
--- Also see `GtkListBox`.
--- 
--- GtkFlowBox was added in GTK+ 3.12.
--- 
--- # CSS nodes
--- 
--- ```plain
--- flowbox
--- ├── flowboxchild
--- │   ╰── <child>
--- ├── flowboxchild
--- │   ╰── <child>
--- ┊
--- ╰── [rubberband]
--- ```
--- 
--- GtkFlowBox uses a single CSS node with name flowbox. GtkFlowBoxChild
--- uses a single CSS node with name flowboxchild.
--- For rubberband selection, a subnode with name rubberband is used.
---
--- ---
---
---@class Gtk.FlowBox : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field container Gtk.Container
---@operator call: Gtk.FlowBox
Gtk.FlowBox = {}

--- # method Gtk.FlowBox:bind_model()
---
--- Binds `model` to `box`.
--- 
--- If `box` was already bound to a model, that previous binding is
--- destroyed.
--- 
--- The contents of `box` are cleared and then filled with widgets that
--- represent items from `model`. `box` is updated whenever `model` changes.
--- If `model` is `nil`, `box` is left empty.
--- 
--- It is undefined to add or remove widgets directly (for example, with
--- `gtk_flow_box_insert()` or `gtk_container_add()`) while `box` is bound to a
--- model.
--- 
--- Note that using a model is incompatible with the filtering and sorting
--- functionality in GtkFlowBox. When using a model, filtering and sorting
--- should be implemented by the model.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param model? Gio.ListModel # the `GListModel` to be bound to `box`
---@param create_widget_func Gtk.FlowBoxCreateWidgetFunc # a function that creates widgets for items
---@param user_data? userdata # user data passed to `create_widget_func`
---@param user_data_free_func GLib.DestroyNotify # function for freeing `user_data`
---@return nil
function Gtk.FlowBox:bind_model(model, create_widget_func, user_data, user_data_free_func) end

--- # method Gtk.FlowBox:get_activate_on_single_click()
---
--- Returns whether children activate on single clicks.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@return (boolean|nil) # `true` if children are activated on single click, `false` otherwise
function Gtk.FlowBox:get_activate_on_single_click() end

--- # method Gtk.FlowBox:get_child_at_index()
---
--- Gets the nth child in the `box`.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param idx integer # the position of the child
---@return Gtk.FlowBoxChild # the child widget, which will always be a `GtkFlowBoxChild` or `nil` in case no child widget with the given index exists.
function Gtk.FlowBox:get_child_at_index(idx) end

--- # method Gtk.FlowBox:get_child_at_pos()
---
--- Gets the child in the (`x`, `y`) position.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param x integer # the x coordinate of the child
---@param y integer # the y coordinate of the child
---@return Gtk.FlowBoxChild # the child widget, which will always be a `GtkFlowBoxChild` or `nil` in case no child widget exists for the given x and y coordinates.
function Gtk.FlowBox:get_child_at_pos(x, y) end

--- # method Gtk.FlowBox:get_column_spacing()
---
--- Gets the horizontal spacing.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@return integer # the horizontal spacing
function Gtk.FlowBox:get_column_spacing() end

--- # method Gtk.FlowBox:get_homogeneous()
---
--- Returns whether the box is homogeneous (all children are the
--- same size). See `gtk_box_set_homogeneous()`.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@return (boolean|nil) # `true` if the box is homogeneous.
function Gtk.FlowBox:get_homogeneous() end

--- # method Gtk.FlowBox:get_max_children_per_line()
---
--- Gets the maximum number of children per line.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@return integer # the maximum number of children per line
function Gtk.FlowBox:get_max_children_per_line() end

--- # method Gtk.FlowBox:get_min_children_per_line()
---
--- Gets the minimum number of children per line.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@return integer # the minimum number of children per line
function Gtk.FlowBox:get_min_children_per_line() end

--- # method Gtk.FlowBox:get_row_spacing()
---
--- Gets the vertical spacing.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@return integer # the vertical spacing
function Gtk.FlowBox:get_row_spacing() end

--- # method Gtk.FlowBox:get_selected_children()
---
--- Creates a list of all selected children.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@return Gtk.FlowBoxChild[] # A `GList` containing the `GtkWidget` for each selected child. Free with `g_list_free()` when done.
function Gtk.FlowBox:get_selected_children() end

--- # method Gtk.FlowBox:get_selection_mode()
---
--- Gets the selection mode of `box`.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@return Gtk.SelectionMode # the `GtkSelectionMode`
function Gtk.FlowBox:get_selection_mode() end

--- # method Gtk.FlowBox:insert()
---
--- Inserts the `widget` into `box` at `position`.
--- 
--- If a sort function is set, the widget will actually be inserted
--- at the calculated position and this function has the same effect
--- as `gtk_container_add()`.
--- 
--- If `position` is -1, or larger than the total number of children
--- in the `box`, then the `widget` will be appended to the end.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param widget Gtk.Widget # the `GtkWidget` to add
---@param position integer # the position to insert `child` in
---@return nil
function Gtk.FlowBox:insert(widget, position) end

--- # method Gtk.FlowBox:invalidate_filter()
---
--- Updates the filtering for all children.
--- 
--- Call this function when the result of the filter
--- function on the `box` is changed due ot an external
--- factor. For instance, this would be used if the
--- filter function just looked for a specific search
--- term, and the entry with the string has changed.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@return nil
function Gtk.FlowBox:invalidate_filter() end

--- # method Gtk.FlowBox:invalidate_sort()
---
--- Updates the sorting for all children.
--- 
--- Call this when the result of the sort function on
--- `box` is changed due to an external factor.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@return nil
function Gtk.FlowBox:invalidate_sort() end

--- # method Gtk.FlowBox:select_all()
---
--- Select all children of `box`, if the selection
--- mode allows it.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@return nil
function Gtk.FlowBox:select_all() end

--- # method Gtk.FlowBox:select_child()
---
--- Selects a single child of `box`, if the selection
--- mode allows it.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param child Gtk.FlowBoxChild # a child of `box`
---@return nil
function Gtk.FlowBox:select_child(child) end

--- # method Gtk.FlowBox:selected_foreach()
---
--- Calls a function for each selected child.
--- 
--- Note that the selection cannot be modified from within
--- this function.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param func Gtk.FlowBoxForeachFunc # the function to call for each selected child
---@param data? userdata # user data to pass to the function
---@return nil
function Gtk.FlowBox:selected_foreach(func, data) end

--- # method Gtk.FlowBox:set_activate_on_single_click()
---
--- If `single` is `true`, children will be activated when you click
--- on them, otherwise you need to double-click.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param single (boolean|nil) # `true` to emit child-activated on a single click
---@return nil
function Gtk.FlowBox:set_activate_on_single_click(single) end

--- # method Gtk.FlowBox:set_column_spacing()
---
--- Sets the horizontal space to add between children.
--- See the `GtkFlowBox`:column-spacing property.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param spacing integer # the spacing to use
---@return nil
function Gtk.FlowBox:set_column_spacing(spacing) end

--- # method Gtk.FlowBox:set_filter_func()
---
--- By setting a filter function on the `box` one can decide dynamically
--- which of the children to show. For instance, to implement a search
--- function that only shows the children matching the search terms.
--- 
--- The `filter_func` will be called for each child after the call, and
--- it will continue to be called each time a child changes (via
--- `gtk_flow_box_child_changed()`) or when `gtk_flow_box_invalidate_filter()`
--- is called.
--- 
--- Note that using a filter function is incompatible with using a model
--- (see `gtk_flow_box_bind_model()`).
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param filter_func? Gtk.FlowBoxFilterFunc # callback that lets you filter which children to show
---@param user_data? userdata # user data passed to `filter_func`
---@param destroy GLib.DestroyNotify # destroy notifier for `user_data`
---@return nil
function Gtk.FlowBox:set_filter_func(filter_func, user_data, destroy) end

--- # method Gtk.FlowBox:set_hadjustment()
---
--- Hooks up an adjustment to focus handling in `box`.
--- The adjustment is also used for autoscrolling during
--- rubberband selection. See `gtk_scrolled_window_get_hadjustment()`
--- for a typical way of obtaining the adjustment, and
--- `gtk_flow_box_set_vadjustment()`for setting the vertical
--- adjustment.
--- 
--- The adjustments have to be in pixel units and in the same
--- coordinate system as the allocation for immediate children
--- of the box.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param adjustment Gtk.Adjustment # an adjustment which should be adjusted when the focus is moved among the descendents of `container`
---@return nil
function Gtk.FlowBox:set_hadjustment(adjustment) end

--- # method Gtk.FlowBox:set_homogeneous()
---
--- Sets the `GtkFlowBox`:homogeneous property of `box`, controlling
--- whether or not all children of `box` are given equal space
--- in the box.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param homogeneous (boolean|nil) # `true` to create equal allotments, `false` for variable allotments
---@return nil
function Gtk.FlowBox:set_homogeneous(homogeneous) end

--- # method Gtk.FlowBox:set_max_children_per_line()
---
--- Sets the maximum number of children to request and
--- allocate space for in `box`’s orientation.
--- 
--- Setting the maximum number of children per line
--- limits the overall natural size request to be no more
--- than `n_children` children long in the given orientation.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param n_children integer # the maximum number of children per line
---@return nil
function Gtk.FlowBox:set_max_children_per_line(n_children) end

--- # method Gtk.FlowBox:set_min_children_per_line()
---
--- Sets the minimum number of children to line up
--- in `box`’s orientation before flowing.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param n_children integer # the minimum number of children per line
---@return nil
function Gtk.FlowBox:set_min_children_per_line(n_children) end

--- # method Gtk.FlowBox:set_row_spacing()
---
--- Sets the vertical space to add between children.
--- See the `GtkFlowBox`:row-spacing property.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param spacing integer # the spacing to use
---@return nil
function Gtk.FlowBox:set_row_spacing(spacing) end

--- # method Gtk.FlowBox:set_selection_mode()
---
--- Sets how selection works in `box`.
--- See `GtkSelectionMode` for details.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param mode Gtk.SelectionMode # the new selection mode
---@return nil
function Gtk.FlowBox:set_selection_mode(mode) end

--- # method Gtk.FlowBox:set_sort_func()
---
--- By setting a sort function on the `box`, one can dynamically
--- reorder the children of the box, based on the contents of
--- the children.
--- 
--- The `sort_func` will be called for each child after the call,
--- and will continue to be called each time a child changes (via
--- `gtk_flow_box_child_changed()`) and when `gtk_flow_box_invalidate_sort()`
--- is called.
--- 
--- Note that using a sort function is incompatible with using a model
--- (see `gtk_flow_box_bind_model()`).
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param sort_func? Gtk.FlowBoxSortFunc # the sort function
---@param user_data? userdata # user data passed to `sort_func`
---@param destroy GLib.DestroyNotify # destroy notifier for `user_data`
---@return nil
function Gtk.FlowBox:set_sort_func(sort_func, user_data, destroy) end

--- # method Gtk.FlowBox:set_vadjustment()
---
--- Hooks up an adjustment to focus handling in `box`.
--- The adjustment is also used for autoscrolling during
--- rubberband selection. See `gtk_scrolled_window_get_vadjustment()`
--- for a typical way of obtaining the adjustment, and
--- `gtk_flow_box_set_hadjustment()`for setting the horizontal
--- adjustment.
--- 
--- The adjustments have to be in pixel units and in the same
--- coordinate system as the allocation for immediate children
--- of the box.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param adjustment Gtk.Adjustment # an adjustment which should be adjusted when the focus is moved among the descendents of `container`
---@return nil
function Gtk.FlowBox:set_vadjustment(adjustment) end

--- # method Gtk.FlowBox:unselect_all()
---
--- Unselect all children of `box`, if the selection
--- mode allows it.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@return nil
function Gtk.FlowBox:unselect_all() end

--- # method Gtk.FlowBox:unselect_child()
---
--- Unselects a single child of `box`, if the selection
--- mode allows it.
---
--- ---
---
---@param self Gtk.FlowBox # a `GtkFlowBox`
---@param child Gtk.FlowBoxChild # a child of `box`
---@return nil
function Gtk.FlowBox:unselect_child(child) end

--- # function Gtk.FlowBox.new()
---
--- Creates a GtkFlowBox.
---
--- ---
---
---@return Gtk.Widget # a new `GtkFlowBox` container
function Gtk.FlowBox.new() end

--- # class Gtk.FlowBoxAccessible
---
---@class Gtk.FlowBoxAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component, Gtk.Atk.Selection
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.FlowBoxAccessiblePrivate
Gtk.FlowBoxAccessible = {}

--- # record Gtk.FlowBoxAccessibleClass
---
---@class Gtk.FlowBoxAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.FlowBoxAccessibleClass = {}

--- # record Gtk.FlowBoxAccessiblePrivate
---
---@class Gtk.FlowBoxAccessiblePrivate
Gtk.FlowBoxAccessiblePrivate = {}

--- # class Gtk.FlowBoxChild
---
---@class Gtk.FlowBoxChild : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent_instance Gtk.Bin
---@operator call: Gtk.FlowBoxChild
Gtk.FlowBoxChild = {}

--- # method Gtk.FlowBoxChild:changed()
---
--- Marks `child` as changed, causing any state that depends on this
--- to be updated. This affects sorting and filtering.
--- 
--- Note that calls to this method must be in sync with the data
--- used for the sorting and filtering functions. For instance, if
--- the list is mirroring some external data set, and *two* children
--- changed in the external data set when you call
--- `gtk_flow_box_child_changed()` on the first child, the sort function
--- must only read the new data for the first of the two changed
--- children, otherwise the resorting of the children will be wrong.
--- 
--- This generally means that if you don’t fully control the data
--- model, you have to duplicate the data that affects the sorting
--- and filtering functions into the widgets themselves. Another
--- alternative is to call `gtk_flow_box_invalidate_sort()` on any
--- model change, but that is more expensive.
---
--- ---
---
---@param self Gtk.FlowBoxChild # a `GtkFlowBoxChild`
---@return nil
function Gtk.FlowBoxChild:changed() end

--- # method Gtk.FlowBoxChild:get_index()
---
--- Gets the current index of the `child` in its `GtkFlowBox` container.
---
--- ---
---
---@param self Gtk.FlowBoxChild # a `GtkFlowBoxChild`
---@return integer # the index of the `child`, or -1 if the `child` is not in a flow box.
function Gtk.FlowBoxChild:get_index() end

--- # method Gtk.FlowBoxChild:is_selected()
---
--- Returns whether the `child` is currently selected in its
--- `GtkFlowBox` container.
---
--- ---
---
---@param self Gtk.FlowBoxChild # a `GtkFlowBoxChild`
---@return (boolean|nil) # `true` if `child` is selected
function Gtk.FlowBoxChild:is_selected() end

--- # function Gtk.FlowBoxChild.new()
---
--- Creates a new `GtkFlowBoxChild`, to be used as a child
--- of a `GtkFlowBox`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkFlowBoxChild`
function Gtk.FlowBoxChild.new() end

--- # class Gtk.FlowBoxChildAccessible
---
---@class Gtk.FlowBoxChildAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component
---@field parent Gtk.ContainerAccessible
Gtk.FlowBoxChildAccessible = {}

--- # record Gtk.FlowBoxChildAccessibleClass
---
---@class Gtk.FlowBoxChildAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.FlowBoxChildAccessibleClass = {}

--- # record Gtk.FlowBoxChildClass
---
---@class Gtk.FlowBoxChildClass
---@field parent_class Gtk.BinClass
---@field activate fun(child: Gtk.FlowBoxChild): nil
Gtk.FlowBoxChildClass = {}

--- # record Gtk.FlowBoxClass
---
---@class Gtk.FlowBoxClass
---@field parent_class Gtk.ContainerClass
---@field child_activated fun(box: Gtk.FlowBox, child: Gtk.FlowBoxChild): nil
---@field selected_children_changed fun(box: Gtk.FlowBox): nil
---@field activate_cursor_child fun(box: Gtk.FlowBox): nil
---@field toggle_cursor_child fun(box: Gtk.FlowBox): nil
---@field move_cursor fun(box: Gtk.FlowBox, step: Gtk.MovementStep, count: integer): (boolean|nil)
---@field select_all fun(box: Gtk.FlowBox): nil
---@field unselect_all fun(box: Gtk.FlowBox): nil
Gtk.FlowBoxClass = {}

---@alias Gtk.FlowBoxCreateWidgetFunc fun(item: GObject.Object, user_data: userdata): Gtk.Widget

---@alias Gtk.FlowBoxFilterFunc fun(child: Gtk.FlowBoxChild, user_data: userdata): (boolean|nil)

---@alias Gtk.FlowBoxForeachFunc fun(box: Gtk.FlowBox, child: Gtk.FlowBoxChild, user_data: userdata): nil

---@alias Gtk.FlowBoxSortFunc fun(child1: Gtk.FlowBoxChild, child2: Gtk.FlowBoxChild, user_data: userdata): integer

--- # class Gtk.FontButton
---
--- The `GtkFontButton` is a button which displays the currently selected
--- font an allows to open a font chooser dialog to change the font.
--- It is suitable widget for selecting a font in a preference dialog.
--- 
--- # CSS nodes
--- 
--- GtkFontButton has a single CSS node with name button and style class .font.
---
--- ---
---
---@class Gtk.FontButton : Gtk.Button, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable, Gtk.FontChooser
---@field button Gtk.Button
---@field priv Gtk.FontButtonPrivate
---@operator call: Gtk.FontButton
Gtk.FontButton = {}

--- # method Gtk.FontButton:get_font_name()
---
--- Retrieves the name of the currently selected font. This name includes
--- style and size information as well. If you want to render something
--- with the font, use this string with `pango_font_description_from_string()` .
--- If you’re interested in peeking certain values (family name,
--- style, size, weight) just query these properties from the
--- `PangoFontDescription` object.
---
--- ---
---
---@param self Gtk.FontButton # a `GtkFontButton`
---@return string # an internal copy of the font name which must not be freed.
function Gtk.FontButton:get_font_name() end

--- # method Gtk.FontButton:get_show_size()
---
--- Returns whether the font size will be shown in the label.
---
--- ---
---
---@param self Gtk.FontButton # a `GtkFontButton`
---@return (boolean|nil) # whether the font size will be shown in the label.
function Gtk.FontButton:get_show_size() end

--- # method Gtk.FontButton:get_show_style()
---
--- Returns whether the name of the font style will be shown in the label.
---
--- ---
---
---@param self Gtk.FontButton # a `GtkFontButton`
---@return (boolean|nil) # whether the font style will be shown in the label.
function Gtk.FontButton:get_show_style() end

--- # method Gtk.FontButton:get_title()
---
--- Retrieves the title of the font chooser dialog.
---
--- ---
---
---@param self Gtk.FontButton # a `GtkFontButton`
---@return string # an internal copy of the title string which must not be freed.
function Gtk.FontButton:get_title() end

--- # method Gtk.FontButton:get_use_font()
---
--- Returns whether the selected font is used in the label.
---
--- ---
---
---@param self Gtk.FontButton # a `GtkFontButton`
---@return (boolean|nil) # whether the selected font is used in the label.
function Gtk.FontButton:get_use_font() end

--- # method Gtk.FontButton:get_use_size()
---
--- Returns whether the selected size is used in the label.
---
--- ---
---
---@param self Gtk.FontButton # a `GtkFontButton`
---@return (boolean|nil) # whether the selected size is used in the label.
function Gtk.FontButton:get_use_size() end

--- # method Gtk.FontButton:set_font_name()
---
--- Sets or updates the currently-displayed font in font picker dialog.
---
--- ---
---
---@param self Gtk.FontButton # a `GtkFontButton`
---@param fontname string # Name of font to display in font chooser dialog
---@return (boolean|nil) # `true`
function Gtk.FontButton:set_font_name(fontname) end

--- # method Gtk.FontButton:set_show_size()
---
--- If `show_size` is `true`, the font size will be displayed along with the name of the selected font.
---
--- ---
---
---@param self Gtk.FontButton # a `GtkFontButton`
---@param show_size (boolean|nil) # `true` if font size should be displayed in dialog.
---@return nil
function Gtk.FontButton:set_show_size(show_size) end

--- # method Gtk.FontButton:set_show_style()
---
--- If `show_style` is `true`, the font style will be displayed along with name of the selected font.
---
--- ---
---
---@param self Gtk.FontButton # a `GtkFontButton`
---@param show_style (boolean|nil) # `true` if font style should be displayed in label.
---@return nil
function Gtk.FontButton:set_show_style(show_style) end

--- # method Gtk.FontButton:set_title()
---
--- Sets the title for the font chooser dialog.
---
--- ---
---
---@param self Gtk.FontButton # a `GtkFontButton`
---@param title string # a string containing the font chooser dialog title
---@return nil
function Gtk.FontButton:set_title(title) end

--- # method Gtk.FontButton:set_use_font()
---
--- If `use_font` is `true`, the font name will be written using the selected font.
---
--- ---
---
---@param self Gtk.FontButton # a `GtkFontButton`
---@param use_font (boolean|nil) # If `true`, font name will be written using font chosen.
---@return nil
function Gtk.FontButton:set_use_font(use_font) end

--- # method Gtk.FontButton:set_use_size()
---
--- If `use_size` is `true`, the font name will be written using the selected size.
---
--- ---
---
---@param self Gtk.FontButton # a `GtkFontButton`
---@param use_size (boolean|nil) # If `true`, font name will be written using the selected size.
---@return nil
function Gtk.FontButton:set_use_size(use_size) end

--- # function Gtk.FontButton.new()
---
--- Creates a new font picker widget.
---
--- ---
---
---@return Gtk.Widget # a new font picker widget.
function Gtk.FontButton.new() end

--- # function Gtk.FontButton.new_with_font()
---
--- Creates a new font picker widget.
---
--- ---
---
---@param fontname string # Name of font to display in font chooser dialog
---@return Gtk.Widget # a new font picker widget.
function Gtk.FontButton.new_with_font(fontname) end

--- # record Gtk.FontButtonClass
---
---@class Gtk.FontButtonClass
---@field parent_class Gtk.ButtonClass
---@field font_set fun(gfp: Gtk.FontButton): nil
Gtk.FontButtonClass = {}

--- # record Gtk.FontButtonPrivate
---
---@class Gtk.FontButtonPrivate
Gtk.FontButtonPrivate = {}

--- # interface Gtk.FontChooser
---
--- `GtkFontChooser` is an interface that can be implemented by widgets
--- displaying the list of fonts. In GTK+, the main objects
--- that implement this interface are `GtkFontChooserWidget`,
--- `GtkFontChooserDialog` and `GtkFontButton`. The GtkFontChooser interface
--- has been introducted in GTK+ 3.2.
---
--- ---
---
---@class Gtk.FontChooser
Gtk.FontChooser = {}

--- # method Gtk.FontChooser:get_font()
---
--- Gets the currently-selected font name.
--- 
--- Note that this can be a different string than what you set with
--- `gtk_font_chooser_set_font()`, as the font chooser widget may
--- normalize font names and thus return a string with a different
--- structure. For example, “Helvetica Italic Bold 12” could be
--- normalized to “Helvetica Bold Italic 12”.
--- 
--- Use `pango_font_description_equal()` if you want to compare two
--- font descriptions.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@return string # A string with the name of the current font, or `nil` if no font is selected. You must free this string with `g_free()`.
function Gtk.FontChooser:get_font() end

--- # method Gtk.FontChooser:get_font_desc()
---
--- Gets the currently-selected font.
--- 
--- Note that this can be a different string than what you set with
--- `gtk_font_chooser_set_font()`, as the font chooser widget may
--- normalize font names and thus return a string with a different
--- structure. For example, “Helvetica Italic Bold 12” could be
--- normalized to “Helvetica Bold Italic 12”.
--- 
--- Use `pango_font_description_equal()` if you want to compare two
--- font descriptions.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@return Pango.FontDescription # A `PangoFontDescription` for the current font, or `nil` if no font is selected.
function Gtk.FontChooser:get_font_desc() end

--- # method Gtk.FontChooser:get_font_face()
---
--- Gets the `PangoFontFace` representing the selected font group
--- details (i.e. family, slant, weight, width, etc).
--- 
--- If the selected font is not installed, returns `nil`.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@return Pango.FontFace # A `PangoFontFace` representing the selected font group details, or `nil`. The returned object is owned by `fontchooser` and must not be modified or freed.
function Gtk.FontChooser:get_font_face() end

--- # method Gtk.FontChooser:get_font_family()
---
--- Gets the `PangoFontFamily` representing the selected font family.
--- Font families are a collection of font faces.
--- 
--- If the selected font is not installed, returns `nil`.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@return Pango.FontFamily # A `PangoFontFamily` representing the selected font family, or `nil`. The returned object is owned by `fontchooser` and must not be modified or freed.
function Gtk.FontChooser:get_font_family() end

--- # method Gtk.FontChooser:get_font_features()
---
--- Gets the currently-selected font features.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@return string # the currently selected font features
function Gtk.FontChooser:get_font_features() end

--- # method Gtk.FontChooser:get_font_map()
---
--- Gets the custom font map of this font chooser widget,
--- or `nil` if it does not have one.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@return Pango.FontMap # a `PangoFontMap`, or `nil`
function Gtk.FontChooser:get_font_map() end

--- # method Gtk.FontChooser:get_font_size()
---
--- The selected font size.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@return integer # A n integer representing the selected font size, or -1 if no font size is selected.
function Gtk.FontChooser:get_font_size() end

--- # method Gtk.FontChooser:get_language()
---
--- Gets the language that is used for font features.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@return string # the currently selected language
function Gtk.FontChooser:get_language() end

--- # method Gtk.FontChooser:get_level()
---
--- Returns the current level of granularity for selecting fonts.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@return Gtk.FontChooserLevel # the current granularity level
function Gtk.FontChooser:get_level() end

--- # method Gtk.FontChooser:get_preview_text()
---
--- Gets the text displayed in the preview area.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@return string # the text displayed in the preview area
function Gtk.FontChooser:get_preview_text() end

--- # method Gtk.FontChooser:get_show_preview_entry()
---
--- Returns whether the preview entry is shown or not.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@return (boolean|nil) # `true` if the preview entry is shown or `false` if it is hidden.
function Gtk.FontChooser:get_show_preview_entry() end

--- # method Gtk.FontChooser:set_filter_func()
---
--- Adds a filter function that decides which fonts to display
--- in the font chooser.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@param filter? Gtk.FontFilterFunc # a `GtkFontFilterFunc`, or `nil`
---@param user_data? userdata # data to pass to `filter`
---@param destroy GLib.DestroyNotify # function to call to free `data` when it is no longer needed
---@return nil
function Gtk.FontChooser:set_filter_func(filter, user_data, destroy) end

--- # method Gtk.FontChooser:set_font()
---
--- Sets the currently-selected font.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@param fontname string # a font name like “Helvetica 12” or “Times Bold 18”
---@return nil
function Gtk.FontChooser:set_font(fontname) end

--- # method Gtk.FontChooser:set_font_desc()
---
--- Sets the currently-selected font from `font_desc`.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@param font_desc Pango.FontDescription # a `PangoFontDescription`
---@return nil
function Gtk.FontChooser:set_font_desc(font_desc) end

--- # method Gtk.FontChooser:set_font_map()
---
--- Sets a custom font map to use for this font chooser widget.
--- A custom font map can be used to present application-specific
--- fonts instead of or in addition to the normal system fonts.
--- 
--- ```c
--- FcConfig *config;
--- PangoFontMap *fontmap;
--- 
--- config = FcInitLoadConfigAndFonts ();
--- FcConfigAppFontAddFile (config, my_app_font_file);
--- 
--- fontmap = pango_cairo_font_map_new_for_font_type (CAIRO_FONT_TYPE_FT);
--- pango_fc_font_map_set_config (PANGO_FC_FONT_MAP (fontmap), config);
--- 
--- gtk_font_chooser_set_font_map (font_chooser, fontmap);
--- ```
--- 
--- Note that other GTK+ widgets will only be able to use the application-specific
--- font if it is present in the font map they use:
--- 
--- ```c
--- context = gtk_widget_get_pango_context (label);
--- pango_context_set_font_map (context, fontmap);
--- ```
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@param fontmap? Pango.FontMap # a `PangoFontMap`
---@return nil
function Gtk.FontChooser:set_font_map(fontmap) end

--- # method Gtk.FontChooser:set_language()
---
--- Sets the language to use for font features.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@param language string # a language
---@return nil
function Gtk.FontChooser:set_language(language) end

--- # method Gtk.FontChooser:set_level()
---
--- Sets the desired level of granularity for selecting fonts.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@param level Gtk.FontChooserLevel # the desired level of granularity
---@return nil
function Gtk.FontChooser:set_level(level) end

--- # method Gtk.FontChooser:set_preview_text()
---
--- Sets the text displayed in the preview area.
--- The `text` is used to show how the selected font looks.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@param text string # the text to display in the preview area
---@return nil
function Gtk.FontChooser:set_preview_text(text) end

--- # method Gtk.FontChooser:set_show_preview_entry()
---
--- Shows or hides the editable preview entry.
---
--- ---
---
---@param self Gtk.FontChooser # a `GtkFontChooser`
---@param show_preview_entry (boolean|nil) # whether to show the editable preview entry or not
---@return nil
function Gtk.FontChooser:set_show_preview_entry(show_preview_entry) end

--- # class Gtk.FontChooserDialog
---
--- The `GtkFontChooserDialog` widget is a dialog for selecting a font.
--- It implements the `GtkFontChooser` interface.
--- 
--- # GtkFontChooserDialog as GtkBuildable
--- 
--- The GtkFontChooserDialog implementation of the `GtkBuildable`
--- interface exposes the buttons with the names “select_button”
--- and “cancel_button”.
---
--- ---
---
---@class Gtk.FontChooserDialog : Gtk.Dialog, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.FontChooser
---@field parent_instance Gtk.Dialog
---@field priv Gtk.FontChooserDialogPrivate
---@operator call: Gtk.FontChooserDialog
Gtk.FontChooserDialog = {}

--- # function Gtk.FontChooserDialog.new()
---
--- Creates a new `GtkFontChooserDialog`.
---
--- ---
---
---@param title? string # Title of the dialog, or `nil`
---@param parent? Gtk.Window # Transient parent of the dialog, or `nil`
---@return Gtk.Widget # a new `GtkFontChooserDialog`
function Gtk.FontChooserDialog.new(title, parent) end

--- # record Gtk.FontChooserDialogClass
---
---@class Gtk.FontChooserDialogClass
---@field parent_class Gtk.DialogClass # The parent class.
Gtk.FontChooserDialogClass = {}

--- # record Gtk.FontChooserDialogPrivate
---
---@class Gtk.FontChooserDialogPrivate
Gtk.FontChooserDialogPrivate = {}

--- # record Gtk.FontChooserIface
---
---@class Gtk.FontChooserIface
---@field base_iface GObject.TypeInterface
---@field get_font_family fun(fontchooser: Gtk.FontChooser): Pango.FontFamily
---@field get_font_face fun(fontchooser: Gtk.FontChooser): Pango.FontFace
---@field get_font_size fun(fontchooser: Gtk.FontChooser): integer
---@field set_filter_func fun(fontchooser: Gtk.FontChooser, filter: Gtk.FontFilterFunc, user_data: userdata, destroy: GLib.DestroyNotify): nil
---@field font_activated fun(chooser: Gtk.FontChooser, fontname: string): nil
---@field set_font_map fun(fontchooser: Gtk.FontChooser, fontmap: Pango.FontMap): nil
---@field get_font_map fun(fontchooser: Gtk.FontChooser): Pango.FontMap
---@field padding unknown[]
Gtk.FontChooserIface = {}

---@enum Gtk.FontChooserLevel
Gtk.FontChooserLevel = {}

--- # class Gtk.FontChooserWidget
---
--- The `GtkFontChooserWidget` widget lists the available fonts,
--- styles and sizes, allowing the user to select a font. It is
--- used in the `GtkFontChooserDialog` widget to provide a
--- dialog box for selecting fonts.
--- 
--- To set the font which is initially selected, use
--- `gtk_font_chooser_set_font()` or `gtk_font_chooser_set_font_desc()`.
--- 
--- To get the selected font use `gtk_font_chooser_get_font()` or
--- `gtk_font_chooser_get_font_desc()`.
--- 
--- To change the text which is shown in the preview area, use
--- `gtk_font_chooser_set_preview_text()`.
--- 
--- # CSS nodes
--- 
--- GtkFontChooserWidget has a single CSS node with name fontchooser.
---
--- ---
---
---@class Gtk.FontChooserWidget : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.FontChooser, Gtk.Orientable
---@field parent_instance Gtk.Box
---@field priv Gtk.FontChooserWidgetPrivate
---@operator call: Gtk.FontChooserWidget
Gtk.FontChooserWidget = {}

--- # function Gtk.FontChooserWidget.new()
---
--- Creates a new `GtkFontChooserWidget`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkFontChooserWidget`
function Gtk.FontChooserWidget.new() end

--- # record Gtk.FontChooserWidgetClass
---
---@class Gtk.FontChooserWidgetClass
---@field parent_class Gtk.BoxClass # The parent class.
Gtk.FontChooserWidgetClass = {}

--- # record Gtk.FontChooserWidgetPrivate
---
---@class Gtk.FontChooserWidgetPrivate
Gtk.FontChooserWidgetPrivate = {}

---@alias Gtk.FontFilterFunc fun(family: Pango.FontFamily, face: Pango.FontFace, data: userdata): (boolean|nil)

--- # class Gtk.FontSelection
---
---@class Gtk.FontSelection : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field parent_instance Gtk.Box
---@field priv Gtk.FontSelectionPrivate
---@operator call: Gtk.FontSelection
Gtk.FontSelection = {}

--- # method Gtk.FontSelection:get_face()
---
--- Gets the `PangoFontFace` representing the selected font group
--- details (i.e. family, slant, weight, width, etc).
---
--- ---
---
---@param self Gtk.FontSelection # a `GtkFontSelection`
---@return Pango.FontFace # A `PangoFontFace` representing the selected font group details. The returned object is owned by `fontsel` and must not be modified or freed.
function Gtk.FontSelection:get_face() end

--- # method Gtk.FontSelection:get_face_list()
---
--- This returns the `GtkTreeView` which lists all styles available for
--- the selected font. For example, “Regular”, “Bold”, etc.
---
--- ---
---
---@param self Gtk.FontSelection # a `GtkFontSelection`
---@return Gtk.Widget # A `GtkWidget` that is part of `fontsel`
function Gtk.FontSelection:get_face_list() end

--- # method Gtk.FontSelection:get_family()
---
--- Gets the `PangoFontFamily` representing the selected font family.
---
--- ---
---
---@param self Gtk.FontSelection # a `GtkFontSelection`
---@return Pango.FontFamily # A `PangoFontFamily` representing the selected font family. Font families are a collection of font faces. The returned object is owned by `fontsel` and must not be modified or freed.
function Gtk.FontSelection:get_family() end

--- # method Gtk.FontSelection:get_family_list()
---
--- This returns the `GtkTreeView` that lists font families, for
--- example, “Sans”, “Serif”, etc.
---
--- ---
---
---@param self Gtk.FontSelection # a `GtkFontSelection`
---@return Gtk.Widget # A `GtkWidget` that is part of `fontsel`
function Gtk.FontSelection:get_family_list() end

--- # method Gtk.FontSelection:get_font_name()
---
--- Gets the currently-selected font name.
--- 
--- Note that this can be a different string than what you set with
--- `gtk_font_selection_set_font_name()`, as the font selection widget may
--- normalize font names and thus return a string with a different structure.
--- For example, “Helvetica Italic Bold 12” could be normalized to
--- “Helvetica Bold Italic 12”. Use `pango_font_description_equal()`
--- if you want to compare two font descriptions.
---
--- ---
---
---@param self Gtk.FontSelection # a `GtkFontSelection`
---@return string # A string with the name of the current font, or `nil` if no font is selected. You must free this string with `g_free()`.
function Gtk.FontSelection:get_font_name() end

--- # method Gtk.FontSelection:get_preview_entry()
---
--- This returns the `GtkEntry` used to display the font as a preview.
---
--- ---
---
---@param self Gtk.FontSelection # a `GtkFontSelection`
---@return Gtk.Widget # A `GtkWidget` that is part of `fontsel`
function Gtk.FontSelection:get_preview_entry() end

--- # method Gtk.FontSelection:get_preview_text()
---
--- Gets the text displayed in the preview area.
---
--- ---
---
---@param self Gtk.FontSelection # a `GtkFontSelection`
---@return string # the text displayed in the preview area. This string is owned by the widget and should not be modified or freed
function Gtk.FontSelection:get_preview_text() end

--- # method Gtk.FontSelection:get_size()
---
--- The selected font size.
---
--- ---
---
---@param self Gtk.FontSelection # a `GtkFontSelection`
---@return integer # A n integer representing the selected font size, or -1 if no font size is selected.
function Gtk.FontSelection:get_size() end

--- # method Gtk.FontSelection:get_size_entry()
---
--- This returns the `GtkEntry` used to allow the user to edit the font
--- number manually instead of selecting it from the list of font sizes.
---
--- ---
---
---@param self Gtk.FontSelection # a `GtkFontSelection`
---@return Gtk.Widget # A `GtkWidget` that is part of `fontsel`
function Gtk.FontSelection:get_size_entry() end

--- # method Gtk.FontSelection:get_size_list()
---
--- This returns the `GtkTreeView` used to list font sizes.
---
--- ---
---
---@param self Gtk.FontSelection # a `GtkFontSelection`
---@return Gtk.Widget # A `GtkWidget` that is part of `fontsel`
function Gtk.FontSelection:get_size_list() end

--- # method Gtk.FontSelection:set_font_name()
---
--- Sets the currently-selected font.
--- 
--- Note that the `fontsel` needs to know the screen in which it will appear
--- for this to work; this can be guaranteed by simply making sure that the
--- `fontsel` is inserted in a toplevel window before you call this function.
---
--- ---
---
---@param self Gtk.FontSelection # a `GtkFontSelection`
---@param fontname string # a font name like “Helvetica 12” or “Times Bold 18”
---@return (boolean|nil) # `true` if the font could be set successfully; `false` if no such font exists or if the `fontsel` doesn’t belong to a particular screen yet.
function Gtk.FontSelection:set_font_name(fontname) end

--- # method Gtk.FontSelection:set_preview_text()
---
--- Sets the text displayed in the preview area.
--- The `text` is used to show how the selected font looks.
---
--- ---
---
---@param self Gtk.FontSelection # a `GtkFontSelection`
---@param text string # the text to display in the preview area
---@return nil
function Gtk.FontSelection:set_preview_text(text) end

--- # function Gtk.FontSelection.new()
---
--- Creates a new `GtkFontSelection`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkFontSelection`
function Gtk.FontSelection.new() end

--- # record Gtk.FontSelectionClass
---
---@class Gtk.FontSelectionClass
---@field parent_class Gtk.BoxClass
Gtk.FontSelectionClass = {}

--- # class Gtk.FontSelectionDialog
---
---@class Gtk.FontSelectionDialog : Gtk.Dialog, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent_instance Gtk.Dialog
---@field priv Gtk.FontSelectionDialogPrivate
---@operator call: Gtk.FontSelectionDialog
Gtk.FontSelectionDialog = {}

--- # method Gtk.FontSelectionDialog:get_cancel_button()
---
--- Gets the “Cancel” button.
---
--- ---
---
---@param self Gtk.FontSelectionDialog # a `GtkFontSelectionDialog`
---@return Gtk.Widget # the `GtkWidget` used in the dialog for the “Cancel” button.
function Gtk.FontSelectionDialog:get_cancel_button() end

--- # method Gtk.FontSelectionDialog:get_font_name()
---
--- Gets the currently-selected font name.
--- 
--- Note that this can be a different string than what you set with
--- `gtk_font_selection_dialog_set_font_name()`, as the font selection widget
--- may normalize font names and thus return a string with a different
--- structure. For example, “Helvetica Italic Bold 12” could be normalized
--- to “Helvetica Bold Italic 12”.  Use `pango_font_description_equal()`
--- if you want to compare two font descriptions.
---
--- ---
---
---@param self Gtk.FontSelectionDialog # a `GtkFontSelectionDialog`
---@return string # A string with the name of the current font, or `nil` if no font is selected. You must free this string with `g_free()`.
function Gtk.FontSelectionDialog:get_font_name() end

--- # method Gtk.FontSelectionDialog:get_font_selection()
---
--- Retrieves the `GtkFontSelection` widget embedded in the dialog.
---
--- ---
---
---@param self Gtk.FontSelectionDialog # a `GtkFontSelectionDialog`
---@return Gtk.Widget # the embedded `GtkFontSelection`
function Gtk.FontSelectionDialog:get_font_selection() end

--- # method Gtk.FontSelectionDialog:get_ok_button()
---
--- Gets the “OK” button.
---
--- ---
---
---@param self Gtk.FontSelectionDialog # a `GtkFontSelectionDialog`
---@return Gtk.Widget # the `GtkWidget` used in the dialog for the “OK” button.
function Gtk.FontSelectionDialog:get_ok_button() end

--- # method Gtk.FontSelectionDialog:get_preview_text()
---
--- Gets the text displayed in the preview area.
---
--- ---
---
---@param self Gtk.FontSelectionDialog # a `GtkFontSelectionDialog`
---@return string # the text displayed in the preview area. This string is owned by the widget and should not be modified or freed
function Gtk.FontSelectionDialog:get_preview_text() end

--- # method Gtk.FontSelectionDialog:set_font_name()
---
--- Sets the currently selected font.
---
--- ---
---
---@param self Gtk.FontSelectionDialog # a `GtkFontSelectionDialog`
---@param fontname string # a font name like “Helvetica 12” or “Times Bold 18”
---@return (boolean|nil) # `true` if the font selected in `fsd` is now the `fontname` specified, `false` otherwise.
function Gtk.FontSelectionDialog:set_font_name(fontname) end

--- # method Gtk.FontSelectionDialog:set_preview_text()
---
--- Sets the text displayed in the preview area.
---
--- ---
---
---@param self Gtk.FontSelectionDialog # a `GtkFontSelectionDialog`
---@param text string # the text to display in the preview area
---@return nil
function Gtk.FontSelectionDialog:set_preview_text(text) end

--- # function Gtk.FontSelectionDialog.new()
---
--- Creates a new `GtkFontSelectionDialog`.
---
--- ---
---
---@param title string # the title of the dialog window
---@return Gtk.Widget # a new `GtkFontSelectionDialog`
function Gtk.FontSelectionDialog.new(title) end

--- # record Gtk.FontSelectionDialogClass
---
---@class Gtk.FontSelectionDialogClass
---@field parent_class Gtk.DialogClass
Gtk.FontSelectionDialogClass = {}

--- # record Gtk.FontSelectionDialogPrivate
---
---@class Gtk.FontSelectionDialogPrivate
Gtk.FontSelectionDialogPrivate = {}

--- # record Gtk.FontSelectionPrivate
---
---@class Gtk.FontSelectionPrivate
Gtk.FontSelectionPrivate = {}

--- # class Gtk.Frame
---
--- The frame widget is a bin that surrounds its child with a decorative
--- frame and an optional label. If present, the label is drawn in a gap
--- in the top side of the frame. The position of the label can be
--- controlled with `gtk_frame_set_label_align()`.
--- 
--- # GtkFrame as GtkBuildable
--- 
--- The GtkFrame implementation of the `GtkBuildable` interface supports
--- placing a child in the label position by specifying “label” as the
--- “type” attribute of a `<child>` element. A normal content child can
--- be specified without specifying a `<child>` type attribute.
--- 
--- An example of a UI definition fragment with `GtkFrame`:
--- 
--- ```xml
--- <object class="GtkFrame">
---   <child type="label">
---     <object class="GtkLabel" id="frame-label"/>
---   </child>
---   <child>
---     <object class="GtkEntry" id="frame-content"/>
---   </child>
--- </object>
--- ```
--- 
--- # CSS nodes
--- 
--- ```plain
--- frame
--- ├── border[.flat]
--- ├── <label widget>
--- ╰── <child>
--- ```
--- 
--- GtkFrame has a main CSS node named “frame” and a subnode named “border”. The
--- “border” node is used to draw the visible border. You can set the appearance
--- of the border using CSS properties like “border-style” on the “border” node.
--- 
--- The border node can be given the style class “.flat”, which is used by themes
--- to disable drawing of the border. To do this from code, call
--- `gtk_frame_set_shadow_type()` with %GTK_SHADOW_NONE to add the “.flat” class or
--- any other shadow type to remove it.
---
--- ---
---
---@class Gtk.Frame : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field bin Gtk.Bin
---@field priv Gtk.FramePrivate
---@operator call: Gtk.Frame
Gtk.Frame = {}

--- # method Gtk.Frame:get_label()
---
--- If the frame’s label widget is a `GtkLabel`, returns the
--- text in the label widget. (The frame will have a `GtkLabel`
--- for the label widget if a non-`nil` argument was passed
--- to `gtk_frame_new()`.)
---
--- ---
---
---@param self Gtk.Frame # a `GtkFrame`
---@return string # the text in the label, or `nil` if there was no label widget or the lable widget was not a `GtkLabel`. This string is owned by GTK+ and must not be modified or freed.
function Gtk.Frame:get_label() end

--- # method Gtk.Frame:get_label_align()
---
--- Retrieves the X and Y alignment of the frame’s label. See
--- `gtk_frame_set_label_align()`.
---
--- ---
---
---@param self Gtk.Frame # a `GtkFrame`
---@param xalign? number # location to store X alignment of frame’s label, or `nil`
---@param yalign? number # location to store X alignment of frame’s label, or `nil`
---@return nil
function Gtk.Frame:get_label_align(xalign, yalign) end

--- # method Gtk.Frame:get_label_widget()
---
--- Retrieves the label widget for the frame. See
--- `gtk_frame_set_label_widget()`.
---
--- ---
---
---@param self Gtk.Frame # a `GtkFrame`
---@return Gtk.Widget # the label widget, or `nil` if there is none.
function Gtk.Frame:get_label_widget() end

--- # method Gtk.Frame:get_shadow_type()
---
--- Retrieves the shadow type of the frame. See
--- `gtk_frame_set_shadow_type()`.
---
--- ---
---
---@param self Gtk.Frame # a `GtkFrame`
---@return Gtk.ShadowType # the current shadow type of the frame.
function Gtk.Frame:get_shadow_type() end

--- # method Gtk.Frame:set_label()
---
--- Removes the current `GtkFrame`:label-widget. If `label` is not `nil`, creates a
--- new `GtkLabel` with that text and adds it as the `GtkFrame`:label-widget.
---
--- ---
---
---@param self Gtk.Frame # a `GtkFrame`
---@param label? string # the text to use as the label of the frame
---@return nil
function Gtk.Frame:set_label(label) end

--- # method Gtk.Frame:set_label_align()
---
--- Sets the alignment of the frame widget’s label. The
--- default values for a newly created frame are 0.0 and 0.5.
---
--- ---
---
---@param self Gtk.Frame # a `GtkFrame`
---@param xalign number # The position of the label along the top edge of the widget. A value of 0.0 represents left alignment; 1.0 represents right alignment.
---@param yalign number # The y alignment of the label. A value of 0.0 aligns under the frame; 1.0 aligns above the frame. If the values are exactly 0.0 or 1.0 the gap in the frame won’t be painted because the label will be completely above or below the frame.
---@return nil
function Gtk.Frame:set_label_align(xalign, yalign) end

--- # method Gtk.Frame:set_label_widget()
---
--- Sets the `GtkFrame`:label-widget for the frame. This is the widget that
--- will appear embedded in the top edge of the frame as a title.
---
--- ---
---
---@param self Gtk.Frame # a `GtkFrame`
---@param label_widget? Gtk.Widget # the new label widget
---@return nil
function Gtk.Frame:set_label_widget(label_widget) end

--- # method Gtk.Frame:set_shadow_type()
---
--- Sets the `GtkFrame`:shadow-type for `frame`, i.e. whether it is drawn without
--- (%GTK_SHADOW_NONE) or with (other values) a visible border. Values other than
--- %GTK_SHADOW_NONE are treated identically by GtkFrame. The chosen type is
--- applied by removing or adding the .flat class to the CSS node named border.
---
--- ---
---
---@param self Gtk.Frame # a `GtkFrame`
---@param type Gtk.ShadowType # the new `GtkShadowType`
---@return nil
function Gtk.Frame:set_shadow_type(type) end

--- # function Gtk.Frame.new()
---
--- Creates a new `GtkFrame`, with optional label `label`.
--- If `label` is `nil`, the label is omitted.
---
--- ---
---
---@param label? string # the text to use as the label of the frame
---@return Gtk.Widget # a new `GtkFrame` widget
function Gtk.Frame.new(label) end

--- # class Gtk.FrameAccessible
---
---@class Gtk.FrameAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.FrameAccessiblePrivate
Gtk.FrameAccessible = {}

--- # record Gtk.FrameAccessibleClass
---
---@class Gtk.FrameAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.FrameAccessibleClass = {}

--- # record Gtk.FrameAccessiblePrivate
---
---@class Gtk.FrameAccessiblePrivate
Gtk.FrameAccessiblePrivate = {}

--- # record Gtk.FrameClass
---
---@class Gtk.FrameClass
---@field parent_class Gtk.BinClass # The parent class.
---@field compute_child_allocation fun(frame: Gtk.Frame, allocation: Gtk.Allocation): nil
Gtk.FrameClass = {}

--- # record Gtk.FramePrivate
---
---@class Gtk.FramePrivate
Gtk.FramePrivate = {}

--- # class Gtk.GLArea
---
--- `GtkGLArea` is a widget that allows drawing with OpenGL.
--- 
--- `GtkGLArea` sets up its own `GdkGLContext` for the window it creates, and
--- creates a custom GL framebuffer that the widget will do GL rendering onto.
--- It also ensures that this framebuffer is the default GL rendering target
--- when rendering.
--- 
--- In order to draw, you have to connect to the `GtkGLArea`::render signal,
--- or subclass `GtkGLArea` and override the `GtkGLAreaClass`.`render()` virtual
--- function.
--- 
--- The `GtkGLArea` widget ensures that the `GdkGLContext` is associated with
--- the widget's drawing area, and it is kept updated when the size and
--- position of the drawing area changes.
--- 
--- ## Drawing with GtkGLArea ##
--- 
--- The simplest way to draw using OpenGL commands in a `GtkGLArea` is to
--- create a widget instance and connect to the `GtkGLArea`::render signal:
--- 
--- ```c
---   // create a GtkGLArea instance
---   GtkWidget *gl_area = gtk_gl_area_new ();
--- 
---   // connect to the "render" signal
---   g_signal_connect (gl_area, "render", G_CALLBACK (render), NULL);
--- ```
--- 
--- The ``render()`` function will be called when the `GtkGLArea` is ready
--- for you to draw its content:
--- 
--- ```c
---   static gboolean
---   render (GtkGLArea *area, GdkGLContext *context)
---   {
---     // inside this function it's safe to use GL; the given
---     // `GdkGLContext` has been made current to the drawable
---     // surface used by the `GtkGLArea` and the viewport has
---     // already been set to be the size of the allocation
--- 
---     // we can start by clearing the buffer
---     glClearColor (0, 0, 0, 0);
---     glClear (GL_COLOR_BUFFER_BIT);
--- 
---     // draw your object
---     draw_an_object ();
--- 
---     // we completed our drawing; the draw commands will be
---     // flushed at the end of the signal emission chain, and
---     // the buffers will be drawn on the window
---     return TRUE;
---   }
--- ```
--- 
--- If you need to initialize OpenGL state, e.g. buffer objects or
--- shaders, you should use the `GtkWidget`::realize signal; you
--- can use the `GtkWidget`::unrealize signal to clean up. Since the
--- `GdkGLContext` creation and initialization may fail, you will
--- need to check for errors, using `gtk_gl_area_get_error()`. An example
--- of how to safely initialize the GL state is:
--- 
--- ```c
---   static void
---   on_realize (GtkGLarea *area)
---   {
---     // We need to make the context current if we want to
---     // call GL API
---     gtk_gl_area_make_current (area);
--- 
---     // If there were errors during the initialization or
---     // when trying to make the context current, this
---     // function will return a `GError` for you to catch
---     if (gtk_gl_area_get_error (area) != NULL)
---       return;
--- 
---     // You can also use `gtk_gl_area_set_error()` in order
---     // to show eventual initialization errors on the
---     // GtkGLArea widget itself
---     GError *internal_error = NULL;
---     init_buffer_objects (&error);
---     if (error != NULL)
---       {
---         gtk_gl_area_set_error (area, error);
---         g_error_free (error);
---         return;
---       }
--- 
---     init_shaders (&error);
---     if (error != NULL)
---       {
---         gtk_gl_area_set_error (area, error);
---         g_error_free (error);
---         return;
---       }
---   }
--- ```
--- 
--- If you need to change the options for creating the `GdkGLContext`
--- you should use the `GtkGLArea`::create-context signal.
---
--- ---
---
---@class Gtk.GLArea : Gtk.Widget, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent_instance Gtk.Widget
---@operator call: Gtk.GLArea
Gtk.GLArea = {}

--- # method Gtk.GLArea:attach_buffers()
---
--- Ensures that the `area` framebuffer object is made the current draw
--- and read target, and that all the required buffers for the `area`
--- are created and bound to the frambuffer.
--- 
--- This function is automatically called before emitting the
--- `GtkGLArea`::render signal, and doesn't normally need to be called
--- by application code.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@return nil
function Gtk.GLArea:attach_buffers() end

--- # method Gtk.GLArea:get_auto_render()
---
--- Returns whether the area is in auto render mode or not.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@return (boolean|nil) # `true` if the `area` is auto rendering, `false` otherwise
function Gtk.GLArea:get_auto_render() end

--- # method Gtk.GLArea:get_context()
---
--- Retrieves the `GdkGLContext` used by `area`.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@return Gdk.GLContext # the `GdkGLContext`
function Gtk.GLArea:get_context() end

--- # method Gtk.GLArea:get_error()
---
--- Gets the current error set on the `area`.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@return GLib.Error # the `GError` or `nil`
function Gtk.GLArea:get_error() end

--- # method Gtk.GLArea:get_has_alpha()
---
--- Returns whether the area has an alpha component.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@return (boolean|nil) # `true` if the `area` has an alpha component, `false` otherwise
function Gtk.GLArea:get_has_alpha() end

--- # method Gtk.GLArea:get_has_depth_buffer()
---
--- Returns whether the area has a depth buffer.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@return (boolean|nil) # `true` if the `area` has a depth buffer, `false` otherwise
function Gtk.GLArea:get_has_depth_buffer() end

--- # method Gtk.GLArea:get_has_stencil_buffer()
---
--- Returns whether the area has a stencil buffer.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@return (boolean|nil) # `true` if the `area` has a stencil buffer, `false` otherwise
function Gtk.GLArea:get_has_stencil_buffer() end

--- # method Gtk.GLArea:get_required_version()
---
--- Retrieves the required version of OpenGL set
--- using `gtk_gl_area_set_required_version()`.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@param major integer # return location for the required major version
---@param minor integer # return location for the required minor version
---@return nil
function Gtk.GLArea:get_required_version(major, minor) end

--- # method Gtk.GLArea:get_use_es()
---
--- Retrieves the value set by `gtk_gl_area_set_use_es()`.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@return (boolean|nil) # `true` if the `GtkGLArea` should create an OpenGL ES context and `false` otherwise
function Gtk.GLArea:get_use_es() end

--- # method Gtk.GLArea:make_current()
---
--- Ensures that the `GdkGLContext` used by `area` is associated with
--- the `GtkGLArea`.
--- 
--- This function is automatically called before emitting the
--- `GtkGLArea`::render signal, and doesn't normally need to be called
--- by application code.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@return nil
function Gtk.GLArea:make_current() end

--- # method Gtk.GLArea:queue_render()
---
--- Marks the currently rendered data (if any) as invalid, and queues
--- a redraw of the widget, ensuring that the `GtkGLArea`::render signal
--- is emitted during the draw.
--- 
--- This is only needed when the `gtk_gl_area_set_auto_render()` has
--- been called with a `false` value. The default behaviour is to
--- emit `GtkGLArea`::render on each draw.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@return nil
function Gtk.GLArea:queue_render() end

--- # method Gtk.GLArea:set_auto_render()
---
--- If `auto_render` is `true` the `GtkGLArea`::render signal will be
--- emitted every time the widget draws. This is the default and is
--- useful if drawing the widget is faster.
--- 
--- If `auto_render` is `false` the data from previous rendering is kept
--- around and will be used for drawing the widget the next time,
--- unless the window is resized. In order to force a rendering
--- `gtk_gl_area_queue_render()` must be called. This mode is useful when
--- the scene changes seldomly, but takes a long time to redraw.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@param auto_render (boolean|nil) # a boolean
---@return nil
function Gtk.GLArea:set_auto_render(auto_render) end

--- # method Gtk.GLArea:set_error()
---
--- Sets an error on the area which will be shown instead of the
--- GL rendering. This is useful in the `GtkGLArea`::create-context
--- signal if GL context creation fails.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@param error? GLib.Error # a new `GError`, or `nil` to unset the error
---@return nil
function Gtk.GLArea:set_error(error) end

--- # method Gtk.GLArea:set_has_alpha()
---
--- If `has_alpha` is `true` the buffer allocated by the widget will have
--- an alpha channel component, and when rendering to the window the
--- result will be composited over whatever is below the widget.
--- 
--- If `has_alpha` is `false` there will be no alpha channel, and the
--- buffer will fully replace anything below the widget.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@param has_alpha (boolean|nil) # `true` to add an alpha component
---@return nil
function Gtk.GLArea:set_has_alpha(has_alpha) end

--- # method Gtk.GLArea:set_has_depth_buffer()
---
--- If `has_depth_buffer` is `true` the widget will allocate and
--- enable a depth buffer for the target framebuffer. Otherwise
--- there will be none.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@param has_depth_buffer (boolean|nil) # `true` to add a depth buffer
---@return nil
function Gtk.GLArea:set_has_depth_buffer(has_depth_buffer) end

--- # method Gtk.GLArea:set_has_stencil_buffer()
---
--- If `has_stencil_buffer` is `true` the widget will allocate and
--- enable a stencil buffer for the target framebuffer. Otherwise
--- there will be none.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@param has_stencil_buffer (boolean|nil) # `true` to add a stencil buffer
---@return nil
function Gtk.GLArea:set_has_stencil_buffer(has_stencil_buffer) end

--- # method Gtk.GLArea:set_required_version()
---
--- Sets the required version of OpenGL to be used when creating the context
--- for the widget.
--- 
--- This function must be called before the area has been realized.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@param major integer # the major version
---@param minor integer # the minor version
---@return nil
function Gtk.GLArea:set_required_version(major, minor) end

--- # method Gtk.GLArea:set_use_es()
---
--- Sets whether the `area` should create an OpenGL or an OpenGL ES context.
--- 
--- You should check the capabilities of the `GdkGLContext` before drawing
--- with either API.
---
--- ---
---
---@param self Gtk.GLArea # a `GtkGLArea`
---@param use_es (boolean|nil) # whether to use OpenGL or OpenGL ES
---@return nil
function Gtk.GLArea:set_use_es(use_es) end

--- # function Gtk.GLArea.new()
---
--- Creates a new `GtkGLArea` widget.
---
--- ---
---
---@return Gtk.Widget # a new `GtkGLArea`
function Gtk.GLArea.new() end

--- # record Gtk.GLAreaClass
---
--- The `GtkGLAreaClass` structure contains only private data.
---
--- ---
---
---@class Gtk.GLAreaClass
---@field parent_class Gtk.WidgetClass
---@field render fun(area: Gtk.GLArea, context: Gdk.GLContext): (boolean|nil)
---@field resize fun(area: Gtk.GLArea, width: integer, height: integer): nil
---@field _padding unknown[]
Gtk.GLAreaClass = {}

--- # class Gtk.Gesture
---
--- `GtkGesture` is the base object for gesture recognition, although this
--- object is quite generalized to serve as a base for multi-touch gestures,
--- it is suitable to implement single-touch and pointer-based gestures (using
--- the special `nil` `GdkEventSequence` value for these).
--- 
--- The number of touches that a `GtkGesture` need to be recognized is controlled
--- by the `GtkGesture`:n-points property, if a gesture is keeping track of less
--- or more than that number of sequences, it won't check wether the gesture
--- is recognized.
--- 
--- As soon as the gesture has the expected number of touches, the gesture will
--- run the `GtkGesture`::check signal regularly on input events until the gesture
--- is recognized, the criteria to consider a gesture as "recognized" is left to
--- `GtkGesture` subclasses.
--- 
--- A recognized gesture will then emit the following signals:
--- - `GtkGesture`::begin when the gesture is recognized.
--- - A number of `GtkGesture`::update, whenever an input event is processed.
--- - `GtkGesture`::end when the gesture is no longer recognized.
--- 
--- ## Event propagation
--- 
--- In order to receive events, a gesture needs to either set a propagation phase
--- through `gtk_event_controller_set_propagation_phase()`, or feed those manually
--- through `gtk_event_controller_handle_event()`.
--- 
--- In the capture phase, events are propagated from the toplevel down to the
--- target widget, and gestures that are attached to containers above the widget
--- get a chance to interact with the event before it reaches the target.
--- 
--- After the capture phase, GTK+ emits the traditional `GtkWidget`::button-press-event,
--- `GtkWidget`::button-release-event, `GtkWidget`::touch-event, etc signals. Gestures
--- with the %GTK_PHASE_TARGET phase are fed events from the default `GtkWidget`::event
--- handlers.
--- 
--- In the bubble phase, events are propagated up from the target widget to the
--- toplevel, and gestures that are attached to containers above the widget get
--- a chance to interact with events that have not been handled yet.
--- 
--- ## States of a sequence # {`touch`-sequence-states}
--- 
--- Whenever input interaction happens, a single event may trigger a cascade of
--- `GtkGestures`, both across the parents of the widget receiving the event and
--- in parallel within an individual widget. It is a responsibility of the
--- widgets using those gestures to set the state of touch sequences accordingly
--- in order to enable cooperation of gestures around the `GdkEventSequences`
--- triggering those.
--- 
--- Within a widget, gestures can be grouped through `gtk_gesture_group()`,
--- grouped gestures synchronize the state of sequences, so calling
--- `gtk_gesture_set_sequence_state()` on one will effectively propagate
--- the state throughout the group.
--- 
--- By default, all sequences start out in the `GTK_EVENT_SEQUENCE_NONE` state,
--- sequences in this state trigger the gesture event handler, but event
--- propagation will continue unstopped by gestures.
--- 
--- If a sequence enters into the `GTK_EVENT_SEQUENCE_DENIED` state, the gesture
--- group will effectively ignore the sequence, letting events go unstopped
--- through the gesture, but the "slot" will still remain occupied while
--- the touch is active.
--- 
--- If a sequence enters in the `GTK_EVENT_SEQUENCE_CLAIMED` state, the gesture
--- group will grab all interaction on the sequence, by:
--- - Setting the same sequence to `GTK_EVENT_SEQUENCE_DENIED` on every other gesture
---   group within the widget, and every gesture on parent widgets in the propagation
---   chain.
--- - calling `GtkGesture`::cancel on every gesture in widgets underneath in the
---   propagation chain.
--- - Stopping event propagation after the gesture group handles the event.
--- 
--- Note: if a sequence is set early to `GTK_EVENT_SEQUENCE_CLAIMED` on
--- `GDK_TOUCH_BEGIN`/`GDK_BUTTON_PRESS` (so those events are captured before
--- reaching the event widget, this implies `GTK_PHASE_CAPTURE`), one similar
--- event will emulated if the sequence changes to `GTK_EVENT_SEQUENCE_DENIED`.
--- This way event coherence is preserved before event propagation is unstopped
--- again.
--- 
--- Sequence states can't be changed freely, see `gtk_gesture_set_sequence_state()`
--- to know about the possible lifetimes of a `GdkEventSequence`.
--- 
--- ## Touchpad gestures
--- 
--- On the platforms that support it, `GtkGesture` will handle transparently
--- touchpad gesture events. The only precautions users of `GtkGesture` should do
--- to enable this support are:
--- - Enabling %GDK_TOUCHPAD_GESTURE_MASK on their `GdkWindows`
--- - If the gesture has %GTK_PHASE_NONE, ensuring events of type
---   %GDK_TOUCHPAD_SWIPE and %GDK_TOUCHPAD_PINCH are handled by the `GtkGesture`
---
--- ---
---
---@class Gtk.Gesture : Gtk.EventController
Gtk.Gesture = {}

--- # method Gtk.Gesture:get_bounding_box()
---
--- If there are touch sequences being currently handled by `gesture`,
--- this function returns `true` and fills in `rect` with the bounding
--- box containing all active touches. Otherwise, `false` will be
--- returned.
--- 
--- Note: This function will yield unexpected results on touchpad
--- gestures. Since there is no correlation between physical and
--- pixel distances, these will look as if constrained in an
--- infinitely small area, `rect` width and height will thus be 0
--- regardless of the number of touchpoints.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@param rect Gdk.Rectangle # bounding box containing all active touches.
---@return (boolean|nil) # `true` if there are active touches, `false` otherwise
function Gtk.Gesture:get_bounding_box(rect) end

--- # method Gtk.Gesture:get_bounding_box_center()
---
--- If there are touch sequences being currently handled by `gesture`,
--- this function returns `true` and fills in `x` and `y` with the center
--- of the bounding box containing all active touches. Otherwise, `false`
--- will be returned.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@param x number # X coordinate for the bounding box center
---@param y number # Y coordinate for the bounding box center
---@return (boolean|nil) # `false` if no active touches are present, `true` otherwise
function Gtk.Gesture:get_bounding_box_center(x, y) end

--- # method Gtk.Gesture:get_device()
---
--- Returns the master `GdkDevice` that is currently operating
--- on `gesture`, or `nil` if the gesture is not being interacted.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@return Gdk.Device # a `GdkDevice`, or `nil`
function Gtk.Gesture:get_device() end

--- # method Gtk.Gesture:get_group()
---
--- Returns all gestures in the group of `gesture`
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@return Gtk.Gesture[] # The list of `GtkGestures`, free with `g_list_free()`
function Gtk.Gesture:get_group() end

--- # method Gtk.Gesture:get_last_event()
---
--- Returns the last event that was processed for `sequence`.
--- 
--- Note that the returned pointer is only valid as long as the `sequence`
--- is still interpreted by the `gesture`. If in doubt, you should make
--- a copy of the event.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@param sequence? Gdk.EventSequence # a `GdkEventSequence`
---@return Gdk.Event # The last event from `sequence`
function Gtk.Gesture:get_last_event(sequence) end

--- # method Gtk.Gesture:get_last_updated_sequence()
---
--- Returns the `GdkEventSequence` that was last updated on `gesture`.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@return Gdk.EventSequence # The last updated sequence
function Gtk.Gesture:get_last_updated_sequence() end

--- # method Gtk.Gesture:get_point()
---
--- If `sequence` is currently being interpreted by `gesture`, this
--- function returns `true` and fills in `x` and `y` with the last coordinates
--- stored for that event sequence. The coordinates are always relative to the
--- widget allocation.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@param sequence? Gdk.EventSequence # a `GdkEventSequence`, or `nil` for pointer events
---@param x? number # return location for X axis of the sequence coordinates
---@param y? number # return location for Y axis of the sequence coordinates
---@return (boolean|nil) # `true` if `sequence` is currently interpreted
function Gtk.Gesture:get_point(sequence, x, y) end

--- # method Gtk.Gesture:get_sequence_state()
---
--- Returns the `sequence` state, as seen by `gesture`.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@param sequence Gdk.EventSequence # a `GdkEventSequence`
---@return Gtk.EventSequenceState # The sequence state in `gesture`
function Gtk.Gesture:get_sequence_state(sequence) end

--- # method Gtk.Gesture:get_sequences()
---
--- Returns the list of `GdkEventSequences` currently being interpreted
--- by `gesture`.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@return Gdk.EventSequence[] # A list of `GdkEventSequences`, the list elements are owned by GTK+ and must not be freed or modified, the list itself must be deleted through `g_list_free()`
function Gtk.Gesture:get_sequences() end

--- # method Gtk.Gesture:get_window()
---
--- Returns the user-defined window that receives the events
--- handled by `gesture`. See `gtk_gesture_set_window()` for more
--- information.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@return Gdk.Window # the user defined window, or `nil` if none
function Gtk.Gesture:get_window() end

--- # method Gtk.Gesture:group()
---
--- Adds `gesture` to the same group than `group_gesture`. Gestures
--- are by default isolated in their own groups.
--- 
--- When gestures are grouped, the state of `GdkEventSequences`
--- is kept in sync for all of those, so calling `gtk_gesture_set_sequence_state()`,
--- on one will transfer the same value to the others.
--- 
--- Groups also perform an "implicit grabbing" of sequences, if a
--- `GdkEventSequence` state is set to `GTK_EVENT_SEQUENCE_CLAIMED` on one group,
--- every other gesture group attached to the same `GtkWidget` will switch the
--- state for that sequence to `GTK_EVENT_SEQUENCE_DENIED`.
---
--- ---
---
---@param self Gtk.Gesture # `GtkGesture` to group `gesture` with
---@param gesture Gtk.Gesture # a `GtkGesture`
---@return nil
function Gtk.Gesture:group(gesture) end

--- # method Gtk.Gesture:handles_sequence()
---
--- Returns `true` if `gesture` is currently handling events corresponding to
--- `sequence`.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@param sequence? Gdk.EventSequence # a `GdkEventSequence` or `nil`
---@return (boolean|nil) # `true` if `gesture` is handling `sequence`, `false` otherwise
function Gtk.Gesture:handles_sequence(sequence) end

--- # method Gtk.Gesture:is_active()
---
--- Returns `true` if the gesture is currently active.
--- A gesture is active meanwhile there are touch sequences
--- interacting with it.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@return (boolean|nil) # `true` if gesture is active
function Gtk.Gesture:is_active() end

--- # method Gtk.Gesture:is_grouped_with()
---
--- Returns `true` if both gestures pertain to the same group.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@param other Gtk.Gesture # another `GtkGesture`
---@return (boolean|nil) # whether the gestures are grouped
function Gtk.Gesture:is_grouped_with(other) end

--- # method Gtk.Gesture:is_recognized()
---
--- Returns `true` if the gesture is currently recognized.
--- A gesture is recognized if there are as many interacting
--- touch sequences as required by `gesture`, and `GtkGesture`::check
--- returned `true` for the sequences being currently interpreted.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@return (boolean|nil) # `true` if gesture is recognized
function Gtk.Gesture:is_recognized() end

--- # method Gtk.Gesture:set_sequence_state()
---
--- Sets the state of `sequence` in `gesture`. Sequences start
--- in state `GTK_EVENT_SEQUENCE_NONE`, and whenever they change
--- state, they can never go back to that state. Likewise,
--- sequences in state `GTK_EVENT_SEQUENCE_DENIED` cannot turn
--- back to a not denied state. With these rules, the lifetime
--- of an event sequence is constrained to the next four:
--- 
--- * None
--- * None → Denied
--- * None → Claimed
--- * None → Claimed → Denied
--- 
--- Note: Due to event handling ordering, it may be unsafe to
--- set the state on another gesture within a `GtkGesture`::begin
--- signal handler, as the callback might be executed before
--- the other gesture knows about the sequence. A safe way to
--- perform this could be:
--- 
--- ```c
--- static void
--- first_gesture_begin_cb (GtkGesture       *first_gesture,
---                         GdkEventSequence *sequence,
---                         gpointer          user_data)
--- {
---   gtk_gesture_set_sequence_state (first_gesture, sequence, GTK_EVENT_SEQUENCE_CLAIMED);
---   gtk_gesture_set_sequence_state (second_gesture, sequence, GTK_EVENT_SEQUENCE_DENIED);
--- }
--- 
--- static void
--- second_gesture_begin_cb (GtkGesture       *second_gesture,
---                          GdkEventSequence *sequence,
---                          gpointer          user_data)
--- {
---   if (gtk_gesture_get_sequence_state (first_gesture, sequence) == GTK_EVENT_SEQUENCE_CLAIMED)
---     gtk_gesture_set_sequence_state (second_gesture, sequence, GTK_EVENT_SEQUENCE_DENIED);
--- }
--- ```
--- 
--- If both gestures are in the same group, just set the state on
--- the gesture emitting the event, the sequence will be already
--- be initialized to the group's global state when the second
--- gesture processes the event.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@param sequence Gdk.EventSequence # a `GdkEventSequence`
---@param state Gtk.EventSequenceState # the sequence state
---@return (boolean|nil) # `true` if `sequence` is handled by `gesture`, and the state is changed successfully
function Gtk.Gesture:set_sequence_state(sequence, state) end

--- # method Gtk.Gesture:set_state()
---
--- Sets the state of all sequences that `gesture` is currently
--- interacting with. See `gtk_gesture_set_sequence_state()`
--- for more details on sequence states.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@param state Gtk.EventSequenceState # the sequence state
---@return (boolean|nil) # `true` if the state of at least one sequence was changed successfully
function Gtk.Gesture:set_state(state) end

--- # method Gtk.Gesture:set_window()
---
--- Sets a specific window to receive events about, so `gesture`
--- will effectively handle only events targeting `window`, or
--- a child of it. `window` must pertain to `gtk_event_controller_get_widget()`.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@param window? Gdk.Window # a `GdkWindow`, or `nil`
---@return nil
function Gtk.Gesture:set_window(window) end

--- # method Gtk.Gesture:ungroup()
---
--- Separates `gesture` into an isolated group.
---
--- ---
---
---@param self Gtk.Gesture # a `GtkGesture`
---@return nil
function Gtk.Gesture:ungroup() end

--- # record Gtk.GestureClass
---
---@class Gtk.GestureClass
Gtk.GestureClass = {}

--- # class Gtk.GestureDrag
---
--- `GtkGestureDrag` is a `GtkGesture` implementation that recognizes drag
--- operations. The drag operation itself can be tracked throught the
--- `GtkGestureDrag`::drag-begin, `GtkGestureDrag`::drag-update and
--- `GtkGestureDrag`::drag-end signals, or the relevant coordinates be
--- extracted through `gtk_gesture_drag_get_offset()` and
--- `gtk_gesture_drag_get_start_point()`.
---
--- ---
---
---@class Gtk.GestureDrag : Gtk.GestureSingle
---@operator call: Gtk.GestureDrag
Gtk.GestureDrag = {}

--- # method Gtk.GestureDrag:get_offset()
---
--- If the `gesture` is active, this function returns `true` and
--- fills in `x` and `y` with the coordinates of the current point,
--- as an offset to the starting drag point.
---
--- ---
---
---@param self Gtk.GestureDrag # a `GtkGesture`
---@param x? number # X offset for the current point
---@param y? number # Y offset for the current point
---@return (boolean|nil) # `true` if the gesture is active
function Gtk.GestureDrag:get_offset(x, y) end

--- # method Gtk.GestureDrag:get_start_point()
---
--- If the `gesture` is active, this function returns `true`
--- and fills in `x` and `y` with the drag start coordinates,
--- in window-relative coordinates.
---
--- ---
---
---@param self Gtk.GestureDrag # a `GtkGesture`
---@param x? number # X coordinate for the drag start point
---@param y? number # Y coordinate for the drag start point
---@return (boolean|nil) # `true` if the gesture is active
function Gtk.GestureDrag:get_start_point(x, y) end

--- # function Gtk.GestureDrag.new()
---
--- Returns a newly created `GtkGesture` that recognizes drags.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@return Gtk.Gesture # a newly created `GtkGestureDrag`
function Gtk.GestureDrag.new(widget) end

--- # record Gtk.GestureDragClass
---
---@class Gtk.GestureDragClass
Gtk.GestureDragClass = {}

--- # class Gtk.GestureLongPress
---
--- `GtkGestureLongPress` is a `GtkGesture` implementation able to recognize
--- long presses, triggering the `GtkGestureLongPress`::pressed after the
--- timeout is exceeded.
--- 
--- If the touchpoint is lifted before the timeout passes, or if it drifts
--- too far of the initial press point, the `GtkGestureLongPress`::cancelled
--- signal will be emitted.
---
--- ---
---
---@class Gtk.GestureLongPress : Gtk.GestureSingle
---@operator call: Gtk.GestureLongPress
Gtk.GestureLongPress = {}

--- # function Gtk.GestureLongPress.new()
---
--- Returns a newly created `GtkGesture` that recognizes long presses.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@return Gtk.Gesture # a newly created `GtkGestureLongPress`
function Gtk.GestureLongPress.new(widget) end

--- # record Gtk.GestureLongPressClass
---
---@class Gtk.GestureLongPressClass
Gtk.GestureLongPressClass = {}

--- # class Gtk.GestureMultiPress
---
--- `GtkGestureMultiPress` is a `GtkGesture` implementation able to recognize
--- multiple clicks on a nearby zone, which can be listened for through the
--- `GtkGestureMultiPress`::pressed signal. Whenever time or distance between
--- clicks exceed the GTK+ defaults, `GtkGestureMultiPress`::stopped is emitted,
--- and the click counter is reset.
--- 
--- Callers may also restrict the area that is considered valid for a >1
--- touch/button press through `gtk_gesture_multi_press_set_area()`, so any
--- click happening outside that area is considered to be a first click of
--- its own.
---
--- ---
---
---@class Gtk.GestureMultiPress : Gtk.GestureSingle
---@operator call: Gtk.GestureMultiPress
Gtk.GestureMultiPress = {}

--- # method Gtk.GestureMultiPress:get_area()
---
--- If an area was set through `gtk_gesture_multi_press_set_area()`,
--- this function will return `true` and fill in `rect` with the
--- press area. See `gtk_gesture_multi_press_set_area()` for more
--- details on what the press area represents.
---
--- ---
---
---@param self Gtk.GestureMultiPress # a `GtkGestureMultiPress`
---@param rect Gdk.Rectangle # return location for the press area
---@return (boolean|nil) # `true` if `rect` was filled with the press area
function Gtk.GestureMultiPress:get_area(rect) end

--- # method Gtk.GestureMultiPress:set_area()
---
--- If `rect` is non-`nil`, the press area will be checked to be
--- confined within the rectangle, otherwise the button count
--- will be reset so the press is seen as being the first one.
--- If `rect` is `nil`, the area will be reset to an unrestricted
--- state.
--- 
--- Note: The rectangle is only used to determine whether any
--- non-first click falls within the expected area. This is not
--- akin to an input shape.
---
--- ---
---
---@param self Gtk.GestureMultiPress # a `GtkGestureMultiPress`
---@param rect? Gdk.Rectangle # rectangle to receive coordinates on
---@return nil
function Gtk.GestureMultiPress:set_area(rect) end

--- # function Gtk.GestureMultiPress.new()
---
--- Returns a newly created `GtkGesture` that recognizes single and multiple
--- presses.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@return Gtk.Gesture # a newly created `GtkGestureMultiPress`
function Gtk.GestureMultiPress.new(widget) end

--- # record Gtk.GestureMultiPressClass
---
---@class Gtk.GestureMultiPressClass
Gtk.GestureMultiPressClass = {}

--- # class Gtk.GesturePan
---
--- `GtkGesturePan` is a `GtkGesture` implementation able to recognize
--- pan gestures, those are drags that are locked to happen along one
--- axis. The axis that a `GtkGesturePan` handles is defined at
--- construct time, and can be changed through
--- `gtk_gesture_pan_set_orientation()`.
--- 
--- When the gesture starts to be recognized, `GtkGesturePan` will
--- attempt to determine as early as possible whether the sequence
--- is moving in the expected direction, and denying the sequence if
--- this does not happen.
--- 
--- Once a panning gesture along the expected axis is recognized,
--- the `GtkGesturePan`::pan signal will be emitted as input events
--- are received, containing the offset in the given axis.
---
--- ---
---
---@class Gtk.GesturePan : Gtk.GestureDrag
---@operator call: Gtk.GesturePan
Gtk.GesturePan = {}

--- # method Gtk.GesturePan:get_orientation()
---
--- Returns the orientation of the pan gestures that this `gesture` expects.
---
--- ---
---
---@param self Gtk.GesturePan # A `GtkGesturePan`
---@return Gtk.Orientation # the expected orientation for pan gestures
function Gtk.GesturePan:get_orientation() end

--- # method Gtk.GesturePan:set_orientation()
---
--- Sets the orientation to be expected on pan gestures.
---
--- ---
---
---@param self Gtk.GesturePan # A `GtkGesturePan`
---@param orientation Gtk.Orientation # expected orientation
---@return nil
function Gtk.GesturePan:set_orientation(orientation) end

--- # function Gtk.GesturePan.new()
---
--- Returns a newly created `GtkGesture` that recognizes pan gestures.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@param orientation Gtk.Orientation # expected orientation
---@return Gtk.Gesture # a newly created `GtkGesturePan`
function Gtk.GesturePan.new(widget, orientation) end

--- # record Gtk.GesturePanClass
---
---@class Gtk.GesturePanClass
Gtk.GesturePanClass = {}

--- # class Gtk.GestureRotate
---
--- `GtkGestureRotate` is a `GtkGesture` implementation able to recognize
--- 2-finger rotations, whenever the angle between both handled sequences
--- changes, the `GtkGestureRotate`::angle-changed signal is emitted.
---
--- ---
---
---@class Gtk.GestureRotate : Gtk.Gesture
---@operator call: Gtk.GestureRotate
Gtk.GestureRotate = {}

--- # method Gtk.GestureRotate:get_angle_delta()
---
--- If `gesture` is active, this function returns the angle difference
--- in radians since the gesture was first recognized. If `gesture` is
--- not active, 0 is returned.
---
--- ---
---
---@param self Gtk.GestureRotate # a `GtkGestureRotate`
---@return number # the angle delta in radians
function Gtk.GestureRotate:get_angle_delta() end

--- # function Gtk.GestureRotate.new()
---
--- Returns a newly created `GtkGesture` that recognizes 2-touch
--- rotation gestures.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@return Gtk.Gesture # a newly created `GtkGestureRotate`
function Gtk.GestureRotate.new(widget) end

--- # record Gtk.GestureRotateClass
---
---@class Gtk.GestureRotateClass
Gtk.GestureRotateClass = {}

--- # class Gtk.GestureSingle
---
--- `GtkGestureSingle` is a subclass of `GtkGesture`, optimized (although
--- not restricted) for dealing with mouse and single-touch gestures. Under
--- interaction, these gestures stick to the first interacting sequence, which
--- is accessible through `gtk_gesture_single_get_current_sequence()` while the
--- gesture is being interacted with.
--- 
--- By default gestures react to both %GDK_BUTTON_PRIMARY and touch
--- events, `gtk_gesture_single_set_touch_only()` can be used to change the
--- touch behavior. Callers may also specify a different mouse button number
--- to interact with through `gtk_gesture_single_set_button()`, or react to any
--- mouse button by setting 0. While the gesture is active, the button being
--- currently pressed can be known through `gtk_gesture_single_get_current_button()`.
---
--- ---
---
---@class Gtk.GestureSingle : Gtk.Gesture
Gtk.GestureSingle = {}

--- # method Gtk.GestureSingle:get_button()
---
--- Returns the button number `gesture` listens for, or 0 if `gesture`
--- reacts to any button press.
---
--- ---
---
---@param self Gtk.GestureSingle # a `GtkGestureSingle`
---@return integer # The button number, or 0 for any button
function Gtk.GestureSingle:get_button() end

--- # method Gtk.GestureSingle:get_current_button()
---
--- Returns the button number currently interacting with `gesture`, or 0 if there
--- is none.
---
--- ---
---
---@param self Gtk.GestureSingle # a `GtkGestureSingle`
---@return integer # The current button number
function Gtk.GestureSingle:get_current_button() end

--- # method Gtk.GestureSingle:get_current_sequence()
---
--- Returns the event sequence currently interacting with `gesture`.
--- This is only meaningful if `gtk_gesture_is_active()` returns `true`.
---
--- ---
---
---@param self Gtk.GestureSingle # a `GtkGestureSingle`
---@return Gdk.EventSequence # the current sequence
function Gtk.GestureSingle:get_current_sequence() end

--- # method Gtk.GestureSingle:get_exclusive()
---
--- Gets whether a gesture is exclusive. For more information, see
--- `gtk_gesture_single_set_exclusive()`.
---
--- ---
---
---@param self Gtk.GestureSingle # a `GtkGestureSingle`
---@return (boolean|nil) # Whether the gesture is exclusive
function Gtk.GestureSingle:get_exclusive() end

--- # method Gtk.GestureSingle:get_touch_only()
---
--- Returns `true` if the gesture is only triggered by touch events.
---
--- ---
---
---@param self Gtk.GestureSingle # a `GtkGestureSingle`
---@return (boolean|nil) # `true` if the gesture only handles touch events
function Gtk.GestureSingle:get_touch_only() end

--- # method Gtk.GestureSingle:set_button()
---
--- Sets the button number `gesture` listens to. If non-0, every
--- button press from a different button number will be ignored.
--- Touch events implicitly match with button 1.
---
--- ---
---
---@param self Gtk.GestureSingle # a `GtkGestureSingle`
---@param button integer # button number to listen to, or 0 for any button
---@return nil
function Gtk.GestureSingle:set_button(button) end

--- # method Gtk.GestureSingle:set_exclusive()
---
--- Sets whether `gesture` is exclusive. An exclusive gesture will
--- only handle pointer and "pointer emulated" touch events, so at
--- any given time, there is only one sequence able to interact with
--- those.
---
--- ---
---
---@param self Gtk.GestureSingle # a `GtkGestureSingle`
---@param exclusive (boolean|nil) # `true` to make `gesture` exclusive
---@return nil
function Gtk.GestureSingle:set_exclusive(exclusive) end

--- # method Gtk.GestureSingle:set_touch_only()
---
--- If `touch_only` is `true`, `gesture` will only handle events of type
--- `GDK_TOUCH_BEGIN`, `GDK_TOUCH_UPDATE` or `GDK_TOUCH_END`. If `false`,
--- mouse events will be handled too.
---
--- ---
---
---@param self Gtk.GestureSingle # a `GtkGestureSingle`
---@param touch_only (boolean|nil) # whether `gesture` handles only touch events
---@return nil
function Gtk.GestureSingle:set_touch_only(touch_only) end

--- # record Gtk.GestureSingleClass
---
---@class Gtk.GestureSingleClass
Gtk.GestureSingleClass = {}

--- # class Gtk.GestureStylus
---
--- `GtkGestureStylus` is a `GtkGesture` implementation specific to stylus
--- input. The provided signals just provide the basic information
---
--- ---
---
---@class Gtk.GestureStylus : Gtk.GestureSingle
---@operator call: Gtk.GestureStylus
Gtk.GestureStylus = {}

--- # method Gtk.GestureStylus:get_axes()
---
--- Returns the current values for the requested `axes`. This function
--- must be called from either the `GtkGestureStylus`:down,
--- `GtkGestureStylus`:motion, `GtkGestureStylus`:up or `GtkGestureStylus`:proximity
--- signals.
---
--- ---
---
---@param self Gtk.GestureStylus # a GtkGestureStylus
---@param axes unknown[] # array of requested axes, terminated with `GDK_AXIS_IGNORE`
---@param values unknown[] # return location for the axis values
---@return (boolean|nil) # `TRUE` if there is a current value for the axes
function Gtk.GestureStylus:get_axes(axes, values) end

--- # method Gtk.GestureStylus:get_axis()
---
--- Returns the current value for the requested `axis`. This function
--- must be called from either the `GtkGestureStylus`:down,
--- `GtkGestureStylus`:motion, `GtkGestureStylus`:up or `GtkGestureStylus`:proximity
--- signals.
---
--- ---
---
---@param self Gtk.GestureStylus # a `GtkGestureStylus`
---@param axis Gdk.AxisUse # requested device axis
---@param value number # return location for the axis value
---@return (boolean|nil) # `TRUE` if there is a current value for the axis
function Gtk.GestureStylus:get_axis(axis, value) end

--- # method Gtk.GestureStylus:get_device_tool()
---
--- Returns the `GdkDeviceTool` currently driving input through this gesture.
--- This function must be called from either the `GtkGestureStylus`::down,
--- `GtkGestureStylus`::motion, `GtkGestureStylus`::up or `GtkGestureStylus`::proximity
--- signal handlers.
---
--- ---
---
---@param self Gtk.GestureStylus # a `GtkGestureStylus`
---@return Gdk.DeviceTool # The current stylus tool
function Gtk.GestureStylus:get_device_tool() end

--- # function Gtk.GestureStylus.new()
---
--- Creates a new `GtkGestureStylus`.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@return Gtk.Gesture # a newly created stylus gesture
function Gtk.GestureStylus.new(widget) end

--- # record Gtk.GestureStylusClass
---
---@class Gtk.GestureStylusClass
Gtk.GestureStylusClass = {}

--- # class Gtk.GestureSwipe
---
--- `GtkGestureSwipe` is a `GtkGesture` implementation able to recognize
--- swipes, after a press/move/.../move/release sequence happens, the
--- `GtkGestureSwipe`::swipe signal will be emitted, providing the velocity
--- and directionality of the sequence at the time it was lifted.
--- 
--- If the velocity is desired in intermediate points,
--- `gtk_gesture_swipe_get_velocity()` can be called on eg. a
--- `GtkGesture`::update handler.
--- 
--- All velocities are reported in pixels/sec units.
---
--- ---
---
---@class Gtk.GestureSwipe : Gtk.GestureSingle
---@operator call: Gtk.GestureSwipe
Gtk.GestureSwipe = {}

--- # method Gtk.GestureSwipe:get_velocity()
---
--- If the gesture is recognized, this function returns `true` and fill in
--- `velocity_x` and `velocity_y` with the recorded velocity, as per the
--- last event(s) processed.
---
--- ---
---
---@param self Gtk.GestureSwipe # a `GtkGestureSwipe`
---@param velocity_x number # return value for the velocity in the X axis, in pixels/sec
---@param velocity_y number # return value for the velocity in the Y axis, in pixels/sec
---@return (boolean|nil) # whether velocity could be calculated
function Gtk.GestureSwipe:get_velocity(velocity_x, velocity_y) end

--- # function Gtk.GestureSwipe.new()
---
--- Returns a newly created `GtkGesture` that recognizes swipes.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@return Gtk.Gesture # a newly created `GtkGestureSwipe`
function Gtk.GestureSwipe.new(widget) end

--- # record Gtk.GestureSwipeClass
---
---@class Gtk.GestureSwipeClass
Gtk.GestureSwipeClass = {}

--- # class Gtk.GestureZoom
---
--- `GtkGestureZoom` is a `GtkGesture` implementation able to recognize
--- pinch/zoom gestures, whenever the distance between both tracked
--- sequences changes, the `GtkGestureZoom`::scale-changed signal is
--- emitted to report the scale factor.
---
--- ---
---
---@class Gtk.GestureZoom : Gtk.Gesture
---@operator call: Gtk.GestureZoom
Gtk.GestureZoom = {}

--- # method Gtk.GestureZoom:get_scale_delta()
---
--- If `gesture` is active, this function returns the zooming difference
--- since the gesture was recognized (hence the starting point is
--- considered 1:1). If `gesture` is not active, 1 is returned.
---
--- ---
---
---@param self Gtk.GestureZoom # a `GtkGestureZoom`
---@return number # the scale delta
function Gtk.GestureZoom:get_scale_delta() end

--- # function Gtk.GestureZoom.new()
---
--- Returns a newly created `GtkGesture` that recognizes zoom
--- in/out gestures (usually known as pinch/zoom).
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@return Gtk.Gesture # a newly created `GtkGestureZoom`
function Gtk.GestureZoom.new(widget) end

--- # record Gtk.GestureZoomClass
---
---@class Gtk.GestureZoomClass
Gtk.GestureZoomClass = {}

--- # record Gtk.Gradient
---
--- GtkGradient is a boxed type that represents a gradient.
--- It is the result of parsing a
--- [gradient expression][gtkcssprovider-gradients].
--- To obtain the gradient represented by a GtkGradient, it has to
--- be resolved with `gtk_gradient_resolve()`, which replaces all
--- symbolic color references by the colors they refer to (in a given
--- context) and constructs a `cairo_pattern_t` value.
--- 
--- It is not normally necessary to deal directly with `GtkGradients`,
--- since they are mostly used behind the scenes by `GtkStyleContext` and
--- `GtkCssProvider`.
--- 
--- `GtkGradient` is deprecated. It was used internally by GTK’s CSS engine
--- to represent gradients. As its handling is not conforming to modern
--- web standards, it is not used anymore. If you want to use gradients in
--- your own code, please use Cairo directly.
---
--- ---
---
---@class Gtk.Gradient
Gtk.Gradient = {}

--- # method Gtk.Gradient:add_color_stop()
---
--- Adds a stop color to `gradient`.
---
--- ---
---
---@param self Gtk.Gradient # a `GtkGradient`
---@param offset number # offset for the color stop
---@param color Gtk.SymbolicColor # color to use
---@return nil
function Gtk.Gradient:add_color_stop(offset, color) end

--- # method Gtk.Gradient:ref()
---
--- Increases the reference count of `gradient`.
---
--- ---
---
---@param self Gtk.Gradient # a `GtkGradient`
---@return Gtk.Gradient # The same `gradient`
function Gtk.Gradient:ref() end

--- # method Gtk.Gradient:resolve()
---
--- If `gradient` is resolvable, `resolved_gradient` will be filled in
--- with the resolved gradient as a cairo_pattern_t, and `true` will
--- be returned. Generally, if `gradient` can’t be resolved, it is
--- due to it being defined on top of a named color that doesn't
--- exist in `props`.
---
--- ---
---
---@param self Gtk.Gradient # a `GtkGradient`
---@param props Gtk.StyleProperties # `GtkStyleProperties` to use when resolving named colors
---@param resolved_gradient cairo.Pattern # return location for the resolved pattern
---@return (boolean|nil) # `true` if the gradient has been resolved
function Gtk.Gradient:resolve(props, resolved_gradient) end

--- # method Gtk.Gradient:resolve_for_context()
---
---@param self Gtk.Gradient
---@param context Gtk.StyleContext
---@return cairo.Pattern
function Gtk.Gradient:resolve_for_context(context) end

--- # method Gtk.Gradient:to_string()
---
--- Creates a string representation for `gradient` that is suitable
--- for using in GTK CSS files.
---
--- ---
---
---@param self Gtk.Gradient # the gradient to print
---@return string # A string representation for `gradient`
function Gtk.Gradient:to_string() end

--- # method Gtk.Gradient:unref()
---
--- Decreases the reference count of `gradient`, freeing its memory
--- if the reference count reaches 0.
---
--- ---
---
---@param self Gtk.Gradient # a `GtkGradient`
---@return nil
function Gtk.Gradient:unref() end

--- # function Gtk.Gradient.new_linear()
---
--- Creates a new linear gradient along the line defined by (x0, y0) and (x1, y1). Before using the gradient
--- a number of stop colors must be added through `gtk_gradient_add_color_stop()`.
---
--- ---
---
---@param x0 number # X coordinate of the starting point
---@param y0 number # Y coordinate of the starting point
---@param x1 number # X coordinate of the end point
---@param y1 number # Y coordinate of the end point
---@return Gtk.Gradient # A newly created `GtkGradient`
function Gtk.Gradient.new_linear(x0, y0, x1, y1) end

--- # function Gtk.Gradient.new_radial()
---
--- Creates a new radial gradient along the two circles defined by (x0, y0, radius0) and
--- (x1, y1, radius1). Before using the gradient a number of stop colors must be added
--- through `gtk_gradient_add_color_stop()`.
---
--- ---
---
---@param x0 number # X coordinate of the start circle
---@param y0 number # Y coordinate of the start circle
---@param radius0 number # radius of the start circle
---@param x1 number # X coordinate of the end circle
---@param y1 number # Y coordinate of the end circle
---@param radius1 number # radius of the end circle
---@return Gtk.Gradient # A newly created `GtkGradient`
function Gtk.Gradient.new_radial(x0, y0, radius0, x1, y1, radius1) end

--- # class Gtk.Grid
---
--- GtkGrid is a container which arranges its child widgets in
--- rows and columns, with arbitrary positions and horizontal/vertical spans.
--- 
--- Children are added using `gtk_grid_attach()`. They can span multiple
--- rows or columns. It is also possible to add a child next to an
--- existing child, using `gtk_grid_attach_next_to()`. The behaviour of
--- GtkGrid when several children occupy the same grid cell is undefined.
--- 
--- GtkGrid can be used like a `GtkBox` by just using `gtk_container_add()`,
--- which will place children next to each other in the direction determined
--- by the `GtkOrientable`:orientation property. However, if all you want is a
--- single row or column, then `GtkBox` is the preferred widget.
--- 
--- # CSS nodes
--- 
--- GtkGrid uses a single CSS node with name grid.
---
--- ---
---
---@class Gtk.Grid : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field container Gtk.Container
---@field priv Gtk.GridPrivate
---@operator call: Gtk.Grid
Gtk.Grid = {}

--- # method Gtk.Grid:attach()
---
--- Adds a widget to the grid.
--- 
--- The position of `child` is determined by `left` and `top`. The
--- number of “cells” that `child` will occupy is determined by
--- `width` and `height`.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@param child Gtk.Widget # the widget to add
---@param left integer # the column number to attach the left side of `child` to
---@param top integer # the row number to attach the top side of `child` to
---@param width integer # the number of columns that `child` will span
---@param height integer # the number of rows that `child` will span
---@return nil
function Gtk.Grid:attach(child, left, top, width, height) end

--- # method Gtk.Grid:attach_next_to()
---
--- Adds a widget to the grid.
--- 
--- The widget is placed next to `sibling`, on the side determined by
--- `side`. When `sibling` is `nil`, the widget is placed in row (for
--- left or right placement) or column 0 (for top or bottom placement),
--- at the end indicated by `side`.
--- 
--- Attaching widgets labeled [1], [2], [3] with `sibling` == `nil` and
--- `side` == %GTK_POS_LEFT yields a layout of [3][2][1].
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@param child Gtk.Widget # the widget to add
---@param sibling? Gtk.Widget # the child of `grid` that `child` will be placed next to, or `nil` to place `child` at the beginning or end
---@param side Gtk.PositionType # the side of `sibling` that `child` is positioned next to
---@param width integer # the number of columns that `child` will span
---@param height integer # the number of rows that `child` will span
---@return nil
function Gtk.Grid:attach_next_to(child, sibling, side, width, height) end

--- # method Gtk.Grid:get_baseline_row()
---
--- Returns which row defines the global baseline of `grid`.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@return integer # the row index defining the global baseline
function Gtk.Grid:get_baseline_row() end

--- # method Gtk.Grid:get_child_at()
---
--- Gets the child of `grid` whose area covers the grid
--- cell whose upper left corner is at `left`, `top`.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@param left integer # the left edge of the cell
---@param top integer # the top edge of the cell
---@return Gtk.Widget # the child at the given position, or `nil`
function Gtk.Grid:get_child_at(left, top) end

--- # method Gtk.Grid:get_column_homogeneous()
---
--- Returns whether all columns of `grid` have the same width.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@return (boolean|nil) # whether all columns of `grid` have the same width.
function Gtk.Grid:get_column_homogeneous() end

--- # method Gtk.Grid:get_column_spacing()
---
--- Returns the amount of space between the columns of `grid`.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@return integer # the column spacing of `grid`
function Gtk.Grid:get_column_spacing() end

--- # method Gtk.Grid:get_row_baseline_position()
---
--- Returns the baseline position of `row` as set
--- by `gtk_grid_set_row_baseline_position()` or the default value
--- %GTK_BASELINE_POSITION_CENTER.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@param row integer # a row index
---@return Gtk.BaselinePosition # the baseline position of `row`
function Gtk.Grid:get_row_baseline_position(row) end

--- # method Gtk.Grid:get_row_homogeneous()
---
--- Returns whether all rows of `grid` have the same height.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@return (boolean|nil) # whether all rows of `grid` have the same height.
function Gtk.Grid:get_row_homogeneous() end

--- # method Gtk.Grid:get_row_spacing()
---
--- Returns the amount of space between the rows of `grid`.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@return integer # the row spacing of `grid`
function Gtk.Grid:get_row_spacing() end

--- # method Gtk.Grid:insert_column()
---
--- Inserts a column at the specified position.
--- 
--- Children which are attached at or to the right of this position
--- are moved one column to the right. Children which span across this
--- position are grown to span the new column.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@param position integer # the position to insert the column at
---@return nil
function Gtk.Grid:insert_column(position) end

--- # method Gtk.Grid:insert_next_to()
---
--- Inserts a row or column at the specified position.
--- 
--- The new row or column is placed next to `sibling`, on the side
--- determined by `side`. If `side` is %GTK_POS_TOP or %GTK_POS_BOTTOM,
--- a row is inserted. If `side` is %GTK_POS_LEFT of %GTK_POS_RIGHT,
--- a column is inserted.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@param sibling Gtk.Widget # the child of `grid` that the new row or column will be placed next to
---@param side Gtk.PositionType # the side of `sibling` that `child` is positioned next to
---@return nil
function Gtk.Grid:insert_next_to(sibling, side) end

--- # method Gtk.Grid:insert_row()
---
--- Inserts a row at the specified position.
--- 
--- Children which are attached at or below this position
--- are moved one row down. Children which span across this
--- position are grown to span the new row.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@param position integer # the position to insert the row at
---@return nil
function Gtk.Grid:insert_row(position) end

--- # method Gtk.Grid:remove_column()
---
--- Removes a column from the grid.
--- 
--- Children that are placed in this column are removed,
--- spanning children that overlap this column have their
--- width reduced by one, and children after the column
--- are moved to the left.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@param position integer # the position of the column to remove
---@return nil
function Gtk.Grid:remove_column(position) end

--- # method Gtk.Grid:remove_row()
---
--- Removes a row from the grid.
--- 
--- Children that are placed in this row are removed,
--- spanning children that overlap this row have their
--- height reduced by one, and children below the row
--- are moved up.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@param position integer # the position of the row to remove
---@return nil
function Gtk.Grid:remove_row(position) end

--- # method Gtk.Grid:set_baseline_row()
---
--- Sets which row defines the global baseline for the entire grid.
--- Each row in the grid can have its own local baseline, but only
--- one of those is global, meaning it will be the baseline in the
--- parent of the `grid`.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@param row integer # the row index
---@return nil
function Gtk.Grid:set_baseline_row(row) end

--- # method Gtk.Grid:set_column_homogeneous()
---
--- Sets whether all columns of `grid` will have the same width.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@param homogeneous (boolean|nil) # `true` to make columns homogeneous
---@return nil
function Gtk.Grid:set_column_homogeneous(homogeneous) end

--- # method Gtk.Grid:set_column_spacing()
---
--- Sets the amount of space between columns of `grid`.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@param spacing integer # the amount of space to insert between columns
---@return nil
function Gtk.Grid:set_column_spacing(spacing) end

--- # method Gtk.Grid:set_row_baseline_position()
---
--- Sets how the baseline should be positioned on `row` of the
--- grid, in case that row is assigned more space than is requested.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@param row integer # a row index
---@param pos Gtk.BaselinePosition # a `GtkBaselinePosition`
---@return nil
function Gtk.Grid:set_row_baseline_position(row, pos) end

--- # method Gtk.Grid:set_row_homogeneous()
---
--- Sets whether all rows of `grid` will have the same height.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@param homogeneous (boolean|nil) # `true` to make rows homogeneous
---@return nil
function Gtk.Grid:set_row_homogeneous(homogeneous) end

--- # method Gtk.Grid:set_row_spacing()
---
--- Sets the amount of space between rows of `grid`.
---
--- ---
---
---@param self Gtk.Grid # a `GtkGrid`
---@param spacing integer # the amount of space to insert between rows
---@return nil
function Gtk.Grid:set_row_spacing(spacing) end

--- # function Gtk.Grid.new()
---
--- Creates a new grid widget.
---
--- ---
---
---@return Gtk.Widget # the new `GtkGrid`
function Gtk.Grid.new() end

--- # record Gtk.GridClass
---
---@class Gtk.GridClass
---@field parent_class Gtk.ContainerClass # The parent class.
Gtk.GridClass = {}

--- # record Gtk.GridPrivate
---
---@class Gtk.GridPrivate
Gtk.GridPrivate = {}

--- # class Gtk.HBox
---
--- `GtkHBox` is a container that organizes child widgets into a single row.
--- 
--- Use the `GtkBox` packing interface to determine the arrangement,
--- spacing, width, and alignment of `GtkHBox` children.
--- 
--- All children are allocated the same height.
--- 
--- GtkHBox has been deprecated. You can use `GtkBox` instead, which is a
--- very quick and easy change. If you have derived your own classes from
--- GtkHBox, you can simply change the inheritance to derive directly
--- from `GtkBox`. No further changes are needed, since the default
--- value of the `GtkOrientable`:orientation property is
--- %GTK_ORIENTATION_HORIZONTAL.
--- 
--- If you have a grid-like layout composed of nested boxes, and you don’t
--- need first-child or last-child styling, the recommendation is to switch
--- to `GtkGrid`. For more information about migrating to `GtkGrid`, see
--- [Migrating from other containers to GtkGrid][gtk-migrating-GtkGrid].
---
--- ---
---
---@class Gtk.HBox : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field box Gtk.Box
---@operator call: Gtk.HBox
Gtk.HBox = {}

--- # function Gtk.HBox.new()
---
--- Creates a new `GtkHBox`.
---
--- ---
---
---@param homogeneous (boolean|nil) # `true` if all children are to be given equal space allotments.
---@param spacing integer # the number of pixels to place by default between children.
---@return Gtk.Widget # a new `GtkHBox`.
function Gtk.HBox.new(homogeneous, spacing) end

--- # record Gtk.HBoxClass
---
---@class Gtk.HBoxClass
---@field parent_class Gtk.BoxClass
Gtk.HBoxClass = {}

--- # class Gtk.HButtonBox
---
---@class Gtk.HButtonBox : Gtk.ButtonBox, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field button_box Gtk.ButtonBox
---@operator call: Gtk.HButtonBox
Gtk.HButtonBox = {}

--- # function Gtk.HButtonBox.new()
---
--- Creates a new horizontal button box.
---
--- ---
---
---@return Gtk.Widget # a new button box `GtkWidget`.
function Gtk.HButtonBox.new() end

--- # record Gtk.HButtonBoxClass
---
---@class Gtk.HButtonBoxClass
---@field parent_class Gtk.ButtonBoxClass
Gtk.HButtonBoxClass = {}

--- # class Gtk.HPaned
---
--- The HPaned widget is a container widget with two
--- children arranged horizontally. The division between
--- the two panes is adjustable by the user by dragging
--- a handle. See `GtkPaned` for details.
--- 
--- GtkHPaned has been deprecated, use `GtkPaned` instead.
---
--- ---
---
---@class Gtk.HPaned : Gtk.Paned, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field paned Gtk.Paned
---@operator call: Gtk.HPaned
Gtk.HPaned = {}

--- # function Gtk.HPaned.new()
---
--- Create a new `GtkHPaned`
---
--- ---
---
---@return Gtk.Widget # the new `GtkHPaned`
function Gtk.HPaned.new() end

--- # record Gtk.HPanedClass
---
---@class Gtk.HPanedClass
---@field parent_class Gtk.PanedClass
Gtk.HPanedClass = {}

--- # class Gtk.HSV
---
--- `GtkHSV` is the “color wheel” part of a complete color selector widget.
--- It allows to select a color by determining its HSV components in an
--- intuitive way. Moving the selection around the outer ring changes the hue,
--- and moving the selection point inside the inner triangle changes value and
--- saturation.
--- 
--- `GtkHSV` has been deprecated together with `GtkColorSelection`, where
--- it was used.
---
--- ---
---
---@class Gtk.HSV : Gtk.Widget, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent_instance Gtk.Widget
---@field priv Gtk.HSVPrivate
---@operator call: Gtk.HSV
Gtk.HSV = {}

--- # method Gtk.HSV:get_color()
---
--- Queries the current color in an HSV color selector.
--- Returned values will be in the [0.0, 1.0] range.
---
--- ---
---
---@param self Gtk.HSV # An HSV color selector
---@param h number # Return value for the hue
---@param s number # Return value for the saturation
---@param v number # Return value for the value
---@return nil
function Gtk.HSV:get_color(h, s, v) end

--- # method Gtk.HSV:get_metrics()
---
--- Queries the size and ring width of an HSV color selector.
---
--- ---
---
---@param self Gtk.HSV # An HSV color selector
---@param size integer # Return value for the diameter of the hue ring
---@param ring_width integer # Return value for the width of the hue ring
---@return nil
function Gtk.HSV:get_metrics(size, ring_width) end

--- # method Gtk.HSV:is_adjusting()
---
--- An HSV color selector can be said to be adjusting if multiple rapid
--- changes are being made to its value, for example, when the user is
--- adjusting the value with the mouse. This function queries whether
--- the HSV color selector is being adjusted or not.
---
--- ---
---
---@param self Gtk.HSV # A `GtkHSV`
---@return (boolean|nil) # `true` if clients can ignore changes to the color value, since they may be transitory, or `false` if they should consider the color value status to be final.
function Gtk.HSV:is_adjusting() end

--- # method Gtk.HSV:set_color()
---
--- Sets the current color in an HSV color selector.
--- Color component values must be in the [0.0, 1.0] range.
---
--- ---
---
---@param self Gtk.HSV # An HSV color selector
---@param h number # Hue
---@param s number # Saturation
---@param v number # Value
---@return nil
function Gtk.HSV:set_color(h, s, v) end

--- # method Gtk.HSV:set_metrics()
---
--- Sets the size and ring width of an HSV color selector.
---
--- ---
---
---@param self Gtk.HSV # An HSV color selector
---@param size integer # Diameter for the hue ring
---@param ring_width integer # Width of the hue ring
---@return nil
function Gtk.HSV:set_metrics(size, ring_width) end

--- # function Gtk.HSV.to_rgb()
---
--- Converts a color from HSV space to RGB.
--- 
--- Input values must be in the [0.0, 1.0] range;
--- output values will be in the same range.
---
--- ---
---
---@param h number # Hue
---@param s number # Saturation
---@param v number # Value
---@param r number # Return value for the red component
---@param g number # Return value for the green component
---@param b number # Return value for the blue component
---@return nil
function Gtk.HSV.to_rgb(h, s, v, r, g, b) end

--- # function Gtk.HSV.new()
---
--- Creates a new HSV color selector.
---
--- ---
---
---@return Gtk.Widget # A newly-created HSV color selector.
function Gtk.HSV.new() end

--- # record Gtk.HSVClass
---
---@class Gtk.HSVClass
---@field parent_class Gtk.WidgetClass
---@field changed fun(hsv: Gtk.HSV): nil
---@field move fun(hsv: Gtk.HSV, type: Gtk.DirectionType): nil
Gtk.HSVClass = {}

--- # record Gtk.HSVPrivate
---
---@class Gtk.HSVPrivate
Gtk.HSVPrivate = {}

--- # class Gtk.HScale
---
--- The `GtkHScale` widget is used to allow the user to select a value using
--- a horizontal slider. To create one, use `gtk_hscale_new_with_range()`.
--- 
--- The position to show the current value, and the number of decimal places
--- shown can be set using the parent `GtkScale` class’s functions.
--- 
--- GtkHScale has been deprecated, use `GtkScale` instead.
---
--- ---
---
---@class Gtk.HScale : Gtk.Scale, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field scale Gtk.Scale
---@operator call: Gtk.HScale
Gtk.HScale = {}

--- # function Gtk.HScale.new()
---
--- Creates a new `GtkHScale`.
---
--- ---
---
---@param adjustment? Gtk.Adjustment # the `GtkAdjustment` which sets the range of the scale.
---@return Gtk.Widget # a new `GtkHScale`.
function Gtk.HScale.new(adjustment) end

--- # function Gtk.HScale.new_with_range()
---
--- Creates a new horizontal scale widget that lets the user input a
--- number between `min` and `max` (including `min` and `max`) with the
--- increment `step`.  `step` must be nonzero; it’s the distance the
--- slider moves when using the arrow keys to adjust the scale value.
--- 
--- Note that the way in which the precision is derived works best if `step`
--- is a power of ten. If the resulting precision is not suitable for your
--- needs, use `gtk_scale_set_digits()` to correct it.
---
--- ---
---
---@param min number # minimum value
---@param max number # maximum value
---@param step number # step increment (tick size) used with keyboard shortcuts
---@return Gtk.Widget # a new `GtkHScale`
function Gtk.HScale.new_with_range(min, max, step) end

--- # record Gtk.HScaleClass
---
---@class Gtk.HScaleClass
---@field parent_class Gtk.ScaleClass
Gtk.HScaleClass = {}

--- # class Gtk.HScrollbar
---
--- The `GtkHScrollbar` widget is a widget arranged horizontally creating a
--- scrollbar. See `GtkScrollbar` for details on
--- scrollbars. `GtkAdjustment` pointers may be added to handle the
--- adjustment of the scrollbar or it may be left `nil` in which case one
--- will be created for you. See `GtkScrollbar` for a description of what the
--- fields in an adjustment represent for a scrollbar.
--- 
--- GtkHScrollbar has been deprecated, use `GtkScrollbar` instead.
---
--- ---
---
---@class Gtk.HScrollbar : Gtk.Scrollbar, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field scrollbar Gtk.Scrollbar
---@operator call: Gtk.HScrollbar
Gtk.HScrollbar = {}

--- # function Gtk.HScrollbar.new()
---
--- Creates a new horizontal scrollbar.
---
--- ---
---
---@param adjustment? Gtk.Adjustment # the `GtkAdjustment` to use, or `nil` to create a new adjustment
---@return Gtk.Widget # the new `GtkHScrollbar`
function Gtk.HScrollbar.new(adjustment) end

--- # record Gtk.HScrollbarClass
---
---@class Gtk.HScrollbarClass
---@field parent_class Gtk.ScrollbarClass
Gtk.HScrollbarClass = {}

--- # class Gtk.HSeparator
---
--- The `GtkHSeparator` widget is a horizontal separator, used to group the
--- widgets within a window. It displays a horizontal line with a shadow to
--- make it appear sunken into the interface.
--- 
--- > The `GtkHSeparator` widget is not used as a separator within menus.
--- > To create a separator in a menu create an empty `GtkSeparatorMenuItem`
--- > widget using `gtk_separator_menu_item_new()` and add it to the menu with
--- > `gtk_menu_shell_append()`.
--- 
--- GtkHSeparator has been deprecated, use `GtkSeparator` instead.
---
--- ---
---
---@class Gtk.HSeparator : Gtk.Separator, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field separator Gtk.Separator
---@operator call: Gtk.HSeparator
Gtk.HSeparator = {}

--- # function Gtk.HSeparator.new()
---
--- Creates a new `GtkHSeparator`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkHSeparator`.
function Gtk.HSeparator.new() end

--- # record Gtk.HSeparatorClass
---
---@class Gtk.HSeparatorClass
---@field parent_class Gtk.SeparatorClass
Gtk.HSeparatorClass = {}

--- # class Gtk.HandleBox
---
--- The `GtkHandleBox` widget allows a portion of a window to be "torn
--- off". It is a bin widget which displays its child and a handle that
--- the user can drag to tear off a separate window (the “float
--- window”) containing the child widget. A thin
--- “ghost” is drawn in the original location of the
--- handlebox. By dragging the separate window back to its original
--- location, it can be reattached.
--- 
--- When reattaching, the ghost and float window, must be aligned
--- along one of the edges, the “snap edge”.
--- This either can be specified by the application programmer
--- explicitly, or GTK+ will pick a reasonable default based
--- on the handle position.
--- 
--- To make detaching and reattaching the handlebox as minimally confusing
--- as possible to the user, it is important to set the snap edge so that
--- the snap edge does not move when the handlebox is deattached. For
--- instance, if the handlebox is packed at the bottom of a VBox, then
--- when the handlebox is detached, the bottom edge of the handlebox's
--- allocation will remain fixed as the height of the handlebox shrinks,
--- so the snap edge should be set to %GTK_POS_BOTTOM.
--- 
--- > `GtkHandleBox` has been deprecated. It is very specialized, lacks features
--- > to make it useful and most importantly does not fit well into modern
--- > application design. Do not use it. There is no replacement.
---
--- ---
---
---@class Gtk.HandleBox : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field bin Gtk.Bin
---@field priv Gtk.HandleBoxPrivate
---@operator call: Gtk.HandleBox
Gtk.HandleBox = {}

--- # method Gtk.HandleBox:get_child_detached()
---
--- Whether the handlebox’s child is currently detached.
---
--- ---
---
---@param self Gtk.HandleBox # a `GtkHandleBox`
---@return (boolean|nil) # `true` if the child is currently detached, otherwise `false`
function Gtk.HandleBox:get_child_detached() end

--- # method Gtk.HandleBox:get_handle_position()
---
--- Gets the handle position of the handle box. See
--- `gtk_handle_box_set_handle_position()`.
---
--- ---
---
---@param self Gtk.HandleBox # a `GtkHandleBox`
---@return Gtk.PositionType # the current handle position.
function Gtk.HandleBox:get_handle_position() end

--- # method Gtk.HandleBox:get_shadow_type()
---
--- Gets the type of shadow drawn around the handle box. See
--- `gtk_handle_box_set_shadow_type()`.
---
--- ---
---
---@param self Gtk.HandleBox # a `GtkHandleBox`
---@return Gtk.ShadowType # the type of shadow currently drawn around the handle box.
function Gtk.HandleBox:get_shadow_type() end

--- # method Gtk.HandleBox:get_snap_edge()
---
--- Gets the edge used for determining reattachment of the handle box.
--- See `gtk_handle_box_set_snap_edge()`.
---
--- ---
---
---@param self Gtk.HandleBox # a `GtkHandleBox`
---@return Gtk.PositionType # the edge used for determining reattachment, or (GtkPositionType)-1 if this is determined (as per default) from the handle position.
function Gtk.HandleBox:get_snap_edge() end

--- # method Gtk.HandleBox:set_handle_position()
---
--- Sets the side of the handlebox where the handle is drawn.
---
--- ---
---
---@param self Gtk.HandleBox # a `GtkHandleBox`
---@param position Gtk.PositionType # the side of the handlebox where the handle should be drawn.
---@return nil
function Gtk.HandleBox:set_handle_position(position) end

--- # method Gtk.HandleBox:set_shadow_type()
---
--- Sets the type of shadow to be drawn around the border
--- of the handle box.
---
--- ---
---
---@param self Gtk.HandleBox # a `GtkHandleBox`
---@param type Gtk.ShadowType # the shadow type.
---@return nil
function Gtk.HandleBox:set_shadow_type(type) end

--- # method Gtk.HandleBox:set_snap_edge()
---
--- Sets the snap edge of a handlebox. The snap edge is
--- the edge of the detached child that must be aligned
--- with the corresponding edge of the “ghost” left
--- behind when the child was detached to reattach
--- the torn-off window. Usually, the snap edge should
--- be chosen so that it stays in the same place on
--- the screen when the handlebox is torn off.
--- 
--- If the snap edge is not set, then an appropriate value
--- will be guessed from the handle position. If the
--- handle position is %GTK_POS_RIGHT or %GTK_POS_LEFT,
--- then the snap edge will be %GTK_POS_TOP, otherwise
--- it will be %GTK_POS_LEFT.
---
--- ---
---
---@param self Gtk.HandleBox # a `GtkHandleBox`
---@param edge Gtk.PositionType # the snap edge, or -1 to unset the value; in which case GTK+ will try to guess an appropriate value in the future.
---@return nil
function Gtk.HandleBox:set_snap_edge(edge) end

--- # function Gtk.HandleBox.new()
---
--- Create a new handle box.
---
--- ---
---
---@return Gtk.Widget # a new `GtkHandleBox`.
function Gtk.HandleBox.new() end

--- # record Gtk.HandleBoxClass
---
---@class Gtk.HandleBoxClass
---@field parent_class Gtk.BinClass # The parent class.
---@field child_attached fun(handle_box: Gtk.HandleBox, child: Gtk.Widget): nil
---@field child_detached fun(handle_box: Gtk.HandleBox, child: Gtk.Widget): nil
Gtk.HandleBoxClass = {}

--- # record Gtk.HandleBoxPrivate
---
---@class Gtk.HandleBoxPrivate
Gtk.HandleBoxPrivate = {}

--- # class Gtk.HeaderBar
---
--- GtkHeaderBar is similar to a horizontal `GtkBox`. It allows children to
--- be placed at the start or the end. In addition, it allows a title and
--- subtitle to be displayed. The title will be centered with respect to
--- the width of the box, even if the children at either side take up
--- different amounts of space. The height of the titlebar will be
--- set to provide sufficient space for the subtitle, even if none is
--- currently set. If a subtitle is not needed, the space reservation
--- can be turned off with `gtk_header_bar_set_has_subtitle()`.
--- 
--- GtkHeaderBar can add typical window frame controls, such as minimize,
--- maximize and close buttons, or the window icon.
--- 
--- For these reasons, GtkHeaderBar is the natural choice for use as the custom
--- titlebar widget of a `GtkWindow` (see `gtk_window_set_titlebar()`), as it gives
--- features typical of titlebars while allowing the addition of child widgets.
---
--- ---
---
---@class Gtk.HeaderBar : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field container Gtk.Container
---@operator call: Gtk.HeaderBar
Gtk.HeaderBar = {}

--- # method Gtk.HeaderBar:get_custom_title()
---
--- Retrieves the custom title widget of the header. See
--- `gtk_header_bar_set_custom_title()`.
---
--- ---
---
---@param self Gtk.HeaderBar # a `GtkHeaderBar`
---@return Gtk.Widget # the custom title widget of the header, or `nil` if none has been set explicitly.
function Gtk.HeaderBar:get_custom_title() end

--- # method Gtk.HeaderBar:get_decoration_layout()
---
--- Gets the decoration layout set with
--- `gtk_header_bar_set_decoration_layout()`.
---
--- ---
---
---@param self Gtk.HeaderBar # a `GtkHeaderBar`
---@return string # the decoration layout
function Gtk.HeaderBar:get_decoration_layout() end

--- # method Gtk.HeaderBar:get_has_subtitle()
---
--- Retrieves whether the header bar reserves space for
--- a subtitle, regardless if one is currently set or not.
---
--- ---
---
---@param self Gtk.HeaderBar # a `GtkHeaderBar`
---@return (boolean|nil) # `true` if the header bar reserves space for a subtitle
function Gtk.HeaderBar:get_has_subtitle() end

--- # method Gtk.HeaderBar:get_show_close_button()
---
--- Returns whether this header bar shows the standard window
--- decorations.
---
--- ---
---
---@param self Gtk.HeaderBar # a `GtkHeaderBar`
---@return (boolean|nil) # `true` if the decorations are shown
function Gtk.HeaderBar:get_show_close_button() end

--- # method Gtk.HeaderBar:get_subtitle()
---
--- Retrieves the subtitle of the header. See `gtk_header_bar_set_subtitle()`.
---
--- ---
---
---@param self Gtk.HeaderBar # a `GtkHeaderBar`
---@return string # the subtitle of the header, or `nil` if none has been set explicitly. The returned string is owned by the widget and must not be modified or freed.
function Gtk.HeaderBar:get_subtitle() end

--- # method Gtk.HeaderBar:get_title()
---
--- Retrieves the title of the header. See `gtk_header_bar_set_title()`.
---
--- ---
---
---@param self Gtk.HeaderBar # a `GtkHeaderBar`
---@return string # the title of the header, or `nil` if none has been set explicitly. The returned string is owned by the widget and must not be modified or freed.
function Gtk.HeaderBar:get_title() end

--- # method Gtk.HeaderBar:pack_end()
---
--- Adds `child` to `bar`, packed with reference to the
--- end of the `bar`.
---
--- ---
---
---@param self Gtk.HeaderBar # A `GtkHeaderBar`
---@param child Gtk.Widget # the `GtkWidget` to be added to `bar`
---@return nil
function Gtk.HeaderBar:pack_end(child) end

--- # method Gtk.HeaderBar:pack_start()
---
--- Adds `child` to `bar`, packed with reference to the
--- start of the `bar`.
---
--- ---
---
---@param self Gtk.HeaderBar # A `GtkHeaderBar`
---@param child Gtk.Widget # the `GtkWidget` to be added to `bar`
---@return nil
function Gtk.HeaderBar:pack_start(child) end

--- # method Gtk.HeaderBar:set_custom_title()
---
--- Sets a custom title for the `GtkHeaderBar`.
--- 
--- The title should help a user identify the current view. This
--- supersedes any title set by `gtk_header_bar_set_title()` or
--- `gtk_header_bar_set_subtitle()`. To achieve the same style as
--- the builtin title and subtitle, use the “title” and “subtitle”
--- style classes.
--- 
--- You should set the custom title to `nil`, for the header title
--- label to be visible again.
---
--- ---
---
---@param self Gtk.HeaderBar # a `GtkHeaderBar`
---@param title_widget? Gtk.Widget # a custom widget to use for a title
---@return nil
function Gtk.HeaderBar:set_custom_title(title_widget) end

--- # method Gtk.HeaderBar:set_decoration_layout()
---
--- Sets the decoration layout for this header bar, overriding
--- the `GtkSettings`:gtk-decoration-layout setting.
--- 
--- There can be valid reasons for overriding the setting, such
--- as a header bar design that does not allow for buttons to take
--- room on the right, or only offers room for a single close button.
--- Split header bars are another example for overriding the
--- setting.
--- 
--- The format of the string is button names, separated by commas.
--- A colon separates the buttons that should appear on the left
--- from those on the right. Recognized button names are minimize,
--- maximize, close, icon (the window icon) and menu (a menu button
--- for the fallback app menu).
--- 
--- For example, “menu:minimize,maximize,close” specifies a menu
--- on the left, and minimize, maximize and close buttons on the right.
---
--- ---
---
---@param self Gtk.HeaderBar # a `GtkHeaderBar`
---@param layout? string # a decoration layout, or `nil` to unset the layout
---@return nil
function Gtk.HeaderBar:set_decoration_layout(layout) end

--- # method Gtk.HeaderBar:set_has_subtitle()
---
--- Sets whether the header bar should reserve space
--- for a subtitle, even if none is currently set.
---
--- ---
---
---@param self Gtk.HeaderBar # a `GtkHeaderBar`
---@param setting (boolean|nil) # `true` to reserve space for a subtitle
---@return nil
function Gtk.HeaderBar:set_has_subtitle(setting) end

--- # method Gtk.HeaderBar:set_show_close_button()
---
--- Sets whether this header bar shows the standard window decorations,
--- including close, maximize, and minimize.
---
--- ---
---
---@param self Gtk.HeaderBar # a `GtkHeaderBar`
---@param setting (boolean|nil) # `true` to show standard window decorations
---@return nil
function Gtk.HeaderBar:set_show_close_button(setting) end

--- # method Gtk.HeaderBar:set_subtitle()
---
--- Sets the subtitle of the `GtkHeaderBar`. The title should give a user
--- an additional detail to help him identify the current view.
--- 
--- Note that GtkHeaderBar by default reserves room for the subtitle,
--- even if none is currently set. If this is not desired, set the
--- `GtkHeaderBar`:has-subtitle property to `false`.
---
--- ---
---
---@param self Gtk.HeaderBar # a `GtkHeaderBar`
---@param subtitle? string # a subtitle, or `nil`
---@return nil
function Gtk.HeaderBar:set_subtitle(subtitle) end

--- # method Gtk.HeaderBar:set_title()
---
--- Sets the title of the `GtkHeaderBar`. The title should help a user
--- identify the current view. A good title should not include the
--- application name.
---
--- ---
---
---@param self Gtk.HeaderBar # a `GtkHeaderBar`
---@param title? string # a title, or `nil`
---@return nil
function Gtk.HeaderBar:set_title(title) end

--- # function Gtk.HeaderBar.new()
---
--- Creates a new `GtkHeaderBar` widget.
---
--- ---
---
---@return Gtk.Widget # a new `GtkHeaderBar`
function Gtk.HeaderBar.new() end

--- # class Gtk.HeaderBarAccessible
---
---@class Gtk.HeaderBarAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component
---@field parent Gtk.ContainerAccessible
Gtk.HeaderBarAccessible = {}

--- # record Gtk.HeaderBarAccessibleClass
---
---@class Gtk.HeaderBarAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.HeaderBarAccessibleClass = {}

--- # record Gtk.HeaderBarAccessiblePrivate
---
---@class Gtk.HeaderBarAccessiblePrivate
Gtk.HeaderBarAccessiblePrivate = {}

--- # record Gtk.HeaderBarClass
---
---@class Gtk.HeaderBarClass
---@field parent_class Gtk.ContainerClass
Gtk.HeaderBarClass = {}

--- # record Gtk.HeaderBarPrivate
---
---@class Gtk.HeaderBarPrivate
Gtk.HeaderBarPrivate = {}

--- # class Gtk.IMContext
---
--- `GtkIMContext` defines the interface for GTK+ input methods. An input method
--- is used by GTK+ text input widgets like `GtkEntry` to map from key events to
--- Unicode character strings.
--- 
--- The default input method can be set programmatically via the
--- `GtkSettings`:gtk-im-module GtkSettings property. Alternatively, you may set
--- the GTK_IM_MODULE environment variable as documented in
--- [Running GTK+ Applications][gtk-running].
--- 
--- The `GtkEntry` `GtkEntry`:im-module and `GtkTextView` `GtkTextView`:im-module
--- properties may also be used to set input methods for specific widget
--- instances. For instance, a certain entry widget might be expected to contain
--- certain characters which would be easier to input with a certain input
--- method.
--- 
--- An input method may consume multiple key events in sequence and finally
--- output the composed result. This is called preediting, and an input method
--- may provide feedback about this process by displaying the intermediate
--- composition states as preedit text. For instance, the default GTK+ input
--- method implements the input of arbitrary Unicode code points by holding down
--- the Control and Shift keys and then typing “U” followed by the hexadecimal
--- digits of the code point.  When releasing the Control and Shift keys,
--- preediting ends and the character is inserted as text. Ctrl+Shift+u20AC for
--- example results in the € sign.
--- 
--- Additional input methods can be made available for use by GTK+ widgets as
--- loadable modules. An input method module is a small shared library which
--- implements a subclass of `GtkIMContext` or `GtkIMContextSimple` and exports
--- these four functions:
--- 
--- ```c
--- void im_module_init(GTypeModule *module);
--- ```
--- This function should register the `GType` of the `GtkIMContext` subclass which
--- implements the input method by means of `g_type_module_register_type()`. Note
--- that `g_type_register_static()` cannot be used as the type needs to be
--- registered dynamically.
--- 
--- ```c
--- void im_module_exit(void);
--- ```
--- Here goes any cleanup code your input method might require on module unload.
--- 
--- ```c
--- void im_module_list(const GtkIMContextInfo ***contexts, int *n_contexts)
--- {
---   *contexts = info_list;
---   *n_contexts = G_N_ELEMENTS (info_list);
--- }
--- ```
--- This function returns the list of input methods provided by the module. The
--- example implementation above shows a common solution and simply returns a
--- pointer to statically defined array of `GtkIMContextInfo` items for each
--- provided input method.
--- 
--- ```c
--- GtkIMContext * im_module_create(const gchar *context_id);
--- ```
--- This function should return a pointer to a newly created instance of the
--- `GtkIMContext` subclass identified by `context_id`. The context ID is the same
--- as specified in the `GtkIMContextInfo` array returned by `im_module_list()`.
--- 
--- After a new loadable input method module has been installed on the system,
--- the configuration file `gtk.immodules` needs to be
--- regenerated by [gtk-query-immodules-3.0][gtk-query-immodules-3.0],
--- in order for the new input method to become available to GTK+ applications.
---
--- ---
---
---@class Gtk.IMContext : GObject.Object
---@field parent_instance GObject.Object
Gtk.IMContext = {}

--- # method Gtk.IMContext:delete_surrounding()
---
--- Asks the widget that the input context is attached to to delete
--- characters around the cursor position by emitting the
--- GtkIMContext::delete_surrounding signal. Note that `offset` and `n_chars`
--- are in characters not in bytes which differs from the usage other
--- places in `GtkIMContext`.
--- 
--- In order to use this function, you should first call
--- `gtk_im_context_get_surrounding()` to get the current context, and
--- call this function immediately afterwards to make sure that you
--- know what you are deleting. You should also account for the fact
--- that even if the signal was handled, the input context might not
--- have deleted all the characters that were requested to be deleted.
--- 
--- This function is used by an input method that wants to make
--- subsitutions in the existing text in response to new input. It is
--- not useful for applications.
---
--- ---
---
---@param self Gtk.IMContext # a `GtkIMContext`
---@param offset integer # offset from cursor position in chars; a negative value means start before the cursor.
---@param n_chars integer # number of characters to delete.
---@return (boolean|nil) # `true` if the signal was handled.
function Gtk.IMContext:delete_surrounding(offset, n_chars) end

--- # method Gtk.IMContext:filter_keypress()
---
--- Allow an input method to internally handle key press and release
--- events. If this function returns `true`, then no further processing
--- should be done for this key event.
---
--- ---
---
---@param self Gtk.IMContext # a `GtkIMContext`
---@param event Gdk.EventKey # the key event
---@return (boolean|nil) # `true` if the input method handled the key event.
function Gtk.IMContext:filter_keypress(event) end

--- # method Gtk.IMContext:focus_in()
---
--- Notify the input method that the widget to which this
--- input context corresponds has gained focus. The input method
--- may, for example, change the displayed feedback to reflect
--- this change.
---
--- ---
---
---@param self Gtk.IMContext # a `GtkIMContext`
---@return nil
function Gtk.IMContext:focus_in() end

--- # method Gtk.IMContext:focus_out()
---
--- Notify the input method that the widget to which this
--- input context corresponds has lost focus. The input method
--- may, for example, change the displayed feedback or reset the contexts
--- state to reflect this change.
---
--- ---
---
---@param self Gtk.IMContext # a `GtkIMContext`
---@return nil
function Gtk.IMContext:focus_out() end

--- # method Gtk.IMContext:get_preedit_string()
---
--- Retrieve the current preedit string for the input context,
--- and a list of attributes to apply to the string.
--- This string should be displayed inserted at the insertion
--- point.
---
--- ---
---
---@param self Gtk.IMContext # a `GtkIMContext`
---@param str string # location to store the retrieved string. The string retrieved must be freed with `g_free()`.
---@param attrs Pango.AttrList # location to store the retrieved attribute list. When you are done with this list, you must unreference it with `pango_attr_list_unref()`.
---@param cursor_pos integer # location to store position of cursor (in characters) within the preedit string.
---@return nil
function Gtk.IMContext:get_preedit_string(str, attrs, cursor_pos) end

--- # method Gtk.IMContext:get_surrounding()
---
--- Retrieves context around the insertion point. Input methods
--- typically want context in order to constrain input text based on
--- existing text; this is important for languages such as Thai where
--- only some sequences of characters are allowed.
--- 
--- This function is implemented by emitting the
--- GtkIMContext::retrieve_surrounding signal on the input method; in
--- response to this signal, a widget should provide as much context as
--- is available, up to an entire paragraph, by calling
--- `gtk_im_context_set_surrounding()`. Note that there is no obligation
--- for a widget to respond to the ::retrieve_surrounding signal, so input
--- methods must be prepared to function without context.
---
--- ---
---
---@param self Gtk.IMContext # a `GtkIMContext`
---@param text string # location to store a UTF-8 encoded string of text holding context around the insertion point. If the function returns `true`, then you must free the result stored in this location with `g_free()`.
---@param cursor_index integer # location to store byte index of the insertion cursor within `text`.
---@return (boolean|nil) # `true` if surrounding text was provided; in this case you must free the result stored in *text.
function Gtk.IMContext:get_surrounding(text, cursor_index) end

--- # method Gtk.IMContext:reset()
---
--- Notify the input method that a change such as a change in cursor
--- position has been made. This will typically cause the input
--- method to clear the preedit state.
---
--- ---
---
---@param self Gtk.IMContext # a `GtkIMContext`
---@return nil
function Gtk.IMContext:reset() end

--- # method Gtk.IMContext:set_client_window()
---
--- Set the client window for the input context; this is the
--- `GdkWindow` in which the input appears. This window is
--- used in order to correctly position status windows, and may
--- also be used for purposes internal to the input method.
---
--- ---
---
---@param self Gtk.IMContext # a `GtkIMContext`
---@param window? Gdk.Window # the client window. This may be `nil` to indicate that the previous client window no longer exists.
---@return nil
function Gtk.IMContext:set_client_window(window) end

--- # method Gtk.IMContext:set_cursor_location()
---
--- Notify the input method that a change in cursor
--- position has been made. The location is relative to the client
--- window.
---
--- ---
---
---@param self Gtk.IMContext # a `GtkIMContext`
---@param area Gdk.Rectangle # new location
---@return nil
function Gtk.IMContext:set_cursor_location(area) end

--- # method Gtk.IMContext:set_surrounding()
---
--- Sets surrounding context around the insertion point and preedit
--- string. This function is expected to be called in response to the
--- GtkIMContext::retrieve_surrounding signal, and will likely have no
--- effect if called at other times.
---
--- ---
---
---@param self Gtk.IMContext # a `GtkIMContext`
---@param text string # text surrounding the insertion point, as UTF-8. the preedit string should not be included within `text`.
---@param len integer # the length of `text`, or -1 if `text` is nul-terminated
---@param cursor_index integer # the byte index of the insertion cursor within `text`.
---@return nil
function Gtk.IMContext:set_surrounding(text, len, cursor_index) end

--- # method Gtk.IMContext:set_use_preedit()
---
--- Sets whether the IM context should use the preedit string
--- to display feedback. If `use_preedit` is FALSE (default
--- is TRUE), then the IM context may use some other method to display
--- feedback, such as displaying it in a child of the root window.
---
--- ---
---
---@param self Gtk.IMContext # a `GtkIMContext`
---@param use_preedit (boolean|nil) # whether the IM context should use the preedit string.
---@return nil
function Gtk.IMContext:set_use_preedit(use_preedit) end

--- # record Gtk.IMContextClass
---
---@class Gtk.IMContextClass
---@field parent_class GObject.ObjectClass
---@field preedit_start fun(context: Gtk.IMContext): nil
---@field preedit_end fun(context: Gtk.IMContext): nil
---@field preedit_changed fun(context: Gtk.IMContext): nil
---@field commit fun(context: Gtk.IMContext, str: string): nil
---@field retrieve_surrounding fun(context: Gtk.IMContext): (boolean|nil)
---@field delete_surrounding fun(context: Gtk.IMContext, offset: integer, n_chars: integer): (boolean|nil)
---@field set_client_window fun(context: Gtk.IMContext, window: Gdk.Window): nil
---@field get_preedit_string fun(context: Gtk.IMContext, str: string, attrs: Pango.AttrList, cursor_pos: integer): nil
---@field filter_keypress fun(context: Gtk.IMContext, event: Gdk.EventKey): (boolean|nil)
---@field focus_in fun(context: Gtk.IMContext): nil
---@field focus_out fun(context: Gtk.IMContext): nil
---@field reset fun(context: Gtk.IMContext): nil
---@field set_cursor_location fun(context: Gtk.IMContext, area: Gdk.Rectangle): nil
---@field set_use_preedit fun(context: Gtk.IMContext, use_preedit: (boolean|nil)): nil
---@field set_surrounding fun(context: Gtk.IMContext, text: string, len: integer, cursor_index: integer): nil
---@field get_surrounding fun(context: Gtk.IMContext, text: string, cursor_index: integer): (boolean|nil)
Gtk.IMContextClass = {}

--- # record Gtk.IMContextInfo
---
--- Bookkeeping information about a loadable input method.
---
--- ---
---
---@class Gtk.IMContextInfo
---@field context_id string # The unique identification string of the input method.
---@field context_name string # The human-readable name of the input method.
---@field domain string # Translation domain to be used with `dgettext()`
---@field domain_dirname string # Name of locale directory for use with `bindtextdomain()`
---@field default_locales string # A colon-separated list of locales where this input method should be the default. The asterisk “*” sets the default for all locales.
Gtk.IMContextInfo = {}

--- # class Gtk.IMContextSimple
---
--- GtkIMContextSimple is a simple input method context supporting table-based
--- input methods. It has a built-in table of compose sequences that is derived
--- from the X11 Compose files.
--- 
--- GtkIMContextSimple reads additional compose sequences from the first of the
--- following files that is found: ~/.config/gtk-3.0/Compose, ~/.XCompose,
--- /usr/share/X11/locale/$locale/Compose (for locales that have a nontrivial
--- Compose file). The syntax of these files is described in the Compose(5)
--- manual page.
--- 
--- ## Unicode characters
--- 
--- GtkIMContextSimple also supports numeric entry of Unicode characters
--- by typing Ctrl-Shift-u, followed by a hexadecimal Unicode codepoint.
--- For example, Ctrl-Shift-u 1 2 3 Enter yields U+0123 LATIN SMALL LETTER
--- G WITH CEDILLA, i.e. ģ.
---
--- ---
---
---@class Gtk.IMContextSimple : Gtk.IMContext
---@field object Gtk.IMContext
---@field priv Gtk.IMContextSimplePrivate
---@operator call: Gtk.IMContextSimple
Gtk.IMContextSimple = {}

--- # method Gtk.IMContextSimple:add_compose_file()
---
--- Adds an additional table from the X11 compose file.
---
--- ---
---
---@param self Gtk.IMContextSimple # A `GtkIMContextSimple`
---@param compose_file string # The path of compose file
---@return nil
function Gtk.IMContextSimple:add_compose_file(compose_file) end

--- # function Gtk.IMContextSimple.new()
---
--- Creates a new `GtkIMContextSimple`.
---
--- ---
---
---@return Gtk.IMContext # a new `GtkIMContextSimple`.
function Gtk.IMContextSimple.new() end

--- # record Gtk.IMContextSimpleClass
---
---@class Gtk.IMContextSimpleClass
---@field parent_class Gtk.IMContextClass
Gtk.IMContextSimpleClass = {}

--- # record Gtk.IMContextSimplePrivate
---
---@class Gtk.IMContextSimplePrivate
Gtk.IMContextSimplePrivate = {}

--- # class Gtk.IMMulticontext
---
---@class Gtk.IMMulticontext : Gtk.IMContext
---@field object Gtk.IMContext
---@field priv Gtk.IMMulticontextPrivate
---@operator call: Gtk.IMMulticontext
Gtk.IMMulticontext = {}

--- # method Gtk.IMMulticontext:append_menuitems()
---
--- Add menuitems for various available input methods to a menu;
--- the menuitems, when selected, will switch the input method
--- for the context and the global default input method.
---
--- ---
---
---@param self Gtk.IMMulticontext # a `GtkIMMulticontext`
---@param menushell Gtk.MenuShell # a `GtkMenuShell`
---@return nil
function Gtk.IMMulticontext:append_menuitems(menushell) end

--- # method Gtk.IMMulticontext:get_context_id()
---
--- Gets the id of the currently active slave of the `context`.
---
--- ---
---
---@param self Gtk.IMMulticontext # a `GtkIMMulticontext`
---@return string # the id of the currently active slave
function Gtk.IMMulticontext:get_context_id() end

--- # method Gtk.IMMulticontext:set_context_id()
---
--- Sets the context id for `context`.
--- 
--- This causes the currently active slave of `context` to be
--- replaced by the slave corresponding to the new context id.
---
--- ---
---
---@param self Gtk.IMMulticontext # a `GtkIMMulticontext`
---@param context_id string # the id to use
---@return nil
function Gtk.IMMulticontext:set_context_id(context_id) end

--- # function Gtk.IMMulticontext.new()
---
--- Creates a new `GtkIMMulticontext`.
---
--- ---
---
---@return Gtk.IMContext # a new `GtkIMMulticontext`.
function Gtk.IMMulticontext.new() end

--- # record Gtk.IMMulticontextClass
---
---@class Gtk.IMMulticontextClass
---@field parent_class Gtk.IMContextClass
Gtk.IMMulticontextClass = {}

--- # record Gtk.IMMulticontextPrivate
---
---@class Gtk.IMMulticontextPrivate
Gtk.IMMulticontextPrivate = {}

---@enum Gtk.IMPreeditStyle
Gtk.IMPreeditStyle = {}

---@enum Gtk.IMStatusStyle
Gtk.IMStatusStyle = {}

--- # class Gtk.IconFactory
---
--- An icon factory manages a collection of `GtkIconSet`; a `GtkIconSet` manages a
--- set of variants of a particular icon (i.e. a `GtkIconSet` contains variants for
--- different sizes and widget states). Icons in an icon factory are named by a
--- stock ID, which is a simple string identifying the icon. Each `GtkStyle` has a
--- list of `GtkIconFactory` derived from the current theme; those icon factories
--- are consulted first when searching for an icon. If the theme doesn’t set a
--- particular icon, GTK+ looks for the icon in a list of default icon factories,
--- maintained by `gtk_icon_factory_add_default()` and
--- `gtk_icon_factory_remove_default()`. Applications with icons should add a default
--- icon factory with their icons, which will allow themes to override the icons
--- for the application.
--- 
--- To display an icon, always use `gtk_style_lookup_icon_set()` on the widget that
--- will display the icon, or the convenience function
--- `gtk_widget_render_icon()`. These functions take the theme into account when
--- looking up the icon to use for a given stock ID.
--- 
--- # GtkIconFactory as GtkBuildable # {`GtkIconFactory`-BUILDER-UI}
--- 
--- GtkIconFactory supports a custom `<sources>` element, which can contain
--- multiple `<source>` elements. The following attributes are allowed:
--- 
--- - stock-id
--- 
---     The stock id of the source, a string. This attribute is
---     mandatory
--- 
--- - filename
--- 
---     The filename of the source, a string.  This attribute is
---     optional
--- 
--- - icon-name
--- 
---     The icon name for the source, a string.  This attribute is
---     optional.
--- 
--- - size
--- 
---     Size of the icon, a `GtkIconSize` enum value.  This attribute is
---     optional.
--- 
--- - direction
--- 
---     Direction of the source, a `GtkTextDirection` enum value.  This
---     attribute is optional.
--- 
--- - state
--- 
---     State of the source, a `GtkStateType` enum value.  This
---     attribute is optional.
--- 
--- 
--- ## A `GtkIconFactory` UI definition fragment. ##
--- 
--- ```c
--- <object class="GtkIconFactory" id="iconfactory1">
---   <sources>
---     <source stock-id="apple-red" filename="apple-red.png"/>
---   </sources>
--- </object>
--- <object class="GtkWindow" id="window1">
---   <child>
---     <object class="GtkButton" id="apple_button">
---       <property name="label">apple-red</property>
---       <property name="use-stock">True</property>
---     </object>
---   </child>
--- </object>
--- ```
---
--- ---
---
---@class Gtk.IconFactory : GObject.Object, Gtk.Buildable
---@field parent_instance GObject.Object
---@field priv Gtk.IconFactoryPrivate
---@operator call: Gtk.IconFactory
Gtk.IconFactory = {}

--- # method Gtk.IconFactory:add()
---
--- Adds the given `icon_set` to the icon factory, under the name
--- `stock_id`.  `stock_id` should be namespaced for your application,
--- e.g. “myapp-whatever-icon”.  Normally applications create a
--- `GtkIconFactory`, then add it to the list of default factories with
--- `gtk_icon_factory_add_default()`. Then they pass the `stock_id` to
--- widgets such as `GtkImage` to display the icon. Themes can provide
--- an icon with the same name (such as "myapp-whatever-icon") to
--- override your application’s default icons. If an icon already
--- existed in `factory` for `stock_id`, it is unreferenced and replaced
--- with the new `icon_set`.
---
--- ---
---
---@param self Gtk.IconFactory # a `GtkIconFactory`
---@param stock_id string # icon name
---@param icon_set Gtk.IconSet # icon set
---@return nil
function Gtk.IconFactory:add(stock_id, icon_set) end

--- # method Gtk.IconFactory:add_default()
---
--- Adds an icon factory to the list of icon factories searched by
--- `gtk_style_lookup_icon_set()`. This means that, for example,
--- `gtk_image_new_from_stock()` will be able to find icons in `factory`.
--- There will normally be an icon factory added for each library or
--- application that comes with icons. The default icon factories
--- can be overridden by themes.
---
--- ---
---
---@param self Gtk.IconFactory # a `GtkIconFactory`
---@return nil
function Gtk.IconFactory:add_default() end

--- # method Gtk.IconFactory:lookup()
---
--- Looks up `stock_id` in the icon factory, returning an icon set
--- if found, otherwise `nil`. For display to the user, you should
--- use `gtk_style_lookup_icon_set()` on the `GtkStyle` for the
--- widget that will display the icon, instead of using this
--- function directly, so that themes are taken into account.
---
--- ---
---
---@param self Gtk.IconFactory # a `GtkIconFactory`
---@param stock_id string # an icon name
---@return Gtk.IconSet # icon set of `stock_id`.
function Gtk.IconFactory:lookup(stock_id) end

--- # method Gtk.IconFactory:remove_default()
---
--- Removes an icon factory from the list of default icon
--- factories. Not normally used; you might use it for a library that
--- can be unloaded or shut down.
---
--- ---
---
---@param self Gtk.IconFactory # a `GtkIconFactory` previously added with `gtk_icon_factory_add_default()`
---@return nil
function Gtk.IconFactory:remove_default() end

--- # function Gtk.IconFactory.lookup_default()
---
--- Looks for an icon in the list of default icon factories.  For
--- display to the user, you should use `gtk_style_lookup_icon_set()` on
--- the `GtkStyle` for the widget that will display the icon, instead of
--- using this function directly, so that themes are taken into
--- account.
---
--- ---
---
---@param stock_id string # an icon name
---@return Gtk.IconSet # a `GtkIconSet`, or `nil`
function Gtk.IconFactory.lookup_default(stock_id) end

--- # function Gtk.IconFactory.new()
---
--- Creates a new `GtkIconFactory`. An icon factory manages a collection
--- of `GtkIconSets`; a `GtkIconSet` manages a set of variants of a
--- particular icon (i.e. a `GtkIconSet` contains variants for different
--- sizes and widget states). Icons in an icon factory are named by a
--- stock ID, which is a simple string identifying the icon. Each
--- `GtkStyle` has a list of `GtkIconFactorys` derived from the current
--- theme; those icon factories are consulted first when searching for
--- an icon. If the theme doesn’t set a particular icon, GTK+ looks for
--- the icon in a list of default icon factories, maintained by
--- `gtk_icon_factory_add_default()` and
--- `gtk_icon_factory_remove_default()`. Applications with icons should
--- add a default icon factory with their icons, which will allow
--- themes to override the icons for the application.
---
--- ---
---
---@return Gtk.IconFactory # a new `GtkIconFactory`
function Gtk.IconFactory.new() end

--- # record Gtk.IconFactoryClass
---
---@class Gtk.IconFactoryClass
---@field parent_class GObject.ObjectClass # The parent class.
Gtk.IconFactoryClass = {}

--- # record Gtk.IconFactoryPrivate
---
---@class Gtk.IconFactoryPrivate
Gtk.IconFactoryPrivate = {}

--- # class Gtk.IconInfo
---
--- Contains information found when looking up an icon in
--- an icon theme.
---
--- ---
---
---@class Gtk.IconInfo : GObject.Object
Gtk.IconInfo = {}

--- # method Gtk.IconInfo:get_attach_points()
---
--- This function is deprecated and always returns `false`.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo`
---@param points? unknown[] # location to store pointer to an array of points, or `nil` free the array of points with `g_free()`.
---@param n_points? integer # location to store the number of points in `points`, or `nil`
---@return (boolean|nil) # `false`
function Gtk.IconInfo:get_attach_points(points, n_points) end

--- # method Gtk.IconInfo:get_base_scale()
---
--- Gets the base scale for the icon. The base scale is a scale
--- for the icon that was specified by the icon theme creator.
--- For instance an icon drawn for a high-dpi screen with window
--- scale 2 for a base size of 32 will be 64 pixels tall and have
--- a base scale of 2.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo`
---@return integer # the base scale
function Gtk.IconInfo:get_base_scale() end

--- # method Gtk.IconInfo:get_base_size()
---
--- Gets the base size for the icon. The base size
--- is a size for the icon that was specified by
--- the icon theme creator. This may be different
--- than the actual size of image; an example of
--- this is small emblem icons that can be attached
--- to a larger icon. These icons will be given
--- the same base size as the larger icons to which
--- they are attached.
--- 
--- Note that for scaled icons the base size does
--- not include the base scale.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo`
---@return integer # the base size, or 0, if no base size is known for the icon.
function Gtk.IconInfo:get_base_size() end

--- # method Gtk.IconInfo:get_builtin_pixbuf()
---
--- Gets the built-in image for this icon, if any. To allow GTK+ to use
--- built in icon images, you must pass the %GTK_ICON_LOOKUP_USE_BUILTIN
--- to `gtk_icon_theme_lookup_icon()`.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo`
---@return GdkPixbuf.Pixbuf # the built-in image pixbuf, or `nil`. No extra reference is added to the returned pixbuf, so if you want to keep it around, you must use `g_object_ref()`. The returned image must not be modified.
function Gtk.IconInfo:get_builtin_pixbuf() end

--- # method Gtk.IconInfo:get_display_name()
---
--- This function is deprecated and always returns `nil`.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo`
---@return string # `nil`
function Gtk.IconInfo:get_display_name() end

--- # method Gtk.IconInfo:get_embedded_rect()
---
--- This function is deprecated and always returns `false`.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo`
---@param rectangle Gdk.Rectangle # `GdkRectangle` in which to store embedded rectangle coordinates; coordinates are only stored when this function returns `true`.
---@return (boolean|nil) # `false`
function Gtk.IconInfo:get_embedded_rect(rectangle) end

--- # method Gtk.IconInfo:get_filename()
---
--- Gets the filename for the icon. If the %GTK_ICON_LOOKUP_USE_BUILTIN
--- flag was passed to `gtk_icon_theme_lookup_icon()`, there may be no
--- filename if a builtin icon is returned; in this case, you should
--- use `gtk_icon_info_get_builtin_pixbuf()`.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo`
---@return string # the filename for the icon, or `nil` if `gtk_icon_info_get_builtin_pixbuf()` should be used instead. The return value is owned by GTK+ and should not be modified or freed.
function Gtk.IconInfo:get_filename() end

--- # method Gtk.IconInfo:is_symbolic()
---
--- Checks if the icon is symbolic or not. This currently uses only
--- the file name and not the file contents for determining this.
--- This behaviour may change in the future.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo`
---@return (boolean|nil) # `true` if the icon is symbolic, `false` otherwise
function Gtk.IconInfo:is_symbolic() end

--- # method Gtk.IconInfo:load_icon()
---
--- Renders an icon previously looked up in an icon theme using
--- `gtk_icon_theme_lookup_icon()`; the size will be based on the size
--- passed to `gtk_icon_theme_lookup_icon()`. Note that the resulting
--- pixbuf may not be exactly this size; an icon theme may have icons
--- that differ slightly from their nominal sizes, and in addition GTK+
--- will avoid scaling icons that it considers sufficiently close to the
--- requested size or for which the source image would have to be scaled
--- up too far. (This maintains sharpness.). This behaviour can be changed
--- by passing the %GTK_ICON_LOOKUP_FORCE_SIZE flag when obtaining
--- the `GtkIconInfo`. If this flag has been specified, the pixbuf
--- returned by this function will be scaled to the exact size.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo` from `gtk_icon_theme_lookup_icon()`
---@return GdkPixbuf.Pixbuf # the rendered icon; this may be a newly created icon or a new reference to an internal icon, so you must not modify the icon. Use `g_object_unref()` to release your reference to the icon.
function Gtk.IconInfo:load_icon() end

--- # method Gtk.IconInfo:load_icon_async()
---
--- Asynchronously load, render and scale an icon previously looked up
--- from the icon theme using `gtk_icon_theme_lookup_icon()`.
--- 
--- For more details, see `gtk_icon_info_load_icon()` which is the synchronous
--- version of this call.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo` from `gtk_icon_theme_lookup_icon()`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gtk.IconInfo:load_icon_async(cancellable, callback, user_data) end

--- # method Gtk.IconInfo:load_icon_finish()
---
--- Finishes an async icon load, see `gtk_icon_info_load_icon_async()`.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo` from `gtk_icon_theme_lookup_icon()`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@return GdkPixbuf.Pixbuf # the rendered icon; this may be a newly created icon or a new reference to an internal icon, so you must not modify the icon. Use `g_object_unref()` to release your reference to the icon.
function Gtk.IconInfo:load_icon_finish(res) end

--- # method Gtk.IconInfo:load_surface()
---
--- Renders an icon previously looked up in an icon theme using
--- `gtk_icon_theme_lookup_icon()`; the size will be based on the size
--- passed to `gtk_icon_theme_lookup_icon()`. Note that the resulting
--- surface may not be exactly this size; an icon theme may have icons
--- that differ slightly from their nominal sizes, and in addition GTK+
--- will avoid scaling icons that it considers sufficiently close to the
--- requested size or for which the source image would have to be scaled
--- up too far. (This maintains sharpness.). This behaviour can be changed
--- by passing the %GTK_ICON_LOOKUP_FORCE_SIZE flag when obtaining
--- the `GtkIconInfo`. If this flag has been specified, the pixbuf
--- returned by this function will be scaled to the exact size.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo` from `gtk_icon_theme_lookup_icon()`
---@param for_window? Gdk.Window # `GdkWindow` to optimize drawing for, or `nil`
---@return cairo.Surface # the rendered icon; this may be a newly created icon or a new reference to an internal icon, so you must not modify the icon. Use `cairo_surface_destroy()` to release your reference to the icon.
function Gtk.IconInfo:load_surface(for_window) end

--- # method Gtk.IconInfo:load_symbolic()
---
--- Loads an icon, modifying it to match the system colours for the foreground,
--- success, warning and error colors provided. If the icon is not a symbolic
--- one, the function will return the result from `gtk_icon_info_load_icon()`.
--- 
--- This allows loading symbolic icons that will match the system theme.
--- 
--- Unless you are implementing a widget, you will want to use
--- `g_themed_icon_new_with_default_fallbacks()` to load the icon.
--- 
--- As implementation details, the icon loaded needs to be of SVG type,
--- contain the “symbolic” term as the last component of the icon name,
--- and use the “fg”, “success”, “warning” and “error” CSS styles in the
--- SVG file itself.
--- 
--- See the [Symbolic Icons Specification](http://www.freedesktop.org/wiki/SymbolicIcons)
--- for more information about symbolic icons.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo`
---@param fg Gdk.RGBA # a `GdkRGBA` representing the foreground color of the icon
---@param success_color? Gdk.RGBA # a `GdkRGBA` representing the warning color of the icon or `nil` to use the default color
---@param warning_color? Gdk.RGBA # a `GdkRGBA` representing the warning color of the icon or `nil` to use the default color
---@param error_color? Gdk.RGBA # a `GdkRGBA` representing the error color of the icon or `nil` to use the default color (allow-none)
---@param was_symbolic? (boolean|nil) # a `gboolean`, returns whether the loaded icon was a symbolic one and whether the `fg` color was applied to it.
---@return GdkPixbuf.Pixbuf # a `GdkPixbuf` representing the loaded icon
function Gtk.IconInfo:load_symbolic(fg, success_color, warning_color, error_color, was_symbolic) end

--- # method Gtk.IconInfo:load_symbolic_async()
---
--- Asynchronously load, render and scale a symbolic icon previously looked up
--- from the icon theme using `gtk_icon_theme_lookup_icon()`.
--- 
--- For more details, see `gtk_icon_info_load_symbolic()` which is the synchronous
--- version of this call.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo` from `gtk_icon_theme_lookup_icon()`
---@param fg Gdk.RGBA # a `GdkRGBA` representing the foreground color of the icon
---@param success_color? Gdk.RGBA # a `GdkRGBA` representing the warning color of the icon or `nil` to use the default color
---@param warning_color? Gdk.RGBA # a `GdkRGBA` representing the warning color of the icon or `nil` to use the default color
---@param error_color? Gdk.RGBA # a `GdkRGBA` representing the error color of the icon or `nil` to use the default color (allow-none)
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gtk.IconInfo:load_symbolic_async(fg, success_color, warning_color, error_color, cancellable, callback, user_data) end

--- # method Gtk.IconInfo:load_symbolic_finish()
---
--- Finishes an async icon load, see `gtk_icon_info_load_symbolic_async()`.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo` from `gtk_icon_theme_lookup_icon()`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@param was_symbolic? (boolean|nil) # a `gboolean`, returns whether the loaded icon was a symbolic one and whether the `fg` color was applied to it.
---@return GdkPixbuf.Pixbuf # the rendered icon; this may be a newly created icon or a new reference to an internal icon, so you must not modify the icon. Use `g_object_unref()` to release your reference to the icon.
function Gtk.IconInfo:load_symbolic_finish(res, was_symbolic) end

--- # method Gtk.IconInfo:load_symbolic_for_context()
---
--- Loads an icon, modifying it to match the system colors for the foreground,
--- success, warning and error colors provided. If the icon is not a symbolic
--- one, the function will return the result from `gtk_icon_info_load_icon()`.
--- This function uses the regular foreground color and the symbolic colors
--- with the names “success_color”, “warning_color” and “error_color” from
--- the context.
--- 
--- This allows loading symbolic icons that will match the system theme.
--- 
--- See `gtk_icon_info_load_symbolic()` for more details.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo`
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param was_symbolic? (boolean|nil) # a `gboolean`, returns whether the loaded icon was a symbolic one and whether the `fg` color was applied to it.
---@return GdkPixbuf.Pixbuf # a `GdkPixbuf` representing the loaded icon
function Gtk.IconInfo:load_symbolic_for_context(context, was_symbolic) end

--- # method Gtk.IconInfo:load_symbolic_for_context_async()
---
--- Asynchronously load, render and scale a symbolic icon previously
--- looked up from the icon theme using `gtk_icon_theme_lookup_icon()`.
--- 
--- For more details, see `gtk_icon_info_load_symbolic_for_context()`
--- which is the synchronous version of this call.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo` from `gtk_icon_theme_lookup_icon()`
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gtk.IconInfo:load_symbolic_for_context_async(context, cancellable, callback, user_data) end

--- # method Gtk.IconInfo:load_symbolic_for_context_finish()
---
--- Finishes an async icon load, see `gtk_icon_info_load_symbolic_for_context_async()`.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo` from `gtk_icon_theme_lookup_icon()`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@param was_symbolic? (boolean|nil) # a `gboolean`, returns whether the loaded icon was a symbolic one and whether the `fg` color was applied to it.
---@return GdkPixbuf.Pixbuf # the rendered icon; this may be a newly created icon or a new reference to an internal icon, so you must not modify the icon. Use `g_object_unref()` to release your reference to the icon.
function Gtk.IconInfo:load_symbolic_for_context_finish(res, was_symbolic) end

--- # method Gtk.IconInfo:load_symbolic_for_style()
---
--- Loads an icon, modifying it to match the system colours for the foreground,
--- success, warning and error colors provided. If the icon is not a symbolic
--- one, the function will return the result from `gtk_icon_info_load_icon()`.
--- 
--- This allows loading symbolic icons that will match the system theme.
--- 
--- See `gtk_icon_info_load_symbolic()` for more details.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo`
---@param style Gtk.Style # a `GtkStyle` to take the colors from
---@param state Gtk.StateType # the widget state to use for colors
---@param was_symbolic? (boolean|nil) # a `gboolean`, returns whether the loaded icon was a symbolic one and whether the `fg` color was applied to it.
---@return GdkPixbuf.Pixbuf # a `GdkPixbuf` representing the loaded icon
function Gtk.IconInfo:load_symbolic_for_style(style, state, was_symbolic) end

--- # method Gtk.IconInfo:set_raw_coordinates()
---
--- Sets whether the coordinates returned by `gtk_icon_info_get_embedded_rect()`
--- and `gtk_icon_info_get_attach_points()` should be returned in their
--- original form as specified in the icon theme, instead of scaled
--- appropriately for the pixbuf returned by `gtk_icon_info_load_icon()`.
--- 
--- Raw coordinates are somewhat strange; they are specified to be with
--- respect to the unscaled pixmap for PNG and XPM icons, but for SVG
--- icons, they are in a 1000x1000 coordinate space that is scaled
--- to the final size of the icon.  You can determine if the icon is an SVG
--- icon by using `gtk_icon_info_get_filename()`, and seeing if it is non-`nil`
--- and ends in “.svg”.
--- 
--- This function is provided primarily to allow compatibility wrappers
--- for older API's, and is not expected to be useful for applications.
---
--- ---
---
---@param self Gtk.IconInfo # a `GtkIconInfo`
---@param raw_coordinates (boolean|nil) # whether the coordinates of embedded rectangles and attached points should be returned in their original (unscaled) form.
---@return nil
function Gtk.IconInfo:set_raw_coordinates(raw_coordinates) end

--- # function Gtk.IconInfo.new_for_pixbuf()
---
--- Creates a `GtkIconInfo` for a `GdkPixbuf`.
---
--- ---
---
---@param icon_theme Gtk.IconTheme # a `GtkIconTheme`
---@param pixbuf GdkPixbuf.Pixbuf # the pixbuf to wrap in a `GtkIconInfo`
---@return Gtk.IconInfo # a `GtkIconInfo`
function Gtk.IconInfo.new_for_pixbuf(icon_theme, pixbuf) end

--- # record Gtk.IconInfoClass
---
---@class Gtk.IconInfoClass
Gtk.IconInfoClass = {}

---@enum Gtk.IconLookupFlags
Gtk.IconLookupFlags = {}

--- # record Gtk.IconSet
---
---@class Gtk.IconSet
---@operator call: Gtk.IconSet
Gtk.IconSet = {}

--- # method Gtk.IconSet:add_source()
---
--- Icon sets have a list of `GtkIconSource`, which they use as base
--- icons for rendering icons in different states and sizes. Icons are
--- scaled, made to look insensitive, etc. in
--- `gtk_icon_set_render_icon()`, but `GtkIconSet` needs base images to
--- work with. The base images and when to use them are described by
--- a `GtkIconSource`.
--- 
--- This function copies `source`, so you can reuse the same source immediately
--- without affecting the icon set.
--- 
--- An example of when you’d use this function: a web browser’s "Back
--- to Previous Page" icon might point in a different direction in
--- Hebrew and in English; it might look different when insensitive;
--- and it might change size depending on toolbar mode (small/large
--- icons). So a single icon set would contain all those variants of
--- the icon, and you might add a separate source for each one.
--- 
--- You should nearly always add a “default” icon source with all
--- fields wildcarded, which will be used as a fallback if no more
--- specific source matches. `GtkIconSet` always prefers more specific
--- icon sources to more generic icon sources. The order in which you
--- add the sources to the icon set does not matter.
--- 
--- `gtk_icon_set_new_from_pixbuf()` creates a new icon set with a
--- default icon source based on the given pixbuf.
---
--- ---
---
---@param self Gtk.IconSet # a `GtkIconSet`
---@param source Gtk.IconSource # a `GtkIconSource`
---@return nil
function Gtk.IconSet:add_source(source) end

--- # method Gtk.IconSet:copy()
---
--- Copies `icon_set` by value.
---
--- ---
---
---@param self Gtk.IconSet # a `GtkIconSet`
---@return Gtk.IconSet # a new `GtkIconSet` identical to the first.
function Gtk.IconSet:copy() end

--- # method Gtk.IconSet:get_sizes()
---
--- Obtains a list of icon sizes this icon set can render. The returned
--- array must be freed with `g_free()`.
---
--- ---
---
---@param self Gtk.IconSet # a `GtkIconSet`
---@param sizes unknown[] # return location for array of sizes (`GtkIconSize`)
---@param n_sizes integer # location to store number of elements in returned array
---@return nil
function Gtk.IconSet:get_sizes(sizes, n_sizes) end

--- # method Gtk.IconSet:ref()
---
--- Increments the reference count on `icon_set`.
---
--- ---
---
---@param self Gtk.IconSet # a `GtkIconSet`.
---@return Gtk.IconSet # `icon_set`.
function Gtk.IconSet:ref() end

--- # method Gtk.IconSet:render_icon()
---
--- Renders an icon using `gtk_style_render_icon()`. In most cases,
--- `gtk_widget_render_icon()` is better, since it automatically provides
--- most of the arguments from the current widget settings.  This
--- function never returns `nil`; if the icon can’t be rendered
--- (perhaps because an image file fails to load), a default "missing
--- image" icon will be returned instead.
---
--- ---
---
---@param self Gtk.IconSet # a `GtkIconSet`
---@param style? Gtk.Style # a `GtkStyle` associated with `widget`, or `nil`
---@param direction Gtk.TextDirection # text direction
---@param state Gtk.StateType # widget state
---@param size integer # icon size (`GtkIconSize`). A size of `(GtkIconSize)-1` means render at the size of the source and don’t scale.
---@param widget? Gtk.Widget # widget that will display the icon, or `nil`. The only use that is typically made of this is to determine the appropriate `GdkScreen`.
---@param detail? string # detail to pass to the theme engine, or `nil`. Note that passing a detail of anything but `nil` will disable caching.
---@return GdkPixbuf.Pixbuf # a `GdkPixbuf` to be displayed
function Gtk.IconSet:render_icon(style, direction, state, size, widget, detail) end

--- # method Gtk.IconSet:render_icon_pixbuf()
---
--- Renders an icon using `gtk_render_icon_pixbuf()`. In most cases,
--- `gtk_widget_render_icon_pixbuf()` is better, since it automatically provides
--- most of the arguments from the current widget settings.  This
--- function never returns `nil`; if the icon can’t be rendered
--- (perhaps because an image file fails to load), a default "missing
--- image" icon will be returned instead.
---
--- ---
---
---@param self Gtk.IconSet # a `GtkIconSet`
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param size integer # icon size (`GtkIconSize`). A size of `(GtkIconSize)-1` means render at the size of the source and don’t scale.
---@return GdkPixbuf.Pixbuf # a `GdkPixbuf` to be displayed
function Gtk.IconSet:render_icon_pixbuf(context, size) end

--- # method Gtk.IconSet:render_icon_surface()
---
--- Renders an icon using `gtk_render_icon_pixbuf()` and converts it to a
--- cairo surface.
--- 
--- This function never returns `nil`; if the icon can’t be rendered
--- (perhaps because an image file fails to load), a default "missing
--- image" icon will be returned instead.
---
--- ---
---
---@param self Gtk.IconSet # a `GtkIconSet`
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param size integer # icon size (`GtkIconSize`). A size of `(GtkIconSize)-1` means render at the size of the source and don’t scale.
---@param scale integer # the window scale to render for
---@param for_window? Gdk.Window # `GdkWindow` to optimize drawing for, or `nil`
---@return cairo.Surface # a `cairo_surface_t` to be displayed
function Gtk.IconSet:render_icon_surface(context, size, scale, for_window) end

--- # method Gtk.IconSet:unref()
---
--- Decrements the reference count on `icon_set`, and frees memory
--- if the reference count reaches 0.
---
--- ---
---
---@param self Gtk.IconSet # a `GtkIconSet`
---@return nil
function Gtk.IconSet:unref() end

--- # function Gtk.IconSet.new()
---
--- Creates a new `GtkIconSet`. A `GtkIconSet` represents a single icon
--- in various sizes and widget states. It can provide a `GdkPixbuf`
--- for a given size and state on request, and automatically caches
--- some of the rendered `GdkPixbuf` objects.
--- 
--- Normally you would use `gtk_widget_render_icon_pixbuf()` instead of
--- using `GtkIconSet` directly. The one case where you’d use
--- `GtkIconSet` is to create application-specific icon sets to place in
--- a `GtkIconFactory`.
---
--- ---
---
---@return Gtk.IconSet # a new `GtkIconSet`
function Gtk.IconSet.new() end

--- # function Gtk.IconSet.new_from_pixbuf()
---
--- Creates a new `GtkIconSet` with `pixbuf` as the default/fallback
--- source image. If you don’t add any additional `GtkIconSource` to the
--- icon set, all variants of the icon will be created from `pixbuf`,
--- using scaling, pixelation, etc. as required to adjust the icon size
--- or make the icon look insensitive/prelighted.
---
--- ---
---
---@param pixbuf GdkPixbuf.Pixbuf # a `GdkPixbuf`
---@return Gtk.IconSet # a new `GtkIconSet`
function Gtk.IconSet.new_from_pixbuf(pixbuf) end

---@enum Gtk.IconSize
Gtk.IconSize = {}

--- # record Gtk.IconSource
---
---@class Gtk.IconSource
---@operator call: Gtk.IconSource
Gtk.IconSource = {}

--- # method Gtk.IconSource:copy()
---
--- Creates a copy of `source`; mostly useful for language bindings.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@return Gtk.IconSource # a new `GtkIconSource`
function Gtk.IconSource:copy() end

--- # method Gtk.IconSource:free()
---
--- Frees a dynamically-allocated icon source, along with its
--- filename, size, and pixbuf fields if those are not `nil`.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@return nil
function Gtk.IconSource:free() end

--- # method Gtk.IconSource:get_direction()
---
--- Obtains the text direction this icon source applies to. The return
--- value is only useful/meaningful if the text direction is not
--- wildcarded.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@return Gtk.TextDirection # text direction this source matches
function Gtk.IconSource:get_direction() end

--- # method Gtk.IconSource:get_direction_wildcarded()
---
--- Gets the value set by `gtk_icon_source_set_direction_wildcarded()`.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@return (boolean|nil) # `true` if this icon source is a base for any text direction variant
function Gtk.IconSource:get_direction_wildcarded() end

--- # method Gtk.IconSource:get_filename()
---
--- Retrieves the source filename, or `nil` if none is set. The
--- filename is not a copy, and should not be modified or expected to
--- persist beyond the lifetime of the icon source.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@return string # image filename. This string must not be modified or freed.
function Gtk.IconSource:get_filename() end

--- # method Gtk.IconSource:get_icon_name()
---
--- Retrieves the source icon name, or `nil` if none is set. The
--- icon_name is not a copy, and should not be modified or expected to
--- persist beyond the lifetime of the icon source.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@return string # icon name. This string must not be modified or freed.
function Gtk.IconSource:get_icon_name() end

--- # method Gtk.IconSource:get_pixbuf()
---
--- Retrieves the source pixbuf, or `nil` if none is set.
--- In addition, if a filename source is in use, this
--- function in some cases will return the pixbuf from
--- loaded from the filename. This is, for example, true
--- for the GtkIconSource passed to the `GtkStyle` `render_icon()`
--- virtual function. The reference count on the pixbuf is
--- not incremented.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@return GdkPixbuf.Pixbuf # source pixbuf
function Gtk.IconSource:get_pixbuf() end

--- # method Gtk.IconSource:get_size()
---
--- Obtains the icon size this source applies to. The return value
--- is only useful/meaningful if the icon size is not wildcarded.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@return integer # icon size (`GtkIconSize`) this source matches.
function Gtk.IconSource:get_size() end

--- # method Gtk.IconSource:get_size_wildcarded()
---
--- Gets the value set by `gtk_icon_source_set_size_wildcarded()`.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@return (boolean|nil) # `true` if this icon source is a base for any icon size variant
function Gtk.IconSource:get_size_wildcarded() end

--- # method Gtk.IconSource:get_state()
---
--- Obtains the widget state this icon source applies to. The return
--- value is only useful/meaningful if the widget state is not
--- wildcarded.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@return Gtk.StateType # widget state this source matches
function Gtk.IconSource:get_state() end

--- # method Gtk.IconSource:get_state_wildcarded()
---
--- Gets the value set by `gtk_icon_source_set_state_wildcarded()`.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@return (boolean|nil) # `true` if this icon source is a base for any widget state variant
function Gtk.IconSource:get_state_wildcarded() end

--- # method Gtk.IconSource:set_direction()
---
--- Sets the text direction this icon source is intended to be used
--- with.
--- 
--- Setting the text direction on an icon source makes no difference
--- if the text direction is wildcarded. Therefore, you should usually
--- call `gtk_icon_source_set_direction_wildcarded()` to un-wildcard it
--- in addition to calling this function.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@param direction Gtk.TextDirection # text direction this source applies to
---@return nil
function Gtk.IconSource:set_direction(direction) end

--- # method Gtk.IconSource:set_direction_wildcarded()
---
--- If the text direction is wildcarded, this source can be used
--- as the base image for an icon in any `GtkTextDirection`.
--- If the text direction is not wildcarded, then the
--- text direction the icon source applies to should be set
--- with `gtk_icon_source_set_direction()`, and the icon source
--- will only be used with that text direction.
--- 
--- `GtkIconSet` prefers non-wildcarded sources (exact matches) over
--- wildcarded sources, and will use an exact match when possible.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@param setting (boolean|nil) # `true` to wildcard the text direction
---@return nil
function Gtk.IconSource:set_direction_wildcarded(setting) end

--- # method Gtk.IconSource:set_filename()
---
--- Sets the name of an image file to use as a base image when creating
--- icon variants for `GtkIconSet`. The filename must be absolute.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@param filename string # image file to use
---@return nil
function Gtk.IconSource:set_filename(filename) end

--- # method Gtk.IconSource:set_icon_name()
---
--- Sets the name of an icon to look up in the current icon theme
--- to use as a base image when creating icon variants for `GtkIconSet`.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@param icon_name? string # name of icon to use
---@return nil
function Gtk.IconSource:set_icon_name(icon_name) end

--- # method Gtk.IconSource:set_pixbuf()
---
--- Sets a pixbuf to use as a base image when creating icon variants
--- for `GtkIconSet`.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@param pixbuf GdkPixbuf.Pixbuf # pixbuf to use as a source
---@return nil
function Gtk.IconSource:set_pixbuf(pixbuf) end

--- # method Gtk.IconSource:set_size()
---
--- Sets the icon size this icon source is intended to be used
--- with.
--- 
--- Setting the icon size on an icon source makes no difference
--- if the size is wildcarded. Therefore, you should usually
--- call `gtk_icon_source_set_size_wildcarded()` to un-wildcard it
--- in addition to calling this function.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@param size integer # icon size (`GtkIconSize`) this source applies to
---@return nil
function Gtk.IconSource:set_size(size) end

--- # method Gtk.IconSource:set_size_wildcarded()
---
--- If the icon size is wildcarded, this source can be used as the base
--- image for an icon of any size.  If the size is not wildcarded, then
--- the size the source applies to should be set with
--- `gtk_icon_source_set_size()` and the icon source will only be used
--- with that specific size.
--- 
--- `GtkIconSet` prefers non-wildcarded sources (exact matches) over
--- wildcarded sources, and will use an exact match when possible.
--- 
--- `GtkIconSet` will normally scale wildcarded source images to produce
--- an appropriate icon at a given size, but will not change the size
--- of source images that match exactly.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@param setting (boolean|nil) # `true` to wildcard the widget state
---@return nil
function Gtk.IconSource:set_size_wildcarded(setting) end

--- # method Gtk.IconSource:set_state()
---
--- Sets the widget state this icon source is intended to be used
--- with.
--- 
--- Setting the widget state on an icon source makes no difference
--- if the state is wildcarded. Therefore, you should usually
--- call `gtk_icon_source_set_state_wildcarded()` to un-wildcard it
--- in addition to calling this function.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@param state Gtk.StateType # widget state this source applies to
---@return nil
function Gtk.IconSource:set_state(state) end

--- # method Gtk.IconSource:set_state_wildcarded()
---
--- If the widget state is wildcarded, this source can be used as the
--- base image for an icon in any `GtkStateType`.  If the widget state
--- is not wildcarded, then the state the source applies to should be
--- set with `gtk_icon_source_set_state()` and the icon source will
--- only be used with that specific state.
--- 
--- `GtkIconSet` prefers non-wildcarded sources (exact matches) over
--- wildcarded sources, and will use an exact match when possible.
--- 
--- `GtkIconSet` will normally transform wildcarded source images to
--- produce an appropriate icon for a given state, for example
--- lightening an image on prelight, but will not modify source images
--- that match exactly.
---
--- ---
---
---@param self Gtk.IconSource # a `GtkIconSource`
---@param setting (boolean|nil) # `true` to wildcard the widget state
---@return nil
function Gtk.IconSource:set_state_wildcarded(setting) end

--- # function Gtk.IconSource.new()
---
--- Creates a new `GtkIconSource`. A `GtkIconSource` contains a `GdkPixbuf` (or
--- image filename) that serves as the base image for one or more of the
--- icons in a `GtkIconSet`, along with a specification for which icons in the
--- icon set will be based on that pixbuf or image file. An icon set contains
--- a set of icons that represent “the same” logical concept in different states,
--- different global text directions, and different sizes.
--- 
--- So for example a web browser’s “Back to Previous Page” icon might
--- point in a different direction in Hebrew and in English; it might
--- look different when insensitive; and it might change size depending
--- on toolbar mode (small/large icons). So a single icon set would
--- contain all those variants of the icon. `GtkIconSet` contains a list
--- of `GtkIconSource` from which it can derive specific icon variants in
--- the set.
--- 
--- In the simplest case, `GtkIconSet` contains one source pixbuf from
--- which it derives all variants. The convenience function
--- `gtk_icon_set_new_from_pixbuf()` handles this case; if you only have
--- one source pixbuf, just use that function.
--- 
--- If you want to use a different base pixbuf for different icon
--- variants, you create multiple icon sources, mark which variants
--- they’ll be used to create, and add them to the icon set with
--- `gtk_icon_set_add_source()`.
--- 
--- By default, the icon source has all parameters wildcarded. That is,
--- the icon source will be used as the base icon for any desired text
--- direction, widget state, or icon size.
---
--- ---
---
---@return Gtk.IconSource # a new `GtkIconSource`
function Gtk.IconSource.new() end

--- # class Gtk.IconTheme
---
--- `GtkIconTheme` provides a facility for looking up icons by name
--- and size. The main reason for using a name rather than simply
--- providing a filename is to allow different icons to be used
--- depending on what “icon theme” is selected
--- by the user. The operation of icon themes on Linux and Unix
--- follows the [Icon Theme Specification](http://www.freedesktop.org/Standards/icon-theme-spec)
--- There is a fallback icon theme, named `hicolor`, where applications
--- should install their icons, but additional icon themes can be installed
--- as operating system vendors and users choose.
--- 
--- Named icons are similar to the deprecated [Stock Items][gtkstock],
--- and the distinction between the two may be a bit confusing.
--- A few things to keep in mind:
--- 
--- - Stock images usually are used in conjunction with
---   [Stock Items][gtkstock], such as %GTK_STOCK_OK or
---   %GTK_STOCK_OPEN. Named icons are easier to set up and therefore
---   are more useful for new icons that an application wants to
---   add, such as application icons or window icons.
--- 
--- - Stock images can only be loaded at the symbolic sizes defined
---   by the `GtkIconSize` enumeration, or by custom sizes defined
---   by `gtk_icon_size_register()`, while named icons are more flexible
---   and any pixel size can be specified.
--- 
--- - Because stock images are closely tied to stock items, and thus
---   to actions in the user interface, stock images may come in
---   multiple variants for different widget states or writing
---   directions.
--- 
--- A good rule of thumb is that if there is a stock image for what
--- you want to use, use it, otherwise use a named icon. It turns
--- out that internally stock images are generally defined in
--- terms of one or more named icons. (An example of the
--- more than one case is icons that depend on writing direction;
--- %GTK_STOCK_GO_FORWARD uses the two themed icons
--- “gtk-stock-go-forward-ltr” and “gtk-stock-go-forward-rtl”.)
--- 
--- In many cases, named themes are used indirectly, via `GtkImage`
--- or stock items, rather than directly, but looking up icons
--- directly is also simple. The `GtkIconTheme` object acts
--- as a database of all the icons in the current theme. You
--- can create new `GtkIconTheme` objects, but it’s much more
--- efficient to use the standard icon theme for the `GdkScreen`
--- so that the icon information is shared with other people
--- looking up icons.
--- ```c
--- GError *error = NULL;
--- GtkIconTheme *icon_theme;
--- GdkPixbuf *pixbuf;
--- 
--- icon_theme = gtk_icon_theme_get_default ();
--- pixbuf = gtk_icon_theme_load_icon (icon_theme,
---                                    "my-icon-name", // icon name
---                                    48, // icon size
---                                    0,  // flags
---                                    &error);
--- if (!pixbuf)
---   {
---     g_warning ("Couldn’t load icon: %s", error->message);
---     g_error_free (error);
---   }
--- else
---   {
---     // Use the pixbuf
---     g_object_unref (pixbuf);
---   }
--- ```
---
--- ---
---
---@class Gtk.IconTheme : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gtk.IconThemePrivate
---@operator call: Gtk.IconTheme
Gtk.IconTheme = {}

--- # method Gtk.IconTheme:add_resource_path()
---
--- Adds a resource path that will be looked at when looking
--- for icons, similar to search paths.
--- 
--- This function should be used to make application-specific icons
--- available as part of the icon theme.
--- 
--- The resources are considered as part of the hicolor icon theme
--- and must be located in subdirectories that are defined in the
--- hicolor icon theme, such as ``path`/16x16/actions/run.png`.
--- Icons that are directly placed in the resource path instead
--- of a subdirectory are also considered as ultimate fallback.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param path string # a resource path
---@return nil
function Gtk.IconTheme:add_resource_path(path) end

--- # method Gtk.IconTheme:append_search_path()
---
--- Appends a directory to the search path.
--- See `gtk_icon_theme_set_search_path()`.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param path string # directory name to append to the icon path
---@return nil
function Gtk.IconTheme:append_search_path(path) end

--- # method Gtk.IconTheme:choose_icon()
---
--- Looks up a named icon and returns a `GtkIconInfo` containing
--- information such as the filename of the icon. The icon
--- can then be rendered into a pixbuf using
--- `gtk_icon_info_load_icon()`. (`gtk_icon_theme_load_icon()`
--- combines these two steps if all you need is the pixbuf.)
--- 
--- If `icon_names` contains more than one name, this function
--- tries them all in the given order before falling back to
--- inherited icon themes.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param icon_names unknown[] # `nil`-terminated array of icon names to lookup
---@param size integer # desired icon size
---@param flags Gtk.IconLookupFlags # flags modifying the behavior of the icon lookup
---@return Gtk.IconInfo # a `GtkIconInfo` object containing information about the icon, or `nil` if the icon wasn’t found.
function Gtk.IconTheme:choose_icon(icon_names, size, flags) end

--- # method Gtk.IconTheme:choose_icon_for_scale()
---
--- Looks up a named icon for a particular window scale and returns
--- a `GtkIconInfo` containing information such as the filename of the
--- icon. The icon can then be rendered into a pixbuf using
--- `gtk_icon_info_load_icon()`. (`gtk_icon_theme_load_icon()`
--- combines these two steps if all you need is the pixbuf.)
--- 
--- If `icon_names` contains more than one name, this function
--- tries them all in the given order before falling back to
--- inherited icon themes.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param icon_names unknown[] # `nil`-terminated array of icon names to lookup
---@param size integer # desired icon size
---@param scale integer # desired scale
---@param flags Gtk.IconLookupFlags # flags modifying the behavior of the icon lookup
---@return Gtk.IconInfo # a `GtkIconInfo` object containing information about the icon, or `nil` if the icon wasn’t found.
function Gtk.IconTheme:choose_icon_for_scale(icon_names, size, scale, flags) end

--- # method Gtk.IconTheme:get_example_icon_name()
---
--- Gets the name of an icon that is representative of the
--- current theme (for instance, to use when presenting
--- a list of themes to the user.)
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@return string # the name of an example icon or `nil`. Free with `g_free()`.
function Gtk.IconTheme:get_example_icon_name() end

--- # method Gtk.IconTheme:get_icon_sizes()
---
--- Returns an array of integers describing the sizes at which
--- the icon is available without scaling. A size of -1 means
--- that the icon is available in a scalable format. The array
--- is zero-terminated.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param icon_name string # the name of an icon
---@return unknown[] # An newly allocated array describing the sizes at which the icon is available. The array should be freed with `g_free()` when it is no longer needed.
function Gtk.IconTheme:get_icon_sizes(icon_name) end

--- # method Gtk.IconTheme:get_search_path()
---
--- Gets the current search path. See `gtk_icon_theme_set_search_path()`.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param path? unknown[] # location to store a list of icon theme path directories or `nil`. The stored value should be freed with `g_strfreev()`.
---@param n_elements integer # location to store number of elements in `path`, or `nil`
---@return nil
function Gtk.IconTheme:get_search_path(path, n_elements) end

--- # method Gtk.IconTheme:has_icon()
---
--- Checks whether an icon theme includes an icon
--- for a particular name.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param icon_name string # the name of an icon
---@return (boolean|nil) # `true` if `icon_theme` includes an icon for `icon_name`.
function Gtk.IconTheme:has_icon(icon_name) end

--- # method Gtk.IconTheme:list_contexts()
---
--- Gets the list of contexts available within the current
--- hierarchy of icon themes.
--- See `gtk_icon_theme_list_icons()` for details about contexts.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@return string[] # a `GList` list holding the names of all the contexts in the theme. You must first free each element in the list with `g_free()`, then free the list itself with `g_list_free()`.
function Gtk.IconTheme:list_contexts() end

--- # method Gtk.IconTheme:list_icons()
---
--- Lists the icons in the current icon theme. Only a subset
--- of the icons can be listed by providing a context string.
--- The set of values for the context string is system dependent,
--- but will typically include such values as “Applications” and
--- “MimeTypes”. Contexts are explained in the
--- [Icon Theme Specification](http://www.freedesktop.org/wiki/Specifications/icon-theme-spec).
--- The standard contexts are listed in the
--- [Icon Naming Specification](http://www.freedesktop.org/wiki/Specifications/icon-naming-spec).
--- Also see `gtk_icon_theme_list_contexts()`.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param context? string # a string identifying a particular type of icon, or `nil` to list all icons.
---@return string[] # a `GList` list holding the names of all the icons in the theme. You must first free each element in the list with `g_free()`, then free the list itself with `g_list_free()`.
function Gtk.IconTheme:list_icons(context) end

--- # method Gtk.IconTheme:load_icon()
---
--- Looks up an icon in an icon theme, scales it to the given size
--- and renders it into a pixbuf. This is a convenience function;
--- if more details about the icon are needed, use
--- `gtk_icon_theme_lookup_icon()` followed by `gtk_icon_info_load_icon()`.
--- 
--- Note that you probably want to listen for icon theme changes and
--- update the icon. This is usually done by connecting to the
--- GtkWidget::style-set signal. If for some reason you do not want to
--- update the icon when the icon theme changes, you should consider
--- using `gdk_pixbuf_copy()` to make a private copy of the pixbuf
--- returned by this function. Otherwise GTK+ may need to keep the old
--- icon theme loaded, which would be a waste of memory.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param icon_name string # the name of the icon to lookup
---@param size integer # the desired icon size. The resulting icon may not be exactly this size; see `gtk_icon_info_load_icon()`.
---@param flags Gtk.IconLookupFlags # flags modifying the behavior of the icon lookup
---@return GdkPixbuf.Pixbuf # the rendered icon; this may be a newly created icon or a new reference to an internal icon, so you must not modify the icon. Use `g_object_unref()` to release your reference to the icon. `nil` if the icon isn’t found.
function Gtk.IconTheme:load_icon(icon_name, size, flags) end

--- # method Gtk.IconTheme:load_icon_for_scale()
---
--- Looks up an icon in an icon theme for a particular window scale,
--- scales it to the given size and renders it into a pixbuf. This is a
--- convenience function; if more details about the icon are needed,
--- use `gtk_icon_theme_lookup_icon()` followed by
--- `gtk_icon_info_load_icon()`.
--- 
--- Note that you probably want to listen for icon theme changes and
--- update the icon. This is usually done by connecting to the
--- GtkWidget::style-set signal. If for some reason you do not want to
--- update the icon when the icon theme changes, you should consider
--- using `gdk_pixbuf_copy()` to make a private copy of the pixbuf
--- returned by this function. Otherwise GTK+ may need to keep the old
--- icon theme loaded, which would be a waste of memory.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param icon_name string # the name of the icon to lookup
---@param size integer # the desired icon size. The resulting icon may not be exactly this size; see `gtk_icon_info_load_icon()`.
---@param scale integer # desired scale
---@param flags Gtk.IconLookupFlags # flags modifying the behavior of the icon lookup
---@return GdkPixbuf.Pixbuf # the rendered icon; this may be a newly created icon or a new reference to an internal icon, so you must not modify the icon. Use `g_object_unref()` to release your reference to the icon. `nil` if the icon isn’t found.
function Gtk.IconTheme:load_icon_for_scale(icon_name, size, scale, flags) end

--- # method Gtk.IconTheme:load_surface()
---
--- Looks up an icon in an icon theme for a particular window scale,
--- scales it to the given size and renders it into a cairo surface. This is a
--- convenience function; if more details about the icon are needed,
--- use `gtk_icon_theme_lookup_icon()` followed by
--- `gtk_icon_info_load_surface()`.
--- 
--- Note that you probably want to listen for icon theme changes and
--- update the icon. This is usually done by connecting to the
--- GtkWidget::style-set signal.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param icon_name string # the name of the icon to lookup
---@param size integer # the desired icon size. The resulting icon may not be exactly this size; see `gtk_icon_info_load_icon()`.
---@param scale integer # desired scale
---@param for_window? Gdk.Window # `GdkWindow` to optimize drawing for, or `nil`
---@param flags Gtk.IconLookupFlags # flags modifying the behavior of the icon lookup
---@return cairo.Surface # the rendered icon; this may be a newly created icon or a new reference to an internal icon, so you must not modify the icon. Use `cairo_surface_destroy()` to release your reference to the icon. `nil` if the icon isn’t found.
function Gtk.IconTheme:load_surface(icon_name, size, scale, for_window, flags) end

--- # method Gtk.IconTheme:lookup_by_gicon()
---
--- Looks up an icon and returns a `GtkIconInfo` containing information
--- such as the filename of the icon. The icon can then be rendered
--- into a pixbuf using `gtk_icon_info_load_icon()`.
--- 
--- When rendering on displays with high pixel densities you should not
--- use a `size` multiplied by the scaling factor returned by functions
--- like `gdk_window_get_scale_factor()`. Instead, you should use
--- `gtk_icon_theme_lookup_by_gicon_for_scale()`, as the assets loaded
--- for a given scaling factor may be different.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param icon Gio.Icon # the `GIcon` to look up
---@param size integer # desired icon size
---@param flags Gtk.IconLookupFlags # flags modifying the behavior of the icon lookup
---@return Gtk.IconInfo # a `GtkIconInfo` containing information about the icon, or `nil` if the icon wasn’t found. Unref with `g_object_unref()`
function Gtk.IconTheme:lookup_by_gicon(icon, size, flags) end

--- # method Gtk.IconTheme:lookup_by_gicon_for_scale()
---
--- Looks up an icon and returns a `GtkIconInfo` containing information
--- such as the filename of the icon. The icon can then be rendered into
--- a pixbuf using `gtk_icon_info_load_icon()`.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param icon Gio.Icon # the `GIcon` to look up
---@param size integer # desired icon size
---@param scale integer # the desired scale
---@param flags Gtk.IconLookupFlags # flags modifying the behavior of the icon lookup
---@return Gtk.IconInfo # a `GtkIconInfo` containing information about the icon, or `nil` if the icon wasn’t found. Unref with `g_object_unref()`
function Gtk.IconTheme:lookup_by_gicon_for_scale(icon, size, scale, flags) end

--- # method Gtk.IconTheme:lookup_icon()
---
--- Looks up a named icon and returns a `GtkIconInfo` containing
--- information such as the filename of the icon. The icon
--- can then be rendered into a pixbuf using
--- `gtk_icon_info_load_icon()`. (`gtk_icon_theme_load_icon()`
--- combines these two steps if all you need is the pixbuf.)
--- 
--- When rendering on displays with high pixel densities you should not
--- use a `size` multiplied by the scaling factor returned by functions
--- like `gdk_window_get_scale_factor()`. Instead, you should use
--- `gtk_icon_theme_lookup_icon_for_scale()`, as the assets loaded
--- for a given scaling factor may be different.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param icon_name string # the name of the icon to lookup
---@param size integer # desired icon size
---@param flags Gtk.IconLookupFlags # flags modifying the behavior of the icon lookup
---@return Gtk.IconInfo # a `GtkIconInfo` object containing information about the icon, or `nil` if the icon wasn’t found.
function Gtk.IconTheme:lookup_icon(icon_name, size, flags) end

--- # method Gtk.IconTheme:lookup_icon_for_scale()
---
--- Looks up a named icon for a particular window scale and returns a
--- `GtkIconInfo` containing information such as the filename of the
--- icon. The icon can then be rendered into a pixbuf using
--- `gtk_icon_info_load_icon()`. (`gtk_icon_theme_load_icon()` combines
--- these two steps if all you need is the pixbuf.)
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param icon_name string # the name of the icon to lookup
---@param size integer # desired icon size
---@param scale integer # the desired scale
---@param flags Gtk.IconLookupFlags # flags modifying the behavior of the icon lookup
---@return Gtk.IconInfo # a `GtkIconInfo` object containing information about the icon, or `nil` if the icon wasn’t found.
function Gtk.IconTheme:lookup_icon_for_scale(icon_name, size, scale, flags) end

--- # method Gtk.IconTheme:prepend_search_path()
---
--- Prepends a directory to the search path.
--- See `gtk_icon_theme_set_search_path()`.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param path string # directory name to prepend to the icon path
---@return nil
function Gtk.IconTheme:prepend_search_path(path) end

--- # method Gtk.IconTheme:rescan_if_needed()
---
--- Checks to see if the icon theme has changed; if it has, any
--- currently cached information is discarded and will be reloaded
--- next time `icon_theme` is accessed.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@return (boolean|nil) # `true` if the icon theme has changed and needed to be reloaded.
function Gtk.IconTheme:rescan_if_needed() end

--- # method Gtk.IconTheme:set_custom_theme()
---
--- Sets the name of the icon theme that the `GtkIconTheme` object uses
--- overriding system configuration. This function cannot be called
--- on the icon theme objects returned from `gtk_icon_theme_get_default()`
--- and `gtk_icon_theme_get_for_screen()`.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param theme_name? string # name of icon theme to use instead of configured theme, or `nil` to unset a previously set custom theme
---@return nil
function Gtk.IconTheme:set_custom_theme(theme_name) end

--- # method Gtk.IconTheme:set_screen()
---
--- Sets the screen for an icon theme; the screen is used
--- to track the user’s currently configured icon theme,
--- which might be different for different screens.
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param screen Gdk.Screen # a `GdkScreen`
---@return nil
function Gtk.IconTheme:set_screen(screen) end

--- # method Gtk.IconTheme:set_search_path()
---
--- Sets the search path for the icon theme object. When looking
--- for an icon theme, GTK+ will search for a subdirectory of
--- one or more of the directories in `path` with the same name
--- as the icon theme containing an index.theme file. (Themes from
--- multiple of the path elements are combined to allow themes to be
--- extended by adding icons in the user’s home directory.)
--- 
--- In addition if an icon found isn’t found either in the current
--- icon theme or the default icon theme, and an image file with
--- the right name is found directly in one of the elements of
--- `path`, then that image will be used for the icon name.
--- (This is legacy feature, and new icons should be put
--- into the fallback icon theme, which is called hicolor,
--- rather than directly on the icon path.)
---
--- ---
---
---@param self Gtk.IconTheme # a `GtkIconTheme`
---@param path unknown[] # array of directories that are searched for icon themes
---@param n_elements integer # number of elements in `path`.
---@return nil
function Gtk.IconTheme:set_search_path(path, n_elements) end

--- # function Gtk.IconTheme.add_builtin_icon()
---
--- Registers a built-in icon for icon theme lookups. The idea
--- of built-in icons is to allow an application or library
--- that uses themed icons to function requiring files to
--- be present in the file system. For instance, the default
--- images for all of GTK+’s stock icons are registered
--- as built-icons.
--- 
--- In general, if you use `gtk_icon_theme_add_builtin_icon()`
--- you should also install the icon in the icon theme, so
--- that the icon is generally available.
--- 
--- This function will generally be used with pixbufs loaded
--- via `gdk_pixbuf_new_from_inline()`.
---
--- ---
---
---@param icon_name string # the name of the icon to register
---@param size integer # the size in pixels at which to register the icon (different images can be registered for the same icon name at different sizes.)
---@param pixbuf GdkPixbuf.Pixbuf # `GdkPixbuf` that contains the image to use for `icon_name`
---@return nil
function Gtk.IconTheme.add_builtin_icon(icon_name, size, pixbuf) end

--- # function Gtk.IconTheme.get_default()
---
--- Gets the icon theme for the default screen. See
--- `gtk_icon_theme_get_for_screen()`.
---
--- ---
---
---@return Gtk.IconTheme # A unique `GtkIconTheme` associated with the default screen. This icon theme is associated with the screen and can be used as long as the screen is open. Do not ref or unref it.
function Gtk.IconTheme.get_default() end

--- # function Gtk.IconTheme.get_for_screen()
---
--- Gets the icon theme object associated with `screen`; if this
--- function has not previously been called for the given
--- screen, a new icon theme object will be created and
--- associated with the screen. Icon theme objects are
--- fairly expensive to create, so using this function
--- is usually a better choice than calling than `gtk_icon_theme_new()`
--- and setting the screen yourself; by using this function
--- a single icon theme object will be shared between users.
---
--- ---
---
---@param screen Gdk.Screen # a `GdkScreen`
---@return Gtk.IconTheme # A unique `GtkIconTheme` associated with the given screen. This icon theme is associated with the screen and can be used as long as the screen is open. Do not ref or unref it.
function Gtk.IconTheme.get_for_screen(screen) end

--- # function Gtk.IconTheme.new()
---
--- Creates a new icon theme object. Icon theme objects are used
--- to lookup up an icon by name in a particular icon theme.
--- Usually, you’ll want to use `gtk_icon_theme_get_default()`
--- or `gtk_icon_theme_get_for_screen()` rather than creating
--- a new icon theme object for scratch.
---
--- ---
---
---@return Gtk.IconTheme # the newly created `GtkIconTheme` object.
function Gtk.IconTheme.new() end

--- # record Gtk.IconThemeClass
---
---@class Gtk.IconThemeClass
---@field parent_class GObject.ObjectClass # The parent class.
---@field changed fun(icon_theme: Gtk.IconTheme): nil
Gtk.IconThemeClass = {}

---@enum Gtk.IconThemeError
Gtk.IconThemeError = {}

--- # record Gtk.IconThemePrivate
---
---@class Gtk.IconThemePrivate
Gtk.IconThemePrivate = {}

--- # class Gtk.IconView
---
--- `GtkIconView` provides an alternative view on a `GtkTreeModel`.
--- It displays the model as a grid of icons with labels. Like
--- `GtkTreeView`, it allows to select one or multiple items
--- (depending on the selection mode, see `gtk_icon_view_set_selection_mode()`).
--- In addition to selection with the arrow keys, `GtkIconView` supports
--- rubberband selection, which is controlled by dragging the pointer.
--- 
--- Note that if the tree model is backed by an actual tree store (as
--- opposed to a flat list where the mapping to icons is obvious),
--- `GtkIconView` will only display the first level of the tree and
--- ignore the tree’s branches.
--- 
--- # CSS nodes
--- 
--- ```plain
--- iconview.view
--- ╰── [rubberband]
--- ```
--- 
--- GtkIconView has a single CSS node with name iconview and style class .view.
--- For rubberband selection, a subnode with name rubberband is used.
---
--- ---
---
---@class Gtk.IconView : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.CellLayout, Gtk.Scrollable
---@field parent Gtk.Container
---@field priv Gtk.IconViewPrivate
---@operator call: Gtk.IconView
Gtk.IconView = {}

--- # method Gtk.IconView:convert_widget_to_bin_window_coords()
---
--- Converts widget coordinates to coordinates for the bin_window,
--- as expected by e.g. `gtk_icon_view_get_path_at_pos()`.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param wx integer # X coordinate relative to the widget
---@param wy integer # Y coordinate relative to the widget
---@param bx integer # return location for bin_window X coordinate
---@param by integer # return location for bin_window Y coordinate
---@return nil
function Gtk.IconView:convert_widget_to_bin_window_coords(wx, wy, bx, by) end

--- # method Gtk.IconView:create_drag_icon()
---
--- Creates a `cairo_surface_t` representation of the item at `path`.
--- This image is used for a drag icon.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param path Gtk.TreePath # a `GtkTreePath` in `icon_view`
---@return cairo.Surface # a newly-allocated surface of the drag icon.
function Gtk.IconView:create_drag_icon(path) end

--- # method Gtk.IconView:enable_model_drag_dest()
---
--- Turns `icon_view` into a drop destination for automatic DND. Calling this
--- method sets `GtkIconView`:reorderable to `false`.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param targets unknown[] # the table of targets that the drag will support
---@param n_targets integer # the number of items in `targets`
---@param actions Gdk.DragAction # the bitmask of possible actions for a drag to this widget
---@return nil
function Gtk.IconView:enable_model_drag_dest(targets, n_targets, actions) end

--- # method Gtk.IconView:enable_model_drag_source()
---
--- Turns `icon_view` into a drag source for automatic DND. Calling this
--- method sets `GtkIconView`:reorderable to `false`.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param start_button_mask Gdk.ModifierType # Mask of allowed buttons to start drag
---@param targets unknown[] # the table of targets that the drag will support
---@param n_targets integer # the number of items in `targets`
---@param actions Gdk.DragAction # the bitmask of possible actions for a drag from this widget
---@return nil
function Gtk.IconView:enable_model_drag_source(start_button_mask, targets, n_targets, actions) end

--- # method Gtk.IconView:get_activate_on_single_click()
---
--- Gets the setting set by `gtk_icon_view_set_activate_on_single_click()`.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@return (boolean|nil) # `true` if item-activated will be emitted on a single click
function Gtk.IconView:get_activate_on_single_click() end

--- # method Gtk.IconView:get_cell_rect()
---
--- Fills the bounding rectangle in widget coordinates for the cell specified by
--- `path` and `cell`. If `cell` is `nil` the main cell area is used.
--- 
--- This function is only valid if `icon_view` is realized.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param path Gtk.TreePath # a `GtkTreePath`
---@param cell? Gtk.CellRenderer # a `GtkCellRenderer` or `nil`
---@param rect Gdk.Rectangle # rectangle to fill with cell rect
---@return (boolean|nil) # `false` if there is no such item, `true` otherwise
function Gtk.IconView:get_cell_rect(path, cell, rect) end

--- # method Gtk.IconView:get_column_spacing()
---
--- Returns the value of the ::column-spacing property.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@return integer # the space between columns
function Gtk.IconView:get_column_spacing() end

--- # method Gtk.IconView:get_columns()
---
--- Returns the value of the ::columns property.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@return integer # the number of columns, or -1
function Gtk.IconView:get_columns() end

--- # method Gtk.IconView:get_cursor()
---
--- Fills in `path` and `cell` with the current cursor path and cell.
--- If the cursor isn’t currently set, then *`path` will be `nil`.
--- If no cell currently has focus, then *`cell` will be `nil`.
--- 
--- The returned `GtkTreePath` must be freed with `gtk_tree_path_free()`.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`
---@param path? Gtk.TreePath # Return location for the current cursor path, or `nil`
---@param cell? Gtk.CellRenderer # Return location the current focus cell, or `nil`
---@return (boolean|nil) # `true` if the cursor is set.
function Gtk.IconView:get_cursor(path, cell) end

--- # method Gtk.IconView:get_dest_item_at_pos()
---
--- Determines the destination item for a given position.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param drag_x integer # the position to determine the destination item for
---@param drag_y integer # the position to determine the destination item for
---@param path? Gtk.TreePath # Return location for the path of the item, or `nil`.
---@param pos? Gtk.IconViewDropPosition # Return location for the drop position, or `nil`
---@return (boolean|nil) # whether there is an item at the given position.
function Gtk.IconView:get_dest_item_at_pos(drag_x, drag_y, path, pos) end

--- # method Gtk.IconView:get_drag_dest_item()
---
--- Gets information about the item that is highlighted for feedback.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param path? Gtk.TreePath # Return location for the path of the highlighted item, or `nil`.
---@param pos? Gtk.IconViewDropPosition # Return location for the drop position, or `nil`
---@return nil
function Gtk.IconView:get_drag_dest_item(path, pos) end

--- # method Gtk.IconView:get_item_at_pos()
---
--- Finds the path at the point (`x`, `y`), relative to bin_window coordinates.
--- In contrast to `gtk_icon_view_get_path_at_pos()`, this function also
--- obtains the cell at the specified position. The returned path should
--- be freed with `gtk_tree_path_free()`.
--- See `gtk_icon_view_convert_widget_to_bin_window_coords()` for converting
--- widget coordinates to bin_window coordinates.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@param x integer # The x position to be identified
---@param y integer # The y position to be identified
---@param path? Gtk.TreePath # Return location for the path, or `nil`
---@param cell? Gtk.CellRenderer # Return location for the renderer responsible for the cell at (`x`, `y`), or `nil`
---@return (boolean|nil) # `true` if an item exists at the specified position
function Gtk.IconView:get_item_at_pos(x, y, path, cell) end

--- # method Gtk.IconView:get_item_column()
---
--- Gets the column in which the item `path` is currently
--- displayed. Column numbers start at 0.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param path Gtk.TreePath # the `GtkTreePath` of the item
---@return integer # The column in which the item is displayed
function Gtk.IconView:get_item_column(path) end

--- # method Gtk.IconView:get_item_orientation()
---
--- Returns the value of the ::item-orientation property which determines
--- whether the labels are drawn beside the icons instead of below.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@return Gtk.Orientation # the relative position of texts and icons
function Gtk.IconView:get_item_orientation() end

--- # method Gtk.IconView:get_item_padding()
---
--- Returns the value of the ::item-padding property.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@return integer # the padding around items
function Gtk.IconView:get_item_padding() end

--- # method Gtk.IconView:get_item_row()
---
--- Gets the row in which the item `path` is currently
--- displayed. Row numbers start at 0.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param path Gtk.TreePath # the `GtkTreePath` of the item
---@return integer # The row in which the item is displayed
function Gtk.IconView:get_item_row(path) end

--- # method Gtk.IconView:get_item_width()
---
--- Returns the value of the ::item-width property.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@return integer # the width of a single item, or -1
function Gtk.IconView:get_item_width() end

--- # method Gtk.IconView:get_margin()
---
--- Returns the value of the ::margin property.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@return integer # the space at the borders
function Gtk.IconView:get_margin() end

--- # method Gtk.IconView:get_markup_column()
---
--- Returns the column with markup text for `icon_view`.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@return integer # the markup column, or -1 if it’s unset.
function Gtk.IconView:get_markup_column() end

--- # method Gtk.IconView:get_model()
---
--- Returns the model the `GtkIconView` is based on.  Returns `nil` if the
--- model is unset.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@return Gtk.TreeModel # A `GtkTreeModel`, or `nil` if none is currently being used.
function Gtk.IconView:get_model() end

--- # method Gtk.IconView:get_path_at_pos()
---
--- Finds the path at the point (`x`, `y`), relative to bin_window coordinates.
--- See `gtk_icon_view_get_item_at_pos()`, if you are also interested in
--- the cell at the specified position.
--- See `gtk_icon_view_convert_widget_to_bin_window_coords()` for converting
--- widget coordinates to bin_window coordinates.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@param x integer # The x position to be identified
---@param y integer # The y position to be identified
---@return Gtk.TreePath # The `GtkTreePath` corresponding to the icon or `nil` if no icon exists at that position.
function Gtk.IconView:get_path_at_pos(x, y) end

--- # method Gtk.IconView:get_pixbuf_column()
---
--- Returns the column with pixbufs for `icon_view`.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@return integer # the pixbuf column, or -1 if it’s unset.
function Gtk.IconView:get_pixbuf_column() end

--- # method Gtk.IconView:get_reorderable()
---
--- Retrieves whether the user can reorder the list via drag-and-drop.
--- See `gtk_icon_view_set_reorderable()`.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@return (boolean|nil) # `true` if the list can be reordered.
function Gtk.IconView:get_reorderable() end

--- # method Gtk.IconView:get_row_spacing()
---
--- Returns the value of the ::row-spacing property.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@return integer # the space between rows
function Gtk.IconView:get_row_spacing() end

--- # method Gtk.IconView:get_selected_items()
---
--- Creates a list of paths of all selected items. Additionally, if you are
--- planning on modifying the model after calling this function, you may
--- want to convert the returned list into a list of `GtkTreeRowReferences`.
--- To do this, you can use `gtk_tree_row_reference_new()`.
--- 
--- To free the return value, use:
--- ```c
--- g_list_free_full (list, (GDestroyNotify) gtk_tree_path_free);
--- ```
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@return Gtk.TreePath[] # A `GList` containing a `GtkTreePath` for each selected row.
function Gtk.IconView:get_selected_items() end

--- # method Gtk.IconView:get_selection_mode()
---
--- Gets the selection mode of the `icon_view`.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@return Gtk.SelectionMode # the current selection mode
function Gtk.IconView:get_selection_mode() end

--- # method Gtk.IconView:get_spacing()
---
--- Returns the value of the ::spacing property.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@return integer # the space between cells
function Gtk.IconView:get_spacing() end

--- # method Gtk.IconView:get_text_column()
---
--- Returns the column with text for `icon_view`.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@return integer # the text column, or -1 if it’s unset.
function Gtk.IconView:get_text_column() end

--- # method Gtk.IconView:get_tooltip_column()
---
--- Returns the column of `icon_view`’s model which is being used for
--- displaying tooltips on `icon_view`’s rows.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@return integer # the index of the tooltip column that is currently being used, or -1 if this is disabled.
function Gtk.IconView:get_tooltip_column() end

--- # method Gtk.IconView:get_tooltip_context()
---
--- This function is supposed to be used in a `GtkWidget`::query-tooltip
--- signal handler for `GtkIconView`.  The `x`, `y` and `keyboard_tip` values
--- which are received in the signal handler, should be passed to this
--- function without modification.
--- 
--- The return value indicates whether there is an icon view item at the given
--- coordinates (`true`) or not (`false`) for mouse tooltips. For keyboard
--- tooltips the item returned will be the cursor item. When `true`, then any of
--- `model`, `path` and `iter` which have been provided will be set to point to
--- that row and the corresponding model. `x` and `y` will always be converted
--- to be relative to `icon_view`’s bin_window if `keyboard_tooltip` is `false`.
---
--- ---
---
---@param self Gtk.IconView # an `GtkIconView`
---@param x integer # the x coordinate (relative to widget coordinates)
---@param y integer # the y coordinate (relative to widget coordinates)
---@param keyboard_tip (boolean|nil) # whether this is a keyboard tooltip or not
---@param model? Gtk.TreeModel # a pointer to receive a `GtkTreeModel` or `nil`
---@param path? Gtk.TreePath # a pointer to receive a `GtkTreePath` or `nil`
---@param iter? Gtk.TreeIter # a pointer to receive a `GtkTreeIter` or `nil`
---@return (boolean|nil) # whether or not the given tooltip context points to a item
function Gtk.IconView:get_tooltip_context(x, y, keyboard_tip, model, path, iter) end

--- # method Gtk.IconView:get_visible_range()
---
--- Sets `start_path` and `end_path` to be the first and last visible path.
--- Note that there may be invisible paths in between.
--- 
--- Both paths should be freed with `gtk_tree_path_free()` after use.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`
---@param start_path? Gtk.TreePath # Return location for start of region, or `nil`
---@param end_path? Gtk.TreePath # Return location for end of region, or `nil`
---@return (boolean|nil) # `true`, if valid paths were placed in `start_path` and `end_path`
function Gtk.IconView:get_visible_range(start_path, end_path) end

--- # method Gtk.IconView:item_activated()
---
--- Activates the item determined by `path`.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`
---@param path Gtk.TreePath # The `GtkTreePath` to be activated
---@return nil
function Gtk.IconView:item_activated(path) end

--- # method Gtk.IconView:path_is_selected()
---
--- Returns `true` if the icon pointed to by `path` is currently
--- selected. If `path` does not point to a valid location, `false` is returned.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@param path Gtk.TreePath # A `GtkTreePath` to check selection on.
---@return (boolean|nil) # `true` if `path` is selected.
function Gtk.IconView:path_is_selected(path) end

--- # method Gtk.IconView:scroll_to_path()
---
--- Moves the alignments of `icon_view` to the position specified by `path`.
--- `row_align` determines where the row is placed, and `col_align` determines
--- where `column` is placed.  Both are expected to be between 0.0 and 1.0.
--- 0.0 means left/top alignment, 1.0 means right/bottom alignment, 0.5 means
--- center.
--- 
--- If `use_align` is `false`, then the alignment arguments are ignored, and the
--- tree does the minimum amount of work to scroll the item onto the screen.
--- This means that the item will be scrolled to the edge closest to its current
--- position.  If the item is currently visible on the screen, nothing is done.
--- 
--- This function only works if the model is set, and `path` is a valid row on
--- the model. If the model changes before the `icon_view` is realized, the
--- centered path will be modified to reflect this change.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@param path Gtk.TreePath # The path of the item to move to.
---@param use_align (boolean|nil) # whether to use alignment arguments, or `false`.
---@param row_align number # The vertical alignment of the item specified by `path`.
---@param col_align number # The horizontal alignment of the item specified by `path`.
---@return nil
function Gtk.IconView:scroll_to_path(path, use_align, row_align, col_align) end

--- # method Gtk.IconView:select_all()
---
--- Selects all the icons. `icon_view` must has its selection mode set
--- to `GTK_SELECTION_MULTIPLE`.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@return nil
function Gtk.IconView:select_all() end

--- # method Gtk.IconView:select_path()
---
--- Selects the row at `path`.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@param path Gtk.TreePath # The `GtkTreePath` to be selected.
---@return nil
function Gtk.IconView:select_path(path) end

--- # method Gtk.IconView:selected_foreach()
---
--- Calls a function for each selected icon. Note that the model or
--- selection cannot be modified from within this function.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@param func Gtk.IconViewForeachFunc # The function to call for each selected icon.
---@param data? userdata # User data to pass to the function.
---@return nil
function Gtk.IconView:selected_foreach(func, data) end

--- # method Gtk.IconView:set_activate_on_single_click()
---
--- Causes the `GtkIconView`::item-activated signal to be emitted on
--- a single click instead of a double click.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param single (boolean|nil) # `true` to emit item-activated on a single click
---@return nil
function Gtk.IconView:set_activate_on_single_click(single) end

--- # method Gtk.IconView:set_column_spacing()
---
--- Sets the ::column-spacing property which specifies the space
--- which is inserted between the columns of the icon view.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param column_spacing integer # the column spacing
---@return nil
function Gtk.IconView:set_column_spacing(column_spacing) end

--- # method Gtk.IconView:set_columns()
---
--- Sets the ::columns property which determines in how
--- many columns the icons are arranged. If `columns` is
--- -1, the number of columns will be chosen automatically
--- to fill the available area.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param columns integer # the number of columns
---@return nil
function Gtk.IconView:set_columns(columns) end

--- # method Gtk.IconView:set_cursor()
---
--- Sets the current keyboard focus to be at `path`, and selects it.  This is
--- useful when you want to focus the user’s attention on a particular item.
--- If `cell` is not `nil`, then focus is given to the cell specified by
--- it. Additionally, if `start_editing` is `true`, then editing should be
--- started in the specified cell.
--- 
--- This function is often followed by `gtk_widget_grab_focus
--- (icon_view)` in order to give keyboard focus to the widget.
--- Please note that editing can only happen when the widget is realized.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`
---@param path Gtk.TreePath # A `GtkTreePath`
---@param cell? Gtk.CellRenderer # One of the cell renderers of `icon_view`, or `nil`
---@param start_editing (boolean|nil) # `true` if the specified cell should start being edited.
---@return nil
function Gtk.IconView:set_cursor(path, cell, start_editing) end

--- # method Gtk.IconView:set_drag_dest_item()
---
--- Sets the item that is highlighted for feedback.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param path? Gtk.TreePath # The path of the item to highlight, or `nil`.
---@param pos Gtk.IconViewDropPosition # Specifies where to drop, relative to the item
---@return nil
function Gtk.IconView:set_drag_dest_item(path, pos) end

--- # method Gtk.IconView:set_item_orientation()
---
--- Sets the ::item-orientation property which determines whether the labels
--- are drawn beside the icons instead of below.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param orientation Gtk.Orientation # the relative position of texts and icons
---@return nil
function Gtk.IconView:set_item_orientation(orientation) end

--- # method Gtk.IconView:set_item_padding()
---
--- Sets the `GtkIconView`:item-padding property which specifies the padding
--- around each of the icon view’s items.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param item_padding integer # the item padding
---@return nil
function Gtk.IconView:set_item_padding(item_padding) end

--- # method Gtk.IconView:set_item_width()
---
--- Sets the ::item-width property which specifies the width
--- to use for each item. If it is set to -1, the icon view will
--- automatically determine a suitable item size.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param item_width integer # the width for each item
---@return nil
function Gtk.IconView:set_item_width(item_width) end

--- # method Gtk.IconView:set_margin()
---
--- Sets the ::margin property which specifies the space
--- which is inserted at the top, bottom, left and right
--- of the icon view.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param margin integer # the margin
---@return nil
function Gtk.IconView:set_margin(margin) end

--- # method Gtk.IconView:set_markup_column()
---
--- Sets the column with markup information for `icon_view` to be
--- `column`. The markup column must be of type `G_TYPE_STRING`.
--- If the markup column is set to something, it overrides
--- the text column set by `gtk_icon_view_set_text_column()`.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@param column integer # A column in the currently used model, or -1 to display no text
---@return nil
function Gtk.IconView:set_markup_column(column) end

--- # method Gtk.IconView:set_model()
---
--- Sets the model for a `GtkIconView`.
--- If the `icon_view` already has a model set, it will remove
--- it before setting the new model.  If `model` is `nil`, then
--- it will unset the old model.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@param model? Gtk.TreeModel # The model.
---@return nil
function Gtk.IconView:set_model(model) end

--- # method Gtk.IconView:set_pixbuf_column()
---
--- Sets the column with pixbufs for `icon_view` to be `column`. The pixbuf
--- column must be of type `GDK_TYPE_PIXBUF`
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@param column integer # A column in the currently used model, or -1 to disable
---@return nil
function Gtk.IconView:set_pixbuf_column(column) end

--- # method Gtk.IconView:set_reorderable()
---
--- This function is a convenience function to allow you to reorder models that
--- support the `GtkTreeDragSourceIface` and the `GtkTreeDragDestIface`.  Both
--- `GtkTreeStore` and `GtkListStore` support these.  If `reorderable` is `true`, then
--- the user can reorder the model by dragging and dropping rows.  The
--- developer can listen to these changes by connecting to the model's
--- row_inserted and row_deleted signals. The reordering is implemented by setting up
--- the icon view as a drag source and destination. Therefore, drag and
--- drop can not be used in a reorderable view for any other purpose.
--- 
--- This function does not give you any degree of control over the order -- any
--- reordering is allowed.  If more control is needed, you should probably
--- handle drag and drop manually.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@param reorderable (boolean|nil) # `true`, if the list of items can be reordered.
---@return nil
function Gtk.IconView:set_reorderable(reorderable) end

--- # method Gtk.IconView:set_row_spacing()
---
--- Sets the ::row-spacing property which specifies the space
--- which is inserted between the rows of the icon view.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param row_spacing integer # the row spacing
---@return nil
function Gtk.IconView:set_row_spacing(row_spacing) end

--- # method Gtk.IconView:set_selection_mode()
---
--- Sets the selection mode of the `icon_view`.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@param mode Gtk.SelectionMode # The selection mode
---@return nil
function Gtk.IconView:set_selection_mode(mode) end

--- # method Gtk.IconView:set_spacing()
---
--- Sets the ::spacing property which specifies the space
--- which is inserted between the cells (i.e. the icon and
--- the text) of an item.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param spacing integer # the spacing
---@return nil
function Gtk.IconView:set_spacing(spacing) end

--- # method Gtk.IconView:set_text_column()
---
--- Sets the column with text for `icon_view` to be `column`. The text
--- column must be of type `G_TYPE_STRING`.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@param column integer # A column in the currently used model, or -1 to display no text
---@return nil
function Gtk.IconView:set_text_column(column) end

--- # method Gtk.IconView:set_tooltip_cell()
---
--- Sets the tip area of `tooltip` to the area which `cell` occupies in
--- the item pointed to by `path`. See also `gtk_tooltip_set_tip_area()`.
--- 
--- See also `gtk_icon_view_set_tooltip_column()` for a simpler alternative.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param tooltip Gtk.Tooltip # a `GtkTooltip`
---@param path Gtk.TreePath # a `GtkTreePath`
---@param cell? Gtk.CellRenderer # a `GtkCellRenderer` or `nil`
---@return nil
function Gtk.IconView:set_tooltip_cell(tooltip, path, cell) end

--- # method Gtk.IconView:set_tooltip_column()
---
--- If you only plan to have simple (text-only) tooltips on full items, you
--- can use this function to have `GtkIconView` handle these automatically
--- for you. `column` should be set to the column in `icon_view`’s model
--- containing the tooltip texts, or -1 to disable this feature.
--- 
--- When enabled, `GtkWidget`:has-tooltip will be set to `true` and
--- `icon_view` will connect a `GtkWidget`::query-tooltip signal handler.
--- 
--- Note that the signal handler sets the text with `gtk_tooltip_set_markup()`,
--- so &, <, etc have to be escaped in the text.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param column integer # an integer, which is a valid column number for `icon_view`’s model
---@return nil
function Gtk.IconView:set_tooltip_column(column) end

--- # method Gtk.IconView:set_tooltip_item()
---
--- Sets the tip area of `tooltip` to be the area covered by the item at `path`.
--- See also `gtk_icon_view_set_tooltip_column()` for a simpler alternative.
--- See also `gtk_tooltip_set_tip_area()`.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@param tooltip Gtk.Tooltip # a `GtkTooltip`
---@param path Gtk.TreePath # a `GtkTreePath`
---@return nil
function Gtk.IconView:set_tooltip_item(tooltip, path) end

--- # method Gtk.IconView:unselect_all()
---
--- Unselects all the icons.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@return nil
function Gtk.IconView:unselect_all() end

--- # method Gtk.IconView:unselect_path()
---
--- Unselects the row at `path`.
---
--- ---
---
---@param self Gtk.IconView # A `GtkIconView`.
---@param path Gtk.TreePath # The `GtkTreePath` to be unselected.
---@return nil
function Gtk.IconView:unselect_path(path) end

--- # method Gtk.IconView:unset_model_drag_dest()
---
--- Undoes the effect of `gtk_icon_view_enable_model_drag_dest()`. Calling this
--- method sets `GtkIconView`:reorderable to `false`.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@return nil
function Gtk.IconView:unset_model_drag_dest() end

--- # method Gtk.IconView:unset_model_drag_source()
---
--- Undoes the effect of `gtk_icon_view_enable_model_drag_source()`. Calling this
--- method sets `GtkIconView`:reorderable to `false`.
---
--- ---
---
---@param self Gtk.IconView # a `GtkIconView`
---@return nil
function Gtk.IconView:unset_model_drag_source() end

--- # function Gtk.IconView.new()
---
--- Creates a new `GtkIconView` widget
---
--- ---
---
---@return Gtk.Widget # A newly created `GtkIconView` widget
function Gtk.IconView.new() end

--- # function Gtk.IconView.new_with_area()
---
--- Creates a new `GtkIconView` widget using the
--- specified `area` to layout cells inside the icons.
---
--- ---
---
---@param area Gtk.CellArea # the `GtkCellArea` to use to layout cells
---@return Gtk.Widget # A newly created `GtkIconView` widget
function Gtk.IconView.new_with_area(area) end

--- # function Gtk.IconView.new_with_model()
---
--- Creates a new `GtkIconView` widget with the model `model`.
---
--- ---
---
---@param model Gtk.TreeModel # The model.
---@return Gtk.Widget # A newly created `GtkIconView` widget.
function Gtk.IconView.new_with_model(model) end

--- # class Gtk.IconViewAccessible
---
---@class Gtk.IconViewAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component, Gtk.Atk.Selection
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.IconViewAccessiblePrivate
Gtk.IconViewAccessible = {}

--- # record Gtk.IconViewAccessibleClass
---
---@class Gtk.IconViewAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.IconViewAccessibleClass = {}

--- # record Gtk.IconViewAccessiblePrivate
---
---@class Gtk.IconViewAccessiblePrivate
Gtk.IconViewAccessiblePrivate = {}

--- # record Gtk.IconViewClass
---
---@class Gtk.IconViewClass
---@field parent_class Gtk.ContainerClass
---@field item_activated fun(icon_view: Gtk.IconView, path: Gtk.TreePath): nil
---@field selection_changed fun(icon_view: Gtk.IconView): nil
---@field select_all fun(icon_view: Gtk.IconView): nil
---@field unselect_all fun(icon_view: Gtk.IconView): nil
---@field select_cursor_item fun(icon_view: Gtk.IconView): nil
---@field toggle_cursor_item fun(icon_view: Gtk.IconView): nil
---@field move_cursor fun(icon_view: Gtk.IconView, step: Gtk.MovementStep, count: integer): (boolean|nil)
---@field activate_cursor_item fun(icon_view: Gtk.IconView): (boolean|nil)
Gtk.IconViewClass = {}

---@enum Gtk.IconViewDropPosition
Gtk.IconViewDropPosition = {}

---@alias Gtk.IconViewForeachFunc fun(icon_view: Gtk.IconView, path: Gtk.TreePath, data: userdata): nil

--- # record Gtk.IconViewPrivate
---
---@class Gtk.IconViewPrivate
Gtk.IconViewPrivate = {}

--- # class Gtk.Image
---
--- The `GtkImage` widget displays an image. Various kinds of object
--- can be displayed as an image; most typically, you would load a
--- `GdkPixbuf` ("pixel buffer") from a file, and then display that.
--- There’s a convenience function to do this, `gtk_image_new_from_file()`,
--- used as follows:
--- ```c
---   GtkWidget *image;
---   image = gtk_image_new_from_file ("myfile.png");
--- ```
--- If the file isn’t loaded successfully, the image will contain a
--- “broken image” icon similar to that used in many web browsers.
--- If you want to handle errors in loading the file yourself,
--- for example by displaying an error message, then load the image with
--- `gdk_pixbuf_new_from_file()`, then create the `GtkImage` with
--- `gtk_image_new_from_pixbuf()`.
--- 
--- The image file may contain an animation, if so the `GtkImage` will
--- display an animation (`GdkPixbufAnimation`) instead of a static image.
--- 
--- `GtkImage` is a subclass of `GtkMisc`, which implies that you can
--- align it (center, left, right) and add padding to it, using
--- `GtkMisc` methods.
--- 
--- `GtkImage` is a “no window” widget (has no `GdkWindow` of its own),
--- so by default does not receive events. If you want to receive events
--- on the image, such as button clicks, place the image inside a
--- `GtkEventBox`, then connect to the event signals on the event box.
--- 
--- ## Handling button press events on a `GtkImage`.
--- 
--- ```c
---   static gboolean
---   button_press_callback (GtkWidget      *event_box,
---                          GdkEventButton *event,
---                          gpointer        data)
---   {
---     g_print ("Event box clicked at coordinates %f,%f\n",
---              event->x, event->y);
--- 
---     // Returning TRUE means we handled the event, so the signal
---     // emission should be stopped (don’t call any further callbacks
---     // that may be connected). Return FALSE to continue invoking callbacks.
---     return TRUE;
---   }
--- 
---   static GtkWidget*
---   create_image (void)
---   {
---     GtkWidget *image;
---     GtkWidget *event_box;
--- 
---     image = gtk_image_new_from_file ("myfile.png");
--- 
---     event_box = gtk_event_box_new ();
--- 
---     gtk_container_add (GTK_CONTAINER (event_box), image);
--- 
---     g_signal_connect (G_OBJECT (event_box),
---                       "button_press_event",
---                       G_CALLBACK (button_press_callback),
---                       image);
--- 
---     return image;
---   }
--- ```
--- 
--- When handling events on the event box, keep in mind that coordinates
--- in the image may be different from event box coordinates due to
--- the alignment and padding settings on the image (see `GtkMisc`).
--- The simplest way to solve this is to set the alignment to 0.0
--- (left/top), and set the padding to zero. Then the origin of
--- the image will be the same as the origin of the event box.
--- 
--- Sometimes an application will want to avoid depending on external data
--- files, such as image files. GTK+ comes with a program to avoid this,
--- called “gdk-pixbuf-csource”. This library
--- allows you to convert an image into a C variable declaration, which
--- can then be loaded into a `GdkPixbuf` using
--- `gdk_pixbuf_new_from_inline()`.
--- 
--- # CSS nodes
--- 
--- GtkImage has a single CSS node with the name image. The style classes
--- may appear on image CSS nodes: .icon-dropshadow, .lowres-icon.
---
--- ---
---
---@class Gtk.Image : Gtk.Misc, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field misc Gtk.Misc
---@field priv Gtk.ImagePrivate
---@operator call: Gtk.Image
Gtk.Image = {}

--- # method Gtk.Image:clear()
---
--- Resets the image to be empty.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@return nil
function Gtk.Image:clear() end

--- # method Gtk.Image:get_animation()
---
--- Gets the `GdkPixbufAnimation` being displayed by the `GtkImage`.
--- The storage type of the image must be %GTK_IMAGE_EMPTY or
--- %GTK_IMAGE_ANIMATION (see `gtk_image_get_storage_type()`).
--- The caller of this function does not own a reference to the
--- returned animation.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@return GdkPixbuf.PixbufAnimation # the displayed animation, or `nil` if the image is empty
function Gtk.Image:get_animation() end

--- # method Gtk.Image:get_gicon()
---
--- Gets the `GIcon` and size being displayed by the `GtkImage`.
--- The storage type of the image must be %GTK_IMAGE_EMPTY or
--- %GTK_IMAGE_GICON (see `gtk_image_get_storage_type()`).
--- The caller of this function does not own a reference to the
--- returned `GIcon`.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@param gicon? Gio.Icon # place to store a `GIcon`, or `nil`
---@param size? integer # place to store an icon size (`GtkIconSize`), or `nil`
---@return nil
function Gtk.Image:get_gicon(gicon, size) end

--- # method Gtk.Image:get_icon_name()
---
--- Gets the icon name and size being displayed by the `GtkImage`.
--- The storage type of the image must be %GTK_IMAGE_EMPTY or
--- %GTK_IMAGE_ICON_NAME (see `gtk_image_get_storage_type()`).
--- The returned string is owned by the `GtkImage` and should not
--- be freed.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@param icon_name? string # place to store an icon name, or `nil`
---@param size? integer # place to store an icon size (`GtkIconSize`), or `nil`
---@return nil
function Gtk.Image:get_icon_name(icon_name, size) end

--- # method Gtk.Image:get_icon_set()
---
--- Gets the icon set and size being displayed by the `GtkImage`.
--- The storage type of the image must be %GTK_IMAGE_EMPTY or
--- %GTK_IMAGE_ICON_SET (see `gtk_image_get_storage_type()`).
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@param icon_set? Gtk.IconSet # location to store a `GtkIconSet`, or `nil`
---@param size? integer # location to store a stock icon size (`GtkIconSize`), or `nil`
---@return nil
function Gtk.Image:get_icon_set(icon_set, size) end

--- # method Gtk.Image:get_pixbuf()
---
--- Gets the `GdkPixbuf` being displayed by the `GtkImage`.
--- The storage type of the image must be %GTK_IMAGE_EMPTY or
--- %GTK_IMAGE_PIXBUF (see `gtk_image_get_storage_type()`).
--- The caller of this function does not own a reference to the
--- returned pixbuf.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@return GdkPixbuf.Pixbuf # the displayed pixbuf, or `nil` if the image is empty
function Gtk.Image:get_pixbuf() end

--- # method Gtk.Image:get_pixel_size()
---
--- Gets the pixel size used for named icons.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@return integer # the pixel size used for named icons.
function Gtk.Image:get_pixel_size() end

--- # method Gtk.Image:get_stock()
---
--- Gets the stock icon name and size being displayed by the `GtkImage`.
--- The storage type of the image must be %GTK_IMAGE_EMPTY or
--- %GTK_IMAGE_STOCK (see `gtk_image_get_storage_type()`).
--- The returned string is owned by the `GtkImage` and should not
--- be freed.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@param stock_id? string # place to store a stock icon name, or `nil`
---@param size? integer # place to store a stock icon size (`GtkIconSize`), or `nil`
---@return nil
function Gtk.Image:get_stock(stock_id, size) end

--- # method Gtk.Image:get_storage_type()
---
--- Gets the type of representation being used by the `GtkImage`
--- to store image data. If the `GtkImage` has no image data,
--- the return value will be %GTK_IMAGE_EMPTY.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@return Gtk.ImageType # image representation being used
function Gtk.Image:get_storage_type() end

--- # method Gtk.Image:set_from_animation()
---
--- Causes the `GtkImage` to display the given animation (or display
--- nothing, if you set the animation to `nil`).
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@param animation GdkPixbuf.PixbufAnimation # the `GdkPixbufAnimation`
---@return nil
function Gtk.Image:set_from_animation(animation) end

--- # method Gtk.Image:set_from_file()
---
--- See `gtk_image_new_from_file()` for details.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@param filename? string # a filename or `nil`
---@return nil
function Gtk.Image:set_from_file(filename) end

--- # method Gtk.Image:set_from_gicon()
---
--- See `gtk_image_new_from_gicon()` for details.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@param icon Gio.Icon # an icon
---@param size integer # an icon size (`GtkIconSize`)
---@return nil
function Gtk.Image:set_from_gicon(icon, size) end

--- # method Gtk.Image:set_from_icon_name()
---
--- See `gtk_image_new_from_icon_name()` for details.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@param icon_name? string # an icon name or `nil`
---@param size integer # an icon size (`GtkIconSize`)
---@return nil
function Gtk.Image:set_from_icon_name(icon_name, size) end

--- # method Gtk.Image:set_from_icon_set()
---
--- See `gtk_image_new_from_icon_set()` for details.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@param icon_set Gtk.IconSet # a `GtkIconSet`
---@param size integer # a stock icon size (`GtkIconSize`)
---@return nil
function Gtk.Image:set_from_icon_set(icon_set, size) end

--- # method Gtk.Image:set_from_pixbuf()
---
--- See `gtk_image_new_from_pixbuf()` for details.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@param pixbuf? GdkPixbuf.Pixbuf # a `GdkPixbuf` or `nil`
---@return nil
function Gtk.Image:set_from_pixbuf(pixbuf) end

--- # method Gtk.Image:set_from_resource()
---
--- See `gtk_image_new_from_resource()` for details.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@param resource_path? string # a resource path or `nil`
---@return nil
function Gtk.Image:set_from_resource(resource_path) end

--- # method Gtk.Image:set_from_stock()
---
--- See `gtk_image_new_from_stock()` for details.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@param stock_id string # a stock icon name
---@param size integer # a stock icon size (`GtkIconSize`)
---@return nil
function Gtk.Image:set_from_stock(stock_id, size) end

--- # method Gtk.Image:set_from_surface()
---
--- See `gtk_image_new_from_surface()` for details.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@param surface? cairo.Surface # a cairo_surface_t or `nil`
---@return nil
function Gtk.Image:set_from_surface(surface) end

--- # method Gtk.Image:set_pixel_size()
---
--- Sets the pixel size to use for named icons. If the pixel size is set
--- to a value != -1, it is used instead of the icon size set by
--- `gtk_image_set_from_icon_name()`.
---
--- ---
---
---@param self Gtk.Image # a `GtkImage`
---@param pixel_size integer # the new pixel size
---@return nil
function Gtk.Image:set_pixel_size(pixel_size) end

--- # function Gtk.Image.new()
---
--- Creates a new empty `GtkImage` widget.
---
--- ---
---
---@return Gtk.Widget # a newly created `GtkImage` widget.
function Gtk.Image.new() end

--- # function Gtk.Image.new_from_animation()
---
--- Creates a `GtkImage` displaying the given animation.
--- The `GtkImage` does not assume a reference to the
--- animation; you still need to unref it if you own references.
--- `GtkImage` will add its own reference rather than adopting yours.
--- 
--- Note that the animation frames are shown using a timeout with
--- `G_PRIORITY_DEFAULT`. When using animations to indicate busyness,
--- keep in mind that the animation will only be shown if the main loop
--- is not busy with something that has a higher priority.
---
--- ---
---
---@param animation GdkPixbuf.PixbufAnimation # an animation
---@return Gtk.Widget # a new `GtkImage` widget
function Gtk.Image.new_from_animation(animation) end

--- # function Gtk.Image.new_from_file()
---
--- Creates a new `GtkImage` displaying the file `filename`. If the file
--- isn’t found or can’t be loaded, the resulting `GtkImage` will
--- display a “broken image” icon. This function never returns `nil`,
--- it always returns a valid `GtkImage` widget.
--- 
--- If the file contains an animation, the image will contain an
--- animation.
--- 
--- If you need to detect failures to load the file, use
--- `gdk_pixbuf_new_from_file()` to load the file yourself, then create
--- the `GtkImage` from the pixbuf. (Or for animations, use
--- `gdk_pixbuf_animation_new_from_file()`).
--- 
--- The storage type (`gtk_image_get_storage_type()`) of the returned
--- image is not defined, it will be whatever is appropriate for
--- displaying the file.
---
--- ---
---
---@param filename string # a filename
---@return Gtk.Widget # a new `GtkImage`
function Gtk.Image.new_from_file(filename) end

--- # function Gtk.Image.new_from_gicon()
---
--- Creates a `GtkImage` displaying an icon from the current icon theme.
--- If the icon name isn’t known, a “broken image” icon will be
--- displayed instead.  If the current icon theme is changed, the icon
--- will be updated appropriately.
---
--- ---
---
---@param icon Gio.Icon # an icon
---@param size integer # a stock icon size (`GtkIconSize`)
---@return Gtk.Widget # a new `GtkImage` displaying the themed icon
function Gtk.Image.new_from_gicon(icon, size) end

--- # function Gtk.Image.new_from_icon_name()
---
--- Creates a `GtkImage` displaying an icon from the current icon theme.
--- If the icon name isn’t known, a “broken image” icon will be
--- displayed instead.  If the current icon theme is changed, the icon
--- will be updated appropriately.
---
--- ---
---
---@param icon_name? string # an icon name or `nil`
---@param size integer # a stock icon size (`GtkIconSize`)
---@return Gtk.Widget # a new `GtkImage` displaying the themed icon
function Gtk.Image.new_from_icon_name(icon_name, size) end

--- # function Gtk.Image.new_from_icon_set()
---
--- Creates a `GtkImage` displaying an icon set. Sample stock sizes are
--- `GTK_ICON_SIZE_MENU`, `GTK_ICON_SIZE_SMALL_TOOLBAR`. Instead of using
--- this function, usually it’s better to create a `GtkIconFactory`, put
--- your icon sets in the icon factory, add the icon factory to the
--- list of default factories with `gtk_icon_factory_add_default()`, and
--- then use `gtk_image_new_from_stock()`. This will allow themes to
--- override the icon you ship with your application.
--- 
--- The `GtkImage` does not assume a reference to the
--- icon set; you still need to unref it if you own references.
--- `GtkImage` will add its own reference rather than adopting yours.
---
--- ---
---
---@param icon_set Gtk.IconSet # a `GtkIconSet`
---@param size integer # a stock icon size (`GtkIconSize`)
---@return Gtk.Widget # a new `GtkImage`
function Gtk.Image.new_from_icon_set(icon_set, size) end

--- # function Gtk.Image.new_from_pixbuf()
---
--- Creates a new `GtkImage` displaying `pixbuf`.
--- The `GtkImage` does not assume a reference to the
--- pixbuf; you still need to unref it if you own references.
--- `GtkImage` will add its own reference rather than adopting yours.
--- 
--- Note that this function just creates an `GtkImage` from the pixbuf. The
--- `GtkImage` created will not react to state changes. Should you want that,
--- you should use `gtk_image_new_from_icon_name()`.
---
--- ---
---
---@param pixbuf? GdkPixbuf.Pixbuf # a `GdkPixbuf`, or `nil`
---@return Gtk.Widget # a new `GtkImage`
function Gtk.Image.new_from_pixbuf(pixbuf) end

--- # function Gtk.Image.new_from_resource()
---
--- Creates a new `GtkImage` displaying the resource file `resource_path`. If the file
--- isn’t found or can’t be loaded, the resulting `GtkImage` will
--- display a “broken image” icon. This function never returns `nil`,
--- it always returns a valid `GtkImage` widget.
--- 
--- If the file contains an animation, the image will contain an
--- animation.
--- 
--- If you need to detect failures to load the file, use
--- `gdk_pixbuf_new_from_file()` to load the file yourself, then create
--- the `GtkImage` from the pixbuf. (Or for animations, use
--- `gdk_pixbuf_animation_new_from_file()`).
--- 
--- The storage type (`gtk_image_get_storage_type()`) of the returned
--- image is not defined, it will be whatever is appropriate for
--- displaying the file.
---
--- ---
---
---@param resource_path string # a resource path
---@return Gtk.Widget # a new `GtkImage`
function Gtk.Image.new_from_resource(resource_path) end

--- # function Gtk.Image.new_from_stock()
---
--- Creates a `GtkImage` displaying a stock icon. Sample stock icon
--- names are `GTK_STOCK_OPEN`, `GTK_STOCK_QUIT`. Sample stock sizes
--- are `GTK_ICON_SIZE_MENU`, `GTK_ICON_SIZE_SMALL_TOOLBAR`. If the stock
--- icon name isn’t known, the image will be empty.
--- You can register your own stock icon names, see
--- `gtk_icon_factory_add_default()` and `gtk_icon_factory_add()`.
---
--- ---
---
---@param stock_id string # a stock icon name
---@param size integer # a stock icon size (`GtkIconSize`)
---@return Gtk.Widget # a new `GtkImage` displaying the stock icon
function Gtk.Image.new_from_stock(stock_id, size) end

--- # function Gtk.Image.new_from_surface()
---
--- Creates a new `GtkImage` displaying `surface`.
--- The `GtkImage` does not assume a reference to the
--- surface; you still need to unref it if you own references.
--- `GtkImage` will add its own reference rather than adopting yours.
---
--- ---
---
---@param surface? cairo.Surface # a `cairo_surface_t`, or `nil`
---@return Gtk.Widget # a new `GtkImage`
function Gtk.Image.new_from_surface(surface) end

--- # class Gtk.ImageAccessible
---
---@class Gtk.ImageAccessible : Gtk.WidgetAccessible, Gtk.Atk.Component, Gtk.Atk.Image
---@field parent Gtk.WidgetAccessible
---@field priv Gtk.ImageAccessiblePrivate
Gtk.ImageAccessible = {}

--- # record Gtk.ImageAccessibleClass
---
---@class Gtk.ImageAccessibleClass
---@field parent_class Gtk.WidgetAccessibleClass
Gtk.ImageAccessibleClass = {}

--- # record Gtk.ImageAccessiblePrivate
---
---@class Gtk.ImageAccessiblePrivate
Gtk.ImageAccessiblePrivate = {}

--- # class Gtk.ImageCellAccessible
---
---@class Gtk.ImageCellAccessible : Gtk.RendererCellAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.Image, Gtk.Atk.TableCell
---@field parent Gtk.RendererCellAccessible
---@field priv Gtk.ImageCellAccessiblePrivate
Gtk.ImageCellAccessible = {}

--- # record Gtk.ImageCellAccessibleClass
---
---@class Gtk.ImageCellAccessibleClass
---@field parent_class Gtk.RendererCellAccessibleClass
Gtk.ImageCellAccessibleClass = {}

--- # record Gtk.ImageCellAccessiblePrivate
---
---@class Gtk.ImageCellAccessiblePrivate
Gtk.ImageCellAccessiblePrivate = {}

--- # record Gtk.ImageClass
---
---@class Gtk.ImageClass
---@field parent_class Gtk.MiscClass
Gtk.ImageClass = {}

--- # class Gtk.ImageMenuItem
---
--- A GtkImageMenuItem is a menu item which has an icon next to the text label.
--- 
--- This is functionally equivalent to:
--- 
--- ```c
---   GtkWidget *box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 6);
---   GtkWidget *icon = gtk_image_new_from_icon_name ("folder-music-symbolic", GTK_ICON_SIZE_MENU);
---   GtkWidget *label = gtk_label_new ("Music");
---   GtkWidget *menu_item = gtk_menu_item_new ();
--- 
---   gtk_container_add (GTK_CONTAINER (box), icon);
---   gtk_container_add (GTK_CONTAINER (box), label);
--- 
---   gtk_container_add (GTK_CONTAINER (menu_item), box);
--- 
---   gtk_widget_show_all (menu_item);
--- ```
--- 
--- Note that the user may disable display of menu icons using
--- the `GtkSettings`:gtk-menu-images setting, so make sure to still
--- fill in the text label. If you want to ensure that your menu items
--- show an icon you are strongly encouraged to use a `GtkMenuItem`
--- with a `GtkImage` instead.
--- 
--- `GtkImageMenuItem` has been deprecated since GTK+ 3.10. If you want to
--- display an icon in a menu item, you should use `GtkMenuItem` and pack a
--- `GtkBox` with a `GtkImage` and a `GtkLabel` instead. You should also consider
--- using `GtkBuilder` and the XML `GMenu` description for creating menus, by
--- following the [GMenu guide][https://developer.gnome.org/GMenu/]. You should
--- consider using icons in menu items only sparingly, and for "objects" (or
--- "nouns") elements only, like bookmarks, files, and links; "actions" (or
--- "verbs") should not have icons.
--- 
--- Furthermore, if you would like to display keyboard accelerator, you must
--- pack the accel label into the box using `gtk_box_pack_end()` and align the
--- label, otherwise the accelerator will not display correctly. The following
--- code snippet adds a keyboard accelerator to the menu item, with a key
--- binding of Ctrl+M:
--- 
--- ```c
---   GtkWidget *box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 6);
---   GtkWidget *icon = gtk_image_new_from_icon_name ("folder-music-symbolic", GTK_ICON_SIZE_MENU);
---   GtkWidget *label = gtk_accel_label_new ("Music");
---   GtkWidget *menu_item = gtk_menu_item_new ();
---   GtkAccelGroup *accel_group = gtk_accel_group_new ();
--- 
---   gtk_container_add (GTK_CONTAINER (box), icon);
--- 
---   gtk_label_set_use_underline (GTK_LABEL (label), TRUE);
---   gtk_label_set_xalign (GTK_LABEL (label), 0.0);
--- 
---   gtk_widget_add_accelerator (menu_item, "activate", accel_group,
---                               GDK_KEY_m, GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);
---   gtk_accel_label_set_accel_widget (GTK_ACCEL_LABEL (label), menu_item);
--- 
---   gtk_box_pack_end (GTK_BOX (box), label, TRUE, TRUE, 0);
--- 
---   gtk_container_add (GTK_CONTAINER (menu_item), box);
--- 
---   gtk_widget_show_all (menu_item);
--- ```
---
--- ---
---
---@class Gtk.ImageMenuItem : Gtk.MenuItem, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field menu_item Gtk.MenuItem
---@field priv Gtk.ImageMenuItemPrivate
---@operator call: Gtk.ImageMenuItem
Gtk.ImageMenuItem = {}

--- # method Gtk.ImageMenuItem:get_always_show_image()
---
--- Returns whether the menu item will ignore the `GtkSettings`:gtk-menu-images
--- setting and always show the image, if available.
---
--- ---
---
---@param self Gtk.ImageMenuItem # a `GtkImageMenuItem`
---@return (boolean|nil) # `true` if the menu item will always show the image
function Gtk.ImageMenuItem:get_always_show_image() end

--- # method Gtk.ImageMenuItem:get_image()
---
--- Gets the widget that is currently set as the image of `image_menu_item`.
--- See `gtk_image_menu_item_set_image()`.
---
--- ---
---
---@param self Gtk.ImageMenuItem # a `GtkImageMenuItem`
---@return Gtk.Widget # the widget set as image of `image_menu_item`
function Gtk.ImageMenuItem:get_image() end

--- # method Gtk.ImageMenuItem:get_use_stock()
---
--- Checks whether the label set in the menuitem is used as a
--- stock id to select the stock item for the item.
---
--- ---
---
---@param self Gtk.ImageMenuItem # a `GtkImageMenuItem`
---@return (boolean|nil) # `true` if the label set in the menuitem is used as a stock id to select the stock item for the item
function Gtk.ImageMenuItem:get_use_stock() end

--- # method Gtk.ImageMenuItem:set_accel_group()
---
--- Specifies an `accel_group` to add the menu items accelerator to
--- (this only applies to stock items so a stock item must already
--- be set, make sure to call `gtk_image_menu_item_set_use_stock()`
--- and `gtk_menu_item_set_label()` with a valid stock item first).
--- 
--- If you want this menu item to have changeable accelerators then
--- you shouldnt need this (see `gtk_image_menu_item_new_from_stock()`).
---
--- ---
---
---@param self Gtk.ImageMenuItem # a `GtkImageMenuItem`
---@param accel_group Gtk.AccelGroup # the `GtkAccelGroup`
---@return nil
function Gtk.ImageMenuItem:set_accel_group(accel_group) end

--- # method Gtk.ImageMenuItem:set_always_show_image()
---
--- If `true`, the menu item will ignore the `GtkSettings`:gtk-menu-images
--- setting and always show the image, if available.
--- 
--- Use this property if the menuitem would be useless or hard to use
--- without the image.
---
--- ---
---
---@param self Gtk.ImageMenuItem # a `GtkImageMenuItem`
---@param always_show (boolean|nil) # `true` if the menuitem should always show the image
---@return nil
function Gtk.ImageMenuItem:set_always_show_image(always_show) end

--- # method Gtk.ImageMenuItem:set_image()
---
--- Sets the image of `image_menu_item` to the given widget.
--- Note that it depends on the show-menu-images setting whether
--- the image will be displayed or not.
---
--- ---
---
---@param self Gtk.ImageMenuItem # a `GtkImageMenuItem`.
---@param image? Gtk.Widget # a widget to set as the image for the menu item.
---@return nil
function Gtk.ImageMenuItem:set_image(image) end

--- # method Gtk.ImageMenuItem:set_use_stock()
---
--- If `true`, the label set in the menuitem is used as a
--- stock id to select the stock item for the item.
---
--- ---
---
---@param self Gtk.ImageMenuItem # a `GtkImageMenuItem`
---@param use_stock (boolean|nil) # `true` if the menuitem should use a stock item
---@return nil
function Gtk.ImageMenuItem:set_use_stock(use_stock) end

--- # function Gtk.ImageMenuItem.new()
---
--- Creates a new `GtkImageMenuItem` with an empty label.
---
--- ---
---
---@return Gtk.Widget # a new `GtkImageMenuItem`
function Gtk.ImageMenuItem.new() end

--- # function Gtk.ImageMenuItem.new_from_stock()
---
--- Creates a new `GtkImageMenuItem` containing the image and text from a
--- stock item. Some stock ids have preprocessor macros like `GTK_STOCK_OK`
--- and `GTK_STOCK_APPLY`.
--- 
--- If you want this menu item to have changeable accelerators, then pass in
--- `nil` for accel_group. Next call `gtk_menu_item_set_accel_path()` with an
--- appropriate path for the menu item, use `gtk_stock_lookup()` to look up the
--- standard accelerator for the stock item, and if one is found, call
--- `gtk_accel_map_add_entry()` to register it.
---
--- ---
---
---@param stock_id string # the name of the stock item.
---@param accel_group? Gtk.AccelGroup # the `GtkAccelGroup` to add the menu items accelerator to, or `nil`.
---@return Gtk.Widget # a new `GtkImageMenuItem`.
function Gtk.ImageMenuItem.new_from_stock(stock_id, accel_group) end

--- # function Gtk.ImageMenuItem.new_with_label()
---
--- Creates a new `GtkImageMenuItem` containing a label.
---
--- ---
---
---@param label string # the text of the menu item.
---@return Gtk.Widget # a new `GtkImageMenuItem`.
function Gtk.ImageMenuItem.new_with_label(label) end

--- # function Gtk.ImageMenuItem.new_with_mnemonic()
---
--- Creates a new `GtkImageMenuItem` containing a label. The label
--- will be created using `gtk_label_new_with_mnemonic()`, so underscores
--- in `label` indicate the mnemonic for the menu item.
---
--- ---
---
---@param label string # the text of the menu item, with an underscore in front of the mnemonic character
---@return Gtk.Widget # a new `GtkImageMenuItem`
function Gtk.ImageMenuItem.new_with_mnemonic(label) end

--- # record Gtk.ImageMenuItemClass
---
---@class Gtk.ImageMenuItemClass
---@field parent_class Gtk.MenuItemClass # The parent class.
Gtk.ImageMenuItemClass = {}

--- # record Gtk.ImageMenuItemPrivate
---
---@class Gtk.ImageMenuItemPrivate
Gtk.ImageMenuItemPrivate = {}

--- # record Gtk.ImagePrivate
---
---@class Gtk.ImagePrivate
Gtk.ImagePrivate = {}

---@enum Gtk.ImageType
Gtk.ImageType = {}

--- # class Gtk.InfoBar
---
--- `GtkInfoBar` is a widget that can be used to show messages to
--- the user without showing a dialog. It is often temporarily shown
--- at the top or bottom of a document. In contrast to `GtkDialog`, which
--- has a action area at the bottom, `GtkInfoBar` has an action area
--- at the side.
--- 
--- The API of `GtkInfoBar` is very similar to `GtkDialog`, allowing you
--- to add buttons to the action area with `gtk_info_bar_add_button()` or
--- `gtk_info_bar_new_with_buttons()`. The sensitivity of action widgets
--- can be controlled with `gtk_info_bar_set_response_sensitive()`.
--- To add widgets to the main content area of a `GtkInfoBar`, use
--- `gtk_info_bar_get_content_area()` and add your widgets to the container.
--- 
--- Similar to `GtkMessageDialog`, the contents of a `GtkInfoBar` can by
--- classified as error message, warning, informational message, etc,
--- by using `gtk_info_bar_set_message_type()`. GTK+ may use the message type
--- to determine how the message is displayed.
--- 
--- A simple example for using a `GtkInfoBar`:
--- ```c
--- GtkWidget *widget, *message_label, *content_area;
--- GtkWidget *grid;
--- GtkInfoBar *bar;
--- 
--- // set up info bar
--- widget = gtk_info_bar_new ();
--- bar = GTK_INFO_BAR (widget);
--- grid = gtk_grid_new ();
--- 
--- gtk_widget_set_no_show_all (widget, TRUE);
--- message_label = gtk_label_new ("");
--- content_area = gtk_info_bar_get_content_area (bar);
--- gtk_container_add (GTK_CONTAINER (content_area),
---                    message_label);
--- gtk_info_bar_add_button (bar,
---                          _("_OK"),
---                          GTK_RESPONSE_OK);
--- g_signal_connect (bar,
---                   "response",
---                   G_CALLBACK (gtk_widget_hide),
---                   NULL);
--- gtk_grid_attach (GTK_GRID (grid),
---                  widget,
---                  0, 2, 1, 1);
--- 
--- // ...
--- 
--- // show an error message
--- gtk_label_set_text (GTK_LABEL (message_label), "An error occurred!");
--- gtk_info_bar_set_message_type (bar,
---                                GTK_MESSAGE_ERROR);
--- gtk_widget_show (bar);
--- ```
--- 
--- # GtkInfoBar as GtkBuildable
--- 
--- The GtkInfoBar implementation of the GtkBuildable interface exposes
--- the content area and action area as internal children with the names
--- “content_area” and “action_area”.
--- 
--- GtkInfoBar supports a custom `<action-widgets>` element, which can contain
--- multiple `<action-widget>` elements. The “response” attribute specifies a
--- numeric response, and the content of the element is the id of widget
--- (which should be a child of the dialogs `action_area`).
--- 
--- # CSS nodes
--- 
--- GtkInfoBar has a single CSS node with name infobar. The node may get
--- one of the style classes .info, .warning, .error or .question, depending
--- on the message type.
---
--- ---
---
---@class Gtk.InfoBar : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field parent Gtk.Box
---@field priv Gtk.InfoBarPrivate
---@operator call: Gtk.InfoBar
Gtk.InfoBar = {}

--- # method Gtk.InfoBar:add_action_widget()
---
--- Add an activatable widget to the action area of a `GtkInfoBar`,
--- connecting a signal handler that will emit the `GtkInfoBar`::response
--- signal on the message area when the widget is activated. The widget
--- is appended to the end of the message areas action area.
---
--- ---
---
---@param self Gtk.InfoBar # a `GtkInfoBar`
---@param child Gtk.Widget # an activatable widget
---@param response_id integer # response ID for `child`
---@return nil
function Gtk.InfoBar:add_action_widget(child, response_id) end

--- # method Gtk.InfoBar:add_button()
---
--- Adds a button with the given text and sets things up so that
--- clicking the button will emit the “response” signal with the given
--- response_id. The button is appended to the end of the info bars's
--- action area. The button widget is returned, but usually you don't
--- need it.
---
--- ---
---
---@param self Gtk.InfoBar # a `GtkInfoBar`
---@param button_text string # text of button
---@param response_id integer # response ID for the button
---@return Gtk.Button # the `GtkButton` widget that was added
function Gtk.InfoBar:add_button(button_text, response_id) end

--- # method Gtk.InfoBar:get_action_area()
---
--- Returns the action area of `info_bar`.
---
--- ---
---
---@param self Gtk.InfoBar # a `GtkInfoBar`
---@return Gtk.Box # the action area
function Gtk.InfoBar:get_action_area() end

--- # method Gtk.InfoBar:get_content_area()
---
--- Returns the content area of `info_bar`.
---
--- ---
---
---@param self Gtk.InfoBar # a `GtkInfoBar`
---@return Gtk.Box # the content area
function Gtk.InfoBar:get_content_area() end

--- # method Gtk.InfoBar:get_message_type()
---
--- Returns the message type of the message area.
---
--- ---
---
---@param self Gtk.InfoBar # a `GtkInfoBar`
---@return Gtk.MessageType # the message type of the message area.
function Gtk.InfoBar:get_message_type() end

--- # method Gtk.InfoBar:get_revealed()
---
---@param self Gtk.InfoBar # a `GtkInfoBar`
---@return (boolean|nil) # the current value of the GtkInfoBar:revealed property.
function Gtk.InfoBar:get_revealed() end

--- # method Gtk.InfoBar:get_show_close_button()
---
--- Returns whether the widget will display a standard close button.
---
--- ---
---
---@param self Gtk.InfoBar # a `GtkInfoBar`
---@return (boolean|nil) # `true` if the widget displays standard close button
function Gtk.InfoBar:get_show_close_button() end

--- # method Gtk.InfoBar:response()
---
--- Emits the “response” signal with the given `response_id`.
---
--- ---
---
---@param self Gtk.InfoBar # a `GtkInfoBar`
---@param response_id integer # a response ID
---@return nil
function Gtk.InfoBar:response(response_id) end

--- # method Gtk.InfoBar:set_default_response()
---
--- Sets the last widget in the info bar’s action area with
--- the given response_id as the default widget for the dialog.
--- Pressing “Enter” normally activates the default widget.
--- 
--- Note that this function currently requires `info_bar` to
--- be added to a widget hierarchy.
---
--- ---
---
---@param self Gtk.InfoBar # a `GtkInfoBar`
---@param response_id integer # a response ID
---@return nil
function Gtk.InfoBar:set_default_response(response_id) end

--- # method Gtk.InfoBar:set_message_type()
---
--- Sets the message type of the message area.
--- 
--- GTK+ uses this type to determine how the message is displayed.
---
--- ---
---
---@param self Gtk.InfoBar # a `GtkInfoBar`
---@param message_type Gtk.MessageType # a `GtkMessageType`
---@return nil
function Gtk.InfoBar:set_message_type(message_type) end

--- # method Gtk.InfoBar:set_response_sensitive()
---
--- Calls gtk_widget_set_sensitive (widget, setting) for each
--- widget in the info bars’s action area with the given response_id.
--- A convenient way to sensitize/desensitize dialog buttons.
---
--- ---
---
---@param self Gtk.InfoBar # a `GtkInfoBar`
---@param response_id integer # a response ID
---@param setting (boolean|nil) # TRUE for sensitive
---@return nil
function Gtk.InfoBar:set_response_sensitive(response_id, setting) end

--- # method Gtk.InfoBar:set_revealed()
---
--- Sets the GtkInfoBar:revealed property to `revealed`. This will cause
--- `info_bar` to show up with a slide-in transition.
--- 
--- Note that this property does not automatically show `info_bar` and thus won’t
--- have any effect if it is invisible.
---
--- ---
---
---@param self Gtk.InfoBar # a `GtkInfoBar`
---@param revealed (boolean|nil) # The new value of the property
---@return nil
function Gtk.InfoBar:set_revealed(revealed) end

--- # method Gtk.InfoBar:set_show_close_button()
---
--- If true, a standard close button is shown. When clicked it emits
--- the response %GTK_RESPONSE_CLOSE.
---
--- ---
---
---@param self Gtk.InfoBar # a `GtkInfoBar`
---@param setting (boolean|nil) # `true` to include a close button
---@return nil
function Gtk.InfoBar:set_show_close_button(setting) end

--- # function Gtk.InfoBar.new()
---
--- Creates a new `GtkInfoBar` object.
---
--- ---
---
---@return Gtk.Widget # a new `GtkInfoBar` object
function Gtk.InfoBar.new() end

--- # record Gtk.InfoBarClass
---
---@class Gtk.InfoBarClass
---@field parent_class Gtk.BoxClass
---@field response fun(info_bar: Gtk.InfoBar, response_id: integer): nil
---@field close fun(info_bar: Gtk.InfoBar): nil
Gtk.InfoBarClass = {}

--- # record Gtk.InfoBarPrivate
---
---@class Gtk.InfoBarPrivate
Gtk.InfoBarPrivate = {}

---@enum Gtk.InputHints
Gtk.InputHints = {}

---@enum Gtk.InputPurpose
Gtk.InputPurpose = {}

--- # class Gtk.Invisible
---
--- The `GtkInvisible` widget is used internally in GTK+, and is probably not
--- very useful for application developers.
--- 
--- It is used for reliable pointer grabs and selection handling in the code
--- for drag-and-drop.
---
--- ---
---
---@class Gtk.Invisible : Gtk.Widget, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field widget Gtk.Widget
---@field priv Gtk.InvisiblePrivate
---@operator call: Gtk.Invisible
Gtk.Invisible = {}

--- # method Gtk.Invisible:get_screen()
---
--- Returns the `GdkScreen` object associated with `invisible`
---
--- ---
---
---@param self Gtk.Invisible # a `GtkInvisible`.
---@return Gdk.Screen # the associated `GdkScreen`.
function Gtk.Invisible:get_screen() end

--- # method Gtk.Invisible:set_screen()
---
--- Sets the `GdkScreen` where the `GtkInvisible` object will be displayed.
---
--- ---
---
---@param self Gtk.Invisible # a `GtkInvisible`.
---@param screen Gdk.Screen # a `GdkScreen`.
---@return nil
function Gtk.Invisible:set_screen(screen) end

--- # function Gtk.Invisible.new()
---
--- Creates a new `GtkInvisible`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkInvisible`.
function Gtk.Invisible.new() end

--- # function Gtk.Invisible.new_for_screen()
---
--- Creates a new `GtkInvisible` object for a specified screen
---
--- ---
---
---@param screen Gdk.Screen # a `GdkScreen` which identifies on which the new `GtkInvisible` will be created.
---@return Gtk.Widget # a newly created `GtkInvisible` object
function Gtk.Invisible.new_for_screen(screen) end

--- # record Gtk.InvisibleClass
---
---@class Gtk.InvisibleClass
---@field parent_class Gtk.WidgetClass
Gtk.InvisibleClass = {}

--- # record Gtk.InvisiblePrivate
---
---@class Gtk.InvisiblePrivate
Gtk.InvisiblePrivate = {}

---@enum Gtk.JunctionSides
Gtk.JunctionSides = {}

---@enum Gtk.Justification
Gtk.Justification = {}

---@alias Gtk.KeySnoopFunc fun(grab_widget: Gtk.Widget, event: Gdk.EventKey, func_data: userdata): integer

--- # class Gtk.Label
---
--- The `GtkLabel` widget displays a small amount of text. As the name
--- implies, most labels are used to label another widget such as a
--- `GtkButton`, a `GtkMenuItem`, or a `GtkComboBox`.
--- 
--- # CSS nodes
--- 
--- ```plain
--- label
--- ├── [selection]
--- ├── [link]
--- ┊
--- ╰── [link]
--- ```
--- 
--- GtkLabel has a single CSS node with the name label. A wide variety
--- of style classes may be applied to labels, such as .title, .subtitle,
--- .dim-label, etc. In the `GtkShortcutsWindow`, labels are used wth the
--- .keycap style class.
--- 
--- If the label has a selection, it gets a subnode with name selection.
--- 
--- If the label has links, there is one subnode per link. These subnodes
--- carry the link or visited state depending on whether they have been
--- visited.
--- 
--- # GtkLabel as GtkBuildable
--- 
--- The GtkLabel implementation of the GtkBuildable interface supports a
--- custom `<attributes>` element, which supports any number of `<attribute>`
--- elements. The `<attribute>` element has attributes named “name“, “value“,
--- “start“ and “end“ and allows you to specify `PangoAttribute` values for
--- this label.
--- 
--- An example of a UI definition fragment specifying Pango attributes:
--- 
--- ```xml
--- <object class="GtkLabel">
---   <attributes>
---     <attribute name="weight" value="PANGO_WEIGHT_BOLD"/>
---     <attribute name="background" value="red" start="5" end="10"/>
---   </attributes>
--- </object>
--- ```
--- 
--- The start and end attributes specify the range of characters to which the
--- Pango attribute applies. If start and end are not specified, the attribute is
--- applied to the whole text. Note that specifying ranges does not make much
--- sense with translatable attributes. Use markup embedded in the translatable
--- content instead.
--- 
--- # Mnemonics
--- 
--- Labels may contain “mnemonics”. Mnemonics are
--- underlined characters in the label, used for keyboard navigation.
--- Mnemonics are created by providing a string with an underscore before
--- the mnemonic character, such as `"_File"`, to the
--- functions `gtk_label_new_with_mnemonic()` or
--- `gtk_label_set_text_with_mnemonic()`.
--- 
--- Mnemonics automatically activate any activatable widget the label is
--- inside, such as a `GtkButton`; if the label is not inside the
--- mnemonic’s target widget, you have to tell the label about the target
--- using `gtk_label_set_mnemonic_widget()`. Here’s a simple example where
--- the label is inside a button:
--- 
--- ```c
---   // Pressing Alt+H will activate this button
---   GtkWidget *button = gtk_button_new ();
---   GtkWidget *label = gtk_label_new_with_mnemonic ("_Hello");
---   gtk_container_add (GTK_CONTAINER (button), label);
--- ```
--- 
--- There’s a convenience function to create buttons with a mnemonic label
--- already inside:
--- 
--- ```c
---   // Pressing Alt+H will activate this button
---   GtkWidget *button = gtk_button_new_with_mnemonic ("_Hello");
--- ```
--- 
--- To create a mnemonic for a widget alongside the label, such as a
--- `GtkEntry`, you have to point the label at the entry with
--- `gtk_label_set_mnemonic_widget()`:
--- 
--- ```c
---   // Pressing Alt+H will focus the entry
---   GtkWidget *entry = gtk_entry_new ();
---   GtkWidget *label = gtk_label_new_with_mnemonic ("_Hello");
---   gtk_label_set_mnemonic_widget (GTK_LABEL (label), entry);
--- ```
--- 
--- # Markup (styled text)
--- 
--- To make it easy to format text in a label (changing colors,
--- fonts, etc.), label text can be provided in a simple
--- [markup format][PangoMarkupFormat].
--- 
--- Here’s how to create a label with a small font:
--- ```c
---   GtkWidget *label = gtk_label_new (NULL);
---   gtk_label_set_markup (GTK_LABEL (label), "<small>Small text</small>");
--- ```
--- 
--- (See [complete documentation][PangoMarkupFormat] of available
--- tags in the Pango manual.)
--- 
--- The markup passed to `gtk_label_set_markup()` must be valid; for example,
--- literal <, > and & characters must be escaped as &lt;, &gt;, and &amp;.
--- If you pass text obtained from the user, file, or a network to
--- `gtk_label_set_markup()`, you’ll want to escape it with
--- `g_markup_escape_text()` or `g_markup_printf_escaped()`.
--- 
--- Markup strings are just a convenient way to set the `PangoAttrList` on
--- a label; `gtk_label_set_attributes()` may be a simpler way to set
--- attributes in some cases. Be careful though; `PangoAttrList` tends to
--- cause internationalization problems, unless you’re applying attributes
--- to the entire string (i.e. unless you set the range of each attribute
--- to [0, %G_MAXINT)). The reason is that specifying the start_index and
--- end_index for a `PangoAttribute` requires knowledge of the exact string
--- being displayed, so translations will cause problems.
--- 
--- # Selectable labels
--- 
--- Labels can be made selectable with `gtk_label_set_selectable()`.
--- Selectable labels allow the user to copy the label contents to
--- the clipboard. Only labels that contain useful-to-copy information
--- — such as error messages — should be made selectable.
--- 
--- # Text layout # {`label`-text-layout}
--- 
--- A label can contain any number of paragraphs, but will have
--- performance problems if it contains more than a small number.
--- Paragraphs are separated by newlines or other paragraph separators
--- understood by Pango.
--- 
--- Labels can automatically wrap text if you call
--- `gtk_label_set_line_wrap()`.
--- 
--- `gtk_label_set_justify()` sets how the lines in a label align
--- with one another. If you want to set how the label as a whole
--- aligns in its available space, see the `GtkWidget`:halign and
--- `GtkWidget`:valign properties.
--- 
--- The `GtkLabel`:width-chars and `GtkLabel`:max-width-chars properties
--- can be used to control the size allocation of ellipsized or wrapped
--- labels. For ellipsizing labels, if either is specified (and less
--- than the actual text size), it is used as the minimum width, and the actual
--- text size is used as the natural width of the label. For wrapping labels,
--- width-chars is used as the minimum width, if specified, and max-width-chars
--- is used as the natural width. Even if max-width-chars specified, wrapping
--- labels will be rewrapped to use all of the available width.
--- 
--- Note that the interpretation of `GtkLabel`:width-chars and
--- `GtkLabel`:max-width-chars has changed a bit with the introduction of
--- [width-for-height geometry management.][geometry-management]
--- 
--- # Links
--- 
--- Since 2.18, GTK+ supports markup for clickable hyperlinks in addition
--- to regular Pango markup. The markup for links is borrowed from HTML,
--- using the `<a>` with “href“ and “title“ attributes. GTK+ renders links
--- similar to the way they appear in web browsers, with colored, underlined
--- text. The “title“ attribute is displayed as a tooltip on the link.
--- 
--- An example looks like this:
--- 
--- ```c
--- const gchar *text =
--- "Go to the"
--- "<a href=\"http://www.gtk.org title=\"&lt;i&gt;Our&lt;/i&gt; website\">"
--- "GTK+ website</a> for more...";
--- GtkWidget *label = gtk_label_new (NULL);
--- gtk_label_set_markup (GTK_LABEL (label), text);
--- ```
--- 
--- It is possible to implement custom handling for links and their tooltips with
--- the `GtkLabel`::activate-link signal and the `gtk_label_get_current_uri()` function.
---
--- ---
---
---@class Gtk.Label : Gtk.Misc, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field misc Gtk.Misc
---@field priv Gtk.LabelPrivate
---@operator call: Gtk.Label
Gtk.Label = {}

--- # method Gtk.Label:get_angle()
---
--- Gets the angle of rotation for the label. See
--- `gtk_label_set_angle()`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return number # the angle of rotation for the label
function Gtk.Label:get_angle() end

--- # method Gtk.Label:get_attributes()
---
--- Gets the attribute list that was set on the label using
--- `gtk_label_set_attributes()`, if any. This function does
--- not reflect attributes that come from the labels markup
--- (see `gtk_label_set_markup()`). If you want to get the
--- effective attributes for the label, use
--- pango_layout_get_attribute (gtk_label_get_layout (label)).
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return Pango.AttrList # the attribute list, or `nil` if none was set.
function Gtk.Label:get_attributes() end

--- # method Gtk.Label:get_current_uri()
---
--- Returns the URI for the currently active link in the label.
--- The active link is the one under the mouse pointer or, in a
--- selectable label, the link in which the text cursor is currently
--- positioned.
--- 
--- This function is intended for use in a `GtkLabel`::activate-link handler
--- or for use in a `GtkWidget`::query-tooltip handler.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return string # the currently active URI. The string is owned by GTK+ and must not be freed or modified.
function Gtk.Label:get_current_uri() end

--- # method Gtk.Label:get_ellipsize()
---
--- Returns the ellipsizing position of the label. See `gtk_label_set_ellipsize()`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return Pango.EllipsizeMode # `PangoEllipsizeMode`
function Gtk.Label:get_ellipsize() end

--- # method Gtk.Label:get_justify()
---
--- Returns the justification of the label. See `gtk_label_set_justify()`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return Gtk.Justification # `GtkJustification`
function Gtk.Label:get_justify() end

--- # method Gtk.Label:get_label()
---
--- Fetches the text from a label widget including any embedded
--- underlines indicating mnemonics and Pango markup. (See
--- `gtk_label_get_text()`).
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return string # the text of the label widget. This string is owned by the widget and must not be modified or freed.
function Gtk.Label:get_label() end

--- # method Gtk.Label:get_layout()
---
--- Gets the `PangoLayout` used to display the label.
--- The layout is useful to e.g. convert text positions to
--- pixel positions, in combination with `gtk_label_get_layout_offsets()`.
--- The returned layout is owned by the `label` so need not be
--- freed by the caller. The `label` is free to recreate its layout at
--- any time, so it should be considered read-only.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return Pango.Layout # the `PangoLayout` for this label
function Gtk.Label:get_layout() end

--- # method Gtk.Label:get_layout_offsets()
---
--- Obtains the coordinates where the label will draw the `PangoLayout`
--- representing the text in the label; useful to convert mouse events
--- into coordinates inside the `PangoLayout`, e.g. to take some action
--- if some part of the label is clicked. Of course you will need to
--- create a `GtkEventBox` to receive the events, and pack the label
--- inside it, since labels are windowless (they return `false` from
--- `gtk_widget_get_has_window()`). Remember
--- when using the `PangoLayout` functions you need to convert to
--- and from pixels using PANGO_PIXELS() or `PANGO_SCALE`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param x? integer # location to store X offset of layout, or `nil`
---@param y? integer # location to store Y offset of layout, or `nil`
---@return nil
function Gtk.Label:get_layout_offsets(x, y) end

--- # method Gtk.Label:get_line_wrap()
---
--- Returns whether lines in the label are automatically wrapped.
--- See `gtk_label_set_line_wrap()`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return (boolean|nil) # `true` if the lines of the label are automatically wrapped.
function Gtk.Label:get_line_wrap() end

--- # method Gtk.Label:get_line_wrap_mode()
---
--- Returns line wrap mode used by the label. See `gtk_label_set_line_wrap_mode()`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return Pango.WrapMode # `true` if the lines of the label are automatically wrapped.
function Gtk.Label:get_line_wrap_mode() end

--- # method Gtk.Label:get_lines()
---
--- Gets the number of lines to which an ellipsized, wrapping
--- label should be limited. See `gtk_label_set_lines()`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return integer # The number of lines
function Gtk.Label:get_lines() end

--- # method Gtk.Label:get_max_width_chars()
---
--- Retrieves the desired maximum width of `label`, in characters. See
--- `gtk_label_set_width_chars()`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return integer # the maximum width of the label in characters.
function Gtk.Label:get_max_width_chars() end

--- # method Gtk.Label:get_mnemonic_keyval()
---
--- If the label has been set so that it has an mnemonic key this function
--- returns the keyval used for the mnemonic accelerator. If there is no
--- mnemonic set up it returns `GDK_KEY_VoidSymbol`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return integer # GDK keyval usable for accelerators, or `GDK_KEY_VoidSymbol`
function Gtk.Label:get_mnemonic_keyval() end

--- # method Gtk.Label:get_mnemonic_widget()
---
--- Retrieves the target of the mnemonic (keyboard shortcut) of this
--- label. See `gtk_label_set_mnemonic_widget()`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return Gtk.Widget # the target of the label’s mnemonic, or `nil` if none has been set and the default algorithm will be used.
function Gtk.Label:get_mnemonic_widget() end

--- # method Gtk.Label:get_selectable()
---
--- Gets the value set by `gtk_label_set_selectable()`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return (boolean|nil) # `true` if the user can copy text from the label
function Gtk.Label:get_selectable() end

--- # method Gtk.Label:get_selection_bounds()
---
--- Gets the selected range of characters in the label, returning `true`
--- if there’s a selection.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param start integer # return location for start of selection, as a character offset
---@param end__ integer # return location for end of selection, as a character offset
---@return (boolean|nil) # `true` if selection is non-empty
function Gtk.Label:get_selection_bounds(start, end__) end

--- # method Gtk.Label:get_single_line_mode()
---
--- Returns whether the label is in single line mode.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return (boolean|nil) # `true` when the label is in single line mode.
function Gtk.Label:get_single_line_mode() end

--- # method Gtk.Label:get_text()
---
--- Fetches the text from a label widget, as displayed on the
--- screen. This does not include any embedded underlines
--- indicating mnemonics or Pango markup. (See `gtk_label_get_label()`)
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return string # the text in the label widget. This is the internal string used by the label, and must not be modified.
function Gtk.Label:get_text() end

--- # method Gtk.Label:get_track_visited_links()
---
--- Returns whether the label is currently keeping track
--- of clicked links.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return (boolean|nil) # `true` if clicked links are remembered
function Gtk.Label:get_track_visited_links() end

--- # method Gtk.Label:get_use_markup()
---
--- Returns whether the label’s text is interpreted as marked up with
--- the [Pango text markup language][PangoMarkupFormat].
--- See gtk_label_set_use_markup ().
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return (boolean|nil) # `true` if the label’s text will be parsed for markup.
function Gtk.Label:get_use_markup() end

--- # method Gtk.Label:get_use_underline()
---
--- Returns whether an embedded underline in the label indicates a
--- mnemonic. See `gtk_label_set_use_underline()`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return (boolean|nil) # `true` whether an embedded underline in the label indicates the mnemonic accelerator keys.
function Gtk.Label:get_use_underline() end

--- # method Gtk.Label:get_width_chars()
---
--- Retrieves the desired width of `label`, in characters. See
--- `gtk_label_set_width_chars()`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return integer # the width of the label in characters.
function Gtk.Label:get_width_chars() end

--- # method Gtk.Label:get_xalign()
---
--- Gets the `GtkLabel`:xalign property for `label`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return number # the xalign property
function Gtk.Label:get_xalign() end

--- # method Gtk.Label:get_yalign()
---
--- Gets the `GtkLabel`:yalign property for `label`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@return number # the yalign property
function Gtk.Label:get_yalign() end

--- # method Gtk.Label:select_region()
---
--- Selects a range of characters in the label, if the label is selectable.
--- See `gtk_label_set_selectable()`. If the label is not selectable,
--- this function has no effect. If `start_offset` or
--- `end_offset` are -1, then the end of the label will be substituted.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param start_offset integer # start offset (in characters not bytes)
---@param end_offset integer # end offset (in characters not bytes)
---@return nil
function Gtk.Label:select_region(start_offset, end_offset) end

--- # method Gtk.Label:set_angle()
---
--- Sets the angle of rotation for the label. An angle of 90 reads from
--- from bottom to top, an angle of 270, from top to bottom. The angle
--- setting for the label is ignored if the label is selectable,
--- wrapped, or ellipsized.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param angle number # the angle that the baseline of the label makes with the horizontal, in degrees, measured counterclockwise
---@return nil
function Gtk.Label:set_angle(angle) end

--- # method Gtk.Label:set_attributes()
---
--- Sets a `PangoAttrList`; the attributes in the list are applied to the
--- label text.
--- 
--- The attributes set with this function will be applied
--- and merged with any other attributes previously effected by way
--- of the `GtkLabel`:use-underline or `GtkLabel`:use-markup properties.
--- While it is not recommended to mix markup strings with manually set
--- attributes, if you must; know that the attributes will be applied
--- to the label after the markup string is parsed.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param attrs? Pango.AttrList # a `PangoAttrList`, or `nil`
---@return nil
function Gtk.Label:set_attributes(attrs) end

--- # method Gtk.Label:set_ellipsize()
---
--- Sets the mode used to ellipsize (add an ellipsis: "...") to the text
--- if there is not enough space to render the entire string.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param mode Pango.EllipsizeMode # a `PangoEllipsizeMode`
---@return nil
function Gtk.Label:set_ellipsize(mode) end

--- # method Gtk.Label:set_justify()
---
--- Sets the alignment of the lines in the text of the label relative to
--- each other. %GTK_JUSTIFY_LEFT is the default value when the widget is
--- first created with `gtk_label_new()`. If you instead want to set the
--- alignment of the label as a whole, use `gtk_widget_set_halign()` instead.
--- `gtk_label_set_justify()` has no effect on labels containing only a
--- single line.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param jtype Gtk.Justification # a `GtkJustification`
---@return nil
function Gtk.Label:set_justify(jtype) end

--- # method Gtk.Label:set_label()
---
--- Sets the text of the label. The label is interpreted as
--- including embedded underlines and/or Pango markup depending
--- on the values of the `GtkLabel`:use-underline and
--- `GtkLabel`:use-markup properties.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param str string # the new text to set for the label
---@return nil
function Gtk.Label:set_label(str) end

--- # method Gtk.Label:set_line_wrap()
---
--- Toggles line wrapping within the `GtkLabel` widget. `true` makes it break
--- lines if text exceeds the widget’s size. `false` lets the text get cut off
--- by the edge of the widget if it exceeds the widget size.
--- 
--- Note that setting line wrapping to `true` does not make the label
--- wrap at its parent container’s width, because GTK+ widgets
--- conceptually can’t make their requisition depend on the parent
--- container’s size. For a label that wraps at a specific position,
--- set the label’s width using `gtk_widget_set_size_request()`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param wrap (boolean|nil) # the setting
---@return nil
function Gtk.Label:set_line_wrap(wrap) end

--- # method Gtk.Label:set_line_wrap_mode()
---
--- If line wrapping is on (see `gtk_label_set_line_wrap()`) this controls how
--- the line wrapping is done. The default is %PANGO_WRAP_WORD which means
--- wrap on word boundaries.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param wrap_mode Pango.WrapMode # the line wrapping mode
---@return nil
function Gtk.Label:set_line_wrap_mode(wrap_mode) end

--- # method Gtk.Label:set_lines()
---
--- Sets the number of lines to which an ellipsized, wrapping label
--- should be limited. This has no effect if the label is not wrapping
--- or ellipsized. Set this to -1 if you don’t want to limit the
--- number of lines.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param lines integer # the desired number of lines, or -1
---@return nil
function Gtk.Label:set_lines(lines) end

--- # method Gtk.Label:set_markup()
---
--- Parses `str` which is marked up with the
--- [Pango text markup language][PangoMarkupFormat], setting the
--- label’s text and attribute list based on the parse results.
--- 
--- If the `str` is external data, you may need to escape it with
--- `g_markup_escape_text()` or `g_markup_printf_escaped()`:
--- 
--- ```c
--- GtkWidget *label = gtk_label_new (NULL);
--- const char *str = "some text";
--- const char *format = "<span style=\"italic\">\%s</span>";
--- char *markup;
--- 
--- markup = g_markup_printf_escaped (format, str);
--- gtk_label_set_markup (GTK_LABEL (label), markup);
--- g_free (markup);
--- ```
--- 
--- This function will set the `GtkLabel`:use-markup property to `true` as
--- a side effect.
--- 
--- If you set the label contents using the `GtkLabel`:label property you
--- should also ensure that you set the `GtkLabel`:use-markup property
--- accordingly.
--- 
--- See also: `gtk_label_set_text()`
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param str string # a markup string (see [Pango markup format][PangoMarkupFormat])
---@return nil
function Gtk.Label:set_markup(str) end

--- # method Gtk.Label:set_markup_with_mnemonic()
---
--- Parses `str` which is marked up with the
--- [Pango text markup language][PangoMarkupFormat],
--- setting the label’s text and attribute list based on the parse results.
--- If characters in `str` are preceded by an underscore, they are underlined
--- indicating that they represent a keyboard accelerator called a mnemonic.
--- 
--- The mnemonic key can be used to activate another widget, chosen
--- automatically, or explicitly using `gtk_label_set_mnemonic_widget()`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param str string # a markup string (see [Pango markup format][PangoMarkupFormat])
---@return nil
function Gtk.Label:set_markup_with_mnemonic(str) end

--- # method Gtk.Label:set_max_width_chars()
---
--- Sets the desired maximum width in characters of `label` to `n_chars`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param n_chars integer # the new desired maximum width, in characters.
---@return nil
function Gtk.Label:set_max_width_chars(n_chars) end

--- # method Gtk.Label:set_mnemonic_widget()
---
--- If the label has been set so that it has an mnemonic key (using
--- i.e. `gtk_label_set_markup_with_mnemonic()`,
--- `gtk_label_set_text_with_mnemonic()`, `gtk_label_new_with_mnemonic()`
--- or the “use_underline” property) the label can be associated with a
--- widget that is the target of the mnemonic. When the label is inside
--- a widget (like a `GtkButton` or a `GtkNotebook` tab) it is
--- automatically associated with the correct widget, but sometimes
--- (i.e. when the target is a `GtkEntry` next to the label) you need to
--- set it explicitly using this function.
--- 
--- The target widget will be accelerated by emitting the
--- GtkWidget::mnemonic-activate signal on it. The default handler for
--- this signal will activate the widget if there are no mnemonic collisions
--- and toggle focus between the colliding widgets otherwise.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param widget? Gtk.Widget # the target `GtkWidget`, or `nil` to unset
---@return nil
function Gtk.Label:set_mnemonic_widget(widget) end

--- # method Gtk.Label:set_pattern()
---
--- The pattern of underlines you want under the existing text within the
--- `GtkLabel` widget.  For example if the current text of the label says
--- “FooBarBaz” passing a pattern of “___   ___” will underline
--- “Foo” and “Baz” but not “Bar”.
---
--- ---
---
---@param self Gtk.Label # The `GtkLabel` you want to set the pattern to.
---@param pattern string # The pattern as described above.
---@return nil
function Gtk.Label:set_pattern(pattern) end

--- # method Gtk.Label:set_selectable()
---
--- Selectable labels allow the user to select text from the label, for
--- copy-and-paste.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param setting (boolean|nil) # `true` to allow selecting text in the label
---@return nil
function Gtk.Label:set_selectable(setting) end

--- # method Gtk.Label:set_single_line_mode()
---
--- Sets whether the label is in single line mode.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param single_line_mode (boolean|nil) # `true` if the label should be in single line mode
---@return nil
function Gtk.Label:set_single_line_mode(single_line_mode) end

--- # method Gtk.Label:set_text()
---
--- Sets the text within the `GtkLabel` widget. It overwrites any text that
--- was there before.
--- 
--- This function will clear any previously set mnemonic accelerators, and
--- set the `GtkLabel`:use-underline property to `false` as a side effect.
--- 
--- This function will set the `GtkLabel`:use-markup property to `false`
--- as a side effect.
--- 
--- See also: `gtk_label_set_markup()`
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param str string # The text you want to set
---@return nil
function Gtk.Label:set_text(str) end

--- # method Gtk.Label:set_text_with_mnemonic()
---
--- Sets the label’s text from the string `str`.
--- If characters in `str` are preceded by an underscore, they are underlined
--- indicating that they represent a keyboard accelerator called a mnemonic.
--- The mnemonic key can be used to activate another widget, chosen
--- automatically, or explicitly using `gtk_label_set_mnemonic_widget()`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param str string # a string
---@return nil
function Gtk.Label:set_text_with_mnemonic(str) end

--- # method Gtk.Label:set_track_visited_links()
---
--- Sets whether the label should keep track of clicked
--- links (and use a different color for them).
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param track_links (boolean|nil) # `true` to track visited links
---@return nil
function Gtk.Label:set_track_visited_links(track_links) end

--- # method Gtk.Label:set_use_markup()
---
--- Sets whether the text of the label contains markup in
--- [Pango’s text markup language][PangoMarkupFormat].
--- See `gtk_label_set_markup()`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param setting (boolean|nil) # `true` if the label’s text should be parsed for markup.
---@return nil
function Gtk.Label:set_use_markup(setting) end

--- # method Gtk.Label:set_use_underline()
---
--- If true, an underline in the text indicates the next character should be
--- used for the mnemonic accelerator key.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param setting (boolean|nil) # `true` if underlines in the text indicate mnemonics
---@return nil
function Gtk.Label:set_use_underline(setting) end

--- # method Gtk.Label:set_width_chars()
---
--- Sets the desired width in characters of `label` to `n_chars`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param n_chars integer # the new desired width, in characters.
---@return nil
function Gtk.Label:set_width_chars(n_chars) end

--- # method Gtk.Label:set_xalign()
---
--- Sets the `GtkLabel`:xalign property for `label`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param xalign number # the new xalign value, between 0 and 1
---@return nil
function Gtk.Label:set_xalign(xalign) end

--- # method Gtk.Label:set_yalign()
---
--- Sets the `GtkLabel`:yalign property for `label`.
---
--- ---
---
---@param self Gtk.Label # a `GtkLabel`
---@param yalign number # the new yalign value, between 0 and 1
---@return nil
function Gtk.Label:set_yalign(yalign) end

--- # function Gtk.Label.new()
---
--- Creates a new label with the given text inside it. You can
--- pass `nil` to get an empty label widget.
---
--- ---
---
---@param str? string # The text of the label
---@return Gtk.Widget # the new `GtkLabel`
function Gtk.Label.new(str) end

--- # function Gtk.Label.new_with_mnemonic()
---
--- Creates a new `GtkLabel`, containing the text in `str`.
--- 
--- If characters in `str` are preceded by an underscore, they are
--- underlined. If you need a literal underscore character in a label, use
--- '__' (two underscores). The first underlined character represents a
--- keyboard accelerator called a mnemonic. The mnemonic key can be used
--- to activate another widget, chosen automatically, or explicitly using
--- `gtk_label_set_mnemonic_widget()`.
--- 
--- If `gtk_label_set_mnemonic_widget()` is not called, then the first
--- activatable ancestor of the `GtkLabel` will be chosen as the mnemonic
--- widget. For instance, if the label is inside a button or menu item,
--- the button or menu item will automatically become the mnemonic widget
--- and be activated by the mnemonic.
---
--- ---
---
---@param str? string # The text of the label, with an underscore in front of the mnemonic character
---@return Gtk.Widget # the new `GtkLabel`
function Gtk.Label.new_with_mnemonic(str) end

--- # class Gtk.LabelAccessible
---
---@class Gtk.LabelAccessible : Gtk.WidgetAccessible, Gtk.Atk.Component, Gtk.Atk.Hypertext, Gtk.Atk.Text
---@field parent Gtk.WidgetAccessible
---@field priv Gtk.LabelAccessiblePrivate
Gtk.LabelAccessible = {}

--- # record Gtk.LabelAccessibleClass
---
---@class Gtk.LabelAccessibleClass
---@field parent_class Gtk.WidgetAccessibleClass
Gtk.LabelAccessibleClass = {}

--- # record Gtk.LabelAccessiblePrivate
---
---@class Gtk.LabelAccessiblePrivate
Gtk.LabelAccessiblePrivate = {}

--- # record Gtk.LabelClass
---
---@class Gtk.LabelClass
---@field parent_class Gtk.MiscClass
---@field move_cursor fun(label: Gtk.Label, step: Gtk.MovementStep, count: integer, extend_selection: (boolean|nil)): nil
---@field copy_clipboard fun(label: Gtk.Label): nil
---@field populate_popup fun(label: Gtk.Label, menu: Gtk.Menu): nil
---@field activate_link fun(label: Gtk.Label, uri: string): (boolean|nil)
Gtk.LabelClass = {}

--- # record Gtk.LabelPrivate
---
---@class Gtk.LabelPrivate
Gtk.LabelPrivate = {}

--- # record Gtk.LabelSelectionInfo
---
---@class Gtk.LabelSelectionInfo
Gtk.LabelSelectionInfo = {}

--- # class Gtk.Layout
---
--- `GtkLayout` is similar to `GtkDrawingArea` in that it’s a “blank slate” and
--- doesn’t do anything except paint a blank background by default. It’s
--- different in that it supports scrolling natively due to implementing
--- `GtkScrollable`, and can contain child widgets since it’s a `GtkContainer`.
--- 
--- If you just want to draw, a `GtkDrawingArea` is a better choice since it has
--- lower overhead. If you just need to position child widgets at specific
--- points, then `GtkFixed` provides that functionality on its own.
--- 
--- When handling expose events on a `GtkLayout`, you must draw to the `GdkWindow`
--- returned by `gtk_layout_get_bin_window()`, rather than to the one returned by
--- `gtk_widget_get_window()` as you would for a `GtkDrawingArea`.
---
--- ---
---
---@class Gtk.Layout : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Scrollable
---@field container Gtk.Container
---@field priv Gtk.LayoutPrivate
---@operator call: Gtk.Layout
Gtk.Layout = {}

--- # method Gtk.Layout:get_bin_window()
---
--- Retrieve the bin window of the layout used for drawing operations.
---
--- ---
---
---@param self Gtk.Layout # a `GtkLayout`
---@return Gdk.Window # a `GdkWindow`
function Gtk.Layout:get_bin_window() end

--- # method Gtk.Layout:get_hadjustment()
---
--- This function should only be called after the layout has been
--- placed in a `GtkScrolledWindow` or otherwise configured for
--- scrolling. It returns the `GtkAdjustment` used for communication
--- between the horizontal scrollbar and `layout`.
--- 
--- See `GtkScrolledWindow`, `GtkScrollbar`, `GtkAdjustment` for details.
---
--- ---
---
---@param self Gtk.Layout # a `GtkLayout`
---@return Gtk.Adjustment # horizontal scroll adjustment
function Gtk.Layout:get_hadjustment() end

--- # method Gtk.Layout:get_size()
---
--- Gets the size that has been set on the layout, and that determines
--- the total extents of the layout’s scrollbar area. See
--- gtk_layout_set_size ().
---
--- ---
---
---@param self Gtk.Layout # a `GtkLayout`
---@param width? integer # location to store the width set on `layout`, or `nil`
---@param height? integer # location to store the height set on `layout`, or `nil`
---@return nil
function Gtk.Layout:get_size(width, height) end

--- # method Gtk.Layout:get_vadjustment()
---
--- This function should only be called after the layout has been
--- placed in a `GtkScrolledWindow` or otherwise configured for
--- scrolling. It returns the `GtkAdjustment` used for communication
--- between the vertical scrollbar and `layout`.
--- 
--- See `GtkScrolledWindow`, `GtkScrollbar`, `GtkAdjustment` for details.
---
--- ---
---
---@param self Gtk.Layout # a `GtkLayout`
---@return Gtk.Adjustment # vertical scroll adjustment
function Gtk.Layout:get_vadjustment() end

--- # method Gtk.Layout:move()
---
--- Moves a current child of `layout` to a new position.
---
--- ---
---
---@param self Gtk.Layout # a `GtkLayout`
---@param child_widget Gtk.Widget # a current child of `layout`
---@param x integer # X position to move to
---@param y integer # Y position to move to
---@return nil
function Gtk.Layout:move(child_widget, x, y) end

--- # method Gtk.Layout:put()
---
--- Adds `child_widget` to `layout`, at position (`x`,`y`).
--- `layout` becomes the new parent container of `child_widget`.
---
--- ---
---
---@param self Gtk.Layout # a `GtkLayout`
---@param child_widget Gtk.Widget # child widget
---@param x integer # X position of child widget
---@param y integer # Y position of child widget
---@return nil
function Gtk.Layout:put(child_widget, x, y) end

--- # method Gtk.Layout:set_hadjustment()
---
--- Sets the horizontal scroll adjustment for the layout.
--- 
--- See `GtkScrolledWindow`, `GtkScrollbar`, `GtkAdjustment` for details.
---
--- ---
---
---@param self Gtk.Layout # a `GtkLayout`
---@param adjustment? Gtk.Adjustment # new scroll adjustment
---@return nil
function Gtk.Layout:set_hadjustment(adjustment) end

--- # method Gtk.Layout:set_size()
---
--- Sets the size of the scrollable area of the layout.
---
--- ---
---
---@param self Gtk.Layout # a `GtkLayout`
---@param width integer # width of entire scrollable area
---@param height integer # height of entire scrollable area
---@return nil
function Gtk.Layout:set_size(width, height) end

--- # method Gtk.Layout:set_vadjustment()
---
--- Sets the vertical scroll adjustment for the layout.
--- 
--- See `GtkScrolledWindow`, `GtkScrollbar`, `GtkAdjustment` for details.
---
--- ---
---
---@param self Gtk.Layout # a `GtkLayout`
---@param adjustment? Gtk.Adjustment # new scroll adjustment
---@return nil
function Gtk.Layout:set_vadjustment(adjustment) end

--- # function Gtk.Layout.new()
---
--- Creates a new `GtkLayout`. Unless you have a specific adjustment
--- you’d like the layout to use for scrolling, pass `nil` for
--- `hadjustment` and `vadjustment`.
---
--- ---
---
---@param hadjustment? Gtk.Adjustment # horizontal scroll adjustment, or `nil`
---@param vadjustment? Gtk.Adjustment # vertical scroll adjustment, or `nil`
---@return Gtk.Widget # a new `GtkLayout`
function Gtk.Layout.new(hadjustment, vadjustment) end

--- # record Gtk.LayoutClass
---
---@class Gtk.LayoutClass
---@field parent_class Gtk.ContainerClass
Gtk.LayoutClass = {}

--- # record Gtk.LayoutPrivate
---
---@class Gtk.LayoutPrivate
Gtk.LayoutPrivate = {}

--- # class Gtk.LevelBar
---
--- The `GtkLevelBar` is a bar widget that can be used
--- as a level indicator. Typical use cases are displaying the strength
--- of a password, or showing the charge level of a battery.
--- 
--- Use `gtk_level_bar_set_value()` to set the current value, and
--- `gtk_level_bar_add_offset_value()` to set the value offsets at which
--- the bar will be considered in a different state. GTK will add a few
--- offsets by default on the level bar: `GTK_LEVEL_BAR_OFFSET_LOW`,
--- `GTK_LEVEL_BAR_OFFSET_HIGH` and `GTK_LEVEL_BAR_OFFSET_FULL`, with
--- values 0.25, 0.75 and 1.0 respectively.
--- 
--- Note that it is your responsibility to update preexisting offsets
--- when changing the minimum or maximum value. GTK+ will simply clamp
--- them to the new range.
--- 
--- ## Adding a custom offset on the bar
--- 
--- ```c
--- 
--- static GtkWidget *
--- create_level_bar (void)
--- {
---   GtkWidget *widget;
---   GtkLevelBar *bar;
--- 
---   widget = gtk_level_bar_new ();
---   bar = GTK_LEVEL_BAR (widget);
--- 
---   // This changes the value of the default low offset
--- 
---   gtk_level_bar_add_offset_value (bar,
---                                   GTK_LEVEL_BAR_OFFSET_LOW,
---                                   0.10);
--- 
---   // This adds a new offset to the bar; the application will
---   // be able to change its color CSS like this:
---   //
---   // levelbar block.my-offset {
---   //   background-color: magenta;
---   //   border-style: solid;
---   //   border-color: black;
---   //   border-style: 1px;
---   // }
--- 
---   gtk_level_bar_add_offset_value (bar, "my-offset", 0.60);
--- 
---   return widget;
--- }
--- ```
--- 
--- The default interval of values is between zero and one, but it’s possible to
--- modify the interval using `gtk_level_bar_set_min_value()` and
--- `gtk_level_bar_set_max_value()`. The value will be always drawn in proportion to
--- the admissible interval, i.e. a value of 15 with a specified interval between
--- 10 and 20 is equivalent to a value of 0.5 with an interval between 0 and 1.
--- When `GTK_LEVEL_BAR_MODE_DISCRETE` is used, the bar level is rendered
--- as a finite number of separated blocks instead of a single one. The number
--- of blocks that will be rendered is equal to the number of units specified by
--- the admissible interval.
--- 
--- For instance, to build a bar rendered with five blocks, it’s sufficient to
--- set the minimum value to 0 and the maximum value to 5 after changing the indicator
--- mode to discrete.
--- 
--- GtkLevelBar was introduced in GTK+ 3.6.
--- 
--- # GtkLevelBar as GtkBuildable
--- 
--- The GtkLevelBar implementation of the GtkBuildable interface supports a
--- custom `<offsets>` element, which can contain any number of `<offset>` elements,
--- each of which must have "name" and "value" attributes.
--- 
--- # CSS nodes
--- 
--- ```plain
--- levelbar[.discrete]
--- ╰── trough
---     ├── block.filled.level-name
---     ┊
---     ├── block.empty
---     ┊
--- ```
--- 
--- GtkLevelBar has a main CSS node with name levelbar and one of the style
--- classes .discrete or .continuous and a subnode with name trough. Below the
--- trough node are a number of nodes with name block and style class .filled
--- or .empty. In continuous mode, there is exactly one node of each, in discrete
--- mode, the number of filled and unfilled nodes corresponds to blocks that are
--- drawn. The block.filled nodes also get a style class .level-name corresponding
--- to the level for the current value.
--- 
--- In horizontal orientation, the nodes are always arranged from left to right,
--- regardless of text direction.
---
--- ---
---
---@class Gtk.LevelBar : Gtk.Widget, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field parent Gtk.Widget
---@field priv Gtk.LevelBarPrivate
---@operator call: Gtk.LevelBar
Gtk.LevelBar = {}

--- # method Gtk.LevelBar:add_offset_value()
---
--- Adds a new offset marker on `self` at the position specified by `value`.
--- When the bar value is in the interval topped by `value` (or between `value`
--- and `GtkLevelBar`:max-value in case the offset is the last one on the bar)
--- a style class named `level-``name` will be applied
--- when rendering the level bar fill.
--- If another offset marker named `name` exists, its value will be
--- replaced by `value`.
---
--- ---
---
---@param self Gtk.LevelBar # a `GtkLevelBar`
---@param name string # the name of the new offset
---@param value number # the value for the new offset
---@return nil
function Gtk.LevelBar:add_offset_value(name, value) end

--- # method Gtk.LevelBar:get_inverted()
---
--- Return the value of the `GtkLevelBar`:inverted property.
---
--- ---
---
---@param self Gtk.LevelBar # a `GtkLevelBar`
---@return (boolean|nil) # `true` if the level bar is inverted
function Gtk.LevelBar:get_inverted() end

--- # method Gtk.LevelBar:get_max_value()
---
--- Returns the value of the `GtkLevelBar`:max-value property.
---
--- ---
---
---@param self Gtk.LevelBar # a `GtkLevelBar`
---@return number # a positive value
function Gtk.LevelBar:get_max_value() end

--- # method Gtk.LevelBar:get_min_value()
---
--- Returns the value of the `GtkLevelBar`:min-value property.
---
--- ---
---
---@param self Gtk.LevelBar # a `GtkLevelBar`
---@return number # a positive value
function Gtk.LevelBar:get_min_value() end

--- # method Gtk.LevelBar:get_mode()
---
--- Returns the value of the `GtkLevelBar`:mode property.
---
--- ---
---
---@param self Gtk.LevelBar # a `GtkLevelBar`
---@return Gtk.LevelBarMode # a `GtkLevelBarMode`
function Gtk.LevelBar:get_mode() end

--- # method Gtk.LevelBar:get_offset_value()
---
--- Fetches the value specified for the offset marker `name` in `self`,
--- returning `true` in case an offset named `name` was found.
---
--- ---
---
---@param self Gtk.LevelBar # a `GtkLevelBar`
---@param name? string # the name of an offset in the bar
---@param value number # location where to store the value
---@return (boolean|nil) # `true` if the specified offset is found
function Gtk.LevelBar:get_offset_value(name, value) end

--- # method Gtk.LevelBar:get_value()
---
--- Returns the value of the `GtkLevelBar`:value property.
---
--- ---
---
---@param self Gtk.LevelBar # a `GtkLevelBar`
---@return number # a value in the interval between `GtkLevelBar`:min-value and `GtkLevelBar`:max-value
function Gtk.LevelBar:get_value() end

--- # method Gtk.LevelBar:remove_offset_value()
---
--- Removes an offset marker previously added with
--- `gtk_level_bar_add_offset_value()`.
---
--- ---
---
---@param self Gtk.LevelBar # a `GtkLevelBar`
---@param name? string # the name of an offset in the bar
---@return nil
function Gtk.LevelBar:remove_offset_value(name) end

--- # method Gtk.LevelBar:set_inverted()
---
--- Sets the value of the `GtkLevelBar`:inverted property.
---
--- ---
---
---@param self Gtk.LevelBar # a `GtkLevelBar`
---@param inverted (boolean|nil) # `true` to invert the level bar
---@return nil
function Gtk.LevelBar:set_inverted(inverted) end

--- # method Gtk.LevelBar:set_max_value()
---
--- Sets the value of the `GtkLevelBar`:max-value property.
--- 
--- You probably want to update preexisting level offsets after calling
--- this function.
---
--- ---
---
---@param self Gtk.LevelBar # a `GtkLevelBar`
---@param value number # a positive value
---@return nil
function Gtk.LevelBar:set_max_value(value) end

--- # method Gtk.LevelBar:set_min_value()
---
--- Sets the value of the `GtkLevelBar`:min-value property.
--- 
--- You probably want to update preexisting level offsets after calling
--- this function.
---
--- ---
---
---@param self Gtk.LevelBar # a `GtkLevelBar`
---@param value number # a positive value
---@return nil
function Gtk.LevelBar:set_min_value(value) end

--- # method Gtk.LevelBar:set_mode()
---
--- Sets the value of the `GtkLevelBar`:mode property.
---
--- ---
---
---@param self Gtk.LevelBar # a `GtkLevelBar`
---@param mode Gtk.LevelBarMode # a `GtkLevelBarMode`
---@return nil
function Gtk.LevelBar:set_mode(mode) end

--- # method Gtk.LevelBar:set_value()
---
--- Sets the value of the `GtkLevelBar`:value property.
---
--- ---
---
---@param self Gtk.LevelBar # a `GtkLevelBar`
---@param value number # a value in the interval between `GtkLevelBar`:min-value and `GtkLevelBar`:max-value
---@return nil
function Gtk.LevelBar:set_value(value) end

--- # function Gtk.LevelBar.new()
---
--- Creates a new `GtkLevelBar`.
---
--- ---
---
---@return Gtk.Widget # a `GtkLevelBar`.
function Gtk.LevelBar.new() end

--- # function Gtk.LevelBar.new_for_interval()
---
--- Utility constructor that creates a new `GtkLevelBar` for the specified
--- interval.
---
--- ---
---
---@param min_value number # a positive value
---@param max_value number # a positive value
---@return Gtk.Widget # a `GtkLevelBar`
function Gtk.LevelBar.new_for_interval(min_value, max_value) end

--- # class Gtk.LevelBarAccessible
---
---@class Gtk.LevelBarAccessible : Gtk.WidgetAccessible, Gtk.Atk.Component, Gtk.Atk.Value
---@field parent Gtk.WidgetAccessible
---@field priv Gtk.LevelBarAccessiblePrivate
Gtk.LevelBarAccessible = {}

--- # record Gtk.LevelBarAccessibleClass
---
---@class Gtk.LevelBarAccessibleClass
---@field parent_class Gtk.WidgetAccessibleClass
Gtk.LevelBarAccessibleClass = {}

--- # record Gtk.LevelBarAccessiblePrivate
---
---@class Gtk.LevelBarAccessiblePrivate
Gtk.LevelBarAccessiblePrivate = {}

--- # record Gtk.LevelBarClass
---
---@class Gtk.LevelBarClass
---@field parent_class Gtk.WidgetClass
---@field offset_changed fun(self: Gtk.LevelBar, name: string): nil
---@field padding unknown[]
Gtk.LevelBarClass = {}

---@enum Gtk.LevelBarMode
Gtk.LevelBarMode = {}

--- # record Gtk.LevelBarPrivate
---
---@class Gtk.LevelBarPrivate
Gtk.LevelBarPrivate = {}

---@enum Gtk.License
Gtk.License = {}

--- # class Gtk.LinkButton
---
--- A GtkLinkButton is a `GtkButton` with a hyperlink, similar to the one
--- used by web browsers, which triggers an action when clicked. It is useful
--- to show quick links to resources.
--- 
--- A link button is created by calling either `gtk_link_button_new()` or
--- `gtk_link_button_new_with_label()`. If using the former, the URI you pass
--- to the constructor is used as a label for the widget.
--- 
--- The URI bound to a GtkLinkButton can be set specifically using
--- `gtk_link_button_set_uri()`, and retrieved using `gtk_link_button_get_uri()`.
--- 
--- By default, GtkLinkButton calls `gtk_show_uri_on_window()` when the button is
--- clicked. This behaviour can be overridden by connecting to the
--- `GtkLinkButton`::activate-link signal and returning `true` from the
--- signal handler.
--- 
--- # CSS nodes
--- 
--- GtkLinkButton has a single CSS node with name button. To differentiate
--- it from a plain `GtkButton`, it gets the .link style class.
---
--- ---
---
---@class Gtk.LinkButton : Gtk.Button, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field parent_instance Gtk.Button
---@field priv Gtk.LinkButtonPrivate
---@operator call: Gtk.LinkButton
Gtk.LinkButton = {}

--- # method Gtk.LinkButton:get_uri()
---
--- Retrieves the URI set using `gtk_link_button_set_uri()`.
---
--- ---
---
---@param self Gtk.LinkButton # a `GtkLinkButton`
---@return string # a valid URI. The returned string is owned by the link button and should not be modified or freed.
function Gtk.LinkButton:get_uri() end

--- # method Gtk.LinkButton:get_visited()
---
--- Retrieves the “visited” state of the URI where the `GtkLinkButton`
--- points. The button becomes visited when it is clicked. If the URI
--- is changed on the button, the “visited” state is unset again.
--- 
--- The state may also be changed using `gtk_link_button_set_visited()`.
---
--- ---
---
---@param self Gtk.LinkButton # a `GtkLinkButton`
---@return (boolean|nil) # `true` if the link has been visited, `false` otherwise
function Gtk.LinkButton:get_visited() end

--- # method Gtk.LinkButton:set_uri()
---
--- Sets `uri` as the URI where the `GtkLinkButton` points. As a side-effect
--- this unsets the “visited” state of the button.
---
--- ---
---
---@param self Gtk.LinkButton # a `GtkLinkButton`
---@param uri string # a valid URI
---@return nil
function Gtk.LinkButton:set_uri(uri) end

--- # method Gtk.LinkButton:set_visited()
---
--- Sets the “visited” state of the URI where the `GtkLinkButton`
--- points.  See `gtk_link_button_get_visited()` for more details.
---
--- ---
---
---@param self Gtk.LinkButton # a `GtkLinkButton`
---@param visited (boolean|nil) # the new “visited” state
---@return nil
function Gtk.LinkButton:set_visited(visited) end

--- # function Gtk.LinkButton.new()
---
--- Creates a new `GtkLinkButton` with the URI as its text.
---
--- ---
---
---@param uri string # a valid URI
---@return Gtk.Widget # a new link button widget.
function Gtk.LinkButton.new(uri) end

--- # function Gtk.LinkButton.new_with_label()
---
--- Creates a new `GtkLinkButton` containing a label.
---
--- ---
---
---@param uri string # a valid URI
---@param label? string # the text of the button
---@return Gtk.Widget # a new link button widget.
function Gtk.LinkButton.new_with_label(uri, label) end

--- # class Gtk.LinkButtonAccessible
---
---@class Gtk.LinkButtonAccessible : Gtk.ButtonAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.HyperlinkImpl, Gtk.Atk.Image
---@field parent Gtk.ButtonAccessible
---@field priv Gtk.LinkButtonAccessiblePrivate
Gtk.LinkButtonAccessible = {}

--- # record Gtk.LinkButtonAccessibleClass
---
---@class Gtk.LinkButtonAccessibleClass
---@field parent_class Gtk.ButtonAccessibleClass
Gtk.LinkButtonAccessibleClass = {}

--- # record Gtk.LinkButtonAccessiblePrivate
---
---@class Gtk.LinkButtonAccessiblePrivate
Gtk.LinkButtonAccessiblePrivate = {}

--- # record Gtk.LinkButtonClass
---
--- The `GtkLinkButtonClass` contains only
--- private data.
---
--- ---
---
---@class Gtk.LinkButtonClass
---@field parent_class Gtk.ButtonClass
---@field activate_link fun(button: Gtk.LinkButton): (boolean|nil)
Gtk.LinkButtonClass = {}

--- # record Gtk.LinkButtonPrivate
---
---@class Gtk.LinkButtonPrivate
Gtk.LinkButtonPrivate = {}

--- # class Gtk.ListBox
---
--- A GtkListBox is a vertical container that contains GtkListBoxRow
--- children. These rows can be dynamically sorted and filtered, and
--- headers can be added dynamically depending on the row content.
--- It also allows keyboard and mouse navigation and selection like
--- a typical list.
--- 
--- Using GtkListBox is often an alternative to `GtkTreeView`, especially
--- when the list contents has a more complicated layout than what is allowed
--- by a `GtkCellRenderer`, or when the contents is interactive (i.e. has a
--- button in it).
--- 
--- Although a `GtkListBox` must have only `GtkListBoxRow` children you can
--- add any kind of widget to it via `gtk_container_add()`, and a `GtkListBoxRow`
--- widget will automatically be inserted between the list and the widget.
--- 
--- `GtkListBoxRows` can be marked as activatable or selectable. If a row
--- is activatable, `GtkListBox`::row-activated will be emitted for it when
--- the user tries to activate it. If it is selectable, the row will be marked
--- as selected when the user tries to select it.
--- 
--- The GtkListBox widget was added in GTK+ 3.10.
--- 
--- # GtkListBox as GtkBuildable
--- 
--- The GtkListBox implementation of the `GtkBuildable` interface supports
--- setting a child as the placeholder by specifying “placeholder” as the “type”
--- attribute of a `<child>` element. See `gtk_list_box_set_placeholder()` for info.
--- 
--- # CSS nodes
--- 
--- ```plain
--- list
--- ╰── row[.activatable]
--- ```
--- 
--- GtkListBox uses a single CSS node named list. Each GtkListBoxRow uses
--- a single CSS node named row. The row nodes get the .activatable
--- style class added when appropriate.
---
--- ---
---
---@class Gtk.ListBox : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent_instance Gtk.Container
---@operator call: Gtk.ListBox
Gtk.ListBox = {}

--- # method Gtk.ListBox:bind_model()
---
--- Binds `model` to `box`.
--- 
--- If `box` was already bound to a model, that previous binding is
--- destroyed.
--- 
--- The contents of `box` are cleared and then filled with widgets that
--- represent items from `model`. `box` is updated whenever `model` changes.
--- If `model` is `nil`, `box` is left empty.
--- 
--- It is undefined to add or remove widgets directly (for example, with
--- `gtk_list_box_insert()` or `gtk_container_add()`) while `box` is bound to a
--- model.
--- 
--- Note that using a model is incompatible with the filtering and sorting
--- functionality in GtkListBox. When using a model, filtering and sorting
--- should be implemented by the model.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@param model? Gio.ListModel # the `GListModel` to be bound to `box`
---@param create_widget_func? Gtk.ListBoxCreateWidgetFunc # a function that creates widgets for items or `nil` in case you also passed `nil` as `model`
---@param user_data? userdata # user data passed to `create_widget_func`
---@param user_data_free_func GLib.DestroyNotify # function for freeing `user_data`
---@return nil
function Gtk.ListBox:bind_model(model, create_widget_func, user_data, user_data_free_func) end

--- # method Gtk.ListBox:drag_highlight_row()
---
--- This is a helper function for implementing DnD onto a `GtkListBox`.
--- The passed in `row` will be highlighted via `gtk_drag_highlight()`,
--- and any previously highlighted row will be unhighlighted.
--- 
--- The row will also be unhighlighted when the widget gets
--- a drag leave event.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@param row Gtk.ListBoxRow # a `GtkListBoxRow`
---@return nil
function Gtk.ListBox:drag_highlight_row(row) end

--- # method Gtk.ListBox:drag_unhighlight_row()
---
--- If a row has previously been highlighted via `gtk_list_box_drag_highlight_row()`
--- it will have the highlight removed.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@return nil
function Gtk.ListBox:drag_unhighlight_row() end

--- # method Gtk.ListBox:get_activate_on_single_click()
---
--- Returns whether rows activate on single clicks.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@return (boolean|nil) # `true` if rows are activated on single click, `false` otherwise
function Gtk.ListBox:get_activate_on_single_click() end

--- # method Gtk.ListBox:get_adjustment()
---
--- Gets the adjustment (if any) that the widget uses to
--- for vertical scrolling.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@return Gtk.Adjustment # the adjustment
function Gtk.ListBox:get_adjustment() end

--- # method Gtk.ListBox:get_row_at_index()
---
--- Gets the n-th child in the list (not counting headers).
--- If `_index` is negative or larger than the number of items in the
--- list, `nil` is returned.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@param index_ integer # the index of the row
---@return Gtk.ListBoxRow # the child `GtkWidget` or `nil`
function Gtk.ListBox:get_row_at_index(index_) end

--- # method Gtk.ListBox:get_row_at_y()
---
--- Gets the row at the `y` position.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@param y integer # position
---@return Gtk.ListBoxRow # the row or `nil` in case no row exists for the given y coordinate.
function Gtk.ListBox:get_row_at_y(y) end

--- # method Gtk.ListBox:get_selected_row()
---
--- Gets the selected row.
--- 
--- Note that the box may allow multiple selection, in which
--- case you should use `gtk_list_box_selected_foreach()` to
--- find all selected rows.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@return Gtk.ListBoxRow # the selected row
function Gtk.ListBox:get_selected_row() end

--- # method Gtk.ListBox:get_selected_rows()
---
--- Creates a list of all selected children.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@return Gtk.ListBoxRow[] # A `GList` containing the `GtkWidget` for each selected child. Free with `g_list_free()` when done.
function Gtk.ListBox:get_selected_rows() end

--- # method Gtk.ListBox:get_selection_mode()
---
--- Gets the selection mode of the listbox.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@return Gtk.SelectionMode # a `GtkSelectionMode`
function Gtk.ListBox:get_selection_mode() end

--- # method Gtk.ListBox:insert()
---
--- Insert the `child` into the `box` at `position`. If a sort function is
--- set, the widget will actually be inserted at the calculated position and
--- this function has the same effect of `gtk_container_add()`.
--- 
--- If `position` is -1, or larger than the total number of items in the
--- `box`, then the `child` will be appended to the end.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@param child Gtk.Widget # the `GtkWidget` to add
---@param position integer # the position to insert `child` in
---@return nil
function Gtk.ListBox:insert(child, position) end

--- # method Gtk.ListBox:invalidate_filter()
---
--- Update the filtering for all rows. Call this when result
--- of the filter function on the `box` is changed due
--- to an external factor. For instance, this would be used
--- if the filter function just looked for a specific search
--- string and the entry with the search string has changed.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@return nil
function Gtk.ListBox:invalidate_filter() end

--- # method Gtk.ListBox:invalidate_headers()
---
--- Update the separators for all rows. Call this when result
--- of the header function on the `box` is changed due
--- to an external factor.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@return nil
function Gtk.ListBox:invalidate_headers() end

--- # method Gtk.ListBox:invalidate_sort()
---
--- Update the sorting for all rows. Call this when result
--- of the sort function on the `box` is changed due
--- to an external factor.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@return nil
function Gtk.ListBox:invalidate_sort() end

--- # method Gtk.ListBox:prepend()
---
--- Prepend a widget to the list. If a sort function is set, the widget will
--- actually be inserted at the calculated position and this function has the
--- same effect of `gtk_container_add()`.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@param child Gtk.Widget # the `GtkWidget` to add
---@return nil
function Gtk.ListBox:prepend(child) end

--- # method Gtk.ListBox:select_all()
---
--- Select all children of `box`, if the selection mode allows it.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@return nil
function Gtk.ListBox:select_all() end

--- # method Gtk.ListBox:select_row()
---
--- Make `row` the currently selected row.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@param row? Gtk.ListBoxRow # The row to select or `nil`
---@return nil
function Gtk.ListBox:select_row(row) end

--- # method Gtk.ListBox:selected_foreach()
---
--- Calls a function for each selected child.
--- 
--- Note that the selection cannot be modified from within this function.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@param func Gtk.ListBoxForeachFunc # the function to call for each selected child
---@param data? userdata # user data to pass to the function
---@return nil
function Gtk.ListBox:selected_foreach(func, data) end

--- # method Gtk.ListBox:set_activate_on_single_click()
---
--- If `single` is `true`, rows will be activated when you click on them,
--- otherwise you need to double-click.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@param single (boolean|nil) # a boolean
---@return nil
function Gtk.ListBox:set_activate_on_single_click(single) end

--- # method Gtk.ListBox:set_adjustment()
---
--- Sets the adjustment (if any) that the widget uses to
--- for vertical scrolling. For instance, this is used
--- to get the page size for PageUp/Down key handling.
--- 
--- In the normal case when the `box` is packed inside
--- a `GtkScrolledWindow` the adjustment from that will
--- be picked up automatically, so there is no need
--- to manually do that.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@param adjustment? Gtk.Adjustment # the adjustment, or `nil`
---@return nil
function Gtk.ListBox:set_adjustment(adjustment) end

--- # method Gtk.ListBox:set_filter_func()
---
--- By setting a filter function on the `box` one can decide dynamically which
--- of the rows to show. For instance, to implement a search function on a list that
--- filters the original list to only show the matching rows.
--- 
--- The `filter_func` will be called for each row after the call, and it will
--- continue to be called each time a row changes (via `gtk_list_box_row_changed()`) or
--- when `gtk_list_box_invalidate_filter()` is called.
--- 
--- Note that using a filter function is incompatible with using a model
--- (see `gtk_list_box_bind_model()`).
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@param filter_func? Gtk.ListBoxFilterFunc # callback that lets you filter which rows to show
---@param user_data? userdata # user data passed to `filter_func`
---@param destroy GLib.DestroyNotify # destroy notifier for `user_data`
---@return nil
function Gtk.ListBox:set_filter_func(filter_func, user_data, destroy) end

--- # method Gtk.ListBox:set_header_func()
---
--- By setting a header function on the `box` one can dynamically add headers
--- in front of rows, depending on the contents of the row and its position in the list.
--- For instance, one could use it to add headers in front of the first item of a
--- new kind, in a list sorted by the kind.
--- 
--- The `update_header` can look at the current header widget using `gtk_list_box_row_get_header()`
--- and either update the state of the widget as needed, or set a new one using
--- `gtk_list_box_row_set_header()`. If no header is needed, set the header to `nil`.
--- 
--- Note that you may get many calls `update_header` to this for a particular row when e.g.
--- changing things that don’t affect the header. In this case it is important for performance
--- to not blindly replace an existing header with an identical one.
--- 
--- The `update_header` function will be called for each row after the call, and it will
--- continue to be called each time a row changes (via `gtk_list_box_row_changed()`) and when
--- the row before changes (either by `gtk_list_box_row_changed()` on the previous row, or when
--- the previous row becomes a different row). It is also called for all rows when
--- `gtk_list_box_invalidate_headers()` is called.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@param update_header? Gtk.ListBoxUpdateHeaderFunc # callback that lets you add row headers
---@param user_data? userdata # user data passed to `update_header`
---@param destroy GLib.DestroyNotify # destroy notifier for `user_data`
---@return nil
function Gtk.ListBox:set_header_func(update_header, user_data, destroy) end

--- # method Gtk.ListBox:set_placeholder()
---
--- Sets the placeholder widget that is shown in the list when
--- it doesn't display any visible children.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@param placeholder? Gtk.Widget # a `GtkWidget` or `nil`
---@return nil
function Gtk.ListBox:set_placeholder(placeholder) end

--- # method Gtk.ListBox:set_selection_mode()
---
--- Sets how selection works in the listbox.
--- See `GtkSelectionMode` for details.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@param mode Gtk.SelectionMode # The `GtkSelectionMode`
---@return nil
function Gtk.ListBox:set_selection_mode(mode) end

--- # method Gtk.ListBox:set_sort_func()
---
--- By setting a sort function on the `box` one can dynamically reorder the rows
--- of the list, based on the contents of the rows.
--- 
--- The `sort_func` will be called for each row after the call, and will continue to
--- be called each time a row changes (via `gtk_list_box_row_changed()`) and when
--- `gtk_list_box_invalidate_sort()` is called.
--- 
--- Note that using a sort function is incompatible with using a model
--- (see `gtk_list_box_bind_model()`).
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@param sort_func? Gtk.ListBoxSortFunc # the sort function
---@param user_data? userdata # user data passed to `sort_func`
---@param destroy GLib.DestroyNotify # destroy notifier for `user_data`
---@return nil
function Gtk.ListBox:set_sort_func(sort_func, user_data, destroy) end

--- # method Gtk.ListBox:unselect_all()
---
--- Unselect all children of `box`, if the selection mode allows it.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@return nil
function Gtk.ListBox:unselect_all() end

--- # method Gtk.ListBox:unselect_row()
---
--- Unselects a single row of `box`, if the selection mode allows it.
---
--- ---
---
---@param self Gtk.ListBox # a `GtkListBox`
---@param row Gtk.ListBoxRow # the row to unselected
---@return nil
function Gtk.ListBox:unselect_row(row) end

--- # function Gtk.ListBox.new()
---
--- Creates a new `GtkListBox` container.
---
--- ---
---
---@return Gtk.Widget # a new `GtkListBox`
function Gtk.ListBox.new() end

--- # class Gtk.ListBoxAccessible
---
---@class Gtk.ListBoxAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component, Gtk.Atk.Selection
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.ListBoxAccessiblePrivate
Gtk.ListBoxAccessible = {}

--- # record Gtk.ListBoxAccessibleClass
---
---@class Gtk.ListBoxAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.ListBoxAccessibleClass = {}

--- # record Gtk.ListBoxAccessiblePrivate
---
---@class Gtk.ListBoxAccessiblePrivate
Gtk.ListBoxAccessiblePrivate = {}

--- # record Gtk.ListBoxClass
---
---@class Gtk.ListBoxClass
---@field parent_class Gtk.ContainerClass # The parent class.
---@field row_selected fun(box: Gtk.ListBox, row: Gtk.ListBoxRow): nil
---@field row_activated fun(box: Gtk.ListBox, row: Gtk.ListBoxRow): nil
---@field activate_cursor_row fun(box: Gtk.ListBox): nil
---@field toggle_cursor_row fun(box: Gtk.ListBox): nil
---@field move_cursor fun(box: Gtk.ListBox, step: Gtk.MovementStep, count: integer): nil
---@field selected_rows_changed fun(box: Gtk.ListBox): nil
---@field select_all fun(box: Gtk.ListBox): nil
---@field unselect_all fun(box: Gtk.ListBox): nil
Gtk.ListBoxClass = {}

---@alias Gtk.ListBoxCreateWidgetFunc fun(item: GObject.Object, user_data: userdata): Gtk.Widget

---@alias Gtk.ListBoxFilterFunc fun(row: Gtk.ListBoxRow, user_data: userdata): (boolean|nil)

---@alias Gtk.ListBoxForeachFunc fun(box: Gtk.ListBox, row: Gtk.ListBoxRow, user_data: userdata): nil

--- # class Gtk.ListBoxRow
---
---@class Gtk.ListBoxRow : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Buildable
---@field parent_instance Gtk.Bin
---@operator call: Gtk.ListBoxRow
Gtk.ListBoxRow = {}

--- # method Gtk.ListBoxRow:changed()
---
--- Marks `row` as changed, causing any state that depends on this
--- to be updated. This affects sorting, filtering and headers.
--- 
--- Note that calls to this method must be in sync with the data
--- used for the row functions. For instance, if the list is
--- mirroring some external data set, and *two* rows changed in the
--- external data set then when you call `gtk_list_box_row_changed()`
--- on the first row the sort function must only read the new data
--- for the first of the two changed rows, otherwise the resorting
--- of the rows will be wrong.
--- 
--- This generally means that if you don’t fully control the data
--- model you have to duplicate the data that affects the listbox
--- row functions into the row widgets themselves. Another alternative
--- is to call `gtk_list_box_invalidate_sort()` on any model change,
--- but that is more expensive.
---
--- ---
---
---@param self Gtk.ListBoxRow # a `GtkListBoxRow`
---@return nil
function Gtk.ListBoxRow:changed() end

--- # method Gtk.ListBoxRow:get_activatable()
---
--- Gets the value of the `GtkListBoxRow`:activatable property
--- for this row.
---
--- ---
---
---@param self Gtk.ListBoxRow # a `GtkListBoxRow`
---@return (boolean|nil) # `true` if the row is activatable
function Gtk.ListBoxRow:get_activatable() end

--- # method Gtk.ListBoxRow:get_header()
---
--- Returns the current header of the `row`. This can be used
--- in a `GtkListBoxUpdateHeaderFunc` to see if there is a header
--- set already, and if so to update the state of it.
---
--- ---
---
---@param self Gtk.ListBoxRow # a `GtkListBoxRow`
---@return Gtk.Widget # the current header, or `nil` if none
function Gtk.ListBoxRow:get_header() end

--- # method Gtk.ListBoxRow:get_index()
---
--- Gets the current index of the `row` in its `GtkListBox` container.
---
--- ---
---
---@param self Gtk.ListBoxRow # a `GtkListBoxRow`
---@return integer # the index of the `row`, or -1 if the `row` is not in a listbox
function Gtk.ListBoxRow:get_index() end

--- # method Gtk.ListBoxRow:get_selectable()
---
--- Gets the value of the `GtkListBoxRow`:selectable property
--- for this row.
---
--- ---
---
---@param self Gtk.ListBoxRow # a `GtkListBoxRow`
---@return (boolean|nil) # `true` if the row is selectable
function Gtk.ListBoxRow:get_selectable() end

--- # method Gtk.ListBoxRow:is_selected()
---
--- Returns whether the child is currently selected in its
--- `GtkListBox` container.
---
--- ---
---
---@param self Gtk.ListBoxRow # a `GtkListBoxRow`
---@return (boolean|nil) # `true` if `row` is selected
function Gtk.ListBoxRow:is_selected() end

--- # method Gtk.ListBoxRow:set_activatable()
---
--- Set the `GtkListBoxRow`:activatable property for this row.
---
--- ---
---
---@param self Gtk.ListBoxRow # a `GtkListBoxRow`
---@param activatable (boolean|nil) # `true` to mark the row as activatable
---@return nil
function Gtk.ListBoxRow:set_activatable(activatable) end

--- # method Gtk.ListBoxRow:set_header()
---
--- Sets the current header of the `row`. This is only allowed to be called
--- from a `GtkListBoxUpdateHeaderFunc`. It will replace any existing
--- header in the row, and be shown in front of the row in the listbox.
---
--- ---
---
---@param self Gtk.ListBoxRow # a `GtkListBoxRow`
---@param header? Gtk.Widget # the header, or `nil`
---@return nil
function Gtk.ListBoxRow:set_header(header) end

--- # method Gtk.ListBoxRow:set_selectable()
---
--- Set the `GtkListBoxRow`:selectable property for this row.
---
--- ---
---
---@param self Gtk.ListBoxRow # a `GtkListBoxRow`
---@param selectable (boolean|nil) # `true` to mark the row as selectable
---@return nil
function Gtk.ListBoxRow:set_selectable(selectable) end

--- # function Gtk.ListBoxRow.new()
---
--- Creates a new `GtkListBoxRow`, to be used as a child of a `GtkListBox`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkListBoxRow`
function Gtk.ListBoxRow.new() end

--- # class Gtk.ListBoxRowAccessible
---
---@class Gtk.ListBoxRowAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component
---@field parent Gtk.ContainerAccessible
Gtk.ListBoxRowAccessible = {}

--- # record Gtk.ListBoxRowAccessibleClass
---
---@class Gtk.ListBoxRowAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.ListBoxRowAccessibleClass = {}

--- # record Gtk.ListBoxRowClass
---
---@class Gtk.ListBoxRowClass
---@field parent_class Gtk.BinClass # The parent class.
---@field activate fun(row: Gtk.ListBoxRow): nil
Gtk.ListBoxRowClass = {}

---@alias Gtk.ListBoxSortFunc fun(row1: Gtk.ListBoxRow, row2: Gtk.ListBoxRow, user_data: userdata): integer

---@alias Gtk.ListBoxUpdateHeaderFunc fun(row: Gtk.ListBoxRow, before: Gtk.ListBoxRow, user_data: userdata): nil

--- # class Gtk.ListStore
---
--- The `GtkListStore` object is a list model for use with a `GtkTreeView`
--- widget.  It implements the `GtkTreeModel` interface, and consequentialy,
--- can use all of the methods available there.  It also implements the
--- `GtkTreeSortable` interface so it can be sorted by the view.
--- Finally, it also implements the tree
--- [drag and drop][gtk3-GtkTreeView-drag-and-drop]
--- interfaces.
--- 
--- The `GtkListStore` can accept most GObject types as a column type, though
--- it can’t accept all custom types.  Internally, it will keep a copy of
--- data passed in (such as a string or a boxed pointer).  Columns that
--- accept `GObjects` are handled a little differently.  The
--- `GtkListStore` will keep a reference to the object instead of copying the
--- value.  As a result, if the object is modified, it is up to the
--- application writer to call `gtk_tree_model_row_changed()` to emit the
--- `GtkTreeModel`::row_changed signal.  This most commonly affects lists with
--- `GdkPixbufs` stored.
--- 
--- An example for creating a simple list store:
--- 
--- ```c
--- enum {
---   COLUMN_STRING,
---   COLUMN_INT,
---   COLUMN_BOOLEAN,
---   N_COLUMNS
--- };
--- 
--- {
---   GtkListStore *list_store;
---   GtkTreePath *path;
---   GtkTreeIter iter;
---   gint i;
--- 
---   list_store = gtk_list_store_new (N_COLUMNS,
---                                    G_TYPE_STRING,
---                                    G_TYPE_INT,
---                                    G_TYPE_BOOLEAN);
--- 
---   for (i = 0; i < 10; i++)
---     {
---       gchar *some_data;
--- 
---       some_data = get_some_data (i);
--- 
---       // Add a new row to the model
---       gtk_list_store_append (list_store, &iter);
---       gtk_list_store_set (list_store, &iter,
---                           COLUMN_STRING, some_data,
---                           COLUMN_INT, i,
---                           COLUMN_BOOLEAN,  FALSE,
---                           -1);
--- 
---       // As the store will keep a copy of the string internally,
---       // we free some_data.
---       g_free (some_data);
---     }
--- 
---   // Modify a particular row
---   path = gtk_tree_path_new_from_string ("4");
---   gtk_tree_model_get_iter (GTK_TREE_MODEL (list_store),
---                            &iter,
---                            path);
---   gtk_tree_path_free (path);
---   gtk_list_store_set (list_store, &iter,
---                       COLUMN_BOOLEAN, TRUE,
---                       -1);
--- }
--- ```
--- 
--- # Performance Considerations
--- 
--- Internally, the `GtkListStore` was implemented with a linked list with
--- a tail pointer prior to GTK+ 2.6.  As a result, it was fast at data
--- insertion and deletion, and not fast at random data access.  The
--- `GtkListStore` sets the `GTK_TREE_MODEL_ITERS_PERSIST` flag, which means
--- that `GtkTreeIters` can be cached while the row exists.  Thus, if
--- access to a particular row is needed often and your code is expected to
--- run on older versions of GTK+, it is worth keeping the iter around.
--- 
--- # Atomic Operations
--- 
--- It is important to note that only the methods
--- `gtk_list_store_insert_with_values()` and `gtk_list_store_insert_with_valuesv()`
--- are atomic, in the sense that the row is being appended to the store and the
--- values filled in in a single operation with regard to `GtkTreeModel` signaling.
--- In contrast, using e.g. `gtk_list_store_append()` and then `gtk_list_store_set()`
--- will first create a row, which triggers the `GtkTreeModel`::row-inserted signal
--- on `GtkListStore`. The row, however, is still empty, and any signal handler
--- connecting to `GtkTreeModel`::row-inserted on this particular store should be prepared
--- for the situation that the row might be empty. This is especially important
--- if you are wrapping the `GtkListStore` inside a `GtkTreeModelFilter` and are
--- using a `GtkTreeModelFilterVisibleFunc`. Using any of the non-atomic operations
--- to append rows to the `GtkListStore` will cause the
--- `GtkTreeModelFilterVisibleFunc` to be visited with an empty row first; the
--- function must be prepared for that.
--- 
--- # GtkListStore as GtkBuildable
--- 
--- The GtkListStore implementation of the GtkBuildable interface allows
--- to specify the model columns with a `<columns>` element that may contain
--- multiple `<column>` elements, each specifying one model column. The “type”
--- attribute specifies the data type for the column.
--- 
--- Additionally, it is possible to specify content for the list store
--- in the UI definition, with the `<data>` element. It can contain multiple
--- `<row>` elements, each specifying to content for one row of the list model.
--- Inside a `<row>`, the `<col>` elements specify the content for individual cells.
--- 
--- Note that it is probably more common to define your models in the code,
--- and one might consider it a layering violation to specify the content of
--- a list store in a UI definition, data, not presentation, and common wisdom
--- is to separate the two, as far as possible.
--- 
--- An example of a UI Definition fragment for a list store:
--- 
--- ```xml
--- <object class="GtkListStore">
---   <columns>
---     <column type="gchararray"/>
---     <column type="gchararray"/>
---     <column type="gint"/>
---   </columns>
---   <data>
---     <row>
---       <col id="0">John</col>
---       <col id="1">Doe</col>
---       <col id="2">25</col>
---     </row>
---     <row>
---       <col id="0">Johan</col>
---       <col id="1">Dahlin</col>
---       <col id="2">50</col>
---     </row>
---   </data>
--- </object>
--- ```
---
--- ---
---
---@class Gtk.ListStore : GObject.Object, Gtk.Buildable, Gtk.TreeDragDest, Gtk.TreeDragSource, Gtk.TreeModel, Gtk.TreeSortable
---@field parent GObject.Object
---@field priv Gtk.ListStorePrivate
---@operator call: Gtk.ListStore
Gtk.ListStore = {}

--- # method Gtk.ListStore:append()
---
--- Appends a new row to `list_store`.  `iter` will be changed to point to this new
--- row.  The row will be empty after this function is called.  To fill in
--- values, you need to call `gtk_list_store_set()` or `gtk_list_store_set_value()`.
---
--- ---
---
---@param self Gtk.ListStore # A `GtkListStore`
---@param iter Gtk.TreeIter # An unset `GtkTreeIter` to set to the appended row
---@return nil
function Gtk.ListStore:append(iter) end

--- # method Gtk.ListStore:clear()
---
--- Removes all rows from the list store.
---
--- ---
---
---@param self Gtk.ListStore # a `GtkListStore`.
---@return nil
function Gtk.ListStore:clear() end

--- # method Gtk.ListStore:insert()
---
--- Creates a new row at `position`.  `iter` will be changed to point to this new
--- row.  If `position` is -1 or is larger than the number of rows on the list,
--- then the new row will be appended to the list. The row will be empty after
--- this function is called.  To fill in values, you need to call
--- `gtk_list_store_set()` or `gtk_list_store_set_value()`.
---
--- ---
---
---@param self Gtk.ListStore # A `GtkListStore`
---@param iter Gtk.TreeIter # An unset `GtkTreeIter` to set to the new row
---@param position integer # position to insert the new row, or -1 for last
---@return nil
function Gtk.ListStore:insert(iter, position) end

--- # method Gtk.ListStore:insert_after()
---
--- Inserts a new row after `sibling`. If `sibling` is `nil`, then the row will be
--- prepended to the beginning of the list. `iter` will be changed to point to
--- this new row. The row will be empty after this function is called. To fill
--- in values, you need to call `gtk_list_store_set()` or `gtk_list_store_set_value()`.
---
--- ---
---
---@param self Gtk.ListStore # A `GtkListStore`
---@param iter Gtk.TreeIter # An unset `GtkTreeIter` to set to the new row
---@param sibling? Gtk.TreeIter # A valid `GtkTreeIter`, or `nil`
---@return nil
function Gtk.ListStore:insert_after(iter, sibling) end

--- # method Gtk.ListStore:insert_before()
---
--- Inserts a new row before `sibling`. If `sibling` is `nil`, then the row will
--- be appended to the end of the list. `iter` will be changed to point to this
--- new row. The row will be empty after this function is called. To fill in
--- values, you need to call `gtk_list_store_set()` or `gtk_list_store_set_value()`.
---
--- ---
---
---@param self Gtk.ListStore # A `GtkListStore`
---@param iter Gtk.TreeIter # An unset `GtkTreeIter` to set to the new row
---@param sibling? Gtk.TreeIter # A valid `GtkTreeIter`, or `nil`
---@return nil
function Gtk.ListStore:insert_before(iter, sibling) end

--- # method Gtk.ListStore:insert_with_valuesv()
---
--- A variant of `gtk_list_store_insert_with_values()` which
--- takes the columns and values as two arrays, instead of
--- varargs. This function is mainly intended for
--- language-bindings.
---
--- ---
---
---@param self Gtk.ListStore # A `GtkListStore`
---@param iter? Gtk.TreeIter # An unset `GtkTreeIter` to set to the new row, or `nil`.
---@param position integer # position to insert the new row, or -1 for last
---@param columns unknown[] # an array of column numbers
---@param values unknown[] # an array of GValues
---@param n_values integer # the length of the `columns` and `values` arrays
---@return nil
function Gtk.ListStore:insert_with_valuesv(iter, position, columns, values, n_values) end

--- # method Gtk.ListStore:iter_is_valid()
---
--- > This function is slow. Only use it for debugging and/or testing
--- > purposes.
--- 
--- Checks if the given iter is a valid iter for this `GtkListStore`.
---
--- ---
---
---@param self Gtk.ListStore # A `GtkListStore`.
---@param iter Gtk.TreeIter # A `GtkTreeIter`.
---@return (boolean|nil) # `true` if the iter is valid, `false` if the iter is invalid.
function Gtk.ListStore:iter_is_valid(iter) end

--- # method Gtk.ListStore:move_after()
---
--- Moves `iter` in `store` to the position after `position`. Note that this
--- function only works with unsorted stores. If `position` is `nil`, `iter`
--- will be moved to the start of the list.
---
--- ---
---
---@param self Gtk.ListStore # A `GtkListStore`.
---@param iter Gtk.TreeIter # A `GtkTreeIter`.
---@param position? Gtk.TreeIter # A `GtkTreeIter` or `nil`.
---@return nil
function Gtk.ListStore:move_after(iter, position) end

--- # method Gtk.ListStore:move_before()
---
--- Moves `iter` in `store` to the position before `position`. Note that this
--- function only works with unsorted stores. If `position` is `nil`, `iter`
--- will be moved to the end of the list.
---
--- ---
---
---@param self Gtk.ListStore # A `GtkListStore`.
---@param iter Gtk.TreeIter # A `GtkTreeIter`.
---@param position? Gtk.TreeIter # A `GtkTreeIter`, or `nil`.
---@return nil
function Gtk.ListStore:move_before(iter, position) end

--- # method Gtk.ListStore:prepend()
---
--- Prepends a new row to `list_store`. `iter` will be changed to point to this new
--- row. The row will be empty after this function is called. To fill in
--- values, you need to call `gtk_list_store_set()` or `gtk_list_store_set_value()`.
---
--- ---
---
---@param self Gtk.ListStore # A `GtkListStore`
---@param iter Gtk.TreeIter # An unset `GtkTreeIter` to set to the prepend row
---@return nil
function Gtk.ListStore:prepend(iter) end

--- # method Gtk.ListStore:remove()
---
--- Removes the given row from the list store.  After being removed,
--- `iter` is set to be the next valid row, or invalidated if it pointed
--- to the last row in `list_store`.
---
--- ---
---
---@param self Gtk.ListStore # A `GtkListStore`
---@param iter Gtk.TreeIter # A valid `GtkTreeIter`
---@return (boolean|nil) # `true` if `iter` is valid, `false` if not.
function Gtk.ListStore:remove(iter) end

--- # method Gtk.ListStore:reorder()
---
--- Reorders `store` to follow the order indicated by `new_order`. Note that
--- this function only works with unsorted stores.
---
--- ---
---
---@param self Gtk.ListStore # A `GtkListStore`.
---@param new_order unknown[] # an array of integers mapping the new position of each child to its old position before the re-ordering, i.e. `new_order``[newpos] = oldpos`. It must have exactly as many items as the list store’s length.
---@return nil
function Gtk.ListStore:reorder(new_order) end

--- # method Gtk.ListStore:set_column_types()
---
--- This function is meant primarily for `GObjects` that inherit from `GtkListStore`,
--- and should only be used when constructing a new `GtkListStore`.  It will not
--- function after a row has been added, or a method on the `GtkTreeModel`
--- interface is called.
---
--- ---
---
---@param self Gtk.ListStore # A `GtkListStore`
---@param n_columns integer # Number of columns for the list store
---@param types unknown[] # An array length n of `GTypes`
---@return nil
function Gtk.ListStore:set_column_types(n_columns, types) end

--- # method Gtk.ListStore:set_value()
---
--- Sets the data in the cell specified by `iter` and `column`.
--- The type of `value` must be convertible to the type of the
--- column.
---
--- ---
---
---@param self Gtk.ListStore # A `GtkListStore`
---@param iter Gtk.TreeIter # A valid `GtkTreeIter` for the row being modified
---@param column integer # column number to modify
---@param value GObject.Value # new value for the cell
---@return nil
function Gtk.ListStore:set_value(iter, column, value) end

--- # method Gtk.ListStore:set()
---
--- A variant of `gtk_list_store_set_valist()` which
--- takes the columns and values as two arrays, instead of
--- varargs. This function is mainly intended for
--- language-bindings and in case the number of columns to
--- change is not known until run-time.
---
--- ---
---
---@param self Gtk.ListStore # A `GtkListStore`
---@param iter Gtk.TreeIter # A valid `GtkTreeIter` for the row being modified
---@param columns unknown[] # an array of column numbers
---@param values unknown[] # an array of GValues
---@param n_values integer # the length of the `columns` and `values` arrays
---@return nil
function Gtk.ListStore:set(iter, columns, values, n_values) end

--- # method Gtk.ListStore:swap()
---
--- Swaps `a` and `b` in `store`. Note that this function only works with
--- unsorted stores.
---
--- ---
---
---@param self Gtk.ListStore # A `GtkListStore`.
---@param a Gtk.TreeIter # A `GtkTreeIter`.
---@param b Gtk.TreeIter # Another `GtkTreeIter`.
---@return nil
function Gtk.ListStore:swap(a, b) end

--- # function Gtk.ListStore.new()
---
--- Non-vararg creation function.  Used primarily by language bindings.
---
--- ---
---
---@param n_columns integer # number of columns in the list store
---@param types unknown[] # an array of `GType` types for the columns, from first to last
---@return Gtk.ListStore # a new `GtkListStore`
function Gtk.ListStore.new(n_columns, types) end

--- # record Gtk.ListStoreClass
---
---@class Gtk.ListStoreClass
---@field parent_class GObject.ObjectClass
Gtk.ListStoreClass = {}

--- # record Gtk.ListStorePrivate
---
---@class Gtk.ListStorePrivate
Gtk.ListStorePrivate = {}

--- # class Gtk.LockButton
---
--- GtkLockButton is a widget that can be used in control panels or
--- preference dialogs to allow users to obtain and revoke authorizations
--- needed to operate the controls. The required authorization is represented
--- by a `GPermission` object. Concrete implementations of `GPermission` may use
--- PolicyKit or some other authorization framework. To obtain a PolicyKit-based
--- `GPermission`, use `polkit_permission_new()`.
--- 
--- If the user is not currently allowed to perform the action, but can obtain
--- the permission, the widget looks like this:
--- 
--- ![](lockbutton-locked.png)
--- 
--- and the user can click the button to request the permission. Depending
--- on the platform, this may pop up an authentication dialog or ask the user
--- to authenticate in some other way. Once the user has obtained the permission,
--- the widget changes to this:
--- 
--- ![](lockbutton-unlocked.png)
--- 
--- and the permission can be dropped again by clicking the button. If the user
--- is not able to obtain the permission at all, the widget looks like this:
--- 
--- ![](lockbutton-sorry.png)
--- 
--- If the user has the permission and cannot drop it, the button is hidden.
--- 
--- The text (and tooltips) that are shown in the various cases can be adjusted
--- with the `GtkLockButton`:text-lock, `GtkLockButton`:text-unlock,
--- `GtkLockButton`:tooltip-lock, `GtkLockButton`:tooltip-unlock and
--- `GtkLockButton`:tooltip-not-authorized properties.
---
--- ---
---
---@class Gtk.LockButton : Gtk.Button, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field parent Gtk.Button
---@field priv Gtk.LockButtonPrivate
---@operator call: Gtk.LockButton
Gtk.LockButton = {}

--- # method Gtk.LockButton:get_permission()
---
--- Obtains the `GPermission` object that controls `button`.
---
--- ---
---
---@param self Gtk.LockButton # a `GtkLockButton`
---@return Gio.Permission # the `GPermission` of `button`
function Gtk.LockButton:get_permission() end

--- # method Gtk.LockButton:set_permission()
---
--- Sets the `GPermission` object that controls `button`.
---
--- ---
---
---@param self Gtk.LockButton # a `GtkLockButton`
---@param permission? Gio.Permission # a `GPermission` object, or `nil`
---@return nil
function Gtk.LockButton:set_permission(permission) end

--- # function Gtk.LockButton.new()
---
--- Creates a new lock button which reflects the `permission`.
---
--- ---
---
---@param permission? Gio.Permission # a `GPermission`
---@return Gtk.Widget # a new `GtkLockButton`
function Gtk.LockButton.new(permission) end

--- # class Gtk.LockButtonAccessible
---
---@class Gtk.LockButtonAccessible : Gtk.ButtonAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.Image
---@field parent Gtk.ButtonAccessible
---@field priv Gtk.LockButtonAccessiblePrivate
Gtk.LockButtonAccessible = {}

--- # record Gtk.LockButtonAccessibleClass
---
---@class Gtk.LockButtonAccessibleClass
---@field parent_class Gtk.ButtonAccessibleClass
Gtk.LockButtonAccessibleClass = {}

--- # record Gtk.LockButtonAccessiblePrivate
---
---@class Gtk.LockButtonAccessiblePrivate
Gtk.LockButtonAccessiblePrivate = {}

--- # record Gtk.LockButtonClass
---
---@class Gtk.LockButtonClass
---@field parent_class Gtk.ButtonClass # The parent class.
---@field reserved0 fun(): nil
---@field reserved1 fun(): nil
---@field reserved2 fun(): nil
---@field reserved3 fun(): nil
---@field reserved4 fun(): nil
---@field reserved5 fun(): nil
---@field reserved6 fun(): nil
---@field reserved7 fun(): nil
Gtk.LockButtonClass = {}

--- # record Gtk.LockButtonPrivate
---
---@class Gtk.LockButtonPrivate
Gtk.LockButtonPrivate = {}

--- # class Gtk.Menu
---
--- A `GtkMenu` is a `GtkMenuShell` that implements a drop down menu
--- consisting of a list of `GtkMenuItem` objects which can be navigated
--- and activated by the user to perform application functions.
--- 
--- A `GtkMenu` is most commonly dropped down by activating a
--- `GtkMenuItem` in a `GtkMenuBar` or popped up by activating a
--- `GtkMenuItem` in another `GtkMenu`.
--- 
--- A `GtkMenu` can also be popped up by activating a `GtkComboBox`.
--- Other composite widgets such as the `GtkNotebook` can pop up a
--- `GtkMenu` as well.
--- 
--- Applications can display a `GtkMenu` as a popup menu by calling the
--- `gtk_menu_popup()` function.  The example below shows how an application
--- can pop up a menu when the 3rd mouse button is pressed.
--- 
--- ## Connecting the popup signal handler.
--- 
--- ```c
---   // connect our handler which will popup the menu
---   g_signal_connect_swapped (window, "button_press_event",
--- G_CALLBACK (my_popup_handler), menu);
--- ```
--- 
--- ## Signal handler which displays a popup menu.
--- 
--- ```c
--- static gint
--- my_popup_handler (GtkWidget *widget, GdkEvent *event)
--- {
---   GtkMenu *menu;
---   GdkEventButton *event_button;
--- 
---   g_return_val_if_fail (widget != NULL, FALSE);
---   g_return_val_if_fail (GTK_IS_MENU (widget), FALSE);
---   g_return_val_if_fail (event != NULL, FALSE);
--- 
---   // The "widget" is the menu that was supplied when
---   // `g_signal_connect_swapped()` was called.
---   menu = GTK_MENU (widget);
--- 
---   if (event->type == GDK_BUTTON_PRESS)
---     {
---       event_button = (GdkEventButton *) event;
---       if (event_button->button == GDK_BUTTON_SECONDARY)
---         {
---           gtk_menu_popup (menu, NULL, NULL, NULL, NULL,
---                           event_button->button, event_button->time);
---           return TRUE;
---         }
---     }
--- 
---   return FALSE;
--- }
--- ```
--- 
--- # CSS nodes
--- 
--- ```plain
--- menu
--- ├── arrow.top
--- ├── <child>
--- ┊
--- ├── <child>
--- ╰── arrow.bottom
--- ```
--- 
--- The main CSS node of GtkMenu has name menu, and there are two subnodes
--- with name arrow, for scrolling menu arrows. These subnodes get the
--- .top and .bottom style classes.
---
--- ---
---
---@class Gtk.Menu : Gtk.MenuShell, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field menu_shell Gtk.MenuShell
---@field priv Gtk.MenuPrivate
---@operator call: Gtk.Menu
Gtk.Menu = {}

--- # method Gtk.Menu:attach()
---
--- Adds a new `GtkMenuItem` to a (table) menu. The number of “cells” that
--- an item will occupy is specified by `left_attach`, `right_attach`,
--- `top_attach` and `bottom_attach`. These each represent the leftmost,
--- rightmost, uppermost and lower column and row numbers of the table.
--- (Columns and rows are indexed from zero).
--- 
--- Note that this function is not related to `gtk_menu_detach()`.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@param child Gtk.Widget # a `GtkMenuItem`
---@param left_attach integer # The column number to attach the left side of the item to
---@param right_attach integer # The column number to attach the right side of the item to
---@param top_attach integer # The row number to attach the top of the item to
---@param bottom_attach integer # The row number to attach the bottom of the item to
---@return nil
function Gtk.Menu:attach(child, left_attach, right_attach, top_attach, bottom_attach) end

--- # method Gtk.Menu:attach_to_widget()
---
--- Attaches the menu to the widget and provides a callback function
--- that will be invoked when the menu calls `gtk_menu_detach()` during
--- its destruction.
--- 
--- If the menu is attached to the widget then it will be destroyed
--- when the widget is destroyed, as if it was a child widget.
--- An attached menu will also move between screens correctly if the
--- widgets moves between screens.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@param attach_widget Gtk.Widget # the `GtkWidget` that the menu will be attached to
---@param detacher? Gtk.MenuDetachFunc # the user supplied callback function that will be called when the menu calls `gtk_menu_detach()`
---@return nil
function Gtk.Menu:attach_to_widget(attach_widget, detacher) end

--- # method Gtk.Menu:detach()
---
--- Detaches the menu from the widget to which it had been attached.
--- This function will call the callback function, `detacher`, provided
--- when the `gtk_menu_attach_to_widget()` function was called.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@return nil
function Gtk.Menu:detach() end

--- # method Gtk.Menu:get_accel_group()
---
--- Gets the `GtkAccelGroup` which holds global accelerators for the
--- menu. See `gtk_menu_set_accel_group()`.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@return Gtk.AccelGroup # the `GtkAccelGroup` associated with the menu
function Gtk.Menu:get_accel_group() end

--- # method Gtk.Menu:get_accel_path()
---
--- Retrieves the accelerator path set on the menu.
---
--- ---
---
---@param self Gtk.Menu # a valid `GtkMenu`
---@return string # the accelerator path set on the menu.
function Gtk.Menu:get_accel_path() end

--- # method Gtk.Menu:get_active()
---
--- Returns the selected menu item from the menu.  This is used by the
--- `GtkComboBox`.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@return Gtk.Widget # the `GtkMenuItem` that was last selected in the menu. If a selection has not yet been made, the first menu item is selected.
function Gtk.Menu:get_active() end

--- # method Gtk.Menu:get_attach_widget()
---
--- Returns the `GtkWidget` that the menu is attached to.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@return Gtk.Widget # the `GtkWidget` that the menu is attached to
function Gtk.Menu:get_attach_widget() end

--- # method Gtk.Menu:get_monitor()
---
--- Retrieves the number of the monitor on which to show the menu.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@return integer # the number of the monitor on which the menu should be popped up or -1, if no monitor has been set
function Gtk.Menu:get_monitor() end

--- # method Gtk.Menu:get_reserve_toggle_size()
---
--- Returns whether the menu reserves space for toggles and
--- icons, regardless of their actual presence.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@return (boolean|nil) # Whether the menu reserves toggle space
function Gtk.Menu:get_reserve_toggle_size() end

--- # method Gtk.Menu:get_tearoff_state()
---
--- Returns whether the menu is torn off.
--- See `gtk_menu_set_tearoff_state()`.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@return (boolean|nil) # `true` if the menu is currently torn off.
function Gtk.Menu:get_tearoff_state() end

--- # method Gtk.Menu:get_title()
---
--- Returns the title of the menu. See `gtk_menu_set_title()`.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@return string # the title of the menu, or `nil` if the menu has no title set on it. This string is owned by GTK+ and should not be modified or freed.
function Gtk.Menu:get_title() end

--- # method Gtk.Menu:place_on_monitor()
---
--- Places `menu` on the given monitor.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@param monitor Gdk.Monitor # the monitor to place the menu on
---@return nil
function Gtk.Menu:place_on_monitor(monitor) end

--- # method Gtk.Menu:popdown()
---
--- Removes the menu from the screen.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@return nil
function Gtk.Menu:popdown() end

--- # method Gtk.Menu:popup()
---
--- Displays a menu and makes it available for selection.
--- 
--- Applications can use this function to display context-sensitive
--- menus, and will typically supply `nil` for the `parent_menu_shell`,
--- `parent_menu_item`, `func` and `data` parameters. The default menu
--- positioning function will position the menu at the current mouse
--- cursor position.
--- 
--- The `button` parameter should be the mouse button pressed to initiate
--- the menu popup. If the menu popup was initiated by something other
--- than a mouse button press, such as a mouse button release or a keypress,
--- `button` should be 0.
--- 
--- The `activate_time` parameter is used to conflict-resolve initiation
--- of concurrent requests for mouse/keyboard grab requests. To function
--- properly, this needs to be the timestamp of the user event (such as
--- a mouse click or key press) that caused the initiation of the popup.
--- Only if no such event is available, `gtk_get_current_event_time()` can
--- be used instead.
--- 
--- Note that this function does not work very well on GDK backends that
--- do not have global coordinates, such as Wayland or Mir. You should
--- probably use one of the gtk_menu_popup_at_ variants, which do not
--- have this problem.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@param parent_menu_shell? Gtk.Widget # the menu shell containing the triggering menu item, or `nil`
---@param parent_menu_item? Gtk.Widget # the menu item whose activation triggered the popup, or `nil`
---@param func? Gtk.MenuPositionFunc # a user supplied function used to position the menu, or `nil`
---@param data? userdata # user supplied data to be passed to `func`.
---@param button integer # the mouse button which was pressed to initiate the event.
---@param activate_time integer # the time at which the activation event occurred.
---@return nil
function Gtk.Menu:popup(parent_menu_shell, parent_menu_item, func, data, button, activate_time) end

--- # method Gtk.Menu:popup_at_pointer()
---
--- Displays `menu` and makes it available for selection.
--- 
--- See gtk_menu_popup_at_widget () to pop up a menu at a widget.
--- gtk_menu_popup_at_rect () also allows you to position a menu at an arbitrary
--- rectangle.
--- 
--- `menu` will be positioned at the pointer associated with `trigger_event`.
--- 
--- Properties that influence the behaviour of this function are
--- `GtkMenu`:anchor-hints, `GtkMenu`:rect-anchor-dx, `GtkMenu`:rect-anchor-dy, and
--- `GtkMenu`:menu-type-hint. Connect to the `GtkMenu`::popped-up signal to find
--- out how it was actually positioned.
---
--- ---
---
---@param self Gtk.Menu # the `GtkMenu` to pop up
---@param trigger_event? Gdk.Event # the `GdkEvent` that initiated this request or `nil` if it's the current event
---@return nil
function Gtk.Menu:popup_at_pointer(trigger_event) end

--- # method Gtk.Menu:popup_at_rect()
---
--- Displays `menu` and makes it available for selection.
--- 
--- See gtk_menu_popup_at_widget () and gtk_menu_popup_at_pointer (), which
--- handle more common cases for popping up menus.
--- 
--- `menu` will be positioned at `rect`, aligning their anchor points. `rect` is
--- relative to the top-left corner of `rect_window`. `rect_anchor` and
--- `menu_anchor` determine anchor points on `rect` and `menu` to pin together.
--- `menu` can optionally be offset by `GtkMenu`:rect-anchor-dx and
--- `GtkMenu`:rect-anchor-dy.
--- 
--- Anchors should be specified under the assumption that the text direction is
--- left-to-right; they will be flipped horizontally automatically if the text
--- direction is right-to-left.
--- 
--- Other properties that influence the behaviour of this function are
--- `GtkMenu`:anchor-hints and `GtkMenu`:menu-type-hint. Connect to the
--- `GtkMenu`::popped-up signal to find out how it was actually positioned.
---
--- ---
---
---@param self Gtk.Menu # the `GtkMenu` to pop up
---@param rect_window Gdk.Window # the `GdkWindow` `rect` is relative to
---@param rect Gdk.Rectangle # the `GdkRectangle` to align `menu` with
---@param rect_anchor Gdk.Gravity # the point on `rect` to align with `menu`'s anchor point
---@param menu_anchor Gdk.Gravity # the point on `menu` to align with `rect`'s anchor point
---@param trigger_event? Gdk.Event # the `GdkEvent` that initiated this request or `nil` if it's the current event
---@return nil
function Gtk.Menu:popup_at_rect(rect_window, rect, rect_anchor, menu_anchor, trigger_event) end

--- # method Gtk.Menu:popup_at_widget()
---
--- Displays `menu` and makes it available for selection.
--- 
--- See gtk_menu_popup_at_pointer () to pop up a menu at the master pointer.
--- gtk_menu_popup_at_rect () also allows you to position a menu at an arbitrary
--- rectangle.
--- 
--- ![](popup-anchors.png)
--- 
--- `menu` will be positioned at `widget`, aligning their anchor points.
--- `widget_anchor` and `menu_anchor` determine anchor points on `widget` and `menu`
--- to pin together. `menu` can optionally be offset by `GtkMenu`:rect-anchor-dx
--- and `GtkMenu`:rect-anchor-dy.
--- 
--- Anchors should be specified under the assumption that the text direction is
--- left-to-right; they will be flipped horizontally automatically if the text
--- direction is right-to-left.
--- 
--- Other properties that influence the behaviour of this function are
--- `GtkMenu`:anchor-hints and `GtkMenu`:menu-type-hint. Connect to the
--- `GtkMenu`::popped-up signal to find out how it was actually positioned.
---
--- ---
---
---@param self Gtk.Menu # the `GtkMenu` to pop up
---@param widget Gtk.Widget # the `GtkWidget` to align `menu` with
---@param widget_anchor Gdk.Gravity # the point on `widget` to align with `menu`'s anchor point
---@param menu_anchor Gdk.Gravity # the point on `menu` to align with `widget`'s anchor point
---@param trigger_event? Gdk.Event # the `GdkEvent` that initiated this request or `nil` if it's the current event
---@return nil
function Gtk.Menu:popup_at_widget(widget, widget_anchor, menu_anchor, trigger_event) end

--- # method Gtk.Menu:popup_for_device()
---
--- Displays a menu and makes it available for selection.
--- 
--- Applications can use this function to display context-sensitive menus,
--- and will typically supply `nil` for the `parent_menu_shell`,
--- `parent_menu_item`, `func`, `data` and `destroy` parameters. The default
--- menu positioning function will position the menu at the current position
--- of `device` (or its corresponding pointer).
--- 
--- The `button` parameter should be the mouse button pressed to initiate
--- the menu popup. If the menu popup was initiated by something other than
--- a mouse button press, such as a mouse button release or a keypress,
--- `button` should be 0.
--- 
--- The `activate_time` parameter is used to conflict-resolve initiation of
--- concurrent requests for mouse/keyboard grab requests. To function
--- properly, this needs to be the time stamp of the user event (such as
--- a mouse click or key press) that caused the initiation of the popup.
--- Only if no such event is available, `gtk_get_current_event_time()` can
--- be used instead.
--- 
--- Note that this function does not work very well on GDK backends that
--- do not have global coordinates, such as Wayland or Mir. You should
--- probably use one of the gtk_menu_popup_at_ variants, which do not
--- have this problem.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@param device? Gdk.Device # a `GdkDevice`
---@param parent_menu_shell? Gtk.Widget # the menu shell containing the triggering menu item, or `nil`
---@param parent_menu_item? Gtk.Widget # the menu item whose activation triggered the popup, or `nil`
---@param func? Gtk.MenuPositionFunc # a user supplied function used to position the menu, or `nil`
---@param data? userdata # user supplied data to be passed to `func`
---@param destroy? GLib.DestroyNotify # destroy notify for `data`
---@param button integer # the mouse button which was pressed to initiate the event
---@param activate_time integer # the time at which the activation event occurred
---@return nil
function Gtk.Menu:popup_for_device(device, parent_menu_shell, parent_menu_item, func, data, destroy, button, activate_time) end

--- # method Gtk.Menu:reorder_child()
---
--- Moves `child` to a new `position` in the list of `menu`
--- children.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@param child Gtk.Widget # the `GtkMenuItem` to move
---@param position integer # the new position to place `child`. Positions are numbered from 0 to n - 1
---@return nil
function Gtk.Menu:reorder_child(child, position) end

--- # method Gtk.Menu:reposition()
---
--- Repositions the menu according to its position function.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@return nil
function Gtk.Menu:reposition() end

--- # method Gtk.Menu:set_accel_group()
---
--- Set the `GtkAccelGroup` which holds global accelerators for the
--- menu.  This accelerator group needs to also be added to all windows
--- that this menu is being used in with `gtk_window_add_accel_group()`,
--- in order for those windows to support all the accelerators
--- contained in this group.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@param accel_group? Gtk.AccelGroup # the `GtkAccelGroup` to be associated with the menu.
---@return nil
function Gtk.Menu:set_accel_group(accel_group) end

--- # method Gtk.Menu:set_accel_path()
---
--- Sets an accelerator path for this menu from which accelerator paths
--- for its immediate children, its menu items, can be constructed.
--- The main purpose of this function is to spare the programmer the
--- inconvenience of having to call `gtk_menu_item_set_accel_path()` on
--- each menu item that should support runtime user changable accelerators.
--- Instead, by just calling `gtk_menu_set_accel_path()` on their parent,
--- each menu item of this menu, that contains a label describing its
--- purpose, automatically gets an accel path assigned.
--- 
--- For example, a menu containing menu items “New” and “Exit”, will, after
--- `gtk_menu_set_accel_path (menu, "<Gnumeric-Sheet>/File");` has been
--- called, assign its items the accel paths: `"<Gnumeric-Sheet>/File/New"`
--- and `"<Gnumeric-Sheet>/File/Exit"`.
--- 
--- Assigning accel paths to menu items then enables the user to change
--- their accelerators at runtime. More details about accelerator paths
--- and their default setups can be found at `gtk_accel_map_add_entry()`.
--- 
--- Note that `accel_path` string will be stored in a `GQuark`. Therefore,
--- if you pass a static string, you can save some memory by interning
--- it first with `g_intern_static_string()`.
---
--- ---
---
---@param self Gtk.Menu # a valid `GtkMenu`
---@param accel_path? string # a valid accelerator path, or `nil` to unset the path
---@return nil
function Gtk.Menu:set_accel_path(accel_path) end

--- # method Gtk.Menu:set_active()
---
--- Selects the specified menu item within the menu.  This is used by
--- the `GtkComboBox` and should not be used by anyone else.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@param index integer # the index of the menu item to select. Index values are from 0 to n-1
---@return nil
function Gtk.Menu:set_active(index) end

--- # method Gtk.Menu:set_monitor()
---
--- Informs GTK+ on which monitor a menu should be popped up.
--- See `gdk_monitor_get_geometry()`.
--- 
--- This function should be called from a `GtkMenuPositionFunc`
--- if the menu should not appear on the same monitor as the pointer.
--- This information can’t be reliably inferred from the coordinates
--- returned by a `GtkMenuPositionFunc`, since, for very long menus,
--- these coordinates may extend beyond the monitor boundaries or even
--- the screen boundaries.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@param monitor_num integer # the number of the monitor on which the menu should be popped up
---@return nil
function Gtk.Menu:set_monitor(monitor_num) end

--- # method Gtk.Menu:set_reserve_toggle_size()
---
--- Sets whether the menu should reserve space for drawing toggles
--- or icons, regardless of their actual presence.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@param reserve_toggle_size (boolean|nil) # whether to reserve size for toggles
---@return nil
function Gtk.Menu:set_reserve_toggle_size(reserve_toggle_size) end

--- # method Gtk.Menu:set_screen()
---
--- Sets the `GdkScreen` on which the menu will be displayed.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@param screen? Gdk.Screen # a `GdkScreen`, or `nil` if the screen should be determined by the widget the menu is attached to
---@return nil
function Gtk.Menu:set_screen(screen) end

--- # method Gtk.Menu:set_tearoff_state()
---
--- Changes the tearoff state of the menu.  A menu is normally
--- displayed as drop down menu which persists as long as the menu is
--- active.  It can also be displayed as a tearoff menu which persists
--- until it is closed or reattached.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@param torn_off (boolean|nil) # If `true`, menu is displayed as a tearoff menu.
---@return nil
function Gtk.Menu:set_tearoff_state(torn_off) end

--- # method Gtk.Menu:set_title()
---
--- Sets the title string for the menu.
--- 
--- The title is displayed when the menu is shown as a tearoff
--- menu. If `title` is `nil`, the menu will see if it is attached
--- to a parent menu item, and if so it will try to use the same
--- text as that menu item’s label.
---
--- ---
---
---@param self Gtk.Menu # a `GtkMenu`
---@param title? string # a string containing the title for the menu, or `nil` to inherit the title of the parent menu item, if any
---@return nil
function Gtk.Menu:set_title(title) end

--- # function Gtk.Menu.get_for_attach_widget()
---
--- Returns a list of the menus which are attached to this widget.
--- This list is owned by GTK+ and must not be modified.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@return Gtk.Widget[] # the list of menus attached to his widget.
function Gtk.Menu.get_for_attach_widget(widget) end

--- # function Gtk.Menu.new()
---
--- Creates a new `GtkMenu`
---
--- ---
---
---@return Gtk.Widget # a new `GtkMenu`
function Gtk.Menu.new() end

--- # function Gtk.Menu.new_from_model()
---
--- Creates a `GtkMenu` and populates it with menu items and
--- submenus according to `model`.
--- 
--- The created menu items are connected to actions found in the
--- `GtkApplicationWindow` to which the menu belongs - typically
--- by means of being attached to a widget (see `gtk_menu_attach_to_widget()`)
--- that is contained within the `GtkApplicationWindows` widget hierarchy.
--- 
--- Actions can also be added using `gtk_widget_insert_action_group()` on the menu's
--- attach widget or on any of its parent widgets.
---
--- ---
---
---@param model Gio.MenuModel # a `GMenuModel`
---@return Gtk.Widget # a new `GtkMenu`
function Gtk.Menu.new_from_model(model) end

--- # class Gtk.MenuAccessible
---
---@class Gtk.MenuAccessible : Gtk.MenuShellAccessible, Gtk.Atk.Component, Gtk.Atk.Selection
---@field parent Gtk.MenuShellAccessible
---@field priv Gtk.MenuAccessiblePrivate
Gtk.MenuAccessible = {}

--- # record Gtk.MenuAccessibleClass
---
---@class Gtk.MenuAccessibleClass
---@field parent_class Gtk.MenuShellAccessibleClass
Gtk.MenuAccessibleClass = {}

--- # record Gtk.MenuAccessiblePrivate
---
---@class Gtk.MenuAccessiblePrivate
Gtk.MenuAccessiblePrivate = {}

--- # class Gtk.MenuBar
---
--- The `GtkMenuBar` is a subclass of `GtkMenuShell` which contains one or
--- more `GtkMenuItems`. The result is a standard menu bar which can hold
--- many menu items.
--- 
--- # CSS nodes
--- 
--- GtkMenuBar has a single CSS node with name menubar.
---
--- ---
---
---@class Gtk.MenuBar : Gtk.MenuShell, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field menu_shell Gtk.MenuShell
---@field priv Gtk.MenuBarPrivate
---@operator call: Gtk.MenuBar
Gtk.MenuBar = {}

--- # method Gtk.MenuBar:get_child_pack_direction()
---
--- Retrieves the current child pack direction of the menubar.
--- See `gtk_menu_bar_set_child_pack_direction()`.
---
--- ---
---
---@param self Gtk.MenuBar # a `GtkMenuBar`
---@return Gtk.PackDirection # the child pack direction
function Gtk.MenuBar:get_child_pack_direction() end

--- # method Gtk.MenuBar:get_pack_direction()
---
--- Retrieves the current pack direction of the menubar.
--- See `gtk_menu_bar_set_pack_direction()`.
---
--- ---
---
---@param self Gtk.MenuBar # a `GtkMenuBar`
---@return Gtk.PackDirection # the pack direction
function Gtk.MenuBar:get_pack_direction() end

--- # method Gtk.MenuBar:set_child_pack_direction()
---
--- Sets how widgets should be packed inside the children of a menubar.
---
--- ---
---
---@param self Gtk.MenuBar # a `GtkMenuBar`
---@param child_pack_dir Gtk.PackDirection # a new `GtkPackDirection`
---@return nil
function Gtk.MenuBar:set_child_pack_direction(child_pack_dir) end

--- # method Gtk.MenuBar:set_pack_direction()
---
--- Sets how items should be packed inside a menubar.
---
--- ---
---
---@param self Gtk.MenuBar # a `GtkMenuBar`
---@param pack_dir Gtk.PackDirection # a new `GtkPackDirection`
---@return nil
function Gtk.MenuBar:set_pack_direction(pack_dir) end

--- # function Gtk.MenuBar.new()
---
--- Creates a new `GtkMenuBar`
---
--- ---
---
---@return Gtk.Widget # the new menu bar, as a `GtkWidget`
function Gtk.MenuBar.new() end

--- # function Gtk.MenuBar.new_from_model()
---
--- Creates a new `GtkMenuBar` and populates it with menu items
--- and submenus according to `model`.
--- 
--- The created menu items are connected to actions found in the
--- `GtkApplicationWindow` to which the menu bar belongs - typically
--- by means of being contained within the `GtkApplicationWindows`
--- widget hierarchy.
---
--- ---
---
---@param model Gio.MenuModel # a `GMenuModel`
---@return Gtk.Widget # a new `GtkMenuBar`
function Gtk.MenuBar.new_from_model(model) end

--- # record Gtk.MenuBarClass
---
---@class Gtk.MenuBarClass
---@field parent_class Gtk.MenuShellClass
Gtk.MenuBarClass = {}

--- # record Gtk.MenuBarPrivate
---
---@class Gtk.MenuBarPrivate
Gtk.MenuBarPrivate = {}

--- # class Gtk.MenuButton
---
--- The `GtkMenuButton` widget is used to display a popup when clicked on.
--- This popup can be provided either as a `GtkMenu`, a `GtkPopover` or an
--- abstract `GMenuModel`.
--- 
--- The `GtkMenuButton` widget can hold any valid child widget. That is, it
--- can hold almost any other standard `GtkWidget`. The most commonly used
--- child is `GtkImage`. If no widget is explicitely added to the `GtkMenuButton`,
--- a `GtkImage` is automatically created, using an arrow image oriented
--- according to `GtkMenuButton`:direction or the generic “open-menu-symbolic”
--- icon if the direction is not set.
--- 
--- The positioning of the popup is determined by the `GtkMenuButton`:direction
--- property of the menu button.
--- 
--- For menus, the `GtkWidget`:halign and `GtkWidget`:valign properties of the
--- menu are also taken into account. For example, when the direction is
--- %GTK_ARROW_DOWN and the horizontal alignment is %GTK_ALIGN_START, the
--- menu will be positioned below the button, with the starting edge
--- (depending on the text direction) of the menu aligned with the starting
--- edge of the button. If there is not enough space below the button, the
--- menu is popped up above the button instead. If the alignment would move
--- part of the menu offscreen, it is “pushed in”.
--- 
--- ## Direction = Down
--- 
--- - halign = start
--- 
---     ![](down-start.png)
--- 
--- - halign = center
--- 
---     ![](down-center.png)
--- 
--- - halign = end
--- 
---     ![](down-end.png)
--- 
--- ## Direction = Up
--- 
--- - halign = start
--- 
---     ![](up-start.png)
--- 
--- - halign = center
--- 
---     ![](up-center.png)
--- 
--- - halign = end
--- 
---     ![](up-end.png)
--- 
--- ## Direction = Left
--- 
--- - valign = start
--- 
---     ![](left-start.png)
--- 
--- - valign = center
--- 
---     ![](left-center.png)
--- 
--- - valign = end
--- 
---     ![](left-end.png)
--- 
--- ## Direction = Right
--- 
--- - valign = start
--- 
---     ![](right-start.png)
--- 
--- - valign = center
--- 
---     ![](right-center.png)
--- 
--- - valign = end
--- 
---     ![](right-end.png)
--- 
--- # CSS nodes
--- 
--- GtkMenuButton has a single CSS node with name button. To differentiate
--- it from a plain `GtkButton`, it gets the .popup style class.
---
--- ---
---
---@class Gtk.MenuButton : Gtk.ToggleButton, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field parent Gtk.ToggleButton
---@field priv Gtk.MenuButtonPrivate
---@operator call: Gtk.MenuButton
Gtk.MenuButton = {}

--- # method Gtk.MenuButton:get_align_widget()
---
--- Returns the parent `GtkWidget` to use to line up with menu.
---
--- ---
---
---@param self Gtk.MenuButton # a `GtkMenuButton`
---@return Gtk.Widget # a `GtkWidget` value or `nil`
function Gtk.MenuButton:get_align_widget() end

--- # method Gtk.MenuButton:get_direction()
---
--- Returns the direction the popup will be pointing at when popped up.
---
--- ---
---
---@param self Gtk.MenuButton # a `GtkMenuButton`
---@return Gtk.ArrowType # a `GtkArrowType` value
function Gtk.MenuButton:get_direction() end

--- # method Gtk.MenuButton:get_menu_model()
---
--- Returns the `GMenuModel` used to generate the popup.
---
--- ---
---
---@param self Gtk.MenuButton # a `GtkMenuButton`
---@return Gio.MenuModel # a `GMenuModel` or `nil`
function Gtk.MenuButton:get_menu_model() end

--- # method Gtk.MenuButton:get_popover()
---
--- Returns the `GtkPopover` that pops out of the button.
--- If the button is not using a `GtkPopover`, this function
--- returns `nil`.
---
--- ---
---
---@param self Gtk.MenuButton # a `GtkMenuButton`
---@return Gtk.Popover # a `GtkPopover` or `nil`
function Gtk.MenuButton:get_popover() end

--- # method Gtk.MenuButton:get_popup()
---
--- Returns the `GtkMenu` that pops out of the button.
--- If the button does not use a `GtkMenu`, this function
--- returns `nil`.
---
--- ---
---
---@param self Gtk.MenuButton # a `GtkMenuButton`
---@return Gtk.Menu # a `GtkMenu` or `nil`
function Gtk.MenuButton:get_popup() end

--- # method Gtk.MenuButton:get_use_popover()
---
--- Returns whether a `GtkPopover` or a `GtkMenu` will be constructed
--- from the menu model.
---
--- ---
---
---@param self Gtk.MenuButton # a `GtkMenuButton`
---@return (boolean|nil) # `true` if using a `GtkPopover`
function Gtk.MenuButton:get_use_popover() end

--- # method Gtk.MenuButton:set_align_widget()
---
--- Sets the `GtkWidget` to use to line the menu with when popped up.
--- Note that the `align_widget` must contain the `GtkMenuButton` itself.
--- 
--- Setting it to `nil` means that the menu will be aligned with the
--- button itself.
--- 
--- Note that this property is only used with menus currently,
--- and not for popovers.
---
--- ---
---
---@param self Gtk.MenuButton # a `GtkMenuButton`
---@param align_widget? Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.MenuButton:set_align_widget(align_widget) end

--- # method Gtk.MenuButton:set_direction()
---
--- Sets the direction in which the popup will be popped up, as
--- well as changing the arrow’s direction. The child will not
--- be changed to an arrow if it was customized.
--- 
--- If the does not fit in the available space in the given direction,
--- GTK+ will its best to keep it inside the screen and fully visible.
--- 
--- If you pass %GTK_ARROW_NONE for a `direction`, the popup will behave
--- as if you passed %GTK_ARROW_DOWN (although you won’t see any arrows).
---
--- ---
---
---@param self Gtk.MenuButton # a `GtkMenuButton`
---@param direction Gtk.ArrowType # a `GtkArrowType`
---@return nil
function Gtk.MenuButton:set_direction(direction) end

--- # method Gtk.MenuButton:set_menu_model()
---
--- Sets the `GMenuModel` from which the popup will be constructed,
--- or `nil` to dissociate any existing menu model and disable the button.
--- 
--- Depending on the value of `GtkMenuButton`:use-popover, either a
--- `GtkMenu` will be created with `gtk_menu_new_from_model()`, or a
--- `GtkPopover` with `gtk_popover_new_from_model()`. In either case,
--- actions will be connected as documented for these functions.
--- 
--- If `GtkMenuButton`:popup or `GtkMenuButton`:popover are already set, those
--- widgets are dissociated from the `menu_button`, and those properties are set
--- to `nil`.
---
--- ---
---
---@param self Gtk.MenuButton # a `GtkMenuButton`
---@param menu_model? Gio.MenuModel # a `GMenuModel`, or `nil` to unset and disable the button
---@return nil
function Gtk.MenuButton:set_menu_model(menu_model) end

--- # method Gtk.MenuButton:set_popover()
---
--- Sets the `GtkPopover` that will be popped up when the `menu_button` is clicked,
--- or `nil` to dissociate any existing popover and disable the button.
--- 
--- If `GtkMenuButton`:menu-model or `GtkMenuButton`:popup are set, those objects
--- are dissociated from the `menu_button`, and those properties are set to `nil`.
---
--- ---
---
---@param self Gtk.MenuButton # a `GtkMenuButton`
---@param popover? Gtk.Widget # a `GtkPopover`, or `nil` to unset and disable the button
---@return nil
function Gtk.MenuButton:set_popover(popover) end

--- # method Gtk.MenuButton:set_popup()
---
--- Sets the `GtkMenu` that will be popped up when the `menu_button` is clicked, or
--- `nil` to dissociate any existing menu and disable the button.
--- 
--- If `GtkMenuButton`:menu-model or `GtkMenuButton`:popover are set, those objects
--- are dissociated from the `menu_button`, and those properties are set to `nil`.
---
--- ---
---
---@param self Gtk.MenuButton # a `GtkMenuButton`
---@param menu? Gtk.Widget # a `GtkMenu`, or `nil` to unset and disable the button
---@return nil
function Gtk.MenuButton:set_popup(menu) end

--- # method Gtk.MenuButton:set_use_popover()
---
--- Sets whether to construct a `GtkPopover` instead of `GtkMenu`
--- when `gtk_menu_button_set_menu_model()` is called. Note that
--- this property is only consulted when a new menu model is set.
---
--- ---
---
---@param self Gtk.MenuButton # a `GtkMenuButton`
---@param use_popover (boolean|nil) # `true` to construct a popover from the menu model
---@return nil
function Gtk.MenuButton:set_use_popover(use_popover) end

--- # function Gtk.MenuButton.new()
---
--- Creates a new `GtkMenuButton` widget with downwards-pointing
--- arrow as the only child. You can replace the child widget
--- with another `GtkWidget` should you wish to.
---
--- ---
---
---@return Gtk.Widget # The newly created `GtkMenuButton` widget
function Gtk.MenuButton.new() end

--- # class Gtk.MenuButtonAccessible
---
---@class Gtk.MenuButtonAccessible : Gtk.ToggleButtonAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.Image
---@field parent Gtk.ToggleButtonAccessible
---@field priv Gtk.MenuButtonAccessiblePrivate
Gtk.MenuButtonAccessible = {}

--- # record Gtk.MenuButtonAccessibleClass
---
---@class Gtk.MenuButtonAccessibleClass
---@field parent_class Gtk.ToggleButtonAccessibleClass
Gtk.MenuButtonAccessibleClass = {}

--- # record Gtk.MenuButtonAccessiblePrivate
---
---@class Gtk.MenuButtonAccessiblePrivate
Gtk.MenuButtonAccessiblePrivate = {}

--- # record Gtk.MenuButtonClass
---
---@class Gtk.MenuButtonClass
---@field parent_class Gtk.ToggleButtonClass
Gtk.MenuButtonClass = {}

--- # record Gtk.MenuButtonPrivate
---
---@class Gtk.MenuButtonPrivate
Gtk.MenuButtonPrivate = {}

--- # record Gtk.MenuClass
---
---@class Gtk.MenuClass
---@field parent_class Gtk.MenuShellClass
Gtk.MenuClass = {}

---@alias Gtk.MenuDetachFunc fun(attach_widget: Gtk.Widget, menu: Gtk.Menu): nil

---@enum Gtk.MenuDirectionType
Gtk.MenuDirectionType = {}

--- # class Gtk.MenuItem
---
--- The `GtkMenuItem` widget and the derived widgets are the only valid
--- children for menus. Their function is to correctly handle highlighting,
--- alignment, events and submenus.
--- 
--- As a GtkMenuItem derives from `GtkBin` it can hold any valid child widget,
--- although only a few are really useful.
--- 
--- By default, a GtkMenuItem sets a `GtkAccelLabel` as its child.
--- GtkMenuItem has direct functions to set the label and its mnemonic.
--- For more advanced label settings, you can fetch the child widget from the GtkBin.
--- 
--- An example for setting markup and accelerator on a MenuItem:
--- 
--- ```c
--- GtkWidget *menu_item = gtk_menu_item_new_with_label ("Example Menu Item");
--- 
--- GtkWidget *child = gtk_bin_get_child (GTK_BIN (menu_item));
--- gtk_label_set_markup (GTK_LABEL (child), "<i>new label</i> with <b>markup</b>");
--- gtk_accel_label_set_accel (GTK_ACCEL_LABEL (child), GDK_KEY_1, 0);
--- ```
--- 
--- # GtkMenuItem as GtkBuildable
--- 
--- The GtkMenuItem implementation of the `GtkBuildable` interface supports
--- adding a submenu by specifying “submenu” as the “type” attribute of
--- a `<child>` element.
--- 
--- An example of UI definition fragment with submenus:
--- 
--- ```xml
--- <object class="GtkMenuItem">
---   <child type="submenu">
---     <object class="GtkMenu"/>
---   </child>
--- </object>
--- ```
--- 
--- # CSS nodes
--- 
--- ```plain
--- menuitem
--- ├── <child>
--- ╰── [arrow.right]
--- ```
--- 
--- GtkMenuItem has a single CSS node with name menuitem. If the menuitem
--- has a submenu, it gets another CSS node with name arrow, which has
--- the .left or .right style class.
---
--- ---
---
---@class Gtk.MenuItem : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field bin Gtk.Bin
---@field priv Gtk.MenuItemPrivate
---@operator call: Gtk.MenuItem
Gtk.MenuItem = {}

--- # method Gtk.MenuItem:activate()
---
--- Emits the `GtkMenuItem`::activate signal on the given item
---
--- ---
---
---@param self Gtk.MenuItem # the menu item
---@return nil
function Gtk.MenuItem:activate() end

--- # method Gtk.MenuItem:deselect()
---
--- Emits the `GtkMenuItem`::deselect signal on the given item.
---
--- ---
---
---@param self Gtk.MenuItem # the menu item
---@return nil
function Gtk.MenuItem:deselect() end

--- # method Gtk.MenuItem:get_accel_path()
---
--- Retrieve the accelerator path that was previously set on `menu_item`.
--- 
--- See `gtk_menu_item_set_accel_path()` for details.
---
--- ---
---
---@param self Gtk.MenuItem # a valid `GtkMenuItem`
---@return string # the accelerator path corresponding to this menu item’s functionality, or `nil` if not set
function Gtk.MenuItem:get_accel_path() end

--- # method Gtk.MenuItem:get_label()
---
--- Sets `text` on the `menu_item` label
---
--- ---
---
---@param self Gtk.MenuItem # a `GtkMenuItem`
---@return string # The text in the `menu_item` label. This is the internal string used by the label, and must not be modified.
function Gtk.MenuItem:get_label() end

--- # method Gtk.MenuItem:get_reserve_indicator()
---
--- Returns whether the `menu_item` reserves space for
--- the submenu indicator, regardless if it has a submenu
--- or not.
---
--- ---
---
---@param self Gtk.MenuItem # a `GtkMenuItem`
---@return (boolean|nil) # `true` if `menu_item` always reserves space for the submenu indicator
function Gtk.MenuItem:get_reserve_indicator() end

--- # method Gtk.MenuItem:get_right_justified()
---
--- Gets whether the menu item appears justified at the right
--- side of the menu bar.
---
--- ---
---
---@param self Gtk.MenuItem # a `GtkMenuItem`
---@return (boolean|nil) # `true` if the menu item will appear at the far right if added to a menu bar.
function Gtk.MenuItem:get_right_justified() end

--- # method Gtk.MenuItem:get_submenu()
---
--- Gets the submenu underneath this menu item, if any.
--- See `gtk_menu_item_set_submenu()`.
---
--- ---
---
---@param self Gtk.MenuItem # a `GtkMenuItem`
---@return Gtk.Widget # submenu for this menu item, or `nil` if none
function Gtk.MenuItem:get_submenu() end

--- # method Gtk.MenuItem:get_use_underline()
---
--- Checks if an underline in the text indicates the next character
--- should be used for the mnemonic accelerator key.
---
--- ---
---
---@param self Gtk.MenuItem # a `GtkMenuItem`
---@return (boolean|nil) # `true` if an embedded underline in the label indicates the mnemonic accelerator key.
function Gtk.MenuItem:get_use_underline() end

--- # method Gtk.MenuItem:select()
---
--- Emits the `GtkMenuItem`::select signal on the given item.
---
--- ---
---
---@param self Gtk.MenuItem # the menu item
---@return nil
function Gtk.MenuItem:select() end

--- # method Gtk.MenuItem:set_accel_path()
---
--- Set the accelerator path on `menu_item`, through which runtime
--- changes of the menu item’s accelerator caused by the user can be
--- identified and saved to persistent storage (see `gtk_accel_map_save()`
--- on this). To set up a default accelerator for this menu item, call
--- `gtk_accel_map_add_entry()` with the same `accel_path`. See also
--- `gtk_accel_map_add_entry()` on the specifics of accelerator paths,
--- and `gtk_menu_set_accel_path()` for a more convenient variant of
--- this function.
--- 
--- This function is basically a convenience wrapper that handles
--- calling `gtk_widget_set_accel_path()` with the appropriate accelerator
--- group for the menu item.
--- 
--- Note that you do need to set an accelerator on the parent menu with
--- `gtk_menu_set_accel_group()` for this to work.
--- 
--- Note that `accel_path` string will be stored in a `GQuark`.
--- Therefore, if you pass a static string, you can save some memory
--- by interning it first with `g_intern_static_string()`.
---
--- ---
---
---@param self Gtk.MenuItem # a valid `GtkMenuItem`
---@param accel_path? string # accelerator path, corresponding to this menu item’s functionality, or `nil` to unset the current path.
---@return nil
function Gtk.MenuItem:set_accel_path(accel_path) end

--- # method Gtk.MenuItem:set_label()
---
--- Sets `text` on the `menu_item` label
---
--- ---
---
---@param self Gtk.MenuItem # a `GtkMenuItem`
---@param label string # the text you want to set
---@return nil
function Gtk.MenuItem:set_label(label) end

--- # method Gtk.MenuItem:set_reserve_indicator()
---
--- Sets whether the `menu_item` should reserve space for
--- the submenu indicator, regardless if it actually has
--- a submenu or not.
--- 
--- There should be little need for applications to call
--- this functions.
---
--- ---
---
---@param self Gtk.MenuItem # a `GtkMenuItem`
---@param reserve (boolean|nil) # the new value
---@return nil
function Gtk.MenuItem:set_reserve_indicator(reserve) end

--- # method Gtk.MenuItem:set_right_justified()
---
--- Sets whether the menu item appears justified at the right
--- side of a menu bar. This was traditionally done for “Help”
--- menu items, but is now considered a bad idea. (If the widget
--- layout is reversed for a right-to-left language like Hebrew
--- or Arabic, right-justified-menu-items appear at the left.)
---
--- ---
---
---@param self Gtk.MenuItem # a `GtkMenuItem`.
---@param right_justified (boolean|nil) # if `true` the menu item will appear at the far right if added to a menu bar
---@return nil
function Gtk.MenuItem:set_right_justified(right_justified) end

--- # method Gtk.MenuItem:set_submenu()
---
--- Sets or replaces the menu item’s submenu, or removes it when a `nil`
--- submenu is passed.
---
--- ---
---
---@param self Gtk.MenuItem # a `GtkMenuItem`
---@param submenu? Gtk.Menu # the submenu, or `nil`
---@return nil
function Gtk.MenuItem:set_submenu(submenu) end

--- # method Gtk.MenuItem:set_use_underline()
---
--- If true, an underline in the text indicates the next character
--- should be used for the mnemonic accelerator key.
---
--- ---
---
---@param self Gtk.MenuItem # a `GtkMenuItem`
---@param setting (boolean|nil) # `true` if underlines in the text indicate mnemonics
---@return nil
function Gtk.MenuItem:set_use_underline(setting) end

--- # method Gtk.MenuItem:toggle_size_allocate()
---
--- Emits the `GtkMenuItem`::toggle-size-allocate signal on the given item.
---
--- ---
---
---@param self Gtk.MenuItem # the menu item.
---@param allocation integer # the allocation to use as signal data.
---@return nil
function Gtk.MenuItem:toggle_size_allocate(allocation) end

--- # method Gtk.MenuItem:toggle_size_request()
---
--- Emits the `GtkMenuItem`::toggle-size-request signal on the given item.
---
--- ---
---
---@param self Gtk.MenuItem # the menu item
---@param requisition integer # the requisition to use as signal data.
---@return nil
function Gtk.MenuItem:toggle_size_request(requisition) end

--- # function Gtk.MenuItem.new()
---
--- Creates a new `GtkMenuItem`.
---
--- ---
---
---@return Gtk.Widget # the newly created `GtkMenuItem`
function Gtk.MenuItem.new() end

--- # function Gtk.MenuItem.new_with_label()
---
--- Creates a new `GtkMenuItem` whose child is a `GtkLabel`.
---
--- ---
---
---@param label string # the text for the label
---@return Gtk.Widget # the newly created `GtkMenuItem`
function Gtk.MenuItem.new_with_label(label) end

--- # function Gtk.MenuItem.new_with_mnemonic()
---
--- Creates a new `GtkMenuItem` containing a label.
--- 
--- The label will be created using `gtk_label_new_with_mnemonic()`,
--- so underscores in `label` indicate the mnemonic for the menu item.
---
--- ---
---
---@param label string # The text of the button, with an underscore in front of the mnemonic character
---@return Gtk.Widget # a new `GtkMenuItem`
function Gtk.MenuItem.new_with_mnemonic(label) end

--- # class Gtk.MenuItemAccessible
---
---@class Gtk.MenuItemAccessible : Gtk.ContainerAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.Selection
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.MenuItemAccessiblePrivate
Gtk.MenuItemAccessible = {}

--- # record Gtk.MenuItemAccessibleClass
---
---@class Gtk.MenuItemAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.MenuItemAccessibleClass = {}

--- # record Gtk.MenuItemAccessiblePrivate
---
---@class Gtk.MenuItemAccessiblePrivate
Gtk.MenuItemAccessiblePrivate = {}

--- # record Gtk.MenuItemClass
---
---@class Gtk.MenuItemClass
---@field parent_class Gtk.BinClass # The parent class.
---@field hide_on_activate integer # If `true`, then we should always hide the menu when the %GtkMenuItem is activated. Otherwise, it is up to the caller.
---@field activate fun(menu_item: Gtk.MenuItem): nil
---@field activate_item fun(menu_item: Gtk.MenuItem): nil
---@field toggle_size_request fun(menu_item: Gtk.MenuItem, requisition: integer): nil
---@field toggle_size_allocate fun(menu_item: Gtk.MenuItem, allocation: integer): nil
---@field set_label fun(menu_item: Gtk.MenuItem, label: string): nil
---@field get_label fun(menu_item: Gtk.MenuItem): string
---@field select fun(menu_item: Gtk.MenuItem): nil
---@field deselect fun(menu_item: Gtk.MenuItem): nil
Gtk.MenuItemClass = {}

--- # record Gtk.MenuItemPrivate
---
---@class Gtk.MenuItemPrivate
Gtk.MenuItemPrivate = {}

---@alias Gtk.MenuPositionFunc fun(menu: Gtk.Menu, x: integer, y: integer, push_in: (boolean|nil), user_data: userdata): nil

--- # record Gtk.MenuPrivate
---
---@class Gtk.MenuPrivate
Gtk.MenuPrivate = {}

--- # class Gtk.MenuShell
---
--- A `GtkMenuShell` is the abstract base class used to derive the
--- `GtkMenu` and `GtkMenuBar` subclasses.
--- 
--- A `GtkMenuShell` is a container of `GtkMenuItem` objects arranged
--- in a list which can be navigated, selected, and activated by the
--- user to perform application functions. A `GtkMenuItem` can have a
--- submenu associated with it, allowing for nested hierarchical menus.
--- 
--- # Terminology
--- 
--- A menu item can be “selected”, this means that it is displayed
--- in the prelight state, and if it has a submenu, that submenu
--- will be popped up.
--- 
--- A menu is “active” when it is visible onscreen and the user
--- is selecting from it. A menubar is not active until the user
--- clicks on one of its menuitems. When a menu is active,
--- passing the mouse over a submenu will pop it up.
--- 
--- There is also is a concept of the current menu and a current
--- menu item. The current menu item is the selected menu item
--- that is furthest down in the hierarchy. (Every active menu shell
--- does not necessarily contain a selected menu item, but if
--- it does, then the parent menu shell must also contain
--- a selected menu item.) The current menu is the menu that
--- contains the current menu item. It will always have a GTK
--- grab and receive all key presses.
---
--- ---
---
---@class Gtk.MenuShell : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field container Gtk.Container
---@field priv Gtk.MenuShellPrivate
Gtk.MenuShell = {}

--- # method Gtk.MenuShell:activate_item()
---
--- Activates the menu item within the menu shell.
---
--- ---
---
---@param self Gtk.MenuShell # a `GtkMenuShell`
---@param menu_item Gtk.Widget # the `GtkMenuItem` to activate
---@param force_deactivate (boolean|nil) # if `true`, force the deactivation of the menu shell after the menu item is activated
---@return nil
function Gtk.MenuShell:activate_item(menu_item, force_deactivate) end

--- # method Gtk.MenuShell:append()
---
--- Adds a new `GtkMenuItem` to the end of the menu shell's
--- item list.
---
--- ---
---
---@param self Gtk.MenuShell # a `GtkMenuShell`
---@param child Gtk.MenuItem # The `GtkMenuItem` to add
---@return nil
function Gtk.MenuShell:append(child) end

--- # method Gtk.MenuShell:bind_model()
---
--- Establishes a binding between a `GtkMenuShell` and a `GMenuModel`.
--- 
--- The contents of `shell` are removed and then refilled with menu items
--- according to `model`.  When `model` changes, `shell` is updated.
--- Calling this function twice on `shell` with different `model` will
--- cause the first binding to be replaced with a binding to the new
--- model. If `model` is `nil` then any previous binding is undone and
--- all children are removed.
--- 
--- `with_separators` determines if toplevel items (eg: sections) have
--- separators inserted between them.  This is typically desired for
--- menus but doesn’t make sense for menubars.
--- 
--- If `action_namespace` is non-`nil` then the effect is as if all
--- actions mentioned in the `model` have their names prefixed with the
--- namespace, plus a dot.  For example, if the action “quit” is
--- mentioned and `action_namespace` is “app” then the effective action
--- name is “app.quit”.
--- 
--- This function uses `GtkActionable` to define the action name and
--- target values on the created menu items.  If you want to use an
--- action group other than “app” and “win”, or if you want to use a
--- `GtkMenuShell` outside of a `GtkApplicationWindow`, then you will need
--- to attach your own action group to the widget hierarchy using
--- `gtk_widget_insert_action_group()`.  As an example, if you created a
--- group with a “quit” action and inserted it with the name “mygroup”
--- then you would use the action name “mygroup.quit” in your
--- `GMenuModel`.
--- 
--- For most cases you are probably better off using
--- `gtk_menu_new_from_model()` or `gtk_menu_bar_new_from_model()` or just
--- directly passing the `GMenuModel` to `gtk_application_set_app_menu()` or
--- `gtk_application_set_menubar()`.
---
--- ---
---
---@param self Gtk.MenuShell # a `GtkMenuShell`
---@param model? Gio.MenuModel # the `GMenuModel` to bind to or `nil` to remove binding
---@param action_namespace? string # the namespace for actions in `model`
---@param with_separators (boolean|nil) # `true` if toplevel items in `shell` should have separators between them
---@return nil
function Gtk.MenuShell:bind_model(model, action_namespace, with_separators) end

--- # method Gtk.MenuShell:cancel()
---
--- Cancels the selection within the menu shell.
---
--- ---
---
---@param self Gtk.MenuShell # a `GtkMenuShell`
---@return nil
function Gtk.MenuShell:cancel() end

--- # method Gtk.MenuShell:deactivate()
---
--- Deactivates the menu shell.
--- 
--- Typically this results in the menu shell being erased
--- from the screen.
---
--- ---
---
---@param self Gtk.MenuShell # a `GtkMenuShell`
---@return nil
function Gtk.MenuShell:deactivate() end

--- # method Gtk.MenuShell:deselect()
---
--- Deselects the currently selected item from the menu shell,
--- if any.
---
--- ---
---
---@param self Gtk.MenuShell # a `GtkMenuShell`
---@return nil
function Gtk.MenuShell:deselect() end

--- # method Gtk.MenuShell:get_parent_shell()
---
--- Gets the parent menu shell.
--- 
--- The parent menu shell of a submenu is the `GtkMenu` or `GtkMenuBar`
--- from which it was opened up.
---
--- ---
---
---@param self Gtk.MenuShell # a `GtkMenuShell`
---@return Gtk.Widget # the parent `GtkMenuShell`
function Gtk.MenuShell:get_parent_shell() end

--- # method Gtk.MenuShell:get_selected_item()
---
--- Gets the currently selected item.
---
--- ---
---
---@param self Gtk.MenuShell # a `GtkMenuShell`
---@return Gtk.Widget # the currently selected item
function Gtk.MenuShell:get_selected_item() end

--- # method Gtk.MenuShell:get_take_focus()
---
--- Returns `true` if the menu shell will take the keyboard focus on popup.
---
--- ---
---
---@param self Gtk.MenuShell # a `GtkMenuShell`
---@return (boolean|nil) # `true` if the menu shell will take the keyboard focus on popup.
function Gtk.MenuShell:get_take_focus() end

--- # method Gtk.MenuShell:insert()
---
--- Adds a new `GtkMenuItem` to the menu shell’s item list
--- at the position indicated by `position`.
---
--- ---
---
---@param self Gtk.MenuShell # a `GtkMenuShell`
---@param child Gtk.Widget # The `GtkMenuItem` to add
---@param position integer # The position in the item list where `child` is added. Positions are numbered from 0 to n-1
---@return nil
function Gtk.MenuShell:insert(child, position) end

--- # method Gtk.MenuShell:prepend()
---
--- Adds a new `GtkMenuItem` to the beginning of the menu shell's
--- item list.
---
--- ---
---
---@param self Gtk.MenuShell # a `GtkMenuShell`
---@param child Gtk.Widget # The `GtkMenuItem` to add
---@return nil
function Gtk.MenuShell:prepend(child) end

--- # method Gtk.MenuShell:select_first()
---
--- Select the first visible or selectable child of the menu shell;
--- don’t select tearoff items unless the only item is a tearoff
--- item.
---
--- ---
---
---@param self Gtk.MenuShell # a `GtkMenuShell`
---@param search_sensitive (boolean|nil) # if `true`, search for the first selectable menu item, otherwise select nothing if the first item isn’t sensitive. This should be `false` if the menu is being popped up initially.
---@return nil
function Gtk.MenuShell:select_first(search_sensitive) end

--- # method Gtk.MenuShell:select_item()
---
--- Selects the menu item from the menu shell.
---
--- ---
---
---@param self Gtk.MenuShell # a `GtkMenuShell`
---@param menu_item Gtk.Widget # The `GtkMenuItem` to select
---@return nil
function Gtk.MenuShell:select_item(menu_item) end

--- # method Gtk.MenuShell:set_take_focus()
---
--- If `take_focus` is `true` (the default) the menu shell will take
--- the keyboard focus so that it will receive all keyboard events
--- which is needed to enable keyboard navigation in menus.
--- 
--- Setting `take_focus` to `false` is useful only for special applications
--- like virtual keyboard implementations which should not take keyboard
--- focus.
--- 
--- The `take_focus` state of a menu or menu bar is automatically
--- propagated to submenus whenever a submenu is popped up, so you
--- don’t have to worry about recursively setting it for your entire
--- menu hierarchy. Only when programmatically picking a submenu and
--- popping it up manually, the `take_focus` property of the submenu
--- needs to be set explicitly.
--- 
--- Note that setting it to `false` has side-effects:
--- 
--- If the focus is in some other app, it keeps the focus and keynav in
--- the menu doesn’t work. Consequently, keynav on the menu will only
--- work if the focus is on some toplevel owned by the onscreen keyboard.
--- 
--- To avoid confusing the user, menus with `take_focus` set to `false`
--- should not display mnemonics or accelerators, since it cannot be
--- guaranteed that they will work.
--- 
--- See also `gdk_keyboard_grab()`
---
--- ---
---
---@param self Gtk.MenuShell # a `GtkMenuShell`
---@param take_focus (boolean|nil) # `true` if the menu shell should take the keyboard focus on popup
---@return nil
function Gtk.MenuShell:set_take_focus(take_focus) end

--- # class Gtk.MenuShellAccessible
---
---@class Gtk.MenuShellAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component, Gtk.Atk.Selection
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.MenuShellAccessiblePrivate
Gtk.MenuShellAccessible = {}

--- # record Gtk.MenuShellAccessibleClass
---
---@class Gtk.MenuShellAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.MenuShellAccessibleClass = {}

--- # record Gtk.MenuShellAccessiblePrivate
---
---@class Gtk.MenuShellAccessiblePrivate
Gtk.MenuShellAccessiblePrivate = {}

--- # record Gtk.MenuShellClass
---
---@class Gtk.MenuShellClass
---@field parent_class Gtk.ContainerClass
---@field submenu_placement integer
---@field deactivate fun(menu_shell: Gtk.MenuShell): nil
---@field selection_done fun(menu_shell: Gtk.MenuShell): nil
---@field move_current fun(menu_shell: Gtk.MenuShell, direction: Gtk.MenuDirectionType): nil
---@field activate_current fun(menu_shell: Gtk.MenuShell, force_hide: (boolean|nil)): nil
---@field cancel fun(menu_shell: Gtk.MenuShell): nil
---@field select_item fun(menu_shell: Gtk.MenuShell, menu_item: Gtk.Widget): nil
---@field insert fun(menu_shell: Gtk.MenuShell, child: Gtk.Widget, position: integer): nil
---@field get_popup_delay fun(menu_shell: Gtk.MenuShell): integer
---@field move_selected fun(menu_shell: Gtk.MenuShell, distance: integer): (boolean|nil)
Gtk.MenuShellClass = {}

--- # record Gtk.MenuShellPrivate
---
---@class Gtk.MenuShellPrivate
Gtk.MenuShellPrivate = {}

--- # class Gtk.MenuToolButton
---
--- A `GtkMenuToolButton` is a `GtkToolItem` that contains a button and
--- a small additional button with an arrow. When clicked, the arrow
--- button pops up a dropdown menu.
--- 
--- Use `gtk_menu_tool_button_new()` to create a new
--- `GtkMenuToolButton`.
--- 
--- # GtkMenuToolButton as GtkBuildable
--- 
--- The GtkMenuToolButton implementation of the GtkBuildable interface
--- supports adding a menu by specifying “menu” as the “type” attribute
--- of a `<child>` element.
--- 
--- An example for a UI definition fragment with menus:
--- 
--- ```xml
--- <object class="GtkMenuToolButton">
---   <child type="menu">
---     <object class="GtkMenu"/>
---   </child>
--- </object>
--- ```
---
--- ---
---
---@class Gtk.MenuToolButton : Gtk.ToolButton, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field parent Gtk.ToolButton
---@field priv Gtk.MenuToolButtonPrivate
---@operator call: Gtk.MenuToolButton
Gtk.MenuToolButton = {}

--- # method Gtk.MenuToolButton:get_menu()
---
--- Gets the `GtkMenu` associated with `GtkMenuToolButton`.
---
--- ---
---
---@param self Gtk.MenuToolButton # a `GtkMenuToolButton`
---@return Gtk.Widget # the `GtkMenu` associated with `GtkMenuToolButton`
function Gtk.MenuToolButton:get_menu() end

--- # method Gtk.MenuToolButton:set_arrow_tooltip_markup()
---
--- Sets the tooltip markup text to be used as tooltip for the arrow button
--- which pops up the menu.  See `gtk_tool_item_set_tooltip_text()` for setting
--- a tooltip on the whole `GtkMenuToolButton`.
---
--- ---
---
---@param self Gtk.MenuToolButton # a `GtkMenuToolButton`
---@param markup string # markup text to be used as tooltip text for button’s arrow button
---@return nil
function Gtk.MenuToolButton:set_arrow_tooltip_markup(markup) end

--- # method Gtk.MenuToolButton:set_arrow_tooltip_text()
---
--- Sets the tooltip text to be used as tooltip for the arrow button which
--- pops up the menu.  See `gtk_tool_item_set_tooltip_text()` for setting a tooltip
--- on the whole `GtkMenuToolButton`.
---
--- ---
---
---@param self Gtk.MenuToolButton # a `GtkMenuToolButton`
---@param text string # text to be used as tooltip text for button’s arrow button
---@return nil
function Gtk.MenuToolButton:set_arrow_tooltip_text(text) end

--- # method Gtk.MenuToolButton:set_menu()
---
--- Sets the `GtkMenu` that is popped up when the user clicks on the arrow.
--- If `menu` is NULL, the arrow button becomes insensitive.
---
--- ---
---
---@param self Gtk.MenuToolButton # a `GtkMenuToolButton`
---@param menu Gtk.Widget # the `GtkMenu` associated with `GtkMenuToolButton`
---@return nil
function Gtk.MenuToolButton:set_menu(menu) end

--- # function Gtk.MenuToolButton.new()
---
--- Creates a new `GtkMenuToolButton` using `icon_widget` as icon and
--- `label` as label.
---
--- ---
---
---@param icon_widget? Gtk.Widget # a widget that will be used as icon widget, or `nil`
---@param label? string # a string that will be used as label, or `nil`
---@return Gtk.ToolItem # the new `GtkMenuToolButton`
function Gtk.MenuToolButton.new(icon_widget, label) end

--- # function Gtk.MenuToolButton.new_from_stock()
---
--- Creates a new `GtkMenuToolButton`.
--- The new `GtkMenuToolButton` will contain an icon and label from
--- the stock item indicated by `stock_id`.
---
--- ---
---
---@param stock_id string # the name of a stock item
---@return Gtk.ToolItem # the new `GtkMenuToolButton`
function Gtk.MenuToolButton.new_from_stock(stock_id) end

--- # record Gtk.MenuToolButtonClass
---
---@class Gtk.MenuToolButtonClass
---@field parent_class Gtk.ToolButtonClass # The parent class.
---@field show_menu fun(button: Gtk.MenuToolButton): nil
Gtk.MenuToolButtonClass = {}

--- # record Gtk.MenuToolButtonPrivate
---
---@class Gtk.MenuToolButtonPrivate
Gtk.MenuToolButtonPrivate = {}

--- # class Gtk.MessageDialog
---
--- `GtkMessageDialog` presents a dialog with some message text. It’s simply a
--- convenience widget; you could construct the equivalent of `GtkMessageDialog`
--- from `GtkDialog` without too much effort, but `GtkMessageDialog` saves typing.
--- 
--- One difference from `GtkDialog` is that `GtkMessageDialog` sets the
--- `GtkWindow`:skip-taskbar-hint property to `true`, so that the dialog is hidden
--- from the taskbar by default.
--- 
--- The easiest way to do a modal message dialog is to use `gtk_dialog_run()`, though
--- you can also pass in the %GTK_DIALOG_MODAL flag, `gtk_dialog_run()` automatically
--- makes the dialog modal and waits for the user to respond to it. `gtk_dialog_run()`
--- returns when any dialog button is clicked.
--- 
--- An example for using a modal dialog:
--- ```c
---  GtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT;
---  dialog = gtk_message_dialog_new (parent_window,
---                                   flags,
---                                   GTK_MESSAGE_ERROR,
---                                   GTK_BUTTONS_CLOSE,
---                                   "Error reading “%s”: %s",
---                                   filename,
---                                   g_strerror (errno));
---  gtk_dialog_run (GTK_DIALOG (dialog));
---  gtk_widget_destroy (dialog);
--- ```
--- 
--- You might do a non-modal `GtkMessageDialog` as follows:
--- 
--- An example for a non-modal dialog:
--- ```c
---  GtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT;
---  dialog = gtk_message_dialog_new (parent_window,
---                                   flags,
---                                   GTK_MESSAGE_ERROR,
---                                   GTK_BUTTONS_CLOSE,
---                                   "Error reading “%s”: %s",
---                                   filename,
---                                   g_strerror (errno));
--- 
---  // Destroy the dialog when the user responds to it
---  // (e.g. clicks a button)
--- 
---  g_signal_connect_swapped (dialog, "response",
---                            G_CALLBACK (gtk_widget_destroy),
---                            dialog);
--- ```
--- 
--- # GtkMessageDialog as GtkBuildable
--- 
--- The GtkMessageDialog implementation of the GtkBuildable interface exposes
--- the message area as an internal child with the name “message_area”.
---
--- ---
---
---@class Gtk.MessageDialog : Gtk.Dialog, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent_instance Gtk.Dialog
---@field priv Gtk.MessageDialogPrivate
Gtk.MessageDialog = {}

--- # method Gtk.MessageDialog:get_image()
---
--- Gets the dialog’s image.
---
--- ---
---
---@param self Gtk.MessageDialog # a `GtkMessageDialog`
---@return Gtk.Widget # the dialog’s image
function Gtk.MessageDialog:get_image() end

--- # method Gtk.MessageDialog:get_message_area()
---
--- Returns the message area of the dialog. This is the box where the
--- dialog’s primary and secondary labels are packed. You can add your
--- own extra content to that box and it will appear below those labels.
--- See `gtk_dialog_get_content_area()` for the corresponding
--- function in the parent `GtkDialog`.
---
--- ---
---
---@param self Gtk.MessageDialog # a `GtkMessageDialog`
---@return Gtk.Widget # A `GtkBox` corresponding to the “message area” in the `message_dialog`.
function Gtk.MessageDialog:get_message_area() end

--- # method Gtk.MessageDialog:set_image()
---
--- Sets the dialog’s image to `image`.
---
--- ---
---
---@param self Gtk.MessageDialog # a `GtkMessageDialog`
---@param image Gtk.Widget # the image
---@return nil
function Gtk.MessageDialog:set_image(image) end

--- # method Gtk.MessageDialog:set_markup()
---
--- Sets the text of the message dialog to be `str`, which is marked
--- up with the [Pango text markup language][PangoMarkupFormat].
---
--- ---
---
---@param self Gtk.MessageDialog # a `GtkMessageDialog`
---@param str string # markup string (see [Pango markup format][PangoMarkupFormat])
---@return nil
function Gtk.MessageDialog:set_markup(str) end

--- # record Gtk.MessageDialogClass
---
---@class Gtk.MessageDialogClass
---@field parent_class Gtk.DialogClass
Gtk.MessageDialogClass = {}

--- # record Gtk.MessageDialogPrivate
---
---@class Gtk.MessageDialogPrivate
Gtk.MessageDialogPrivate = {}

---@enum Gtk.MessageType
Gtk.MessageType = {}

--- # class Gtk.Misc
---
--- The `GtkMisc` widget is an abstract widget which is not useful itself, but
--- is used to derive subclasses which have alignment and padding attributes.
--- 
--- The horizontal and vertical padding attributes allows extra space to be
--- added around the widget.
--- 
--- The horizontal and vertical alignment attributes enable the widget to be
--- positioned within its allocated area. Note that if the widget is added to
--- a container in such a way that it expands automatically to fill its
--- allocated area, the alignment settings will not alter the widget's position.
--- 
--- Note that the desired effect can in most cases be achieved by using the
--- `GtkWidget`:halign, `GtkWidget`:valign and `GtkWidget`:margin properties
--- on the child widget, so GtkMisc should not be used in new code. To reflect
--- this fact, all `GtkMisc` API has been deprecated.
---
--- ---
---
---@class Gtk.Misc : Gtk.Widget, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field widget Gtk.Widget
---@field priv Gtk.MiscPrivate
Gtk.Misc = {}

--- # method Gtk.Misc:get_alignment()
---
--- Gets the X and Y alignment of the widget within its allocation.
--- See `gtk_misc_set_alignment()`.
---
--- ---
---
---@param self Gtk.Misc # a `GtkMisc`
---@param xalign? number # location to store X alignment of `misc`, or `nil`
---@param yalign? number # location to store Y alignment of `misc`, or `nil`
---@return nil
function Gtk.Misc:get_alignment(xalign, yalign) end

--- # method Gtk.Misc:get_padding()
---
--- Gets the padding in the X and Y directions of the widget.
--- See `gtk_misc_set_padding()`.
---
--- ---
---
---@param self Gtk.Misc # a `GtkMisc`
---@param xpad? integer # location to store padding in the X direction, or `nil`
---@param ypad? integer # location to store padding in the Y direction, or `nil`
---@return nil
function Gtk.Misc:get_padding(xpad, ypad) end

--- # method Gtk.Misc:set_alignment()
---
--- Sets the alignment of the widget.
---
--- ---
---
---@param self Gtk.Misc # a `GtkMisc`.
---@param xalign number # the horizontal alignment, from 0 (left) to 1 (right).
---@param yalign number # the vertical alignment, from 0 (top) to 1 (bottom).
---@return nil
function Gtk.Misc:set_alignment(xalign, yalign) end

--- # method Gtk.Misc:set_padding()
---
--- Sets the amount of space to add around the widget.
---
--- ---
---
---@param self Gtk.Misc # a `GtkMisc`.
---@param xpad integer # the amount of space to add on the left and right of the widget, in pixels.
---@param ypad integer # the amount of space to add on the top and bottom of the widget, in pixels.
---@return nil
function Gtk.Misc:set_padding(xpad, ypad) end

--- # record Gtk.MiscClass
---
---@class Gtk.MiscClass
---@field parent_class Gtk.WidgetClass
Gtk.MiscClass = {}

--- # record Gtk.MiscPrivate
---
---@class Gtk.MiscPrivate
Gtk.MiscPrivate = {}

--- # class Gtk.ModelButton
---
--- GtkModelButton is a button class that can use a `GAction` as its model.
--- In contrast to `GtkToggleButton` or `GtkRadioButton`, which can also
--- be backed by a `GAction` via the `GtkActionable`:action-name property,
--- GtkModelButton will adapt its appearance according to the kind of
--- action it is backed by, and appear either as a plain, check or
--- radio button.
--- 
--- Model buttons are used when popovers from a menu model with
--- `gtk_popover_new_from_model()`; they can also be used manually in
--- a `GtkPopoverMenu`.
--- 
--- When the action is specified via the `GtkActionable`:action-name
--- and `GtkActionable`:action-target properties, the role of the button
--- (i.e. whether it is a plain, check or radio button) is determined by
--- the type of the action and doesn't have to be explicitly specified
--- with the `GtkModelButton`:role property.
--- 
--- The content of the button is specified by the `GtkModelButton`:text
--- and `GtkModelButton`:icon properties.
--- 
--- The appearance of model buttons can be influenced with the
--- `GtkModelButton`:centered and `GtkModelButton`:iconic properties.
--- 
--- Model buttons have built-in support for submenus in `GtkPopoverMenu`.
--- To make a GtkModelButton that opens a submenu when activated, set
--- the `GtkModelButton`:menu-name property. To make a button that goes
--- back to the parent menu, you should set the `GtkModelButton`:inverted
--- property to place the submenu indicator at the opposite side.
--- 
--- # Example
--- 
--- ```c
--- <object class="GtkPopoverMenu">
---   <child>
---     <object class="GtkBox">
---       <property name="visible">True</property>
---       <property name="margin">10</property>
---       <child>
---         <object class="GtkModelButton">
---           <property name="visible">True</property>
---           <property name="action-name">view.cut</property>
---           <property name="text" translatable="yes">Cut</property>
---         </object>
---       </child>
---       <child>
---         <object class="GtkModelButton">
---           <property name="visible">True</property>
---           <property name="action-name">view.copy</property>
---           <property name="text" translatable="yes">Copy</property>
---         </object>
---       </child>
---       <child>
---         <object class="GtkModelButton">
---           <property name="visible">True</property>
---           <property name="action-name">view.paste</property>
---           <property name="text" translatable="yes">Paste</property>
---         </object>
---       </child>
---     </object>
---   </child>
--- </object>
--- ```
--- 
--- # CSS nodes
--- 
--- ```plain
--- modelbutton
--- ├── <child>
--- ╰── check
--- ```
--- 
--- ```plain
--- modelbutton
--- ├── <child>
--- ╰── radio
--- ```
--- 
--- ```plain
--- modelbutton
--- ├── <child>
--- ╰── arrow
--- ```
--- 
--- GtkModelButton has a main CSS node with name modelbutton, and a subnode,
--- which will have the name check, radio or arrow, depending on the role
--- of the button and whether it has a menu name set.
--- 
--- The subnode is positioned before or after the content nodes and gets the
--- .left or .right style class, depending on where it is located.
--- 
--- ```plain
--- button.model
--- ├── <child>
--- ╰── check
--- ```
--- 
--- Iconic model buttons (see `GtkModelButton`:iconic) change the name of
--- their main node to button and add a .model style class to it. The indicator
--- subnode is invisible in this case.
---
--- ---
---
---@class Gtk.ModelButton : Gtk.Button, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@operator call: Gtk.ModelButton
Gtk.ModelButton = {}

--- # function Gtk.ModelButton.new()
---
--- Creates a new GtkModelButton.
---
--- ---
---
---@return Gtk.Widget # the newly created `GtkModelButton` widget
function Gtk.ModelButton.new() end

---@alias Gtk.ModuleDisplayInitFunc fun(display: Gdk.Display): nil

---@alias Gtk.ModuleInitFunc fun(argc: integer, argv: unknown[]): nil

--- # class Gtk.MountOperation
---
--- This should not be accessed directly. Use the accessor functions below.
---
--- ---
---
---@class Gtk.MountOperation : Gio.MountOperation
---@field parent_instance Gio.MountOperation
---@field priv Gtk.MountOperationPrivate
---@operator call: Gtk.MountOperation
Gtk.MountOperation = {}

--- # method Gtk.MountOperation:get_parent()
---
--- Gets the transient parent used by the `GtkMountOperation`
---
--- ---
---
---@param self Gtk.MountOperation # a `GtkMountOperation`
---@return Gtk.Window # the transient parent for windows shown by `op`
function Gtk.MountOperation:get_parent() end

--- # method Gtk.MountOperation:get_screen()
---
--- Gets the screen on which windows of the `GtkMountOperation`
--- will be shown.
---
--- ---
---
---@param self Gtk.MountOperation # a `GtkMountOperation`
---@return Gdk.Screen # the screen on which windows of `op` are shown
function Gtk.MountOperation:get_screen() end

--- # method Gtk.MountOperation:is_showing()
---
--- Returns whether the `GtkMountOperation` is currently displaying
--- a window.
---
--- ---
---
---@param self Gtk.MountOperation # a `GtkMountOperation`
---@return (boolean|nil) # `true` if `op` is currently displaying a window
function Gtk.MountOperation:is_showing() end

--- # method Gtk.MountOperation:set_parent()
---
--- Sets the transient parent for windows shown by the
--- `GtkMountOperation`.
---
--- ---
---
---@param self Gtk.MountOperation # a `GtkMountOperation`
---@param parent? Gtk.Window # transient parent of the window, or `nil`
---@return nil
function Gtk.MountOperation:set_parent(parent) end

--- # method Gtk.MountOperation:set_screen()
---
--- Sets the screen to show windows of the `GtkMountOperation` on.
---
--- ---
---
---@param self Gtk.MountOperation # a `GtkMountOperation`
---@param screen Gdk.Screen # a `GdkScreen`
---@return nil
function Gtk.MountOperation:set_screen(screen) end

--- # function Gtk.MountOperation.new()
---
--- Creates a new `GtkMountOperation`
---
--- ---
---
---@param parent? Gtk.Window # transient parent of the window, or `nil`
---@return Gio.MountOperation # a new `GtkMountOperation`
function Gtk.MountOperation.new(parent) end

--- # record Gtk.MountOperationClass
---
---@class Gtk.MountOperationClass
---@field parent_class Gio.MountOperationClass # The parent class.
Gtk.MountOperationClass = {}

--- # record Gtk.MountOperationPrivate
---
---@class Gtk.MountOperationPrivate
Gtk.MountOperationPrivate = {}

---@enum Gtk.MovementStep
Gtk.MovementStep = {}

--- # class Gtk.NativeDialog
---
--- Native dialogs are platform dialogs that don't use `GtkDialog` or
--- `GtkWindow`. They are used in order to integrate better with a
--- platform, by looking the same as other native applications and
--- supporting platform specific features.
--- 
--- The `GtkDialog` functions cannot be used on such objects, but we
--- need a similar API in order to drive them. The `GtkNativeDialog`
--- object is an API that allows you to do this. It allows you to set
--- various common properties on the dialog, as well as show and hide
--- it and get a `GtkNativeDialog`::response signal when the user finished
--- with the dialog.
--- 
--- There is also a `gtk_native_dialog_run()` helper that makes it easy
--- to run any native dialog in a modal way with a recursive mainloop,
--- similar to `gtk_dialog_run()`.
---
--- ---
---
---@class Gtk.NativeDialog : GObject.Object
---@field parent_instance GObject.Object
Gtk.NativeDialog = {}

--- # method Gtk.NativeDialog:destroy()
---
--- Destroys a dialog.
--- 
--- When a dialog is destroyed, it will break any references it holds
--- to other objects. If it is visible it will be hidden and any underlying
--- window system resources will be destroyed.
--- 
--- Note that this does not release any reference to the object (as opposed to
--- destroying a GtkWindow) because there is no reference from the windowing
--- system to the `GtkNativeDialog`.
---
--- ---
---
---@param self Gtk.NativeDialog # a `GtkNativeDialog`
---@return nil
function Gtk.NativeDialog:destroy() end

--- # method Gtk.NativeDialog:get_modal()
---
--- Returns whether the dialog is modal. See `gtk_native_dialog_set_modal()`.
---
--- ---
---
---@param self Gtk.NativeDialog # a `GtkNativeDialog`
---@return (boolean|nil) # `true` if the dialog is set to be modal
function Gtk.NativeDialog:get_modal() end

--- # method Gtk.NativeDialog:get_title()
---
--- Gets the title of the `GtkNativeDialog`.
---
--- ---
---
---@param self Gtk.NativeDialog # a `GtkNativeDialog`
---@return string # the title of the dialog, or `nil` if none has been set explicitly. The returned string is owned by the widget and must not be modified or freed.
function Gtk.NativeDialog:get_title() end

--- # method Gtk.NativeDialog:get_transient_for()
---
--- Fetches the transient parent for this window. See
--- `gtk_native_dialog_set_transient_for()`.
---
--- ---
---
---@param self Gtk.NativeDialog # a `GtkNativeDialog`
---@return Gtk.Window # the transient parent for this window, or `nil` if no transient parent has been set.
function Gtk.NativeDialog:get_transient_for() end

--- # method Gtk.NativeDialog:get_visible()
---
--- Determines whether the dialog is visible.
---
--- ---
---
---@param self Gtk.NativeDialog # a `GtkNativeDialog`
---@return (boolean|nil) # `true` if the dialog is visible
function Gtk.NativeDialog:get_visible() end

--- # method Gtk.NativeDialog:hide()
---
--- Hides the dialog if it is visilbe, aborting any interaction. Once this
--- is called the  `GtkNativeDialog`::response signal will not be emitted
--- until after the next call to `gtk_native_dialog_show()`.
--- 
--- If the dialog is not visible this does nothing.
---
--- ---
---
---@param self Gtk.NativeDialog # a `GtkNativeDialog`
---@return nil
function Gtk.NativeDialog:hide() end

--- # method Gtk.NativeDialog:run()
---
--- Blocks in a recursive main loop until `self` emits the
--- `GtkNativeDialog`::response signal. It then returns the response ID
--- from the ::response signal emission.
--- 
--- Before entering the recursive main loop, `gtk_native_dialog_run()`
--- calls `gtk_native_dialog_show()` on the dialog for you.
--- 
--- After `gtk_native_dialog_run()` returns, then dialog will be hidden.
--- 
--- Typical usage of this function might be:
--- ```c
---   gint result = gtk_native_dialog_run (GTK_NATIVE_DIALOG (dialog));
---   switch (result)
---     {
---       case GTK_RESPONSE_ACCEPT:
---          do_application_specific_something ();
---          break;
---       default:
---          do_nothing_since_dialog_was_cancelled ();
---          break;
---     }
---   g_object_unref (dialog);
--- ```
--- 
--- Note that even though the recursive main loop gives the effect of a
--- modal dialog (it prevents the user from interacting with other
--- windows in the same window group while the dialog is run), callbacks
--- such as timeouts, IO channel watches, DND drops, etc, will
--- be triggered during a `gtk_native_dialog_run()` call.
---
--- ---
---
---@param self Gtk.NativeDialog # a `GtkNativeDialog`
---@return integer # response ID
function Gtk.NativeDialog:run() end

--- # method Gtk.NativeDialog:set_modal()
---
--- Sets a dialog modal or non-modal. Modal dialogs prevent interaction
--- with other windows in the same application. To keep modal dialogs
--- on top of main application windows, use
--- `gtk_native_dialog_set_transient_for()` to make the dialog transient for the
--- parent; most [window managers][gtk-X11-arch]
--- will then disallow lowering the dialog below the parent.
---
--- ---
---
---@param self Gtk.NativeDialog # a `GtkNativeDialog`
---@param modal (boolean|nil) # whether the window is modal
---@return nil
function Gtk.NativeDialog:set_modal(modal) end

--- # method Gtk.NativeDialog:set_title()
---
--- Sets the title of the `GtkNativeDialog`.
---
--- ---
---
---@param self Gtk.NativeDialog # a `GtkNativeDialog`
---@param title string # title of the dialog
---@return nil
function Gtk.NativeDialog:set_title(title) end

--- # method Gtk.NativeDialog:set_transient_for()
---
--- Dialog windows should be set transient for the main application
--- window they were spawned from. This allows
--- [window managers][gtk-X11-arch] to e.g. keep the
--- dialog on top of the main window, or center the dialog over the
--- main window.
--- 
--- Passing `nil` for `parent` unsets the current transient window.
---
--- ---
---
---@param self Gtk.NativeDialog # a `GtkNativeDialog`
---@param parent? Gtk.Window # parent window, or `nil`
---@return nil
function Gtk.NativeDialog:set_transient_for(parent) end

--- # method Gtk.NativeDialog:show()
---
--- Shows the dialog on the display, allowing the user to interact with
--- it. When the user accepts the state of the dialog the dialog will
--- be automatically hidden and the `GtkNativeDialog`::response signal
--- will be emitted.
--- 
--- Multiple calls while the dialog is visible will be ignored.
---
--- ---
---
---@param self Gtk.NativeDialog # a `GtkNativeDialog`
---@return nil
function Gtk.NativeDialog:show() end

--- # record Gtk.NativeDialogClass
---
---@class Gtk.NativeDialogClass
---@field parent_class GObject.ObjectClass
---@field response fun(self: Gtk.NativeDialog, response_id: integer): nil
---@field show fun(self: Gtk.NativeDialog): nil
---@field hide fun(self: Gtk.NativeDialog): nil
Gtk.NativeDialogClass = {}

--- # class Gtk.Notebook
---
--- The `GtkNotebook` widget is a `GtkContainer` whose children are pages that
--- can be switched between using tab labels along one edge.
--- 
--- There are many configuration options for GtkNotebook. Among other
--- things, you can choose on which edge the tabs appear
--- (see `gtk_notebook_set_tab_pos()`), whether, if there are too many
--- tabs to fit the notebook should be made bigger or scrolling
--- arrows added (see `gtk_notebook_set_scrollable()`), and whether there
--- will be a popup menu allowing the users to switch pages.
--- (see `gtk_notebook_popup_enable()`, `gtk_notebook_popup_disable()`)
--- 
--- # GtkNotebook as GtkBuildable
--- 
--- The GtkNotebook implementation of the `GtkBuildable` interface
--- supports placing children into tabs by specifying “tab” as the
--- “type” attribute of a `<child>` element. Note that the content
--- of the tab must be created before the tab can be filled.
--- A tab child can be specified without specifying a `<child>`
--- type attribute.
--- 
--- To add a child widget in the notebooks action area, specify
--- "action-start" or “action-end” as the “type” attribute of the
--- `<child>` element.
--- 
--- An example of a UI definition fragment with GtkNotebook:
--- 
--- ```xml
--- <object class="GtkNotebook">
---   <child>
---     <object class="GtkLabel" id="notebook-content">
---       <property name="label">Content</property>
---     </object>
---   </child>
---   <child type="tab">
---     <object class="GtkLabel" id="notebook-tab">
---       <property name="label">Tab</property>
---     </object>
---   </child>
--- </object>
--- ```
--- 
--- # CSS nodes
--- 
--- ```plain
--- notebook
--- ├── header.top
--- │   ├── [<action widget>]
--- │   ├── tabs
--- │   │   ├── [arrow]
--- │   │   ├── tab
--- │   │   │   ╰── <tab label>
--- ┊   ┊   ┊
--- │   │   ├── tab[.reorderable-page]
--- │   │   │   ╰── <tab label>
--- │   │   ╰── [arrow]
--- │   ╰── [<action widget>]
--- │
--- ╰── stack
---     ├── <child>
---     ┊
---     ╰── <child>
--- ```
--- 
--- GtkNotebook has a main CSS node with name notebook, a subnode
--- with name header and below that a subnode with name tabs which
--- contains one subnode per tab with name tab.
--- 
--- If action widgets are present, their CSS nodes are placed next
--- to the tabs node. If the notebook is scrollable, CSS nodes with
--- name arrow are placed as first and last child of the tabs node.
--- 
--- The main node gets the .frame style class when the notebook
--- has a border (see `gtk_notebook_set_show_border()`).
--- 
--- The header node gets one of the style class .top, .bottom,
--- .left or .right, depending on where the tabs are placed. For
--- reorderable pages, the tab node gets the .reorderable-page class.
--- 
--- A tab node gets the .dnd style class while it is moved with drag-and-drop.
--- 
--- The nodes are always arranged from left-to-right, regarldess of text direction.
---
--- ---
---
---@class Gtk.Notebook : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field container Gtk.Container
---@field priv Gtk.NotebookPrivate
---@operator call: Gtk.Notebook
Gtk.Notebook = {}

--- # method Gtk.Notebook:append_page()
---
--- Appends a page to `notebook`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # the `GtkWidget` to use as the contents of the page
---@param tab_label? Gtk.Widget # the `GtkWidget` to be used as the label for the page, or `nil` to use the default label, “page N”
---@return integer # the index (starting from 0) of the appended page in the notebook, or -1 if function fails
function Gtk.Notebook:append_page(child, tab_label) end

--- # method Gtk.Notebook:append_page_menu()
---
--- Appends a page to `notebook`, specifying the widget to use as the
--- label in the popup menu.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # the `GtkWidget` to use as the contents of the page
---@param tab_label? Gtk.Widget # the `GtkWidget` to be used as the label for the page, or `nil` to use the default label, “page N”
---@param menu_label? Gtk.Widget # the widget to use as a label for the page-switch menu, if that is enabled. If `nil`, and `tab_label` is a `GtkLabel` or `nil`, then the menu label will be a newly created label with the same text as `tab_label`; if `tab_label` is not a `GtkLabel`, `menu_label` must be specified if the page-switch menu is to be used.
---@return integer # the index (starting from 0) of the appended page in the notebook, or -1 if function fails
function Gtk.Notebook:append_page_menu(child, tab_label, menu_label) end

--- # method Gtk.Notebook:detach_tab()
---
--- Removes the child from the notebook.
--- 
--- This function is very similar to `gtk_container_remove()`,
--- but additionally informs the notebook that the removal
--- is happening as part of a tab DND operation, which should
--- not be cancelled.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # a child
---@return nil
function Gtk.Notebook:detach_tab(child) end

--- # method Gtk.Notebook:get_action_widget()
---
--- Gets one of the action widgets. See `gtk_notebook_set_action_widget()`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param pack_type Gtk.PackType # pack type of the action widget to receive
---@return Gtk.Widget # The action widget with the given `pack_type` or `nil` when this action widget has not been set
function Gtk.Notebook:get_action_widget(pack_type) end

--- # method Gtk.Notebook:get_current_page()
---
--- Returns the page number of the current page.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@return integer # the index (starting from 0) of the current page in the notebook. If the notebook has no pages, then -1 will be returned.
function Gtk.Notebook:get_current_page() end

--- # method Gtk.Notebook:get_group_name()
---
--- Gets the current group name for `notebook`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@return string # the group name, or `nil` if none is set
function Gtk.Notebook:get_group_name() end

--- # method Gtk.Notebook:get_menu_label()
---
--- Retrieves the menu label widget of the page containing `child`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # a widget contained in a page of `notebook`
---@return Gtk.Widget # the menu label, or `nil` if the notebook page does not have a menu label other than the default (the tab label).
function Gtk.Notebook:get_menu_label(child) end

--- # method Gtk.Notebook:get_menu_label_text()
---
--- Retrieves the text of the menu label for the page containing
--- `child`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # the child widget of a page of the notebook.
---@return string # the text of the tab label, or `nil` if the widget does not have a menu label other than the default menu label, or the menu label widget is not a `GtkLabel`. The string is owned by the widget and must not be freed.
function Gtk.Notebook:get_menu_label_text(child) end

--- # method Gtk.Notebook:get_n_pages()
---
--- Gets the number of pages in a notebook.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@return integer # the number of pages in the notebook
function Gtk.Notebook:get_n_pages() end

--- # method Gtk.Notebook:get_nth_page()
---
--- Returns the child widget contained in page number `page_num`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param page_num integer # the index of a page in the notebook, or -1 to get the last page
---@return Gtk.Widget # the child widget, or `nil` if `page_num` is out of bounds
function Gtk.Notebook:get_nth_page(page_num) end

--- # method Gtk.Notebook:get_scrollable()
---
--- Returns whether the tab label area has arrows for scrolling.
--- See `gtk_notebook_set_scrollable()`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@return (boolean|nil) # `true` if arrows for scrolling are present
function Gtk.Notebook:get_scrollable() end

--- # method Gtk.Notebook:get_show_border()
---
--- Returns whether a bevel will be drawn around the notebook pages.
--- See `gtk_notebook_set_show_border()`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@return (boolean|nil) # `true` if the bevel is drawn
function Gtk.Notebook:get_show_border() end

--- # method Gtk.Notebook:get_show_tabs()
---
--- Returns whether the tabs of the notebook are shown.
--- See `gtk_notebook_set_show_tabs()`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@return (boolean|nil) # `true` if the tabs are shown
function Gtk.Notebook:get_show_tabs() end

--- # method Gtk.Notebook:get_tab_detachable()
---
--- Returns whether the tab contents can be detached from `notebook`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # a child `GtkWidget`
---@return (boolean|nil) # `true` if the tab is detachable.
function Gtk.Notebook:get_tab_detachable(child) end

--- # method Gtk.Notebook:get_tab_hborder()
---
--- Returns the horizontal width of a tab border.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@return integer # horizontal width of a tab border
function Gtk.Notebook:get_tab_hborder() end

--- # method Gtk.Notebook:get_tab_label()
---
--- Returns the tab label widget for the page `child`.
--- `nil` is returned if `child` is not in `notebook` or
--- if no tab label has specifically been set for `child`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # the page
---@return Gtk.Widget # the tab label
function Gtk.Notebook:get_tab_label(child) end

--- # method Gtk.Notebook:get_tab_label_text()
---
--- Retrieves the text of the tab label for the page containing
--- `child`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # a widget contained in a page of `notebook`
---@return string # the text of the tab label, or `nil` if the tab label widget is not a `GtkLabel`. The string is owned by the widget and must not be freed.
function Gtk.Notebook:get_tab_label_text(child) end

--- # method Gtk.Notebook:get_tab_pos()
---
--- Gets the edge at which the tabs for switching pages in the
--- notebook are drawn.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@return Gtk.PositionType # the edge at which the tabs are drawn
function Gtk.Notebook:get_tab_pos() end

--- # method Gtk.Notebook:get_tab_reorderable()
---
--- Gets whether the tab can be reordered via drag and drop or not.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # a child `GtkWidget`
---@return (boolean|nil) # `true` if the tab is reorderable.
function Gtk.Notebook:get_tab_reorderable(child) end

--- # method Gtk.Notebook:get_tab_vborder()
---
--- Returns the vertical width of a tab border.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@return integer # vertical width of a tab border
function Gtk.Notebook:get_tab_vborder() end

--- # method Gtk.Notebook:insert_page()
---
--- Insert a page into `notebook` at the given position.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # the `GtkWidget` to use as the contents of the page
---@param tab_label? Gtk.Widget # the `GtkWidget` to be used as the label for the page, or `nil` to use the default label, “page N”
---@param position integer # the index (starting at 0) at which to insert the page, or -1 to append the page after all other pages
---@return integer # the index (starting from 0) of the inserted page in the notebook, or -1 if function fails
function Gtk.Notebook:insert_page(child, tab_label, position) end

--- # method Gtk.Notebook:insert_page_menu()
---
--- Insert a page into `notebook` at the given position, specifying
--- the widget to use as the label in the popup menu.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # the `GtkWidget` to use as the contents of the page
---@param tab_label? Gtk.Widget # the `GtkWidget` to be used as the label for the page, or `nil` to use the default label, “page N”
---@param menu_label? Gtk.Widget # the widget to use as a label for the page-switch menu, if that is enabled. If `nil`, and `tab_label` is a `GtkLabel` or `nil`, then the menu label will be a newly created label with the same text as `tab_label`; if `tab_label` is not a `GtkLabel`, `menu_label` must be specified if the page-switch menu is to be used.
---@param position integer # the index (starting at 0) at which to insert the page, or -1 to append the page after all other pages.
---@return integer # the index (starting from 0) of the inserted page in the notebook
function Gtk.Notebook:insert_page_menu(child, tab_label, menu_label, position) end

--- # method Gtk.Notebook:next_page()
---
--- Switches to the next page. Nothing happens if the current page is
--- the last page.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@return nil
function Gtk.Notebook:next_page() end

--- # method Gtk.Notebook:page_num()
---
--- Finds the index of the page which contains the given child
--- widget.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # a `GtkWidget`
---@return integer # the index of the page containing `child`, or -1 if `child` is not in the notebook
function Gtk.Notebook:page_num(child) end

--- # method Gtk.Notebook:popup_disable()
---
--- Disables the popup menu.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@return nil
function Gtk.Notebook:popup_disable() end

--- # method Gtk.Notebook:popup_enable()
---
--- Enables the popup menu: if the user clicks with the right
--- mouse button on the tab labels, a menu with all the pages
--- will be popped up.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@return nil
function Gtk.Notebook:popup_enable() end

--- # method Gtk.Notebook:prepend_page()
---
--- Prepends a page to `notebook`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # the `GtkWidget` to use as the contents of the page
---@param tab_label? Gtk.Widget # the `GtkWidget` to be used as the label for the page, or `nil` to use the default label, “page N”
---@return integer # the index (starting from 0) of the prepended page in the notebook, or -1 if function fails
function Gtk.Notebook:prepend_page(child, tab_label) end

--- # method Gtk.Notebook:prepend_page_menu()
---
--- Prepends a page to `notebook`, specifying the widget to use as the
--- label in the popup menu.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # the `GtkWidget` to use as the contents of the page
---@param tab_label? Gtk.Widget # the `GtkWidget` to be used as the label for the page, or `nil` to use the default label, “page N”
---@param menu_label? Gtk.Widget # the widget to use as a label for the page-switch menu, if that is enabled. If `nil`, and `tab_label` is a `GtkLabel` or `nil`, then the menu label will be a newly created label with the same text as `tab_label`; if `tab_label` is not a `GtkLabel`, `menu_label` must be specified if the page-switch menu is to be used.
---@return integer # the index (starting from 0) of the prepended page in the notebook, or -1 if function fails
function Gtk.Notebook:prepend_page_menu(child, tab_label, menu_label) end

--- # method Gtk.Notebook:prev_page()
---
--- Switches to the previous page. Nothing happens if the current page
--- is the first page.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@return nil
function Gtk.Notebook:prev_page() end

--- # method Gtk.Notebook:remove_page()
---
--- Removes a page from the notebook given its index
--- in the notebook.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param page_num integer # the index of a notebook page, starting from 0. If -1, the last page will be removed.
---@return nil
function Gtk.Notebook:remove_page(page_num) end

--- # method Gtk.Notebook:reorder_child()
---
--- Reorders the page containing `child`, so that it appears in position
--- `position`. If `position` is greater than or equal to the number of
--- children in the list or negative, `child` will be moved to the end
--- of the list.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # the child to move
---@param position integer # the new position, or -1 to move to the end
---@return nil
function Gtk.Notebook:reorder_child(child, position) end

--- # method Gtk.Notebook:set_action_widget()
---
--- Sets `widget` as one of the action widgets. Depending on the pack type
--- the widget will be placed before or after the tabs. You can use
--- a `GtkBox` if you need to pack more than one widget on the same side.
--- 
--- Note that action widgets are “internal” children of the notebook and thus
--- not included in the list returned from `gtk_container_foreach()`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param widget Gtk.Widget # a `GtkWidget`
---@param pack_type Gtk.PackType # pack type of the action widget
---@return nil
function Gtk.Notebook:set_action_widget(widget, pack_type) end

--- # method Gtk.Notebook:set_current_page()
---
--- Switches to the page number `page_num`.
--- 
--- Note that due to historical reasons, GtkNotebook refuses
--- to switch to a page unless the child widget is visible.
--- Therefore, it is recommended to show child widgets before
--- adding them to a notebook.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param page_num integer # index of the page to switch to, starting from 0. If negative, the last page will be used. If greater than the number of pages in the notebook, nothing will be done.
---@return nil
function Gtk.Notebook:set_current_page(page_num) end

--- # method Gtk.Notebook:set_group_name()
---
--- Sets a group name for `notebook`.
--- 
--- Notebooks with the same name will be able to exchange tabs
--- via drag and drop. A notebook with a `nil` group name will
--- not be able to exchange tabs with any other notebook.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param group_name? string # the name of the notebook group, or `nil` to unset it
---@return nil
function Gtk.Notebook:set_group_name(group_name) end

--- # method Gtk.Notebook:set_menu_label()
---
--- Changes the menu label for the page containing `child`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # the child widget
---@param menu_label? Gtk.Widget # the menu label, or `nil` for default
---@return nil
function Gtk.Notebook:set_menu_label(child, menu_label) end

--- # method Gtk.Notebook:set_menu_label_text()
---
--- Creates a new label and sets it as the menu label of `child`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # the child widget
---@param menu_text string # the label text
---@return nil
function Gtk.Notebook:set_menu_label_text(child, menu_text) end

--- # method Gtk.Notebook:set_scrollable()
---
--- Sets whether the tab label area will have arrows for
--- scrolling if there are too many tabs to fit in the area.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param scrollable (boolean|nil) # `true` if scroll arrows should be added
---@return nil
function Gtk.Notebook:set_scrollable(scrollable) end

--- # method Gtk.Notebook:set_show_border()
---
--- Sets whether a bevel will be drawn around the notebook pages.
--- This only has a visual effect when the tabs are not shown.
--- See `gtk_notebook_set_show_tabs()`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param show_border (boolean|nil) # `true` if a bevel should be drawn around the notebook
---@return nil
function Gtk.Notebook:set_show_border(show_border) end

--- # method Gtk.Notebook:set_show_tabs()
---
--- Sets whether to show the tabs for the notebook or not.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param show_tabs (boolean|nil) # `true` if the tabs should be shown
---@return nil
function Gtk.Notebook:set_show_tabs(show_tabs) end

--- # method Gtk.Notebook:set_tab_detachable()
---
--- Sets whether the tab can be detached from `notebook` to another
--- notebook or widget.
--- 
--- Note that 2 notebooks must share a common group identificator
--- (see `gtk_notebook_set_group_name()`) to allow automatic tabs
--- interchange between them.
--- 
--- If you want a widget to interact with a notebook through DnD
--- (i.e.: accept dragged tabs from it) it must be set as a drop
--- destination and accept the target “GTK_NOTEBOOK_TAB”. The notebook
--- will fill the selection with a GtkWidget** pointing to the child
--- widget that corresponds to the dropped tab.
--- 
--- Note that you should use `gtk_notebook_detach_tab()` instead
--- of `gtk_container_remove()` if you want to remove the tab from
--- the source notebook as part of accepting a drop. Otherwise,
--- the source notebook will think that the dragged tab was
--- removed from underneath the ongoing drag operation, and
--- will initiate a drag cancel animation.
--- 
--- ```c
---  static void
---  on_drag_data_received (GtkWidget        *widget,
---                         GdkDragContext   *context,
---                         gint              x,
---                         gint              y,
---                         GtkSelectionData *data,
---                         guint             info,
---                         guint             time,
---                         gpointer          user_data)
---  {
---    GtkWidget *notebook;
---    GtkWidget **child;
--- 
---    notebook = gtk_drag_get_source_widget (context);
---    child = (void*) gtk_selection_data_get_data (data);
--- 
---    // process_widget (*child);
--- 
---    gtk_notebook_detach_tab (GTK_NOTEBOOK (notebook), *child);
---  }
--- ```
--- 
--- If you want a notebook to accept drags from other widgets,
--- you will have to set your own DnD code to do it.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # a child `GtkWidget`
---@param detachable (boolean|nil) # whether the tab is detachable or not
---@return nil
function Gtk.Notebook:set_tab_detachable(child, detachable) end

--- # method Gtk.Notebook:set_tab_label()
---
--- Changes the tab label for `child`.
--- If `nil` is specified for `tab_label`, then the page will
--- have the label “page N”.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # the page
---@param tab_label? Gtk.Widget # the tab label widget to use, or `nil` for default tab label
---@return nil
function Gtk.Notebook:set_tab_label(child, tab_label) end

--- # method Gtk.Notebook:set_tab_label_text()
---
--- Creates a new label and sets it as the tab label for the page
--- containing `child`.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # the page
---@param tab_text string # the label text
---@return nil
function Gtk.Notebook:set_tab_label_text(child, tab_text) end

--- # method Gtk.Notebook:set_tab_pos()
---
--- Sets the edge at which the tabs for switching pages in the
--- notebook are drawn.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`.
---@param pos Gtk.PositionType # the edge to draw the tabs at
---@return nil
function Gtk.Notebook:set_tab_pos(pos) end

--- # method Gtk.Notebook:set_tab_reorderable()
---
--- Sets whether the notebook tab can be reordered
--- via drag and drop or not.
---
--- ---
---
---@param self Gtk.Notebook # a `GtkNotebook`
---@param child Gtk.Widget # a child `GtkWidget`
---@param reorderable (boolean|nil) # whether the tab is reorderable or not
---@return nil
function Gtk.Notebook:set_tab_reorderable(child, reorderable) end

--- # function Gtk.Notebook.new()
---
--- Creates a new `GtkNotebook` widget with no pages.
---
--- ---
---
---@return Gtk.Widget # the newly created `GtkNotebook`
function Gtk.Notebook.new() end

--- # class Gtk.NotebookAccessible
---
---@class Gtk.NotebookAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component, Gtk.Atk.Selection
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.NotebookAccessiblePrivate
Gtk.NotebookAccessible = {}

--- # record Gtk.NotebookAccessibleClass
---
---@class Gtk.NotebookAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.NotebookAccessibleClass = {}

--- # record Gtk.NotebookAccessiblePrivate
---
---@class Gtk.NotebookAccessiblePrivate
Gtk.NotebookAccessiblePrivate = {}

--- # record Gtk.NotebookClass
---
---@class Gtk.NotebookClass
---@field parent_class Gtk.ContainerClass
---@field switch_page fun(notebook: Gtk.Notebook, page: Gtk.Widget, page_num: integer): nil
---@field select_page fun(notebook: Gtk.Notebook, move_focus: (boolean|nil)): (boolean|nil)
---@field focus_tab fun(notebook: Gtk.Notebook, type: Gtk.NotebookTab): (boolean|nil)
---@field change_current_page fun(notebook: Gtk.Notebook, offset: integer): (boolean|nil)
---@field move_focus_out fun(notebook: Gtk.Notebook, direction: Gtk.DirectionType): nil
---@field reorder_tab fun(notebook: Gtk.Notebook, direction: Gtk.DirectionType, move_to_last: (boolean|nil)): (boolean|nil)
---@field insert_page fun(notebook: Gtk.Notebook, child: Gtk.Widget, tab_label: Gtk.Widget, menu_label: Gtk.Widget, position: integer): integer
---@field page_reordered fun(notebook: Gtk.Notebook, child: Gtk.Widget, page_num: integer): nil
---@field page_removed fun(notebook: Gtk.Notebook, child: Gtk.Widget, page_num: integer): nil
---@field page_added fun(notebook: Gtk.Notebook, child: Gtk.Widget, page_num: integer): nil
Gtk.NotebookClass = {}

--- # class Gtk.NotebookPageAccessible
---
---@class Gtk.NotebookPageAccessible : Atk.Object, Gtk.Atk.Component
---@field parent Atk.Object
---@field priv Gtk.NotebookPageAccessiblePrivate
---@operator call: Gtk.NotebookPageAccessible
Gtk.NotebookPageAccessible = {}

--- # method Gtk.NotebookPageAccessible:invalidate()
---
---@param self Gtk.NotebookPageAccessible
---@return nil
function Gtk.NotebookPageAccessible:invalidate() end

--- # function Gtk.NotebookPageAccessible.new()
---
---@param notebook Gtk.NotebookAccessible
---@param child Gtk.Widget
---@return Atk.Object
function Gtk.NotebookPageAccessible.new(notebook, child) end

--- # record Gtk.NotebookPageAccessibleClass
---
---@class Gtk.NotebookPageAccessibleClass
---@field parent_class Atk.ObjectClass
Gtk.NotebookPageAccessibleClass = {}

--- # record Gtk.NotebookPageAccessiblePrivate
---
---@class Gtk.NotebookPageAccessiblePrivate
Gtk.NotebookPageAccessiblePrivate = {}

--- # record Gtk.NotebookPrivate
---
---@class Gtk.NotebookPrivate
Gtk.NotebookPrivate = {}

---@enum Gtk.NotebookTab
Gtk.NotebookTab = {}

---@enum Gtk.NumberUpLayout
Gtk.NumberUpLayout = {}

--- # class Gtk.NumerableIcon
---
--- GtkNumerableIcon is a subclass of `GEmblemedIcon` that can
--- show a number or short string as an emblem. The number can
--- be overlayed on top of another emblem, if desired.
--- 
--- It supports theming by taking font and color information
--- from a provided `GtkStyleContext`; see
--- `gtk_numerable_icon_set_style_context()`.
--- 
--- Typical numerable icons:
--- ![](numerableicon.png)
--- ![](numerableicon2.png)
---
--- ---
---
---@class Gtk.NumerableIcon : Gio.EmblemedIcon, Gtk.Gio.Icon
---@field parent Gio.EmblemedIcon
---@field priv Gtk.NumerableIconPrivate
---@operator call: Gtk.NumerableIcon
Gtk.NumerableIcon = {}

--- # method Gtk.NumerableIcon:get_background_gicon()
---
--- Returns the `GIcon` that was set as the base background image, or
--- `nil` if there’s none. The caller of this function does not own
--- a reference to the returned `GIcon`.
---
--- ---
---
---@param self Gtk.NumerableIcon # a `GtkNumerableIcon`
---@return Gio.Icon # a `GIcon`, or `nil`
function Gtk.NumerableIcon:get_background_gicon() end

--- # method Gtk.NumerableIcon:get_background_icon_name()
---
--- Returns the icon name used as the base background image,
--- or `nil` if there’s none.
---
--- ---
---
---@param self Gtk.NumerableIcon # a `GtkNumerableIcon`
---@return string # an icon name, or `nil`
function Gtk.NumerableIcon:get_background_icon_name() end

--- # method Gtk.NumerableIcon:get_count()
---
--- Returns the value currently displayed by `self`.
---
--- ---
---
---@param self Gtk.NumerableIcon # a `GtkNumerableIcon`
---@return integer # the currently displayed value
function Gtk.NumerableIcon:get_count() end

--- # method Gtk.NumerableIcon:get_label()
---
--- Returns the currently displayed label of the icon, or `nil`.
---
--- ---
---
---@param self Gtk.NumerableIcon # a `GtkNumerableIcon`
---@return string # the currently displayed label
function Gtk.NumerableIcon:get_label() end

--- # method Gtk.NumerableIcon:get_style_context()
---
--- Returns the `GtkStyleContext` used by the icon for theming,
--- or `nil` if there’s none.
---
--- ---
---
---@param self Gtk.NumerableIcon # a `GtkNumerableIcon`
---@return Gtk.StyleContext # a `GtkStyleContext`, or `nil`. This object is internal to GTK+ and should not be unreffed. Use `g_object_ref()` if you want to keep it around
function Gtk.NumerableIcon:get_style_context() end

--- # method Gtk.NumerableIcon:set_background_gicon()
---
--- Updates the icon to use `icon` as the base background image.
--- If `icon` is `nil`, `self` will go back using style information
--- or default theming for its background image.
--- 
--- If this method is called and an icon name was already set as
--- background for the icon, `icon` will be used, i.e. the last method
--- called between `gtk_numerable_icon_set_background_gicon()` and
--- `gtk_numerable_icon_set_background_icon_name()` has always priority.
---
--- ---
---
---@param self Gtk.NumerableIcon # a `GtkNumerableIcon`
---@param icon? Gio.Icon # a `GIcon`, or `nil`
---@return nil
function Gtk.NumerableIcon:set_background_gicon(icon) end

--- # method Gtk.NumerableIcon:set_background_icon_name()
---
--- Updates the icon to use the icon named `icon_name` from the
--- current icon theme as the base background image. If `icon_name`
--- is `nil`, `self` will go back using style information or default
--- theming for its background image.
--- 
--- If this method is called and a `GIcon` was already set as
--- background for the icon, `icon_name` will be used, i.e. the
--- last method called between `gtk_numerable_icon_set_background_icon_name()`
--- and `gtk_numerable_icon_set_background_gicon()` has always priority.
---
--- ---
---
---@param self Gtk.NumerableIcon # a `GtkNumerableIcon`
---@param icon_name? string # an icon name, or `nil`
---@return nil
function Gtk.NumerableIcon:set_background_icon_name(icon_name) end

--- # method Gtk.NumerableIcon:set_count()
---
--- Sets the currently displayed value of `self` to `count`.
--- 
--- The numeric value is always clamped to make it two digits, i.e.
--- between -99 and 99. Setting a count of zero removes the emblem.
--- If this method is called, and a label was already set on the icon,
--- it will automatically be reset to `nil` before rendering the number,
--- i.e. the last method called between `gtk_numerable_icon_set_count()`
--- and `gtk_numerable_icon_set_label()` has always priority.
---
--- ---
---
---@param self Gtk.NumerableIcon # a `GtkNumerableIcon`
---@param count integer # a number between -99 and 99
---@return nil
function Gtk.NumerableIcon:set_count(count) end

--- # method Gtk.NumerableIcon:set_label()
---
--- Sets the currently displayed value of `self` to the string
--- in `label`. Setting an empty label removes the emblem.
--- 
--- Note that this is meant for displaying short labels, such as
--- roman numbers, or single letters. For roman numbers, consider
--- using the Unicode characters U+2160 - U+217F. Strings longer
--- than two characters will likely not be rendered very well.
--- 
--- If this method is called, and a number was already set on the
--- icon, it will automatically be reset to zero before rendering
--- the label, i.e. the last method called between
--- `gtk_numerable_icon_set_label()` and `gtk_numerable_icon_set_count()`
--- has always priority.
---
--- ---
---
---@param self Gtk.NumerableIcon # a `GtkNumerableIcon`
---@param label? string # a short label, or `nil`
---@return nil
function Gtk.NumerableIcon:set_label(label) end

--- # method Gtk.NumerableIcon:set_style_context()
---
--- Updates the icon to fetch theme information from the
--- given `GtkStyleContext`.
---
--- ---
---
---@param self Gtk.NumerableIcon # a `GtkNumerableIcon`
---@param style Gtk.StyleContext # a `GtkStyleContext`
---@return nil
function Gtk.NumerableIcon:set_style_context(style) end

--- # function Gtk.NumerableIcon.new()
---
--- Creates a new unthemed `GtkNumerableIcon`.
---
--- ---
---
---@param base_icon Gio.Icon # a `GIcon` to overlay on
---@return Gio.Icon # a new `GIcon`
function Gtk.NumerableIcon.new(base_icon) end

--- # function Gtk.NumerableIcon.new_with_style_context()
---
--- Creates a new `GtkNumerableIcon` which will themed according
--- to the passed `GtkStyleContext`. This is a convenience constructor
--- that calls `gtk_numerable_icon_set_style_context()` internally.
---
--- ---
---
---@param base_icon Gio.Icon # a `GIcon` to overlay on
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@return Gio.Icon # a new `GIcon`
function Gtk.NumerableIcon.new_with_style_context(base_icon, context) end

--- # record Gtk.NumerableIconClass
---
---@class Gtk.NumerableIconClass
---@field parent_class Gio.EmblemedIconClass
---@field padding unknown[]
Gtk.NumerableIconClass = {}

--- # record Gtk.NumerableIconPrivate
---
---@class Gtk.NumerableIconPrivate
Gtk.NumerableIconPrivate = {}

--- # class Gtk.OffscreenWindow
---
--- GtkOffscreenWindow is strictly intended to be used for obtaining
--- snapshots of widgets that are not part of a normal widget hierarchy.
--- Since `GtkOffscreenWindow` is a toplevel widget you cannot obtain
--- snapshots of a full window with it since you cannot pack a toplevel
--- widget in another toplevel.
--- 
--- The idea is to take a widget and manually set the state of it,
--- add it to a GtkOffscreenWindow and then retrieve the snapshot
--- as a `cairo_surface_t` or `GdkPixbuf`.
--- 
--- GtkOffscreenWindow derives from `GtkWindow` only as an implementation
--- detail.  Applications should not use any API specific to `GtkWindow`
--- to operate on this object.  It should be treated as a `GtkBin` that
--- has no parent widget.
--- 
--- When contained offscreen widgets are redrawn, GtkOffscreenWindow
--- will emit a `GtkWidget`::damage-event signal.
---
--- ---
---
---@class Gtk.OffscreenWindow : Gtk.Window, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent_object Gtk.Window
---@operator call: Gtk.OffscreenWindow
Gtk.OffscreenWindow = {}

--- # method Gtk.OffscreenWindow:get_pixbuf()
---
--- Retrieves a snapshot of the contained widget in the form of
--- a `GdkPixbuf`.  This is a new pixbuf with a reference count of 1,
--- and the application should unreference it once it is no longer
--- needed.
---
--- ---
---
---@param self Gtk.OffscreenWindow # the `GtkOffscreenWindow` contained widget.
---@return GdkPixbuf.Pixbuf # A `GdkPixbuf` pointer, or `nil`.
function Gtk.OffscreenWindow:get_pixbuf() end

--- # method Gtk.OffscreenWindow:get_surface()
---
--- Retrieves a snapshot of the contained widget in the form of
--- a `cairo_surface_t`.  If you need to keep this around over window
--- resizes then you should add a reference to it.
---
--- ---
---
---@param self Gtk.OffscreenWindow # the `GtkOffscreenWindow` contained widget.
---@return cairo.Surface # A `cairo_surface_t` pointer to the offscreen surface, or `nil`.
function Gtk.OffscreenWindow:get_surface() end

--- # function Gtk.OffscreenWindow.new()
---
--- Creates a toplevel container widget that is used to retrieve
--- snapshots of widgets without showing them on the screen.
---
--- ---
---
---@return Gtk.Widget # A pointer to a `GtkWidget`
function Gtk.OffscreenWindow.new() end

--- # record Gtk.OffscreenWindowClass
---
---@class Gtk.OffscreenWindowClass
---@field parent_class Gtk.WindowClass # The parent class.
Gtk.OffscreenWindowClass = {}

--- # interface Gtk.Orientable
---
--- The `GtkOrientable` interface is implemented by all widgets that can be
--- oriented horizontally or vertically. Historically, such widgets have been
--- realized as subclasses of a common base class (e.g `GtkBox`/`GtkHBox`/`GtkVBox`
--- or `GtkScale`/`GtkHScale`/`GtkVScale`). `GtkOrientable` is more flexible in that
--- it allows the orientation to be changed at runtime, allowing the widgets
--- to “flip”.
--- 
--- `GtkOrientable` was introduced in GTK+ 2.16.
---
--- ---
---
---@class Gtk.Orientable
Gtk.Orientable = {}

--- # method Gtk.Orientable:get_orientation()
---
--- Retrieves the orientation of the `orientable`.
---
--- ---
---
---@param self Gtk.Orientable # a `GtkOrientable`
---@return Gtk.Orientation # the orientation of the `orientable`.
function Gtk.Orientable:get_orientation() end

--- # method Gtk.Orientable:set_orientation()
---
--- Sets the orientation of the `orientable`.
---
--- ---
---
---@param self Gtk.Orientable # a `GtkOrientable`
---@param orientation Gtk.Orientation # the orientable’s new orientation.
---@return nil
function Gtk.Orientable:set_orientation(orientation) end

--- # record Gtk.OrientableIface
---
---@class Gtk.OrientableIface
---@field base_iface GObject.TypeInterface
Gtk.OrientableIface = {}

---@enum Gtk.Orientation
Gtk.Orientation = {}

--- # class Gtk.Overlay
---
--- GtkOverlay is a container which contains a single main child, on top
--- of which it can place “overlay” widgets. The position of each overlay
--- widget is determined by its `GtkWidget`:halign and `GtkWidget`:valign
--- properties. E.g. a widget with both alignments set to %GTK_ALIGN_START
--- will be placed at the top left corner of the GtkOverlay container,
--- whereas an overlay with halign set to %GTK_ALIGN_CENTER and valign set
--- to %GTK_ALIGN_END will be placed a the bottom edge of the GtkOverlay,
--- horizontally centered. The position can be adjusted by setting the margin
--- properties of the child to non-zero values.
--- 
--- More complicated placement of overlays is possible by connecting
--- to the `GtkOverlay`::get-child-position signal.
--- 
--- An overlay’s minimum and natural sizes are those of its main child. The sizes
--- of overlay children are not considered when measuring these preferred sizes.
--- 
--- # GtkOverlay as GtkBuildable
--- 
--- The GtkOverlay implementation of the GtkBuildable interface
--- supports placing a child as an overlay by specifying “overlay” as
--- the “type” attribute of a `<child>` element.
--- 
--- # CSS nodes
--- 
--- GtkOverlay has a single CSS node with the name “overlay”. Overlay children
--- whose alignments cause them to be positioned at an edge get the style classes
--- “.left”, “.right”, “.top”, and/or “.bottom” according to their position.
---
--- ---
---
---@class Gtk.Overlay : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent Gtk.Bin
---@field priv Gtk.OverlayPrivate
---@operator call: Gtk.Overlay
Gtk.Overlay = {}

--- # method Gtk.Overlay:add_overlay()
---
--- Adds `widget` to `overlay`.
--- 
--- The widget will be stacked on top of the main widget
--- added with `gtk_container_add()`.
--- 
--- The position at which `widget` is placed is determined
--- from its `GtkWidget`:halign and `GtkWidget`:valign properties.
---
--- ---
---
---@param self Gtk.Overlay # a `GtkOverlay`
---@param widget Gtk.Widget # a `GtkWidget` to be added to the container
---@return nil
function Gtk.Overlay:add_overlay(widget) end

--- # method Gtk.Overlay:get_overlay_pass_through()
---
--- Convenience function to get the value of the `GtkOverlay`:pass-through
--- child property for `widget`.
---
--- ---
---
---@param self Gtk.Overlay # a `GtkOverlay`
---@param widget Gtk.Widget # an overlay child of `GtkOverlay`
---@return (boolean|nil) # whether the widget is a pass through child.
function Gtk.Overlay:get_overlay_pass_through(widget) end

--- # method Gtk.Overlay:reorder_overlay()
---
--- Moves `child` to a new `index` in the list of `overlay` children.
--- The list contains overlays in the order that these were
--- added to `overlay` by default. See also `GtkOverlay`:index.
--- 
--- A widget’s index in the `overlay` children list determines which order
--- the children are drawn if they overlap. The first child is drawn at
--- the bottom. It also affects the default focus chain order.
---
--- ---
---
---@param self Gtk.Overlay # a `GtkOverlay`
---@param child Gtk.Widget # the overlaid `GtkWidget` to move
---@param index_ integer # the new index for `child` in the list of overlay children of `overlay`, starting from 0. If negative, indicates the end of the list
---@return nil
function Gtk.Overlay:reorder_overlay(child, index_) end

--- # method Gtk.Overlay:set_overlay_pass_through()
---
--- Convenience function to set the value of the `GtkOverlay`:pass-through
--- child property for `widget`.
---
--- ---
---
---@param self Gtk.Overlay # a `GtkOverlay`
---@param widget Gtk.Widget # an overlay child of `GtkOverlay`
---@param pass_through (boolean|nil) # whether the child should pass the input through
---@return nil
function Gtk.Overlay:set_overlay_pass_through(widget, pass_through) end

--- # function Gtk.Overlay.new()
---
--- Creates a new `GtkOverlay`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkOverlay` object.
function Gtk.Overlay.new() end

--- # record Gtk.OverlayClass
---
---@class Gtk.OverlayClass
---@field parent_class Gtk.BinClass # The parent class.
---@field get_child_position fun(overlay: Gtk.Overlay, widget: Gtk.Widget, allocation: Gtk.Allocation): (boolean|nil)
Gtk.OverlayClass = {}

--- # record Gtk.OverlayPrivate
---
---@class Gtk.OverlayPrivate
Gtk.OverlayPrivate = {}

---@enum Gtk.PackDirection
Gtk.PackDirection = {}

---@enum Gtk.PackType
Gtk.PackType = {}

--- # record Gtk.PadActionEntry
---
--- Struct defining a pad action entry.
---
--- ---
---
---@class Gtk.PadActionEntry
---@field type Gtk.PadActionType # the type of pad feature that will trigger this action entry.
---@field index integer # the 0-indexed button/ring/strip number that will trigger this action entry.
---@field mode integer # the mode that will trigger this action entry, or -1 for all modes.
---@field label string # Human readable description of this action entry, this string should be deemed user-visible.
---@field action_name string # action name that will be activated in the `GActionGroup`.
Gtk.PadActionEntry = {}

---@enum Gtk.PadActionType
Gtk.PadActionType = {}

--- # class Gtk.PadController
---
--- `GtkPadController` is an event controller for the pads found in drawing
--- tablets (The collection of buttons and tactile sensors often found around
--- the stylus-sensitive area).
--- 
--- These buttons and sensors have no implicit meaning, and by default they
--- perform no action, this event controller is provided to map those to
--- `GAction` objects, thus letting the application give those a more semantic
--- meaning.
--- 
--- Buttons and sensors are not constrained to triggering a single action, some
--- %GDK_SOURCE_TABLET_PAD devices feature multiple "modes", all these input
--- elements have one current mode, which may determine the final action
--- being triggered. Pad devices often divide buttons and sensors into groups,
--- all elements in a group share the same current mode, but different groups
--- may have different modes. See `gdk_device_pad_get_n_groups()` and
--- `gdk_device_pad_get_group_n_modes()`.
--- 
--- Each of the actions that a given button/strip/ring performs for a given
--- mode is defined by `GtkPadActionEntry`, it contains an action name that
--- will be looked up in the given `GActionGroup` and activated whenever the
--- specified input element and mode are triggered.
--- 
--- A simple example of `GtkPadController` usage, assigning button 1 in all
--- modes and pad devices to an "invert-selection" action:
--- ```c
---   GtkPadActionEntry *pad_actions[] = {
---     { GTK_PAD_ACTION_BUTTON, 1, -1, "Invert selection", "pad-actions.invert-selection" },
---     …
---   };
--- 
---   …
---   action_group = g_simple_action_group_new ();
---   action = g_simple_action_new ("pad-actions.invert-selection", NULL);
---   g_signal_connect (action, "activate", on_invert_selection_activated, NULL);
---   g_action_map_add_action (G_ACTION_MAP (action_group), action);
---   …
---   pad_controller = gtk_pad_controller_new (window, action_group, NULL);
--- ```
--- 
--- The actions belonging to rings/strips will be activated with a parameter
--- of type %G_VARIANT_TYPE_DOUBLE bearing the value of the given axis, it
--- is required that those are made stateful and accepting this `GVariantType`.
---
--- ---
---
---@class Gtk.PadController : Gtk.EventController
---@operator call: Gtk.PadController
Gtk.PadController = {}

--- # method Gtk.PadController:set_action()
---
--- Adds an individual action to `controller`. This action will only be activated
--- if the given button/ring/strip number in `index` is interacted while
--- the current mode is `mode`. -1 may be used for simple cases, so the action
--- is triggered on all modes.
--- 
--- The given `label` should be considered user-visible, so internationalization
--- rules apply. Some windowing systems may be able to use those for user
--- feedback.
---
--- ---
---
---@param self Gtk.PadController # a `GtkPadController`
---@param type Gtk.PadActionType # the type of pad feature that will trigger this action
---@param index integer # the 0-indexed button/ring/strip number that will trigger this action
---@param mode integer # the mode that will trigger this action, or -1 for all modes.
---@param label string # Human readable description of this action, this string should be deemed user-visible.
---@param action_name string # action name that will be activated in the `GActionGroup`
---@return nil
function Gtk.PadController:set_action(type, index, mode, label, action_name) end

--- # method Gtk.PadController:set_action_entries()
---
--- This is a convenience function to add a group of action entries on
--- `controller`. See `GtkPadActionEntry` and `gtk_pad_controller_set_action()`.
---
--- ---
---
---@param self Gtk.PadController # a `GtkPadController`
---@param entries unknown[] # the action entries to set on `controller`
---@param n_entries integer # the number of elements in `entries`
---@return nil
function Gtk.PadController:set_action_entries(entries, n_entries) end

--- # function Gtk.PadController.new()
---
--- Creates a new `GtkPadController` that will associate events from `pad` to
--- actions. A `nil` pad may be provided so the controller manages all pad devices
--- generically, it is discouraged to mix `GtkPadController` objects with `nil`
--- and non-`nil` `pad` argument on the same `window`, as execution order is not
--- guaranteed.
--- 
--- The `GtkPadController` is created with no mapped actions. In order to map pad
--- events to actions, use `gtk_pad_controller_set_action_entries()` or
--- `gtk_pad_controller_set_action()`.
---
--- ---
---
---@param window Gtk.Window # a `GtkWindow`
---@param group Gio.ActionGroup # `GActionGroup` to trigger actions from
---@param pad? Gdk.Device # A %GDK_SOURCE_TABLET_PAD device, or `nil` to handle all pads
---@return Gtk.PadController # A newly created `GtkPadController`
function Gtk.PadController.new(window, group, pad) end

--- # record Gtk.PadControllerClass
---
---@class Gtk.PadControllerClass
Gtk.PadControllerClass = {}

---@enum Gtk.PageOrientation
Gtk.PageOrientation = {}

--- # record Gtk.PageRange
---
--- See also `gtk_print_settings_set_page_ranges()`.
---
--- ---
---
---@class Gtk.PageRange
---@field start integer # start of page range.
---@field end__ integer # end of page range.
Gtk.PageRange = {}

---@enum Gtk.PageSet
Gtk.PageSet = {}

--- # class Gtk.PageSetup
---
--- A GtkPageSetup object stores the page size, orientation and margins.
--- The idea is that you can get one of these from the page setup dialog
--- and then pass it to the `GtkPrintOperation` when printing.
--- The benefit of splitting this out of the `GtkPrintSettings` is that
--- these affect the actual layout of the page, and thus need to be set
--- long before user prints.
--- 
--- ## Margins ## {`print`-margins}
--- The margins specified in this object are the “print margins”, i.e. the
--- parts of the page that the printer cannot print on. These are different
--- from the layout margins that a word processor uses; they are typically
--- used to determine the minimal size for the layout
--- margins.
--- 
--- To obtain a `GtkPageSetup` use `gtk_page_setup_new()` to get the defaults,
--- or use `gtk_print_run_page_setup_dialog()` to show the page setup dialog
--- and receive the resulting page setup.
--- 
--- ## A page setup dialog
--- 
--- ```c
--- static GtkPrintSettings *settings = NULL;
--- static GtkPageSetup *page_setup = NULL;
--- 
--- static void
--- do_page_setup (void)
--- {
---   GtkPageSetup *new_page_setup;
--- 
---   if (settings == NULL)
---     settings = gtk_print_settings_new ();
--- 
---   new_page_setup = gtk_print_run_page_setup_dialog (GTK_WINDOW (main_window),
---                                                     page_setup, settings);
--- 
---   if (page_setup)
---     g_object_unref (page_setup);
--- 
---   page_setup = new_page_setup;
--- }
--- ```
--- 
--- Printing support was added in GTK+ 2.10.
---
--- ---
---
---@class Gtk.PageSetup : GObject.Object
---@operator call: Gtk.PageSetup
Gtk.PageSetup = {}

--- # method Gtk.PageSetup:copy()
---
--- Copies a `GtkPageSetup`.
---
--- ---
---
---@param self Gtk.PageSetup # the `GtkPageSetup` to copy
---@return Gtk.PageSetup # a copy of `other`
function Gtk.PageSetup:copy() end

--- # method Gtk.PageSetup:get_bottom_margin()
---
--- Gets the bottom margin in units of `unit`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param unit Gtk.Unit # the unit for the return value
---@return number # the bottom margin
function Gtk.PageSetup:get_bottom_margin(unit) end

--- # method Gtk.PageSetup:get_left_margin()
---
--- Gets the left margin in units of `unit`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param unit Gtk.Unit # the unit for the return value
---@return number # the left margin
function Gtk.PageSetup:get_left_margin(unit) end

--- # method Gtk.PageSetup:get_orientation()
---
--- Gets the page orientation of the `GtkPageSetup`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@return Gtk.PageOrientation # the page orientation
function Gtk.PageSetup:get_orientation() end

--- # method Gtk.PageSetup:get_page_height()
---
--- Returns the page height in units of `unit`.
--- 
--- Note that this function takes orientation and
--- margins into consideration.
--- See `gtk_page_setup_get_paper_height()`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param unit Gtk.Unit # the unit for the return value
---@return number # the page height.
function Gtk.PageSetup:get_page_height(unit) end

--- # method Gtk.PageSetup:get_page_width()
---
--- Returns the page width in units of `unit`.
--- 
--- Note that this function takes orientation and
--- margins into consideration.
--- See `gtk_page_setup_get_paper_width()`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param unit Gtk.Unit # the unit for the return value
---@return number # the page width.
function Gtk.PageSetup:get_page_width(unit) end

--- # method Gtk.PageSetup:get_paper_height()
---
--- Returns the paper height in units of `unit`.
--- 
--- Note that this function takes orientation, but
--- not margins into consideration.
--- See `gtk_page_setup_get_page_height()`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param unit Gtk.Unit # the unit for the return value
---@return number # the paper height.
function Gtk.PageSetup:get_paper_height(unit) end

--- # method Gtk.PageSetup:get_paper_size()
---
--- Gets the paper size of the `GtkPageSetup`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@return Gtk.PaperSize # the paper size
function Gtk.PageSetup:get_paper_size() end

--- # method Gtk.PageSetup:get_paper_width()
---
--- Returns the paper width in units of `unit`.
--- 
--- Note that this function takes orientation, but
--- not margins into consideration.
--- See `gtk_page_setup_get_page_width()`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param unit Gtk.Unit # the unit for the return value
---@return number # the paper width.
function Gtk.PageSetup:get_paper_width(unit) end

--- # method Gtk.PageSetup:get_right_margin()
---
--- Gets the right margin in units of `unit`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param unit Gtk.Unit # the unit for the return value
---@return number # the right margin
function Gtk.PageSetup:get_right_margin(unit) end

--- # method Gtk.PageSetup:get_top_margin()
---
--- Gets the top margin in units of `unit`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param unit Gtk.Unit # the unit for the return value
---@return number # the top margin
function Gtk.PageSetup:get_top_margin(unit) end

--- # method Gtk.PageSetup:load_file()
---
--- Reads the page setup from the file `file_name`.
--- See `gtk_page_setup_to_file()`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param file_name string # the filename to read the page setup from
---@return (boolean|nil) # `true` on success
function Gtk.PageSetup:load_file(file_name) end

--- # method Gtk.PageSetup:load_key_file()
---
--- Reads the page setup from the group `group_name` in the key file
--- `key_file`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param key_file GLib.KeyFile # the `GKeyFile` to retrieve the page_setup from
---@param group_name? string # the name of the group in the key_file to read, or `nil` to use the default name “Page Setup”
---@return (boolean|nil) # `true` on success
function Gtk.PageSetup:load_key_file(key_file, group_name) end

--- # method Gtk.PageSetup:set_bottom_margin()
---
--- Sets the bottom margin of the `GtkPageSetup`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param margin number # the new bottom margin in units of `unit`
---@param unit Gtk.Unit # the units for `margin`
---@return nil
function Gtk.PageSetup:set_bottom_margin(margin, unit) end

--- # method Gtk.PageSetup:set_left_margin()
---
--- Sets the left margin of the `GtkPageSetup`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param margin number # the new left margin in units of `unit`
---@param unit Gtk.Unit # the units for `margin`
---@return nil
function Gtk.PageSetup:set_left_margin(margin, unit) end

--- # method Gtk.PageSetup:set_orientation()
---
--- Sets the page orientation of the `GtkPageSetup`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param orientation Gtk.PageOrientation # a `GtkPageOrientation` value
---@return nil
function Gtk.PageSetup:set_orientation(orientation) end

--- # method Gtk.PageSetup:set_paper_size()
---
--- Sets the paper size of the `GtkPageSetup` without
--- changing the margins. See
--- `gtk_page_setup_set_paper_size_and_default_margins()`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param size Gtk.PaperSize # a `GtkPaperSize`
---@return nil
function Gtk.PageSetup:set_paper_size(size) end

--- # method Gtk.PageSetup:set_paper_size_and_default_margins()
---
--- Sets the paper size of the `GtkPageSetup` and modifies
--- the margins according to the new paper size.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param size Gtk.PaperSize # a `GtkPaperSize`
---@return nil
function Gtk.PageSetup:set_paper_size_and_default_margins(size) end

--- # method Gtk.PageSetup:set_right_margin()
---
--- Sets the right margin of the `GtkPageSetup`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param margin number # the new right margin in units of `unit`
---@param unit Gtk.Unit # the units for `margin`
---@return nil
function Gtk.PageSetup:set_right_margin(margin, unit) end

--- # method Gtk.PageSetup:set_top_margin()
---
--- Sets the top margin of the `GtkPageSetup`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param margin number # the new top margin in units of `unit`
---@param unit Gtk.Unit # the units for `margin`
---@return nil
function Gtk.PageSetup:set_top_margin(margin, unit) end

--- # method Gtk.PageSetup:to_file()
---
--- This function saves the information from `setup` to `file_name`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param file_name string # the file to save to
---@return (boolean|nil) # `true` on success
function Gtk.PageSetup:to_file(file_name) end

--- # method Gtk.PageSetup:to_gvariant()
---
--- Serialize page setup to an a{sv} variant.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@return GLib.Variant # a new, floating, `GVariant`
function Gtk.PageSetup:to_gvariant() end

--- # method Gtk.PageSetup:to_key_file()
---
--- This function adds the page setup from `setup` to `key_file`.
---
--- ---
---
---@param self Gtk.PageSetup # a `GtkPageSetup`
---@param key_file GLib.KeyFile # the `GKeyFile` to save the page setup to
---@param group_name? string # the group to add the settings to in `key_file`, or `nil` to use the default name “Page Setup”
---@return nil
function Gtk.PageSetup:to_key_file(key_file, group_name) end

--- # function Gtk.PageSetup.new()
---
--- Creates a new `GtkPageSetup`.
---
--- ---
---
---@return Gtk.PageSetup # a new `GtkPageSetup`.
function Gtk.PageSetup.new() end

--- # function Gtk.PageSetup.new_from_file()
---
--- Reads the page setup from the file `file_name`. Returns a
--- new `GtkPageSetup` object with the restored page setup,
--- or `nil` if an error occurred. See `gtk_page_setup_to_file()`.
---
--- ---
---
---@param file_name string # the filename to read the page setup from
---@return Gtk.PageSetup # the restored `GtkPageSetup`
function Gtk.PageSetup.new_from_file(file_name) end

--- # function Gtk.PageSetup.new_from_gvariant()
---
--- Desrialize a page setup from an a{sv} variant in
--- the format produced by `gtk_page_setup_to_gvariant()`.
---
--- ---
---
---@param variant GLib.Variant # an a{sv} `GVariant`
---@return Gtk.PageSetup # a new `GtkPageSetup` object
function Gtk.PageSetup.new_from_gvariant(variant) end

--- # function Gtk.PageSetup.new_from_key_file()
---
--- Reads the page setup from the group `group_name` in the key file
--- `key_file`. Returns a new `GtkPageSetup` object with the restored
--- page setup, or `nil` if an error occurred.
---
--- ---
---
---@param key_file GLib.KeyFile # the `GKeyFile` to retrieve the page_setup from
---@param group_name? string # the name of the group in the key_file to read, or `nil` to use the default name “Page Setup”
---@return Gtk.PageSetup # the restored `GtkPageSetup`
function Gtk.PageSetup.new_from_key_file(key_file, group_name) end

---@alias Gtk.PageSetupDoneFunc fun(page_setup: Gtk.PageSetup, data: userdata): nil

---@enum Gtk.PanDirection
Gtk.PanDirection = {}

--- # class Gtk.Paned
---
--- `GtkPaned` has two panes, arranged either
--- horizontally or vertically. The division between
--- the two panes is adjustable by the user by dragging
--- a handle.
--- 
--- Child widgets are
--- added to the panes of the widget with gtk_paned_pack1() and
--- gtk_paned_pack2(). The division between the two children is set by default
--- from the size requests of the children, but it can be adjusted by the
--- user.
--- 
--- A paned widget draws a separator between the two child widgets and a
--- small handle that the user can drag to adjust the division. It does not
--- draw any relief around the children or around the separator. (The space
--- in which the separator is called the gutter.) Often, it is useful to put
--- each child inside a `GtkFrame` with the shadow type set to %GTK_SHADOW_IN
--- so that the gutter appears as a ridge. No separator is drawn if one of
--- the children is missing.
--- 
--- Each child has two options that can be set, `resize` and `shrink`. If
--- `resize` is true, then when the `GtkPaned` is resized, that child will
--- expand or shrink along with the paned widget. If `shrink` is true, then
--- that child can be made smaller than its requisition by the user.
--- Setting `shrink` to `false` allows the application to set a minimum size.
--- If `resize` is false for both children, then this is treated as if
--- `resize` is true for both children.
--- 
--- The application can set the position of the slider as if it were set
--- by the user, by calling `gtk_paned_set_position()`.
--- 
--- # CSS nodes
--- 
--- ```plain
--- paned
--- ├── <child>
--- ├── separator[.wide]
--- ╰── <child>
--- ```
--- 
--- GtkPaned has a main CSS node with name paned, and a subnode for
--- the separator with name separator. The subnode gets a .wide style
--- class when the paned is supposed to be wide.
--- 
--- In horizontal orientation, the nodes of the children are always arranged
--- from left to right. So :first-child will always select the leftmost child,
--- regardless of text direction.
--- 
--- ## Creating a paned widget with minimum sizes.
--- 
--- ```c
--- GtkWidget *hpaned = gtk_paned_new (GTK_ORIENTATION_HORIZONTAL);
--- GtkWidget *frame1 = gtk_frame_new (NULL);
--- GtkWidget *frame2 = gtk_frame_new (NULL);
--- gtk_frame_set_shadow_type (GTK_FRAME (frame1), GTK_SHADOW_IN);
--- gtk_frame_set_shadow_type (GTK_FRAME (frame2), GTK_SHADOW_IN);
--- 
--- gtk_widget_set_size_request (hpaned, 200, -1);
--- 
--- gtk_paned_pack1 (GTK_PANED (hpaned), frame1, TRUE, FALSE);
--- gtk_widget_set_size_request (frame1, 50, -1);
--- 
--- gtk_paned_pack2 (GTK_PANED (hpaned), frame2, FALSE, FALSE);
--- gtk_widget_set_size_request (frame2, 50, -1);
--- ```
---
--- ---
---
---@class Gtk.Paned : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field container Gtk.Container
---@field priv Gtk.PanedPrivate
---@operator call: Gtk.Paned
Gtk.Paned = {}

--- # method Gtk.Paned:add1()
---
--- Adds a child to the top or left pane with default parameters. This is
--- equivalent to
--- `gtk_paned_pack1 (paned, child, FALSE, TRUE)`.
---
--- ---
---
---@param self Gtk.Paned # a paned widget
---@param child Gtk.Widget # the child to add
---@return nil
function Gtk.Paned:add1(child) end

--- # method Gtk.Paned:add2()
---
--- Adds a child to the bottom or right pane with default parameters. This
--- is equivalent to
--- `gtk_paned_pack2 (paned, child, TRUE, TRUE)`.
---
--- ---
---
---@param self Gtk.Paned # a paned widget
---@param child Gtk.Widget # the child to add
---@return nil
function Gtk.Paned:add2(child) end

--- # method Gtk.Paned:get_child1()
---
--- Obtains the first child of the paned widget.
---
--- ---
---
---@param self Gtk.Paned # a `GtkPaned` widget
---@return Gtk.Widget # first child, or `nil` if it is not set.
function Gtk.Paned:get_child1() end

--- # method Gtk.Paned:get_child2()
---
--- Obtains the second child of the paned widget.
---
--- ---
---
---@param self Gtk.Paned # a `GtkPaned` widget
---@return Gtk.Widget # second child, or `nil` if it is not set.
function Gtk.Paned:get_child2() end

--- # method Gtk.Paned:get_handle_window()
---
--- Returns the `GdkWindow` of the handle. This function is
--- useful when handling button or motion events because it
--- enables the callback to distinguish between the window
--- of the paned, a child and the handle.
---
--- ---
---
---@param self Gtk.Paned # a `GtkPaned`
---@return Gdk.Window # the paned’s handle window.
function Gtk.Paned:get_handle_window() end

--- # method Gtk.Paned:get_position()
---
--- Obtains the position of the divider between the two panes.
---
--- ---
---
---@param self Gtk.Paned # a `GtkPaned` widget
---@return integer # position of the divider
function Gtk.Paned:get_position() end

--- # method Gtk.Paned:get_wide_handle()
---
--- Gets the `GtkPaned`:wide-handle property.
---
--- ---
---
---@param self Gtk.Paned # a `GtkPaned`
---@return (boolean|nil) # `true` if the paned should have a wide handle
function Gtk.Paned:get_wide_handle() end

--- # method Gtk.Paned:pack1()
---
--- Adds a child to the top or left pane.
---
--- ---
---
---@param self Gtk.Paned # a paned widget
---@param child Gtk.Widget # the child to add
---@param resize (boolean|nil) # should this child expand when the paned widget is resized.
---@param shrink (boolean|nil) # can this child be made smaller than its requisition.
---@return nil
function Gtk.Paned:pack1(child, resize, shrink) end

--- # method Gtk.Paned:pack2()
---
--- Adds a child to the bottom or right pane.
---
--- ---
---
---@param self Gtk.Paned # a paned widget
---@param child Gtk.Widget # the child to add
---@param resize (boolean|nil) # should this child expand when the paned widget is resized.
---@param shrink (boolean|nil) # can this child be made smaller than its requisition.
---@return nil
function Gtk.Paned:pack2(child, resize, shrink) end

--- # method Gtk.Paned:set_position()
---
--- Sets the position of the divider between the two panes.
---
--- ---
---
---@param self Gtk.Paned # a `GtkPaned` widget
---@param position integer # pixel position of divider, a negative value means that the position is unset.
---@return nil
function Gtk.Paned:set_position(position) end

--- # method Gtk.Paned:set_wide_handle()
---
--- Sets the `GtkPaned`:wide-handle property.
---
--- ---
---
---@param self Gtk.Paned # a `GtkPaned`
---@param wide (boolean|nil) # the new value for the `GtkPaned`:wide-handle property
---@return nil
function Gtk.Paned:set_wide_handle(wide) end

--- # function Gtk.Paned.new()
---
--- Creates a new `GtkPaned` widget.
---
--- ---
---
---@param orientation Gtk.Orientation # the paned’s orientation.
---@return Gtk.Widget # a new `GtkPaned`.
function Gtk.Paned.new(orientation) end

--- # class Gtk.PanedAccessible
---
---@class Gtk.PanedAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component, Gtk.Atk.Value
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.PanedAccessiblePrivate
Gtk.PanedAccessible = {}

--- # record Gtk.PanedAccessibleClass
---
---@class Gtk.PanedAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.PanedAccessibleClass = {}

--- # record Gtk.PanedAccessiblePrivate
---
---@class Gtk.PanedAccessiblePrivate
Gtk.PanedAccessiblePrivate = {}

--- # record Gtk.PanedClass
---
---@class Gtk.PanedClass
---@field parent_class Gtk.ContainerClass
---@field cycle_child_focus fun(paned: Gtk.Paned, reverse: (boolean|nil)): (boolean|nil)
---@field toggle_handle_focus fun(paned: Gtk.Paned): (boolean|nil)
---@field move_handle fun(paned: Gtk.Paned, scroll: Gtk.ScrollType): (boolean|nil)
---@field cycle_handle_focus fun(paned: Gtk.Paned, reverse: (boolean|nil)): (boolean|nil)
---@field accept_position fun(paned: Gtk.Paned): (boolean|nil)
---@field cancel_position fun(paned: Gtk.Paned): (boolean|nil)
Gtk.PanedClass = {}

--- # record Gtk.PanedPrivate
---
---@class Gtk.PanedPrivate
Gtk.PanedPrivate = {}

--- # record Gtk.PaperSize
---
--- GtkPaperSize handles paper sizes. It uses the standard called
--- [PWG 5101.1-2002 PWG: Standard for Media Standardized Names](http://www.pwg.org/standards.html)
--- to name the paper sizes (and to get the data for the page sizes).
--- In addition to standard paper sizes, GtkPaperSize allows to
--- construct custom paper sizes with arbitrary dimensions.
--- 
--- The `GtkPaperSize` object stores not only the dimensions (width
--- and height) of a paper size and its name, it also provides
--- default [print margins][print-margins].
--- 
--- Printing support has been added in GTK+ 2.10.
---
--- ---
---
---@class Gtk.PaperSize
---@operator call: Gtk.PaperSize
Gtk.PaperSize = {}

--- # method Gtk.PaperSize:copy()
---
--- Copies an existing `GtkPaperSize`.
---
--- ---
---
---@param self Gtk.PaperSize # a `GtkPaperSize`
---@return Gtk.PaperSize # a copy of `other`
function Gtk.PaperSize:copy() end

--- # method Gtk.PaperSize:free()
---
--- Free the given `GtkPaperSize` object.
---
--- ---
---
---@param self Gtk.PaperSize # a `GtkPaperSize`
---@return nil
function Gtk.PaperSize:free() end

--- # method Gtk.PaperSize:get_default_bottom_margin()
---
--- Gets the default bottom margin for the `GtkPaperSize`.
---
--- ---
---
---@param self Gtk.PaperSize # a `GtkPaperSize` object
---@param unit Gtk.Unit # the unit for the return value, not %GTK_UNIT_NONE
---@return number # the default bottom margin
function Gtk.PaperSize:get_default_bottom_margin(unit) end

--- # method Gtk.PaperSize:get_default_left_margin()
---
--- Gets the default left margin for the `GtkPaperSize`.
---
--- ---
---
---@param self Gtk.PaperSize # a `GtkPaperSize` object
---@param unit Gtk.Unit # the unit for the return value, not %GTK_UNIT_NONE
---@return number # the default left margin
function Gtk.PaperSize:get_default_left_margin(unit) end

--- # method Gtk.PaperSize:get_default_right_margin()
---
--- Gets the default right margin for the `GtkPaperSize`.
---
--- ---
---
---@param self Gtk.PaperSize # a `GtkPaperSize` object
---@param unit Gtk.Unit # the unit for the return value, not %GTK_UNIT_NONE
---@return number # the default right margin
function Gtk.PaperSize:get_default_right_margin(unit) end

--- # method Gtk.PaperSize:get_default_top_margin()
---
--- Gets the default top margin for the `GtkPaperSize`.
---
--- ---
---
---@param self Gtk.PaperSize # a `GtkPaperSize` object
---@param unit Gtk.Unit # the unit for the return value, not %GTK_UNIT_NONE
---@return number # the default top margin
function Gtk.PaperSize:get_default_top_margin(unit) end

--- # method Gtk.PaperSize:get_display_name()
---
--- Gets the human-readable name of the `GtkPaperSize`.
---
--- ---
---
---@param self Gtk.PaperSize # a `GtkPaperSize` object
---@return string # the human-readable name of `size`
function Gtk.PaperSize:get_display_name() end

--- # method Gtk.PaperSize:get_height()
---
--- Gets the paper height of the `GtkPaperSize`, in
--- units of `unit`.
---
--- ---
---
---@param self Gtk.PaperSize # a `GtkPaperSize` object
---@param unit Gtk.Unit # the unit for the return value, not %GTK_UNIT_NONE
---@return number # the paper height
function Gtk.PaperSize:get_height(unit) end

--- # method Gtk.PaperSize:get_name()
---
--- Gets the name of the `GtkPaperSize`.
---
--- ---
---
---@param self Gtk.PaperSize # a `GtkPaperSize` object
---@return string # the name of `size`
function Gtk.PaperSize:get_name() end

--- # method Gtk.PaperSize:get_ppd_name()
---
--- Gets the PPD name of the `GtkPaperSize`, which
--- may be `nil`.
---
--- ---
---
---@param self Gtk.PaperSize # a `GtkPaperSize` object
---@return string # the PPD name of `size`
function Gtk.PaperSize:get_ppd_name() end

--- # method Gtk.PaperSize:get_width()
---
--- Gets the paper width of the `GtkPaperSize`, in
--- units of `unit`.
---
--- ---
---
---@param self Gtk.PaperSize # a `GtkPaperSize` object
---@param unit Gtk.Unit # the unit for the return value, not %GTK_UNIT_NONE
---@return number # the paper width
function Gtk.PaperSize:get_width(unit) end

--- # method Gtk.PaperSize:is_custom()
---
--- Returns `true` if `size` is not a standard paper size.
---
--- ---
---
---@param self Gtk.PaperSize # a `GtkPaperSize` object
---@return (boolean|nil) # whether `size` is a custom paper size.
function Gtk.PaperSize:is_custom() end

--- # method Gtk.PaperSize:is_equal()
---
--- Compares two `GtkPaperSize` objects.
---
--- ---
---
---@param self Gtk.PaperSize # a `GtkPaperSize` object
---@param size2 Gtk.PaperSize # another `GtkPaperSize` object
---@return (boolean|nil) # `true`, if `size1` and `size2` represent the same paper size
function Gtk.PaperSize:is_equal(size2) end

--- # method Gtk.PaperSize:is_ipp()
---
--- Returns `true` if `size` is an IPP standard paper size.
---
--- ---
---
---@param self Gtk.PaperSize # a `GtkPaperSize` object
---@return (boolean|nil) # whether `size` is not an IPP custom paper size.
function Gtk.PaperSize:is_ipp() end

--- # method Gtk.PaperSize:set_size()
---
--- Changes the dimensions of a `size` to `width` x `height`.
---
--- ---
---
---@param self Gtk.PaperSize # a custom `GtkPaperSize` object
---@param width number # the new width in units of `unit`
---@param height number # the new height in units of `unit`
---@param unit Gtk.Unit # the unit for `width` and `height`
---@return nil
function Gtk.PaperSize:set_size(width, height, unit) end

--- # method Gtk.PaperSize:to_gvariant()
---
--- Serialize a paper size to an a{sv} variant.
---
--- ---
---
---@param self Gtk.PaperSize # a `GtkPaperSize`
---@return GLib.Variant # a new, floating, `GVariant`
function Gtk.PaperSize:to_gvariant() end

--- # method Gtk.PaperSize:to_key_file()
---
--- This function adds the paper size from `size` to `key_file`.
---
--- ---
---
---@param self Gtk.PaperSize # a `GtkPaperSize`
---@param key_file GLib.KeyFile # the `GKeyFile` to save the paper size to
---@param group_name string # the group to add the settings to in `key_file`
---@return nil
function Gtk.PaperSize:to_key_file(key_file, group_name) end

--- # function Gtk.PaperSize.get_default()
---
--- Returns the name of the default paper size, which
--- depends on the current locale.
---
--- ---
---
---@return string # the name of the default paper size. The string is owned by GTK+ and should not be modified.
function Gtk.PaperSize.get_default() end

--- # function Gtk.PaperSize.get_paper_sizes()
---
--- Creates a list of known paper sizes.
---
--- ---
---
---@param include_custom (boolean|nil) # whether to include custom paper sizes as defined in the page setup dialog
---@return Gtk.PaperSize[] # a newly allocated list of newly allocated `GtkPaperSize` objects
function Gtk.PaperSize.get_paper_sizes(include_custom) end

--- # function Gtk.PaperSize.new()
---
--- Creates a new `GtkPaperSize` object by parsing a
--- [PWG 5101.1-2002](ftp://ftp.pwg.org/pub/pwg/candidates/cs-pwgmsn10-20020226-5101.1.pdf)
--- paper name.
--- 
--- If `name` is `nil`, the default paper size is returned,
--- see `gtk_paper_size_get_default()`.
---
--- ---
---
---@param name? string # a paper size name, or `nil`
---@return Gtk.PaperSize # a new `GtkPaperSize`, use `gtk_paper_size_free()` to free it
function Gtk.PaperSize.new(name) end

--- # function Gtk.PaperSize.new_custom()
---
--- Creates a new `GtkPaperSize` object with the
--- given parameters.
---
--- ---
---
---@param name string # the paper name
---@param display_name string # the human-readable name
---@param width number # the paper width, in units of `unit`
---@param height number # the paper height, in units of `unit`
---@param unit Gtk.Unit # the unit for `width` and `height`. not %GTK_UNIT_NONE.
---@return Gtk.PaperSize # a new `GtkPaperSize` object, use `gtk_paper_size_free()` to free it
function Gtk.PaperSize.new_custom(name, display_name, width, height, unit) end

--- # function Gtk.PaperSize.new_from_gvariant()
---
--- Deserialize a paper size from an a{sv} variant in
--- the format produced by `gtk_paper_size_to_gvariant()`.
---
--- ---
---
---@param variant GLib.Variant # an a{sv} `GVariant`
---@return Gtk.PaperSize # a new `GtkPaperSize` object
function Gtk.PaperSize.new_from_gvariant(variant) end

--- # function Gtk.PaperSize.new_from_ipp()
---
--- Creates a new `GtkPaperSize` object by using
--- IPP information.
--- 
--- If `ipp_name` is not a recognized paper name,
--- `width` and `height` are used to
--- construct a custom `GtkPaperSize` object.
---
--- ---
---
---@param ipp_name string # an IPP paper name
---@param width number # the paper width, in points
---@param height number # the paper height in points
---@return Gtk.PaperSize # a new `GtkPaperSize`, use `gtk_paper_size_free()` to free it
function Gtk.PaperSize.new_from_ipp(ipp_name, width, height) end

--- # function Gtk.PaperSize.new_from_key_file()
---
--- Reads a paper size from the group `group_name` in the key file
--- `key_file`.
---
--- ---
---
---@param key_file GLib.KeyFile # the `GKeyFile` to retrieve the papersize from
---@param group_name? string # the name of the group in the key file to read, or `nil` to read the first group
---@return Gtk.PaperSize # a new `GtkPaperSize` object with the restored paper size, or `nil` if an error occurred
function Gtk.PaperSize.new_from_key_file(key_file, group_name) end

--- # function Gtk.PaperSize.new_from_ppd()
---
--- Creates a new `GtkPaperSize` object by using
--- PPD information.
--- 
--- If `ppd_name` is not a recognized PPD paper name,
--- `ppd_display_name`, `width` and `height` are used to
--- construct a custom `GtkPaperSize` object.
---
--- ---
---
---@param ppd_name string # a PPD paper name
---@param ppd_display_name string # the corresponding human-readable name
---@param width number # the paper width, in points
---@param height number # the paper height in points
---@return Gtk.PaperSize # a new `GtkPaperSize`, use `gtk_paper_size_free()` to free it
function Gtk.PaperSize.new_from_ppd(ppd_name, ppd_display_name, width, height) end

---@enum Gtk.PathPriorityType
Gtk.PathPriorityType = {}

---@enum Gtk.PathType
Gtk.PathType = {}

---@enum Gtk.PlacesOpenFlags
Gtk.PlacesOpenFlags = {}

--- # class Gtk.PlacesSidebar
---
--- `GtkPlacesSidebar` is a widget that displays a list of frequently-used places in the
--- file system:  the user’s home directory, the user’s bookmarks, and volumes and drives.
--- This widget is used as a sidebar in `GtkFileChooser` and may be used by file managers
--- and similar programs.
--- 
--- The places sidebar displays drives and volumes, and will automatically mount
--- or unmount them when the user selects them.
--- 
--- Applications can hook to various signals in the places sidebar to customize
--- its behavior.  For example, they can add extra commands to the context menu
--- of the sidebar.
--- 
--- While bookmarks are completely in control of the user, the places sidebar also
--- allows individual applications to provide extra shortcut folders that are unique
--- to each application.  For example, a Paint program may want to add a shortcut
--- for a Clipart folder.  You can do this with `gtk_places_sidebar_add_shortcut()`.
--- 
--- To make use of the places sidebar, an application at least needs to connect
--- to the `GtkPlacesSidebar`::open-location signal.  This is emitted when the
--- user selects in the sidebar a location to open.  The application should also
--- call `gtk_places_sidebar_set_location()` when it changes the currently-viewed
--- location.
--- 
--- # CSS nodes
--- 
--- GtkPlacesSidebar uses a single CSS node with name placessidebar and style
--- class .sidebar.
--- 
--- Among the children of the places sidebar, the following style classes can
--- be used:
--- - .sidebar-new-bookmark-row for the 'Add new bookmark' row
--- - .sidebar-placeholder-row for a row that is a placeholder
--- - .has-open-popup when a popup is open for a row
---
--- ---
---
---@class Gtk.PlacesSidebar : Gtk.ScrolledWindow, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@operator call: Gtk.PlacesSidebar
Gtk.PlacesSidebar = {}

--- # method Gtk.PlacesSidebar:add_shortcut()
---
--- Applications may want to present some folders in the places sidebar if
--- they could be immediately useful to users.  For example, a drawing
--- program could add a “/usr/share/clipart” location when the sidebar is
--- being used in an “Insert Clipart” dialog box.
--- 
--- This function adds the specified `location` to a special place for immutable
--- shortcuts.  The shortcuts are application-specific; they are not shared
--- across applications, and they are not persistent.  If this function
--- is called multiple times with different locations, then they are added
--- to the sidebar’s list in the same order as the function is called.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@param location Gio.File # location to add as an application-specific shortcut
---@return nil
function Gtk.PlacesSidebar:add_shortcut(location) end

--- # method Gtk.PlacesSidebar:get_local_only()
---
--- Returns the value previously set with `gtk_places_sidebar_set_local_only()`.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@return (boolean|nil) # `true` if the sidebar will only show local files.
function Gtk.PlacesSidebar:get_local_only() end

--- # method Gtk.PlacesSidebar:get_location()
---
--- Gets the currently selected location in the `sidebar`. This can be `nil` when
--- nothing is selected, for example, when `gtk_places_sidebar_set_location()` has
--- been called with a location that is not among the sidebar’s list of places to
--- show.
--- 
--- You can use this function to get the selection in the `sidebar`.  Also, if you
--- connect to the `GtkPlacesSidebar`::populate-popup signal, you can use this
--- function to get the location that is being referred to during the callbacks
--- for your menu items.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@return Gio.File # a `GFile` with the selected location, or `nil` if nothing is visually selected.
function Gtk.PlacesSidebar:get_location() end

--- # method Gtk.PlacesSidebar:get_nth_bookmark()
---
--- This function queries the bookmarks added by the user to the places sidebar,
--- and returns one of them.  This function is used by `GtkFileChooser` to implement
--- the “Alt-1”, “Alt-2”, etc. shortcuts, which activate the cooresponding bookmark.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@param n integer # index of the bookmark to query
---@return Gio.File # The bookmark specified by the index `n`, or `nil` if no such index exist. Note that the indices start at 0, even though the file chooser starts them with the keyboard shortcut "Alt-1".
function Gtk.PlacesSidebar:get_nth_bookmark(n) end

--- # method Gtk.PlacesSidebar:get_open_flags()
---
--- Gets the open flags.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a `GtkPlacesSidebar`
---@return Gtk.PlacesOpenFlags # the `GtkPlacesOpenFlags` of `sidebar`
function Gtk.PlacesSidebar:get_open_flags() end

--- # method Gtk.PlacesSidebar:get_show_connect_to_server()
---
--- Returns the value previously set with `gtk_places_sidebar_set_show_connect_to_server()`
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@return (boolean|nil) # `true` if the sidebar will display a “Connect to Server” item.
function Gtk.PlacesSidebar:get_show_connect_to_server() end

--- # method Gtk.PlacesSidebar:get_show_desktop()
---
--- Returns the value previously set with `gtk_places_sidebar_set_show_desktop()`
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@return (boolean|nil) # `true` if the sidebar will display a builtin shortcut to the desktop folder.
function Gtk.PlacesSidebar:get_show_desktop() end

--- # method Gtk.PlacesSidebar:get_show_enter_location()
---
--- Returns the value previously set with `gtk_places_sidebar_set_show_enter_location()`
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@return (boolean|nil) # `true` if the sidebar will display an “Enter Location” item.
function Gtk.PlacesSidebar:get_show_enter_location() end

--- # method Gtk.PlacesSidebar:get_show_other_locations()
---
--- Returns the value previously set with `gtk_places_sidebar_set_show_other_locations()`
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@return (boolean|nil) # `true` if the sidebar will display an “Other Locations” item.
function Gtk.PlacesSidebar:get_show_other_locations() end

--- # method Gtk.PlacesSidebar:get_show_recent()
---
--- Returns the value previously set with `gtk_places_sidebar_set_show_recent()`
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@return (boolean|nil) # `true` if the sidebar will display a builtin shortcut for recent files
function Gtk.PlacesSidebar:get_show_recent() end

--- # method Gtk.PlacesSidebar:get_show_starred_location()
---
--- Returns the value previously set with `gtk_places_sidebar_set_show_starred_location()`
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@return (boolean|nil) # `true` if the sidebar will display a Starred item.
function Gtk.PlacesSidebar:get_show_starred_location() end

--- # method Gtk.PlacesSidebar:get_show_trash()
---
--- Returns the value previously set with `gtk_places_sidebar_set_show_trash()`
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@return (boolean|nil) # `true` if the sidebar will display a “Trash” item.
function Gtk.PlacesSidebar:get_show_trash() end

--- # method Gtk.PlacesSidebar:list_shortcuts()
---
--- Gets the list of shortcuts.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@return Gio.File[] # A `GSList` of `GFile` of the locations that have been added as application-specific shortcuts with `gtk_places_sidebar_add_shortcut()`. To free this list, you can use |[<!-- language="C" --> g_slist_free_full (list, (GDestroyNotify) g_object_unref); ]|
function Gtk.PlacesSidebar:list_shortcuts() end

--- # method Gtk.PlacesSidebar:remove_shortcut()
---
--- Removes an application-specific shortcut that has been previously been
--- inserted with `gtk_places_sidebar_add_shortcut()`.  If the `location` is not a
--- shortcut in the sidebar, then nothing is done.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@param location Gio.File # location to remove
---@return nil
function Gtk.PlacesSidebar:remove_shortcut(location) end

--- # method Gtk.PlacesSidebar:set_drop_targets_visible()
---
--- Make the GtkPlacesSidebar show drop targets, so it can show the available
--- drop targets and a "new bookmark" row. This improves the Drag-and-Drop
--- experience of the user and allows applications to show all available
--- drop targets at once.
--- 
--- This needs to be called when the application is aware of an ongoing drag
--- that might target the sidebar. The drop-targets-visible state will be unset
--- automatically if the drag finishes in the GtkPlacesSidebar. You only need
--- to unset the state when the drag ends on some other widget on your application.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar.
---@param visible (boolean|nil) # whether to show the valid targets or not.
---@param context Gdk.DragContext # drag context used to ask the source about the action that wants to perform, so hints are more accurate.
---@return nil
function Gtk.PlacesSidebar:set_drop_targets_visible(visible, context) end

--- # method Gtk.PlacesSidebar:set_local_only()
---
--- Sets whether the `sidebar` should only show local files.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@param local_only (boolean|nil) # whether to show only local files
---@return nil
function Gtk.PlacesSidebar:set_local_only(local_only) end

--- # method Gtk.PlacesSidebar:set_location()
---
--- Sets the location that is being shown in the widgets surrounding the
--- `sidebar`, for example, in a folder view in a file manager.  In turn, the
--- `sidebar` will highlight that location if it is being shown in the list of
--- places, or it will unhighlight everything if the `location` is not among the
--- places in the list.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@param location? Gio.File # location to select, or `nil` for no current path
---@return nil
function Gtk.PlacesSidebar:set_location(location) end

--- # method Gtk.PlacesSidebar:set_open_flags()
---
--- Sets the way in which the calling application can open new locations from
--- the places sidebar.  For example, some applications only open locations
--- “directly” into their main view, while others may support opening locations
--- in a new notebook tab or a new window.
--- 
--- This function is used to tell the places `sidebar` about the ways in which the
--- application can open new locations, so that the sidebar can display (or not)
--- the “Open in new tab” and “Open in new window” menu items as appropriate.
--- 
--- When the `GtkPlacesSidebar`::open-location signal is emitted, its flags
--- argument will be set to one of the `flags` that was passed in
--- `gtk_places_sidebar_set_open_flags()`.
--- 
--- Passing 0 for `flags` will cause `GTK_PLACES_OPEN_NORMAL` to always be sent
--- to callbacks for the “open-location” signal.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@param flags Gtk.PlacesOpenFlags # Bitmask of modes in which the calling application can open locations
---@return nil
function Gtk.PlacesSidebar:set_open_flags(flags) end

--- # method Gtk.PlacesSidebar:set_show_connect_to_server()
---
--- Sets whether the `sidebar` should show an item for connecting to a network server;
--- this is off by default. An application may want to turn this on if it implements
--- a way for the user to connect to network servers directly.
--- 
--- If you enable this, you should connect to the
--- `GtkPlacesSidebar`::show-connect-to-server signal.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@param show_connect_to_server (boolean|nil) # whether to show an item for the Connect to Server command
---@return nil
function Gtk.PlacesSidebar:set_show_connect_to_server(show_connect_to_server) end

--- # method Gtk.PlacesSidebar:set_show_desktop()
---
--- Sets whether the `sidebar` should show an item for the Desktop folder.
--- The default value for this option is determined by the desktop
--- environment and the user’s configuration, but this function can be
--- used to override it on a per-application basis.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@param show_desktop (boolean|nil) # whether to show an item for the Desktop folder
---@return nil
function Gtk.PlacesSidebar:set_show_desktop(show_desktop) end

--- # method Gtk.PlacesSidebar:set_show_enter_location()
---
--- Sets whether the `sidebar` should show an item for entering a location;
--- this is off by default. An application may want to turn this on if manually
--- entering URLs is an expected user action.
--- 
--- If you enable this, you should connect to the
--- `GtkPlacesSidebar`::show-enter-location signal.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@param show_enter_location (boolean|nil) # whether to show an item to enter a location
---@return nil
function Gtk.PlacesSidebar:set_show_enter_location(show_enter_location) end

--- # method Gtk.PlacesSidebar:set_show_other_locations()
---
--- Sets whether the `sidebar` should show an item for the application to show
--- an Other Locations view; this is off by default. When set to `true`, persistent
--- devices such as hard drives are hidden, otherwise they are shown in the sidebar.
--- An application may want to turn this on if it implements a way for the user to
--- see and interact with drives and network servers directly.
--- 
--- If you enable this, you should connect to the
--- `GtkPlacesSidebar`::show-other-locations signal.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@param show_other_locations (boolean|nil) # whether to show an item for the Other Locations view
---@return nil
function Gtk.PlacesSidebar:set_show_other_locations(show_other_locations) end

--- # method Gtk.PlacesSidebar:set_show_recent()
---
--- Sets whether the `sidebar` should show an item for recent files.
--- The default value for this option is determined by the desktop
--- environment, but this function can be used to override it on a
--- per-application basis.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@param show_recent (boolean|nil) # whether to show an item for recent files
---@return nil
function Gtk.PlacesSidebar:set_show_recent(show_recent) end

--- # method Gtk.PlacesSidebar:set_show_starred_location()
---
--- If you enable this, you should connect to the
--- `GtkPlacesSidebar`::show-starred-location signal.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@param show_starred_location (boolean|nil) # whether to show an item for Starred files
---@return nil
function Gtk.PlacesSidebar:set_show_starred_location(show_starred_location) end

--- # method Gtk.PlacesSidebar:set_show_trash()
---
--- Sets whether the `sidebar` should show an item for the Trash location.
---
--- ---
---
---@param self Gtk.PlacesSidebar # a places sidebar
---@param show_trash (boolean|nil) # whether to show an item for the Trash location
---@return nil
function Gtk.PlacesSidebar:set_show_trash(show_trash) end

--- # function Gtk.PlacesSidebar.new()
---
--- Creates a new `GtkPlacesSidebar` widget.
--- 
--- The application should connect to at least the
--- `GtkPlacesSidebar`::open-location signal to be notified
--- when the user makes a selection in the sidebar.
---
--- ---
---
---@return Gtk.Widget # a newly created `GtkPlacesSidebar`
function Gtk.PlacesSidebar.new() end

--- # record Gtk.PlacesSidebarClass
---
---@class Gtk.PlacesSidebarClass
Gtk.PlacesSidebarClass = {}

--- # class Gtk.Plug
---
--- Together with `GtkSocket`, `GtkPlug` provides the ability to embed
--- widgets from one process into another process in a fashion that is
--- transparent to the user. One process creates a `GtkSocket` widget
--- and passes the ID of that widget’s window to the other process,
--- which then creates a `GtkPlug` with that window ID. Any widgets
--- contained in the `GtkPlug` then will appear inside the first
--- application’s window.
--- 
--- The communication between a `GtkSocket` and a `GtkPlug` follows the
--- [XEmbed Protocol](http://www.freedesktop.org/Standards/xembed-spec).
--- This protocol has also been implemented in other toolkits, e.g. Qt,
--- allowing the same level of integration when embedding a Qt widget
--- in GTK+ or vice versa.
--- 
--- The `GtkPlug` and `GtkSocket` widgets are only available when GTK+
--- is compiled for the X11 platform and %GDK_WINDOWING_X11 is defined.
--- They can only be used on a `GdkX11Display`. To use `GtkPlug` and
--- `GtkSocket`, you need to include the `gtk/gtkx.h` header.
---
--- ---
---
---@class Gtk.Plug : Gtk.Window, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field window Gtk.Window
---@field priv Gtk.PlugPrivate
---@operator call: Gtk.Plug
Gtk.Plug = {}

--- # method Gtk.Plug:construct()
---
--- Finish the initialization of `plug` for a given `GtkSocket` identified by
--- `socket_id`. This function will generally only be used by classes deriving from `GtkPlug`.
---
--- ---
---
---@param self Gtk.Plug # a `GtkPlug`.
---@param socket_id xlib.Window # the XID of the socket’s window.
---@return nil
function Gtk.Plug:construct(socket_id) end

--- # method Gtk.Plug:construct_for_display()
---
--- Finish the initialization of `plug` for a given `GtkSocket` identified by
--- `socket_id` which is currently displayed on `display`.
--- This function will generally only be used by classes deriving from `GtkPlug`.
---
--- ---
---
---@param self Gtk.Plug # a `GtkPlug`.
---@param display Gdk.Display # the `GdkDisplay` associated with `socket_id`’s `GtkSocket`.
---@param socket_id xlib.Window # the XID of the socket’s window.
---@return nil
function Gtk.Plug:construct_for_display(display, socket_id) end

--- # method Gtk.Plug:get_embedded()
---
--- Determines whether the plug is embedded in a socket.
---
--- ---
---
---@param self Gtk.Plug # a `GtkPlug`
---@return (boolean|nil) # `true` if the plug is embedded in a socket
function Gtk.Plug:get_embedded() end

--- # method Gtk.Plug:get_id()
---
--- Gets the window ID of a `GtkPlug` widget, which can then
--- be used to embed this window inside another window, for
--- instance with `gtk_socket_add_id()`.
---
--- ---
---
---@param self Gtk.Plug # a `GtkPlug`.
---@return xlib.Window # the window ID for the plug
function Gtk.Plug:get_id() end

--- # method Gtk.Plug:get_socket_window()
---
--- Retrieves the socket the plug is embedded in.
---
--- ---
---
---@param self Gtk.Plug # a `GtkPlug`
---@return Gdk.Window # the window of the socket, or `nil`
function Gtk.Plug:get_socket_window() end

--- # function Gtk.Plug.new()
---
--- Creates a new plug widget inside the `GtkSocket` identified
--- by `socket_id`. If `socket_id` is 0, the plug is left “unplugged” and
--- can later be plugged into a `GtkSocket` by  `gtk_socket_add_id()`.
---
--- ---
---
---@param socket_id xlib.Window # the window ID of the socket, or 0.
---@return Gtk.Widget # the new `GtkPlug` widget.
function Gtk.Plug.new(socket_id) end

--- # function Gtk.Plug.new_for_display()
---
--- Create a new plug widget inside the `GtkSocket` identified by socket_id.
---
--- ---
---
---@param display Gdk.Display # the `GdkDisplay` on which `socket_id` is displayed
---@param socket_id xlib.Window # the XID of the socket’s window.
---@return Gtk.Widget # the new `GtkPlug` widget.
function Gtk.Plug.new_for_display(display, socket_id) end

--- # class Gtk.PlugAccessible
---
---@class Gtk.PlugAccessible : Gtk.WindowAccessible, Gtk.Atk.Component, Gtk.Atk.Window
---@field parent Gtk.WindowAccessible
---@field priv Gtk.PlugAccessiblePrivate
Gtk.PlugAccessible = {}

--- # method Gtk.PlugAccessible:get_id()
---
---@param self Gtk.PlugAccessible
---@return string
function Gtk.PlugAccessible:get_id() end

--- # record Gtk.PlugAccessibleClass
---
---@class Gtk.PlugAccessibleClass
---@field parent_class Gtk.WindowAccessibleClass
Gtk.PlugAccessibleClass = {}

--- # record Gtk.PlugAccessiblePrivate
---
---@class Gtk.PlugAccessiblePrivate
Gtk.PlugAccessiblePrivate = {}

--- # record Gtk.PlugClass
---
---@class Gtk.PlugClass
---@field parent_class Gtk.WindowClass
---@field embedded fun(plug: Gtk.Plug): nil
Gtk.PlugClass = {}

--- # record Gtk.PlugPrivate
---
---@class Gtk.PlugPrivate
Gtk.PlugPrivate = {}

---@enum Gtk.PolicyType
Gtk.PolicyType = {}

--- # class Gtk.Popover
---
--- GtkPopover is a bubble-like context window, primarily meant to
--- provide context-dependent information or options. Popovers are
--- attached to a widget, passed at construction time on `gtk_popover_new()`,
--- or updated afterwards through `gtk_popover_set_relative_to()`, by
--- default they will point to the whole widget area, although this
--- behavior can be changed through `gtk_popover_set_pointing_to()`.
--- 
--- The position of a popover relative to the widget it is attached to
--- can also be changed through `gtk_popover_set_position()`.
--- 
--- By default, `GtkPopover` performs a GTK+ grab, in order to ensure
--- input events get redirected to it while it is shown, and also so
--- the popover is dismissed in the expected situations (clicks outside
--- the popover, or the Esc key being pressed). If no such modal behavior
--- is desired on a popover, `gtk_popover_set_modal()` may be called on it
--- to tweak its behavior.
--- 
--- ## GtkPopover as menu replacement
--- 
--- GtkPopover is often used to replace menus. To facilitate this, it
--- supports being populated from a `GMenuModel`, using
--- `gtk_popover_new_from_model()`. In addition to all the regular menu
--- model features, this function supports rendering sections in the
--- model in a more compact form, as a row of icon buttons instead of
--- menu items.
--- 
--- To use this rendering, set the ”display-hint” attribute of the
--- section to ”horizontal-buttons” and set the icons of your items
--- with the ”verb-icon” attribute.
--- 
--- ```c
--- <section>
---   <attribute name="display-hint">horizontal-buttons</attribute>
---   <item>
---     <attribute name="label">Cut</attribute>
---     <attribute name="action">app.cut</attribute>
---     <attribute name="verb-icon">edit-cut-symbolic</attribute>
---   </item>
---   <item>
---     <attribute name="label">Copy</attribute>
---     <attribute name="action">app.copy</attribute>
---     <attribute name="verb-icon">edit-copy-symbolic</attribute>
---   </item>
---   <item>
---     <attribute name="label">Paste</attribute>
---     <attribute name="action">app.paste</attribute>
---     <attribute name="verb-icon">edit-paste-symbolic</attribute>
---   </item>
--- </section>
--- ```
--- 
--- # CSS nodes
--- 
--- GtkPopover has a single css node called popover. It always gets the
--- .background style class and it gets the .menu style class if it is
--- menu-like (e.g. `GtkPopoverMenu` or created using `gtk_popover_new_from_model()`.
--- 
--- Particular uses of GtkPopover, such as touch selection popups
--- or magnifiers in `GtkEntry` or `GtkTextView` get style classes
--- like .touch-selection or .magnifier to differentiate from
--- plain popovers.
---
--- ---
---
---@class Gtk.Popover : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent_instance Gtk.Bin
---@field priv Gtk.PopoverPrivate
---@operator call: Gtk.Popover
Gtk.Popover = {}

--- # method Gtk.Popover:bind_model()
---
--- Establishes a binding between a `GtkPopover` and a `GMenuModel`.
--- 
--- The contents of `popover` are removed and then refilled with menu items
--- according to `model`.  When `model` changes, `popover` is updated.
--- Calling this function twice on `popover` with different `model` will
--- cause the first binding to be replaced with a binding to the new
--- model. If `model` is `nil` then any previous binding is undone and
--- all children are removed.
--- 
--- If `action_namespace` is non-`nil` then the effect is as if all
--- actions mentioned in the `model` have their names prefixed with the
--- namespace, plus a dot.  For example, if the action “quit” is
--- mentioned and `action_namespace` is “app” then the effective action
--- name is “app.quit”.
--- 
--- This function uses `GtkActionable` to define the action name and
--- target values on the created menu items.  If you want to use an
--- action group other than “app” and “win”, or if you want to use a
--- `GtkMenuShell` outside of a `GtkApplicationWindow`, then you will need
--- to attach your own action group to the widget hierarchy using
--- `gtk_widget_insert_action_group()`.  As an example, if you created a
--- group with a “quit” action and inserted it with the name “mygroup”
--- then you would use the action name “mygroup.quit” in your
--- `GMenuModel`.
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@param model? Gio.MenuModel # the `GMenuModel` to bind to or `nil` to remove binding
---@param action_namespace? string # the namespace for actions in `model`
---@return nil
function Gtk.Popover:bind_model(model, action_namespace) end

--- # method Gtk.Popover:get_constrain_to()
---
--- Returns the constraint for placing this popover.
--- See `gtk_popover_set_constrain_to()`.
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@return Gtk.PopoverConstraint # the constraint for placing this popover.
function Gtk.Popover:get_constrain_to() end

--- # method Gtk.Popover:get_default_widget()
---
--- Gets the widget that should be set as the default while
--- the popover is shown.
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@return Gtk.Widget # the default widget, or `nil` if there is none
function Gtk.Popover:get_default_widget() end

--- # method Gtk.Popover:get_modal()
---
--- Returns whether the popover is modal, see gtk_popover_set_modal to
--- see the implications of this.
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@return (boolean|nil) # `TRUE` if `popover` is modal
function Gtk.Popover:get_modal() end

--- # method Gtk.Popover:get_pointing_to()
---
--- If a rectangle to point to has been set, this function will
--- return `true` and fill in `rect` with such rectangle, otherwise
--- it will return `false` and fill in `rect` with the attached
--- widget coordinates.
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@param rect Gdk.Rectangle # location to store the rectangle
---@return (boolean|nil) # `true` if a rectangle to point to was set.
function Gtk.Popover:get_pointing_to(rect) end

--- # method Gtk.Popover:get_position()
---
--- Returns the preferred position of `popover`.
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@return Gtk.PositionType # The preferred position.
function Gtk.Popover:get_position() end

--- # method Gtk.Popover:get_relative_to()
---
--- Returns the widget `popover` is currently attached to
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@return Gtk.Widget # a `GtkWidget`
function Gtk.Popover:get_relative_to() end

--- # method Gtk.Popover:get_transitions_enabled()
---
--- Returns whether show/hide transitions are enabled on this popover.
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@return (boolean|nil) # `TRUE` if the show and hide transitions of the given popover are enabled, `FALSE` otherwise.
function Gtk.Popover:get_transitions_enabled() end

--- # method Gtk.Popover:popdown()
---
--- Pops `popover` down.This is different than a `gtk_widget_hide()` call
--- in that it shows the popover with a transition. If you want to hide
--- the popover without a transition, use `gtk_widget_hide()`.
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@return nil
function Gtk.Popover:popdown() end

--- # method Gtk.Popover:popup()
---
--- Pops `popover` up. This is different than a `gtk_widget_show()` call
--- in that it shows the popover with a transition. If you want to show
--- the popover without a transition, use `gtk_widget_show()`.
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@return nil
function Gtk.Popover:popup() end

--- # method Gtk.Popover:set_constrain_to()
---
--- Sets a constraint for positioning this popover.
--- 
--- Note that not all platforms support placing popovers freely,
--- and may already impose constraints.
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@param constraint Gtk.PopoverConstraint # the new constraint
---@return nil
function Gtk.Popover:set_constrain_to(constraint) end

--- # method Gtk.Popover:set_default_widget()
---
--- Sets the widget that should be set as default widget while
--- the popover is shown (see `gtk_window_set_default()`). `GtkPopover`
--- remembers the previous default widget and reestablishes it
--- when the popover is dismissed.
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@param widget? Gtk.Widget # the new default widget, or `nil`
---@return nil
function Gtk.Popover:set_default_widget(widget) end

--- # method Gtk.Popover:set_modal()
---
--- Sets whether `popover` is modal, a modal popover will grab all input
--- within the toplevel and grab the keyboard focus on it when being
--- displayed. Clicking outside the popover area or pressing Esc will
--- dismiss the popover and ungrab input.
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@param modal (boolean|nil) # `TRUE` to make popover claim all input within the toplevel
---@return nil
function Gtk.Popover:set_modal(modal) end

--- # method Gtk.Popover:set_pointing_to()
---
--- Sets the rectangle that `popover` will point to, in the
--- coordinate space of the widget `popover` is attached to,
--- see `gtk_popover_set_relative_to()`.
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@param rect Gdk.Rectangle # rectangle to point to
---@return nil
function Gtk.Popover:set_pointing_to(rect) end

--- # method Gtk.Popover:set_position()
---
--- Sets the preferred position for `popover` to appear. If the `popover`
--- is currently visible, it will be immediately updated.
--- 
--- This preference will be respected where possible, although
--- on lack of space (eg. if close to the window edges), the
--- `GtkPopover` may choose to appear on the opposite side
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@param position Gtk.PositionType # preferred popover position
---@return nil
function Gtk.Popover:set_position(position) end

--- # method Gtk.Popover:set_relative_to()
---
--- Sets a new widget to be attached to `popover`. If `popover` is
--- visible, the position will be updated.
--- 
--- Note: the ownership of popovers is always given to their `relative_to`
--- widget, so if `relative_to` is set to `nil` on an attached `popover`, it
--- will be detached from its previous widget, and consequently destroyed
--- unless extra references are kept.
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@param relative_to? Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Popover:set_relative_to(relative_to) end

--- # method Gtk.Popover:set_transitions_enabled()
---
--- Sets whether show/hide transitions are enabled on this popover
---
--- ---
---
---@param self Gtk.Popover # a `GtkPopover`
---@param transitions_enabled (boolean|nil) # Whether transitions are enabled
---@return nil
function Gtk.Popover:set_transitions_enabled(transitions_enabled) end

--- # function Gtk.Popover.new()
---
--- Creates a new popover to point to `relative_to`
---
--- ---
---
---@param relative_to? Gtk.Widget # `GtkWidget` the popover is related to
---@return Gtk.Widget # a new `GtkPopover`
function Gtk.Popover.new(relative_to) end

--- # function Gtk.Popover.new_from_model()
---
--- Creates a `GtkPopover` and populates it according to
--- `model`. The popover is pointed to the `relative_to` widget.
--- 
--- The created buttons are connected to actions found in the
--- `GtkApplicationWindow` to which the popover belongs - typically
--- by means of being attached to a widget that is contained within
--- the `GtkApplicationWindows` widget hierarchy.
--- 
--- Actions can also be added using `gtk_widget_insert_action_group()`
--- on the menus attach widget or on any of its parent widgets.
---
--- ---
---
---@param relative_to? Gtk.Widget # `GtkWidget` the popover is related to
---@param model Gio.MenuModel # a `GMenuModel`
---@return Gtk.Widget # the new `GtkPopover`
function Gtk.Popover.new_from_model(relative_to, model) end

--- # class Gtk.PopoverAccessible
---
---@class Gtk.PopoverAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component
---@field parent Gtk.ContainerAccessible
Gtk.PopoverAccessible = {}

--- # record Gtk.PopoverAccessibleClass
---
---@class Gtk.PopoverAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.PopoverAccessibleClass = {}

--- # record Gtk.PopoverClass
---
---@class Gtk.PopoverClass
---@field parent_class Gtk.BinClass
---@field closed fun(popover: Gtk.Popover): nil
---@field reserved unknown[]
Gtk.PopoverClass = {}

---@enum Gtk.PopoverConstraint
Gtk.PopoverConstraint = {}

--- # class Gtk.PopoverMenu
---
--- GtkPopoverMenu is a subclass of `GtkPopover` that treats its
--- children like menus and allows switching between them. It is
--- meant to be used primarily together with `GtkModelButton`, but
--- any widget can be used, such as `GtkSpinButton` or `GtkScale`.
--- In this respect, GtkPopoverMenu is more flexible than popovers
--- that are created from a `GMenuModel` with `gtk_popover_new_from_model()`.
--- 
--- To add a child as a submenu, set the `GtkPopoverMenu`:submenu
--- child property to the name of the submenu. To let the user open
--- this submenu, add a `GtkModelButton` whose `GtkModelButton`:menu-name
--- property is set to the name you've given to the submenu.
--- 
--- By convention, the first child of a submenu should be a `GtkModelButton`
--- to switch back to the parent menu. Such a button should use the
--- `GtkModelButton`:inverted and `GtkModelButton`:centered properties
--- to achieve a title-like appearance and place the submenu indicator
--- at the opposite side. To switch back to the main menu, use "main"
--- as the menu name.
--- 
--- # Example
--- 
--- ```xml
--- <object class="GtkPopoverMenu">
---   <child>
---     <object class="GtkBox">
---       <property name="visible">True</property>
---       <property name="margin">10</property>
---       <child>
---         <object class="GtkModelButton">
---           <property name="visible">True</property>
---           <property name="action-name">win.frob</property>
---           <property name="text" translatable="yes">Frob</property>
---         </object>
---       </child>
---       <child>
---         <object class="GtkModelButton">
---           <property name="visible">True</property>
---           <property name="menu-name">more</property>
---           <property name="text" translatable="yes">More</property>
---         </object>
---       </child>
---     </object>
---   </child>
---   <child>
---     <object class="GtkBox">
---       <property name="visible">True</property>
---       <property name="margin">10</property>
---       <child>
---         <object class="GtkModelButton">
---           <property name="visible">True</property>
---           <property name="action-name">win.foo</property>
---           <property name="text" translatable="yes">Foo</property>
---         </object>
---       </child>
---       <child>
---         <object class="GtkModelButton">
---           <property name="visible">True</property>
---           <property name="action-name">win.bar</property>
---           <property name="text" translatable="yes">Bar</property>
---         </object>
---       </child>
---     </object>
---     <packing>
---       <property name="submenu">more</property>
---     </packing>
---   </child>
--- </object>
--- ```
--- 
--- Just like normal popovers created using gtk_popover_new_from_model,
--- `GtkPopoverMenu` instances have a single css node called "popover"
--- and get the .menu style class.
---
--- ---
---
---@class Gtk.PopoverMenu : Gtk.Popover, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@operator call: Gtk.PopoverMenu
Gtk.PopoverMenu = {}

--- # method Gtk.PopoverMenu:open_submenu()
---
--- Opens a submenu of the `popover`. The `name`
--- must be one of the names given to the submenus
--- of `popover` with `GtkPopoverMenu`:submenu, or
--- "main" to switch back to the main menu.
--- 
--- `GtkModelButton` will open submenus automatically
--- when the `GtkModelButton`:menu-name property is set,
--- so this function is only needed when you are using
--- other kinds of widgets to initiate menu changes.
---
--- ---
---
---@param self Gtk.PopoverMenu # a `GtkPopoverMenu`
---@param name string # the name of the menu to switch to
---@return nil
function Gtk.PopoverMenu:open_submenu(name) end

--- # function Gtk.PopoverMenu.new()
---
--- Creates a new popover menu.
---
--- ---
---
---@return Gtk.Widget # a new `GtkPopoverMenu`
function Gtk.PopoverMenu.new() end

--- # record Gtk.PopoverMenuClass
---
---@class Gtk.PopoverMenuClass
---@field parent_class Gtk.PopoverClass
---@field reserved unknown[]
Gtk.PopoverMenuClass = {}

--- # record Gtk.PopoverPrivate
---
---@class Gtk.PopoverPrivate
Gtk.PopoverPrivate = {}

---@enum Gtk.PositionType
Gtk.PositionType = {}

--- # class Gtk.PrintContext
---
--- A GtkPrintContext encapsulates context information that is required when
--- drawing pages for printing, such as the cairo context and important
--- parameters like page size and resolution. It also lets you easily
--- create `PangoLayout` and `PangoContext` objects that match the font metrics
--- of the cairo surface.
--- 
--- GtkPrintContext objects gets passed to the `GtkPrintOperation`::begin-print,
--- `GtkPrintOperation`::end-print, `GtkPrintOperation`::request-page-setup and
--- `GtkPrintOperation`::draw-page signals on the `GtkPrintOperation`.
--- 
--- ## Using GtkPrintContext in a `GtkPrintOperation`::draw-page callback
--- 
--- ```c
--- static void
--- draw_page (GtkPrintOperation *operation,
--- 	   GtkPrintContext   *context,
--- 	   int                page_nr)
--- {
---   cairo_t *cr;
---   PangoLayout *layout;
---   PangoFontDescription *desc;
--- 
---   cr = gtk_print_context_get_cairo_context (context);
--- 
---   // Draw a red rectangle, as wide as the paper (inside the margins)
---   cairo_set_source_rgb (cr, 1.0, 0, 0);
---   cairo_rectangle (cr, 0, 0, gtk_print_context_get_width (context), 50);
--- 
---   cairo_fill (cr);
--- 
---   // Draw some lines
---   cairo_move_to (cr, 20, 10);
---   cairo_line_to (cr, 40, 20);
---   cairo_arc (cr, 60, 60, 20, 0, M_PI);
---   cairo_line_to (cr, 80, 20);
--- 
---   cairo_set_source_rgb (cr, 0, 0, 0);
---   cairo_set_line_width (cr, 5);
---   cairo_set_line_cap (cr, CAIRO_LINE_CAP_ROUND);
---   cairo_set_line_join (cr, CAIRO_LINE_JOIN_ROUND);
--- 
---   cairo_stroke (cr);
--- 
---   // Draw some text
---   layout = gtk_print_context_create_pango_layout (context);
---   pango_layout_set_text (layout, "Hello World! Printing is easy", -1);
---   desc = pango_font_description_from_string ("sans 28");
---   pango_layout_set_font_description (layout, desc);
---   pango_font_description_free (desc);
--- 
---   cairo_move_to (cr, 30, 20);
---   pango_cairo_layout_path (cr, layout);
--- 
---   // Font Outline
---   cairo_set_source_rgb (cr, 0.93, 1.0, 0.47);
---   cairo_set_line_width (cr, 0.5);
---   cairo_stroke_preserve (cr);
--- 
---   // Font Fill
---   cairo_set_source_rgb (cr, 0, 0.0, 1.0);
---   cairo_fill (cr);
--- 
---   g_object_unref (layout);
--- }
--- ```
--- 
--- Printing support was added in GTK+ 2.10.
---
--- ---
---
---@class Gtk.PrintContext : GObject.Object
Gtk.PrintContext = {}

--- # method Gtk.PrintContext:create_pango_context()
---
--- Creates a new `PangoContext` that can be used with the
--- `GtkPrintContext`.
---
--- ---
---
---@param self Gtk.PrintContext # a `GtkPrintContext`
---@return Pango.Context # a new Pango context for `context`
function Gtk.PrintContext:create_pango_context() end

--- # method Gtk.PrintContext:create_pango_layout()
---
--- Creates a new `PangoLayout` that is suitable for use
--- with the `GtkPrintContext`.
---
--- ---
---
---@param self Gtk.PrintContext # a `GtkPrintContext`
---@return Pango.Layout # a new Pango layout for `context`
function Gtk.PrintContext:create_pango_layout() end

--- # method Gtk.PrintContext:get_cairo_context()
---
--- Obtains the cairo context that is associated with the
--- `GtkPrintContext`.
---
--- ---
---
---@param self Gtk.PrintContext # a `GtkPrintContext`
---@return cairo.Context # the cairo context of `context`
function Gtk.PrintContext:get_cairo_context() end

--- # method Gtk.PrintContext:get_dpi_x()
---
--- Obtains the horizontal resolution of the `GtkPrintContext`,
--- in dots per inch.
---
--- ---
---
---@param self Gtk.PrintContext # a `GtkPrintContext`
---@return number # the horizontal resolution of `context`
function Gtk.PrintContext:get_dpi_x() end

--- # method Gtk.PrintContext:get_dpi_y()
---
--- Obtains the vertical resolution of the `GtkPrintContext`,
--- in dots per inch.
---
--- ---
---
---@param self Gtk.PrintContext # a `GtkPrintContext`
---@return number # the vertical resolution of `context`
function Gtk.PrintContext:get_dpi_y() end

--- # method Gtk.PrintContext:get_hard_margins()
---
--- Obtains the hardware printer margins of the `GtkPrintContext`, in units.
---
--- ---
---
---@param self Gtk.PrintContext # a `GtkPrintContext`
---@param top number # top hardware printer margin
---@param bottom number # bottom hardware printer margin
---@param left number # left hardware printer margin
---@param right number # right hardware printer margin
---@return (boolean|nil) # `true` if the hard margins were retrieved
function Gtk.PrintContext:get_hard_margins(top, bottom, left, right) end

--- # method Gtk.PrintContext:get_height()
---
--- Obtains the height of the `GtkPrintContext`, in pixels.
---
--- ---
---
---@param self Gtk.PrintContext # a `GtkPrintContext`
---@return number # the height of `context`
function Gtk.PrintContext:get_height() end

--- # method Gtk.PrintContext:get_page_setup()
---
--- Obtains the `GtkPageSetup` that determines the page
--- dimensions of the `GtkPrintContext`.
---
--- ---
---
---@param self Gtk.PrintContext # a `GtkPrintContext`
---@return Gtk.PageSetup # the page setup of `context`
function Gtk.PrintContext:get_page_setup() end

--- # method Gtk.PrintContext:get_pango_fontmap()
---
--- Returns a `PangoFontMap` that is suitable for use
--- with the `GtkPrintContext`.
---
--- ---
---
---@param self Gtk.PrintContext # a `GtkPrintContext`
---@return Pango.FontMap # the font map of `context`
function Gtk.PrintContext:get_pango_fontmap() end

--- # method Gtk.PrintContext:get_width()
---
--- Obtains the width of the `GtkPrintContext`, in pixels.
---
--- ---
---
---@param self Gtk.PrintContext # a `GtkPrintContext`
---@return number # the width of `context`
function Gtk.PrintContext:get_width() end

--- # method Gtk.PrintContext:set_cairo_context()
---
--- Sets a new cairo context on a print context.
--- 
--- This function is intended to be used when implementing
--- an internal print preview, it is not needed for printing,
--- since GTK+ itself creates a suitable cairo context in that
--- case.
---
--- ---
---
---@param self Gtk.PrintContext # a `GtkPrintContext`
---@param cr cairo.Context # the cairo context
---@param dpi_x number # the horizontal resolution to use with `cr`
---@param dpi_y number # the vertical resolution to use with `cr`
---@return nil
function Gtk.PrintContext:set_cairo_context(cr, dpi_x, dpi_y) end

---@enum Gtk.PrintDuplex
Gtk.PrintDuplex = {}

---@enum Gtk.PrintError
Gtk.PrintError = {}

--- # class Gtk.PrintOperation
---
--- GtkPrintOperation is the high-level, portable printing API.
--- It looks a bit different than other GTK+ dialogs such as the
--- `GtkFileChooser`, since some platforms don’t expose enough
--- infrastructure to implement a good print dialog. On such
--- platforms, GtkPrintOperation uses the native print dialog.
--- On platforms which do not provide a native print dialog, GTK+
--- uses its own, see `GtkPrintUnixDialog`.
--- 
--- The typical way to use the high-level printing API is to create
--- a GtkPrintOperation object with `gtk_print_operation_new()` when
--- the user selects to print. Then you set some properties on it,
--- e.g. the page size, any `GtkPrintSettings` from previous print
--- operations, the number of pages, the current page, etc.
--- 
--- Then you start the print operation by calling `gtk_print_operation_run()`.
--- It will then show a dialog, let the user select a printer and
--- options. When the user finished the dialog various signals will
--- be emitted on the `GtkPrintOperation`, the main one being
--- `GtkPrintOperation`::draw-page, which you are supposed to catch
--- and render the page on the provided `GtkPrintContext` using Cairo.
--- 
--- # The high-level printing API
--- 
--- ```c
--- static GtkPrintSettings *settings = NULL;
--- 
--- static void
--- do_print (void)
--- {
---   GtkPrintOperation *print;
---   GtkPrintOperationResult res;
--- 
---   print = gtk_print_operation_new ();
--- 
---   if (settings != NULL)
---     gtk_print_operation_set_print_settings (print, settings);
--- 
---   g_signal_connect (print, "begin_print", G_CALLBACK (begin_print), NULL);
---   g_signal_connect (print, "draw_page", G_CALLBACK (draw_page), NULL);
--- 
---   res = gtk_print_operation_run (print, GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
---                                  GTK_WINDOW (main_window), NULL);
--- 
---   if (res == GTK_PRINT_OPERATION_RESULT_APPLY)
---     {
---       if (settings != NULL)
---         g_object_unref (settings);
---       settings = g_object_ref (gtk_print_operation_get_print_settings (print));
---     }
--- 
---   g_object_unref (print);
--- }
--- ```
--- 
--- By default GtkPrintOperation uses an external application to do
--- print preview. To implement a custom print preview, an application
--- must connect to the preview signal. The functions
--- `gtk_print_operation_preview_render_page()`,
--- `gtk_print_operation_preview_end_preview()` and
--- `gtk_print_operation_preview_is_selected()`
--- are useful when implementing a print preview.
---
--- ---
---
---@class Gtk.PrintOperation : GObject.Object, Gtk.PrintOperationPreview
---@field parent_instance GObject.Object
---@field priv Gtk.PrintOperationPrivate
---@operator call: Gtk.PrintOperation
Gtk.PrintOperation = {}

--- # method Gtk.PrintOperation:cancel()
---
--- Cancels a running print operation. This function may
--- be called from a `GtkPrintOperation`::begin-print,
--- `GtkPrintOperation`::paginate or `GtkPrintOperation`::draw-page
--- signal handler to stop the currently running print
--- operation.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@return nil
function Gtk.PrintOperation:cancel() end

--- # method Gtk.PrintOperation:draw_page_finish()
---
--- Signalize that drawing of particular page is complete.
--- 
--- It is called after completion of page drawing (e.g. drawing in another
--- thread).
--- If `gtk_print_operation_set_defer_drawing()` was called before, then this function
--- has to be called by application. In another case it is called by the library
--- itself.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@return nil
function Gtk.PrintOperation:draw_page_finish() end

--- # method Gtk.PrintOperation:get_default_page_setup()
---
--- Returns the default page setup, see
--- `gtk_print_operation_set_default_page_setup()`.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@return Gtk.PageSetup # the default page setup
function Gtk.PrintOperation:get_default_page_setup() end

--- # method Gtk.PrintOperation:get_embed_page_setup()
---
--- Gets the value of `GtkPrintOperation`:embed-page-setup property.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@return (boolean|nil) # whether page setup selection combos are embedded
function Gtk.PrintOperation:get_embed_page_setup() end

--- # method Gtk.PrintOperation:get_error()
---
--- Call this when the result of a print operation is
--- %GTK_PRINT_OPERATION_RESULT_ERROR, either as returned by
--- `gtk_print_operation_run()`, or in the `GtkPrintOperation`::done signal
--- handler. The returned `GError` will contain more details on what went wrong.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@return nil
function Gtk.PrintOperation:get_error() end

--- # method Gtk.PrintOperation:get_has_selection()
---
--- Gets the value of `GtkPrintOperation`:has-selection property.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@return (boolean|nil) # whether there is a selection
function Gtk.PrintOperation:get_has_selection() end

--- # method Gtk.PrintOperation:get_n_pages_to_print()
---
--- Returns the number of pages that will be printed.
--- 
--- Note that this value is set during print preparation phase
--- (%GTK_PRINT_STATUS_PREPARING), so this function should never be
--- called before the data generation phase (%GTK_PRINT_STATUS_GENERATING_DATA).
--- You can connect to the `GtkPrintOperation`::status-changed signal
--- and call `gtk_print_operation_get_n_pages_to_print()` when
--- print status is %GTK_PRINT_STATUS_GENERATING_DATA.
--- This is typically used to track the progress of print operation.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@return integer # the number of pages that will be printed
function Gtk.PrintOperation:get_n_pages_to_print() end

--- # method Gtk.PrintOperation:get_print_settings()
---
--- Returns the current print settings.
--- 
--- Note that the return value is `nil` until either
--- `gtk_print_operation_set_print_settings()` or
--- `gtk_print_operation_run()` have been called.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@return Gtk.PrintSettings # the current print settings of `op`.
function Gtk.PrintOperation:get_print_settings() end

--- # method Gtk.PrintOperation:get_status()
---
--- Returns the status of the print operation.
--- Also see `gtk_print_operation_get_status_string()`.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@return Gtk.PrintStatus # the status of the print operation
function Gtk.PrintOperation:get_status() end

--- # method Gtk.PrintOperation:get_status_string()
---
--- Returns a string representation of the status of the
--- print operation. The string is translated and suitable
--- for displaying the print status e.g. in a `GtkStatusbar`.
--- 
--- Use `gtk_print_operation_get_status()` to obtain a status
--- value that is suitable for programmatic use.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@return string # a string representation of the status of the print operation
function Gtk.PrintOperation:get_status_string() end

--- # method Gtk.PrintOperation:get_support_selection()
---
--- Gets the value of `GtkPrintOperation`:support-selection property.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@return (boolean|nil) # whether the application supports print of selection
function Gtk.PrintOperation:get_support_selection() end

--- # method Gtk.PrintOperation:is_finished()
---
--- A convenience function to find out if the print operation
--- is finished, either successfully (%GTK_PRINT_STATUS_FINISHED)
--- or unsuccessfully (%GTK_PRINT_STATUS_FINISHED_ABORTED).
--- 
--- Note: when you enable print status tracking the print operation
--- can be in a non-finished state even after done has been called, as
--- the operation status then tracks the print job status on the printer.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@return (boolean|nil) # `true`, if the print operation is finished.
function Gtk.PrintOperation:is_finished() end

--- # method Gtk.PrintOperation:run()
---
--- Runs the print operation, by first letting the user modify
--- print settings in the print dialog, and then print the document.
--- 
--- Normally that this function does not return until the rendering of all
--- pages is complete. You can connect to the
--- `GtkPrintOperation`::status-changed signal on `op` to obtain some
--- information about the progress of the print operation.
--- Furthermore, it may use a recursive mainloop to show the print dialog.
--- 
--- If you call `gtk_print_operation_set_allow_async()` or set the
--- `GtkPrintOperation`:allow-async property the operation will run
--- asynchronously if this is supported on the platform. The
--- `GtkPrintOperation`::done signal will be emitted with the result of the
--- operation when the it is done (i.e. when the dialog is canceled, or when
--- the print succeeds or fails).
--- ```c
--- if (settings != NULL)
---   gtk_print_operation_set_print_settings (print, settings);
---   
--- if (page_setup != NULL)
---   gtk_print_operation_set_default_page_setup (print, page_setup);
---   
--- g_signal_connect (print, "begin-print",
---                   G_CALLBACK (begin_print), &data);
--- g_signal_connect (print, "draw-page",
---                   G_CALLBACK (draw_page), &data);
---  
--- res = gtk_print_operation_run (print,
---                                GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
---                                parent,
---                                &error);
---  
--- if (res == GTK_PRINT_OPERATION_RESULT_ERROR)
---  {
---    error_dialog = gtk_message_dialog_new (GTK_WINDOW (parent),
---   			                     GTK_DIALOG_DESTROY_WITH_PARENT,
--- 					     GTK_MESSAGE_ERROR,
--- 					     GTK_BUTTONS_CLOSE,
--- 					     "Error printing file:\n%s",
--- 					     error->message);
---    g_signal_connect (error_dialog, "response",
---                      G_CALLBACK (gtk_widget_destroy), NULL);
---    gtk_widget_show (error_dialog);
---    g_error_free (error);
---  }
--- else if (res == GTK_PRINT_OPERATION_RESULT_APPLY)
---  {
---    if (settings != NULL)
--- g_object_unref (settings);
---    settings = g_object_ref (gtk_print_operation_get_print_settings (print));
---  }
--- ```
--- 
--- Note that `gtk_print_operation_run()` can only be called once on a
--- given `GtkPrintOperation`.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@param action Gtk.PrintOperationAction # the action to start
---@param parent? Gtk.Window # Transient parent of the dialog
---@return Gtk.PrintOperationResult # the result of the print operation. A return value of %GTK_PRINT_OPERATION_RESULT_APPLY indicates that the printing was completed successfully. In this case, it is a good idea to obtain the used print settings with `gtk_print_operation_get_print_settings()` and store them for reuse with the next print operation. A value of %GTK_PRINT_OPERATION_RESULT_IN_PROGRESS means the operation is running asynchronously, and will emit the `GtkPrintOperation`::done signal when done.
function Gtk.PrintOperation:run(action, parent) end

--- # method Gtk.PrintOperation:set_allow_async()
---
--- Sets whether the `gtk_print_operation_run()` may return
--- before the print operation is completed. Note that
--- some platforms may not allow asynchronous operation.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@param allow_async (boolean|nil) # `true` to allow asynchronous operation
---@return nil
function Gtk.PrintOperation:set_allow_async(allow_async) end

--- # method Gtk.PrintOperation:set_current_page()
---
--- Sets the current page.
--- 
--- If this is called before `gtk_print_operation_run()`,
--- the user will be able to select to print only the current page.
--- 
--- Note that this only makes sense for pre-paginated documents.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@param current_page integer # the current page, 0-based
---@return nil
function Gtk.PrintOperation:set_current_page(current_page) end

--- # method Gtk.PrintOperation:set_custom_tab_label()
---
--- Sets the label for the tab holding custom widgets.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@param label? string # the label to use, or `nil` to use the default label
---@return nil
function Gtk.PrintOperation:set_custom_tab_label(label) end

--- # method Gtk.PrintOperation:set_default_page_setup()
---
--- Makes `default_page_setup` the default page setup for `op`.
--- 
--- This page setup will be used by `gtk_print_operation_run()`,
--- but it can be overridden on a per-page basis by connecting
--- to the `GtkPrintOperation`::request-page-setup signal.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@param default_page_setup? Gtk.PageSetup # a `GtkPageSetup`, or `nil`
---@return nil
function Gtk.PrintOperation:set_default_page_setup(default_page_setup) end

--- # method Gtk.PrintOperation:set_defer_drawing()
---
--- Sets up the `GtkPrintOperation` to wait for calling of
--- `gtk_print_operation_draw_page_finish()` from application. It can
--- be used for drawing page in another thread.
--- 
--- This function must be called in the callback of “draw-page” signal.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@return nil
function Gtk.PrintOperation:set_defer_drawing() end

--- # method Gtk.PrintOperation:set_embed_page_setup()
---
--- Embed page size combo box and orientation combo box into page setup page.
--- Selected page setup is stored as default page setup in `GtkPrintOperation`.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@param embed (boolean|nil) # `true` to embed page setup selection in the `GtkPrintUnixDialog`
---@return nil
function Gtk.PrintOperation:set_embed_page_setup(embed) end

--- # method Gtk.PrintOperation:set_export_filename()
---
--- Sets up the `GtkPrintOperation` to generate a file instead
--- of showing the print dialog. The indended use of this function
--- is for implementing “Export to PDF” actions. Currently, PDF
--- is the only supported format.
--- 
--- “Print to PDF” support is independent of this and is done
--- by letting the user pick the “Print to PDF” item from the list
--- of printers in the print dialog.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@param filename string # the filename for the exported file
---@return nil
function Gtk.PrintOperation:set_export_filename(filename) end

--- # method Gtk.PrintOperation:set_has_selection()
---
--- Sets whether there is a selection to print.
--- 
--- Application has to set number of pages to which the selection
--- will draw by `gtk_print_operation_set_n_pages()` in a callback of
--- `GtkPrintOperation`::begin-print.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@param has_selection (boolean|nil) # `true` indicates that a selection exists
---@return nil
function Gtk.PrintOperation:set_has_selection(has_selection) end

--- # method Gtk.PrintOperation:set_job_name()
---
--- Sets the name of the print job. The name is used to identify
--- the job (e.g. in monitoring applications like eggcups).
--- 
--- If you don’t set a job name, GTK+ picks a default one by
--- numbering successive print jobs.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@param job_name string # a string that identifies the print job
---@return nil
function Gtk.PrintOperation:set_job_name(job_name) end

--- # method Gtk.PrintOperation:set_n_pages()
---
--- Sets the number of pages in the document.
--- 
--- This must be set to a positive number
--- before the rendering starts. It may be set in a
--- `GtkPrintOperation`::begin-print signal hander.
--- 
--- Note that the page numbers passed to the
--- `GtkPrintOperation`::request-page-setup
--- and `GtkPrintOperation`::draw-page signals are 0-based, i.e. if
--- the user chooses to print all pages, the last ::draw-page signal
--- will be for page `n_pages` - 1.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@param n_pages integer # the number of pages
---@return nil
function Gtk.PrintOperation:set_n_pages(n_pages) end

--- # method Gtk.PrintOperation:set_print_settings()
---
--- Sets the print settings for `op`. This is typically used to
--- re-establish print settings from a previous print operation,
--- see `gtk_print_operation_run()`.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@param print_settings? Gtk.PrintSettings # `GtkPrintSettings`
---@return nil
function Gtk.PrintOperation:set_print_settings(print_settings) end

--- # method Gtk.PrintOperation:set_show_progress()
---
--- If `show_progress` is `true`, the print operation will show a
--- progress dialog during the print operation.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@param show_progress (boolean|nil) # `true` to show a progress dialog
---@return nil
function Gtk.PrintOperation:set_show_progress(show_progress) end

--- # method Gtk.PrintOperation:set_support_selection()
---
--- Sets whether selection is supported by `GtkPrintOperation`.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@param support_selection (boolean|nil) # `true` to support selection
---@return nil
function Gtk.PrintOperation:set_support_selection(support_selection) end

--- # method Gtk.PrintOperation:set_track_print_status()
---
--- If track_status is `true`, the print operation will try to continue report
--- on the status of the print job in the printer queues and printer. This
--- can allow your application to show things like “out of paper” issues,
--- and when the print job actually reaches the printer.
--- 
--- This function is often implemented using some form of polling, so it should
--- not be enabled unless needed.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@param track_status (boolean|nil) # `true` to track status after printing
---@return nil
function Gtk.PrintOperation:set_track_print_status(track_status) end

--- # method Gtk.PrintOperation:set_unit()
---
--- Sets up the transformation for the cairo context obtained from
--- `GtkPrintContext` in such a way that distances are measured in
--- units of `unit`.
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@param unit Gtk.Unit # the unit to use
---@return nil
function Gtk.PrintOperation:set_unit(unit) end

--- # method Gtk.PrintOperation:set_use_full_page()
---
--- If `full_page` is `true`, the transformation for the cairo context
--- obtained from `GtkPrintContext` puts the origin at the top left
--- corner of the page (which may not be the top left corner of the
--- sheet, depending on page orientation and the number of pages per
--- sheet). Otherwise, the origin is at the top left corner of the
--- imageable area (i.e. inside the margins).
---
--- ---
---
---@param self Gtk.PrintOperation # a `GtkPrintOperation`
---@param full_page (boolean|nil) # `true` to set up the `GtkPrintContext` for the full page
---@return nil
function Gtk.PrintOperation:set_use_full_page(full_page) end

--- # function Gtk.PrintOperation.new()
---
--- Creates a new `GtkPrintOperation`.
---
--- ---
---
---@return Gtk.PrintOperation # a new `GtkPrintOperation`
function Gtk.PrintOperation.new() end

---@enum Gtk.PrintOperationAction
Gtk.PrintOperationAction = {}

--- # record Gtk.PrintOperationClass
---
---@class Gtk.PrintOperationClass
---@field parent_class GObject.ObjectClass # The parent class.
---@field done fun(operation: Gtk.PrintOperation, result: Gtk.PrintOperationResult): nil
---@field begin_print fun(operation: Gtk.PrintOperation, context: Gtk.PrintContext): nil
---@field paginate fun(operation: Gtk.PrintOperation, context: Gtk.PrintContext): (boolean|nil)
---@field request_page_setup fun(operation: Gtk.PrintOperation, context: Gtk.PrintContext, page_nr: integer, setup: Gtk.PageSetup): nil
---@field draw_page fun(operation: Gtk.PrintOperation, context: Gtk.PrintContext, page_nr: integer): nil
---@field end_print fun(operation: Gtk.PrintOperation, context: Gtk.PrintContext): nil
---@field status_changed fun(operation: Gtk.PrintOperation): nil
---@field custom_widget_apply fun(operation: Gtk.PrintOperation, widget: Gtk.Widget): nil
---@field preview fun(operation: Gtk.PrintOperation, preview: Gtk.PrintOperationPreview, context: Gtk.PrintContext, parent: Gtk.Window): (boolean|nil)
---@field update_custom_widget fun(operation: Gtk.PrintOperation, widget: Gtk.Widget, setup: Gtk.PageSetup, settings: Gtk.PrintSettings): nil
Gtk.PrintOperationClass = {}

--- # interface Gtk.PrintOperationPreview
---
---@class Gtk.PrintOperationPreview
Gtk.PrintOperationPreview = {}

--- # method Gtk.PrintOperationPreview:end_preview()
---
--- Ends a preview.
--- 
--- This function must be called to finish a custom print preview.
---
--- ---
---
---@param self Gtk.PrintOperationPreview # a `GtkPrintOperationPreview`
---@return nil
function Gtk.PrintOperationPreview:end_preview() end

--- # method Gtk.PrintOperationPreview:is_selected()
---
--- Returns whether the given page is included in the set of pages that
--- have been selected for printing.
---
--- ---
---
---@param self Gtk.PrintOperationPreview # a `GtkPrintOperationPreview`
---@param page_nr integer # a page number
---@return (boolean|nil) # `true` if the page has been selected for printing
function Gtk.PrintOperationPreview:is_selected(page_nr) end

--- # method Gtk.PrintOperationPreview:render_page()
---
--- Renders a page to the preview, using the print context that
--- was passed to the `GtkPrintOperation`::preview handler together
--- with `preview`.
--- 
--- A custom iprint preview should use this function in its ::expose
--- handler to render the currently selected page.
--- 
--- Note that this function requires a suitable cairo context to
--- be associated with the print context.
---
--- ---
---
---@param self Gtk.PrintOperationPreview # a `GtkPrintOperationPreview`
---@param page_nr integer # the page to render
---@return nil
function Gtk.PrintOperationPreview:render_page(page_nr) end

--- # record Gtk.PrintOperationPreviewIface
---
---@class Gtk.PrintOperationPreviewIface
---@field g_iface GObject.TypeInterface
---@field ready fun(preview: Gtk.PrintOperationPreview, context: Gtk.PrintContext): nil
---@field got_page_size fun(preview: Gtk.PrintOperationPreview, context: Gtk.PrintContext, page_setup: Gtk.PageSetup): nil
---@field render_page fun(preview: Gtk.PrintOperationPreview, page_nr: integer): nil
---@field is_selected fun(preview: Gtk.PrintOperationPreview, page_nr: integer): (boolean|nil)
---@field end_preview fun(preview: Gtk.PrintOperationPreview): nil
Gtk.PrintOperationPreviewIface = {}

--- # record Gtk.PrintOperationPrivate
---
---@class Gtk.PrintOperationPrivate
Gtk.PrintOperationPrivate = {}

---@enum Gtk.PrintOperationResult
Gtk.PrintOperationResult = {}

---@enum Gtk.PrintPages
Gtk.PrintPages = {}

---@enum Gtk.PrintQuality
Gtk.PrintQuality = {}

--- # class Gtk.PrintSettings
---
--- A GtkPrintSettings object represents the settings of a print dialog in
--- a system-independent way. The main use for this object is that once
--- you’ve printed you can get a settings object that represents the settings
--- the user chose, and the next time you print you can pass that object in so
--- that the user doesn’t have to re-set all his settings.
--- 
--- Its also possible to enumerate the settings so that you can easily save
--- the settings for the next time your app runs, or even store them in a
--- document. The predefined keys try to use shared values as much as possible
--- so that moving such a document between systems still works.
--- 
--- Printing support was added in GTK+ 2.10.
---
--- ---
---
---@class Gtk.PrintSettings : GObject.Object
---@operator call: Gtk.PrintSettings
Gtk.PrintSettings = {}

--- # method Gtk.PrintSettings:copy()
---
--- Copies a `GtkPrintSettings` object.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return Gtk.PrintSettings # a newly allocated copy of `other`
function Gtk.PrintSettings:copy() end

--- # method Gtk.PrintSettings:foreach()
---
--- Calls `func` for each key-value pair of `settings`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param func Gtk.PrintSettingsFunc # the function to call
---@param user_data? userdata # user data for `func`
---@return nil
function Gtk.PrintSettings:foreach(func, user_data) end

--- # method Gtk.PrintSettings:get()
---
--- Looks up the string value associated with `key`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param key string # a key
---@return string # the string value for `key`
function Gtk.PrintSettings:get(key) end

--- # method Gtk.PrintSettings:get_bool()
---
--- Returns the boolean represented by the value
--- that is associated with `key`.
--- 
--- The string “true” represents `true`, any other
--- string `false`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param key string # a key
---@return (boolean|nil) # `true`, if `key` maps to a true value.
function Gtk.PrintSettings:get_bool(key) end

--- # method Gtk.PrintSettings:get_collate()
---
--- Gets the value of %GTK_PRINT_SETTINGS_COLLATE.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return (boolean|nil) # whether to collate the printed pages
function Gtk.PrintSettings:get_collate() end

--- # method Gtk.PrintSettings:get_default_source()
---
--- Gets the value of %GTK_PRINT_SETTINGS_DEFAULT_SOURCE.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return string # the default source
function Gtk.PrintSettings:get_default_source() end

--- # method Gtk.PrintSettings:get_dither()
---
--- Gets the value of %GTK_PRINT_SETTINGS_DITHER.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return string # the dithering that is used
function Gtk.PrintSettings:get_dither() end

--- # method Gtk.PrintSettings:get_double()
---
--- Returns the double value associated with `key`, or 0.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param key string # a key
---@return number # the double value of `key`
function Gtk.PrintSettings:get_double(key) end

--- # method Gtk.PrintSettings:get_double_with_default()
---
--- Returns the floating point number represented by
--- the value that is associated with `key`, or `default_val`
--- if the value does not represent a floating point number.
--- 
--- Floating point numbers are parsed with `g_ascii_strtod()`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param key string # a key
---@param def number # the default value
---@return number # the floating point number associated with `key`
function Gtk.PrintSettings:get_double_with_default(key, def) end

--- # method Gtk.PrintSettings:get_duplex()
---
--- Gets the value of %GTK_PRINT_SETTINGS_DUPLEX.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return Gtk.PrintDuplex # whether to print the output in duplex.
function Gtk.PrintSettings:get_duplex() end

--- # method Gtk.PrintSettings:get_finishings()
---
--- Gets the value of %GTK_PRINT_SETTINGS_FINISHINGS.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return string # the finishings
function Gtk.PrintSettings:get_finishings() end

--- # method Gtk.PrintSettings:get_int()
---
--- Returns the integer value of `key`, or 0.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param key string # a key
---@return integer # the integer value of `key`
function Gtk.PrintSettings:get_int(key) end

--- # method Gtk.PrintSettings:get_int_with_default()
---
--- Returns the value of `key`, interpreted as
--- an integer, or the default value.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param key string # a key
---@param def integer # the default value
---@return integer # the integer value of `key`
function Gtk.PrintSettings:get_int_with_default(key, def) end

--- # method Gtk.PrintSettings:get_length()
---
--- Returns the value associated with `key`, interpreted
--- as a length. The returned value is converted to `units`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param key string # a key
---@param unit Gtk.Unit # the unit of the return value
---@return number # the length value of `key`, converted to `unit`
function Gtk.PrintSettings:get_length(key, unit) end

--- # method Gtk.PrintSettings:get_media_type()
---
--- Gets the value of %GTK_PRINT_SETTINGS_MEDIA_TYPE.
--- 
--- The set of media types is defined in PWG 5101.1-2002 PWG.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return string # the media type
function Gtk.PrintSettings:get_media_type() end

--- # method Gtk.PrintSettings:get_n_copies()
---
--- Gets the value of %GTK_PRINT_SETTINGS_N_COPIES.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return integer # the number of copies to print
function Gtk.PrintSettings:get_n_copies() end

--- # method Gtk.PrintSettings:get_number_up()
---
--- Gets the value of %GTK_PRINT_SETTINGS_NUMBER_UP.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return integer # the number of pages per sheet
function Gtk.PrintSettings:get_number_up() end

--- # method Gtk.PrintSettings:get_number_up_layout()
---
--- Gets the value of %GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return Gtk.NumberUpLayout # layout of page in number-up mode
function Gtk.PrintSettings:get_number_up_layout() end

--- # method Gtk.PrintSettings:get_orientation()
---
--- Get the value of %GTK_PRINT_SETTINGS_ORIENTATION,
--- converted to a `GtkPageOrientation`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return Gtk.PageOrientation # the orientation
function Gtk.PrintSettings:get_orientation() end

--- # method Gtk.PrintSettings:get_output_bin()
---
--- Gets the value of %GTK_PRINT_SETTINGS_OUTPUT_BIN.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return string # the output bin
function Gtk.PrintSettings:get_output_bin() end

--- # method Gtk.PrintSettings:get_page_ranges()
---
--- Gets the value of %GTK_PRINT_SETTINGS_PAGE_RANGES.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param num_ranges integer # return location for the length of the returned array
---@return unknown[] # an array of `GtkPageRanges`. Use `g_free()` to free the array when it is no longer needed.
function Gtk.PrintSettings:get_page_ranges(num_ranges) end

--- # method Gtk.PrintSettings:get_page_set()
---
--- Gets the value of %GTK_PRINT_SETTINGS_PAGE_SET.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return Gtk.PageSet # the set of pages to print
function Gtk.PrintSettings:get_page_set() end

--- # method Gtk.PrintSettings:get_paper_height()
---
--- Gets the value of %GTK_PRINT_SETTINGS_PAPER_HEIGHT,
--- converted to `unit`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param unit Gtk.Unit # the unit for the return value
---@return number # the paper height, in units of `unit`
function Gtk.PrintSettings:get_paper_height(unit) end

--- # method Gtk.PrintSettings:get_paper_size()
---
--- Gets the value of %GTK_PRINT_SETTINGS_PAPER_FORMAT,
--- converted to a `GtkPaperSize`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return Gtk.PaperSize # the paper size
function Gtk.PrintSettings:get_paper_size() end

--- # method Gtk.PrintSettings:get_paper_width()
---
--- Gets the value of %GTK_PRINT_SETTINGS_PAPER_WIDTH,
--- converted to `unit`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param unit Gtk.Unit # the unit for the return value
---@return number # the paper width, in units of `unit`
function Gtk.PrintSettings:get_paper_width(unit) end

--- # method Gtk.PrintSettings:get_print_pages()
---
--- Gets the value of %GTK_PRINT_SETTINGS_PRINT_PAGES.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return Gtk.PrintPages # which pages to print
function Gtk.PrintSettings:get_print_pages() end

--- # method Gtk.PrintSettings:get_printer()
---
--- Convenience function to obtain the value of
--- %GTK_PRINT_SETTINGS_PRINTER.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return string # the printer name
function Gtk.PrintSettings:get_printer() end

--- # method Gtk.PrintSettings:get_printer_lpi()
---
--- Gets the value of %GTK_PRINT_SETTINGS_PRINTER_LPI.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return number # the resolution in lpi (lines per inch)
function Gtk.PrintSettings:get_printer_lpi() end

--- # method Gtk.PrintSettings:get_quality()
---
--- Gets the value of %GTK_PRINT_SETTINGS_QUALITY.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return Gtk.PrintQuality # the print quality
function Gtk.PrintSettings:get_quality() end

--- # method Gtk.PrintSettings:get_resolution()
---
--- Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return integer # the resolution in dpi
function Gtk.PrintSettings:get_resolution() end

--- # method Gtk.PrintSettings:get_resolution_x()
---
--- Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION_X.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return integer # the horizontal resolution in dpi
function Gtk.PrintSettings:get_resolution_x() end

--- # method Gtk.PrintSettings:get_resolution_y()
---
--- Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION_Y.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return integer # the vertical resolution in dpi
function Gtk.PrintSettings:get_resolution_y() end

--- # method Gtk.PrintSettings:get_reverse()
---
--- Gets the value of %GTK_PRINT_SETTINGS_REVERSE.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return (boolean|nil) # whether to reverse the order of the printed pages
function Gtk.PrintSettings:get_reverse() end

--- # method Gtk.PrintSettings:get_scale()
---
--- Gets the value of %GTK_PRINT_SETTINGS_SCALE.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return number # the scale in percent
function Gtk.PrintSettings:get_scale() end

--- # method Gtk.PrintSettings:get_use_color()
---
--- Gets the value of %GTK_PRINT_SETTINGS_USE_COLOR.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return (boolean|nil) # whether to use color
function Gtk.PrintSettings:get_use_color() end

--- # method Gtk.PrintSettings:has_key()
---
--- Returns `true`, if a value is associated with `key`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param key string # a key
---@return (boolean|nil) # `true`, if `key` has a value
function Gtk.PrintSettings:has_key(key) end

--- # method Gtk.PrintSettings:load_file()
---
--- Reads the print settings from `file_name`. If the file could not be loaded
--- then error is set to either a `GFileError` or `GKeyFileError`.
--- See `gtk_print_settings_to_file()`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param file_name string # the filename to read the settings from
---@return (boolean|nil) # `true` on success
function Gtk.PrintSettings:load_file(file_name) end

--- # method Gtk.PrintSettings:load_key_file()
---
--- Reads the print settings from the group `group_name` in `key_file`. If the
--- file could not be loaded then error is set to either a `GFileError` or
--- `GKeyFileError`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param key_file GLib.KeyFile # the `GKeyFile` to retrieve the settings from
---@param group_name? string # the name of the group to use, or `nil` to use the default “Print Settings”
---@return (boolean|nil) # `true` on success
function Gtk.PrintSettings:load_key_file(key_file, group_name) end

--- # method Gtk.PrintSettings:set()
---
--- Associates `value` with `key`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param key string # a key
---@param value? string # a string value, or `nil`
---@return nil
function Gtk.PrintSettings:set(key, value) end

--- # method Gtk.PrintSettings:set_bool()
---
--- Sets `key` to a boolean value.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param key string # a key
---@param value (boolean|nil) # a boolean
---@return nil
function Gtk.PrintSettings:set_bool(key, value) end

--- # method Gtk.PrintSettings:set_collate()
---
--- Sets the value of %GTK_PRINT_SETTINGS_COLLATE.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param collate (boolean|nil) # whether to collate the output
---@return nil
function Gtk.PrintSettings:set_collate(collate) end

--- # method Gtk.PrintSettings:set_default_source()
---
--- Sets the value of %GTK_PRINT_SETTINGS_DEFAULT_SOURCE.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param default_source string # the default source
---@return nil
function Gtk.PrintSettings:set_default_source(default_source) end

--- # method Gtk.PrintSettings:set_dither()
---
--- Sets the value of %GTK_PRINT_SETTINGS_DITHER.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param dither string # the dithering that is used
---@return nil
function Gtk.PrintSettings:set_dither(dither) end

--- # method Gtk.PrintSettings:set_double()
---
--- Sets `key` to a double value.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param key string # a key
---@param value number # a double value
---@return nil
function Gtk.PrintSettings:set_double(key, value) end

--- # method Gtk.PrintSettings:set_duplex()
---
--- Sets the value of %GTK_PRINT_SETTINGS_DUPLEX.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param duplex Gtk.PrintDuplex # a `GtkPrintDuplex` value
---@return nil
function Gtk.PrintSettings:set_duplex(duplex) end

--- # method Gtk.PrintSettings:set_finishings()
---
--- Sets the value of %GTK_PRINT_SETTINGS_FINISHINGS.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param finishings string # the finishings
---@return nil
function Gtk.PrintSettings:set_finishings(finishings) end

--- # method Gtk.PrintSettings:set_int()
---
--- Sets `key` to an integer value.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param key string # a key
---@param value integer # an integer
---@return nil
function Gtk.PrintSettings:set_int(key, value) end

--- # method Gtk.PrintSettings:set_length()
---
--- Associates a length in units of `unit` with `key`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param key string # a key
---@param value number # a length
---@param unit Gtk.Unit # the unit of `length`
---@return nil
function Gtk.PrintSettings:set_length(key, value, unit) end

--- # method Gtk.PrintSettings:set_media_type()
---
--- Sets the value of %GTK_PRINT_SETTINGS_MEDIA_TYPE.
--- 
--- The set of media types is defined in PWG 5101.1-2002 PWG.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param media_type string # the media type
---@return nil
function Gtk.PrintSettings:set_media_type(media_type) end

--- # method Gtk.PrintSettings:set_n_copies()
---
--- Sets the value of %GTK_PRINT_SETTINGS_N_COPIES.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param num_copies integer # the number of copies
---@return nil
function Gtk.PrintSettings:set_n_copies(num_copies) end

--- # method Gtk.PrintSettings:set_number_up()
---
--- Sets the value of %GTK_PRINT_SETTINGS_NUMBER_UP.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param number_up integer # the number of pages per sheet
---@return nil
function Gtk.PrintSettings:set_number_up(number_up) end

--- # method Gtk.PrintSettings:set_number_up_layout()
---
--- Sets the value of %GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param number_up_layout Gtk.NumberUpLayout # a `GtkNumberUpLayout` value
---@return nil
function Gtk.PrintSettings:set_number_up_layout(number_up_layout) end

--- # method Gtk.PrintSettings:set_orientation()
---
--- Sets the value of %GTK_PRINT_SETTINGS_ORIENTATION.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param orientation Gtk.PageOrientation # a page orientation
---@return nil
function Gtk.PrintSettings:set_orientation(orientation) end

--- # method Gtk.PrintSettings:set_output_bin()
---
--- Sets the value of %GTK_PRINT_SETTINGS_OUTPUT_BIN.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param output_bin string # the output bin
---@return nil
function Gtk.PrintSettings:set_output_bin(output_bin) end

--- # method Gtk.PrintSettings:set_page_ranges()
---
--- Sets the value of %GTK_PRINT_SETTINGS_PAGE_RANGES.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param page_ranges unknown[] # an array of `GtkPageRanges`
---@param num_ranges integer # the length of `page_ranges`
---@return nil
function Gtk.PrintSettings:set_page_ranges(page_ranges, num_ranges) end

--- # method Gtk.PrintSettings:set_page_set()
---
--- Sets the value of %GTK_PRINT_SETTINGS_PAGE_SET.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param page_set Gtk.PageSet # a `GtkPageSet` value
---@return nil
function Gtk.PrintSettings:set_page_set(page_set) end

--- # method Gtk.PrintSettings:set_paper_height()
---
--- Sets the value of %GTK_PRINT_SETTINGS_PAPER_HEIGHT.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param height number # the paper height
---@param unit Gtk.Unit # the units of `height`
---@return nil
function Gtk.PrintSettings:set_paper_height(height, unit) end

--- # method Gtk.PrintSettings:set_paper_size()
---
--- Sets the value of %GTK_PRINT_SETTINGS_PAPER_FORMAT,
--- %GTK_PRINT_SETTINGS_PAPER_WIDTH and
--- %GTK_PRINT_SETTINGS_PAPER_HEIGHT.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param paper_size Gtk.PaperSize # a paper size
---@return nil
function Gtk.PrintSettings:set_paper_size(paper_size) end

--- # method Gtk.PrintSettings:set_paper_width()
---
--- Sets the value of %GTK_PRINT_SETTINGS_PAPER_WIDTH.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param width number # the paper width
---@param unit Gtk.Unit # the units of `width`
---@return nil
function Gtk.PrintSettings:set_paper_width(width, unit) end

--- # method Gtk.PrintSettings:set_print_pages()
---
--- Sets the value of %GTK_PRINT_SETTINGS_PRINT_PAGES.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param pages Gtk.PrintPages # a `GtkPrintPages` value
---@return nil
function Gtk.PrintSettings:set_print_pages(pages) end

--- # method Gtk.PrintSettings:set_printer()
---
--- Convenience function to set %GTK_PRINT_SETTINGS_PRINTER
--- to `printer`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param printer string # the printer name
---@return nil
function Gtk.PrintSettings:set_printer(printer) end

--- # method Gtk.PrintSettings:set_printer_lpi()
---
--- Sets the value of %GTK_PRINT_SETTINGS_PRINTER_LPI.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param lpi number # the resolution in lpi (lines per inch)
---@return nil
function Gtk.PrintSettings:set_printer_lpi(lpi) end

--- # method Gtk.PrintSettings:set_quality()
---
--- Sets the value of %GTK_PRINT_SETTINGS_QUALITY.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param quality Gtk.PrintQuality # a `GtkPrintQuality` value
---@return nil
function Gtk.PrintSettings:set_quality(quality) end

--- # method Gtk.PrintSettings:set_resolution()
---
--- Sets the values of %GTK_PRINT_SETTINGS_RESOLUTION,
--- %GTK_PRINT_SETTINGS_RESOLUTION_X and
--- %GTK_PRINT_SETTINGS_RESOLUTION_Y.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param resolution integer # the resolution in dpi
---@return nil
function Gtk.PrintSettings:set_resolution(resolution) end

--- # method Gtk.PrintSettings:set_resolution_xy()
---
--- Sets the values of %GTK_PRINT_SETTINGS_RESOLUTION,
--- %GTK_PRINT_SETTINGS_RESOLUTION_X and
--- %GTK_PRINT_SETTINGS_RESOLUTION_Y.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param resolution_x integer # the horizontal resolution in dpi
---@param resolution_y integer # the vertical resolution in dpi
---@return nil
function Gtk.PrintSettings:set_resolution_xy(resolution_x, resolution_y) end

--- # method Gtk.PrintSettings:set_reverse()
---
--- Sets the value of %GTK_PRINT_SETTINGS_REVERSE.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param reverse (boolean|nil) # whether to reverse the output
---@return nil
function Gtk.PrintSettings:set_reverse(reverse) end

--- # method Gtk.PrintSettings:set_scale()
---
--- Sets the value of %GTK_PRINT_SETTINGS_SCALE.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param scale number # the scale in percent
---@return nil
function Gtk.PrintSettings:set_scale(scale) end

--- # method Gtk.PrintSettings:set_use_color()
---
--- Sets the value of %GTK_PRINT_SETTINGS_USE_COLOR.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param use_color (boolean|nil) # whether to use color
---@return nil
function Gtk.PrintSettings:set_use_color(use_color) end

--- # method Gtk.PrintSettings:to_file()
---
--- This function saves the print settings from `settings` to `file_name`. If the
--- file could not be loaded then error is set to either a `GFileError` or
--- `GKeyFileError`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param file_name string # the file to save to
---@return (boolean|nil) # `true` on success
function Gtk.PrintSettings:to_file(file_name) end

--- # method Gtk.PrintSettings:to_gvariant()
---
--- Serialize print settings to an a{sv} variant.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@return GLib.Variant # a new, floating, `GVariant`
function Gtk.PrintSettings:to_gvariant() end

--- # method Gtk.PrintSettings:to_key_file()
---
--- This function adds the print settings from `settings` to `key_file`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param key_file GLib.KeyFile # the `GKeyFile` to save the print settings to
---@param group_name? string # the group to add the settings to in `key_file`, or `nil` to use the default “Print Settings”
---@return nil
function Gtk.PrintSettings:to_key_file(key_file, group_name) end

--- # method Gtk.PrintSettings:unset()
---
--- Removes any value associated with `key`.
--- This has the same effect as setting the value to `nil`.
---
--- ---
---
---@param self Gtk.PrintSettings # a `GtkPrintSettings`
---@param key string # a key
---@return nil
function Gtk.PrintSettings:unset(key) end

--- # function Gtk.PrintSettings.new()
---
--- Creates a new `GtkPrintSettings` object.
---
--- ---
---
---@return Gtk.PrintSettings # a new `GtkPrintSettings` object
function Gtk.PrintSettings.new() end

--- # function Gtk.PrintSettings.new_from_file()
---
--- Reads the print settings from `file_name`. Returns a new `GtkPrintSettings`
--- object with the restored settings, or `nil` if an error occurred. If the
--- file could not be loaded then error is set to either a `GFileError` or
--- `GKeyFileError`.  See `gtk_print_settings_to_file()`.
---
--- ---
---
---@param file_name string # the filename to read the settings from
---@return Gtk.PrintSettings # the restored `GtkPrintSettings`
function Gtk.PrintSettings.new_from_file(file_name) end

--- # function Gtk.PrintSettings.new_from_gvariant()
---
--- Deserialize print settings from an a{sv} variant in
--- the format produced by `gtk_print_settings_to_gvariant()`.
---
--- ---
---
---@param variant GLib.Variant # an a{sv} `GVariant`
---@return Gtk.PrintSettings # a new `GtkPrintSettings` object
function Gtk.PrintSettings.new_from_gvariant(variant) end

--- # function Gtk.PrintSettings.new_from_key_file()
---
--- Reads the print settings from the group `group_name` in `key_file`.  Returns a
--- new `GtkPrintSettings` object with the restored settings, or `nil` if an
--- error occurred. If the file could not be loaded then error is set to either
--- a `GFileError` or `GKeyFileError`.
---
--- ---
---
---@param key_file GLib.KeyFile # the `GKeyFile` to retrieve the settings from
---@param group_name? string # the name of the group to use, or `nil` to use the default “Print Settings”
---@return Gtk.PrintSettings # the restored `GtkPrintSettings`
function Gtk.PrintSettings.new_from_key_file(key_file, group_name) end

---@alias Gtk.PrintSettingsFunc fun(key: string, value: string, user_data: userdata): nil

---@enum Gtk.PrintStatus
Gtk.PrintStatus = {}

--- # class Gtk.ProgressBar
---
--- The `GtkProgressBar` is typically used to display the progress of a long
--- running operation. It provides a visual clue that processing is underway.
--- The GtkProgressBar can be used in two different modes: percentage mode
--- and activity mode.
--- 
--- When an application can determine how much work needs to take place
--- (e.g. read a fixed number of bytes from a file) and can monitor its
--- progress, it can use the GtkProgressBar in percentage mode and the
--- user sees a growing bar indicating the percentage of the work that
--- has been completed. In this mode, the application is required to call
--- `gtk_progress_bar_set_fraction()` periodically to update the progress bar.
--- 
--- When an application has no accurate way of knowing the amount of work
--- to do, it can use the `GtkProgressBar` in activity mode, which shows
--- activity by a block moving back and forth within the progress area. In
--- this mode, the application is required to call `gtk_progress_bar_pulse()`
--- periodically to update the progress bar.
--- 
--- There is quite a bit of flexibility provided to control the appearance
--- of the `GtkProgressBar`. Functions are provided to control the orientation
--- of the bar, optional text can be displayed along with the bar, and the
--- step size used in activity mode can be set.
--- 
--- # CSS nodes
--- 
--- ```plain
--- progressbar[.osd]
--- ├── [text]
--- ╰── trough[.empty][.full]
---     ╰── progress[.pulse]
--- ```
--- 
--- GtkProgressBar has a main CSS node with name progressbar and subnodes with
--- names text and trough, of which the latter has a subnode named progress. The
--- text subnode is only present if text is shown. The progress subnode has the
--- style class .pulse when in activity mode. It gets the style classes .left,
--- .right, .top or .bottom added when the progress 'touches' the corresponding
--- end of the GtkProgressBar. The .osd class on the progressbar node is for use
--- in overlays like the one Epiphany has for page loading progress.
---
--- ---
---
---@class Gtk.ProgressBar : Gtk.Widget, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field parent Gtk.Widget
---@field priv Gtk.ProgressBarPrivate
---@operator call: Gtk.ProgressBar
Gtk.ProgressBar = {}

--- # method Gtk.ProgressBar:get_ellipsize()
---
--- Returns the ellipsizing position of the progress bar.
--- See `gtk_progress_bar_set_ellipsize()`.
---
--- ---
---
---@param self Gtk.ProgressBar # a `GtkProgressBar`
---@return Pango.EllipsizeMode # `PangoEllipsizeMode`
function Gtk.ProgressBar:get_ellipsize() end

--- # method Gtk.ProgressBar:get_fraction()
---
--- Returns the current fraction of the task that’s been completed.
---
--- ---
---
---@param self Gtk.ProgressBar # a `GtkProgressBar`
---@return number # a fraction from 0.0 to 1.0
function Gtk.ProgressBar:get_fraction() end

--- # method Gtk.ProgressBar:get_inverted()
---
--- Gets the value set by `gtk_progress_bar_set_inverted()`.
---
--- ---
---
---@param self Gtk.ProgressBar # a `GtkProgressBar`
---@return (boolean|nil) # `true` if the progress bar is inverted
function Gtk.ProgressBar:get_inverted() end

--- # method Gtk.ProgressBar:get_pulse_step()
---
--- Retrieves the pulse step set with `gtk_progress_bar_set_pulse_step()`.
---
--- ---
---
---@param self Gtk.ProgressBar # a `GtkProgressBar`
---@return number # a fraction from 0.0 to 1.0
function Gtk.ProgressBar:get_pulse_step() end

--- # method Gtk.ProgressBar:get_show_text()
---
--- Gets the value of the `GtkProgressBar`:show-text property.
--- See `gtk_progress_bar_set_show_text()`.
---
--- ---
---
---@param self Gtk.ProgressBar # a `GtkProgressBar`
---@return (boolean|nil) # `true` if text is shown in the progress bar
function Gtk.ProgressBar:get_show_text() end

--- # method Gtk.ProgressBar:get_text()
---
--- Retrieves the text that is displayed with the progress bar,
--- if any, otherwise `nil`. The return value is a reference
--- to the text, not a copy of it, so will become invalid
--- if you change the text in the progress bar.
---
--- ---
---
---@param self Gtk.ProgressBar # a `GtkProgressBar`
---@return string # text, or `nil`; this string is owned by the widget and should not be modified or freed.
function Gtk.ProgressBar:get_text() end

--- # method Gtk.ProgressBar:pulse()
---
--- Indicates that some progress has been made, but you don’t know how much.
--- Causes the progress bar to enter “activity mode,” where a block
--- bounces back and forth. Each call to `gtk_progress_bar_pulse()`
--- causes the block to move by a little bit (the amount of movement
--- per pulse is determined by `gtk_progress_bar_set_pulse_step()`).
---
--- ---
---
---@param self Gtk.ProgressBar # a `GtkProgressBar`
---@return nil
function Gtk.ProgressBar:pulse() end

--- # method Gtk.ProgressBar:set_ellipsize()
---
--- Sets the mode used to ellipsize (add an ellipsis: "...") the
--- text if there is not enough space to render the entire string.
---
--- ---
---
---@param self Gtk.ProgressBar # a `GtkProgressBar`
---@param mode Pango.EllipsizeMode # a `PangoEllipsizeMode`
---@return nil
function Gtk.ProgressBar:set_ellipsize(mode) end

--- # method Gtk.ProgressBar:set_fraction()
---
--- Causes the progress bar to “fill in” the given fraction
--- of the bar. The fraction should be between 0.0 and 1.0,
--- inclusive.
---
--- ---
---
---@param self Gtk.ProgressBar # a `GtkProgressBar`
---@param fraction number # fraction of the task that’s been completed
---@return nil
function Gtk.ProgressBar:set_fraction(fraction) end

--- # method Gtk.ProgressBar:set_inverted()
---
--- Progress bars normally grow from top to bottom or left to right.
--- Inverted progress bars grow in the opposite direction.
---
--- ---
---
---@param self Gtk.ProgressBar # a `GtkProgressBar`
---@param inverted (boolean|nil) # `true` to invert the progress bar
---@return nil
function Gtk.ProgressBar:set_inverted(inverted) end

--- # method Gtk.ProgressBar:set_pulse_step()
---
--- Sets the fraction of total progress bar length to move the
--- bouncing block for each call to `gtk_progress_bar_pulse()`.
---
--- ---
---
---@param self Gtk.ProgressBar # a `GtkProgressBar`
---@param fraction number # fraction between 0.0 and 1.0
---@return nil
function Gtk.ProgressBar:set_pulse_step(fraction) end

--- # method Gtk.ProgressBar:set_show_text()
---
--- Sets whether the progress bar will show text next to the bar.
--- The shown text is either the value of the `GtkProgressBar`:text
--- property or, if that is `nil`, the `GtkProgressBar`:fraction value,
--- as a percentage.
--- 
--- To make a progress bar that is styled and sized suitably for containing
--- text (even if the actual text is blank), set `GtkProgressBar`:show-text to
--- `true` and `GtkProgressBar`:text to the empty string (not `nil`).
---
--- ---
---
---@param self Gtk.ProgressBar # a `GtkProgressBar`
---@param show_text (boolean|nil) # whether to show text
---@return nil
function Gtk.ProgressBar:set_show_text(show_text) end

--- # method Gtk.ProgressBar:set_text()
---
--- Causes the given `text` to appear next to the progress bar.
--- 
--- If `text` is `nil` and `GtkProgressBar`:show-text is `true`, the current
--- value of `GtkProgressBar`:fraction will be displayed as a percentage.
--- 
--- If `text` is non-`nil` and `GtkProgressBar`:show-text is `true`, the text
--- will be displayed. In this case, it will not display the progress
--- percentage. If `text` is the empty string, the progress bar will still
--- be styled and sized suitably for containing text, as long as
--- `GtkProgressBar`:show-text is `true`.
---
--- ---
---
---@param self Gtk.ProgressBar # a `GtkProgressBar`
---@param text? string # a UTF-8 string, or `nil`
---@return nil
function Gtk.ProgressBar:set_text(text) end

--- # function Gtk.ProgressBar.new()
---
--- Creates a new `GtkProgressBar`.
---
--- ---
---
---@return Gtk.Widget # a `GtkProgressBar`.
function Gtk.ProgressBar.new() end

--- # class Gtk.ProgressBarAccessible
---
---@class Gtk.ProgressBarAccessible : Gtk.WidgetAccessible, Gtk.Atk.Component, Gtk.Atk.Value
---@field parent Gtk.WidgetAccessible
---@field priv Gtk.ProgressBarAccessiblePrivate
Gtk.ProgressBarAccessible = {}

--- # record Gtk.ProgressBarAccessibleClass
---
---@class Gtk.ProgressBarAccessibleClass
---@field parent_class Gtk.WidgetAccessibleClass
Gtk.ProgressBarAccessibleClass = {}

--- # record Gtk.ProgressBarAccessiblePrivate
---
---@class Gtk.ProgressBarAccessiblePrivate
Gtk.ProgressBarAccessiblePrivate = {}

--- # record Gtk.ProgressBarClass
---
---@class Gtk.ProgressBarClass
---@field parent_class Gtk.WidgetClass
Gtk.ProgressBarClass = {}

--- # record Gtk.ProgressBarPrivate
---
---@class Gtk.ProgressBarPrivate
Gtk.ProgressBarPrivate = {}

---@enum Gtk.PropagationPhase
Gtk.PropagationPhase = {}

--- # class Gtk.RadioAction
---
--- A `GtkRadioAction` is similar to `GtkRadioMenuItem`. A number of radio
--- actions can be linked together so that only one may be active at any
--- one time.
---
--- ---
---
---@class Gtk.RadioAction : Gtk.ToggleAction, Gtk.Buildable
---@field parent Gtk.ToggleAction
---@field private_data Gtk.RadioActionPrivate
---@operator call: Gtk.RadioAction
Gtk.RadioAction = {}

--- # method Gtk.RadioAction:get_current_value()
---
--- Obtains the value property of the currently active member of
--- the group to which `action` belongs.
---
--- ---
---
---@param self Gtk.RadioAction # a `GtkRadioAction`
---@return integer # The value of the currently active group member
function Gtk.RadioAction:get_current_value() end

--- # method Gtk.RadioAction:get_group()
---
--- Returns the list representing the radio group for this object.
--- Note that the returned list is only valid until the next change
--- to the group.
--- 
--- A common way to set up a group of radio group is the following:
--- ```c
---   GSList *group = NULL;
---   GtkRadioAction *action;
---  
---   while ( ...more actions to add... /)
---     {
---        action = gtk_radio_action_new (...);
---        
---        gtk_radio_action_set_group (action, group);
---        group = gtk_radio_action_get_group (action);
---     }
--- ```
---
--- ---
---
---@param self Gtk.RadioAction # the action object
---@return Gtk.RadioAction[] # the list representing the radio group for this object
function Gtk.RadioAction:get_group() end

--- # method Gtk.RadioAction:join_group()
---
--- Joins a radio action object to the group of another radio action object.
--- 
--- Use this in language bindings instead of the `gtk_radio_action_get_group()`
--- and `gtk_radio_action_set_group()` methods
--- 
--- A common way to set up a group of radio actions is the following:
--- ```c
---   GtkRadioAction *action;
---   GtkRadioAction *last_action;
---  
---   while ( ...more actions to add... /)
---     {
---        action = gtk_radio_action_new (...);
---        
---        gtk_radio_action_join_group (action, last_action);
---        last_action = action;
---     }
--- ```
---
--- ---
---
---@param self Gtk.RadioAction # the action object
---@param group_source? Gtk.RadioAction # a radio action object whos group we are joining, or `nil` to remove the radio action from its group
---@return nil
function Gtk.RadioAction:join_group(group_source) end

--- # method Gtk.RadioAction:set_current_value()
---
--- Sets the currently active group member to the member with value
--- property `current_value`.
---
--- ---
---
---@param self Gtk.RadioAction # a `GtkRadioAction`
---@param current_value integer # the new value
---@return nil
function Gtk.RadioAction:set_current_value(current_value) end

--- # method Gtk.RadioAction:set_group()
---
--- Sets the radio group for the radio action object.
---
--- ---
---
---@param self Gtk.RadioAction # the action object
---@param group? Gtk.RadioAction[] # a list representing a radio group, or `nil`
---@return nil
function Gtk.RadioAction:set_group(group) end

--- # function Gtk.RadioAction.new()
---
--- Creates a new `GtkRadioAction` object. To add the action to
--- a `GtkActionGroup` and set the accelerator for the action,
--- call `gtk_action_group_add_action_with_accel()`.
---
--- ---
---
---@param name string # A unique name for the action
---@param label? string # The label displayed in menu items and on buttons, or `nil`
---@param tooltip? string # A tooltip for this action, or `nil`
---@param stock_id? string # The stock icon to display in widgets representing this action, or `nil`
---@param value integer # The value which `gtk_radio_action_get_current_value()` should return if this action is selected.
---@return Gtk.RadioAction # a new `GtkRadioAction`
function Gtk.RadioAction.new(name, label, tooltip, stock_id, value) end

--- # record Gtk.RadioActionClass
---
---@class Gtk.RadioActionClass
---@field parent_class Gtk.ToggleActionClass
---@field changed fun(action: Gtk.RadioAction, current: Gtk.RadioAction): nil
Gtk.RadioActionClass = {}

--- # record Gtk.RadioActionEntry
---
--- `GtkRadioActionEntry` structs are used with
--- `gtk_action_group_add_radio_actions()` to construct groups of radio actions.
---
--- ---
---
---@class Gtk.RadioActionEntry
---@field name string # The name of the action.
---@field stock_id string # The stock id for the action, or the name of an icon from the icon theme.
---@field label string # The label for the action. This field should typically be marked for translation, see `gtk_action_group_set_translation_domain()`.
---@field accelerator string # The accelerator for the action, in the format understood by `gtk_accelerator_parse()`.
---@field tooltip string # The tooltip for the action. This field should typically be marked for translation, see `gtk_action_group_set_translation_domain()`.
---@field value integer # The value to set on the radio action. See `gtk_radio_action_get_current_value()`.
Gtk.RadioActionEntry = {}

--- # record Gtk.RadioActionPrivate
---
---@class Gtk.RadioActionPrivate
Gtk.RadioActionPrivate = {}

--- # class Gtk.RadioButton
---
--- A single radio button performs the same basic function as a `GtkCheckButton`,
--- as its position in the object hierarchy reflects. It is only when multiple
--- radio buttons are grouped together that they become a different user
--- interface component in their own right.
--- 
--- Every radio button is a member of some group of radio buttons. When one is
--- selected, all other radio buttons in the same group are deselected. A
--- `GtkRadioButton` is one way of giving the user a choice from many options.
--- 
--- Radio button widgets are created with `gtk_radio_button_new()`, passing `nil`
--- as the argument if this is the first radio button in a group. In subsequent
--- calls, the group you wish to add this button to should be passed as an
--- argument. Optionally, `gtk_radio_button_new_with_label()` can be used if you
--- want a text label on the radio button.
--- 
--- Alternatively, when adding widgets to an existing group of radio buttons,
--- use `gtk_radio_button_new_from_widget()` with a `GtkRadioButton` that already
--- has a group assigned to it. The convenience function
--- `gtk_radio_button_new_with_label_from_widget()` is also provided.
--- 
--- To retrieve the group a `GtkRadioButton` is assigned to, use
--- `gtk_radio_button_get_group()`.
--- 
--- To remove a `GtkRadioButton` from one group and make it part of a new one,
--- use `gtk_radio_button_set_group()`.
--- 
--- The group list does not need to be freed, as each `GtkRadioButton` will remove
--- itself and its list item when it is destroyed.
--- 
--- # CSS nodes
--- 
--- ```plain
--- radiobutton
--- ├── radio
--- ╰── <child>
--- ```
--- 
--- A GtkRadioButton with indicator (see `gtk_toggle_button_set_mode()`) has a
--- main CSS node with name radiobutton and a subnode with name radio.
--- 
--- ```plain
--- button.radio
--- ├── radio
--- ╰── <child>
--- ```
--- 
--- A GtkRadioButton without indicator changes the name of its main node
--- to button and adds a .radio style class to it. The subnode is invisible
--- in this case.
--- 
--- ## How to create a group of two radio buttons.
--- 
--- ```c
--- void create_radio_buttons (void) {
--- 
---    GtkWidget *window, *radio1, *radio2, *box, *entry;
---    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
---    box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 2);
---    gtk_box_set_homogeneous (GTK_BOX (box), TRUE);
--- 
---    // Create a radio button with a GtkEntry widget
---    radio1 = gtk_radio_button_new (NULL);
---    entry = gtk_entry_new ();
---    gtk_container_add (GTK_CONTAINER (radio1), entry);
--- 
--- 
---    // Create a radio button with a label
---    radio2 = gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (radio1),
---                                                          "I’m the second radio button.");
--- 
---    // Pack them into a box, then show all the widgets
---    gtk_box_pack_start (GTK_BOX (box), radio1);
---    gtk_box_pack_start (GTK_BOX (box), radio2);
---    gtk_container_add (GTK_CONTAINER (window), box);
---    gtk_widget_show_all (window);
---    return;
--- }
--- ```
--- 
--- When an unselected button in the group is clicked the clicked button
--- receives the `GtkToggleButton`::toggled signal, as does the previously
--- selected button.
--- Inside the `GtkToggleButton`::toggled handler, `gtk_toggle_button_get_active()`
--- can be used to determine if the button has been selected or deselected.
---
--- ---
---
---@class Gtk.RadioButton : Gtk.CheckButton, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field check_button Gtk.CheckButton
---@field priv Gtk.RadioButtonPrivate
---@operator call: Gtk.RadioButton
Gtk.RadioButton = {}

--- # method Gtk.RadioButton:get_group()
---
--- Retrieves the group assigned to a radio button.
---
--- ---
---
---@param self Gtk.RadioButton # a `GtkRadioButton`.
---@return Gtk.RadioButton[] # a linked list containing all the radio buttons in the same group as `radio_button`. The returned list is owned by the radio button and must not be modified or freed.
function Gtk.RadioButton:get_group() end

--- # method Gtk.RadioButton:join_group()
---
--- Joins a `GtkRadioButton` object to the group of another `GtkRadioButton` object
--- 
--- Use this in language bindings instead of the `gtk_radio_button_get_group()`
--- and `gtk_radio_button_set_group()` methods
--- 
--- A common way to set up a group of radio buttons is the following:
--- ```c
---   GtkRadioButton *radio_button;
---   GtkRadioButton *last_button;
--- 
---   while (some_condition)
---     {
---        radio_button = gtk_radio_button_new (NULL);
--- 
---        gtk_radio_button_join_group (radio_button, last_button);
---        last_button = radio_button;
---     }
--- ```
---
--- ---
---
---@param self Gtk.RadioButton # the `GtkRadioButton` object
---@param group_source? Gtk.RadioButton # a radio button object whos group we are joining, or `nil` to remove the radio button from its group
---@return nil
function Gtk.RadioButton:join_group(group_source) end

--- # method Gtk.RadioButton:set_group()
---
--- Sets a `GtkRadioButton`’s group. It should be noted that this does not change
--- the layout of your interface in any way, so if you are changing the group,
--- it is likely you will need to re-arrange the user interface to reflect these
--- changes.
---
--- ---
---
---@param self Gtk.RadioButton # a `GtkRadioButton`.
---@param group? Gtk.RadioButton[] # an existing radio button group, such as one returned from `gtk_radio_button_get_group()`, or `nil`.
---@return nil
function Gtk.RadioButton:set_group(group) end

--- # function Gtk.RadioButton.new()
---
--- Creates a new `GtkRadioButton`. To be of any practical value, a widget should
--- then be packed into the radio button.
---
--- ---
---
---@param group? Gtk.RadioButton[] # an existing radio button group, or `nil` if you are creating a new group.
---@return Gtk.Widget # a new radio button
function Gtk.RadioButton.new(group) end

--- # function Gtk.RadioButton.new_from_widget()
---
--- Creates a new `GtkRadioButton`, adding it to the same group as
--- `radio_group_member`. As with `gtk_radio_button_new()`, a widget
--- should be packed into the radio button.
---
--- ---
---
---@param radio_group_member? Gtk.RadioButton # an existing `GtkRadioButton`.
---@return Gtk.Widget # a new radio button.
function Gtk.RadioButton.new_from_widget(radio_group_member) end

--- # function Gtk.RadioButton.new_with_label()
---
--- Creates a new `GtkRadioButton` with a text label.
---
--- ---
---
---@param group? Gtk.RadioButton[] # an existing radio button group, or `nil` if you are creating a new group.
---@param label string # the text label to display next to the radio button.
---@return Gtk.Widget # a new radio button.
function Gtk.RadioButton.new_with_label(group, label) end

--- # function Gtk.RadioButton.new_with_label_from_widget()
---
--- Creates a new `GtkRadioButton` with a text label, adding it to
--- the same group as `radio_group_member`.
---
--- ---
---
---@param radio_group_member? Gtk.RadioButton # widget to get radio group from or `nil`
---@param label string # a text string to display next to the radio button.
---@return Gtk.Widget # a new radio button.
function Gtk.RadioButton.new_with_label_from_widget(radio_group_member, label) end

--- # function Gtk.RadioButton.new_with_mnemonic()
---
--- Creates a new `GtkRadioButton` containing a label, adding it to the same
--- group as `group`. The label will be created using
--- `gtk_label_new_with_mnemonic()`, so underscores in `label` indicate the
--- mnemonic for the button.
---
--- ---
---
---@param group? Gtk.RadioButton[] # the radio button group, or `nil`
---@param label string # the text of the button, with an underscore in front of the mnemonic character
---@return Gtk.Widget # a new `GtkRadioButton`
function Gtk.RadioButton.new_with_mnemonic(group, label) end

--- # function Gtk.RadioButton.new_with_mnemonic_from_widget()
---
--- Creates a new `GtkRadioButton` containing a label. The label
--- will be created using `gtk_label_new_with_mnemonic()`, so underscores
--- in `label` indicate the mnemonic for the button.
---
--- ---
---
---@param radio_group_member? Gtk.RadioButton # widget to get radio group from or `nil`
---@param label string # the text of the button, with an underscore in front of the mnemonic character
---@return Gtk.Widget # a new `GtkRadioButton`
function Gtk.RadioButton.new_with_mnemonic_from_widget(radio_group_member, label) end

--- # class Gtk.RadioButtonAccessible
---
---@class Gtk.RadioButtonAccessible : Gtk.ToggleButtonAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.Image
---@field parent Gtk.ToggleButtonAccessible
---@field priv Gtk.RadioButtonAccessiblePrivate
Gtk.RadioButtonAccessible = {}

--- # record Gtk.RadioButtonAccessibleClass
---
---@class Gtk.RadioButtonAccessibleClass
---@field parent_class Gtk.ToggleButtonAccessibleClass
Gtk.RadioButtonAccessibleClass = {}

--- # record Gtk.RadioButtonAccessiblePrivate
---
---@class Gtk.RadioButtonAccessiblePrivate
Gtk.RadioButtonAccessiblePrivate = {}

--- # record Gtk.RadioButtonClass
---
---@class Gtk.RadioButtonClass
---@field parent_class Gtk.CheckButtonClass
---@field group_changed fun(radio_button: Gtk.RadioButton): nil
Gtk.RadioButtonClass = {}

--- # record Gtk.RadioButtonPrivate
---
---@class Gtk.RadioButtonPrivate
Gtk.RadioButtonPrivate = {}

--- # class Gtk.RadioMenuItem
---
--- A radio menu item is a check menu item that belongs to a group. At each
--- instant exactly one of the radio menu items from a group is selected.
--- 
--- The group list does not need to be freed, as each `GtkRadioMenuItem` will
--- remove itself and its list item when it is destroyed.
--- 
--- The correct way to create a group of radio menu items is approximatively
--- this:
--- 
--- ## How to create a group of radio menu items.
--- 
--- ```c
--- GSList *group = NULL;
--- GtkWidget *item;
--- gint i;
--- 
--- for (i = 0; i < 5; i++)
--- {
---   item = gtk_radio_menu_item_new_with_label (group, "This is an example");
---   group = gtk_radio_menu_item_get_group (GTK_RADIO_MENU_ITEM (item));
---   if (i == 1)
---     gtk_check_menu_item_set_active (GTK_CHECK_MENU_ITEM (item), TRUE);
--- }
--- ```
--- 
--- # CSS nodes
--- 
--- ```plain
--- menuitem
--- ├── radio.left
--- ╰── <child>
--- ```
--- 
--- GtkRadioMenuItem has a main CSS node with name menuitem, and a subnode
--- with name radio, which gets the .left or .right style class.
---
--- ---
---
---@class Gtk.RadioMenuItem : Gtk.CheckMenuItem, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field check_menu_item Gtk.CheckMenuItem
---@field priv Gtk.RadioMenuItemPrivate
---@operator call: Gtk.RadioMenuItem
Gtk.RadioMenuItem = {}

--- # method Gtk.RadioMenuItem:get_group()
---
--- Returns the group to which the radio menu item belongs, as a `GList` of
--- `GtkRadioMenuItem`. The list belongs to GTK+ and should not be freed.
---
--- ---
---
---@param self Gtk.RadioMenuItem # a `GtkRadioMenuItem`
---@return Gtk.RadioMenuItem[] # the group of `radio_menu_item`
function Gtk.RadioMenuItem:get_group() end

--- # method Gtk.RadioMenuItem:join_group()
---
--- Joins a `GtkRadioMenuItem` object to the group of another `GtkRadioMenuItem`
--- object.
--- 
--- This function should be used by language bindings to avoid the memory
--- manangement of the opaque `GSList` of `gtk_radio_menu_item_get_group()`
--- and `gtk_radio_menu_item_set_group()`.
--- 
--- A common way to set up a group of `GtkRadioMenuItem` instances is:
--- 
--- ```c
---   GtkRadioMenuItem *last_item = NULL;
--- 
---   while ( ...more items to add... )
---     {
---       GtkRadioMenuItem *radio_item;
--- 
---       radio_item = gtk_radio_menu_item_new (...);
--- 
---       gtk_radio_menu_item_join_group (radio_item, last_item);
---       last_item = radio_item;
---     }
--- ```
---
--- ---
---
---@param self Gtk.RadioMenuItem # a `GtkRadioMenuItem`
---@param group_source? Gtk.RadioMenuItem # a `GtkRadioMenuItem` whose group we are joining, or `nil` to remove the `radio_menu_item` from its current group
---@return nil
function Gtk.RadioMenuItem:join_group(group_source) end

--- # method Gtk.RadioMenuItem:set_group()
---
--- Sets the group of a radio menu item, or changes it.
---
--- ---
---
---@param self Gtk.RadioMenuItem # a `GtkRadioMenuItem`.
---@param group? Gtk.RadioMenuItem[] # the new group, or `nil`.
---@return nil
function Gtk.RadioMenuItem:set_group(group) end

--- # function Gtk.RadioMenuItem.new()
---
--- Creates a new `GtkRadioMenuItem`.
---
--- ---
---
---@param group? Gtk.RadioMenuItem[] # the group to which the radio menu item is to be attached, or `nil`
---@return Gtk.Widget # a new `GtkRadioMenuItem`
function Gtk.RadioMenuItem.new(group) end

--- # function Gtk.RadioMenuItem.new_from_widget()
---
--- Creates a new `GtkRadioMenuItem` adding it to the same group as `group`.
---
--- ---
---
---@param group? Gtk.RadioMenuItem # An existing `GtkRadioMenuItem`
---@return Gtk.Widget # The new `GtkRadioMenuItem`
function Gtk.RadioMenuItem.new_from_widget(group) end

--- # function Gtk.RadioMenuItem.new_with_label()
---
--- Creates a new `GtkRadioMenuItem` whose child is a simple `GtkLabel`.
---
--- ---
---
---@param group? Gtk.RadioMenuItem[] # group the radio menu item is inside, or `nil`
---@param label string # the text for the label
---@return Gtk.Widget # A new `GtkRadioMenuItem`
function Gtk.RadioMenuItem.new_with_label(group, label) end

--- # function Gtk.RadioMenuItem.new_with_label_from_widget()
---
--- Creates a new GtkRadioMenuItem whose child is a simple GtkLabel.
--- The new `GtkRadioMenuItem` is added to the same group as `group`.
---
--- ---
---
---@param group? Gtk.RadioMenuItem # an existing `GtkRadioMenuItem`
---@param label? string # the text for the label
---@return Gtk.Widget # The new `GtkRadioMenuItem`
function Gtk.RadioMenuItem.new_with_label_from_widget(group, label) end

--- # function Gtk.RadioMenuItem.new_with_mnemonic()
---
--- Creates a new `GtkRadioMenuItem` containing a label. The label
--- will be created using `gtk_label_new_with_mnemonic()`, so underscores
--- in `label` indicate the mnemonic for the menu item.
---
--- ---
---
---@param group? Gtk.RadioMenuItem[] # group the radio menu item is inside, or `nil`
---@param label string # the text of the button, with an underscore in front of the mnemonic character
---@return Gtk.Widget # a new `GtkRadioMenuItem`
function Gtk.RadioMenuItem.new_with_mnemonic(group, label) end

--- # function Gtk.RadioMenuItem.new_with_mnemonic_from_widget()
---
--- Creates a new GtkRadioMenuItem containing a label. The label will be
--- created using `gtk_label_new_with_mnemonic()`, so underscores in label
--- indicate the mnemonic for the menu item.
--- 
--- The new `GtkRadioMenuItem` is added to the same group as `group`.
---
--- ---
---
---@param group? Gtk.RadioMenuItem # An existing `GtkRadioMenuItem`
---@param label? string # the text of the button, with an underscore in front of the mnemonic character
---@return Gtk.Widget # The new `GtkRadioMenuItem`
function Gtk.RadioMenuItem.new_with_mnemonic_from_widget(group, label) end

--- # class Gtk.RadioMenuItemAccessible
---
---@class Gtk.RadioMenuItemAccessible : Gtk.CheckMenuItemAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.Selection
---@field parent Gtk.CheckMenuItemAccessible
---@field priv Gtk.RadioMenuItemAccessiblePrivate
Gtk.RadioMenuItemAccessible = {}

--- # record Gtk.RadioMenuItemAccessibleClass
---
---@class Gtk.RadioMenuItemAccessibleClass
---@field parent_class Gtk.CheckMenuItemAccessibleClass
Gtk.RadioMenuItemAccessibleClass = {}

--- # record Gtk.RadioMenuItemAccessiblePrivate
---
---@class Gtk.RadioMenuItemAccessiblePrivate
Gtk.RadioMenuItemAccessiblePrivate = {}

--- # record Gtk.RadioMenuItemClass
---
---@class Gtk.RadioMenuItemClass
---@field parent_class Gtk.CheckMenuItemClass
---@field group_changed fun(radio_menu_item: Gtk.RadioMenuItem): nil
Gtk.RadioMenuItemClass = {}

--- # record Gtk.RadioMenuItemPrivate
---
---@class Gtk.RadioMenuItemPrivate
Gtk.RadioMenuItemPrivate = {}

--- # class Gtk.RadioToolButton
---
--- A `GtkRadioToolButton` is a `GtkToolItem` that contains a radio button,
--- that is, a button that is part of a group of toggle buttons where only
--- one button can be active at a time.
--- 
--- Use `gtk_radio_tool_button_new()` to create a new GtkRadioToolButton. Use
--- `gtk_radio_tool_button_new_from_widget()` to create a new GtkRadioToolButton
--- that is part of the same group as an existing GtkRadioToolButton.
--- 
--- # CSS nodes
--- 
--- GtkRadioToolButton has a single CSS node with name toolbutton.
---
--- ---
---
---@class Gtk.RadioToolButton : Gtk.ToggleToolButton, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field parent Gtk.ToggleToolButton
---@operator call: Gtk.RadioToolButton
Gtk.RadioToolButton = {}

--- # method Gtk.RadioToolButton:get_group()
---
--- Returns the radio button group `button` belongs to.
---
--- ---
---
---@param self Gtk.RadioToolButton # a `GtkRadioToolButton`
---@return Gtk.RadioButton[] # The group `button` belongs to.
function Gtk.RadioToolButton:get_group() end

--- # method Gtk.RadioToolButton:set_group()
---
--- Adds `button` to `group`, removing it from the group it belonged to before.
---
--- ---
---
---@param self Gtk.RadioToolButton # a `GtkRadioToolButton`
---@param group? Gtk.RadioButton[] # an existing radio button group, or `nil`
---@return nil
function Gtk.RadioToolButton:set_group(group) end

--- # function Gtk.RadioToolButton.new()
---
--- Creates a new `GtkRadioToolButton`, adding it to `group`.
---
--- ---
---
---@param group? Gtk.RadioButton[] # An existing radio button group, or `nil` if you are creating a new group
---@return Gtk.ToolItem # The new `GtkRadioToolButton`
function Gtk.RadioToolButton.new(group) end

--- # function Gtk.RadioToolButton.new_from_stock()
---
--- Creates a new `GtkRadioToolButton`, adding it to `group`.
--- The new `GtkRadioToolButton` will contain an icon and label from the
--- stock item indicated by `stock_id`.
---
--- ---
---
---@param group? Gtk.RadioButton[] # an existing radio button group, or `nil` if you are creating a new group
---@param stock_id string # the name of a stock item
---@return Gtk.ToolItem # The new `GtkRadioToolButton`
function Gtk.RadioToolButton.new_from_stock(group, stock_id) end

--- # function Gtk.RadioToolButton.new_from_widget()
---
--- Creates a new `GtkRadioToolButton` adding it to the same group as `gruup`
---
--- ---
---
---@param group? Gtk.RadioToolButton # An existing `GtkRadioToolButton`, or `nil`
---@return Gtk.ToolItem # The new `GtkRadioToolButton`
function Gtk.RadioToolButton.new_from_widget(group) end

--- # function Gtk.RadioToolButton.new_with_stock_from_widget()
---
--- Creates a new `GtkRadioToolButton` adding it to the same group as `group`.
--- The new `GtkRadioToolButton` will contain an icon and label from the
--- stock item indicated by `stock_id`.
---
--- ---
---
---@param group? Gtk.RadioToolButton # An existing `GtkRadioToolButton`.
---@param stock_id string # the name of a stock item
---@return Gtk.ToolItem # A new `GtkRadioToolButton`
function Gtk.RadioToolButton.new_with_stock_from_widget(group, stock_id) end

--- # record Gtk.RadioToolButtonClass
---
---@class Gtk.RadioToolButtonClass
---@field parent_class Gtk.ToggleToolButtonClass
Gtk.RadioToolButtonClass = {}

--- # class Gtk.Range
---
--- `GtkRange` is the common base class for widgets which visualize an
--- adjustment, e.g `GtkScale` or `GtkScrollbar`.
--- 
--- Apart from signals for monitoring the parameters of the adjustment,
--- `GtkRange` provides properties and methods for influencing the sensitivity
--- of the “steppers”. It also provides properties and methods for setting a
--- “fill level” on range widgets. See `gtk_range_set_fill_level()`.
---
--- ---
---
---@class Gtk.Range : Gtk.Widget, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field widget Gtk.Widget
---@field priv Gtk.RangePrivate
Gtk.Range = {}

--- # method Gtk.Range:get_adjustment()
---
--- Get the `GtkAdjustment` which is the “model” object for `GtkRange`.
--- See `gtk_range_set_adjustment()` for details.
--- The return value does not have a reference added, so should not
--- be unreferenced.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@return Gtk.Adjustment # a `GtkAdjustment`
function Gtk.Range:get_adjustment() end

--- # method Gtk.Range:get_fill_level()
---
--- Gets the current position of the fill level indicator.
---
--- ---
---
---@param self Gtk.Range # A `GtkRange`
---@return number # The current fill level
function Gtk.Range:get_fill_level() end

--- # method Gtk.Range:get_flippable()
---
--- Gets the value set by `gtk_range_set_flippable()`.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@return (boolean|nil) # `true` if the range is flippable
function Gtk.Range:get_flippable() end

--- # method Gtk.Range:get_inverted()
---
--- Gets the value set by `gtk_range_set_inverted()`.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@return (boolean|nil) # `true` if the range is inverted
function Gtk.Range:get_inverted() end

--- # method Gtk.Range:get_lower_stepper_sensitivity()
---
--- Gets the sensitivity policy for the stepper that points to the
--- 'lower' end of the GtkRange’s adjustment.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@return Gtk.SensitivityType # The lower stepper’s sensitivity policy.
function Gtk.Range:get_lower_stepper_sensitivity() end

--- # method Gtk.Range:get_min_slider_size()
---
--- This function is useful mainly for `GtkRange` subclasses.
--- 
--- See `gtk_range_set_min_slider_size()`.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@return integer # The minimum size of the range’s slider.
function Gtk.Range:get_min_slider_size() end

--- # method Gtk.Range:get_range_rect()
---
--- This function returns the area that contains the range’s trough
--- and its steppers, in widget->window coordinates.
--- 
--- This function is useful mainly for `GtkRange` subclasses.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@param range_rect Gdk.Rectangle # return location for the range rectangle
---@return nil
function Gtk.Range:get_range_rect(range_rect) end

--- # method Gtk.Range:get_restrict_to_fill_level()
---
--- Gets whether the range is restricted to the fill level.
---
--- ---
---
---@param self Gtk.Range # A `GtkRange`
---@return (boolean|nil) # `true` if `range` is restricted to the fill level.
function Gtk.Range:get_restrict_to_fill_level() end

--- # method Gtk.Range:get_round_digits()
---
--- Gets the number of digits to round the value to when
--- it changes. See `GtkRange`::change-value.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@return integer # the number of digits to round to
function Gtk.Range:get_round_digits() end

--- # method Gtk.Range:get_show_fill_level()
---
--- Gets whether the range displays the fill level graphically.
---
--- ---
---
---@param self Gtk.Range # A `GtkRange`
---@return (boolean|nil) # `true` if `range` shows the fill level.
function Gtk.Range:get_show_fill_level() end

--- # method Gtk.Range:get_slider_range()
---
--- This function returns sliders range along the long dimension,
--- in widget->window coordinates.
--- 
--- This function is useful mainly for `GtkRange` subclasses.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@param slider_start? integer # return location for the slider's start, or `nil`
---@param slider_end? integer # return location for the slider's end, or `nil`
---@return nil
function Gtk.Range:get_slider_range(slider_start, slider_end) end

--- # method Gtk.Range:get_slider_size_fixed()
---
--- This function is useful mainly for `GtkRange` subclasses.
--- 
--- See `gtk_range_set_slider_size_fixed()`.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@return (boolean|nil) # whether the range’s slider has a fixed size.
function Gtk.Range:get_slider_size_fixed() end

--- # method Gtk.Range:get_upper_stepper_sensitivity()
---
--- Gets the sensitivity policy for the stepper that points to the
--- 'upper' end of the GtkRange’s adjustment.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@return Gtk.SensitivityType # The upper stepper’s sensitivity policy.
function Gtk.Range:get_upper_stepper_sensitivity() end

--- # method Gtk.Range:get_value()
---
--- Gets the current value of the range.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@return number # current value of the range.
function Gtk.Range:get_value() end

--- # method Gtk.Range:set_adjustment()
---
--- Sets the adjustment to be used as the “model” object for this range
--- widget. The adjustment indicates the current range value, the
--- minimum and maximum range values, the step/page increments used
--- for keybindings and scrolling, and the page size. The page size
--- is normally 0 for `GtkScale` and nonzero for `GtkScrollbar`, and
--- indicates the size of the visible area of the widget being scrolled.
--- The page size affects the size of the scrollbar slider.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@param adjustment Gtk.Adjustment # a `GtkAdjustment`
---@return nil
function Gtk.Range:set_adjustment(adjustment) end

--- # method Gtk.Range:set_fill_level()
---
--- Set the new position of the fill level indicator.
--- 
--- The “fill level” is probably best described by its most prominent
--- use case, which is an indicator for the amount of pre-buffering in
--- a streaming media player. In that use case, the value of the range
--- would indicate the current play position, and the fill level would
--- be the position up to which the file/stream has been downloaded.
--- 
--- This amount of prebuffering can be displayed on the range’s trough
--- and is themeable separately from the trough. To enable fill level
--- display, use `gtk_range_set_show_fill_level()`. The range defaults
--- to not showing the fill level.
--- 
--- Additionally, it’s possible to restrict the range’s slider position
--- to values which are smaller than the fill level. This is controller
--- by `gtk_range_set_restrict_to_fill_level()` and is by default
--- enabled.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@param fill_level number # the new position of the fill level indicator
---@return nil
function Gtk.Range:set_fill_level(fill_level) end

--- # method Gtk.Range:set_flippable()
---
--- If a range is flippable, it will switch its direction if it is
--- horizontal and its direction is %GTK_TEXT_DIR_RTL.
--- 
--- See `gtk_widget_get_direction()`.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@param flippable (boolean|nil) # `true` to make the range flippable
---@return nil
function Gtk.Range:set_flippable(flippable) end

--- # method Gtk.Range:set_increments()
---
--- Sets the step and page sizes for the range.
--- The step size is used when the user clicks the `GtkScrollbar`
--- arrows or moves `GtkScale` via arrow keys. The page size
--- is used for example when moving via Page Up or Page Down keys.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@param step number # step size
---@param page number # page size
---@return nil
function Gtk.Range:set_increments(step, page) end

--- # method Gtk.Range:set_inverted()
---
--- Ranges normally move from lower to higher values as the
--- slider moves from top to bottom or left to right. Inverted
--- ranges have higher values at the top or on the right rather than
--- on the bottom or left.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@param setting (boolean|nil) # `true` to invert the range
---@return nil
function Gtk.Range:set_inverted(setting) end

--- # method Gtk.Range:set_lower_stepper_sensitivity()
---
--- Sets the sensitivity policy for the stepper that points to the
--- 'lower' end of the GtkRange’s adjustment.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@param sensitivity Gtk.SensitivityType # the lower stepper’s sensitivity policy.
---@return nil
function Gtk.Range:set_lower_stepper_sensitivity(sensitivity) end

--- # method Gtk.Range:set_min_slider_size()
---
--- Sets the minimum size of the range’s slider.
--- 
--- This function is useful mainly for `GtkRange` subclasses.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@param min_size integer # The slider’s minimum size
---@return nil
function Gtk.Range:set_min_slider_size(min_size) end

--- # method Gtk.Range:set_range()
---
--- Sets the allowable values in the `GtkRange`, and clamps the range
--- value to be between `min` and `max`. (If the range has a non-zero
--- page size, it is clamped between `min` and `max` - page-size.)
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@param min number # minimum range value
---@param max number # maximum range value
---@return nil
function Gtk.Range:set_range(min, max) end

--- # method Gtk.Range:set_restrict_to_fill_level()
---
--- Sets whether the slider is restricted to the fill level. See
--- `gtk_range_set_fill_level()` for a general description of the fill
--- level concept.
---
--- ---
---
---@param self Gtk.Range # A `GtkRange`
---@param restrict_to_fill_level (boolean|nil) # Whether the fill level restricts slider movement.
---@return nil
function Gtk.Range:set_restrict_to_fill_level(restrict_to_fill_level) end

--- # method Gtk.Range:set_round_digits()
---
--- Sets the number of digits to round the value to when
--- it changes. See `GtkRange`::change-value.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@param round_digits integer # the precision in digits, or -1
---@return nil
function Gtk.Range:set_round_digits(round_digits) end

--- # method Gtk.Range:set_show_fill_level()
---
--- Sets whether a graphical fill level is show on the trough. See
--- `gtk_range_set_fill_level()` for a general description of the fill
--- level concept.
---
--- ---
---
---@param self Gtk.Range # A `GtkRange`
---@param show_fill_level (boolean|nil) # Whether a fill level indicator graphics is shown.
---@return nil
function Gtk.Range:set_show_fill_level(show_fill_level) end

--- # method Gtk.Range:set_slider_size_fixed()
---
--- Sets whether the range’s slider has a fixed size, or a size that
--- depends on its adjustment’s page size.
--- 
--- This function is useful mainly for `GtkRange` subclasses.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@param size_fixed (boolean|nil) # `true` to make the slider size constant
---@return nil
function Gtk.Range:set_slider_size_fixed(size_fixed) end

--- # method Gtk.Range:set_upper_stepper_sensitivity()
---
--- Sets the sensitivity policy for the stepper that points to the
--- 'upper' end of the GtkRange’s adjustment.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@param sensitivity Gtk.SensitivityType # the upper stepper’s sensitivity policy.
---@return nil
function Gtk.Range:set_upper_stepper_sensitivity(sensitivity) end

--- # method Gtk.Range:set_value()
---
--- Sets the current value of the range; if the value is outside the
--- minimum or maximum range values, it will be clamped to fit inside
--- them. The range emits the `GtkRange`::value-changed signal if the
--- value changes.
---
--- ---
---
---@param self Gtk.Range # a `GtkRange`
---@param value number # new value of the range
---@return nil
function Gtk.Range:set_value(value) end

--- # class Gtk.RangeAccessible
---
---@class Gtk.RangeAccessible : Gtk.WidgetAccessible, Gtk.Atk.Component, Gtk.Atk.Value
---@field parent Gtk.WidgetAccessible
---@field priv Gtk.RangeAccessiblePrivate
Gtk.RangeAccessible = {}

--- # record Gtk.RangeAccessibleClass
---
---@class Gtk.RangeAccessibleClass
---@field parent_class Gtk.WidgetAccessibleClass
Gtk.RangeAccessibleClass = {}

--- # record Gtk.RangeAccessiblePrivate
---
---@class Gtk.RangeAccessiblePrivate
Gtk.RangeAccessiblePrivate = {}

--- # record Gtk.RangeClass
---
---@class Gtk.RangeClass
---@field parent_class Gtk.WidgetClass
---@field slider_detail string
---@field stepper_detail string
---@field value_changed fun(range: Gtk.Range): nil
---@field adjust_bounds fun(range: Gtk.Range, new_value: number): nil
---@field move_slider fun(range: Gtk.Range, scroll: Gtk.ScrollType): nil
---@field get_range_border fun(range: Gtk.Range, border_: Gtk.Border): nil
---@field change_value fun(range: Gtk.Range, scroll: Gtk.ScrollType, new_value: number): (boolean|nil)
---@field get_range_size_request fun(range: Gtk.Range, orientation: Gtk.Orientation, minimum: integer, natural: integer): nil
Gtk.RangeClass = {}

--- # record Gtk.RangePrivate
---
---@class Gtk.RangePrivate
Gtk.RangePrivate = {}

--- # record Gtk.RcContext
---
---@class Gtk.RcContext
Gtk.RcContext = {}

---@enum Gtk.RcFlags
Gtk.RcFlags = {}

--- # record Gtk.RcProperty
---
--- Deprecated
---
--- ---
---
---@class Gtk.RcProperty
---@field type_name GLib.Quark # quark-ified type identifier
---@field property_name GLib.Quark # quark-ified property identifier like “GtkScrollbar::spacing”
---@field origin string # field similar to one found in `GtkSettingsValue`
---@field value GObject.Value # field similar to one found in `GtkSettingsValue`
Gtk.RcProperty = {}

--- # function Gtk.RcProperty.parse_border()
---
--- A `GtkRcPropertyParser` for use with `gtk_settings_install_property_parser()`
--- or `gtk_widget_class_install_style_property_parser()` which parses
--- borders in the form
--- `"{ left, right, top, bottom }"` for integers
--- left, right, top and bottom.
---
--- ---
---
---@param pspec GObject.ParamSpec # a `GParamSpec`
---@param gstring GLib.String # the `GString` to be parsed
---@param property_value GObject.Value # a `GValue` which must hold boxed values.
---@return (boolean|nil) # `true` if `gstring` could be parsed and `property_value` has been set to the resulting `GtkBorder`.
function Gtk.RcProperty.parse_border(pspec, gstring, property_value) end

--- # function Gtk.RcProperty.parse_color()
---
--- A `GtkRcPropertyParser` for use with `gtk_settings_install_property_parser()`
--- or `gtk_widget_class_install_style_property_parser()` which parses a
--- color given either by its name or in the form
--- `{ red, green, blue }` where red, green and
--- blue are integers between 0 and 65535 or floating-point numbers
--- between 0 and 1.
---
--- ---
---
---@param pspec GObject.ParamSpec # a `GParamSpec`
---@param gstring GLib.String # the `GString` to be parsed
---@param property_value GObject.Value # a `GValue` which must hold `GdkColor` values.
---@return (boolean|nil) # `true` if `gstring` could be parsed and `property_value` has been set to the resulting `GdkColor`.
function Gtk.RcProperty.parse_color(pspec, gstring, property_value) end

--- # function Gtk.RcProperty.parse_enum()
---
--- A `GtkRcPropertyParser` for use with `gtk_settings_install_property_parser()`
--- or `gtk_widget_class_install_style_property_parser()` which parses a single
--- enumeration value.
--- 
--- The enumeration value can be specified by its name, its nickname or
--- its numeric value. For consistency with flags parsing, the value
--- may be surrounded by parentheses.
---
--- ---
---
---@param pspec GObject.ParamSpec # a `GParamSpec`
---@param gstring GLib.String # the `GString` to be parsed
---@param property_value GObject.Value # a `GValue` which must hold enum values.
---@return (boolean|nil) # `true` if `gstring` could be parsed and `property_value` has been set to the resulting `GEnumValue`.
function Gtk.RcProperty.parse_enum(pspec, gstring, property_value) end

--- # function Gtk.RcProperty.parse_flags()
---
--- A `GtkRcPropertyParser` for use with `gtk_settings_install_property_parser()`
--- or `gtk_widget_class_install_style_property_parser()` which parses flags.
--- 
--- Flags can be specified by their name, their nickname or
--- numerically. Multiple flags can be specified in the form
--- `"( flag1 | flag2 | ... )"`.
---
--- ---
---
---@param pspec GObject.ParamSpec # a `GParamSpec`
---@param gstring GLib.String # the `GString` to be parsed
---@param property_value GObject.Value # a `GValue` which must hold flags values.
---@return (boolean|nil) # `true` if `gstring` could be parsed and `property_value` has been set to the resulting flags value.
function Gtk.RcProperty.parse_flags(pspec, gstring, property_value) end

--- # function Gtk.RcProperty.parse_requisition()
---
--- A `GtkRcPropertyParser` for use with `gtk_settings_install_property_parser()`
--- or `gtk_widget_class_install_style_property_parser()` which parses a
--- requisition in the form
--- `"{ width, height }"` for integers %width and %height.
---
--- ---
---
---@param pspec GObject.ParamSpec # a `GParamSpec`
---@param gstring GLib.String # the `GString` to be parsed
---@param property_value GObject.Value # a `GValue` which must hold boxed values.
---@return (boolean|nil) # `true` if `gstring` could be parsed and `property_value` has been set to the resulting `GtkRequisition`.
function Gtk.RcProperty.parse_requisition(pspec, gstring, property_value) end

---@alias Gtk.RcPropertyParser fun(pspec: GObject.ParamSpec, rc_string: GLib.String, property_value: GObject.Value): (boolean|nil)

--- # class Gtk.RcStyle
---
--- The `GtkRcStyle`-struct is used to represent a set
--- of information about the appearance of a widget.
--- This can later be composited together with other
--- `GtkRcStyle`-struct<!-- -->s to form a `GtkStyle`.
---
--- ---
---
---@class Gtk.RcStyle : GObject.Object
---@field parent_instance GObject.Object
---@field name string # Name
---@field bg_pixmap_name unknown[] # Pixmap name
---@field font_desc Pango.FontDescription # A `PangoFontDescription`
---@field color_flags unknown[] # `GtkRcFlags`
---@field fg unknown[] # Foreground colors
---@field bg unknown[] # Background colors
---@field text unknown[] # Text colors
---@field base unknown[] # Base colors
---@field xthickness integer # X thickness
---@field ythickness integer # Y thickness
---@field rc_properties unknown[]
---@field rc_style_lists userdata[]
---@field icon_factories userdata[]
---@field engine_specified integer
---@operator call: Gtk.RcStyle
Gtk.RcStyle = {}

--- # method Gtk.RcStyle:copy()
---
--- Makes a copy of the specified `GtkRcStyle`. This function
--- will correctly copy an RC style that is a member of a class
--- derived from `GtkRcStyle`.
---
--- ---
---
---@param self Gtk.RcStyle # the style to copy
---@return Gtk.RcStyle # the resulting `GtkRcStyle`
function Gtk.RcStyle:copy() end

--- # function Gtk.RcStyle.new()
---
--- Creates a new `GtkRcStyle` with no fields set and
--- a reference count of 1.
---
--- ---
---
---@return Gtk.RcStyle # the newly-created `GtkRcStyle`
function Gtk.RcStyle.new() end

--- # record Gtk.RcStyleClass
---
---@class Gtk.RcStyleClass
---@field parent_class GObject.ObjectClass # The parent class.
---@field parse fun(rc_style: Gtk.RcStyle, settings: Gtk.Settings, scanner: GLib.Scanner): integer
---@field merge fun(dest: Gtk.RcStyle, src: Gtk.RcStyle): nil
Gtk.RcStyleClass = {}

---@enum Gtk.RcTokenType
Gtk.RcTokenType = {}

--- # class Gtk.RecentAction
---
--- A `GtkRecentAction` represents a list of recently used files, which
--- can be shown by widgets such as `GtkRecentChooserDialog` or
--- `GtkRecentChooserMenu`.
--- 
--- To construct a submenu showing recently used files, use a `GtkRecentAction`
--- as the action for a `<menuitem>`. To construct a menu toolbutton showing
--- the recently used files in the popup menu, use a `GtkRecentAction` as the
--- action for a `<toolitem>` element.
---
--- ---
---
---@class Gtk.RecentAction : Gtk.Action, Gtk.Buildable, Gtk.RecentChooser
---@field parent_instance Gtk.Action
---@field priv Gtk.RecentActionPrivate
---@operator call: Gtk.RecentAction
Gtk.RecentAction = {}

--- # method Gtk.RecentAction:get_show_numbers()
---
--- Returns the value set by `gtk_recent_chooser_menu_set_show_numbers()`.
---
--- ---
---
---@param self Gtk.RecentAction # a `GtkRecentAction`
---@return (boolean|nil) # `true` if numbers should be shown.
function Gtk.RecentAction:get_show_numbers() end

--- # method Gtk.RecentAction:set_show_numbers()
---
--- Sets whether a number should be added to the items shown by the
--- widgets representing `action`. The numbers are shown to provide
--- a unique character for a mnemonic to be used inside the menu item's
--- label. Only the first ten items get a number to avoid clashes.
---
--- ---
---
---@param self Gtk.RecentAction # a `GtkRecentAction`
---@param show_numbers (boolean|nil) # `true` if the shown items should be numbered
---@return nil
function Gtk.RecentAction:set_show_numbers(show_numbers) end

--- # function Gtk.RecentAction.new()
---
--- Creates a new `GtkRecentAction` object. To add the action to
--- a `GtkActionGroup` and set the accelerator for the action,
--- call `gtk_action_group_add_action_with_accel()`.
---
--- ---
---
---@param name string # a unique name for the action
---@param label? string # the label displayed in menu items and on buttons, or `nil`
---@param tooltip? string # a tooltip for the action, or `nil`
---@param stock_id? string # the stock icon to display in widgets representing the action, or `nil`
---@return Gtk.Action # the newly created `GtkRecentAction`.
function Gtk.RecentAction.new(name, label, tooltip, stock_id) end

--- # function Gtk.RecentAction.new_for_manager()
---
--- Creates a new `GtkRecentAction` object. To add the action to
--- a `GtkActionGroup` and set the accelerator for the action,
--- call `gtk_action_group_add_action_with_accel()`.
---
--- ---
---
---@param name string # a unique name for the action
---@param label? string # the label displayed in menu items and on buttons, or `nil`
---@param tooltip? string # a tooltip for the action, or `nil`
---@param stock_id? string # the stock icon to display in widgets representing the action, or `nil`
---@param manager? Gtk.RecentManager # a `GtkRecentManager`, or `nil` for using the default `GtkRecentManager`
---@return Gtk.Action # the newly created `GtkRecentAction`
function Gtk.RecentAction.new_for_manager(name, label, tooltip, stock_id, manager) end

--- # record Gtk.RecentActionClass
---
---@class Gtk.RecentActionClass
---@field parent_class Gtk.ActionClass
Gtk.RecentActionClass = {}

--- # record Gtk.RecentActionPrivate
---
---@class Gtk.RecentActionPrivate
Gtk.RecentActionPrivate = {}

--- # interface Gtk.RecentChooser
---
--- `GtkRecentChooser` is an interface that can be implemented by widgets
--- displaying the list of recently used files.  In GTK+, the main objects
--- that implement this interface are `GtkRecentChooserWidget`,
--- `GtkRecentChooserDialog` and `GtkRecentChooserMenu`.
--- 
--- Recently used files are supported since GTK+ 2.10.
---
--- ---
---
---@class Gtk.RecentChooser
Gtk.RecentChooser = {}

--- # method Gtk.RecentChooser:add_filter()
---
--- Adds `filter` to the list of `GtkRecentFilter` objects held by `chooser`.
--- 
--- If no previous filter objects were defined, this function will call
--- `gtk_recent_chooser_set_filter()`.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@param filter Gtk.RecentFilter # a `GtkRecentFilter`
---@return nil
function Gtk.RecentChooser:add_filter(filter) end

--- # method Gtk.RecentChooser:get_current_item()
---
--- Gets the `GtkRecentInfo` currently selected by `chooser`.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@return Gtk.RecentInfo # a `GtkRecentInfo`. Use `gtk_recent_info_unref()` when when you have finished using it.
function Gtk.RecentChooser:get_current_item() end

--- # method Gtk.RecentChooser:get_current_uri()
---
--- Gets the URI currently selected by `chooser`.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@return string # a newly allocated string holding a URI.
function Gtk.RecentChooser:get_current_uri() end

--- # method Gtk.RecentChooser:get_filter()
---
--- Gets the `GtkRecentFilter` object currently used by `chooser` to affect
--- the display of the recently used resources.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@return Gtk.RecentFilter # a `GtkRecentFilter` object.
function Gtk.RecentChooser:get_filter() end

--- # method Gtk.RecentChooser:get_items()
---
--- Gets the list of recently used resources in form of `GtkRecentInfo` objects.
--- 
--- The return value of this function is affected by the “sort-type” and
--- “limit” properties of `chooser`.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@return Gtk.RecentInfo[] # A newly allocated list of `GtkRecentInfo` objects. You should use `gtk_recent_info_unref()` on every item of the list, and then free the list itself using `g_list_free()`.
function Gtk.RecentChooser:get_items() end

--- # method Gtk.RecentChooser:get_limit()
---
--- Gets the number of items returned by `gtk_recent_chooser_get_items()`
--- and `gtk_recent_chooser_get_uris()`.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@return integer # A positive integer, or -1 meaning that all items are returned.
function Gtk.RecentChooser:get_limit() end

--- # method Gtk.RecentChooser:get_local_only()
---
--- Gets whether only local resources should be shown in the recently used
--- resources selector.  See `gtk_recent_chooser_set_local_only()`
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@return (boolean|nil) # `true` if only local resources should be shown.
function Gtk.RecentChooser:get_local_only() end

--- # method Gtk.RecentChooser:get_select_multiple()
---
--- Gets whether `chooser` can select multiple items.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@return (boolean|nil) # `true` if `chooser` can select more than one item.
function Gtk.RecentChooser:get_select_multiple() end

--- # method Gtk.RecentChooser:get_show_icons()
---
--- Retrieves whether `chooser` should show an icon near the resource.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@return (boolean|nil) # `true` if the icons should be displayed, `false` otherwise.
function Gtk.RecentChooser:get_show_icons() end

--- # method Gtk.RecentChooser:get_show_not_found()
---
--- Retrieves whether `chooser` should show the recently used resources that
--- were not found.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@return (boolean|nil) # `true` if the resources not found should be displayed, and `false` otheriwse.
function Gtk.RecentChooser:get_show_not_found() end

--- # method Gtk.RecentChooser:get_show_private()
---
--- Returns whether `chooser` should display recently used resources
--- registered as private.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@return (boolean|nil) # `true` if the recent chooser should show private items, `false` otherwise.
function Gtk.RecentChooser:get_show_private() end

--- # method Gtk.RecentChooser:get_show_tips()
---
--- Gets whether `chooser` should display tooltips containing the full path
--- of a recently user resource.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@return (boolean|nil) # `true` if the recent chooser should show tooltips, `false` otherwise.
function Gtk.RecentChooser:get_show_tips() end

--- # method Gtk.RecentChooser:get_sort_type()
---
--- Gets the value set by `gtk_recent_chooser_set_sort_type()`.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@return Gtk.RecentSortType # the sorting order of the `chooser`.
function Gtk.RecentChooser:get_sort_type() end

--- # method Gtk.RecentChooser:get_uris()
---
--- Gets the URI of the recently used resources.
--- 
--- The return value of this function is affected by the “sort-type” and “limit”
--- properties of `chooser`.
--- 
--- Since the returned array is `nil` terminated, `length` may be `nil`.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@param length? integer # return location for a the length of the URI list, or `nil`
---@return unknown[] # A newly allocated, `nil`-terminated array of strings. Use `g_strfreev()` to free it.
function Gtk.RecentChooser:get_uris(length) end

--- # method Gtk.RecentChooser:list_filters()
---
--- Gets the `GtkRecentFilter` objects held by `chooser`.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@return Gtk.RecentFilter[] # A singly linked list of `GtkRecentFilter` objects. You should just free the returned list using `g_slist_free()`.
function Gtk.RecentChooser:list_filters() end

--- # method Gtk.RecentChooser:remove_filter()
---
--- Removes `filter` from the list of `GtkRecentFilter` objects held by `chooser`.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@param filter Gtk.RecentFilter # a `GtkRecentFilter`
---@return nil
function Gtk.RecentChooser:remove_filter(filter) end

--- # method Gtk.RecentChooser:select_all()
---
--- Selects all the items inside `chooser`, if the `chooser` supports
--- multiple selection.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@return nil
function Gtk.RecentChooser:select_all() end

--- # method Gtk.RecentChooser:select_uri()
---
--- Selects `uri` inside `chooser`.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@param uri string # a URI
---@return (boolean|nil) # `true` if `uri` was found.
function Gtk.RecentChooser:select_uri(uri) end

--- # method Gtk.RecentChooser:set_current_uri()
---
--- Sets `uri` as the current URI for `chooser`.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@param uri string # a URI
---@return (boolean|nil) # `true` if the URI was found.
function Gtk.RecentChooser:set_current_uri(uri) end

--- # method Gtk.RecentChooser:set_filter()
---
--- Sets `filter` as the current `GtkRecentFilter` object used by `chooser`
--- to affect the displayed recently used resources.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@param filter? Gtk.RecentFilter # a `GtkRecentFilter`
---@return nil
function Gtk.RecentChooser:set_filter(filter) end

--- # method Gtk.RecentChooser:set_limit()
---
--- Sets the number of items that should be returned by
--- `gtk_recent_chooser_get_items()` and `gtk_recent_chooser_get_uris()`.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@param limit integer # a positive integer, or -1 for all items
---@return nil
function Gtk.RecentChooser:set_limit(limit) end

--- # method Gtk.RecentChooser:set_local_only()
---
--- Sets whether only local resources, that is resources using the file:// URI
--- scheme, should be shown in the recently used resources selector.  If
--- `local_only` is `true` (the default) then the shown resources are guaranteed
--- to be accessible through the operating system native file system.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@param local_only (boolean|nil) # `true` if only local files can be shown
---@return nil
function Gtk.RecentChooser:set_local_only(local_only) end

--- # method Gtk.RecentChooser:set_select_multiple()
---
--- Sets whether `chooser` can select multiple items.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@param select_multiple (boolean|nil) # `true` if `chooser` can select more than one item
---@return nil
function Gtk.RecentChooser:set_select_multiple(select_multiple) end

--- # method Gtk.RecentChooser:set_show_icons()
---
--- Sets whether `chooser` should show an icon near the resource when
--- displaying it.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@param show_icons (boolean|nil) # whether to show an icon near the resource
---@return nil
function Gtk.RecentChooser:set_show_icons(show_icons) end

--- # method Gtk.RecentChooser:set_show_not_found()
---
--- Sets whether `chooser` should display the recently used resources that
--- it didn’t find.  This only applies to local resources.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@param show_not_found (boolean|nil) # whether to show the local items we didn’t find
---@return nil
function Gtk.RecentChooser:set_show_not_found(show_not_found) end

--- # method Gtk.RecentChooser:set_show_private()
---
--- Whether to show recently used resources marked registered as private.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@param show_private (boolean|nil) # `true` to show private items, `false` otherwise
---@return nil
function Gtk.RecentChooser:set_show_private(show_private) end

--- # method Gtk.RecentChooser:set_show_tips()
---
--- Sets whether to show a tooltips containing the full path of each
--- recently used resource in a `GtkRecentChooser` widget.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@param show_tips (boolean|nil) # `true` if tooltips should be shown
---@return nil
function Gtk.RecentChooser:set_show_tips(show_tips) end

--- # method Gtk.RecentChooser:set_sort_func()
---
--- Sets the comparison function used when sorting to be `sort_func`.  If
--- the `chooser` has the sort type set to `GTK_RECENT_SORT_CUSTOM` then
--- the chooser will sort using this function.
--- 
--- To the comparison function will be passed two `GtkRecentInfo` structs and
--- `sort_data`;  `sort_func` should return a positive integer if the first
--- item comes before the second, zero if the two items are equal and
--- a negative integer if the first item comes after the second.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@param sort_func Gtk.RecentSortFunc # the comparison function
---@param sort_data? userdata # user data to pass to `sort_func`, or `nil`
---@param data_destroy? GLib.DestroyNotify # destroy notifier for `sort_data`, or `nil`
---@return nil
function Gtk.RecentChooser:set_sort_func(sort_func, sort_data, data_destroy) end

--- # method Gtk.RecentChooser:set_sort_type()
---
--- Changes the sorting order of the recently used resources list displayed by
--- `chooser`.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@param sort_type Gtk.RecentSortType # sort order that the chooser should use
---@return nil
function Gtk.RecentChooser:set_sort_type(sort_type) end

--- # method Gtk.RecentChooser:unselect_all()
---
--- Unselects all the items inside `chooser`.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@return nil
function Gtk.RecentChooser:unselect_all() end

--- # method Gtk.RecentChooser:unselect_uri()
---
--- Unselects `uri` inside `chooser`.
---
--- ---
---
---@param self Gtk.RecentChooser # a `GtkRecentChooser`
---@param uri string # a URI
---@return nil
function Gtk.RecentChooser:unselect_uri(uri) end

--- # class Gtk.RecentChooserDialog
---
--- `GtkRecentChooserDialog` is a dialog box suitable for displaying the recently
--- used documents.  This widgets works by putting a `GtkRecentChooserWidget` inside
--- a `GtkDialog`.  It exposes the `GtkRecentChooserIface` interface, so you can use
--- all the `GtkRecentChooser` functions on the recent chooser dialog as well as
--- those for `GtkDialog`.
--- 
--- Note that `GtkRecentChooserDialog` does not have any methods of its own.
--- Instead, you should use the functions that work on a `GtkRecentChooser`.
--- 
--- ## Typical usage ## {`gtkrecentchooser`-typical-usage}
--- 
--- In the simplest of cases, you can use the following code to use
--- a `GtkRecentChooserDialog` to select a recently used file:
--- 
--- ```c
--- GtkWidget *dialog;
--- gint res;
--- 
--- dialog = gtk_recent_chooser_dialog_new ("Recent Documents",
---                                         parent_window,
---                                         _("_Cancel"),
---                                         GTK_RESPONSE_CANCEL,
---                                         _("_Open"),
---                                         GTK_RESPONSE_ACCEPT,
---                                         NULL);
--- 
--- res = gtk_dialog_run (GTK_DIALOG (dialog));
--- if (res == GTK_RESPONSE_ACCEPT)
---   {
---     GtkRecentInfo *info;
---     GtkRecentChooser *chooser = GTK_RECENT_CHOOSER (dialog);
--- 
---     info = gtk_recent_chooser_get_current_item (chooser);
---     open_file (gtk_recent_info_get_uri (info));
---     gtk_recent_info_unref (info);
---   }
--- 
--- gtk_widget_destroy (dialog);
--- ```
--- 
--- Recently used files are supported since GTK+ 2.10.
---
--- ---
---
---@class Gtk.RecentChooserDialog : Gtk.Dialog, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.RecentChooser
---@field parent_instance Gtk.Dialog
---@field priv Gtk.RecentChooserDialogPrivate
Gtk.RecentChooserDialog = {}

--- # record Gtk.RecentChooserDialogClass
---
---@class Gtk.RecentChooserDialogClass
---@field parent_class Gtk.DialogClass
Gtk.RecentChooserDialogClass = {}

--- # record Gtk.RecentChooserDialogPrivate
---
---@class Gtk.RecentChooserDialogPrivate
Gtk.RecentChooserDialogPrivate = {}

---@enum Gtk.RecentChooserError
Gtk.RecentChooserError = {}

--- # record Gtk.RecentChooserIface
---
---@class Gtk.RecentChooserIface
---@field base_iface GObject.TypeInterface
---@field set_current_uri fun(chooser: Gtk.RecentChooser, uri: string): (boolean|nil)
---@field get_current_uri fun(chooser: Gtk.RecentChooser): string
---@field select_uri fun(chooser: Gtk.RecentChooser, uri: string): (boolean|nil)
---@field unselect_uri fun(chooser: Gtk.RecentChooser, uri: string): nil
---@field select_all fun(chooser: Gtk.RecentChooser): nil
---@field unselect_all fun(chooser: Gtk.RecentChooser): nil
---@field get_items fun(chooser: Gtk.RecentChooser): Gtk.RecentInfo[]
---@field add_filter fun(chooser: Gtk.RecentChooser, filter: Gtk.RecentFilter): nil
---@field remove_filter fun(chooser: Gtk.RecentChooser, filter: Gtk.RecentFilter): nil
---@field list_filters fun(chooser: Gtk.RecentChooser): Gtk.RecentFilter[]
---@field set_sort_func fun(chooser: Gtk.RecentChooser, sort_func: Gtk.RecentSortFunc, sort_data: userdata, data_destroy: GLib.DestroyNotify): nil
---@field item_activated fun(chooser: Gtk.RecentChooser): nil
---@field selection_changed fun(chooser: Gtk.RecentChooser): nil
Gtk.RecentChooserIface = {}

--- # class Gtk.RecentChooserMenu
---
--- `GtkRecentChooserMenu` is a widget suitable for displaying recently used files
--- inside a menu.  It can be used to set a sub-menu of a `GtkMenuItem` using
--- `gtk_menu_item_set_submenu()`, or as the menu of a `GtkMenuToolButton`.
--- 
--- Note that `GtkRecentChooserMenu` does not have any methods of its own. Instead,
--- you should use the functions that work on a `GtkRecentChooser`.
--- 
--- Note also that `GtkRecentChooserMenu` does not support multiple filters, as it
--- has no way to let the user choose between them as the `GtkRecentChooserWidget`
--- and `GtkRecentChooserDialog` widgets do. Thus using `gtk_recent_chooser_add_filter()`
--- on a `GtkRecentChooserMenu` widget will yield the same effects as using
--- `gtk_recent_chooser_set_filter()`, replacing any currently set filter
--- with the supplied filter; `gtk_recent_chooser_remove_filter()` will remove
--- any currently set `GtkRecentFilter` object and will unset the current filter;
--- `gtk_recent_chooser_list_filters()` will return a list containing a single
--- `GtkRecentFilter` object.
--- 
--- Recently used files are supported since GTK+ 2.10.
---
--- ---
---
---@class Gtk.RecentChooserMenu : Gtk.Menu, Gtk.Atk.ImplementorIface, Gtk.Activatable, Gtk.Buildable, Gtk.RecentChooser
---@field parent_instance Gtk.Menu
---@field priv Gtk.RecentChooserMenuPrivate
---@operator call: Gtk.RecentChooserMenu
Gtk.RecentChooserMenu = {}

--- # method Gtk.RecentChooserMenu:get_show_numbers()
---
--- Returns the value set by `gtk_recent_chooser_menu_set_show_numbers()`.
---
--- ---
---
---@param self Gtk.RecentChooserMenu # a `GtkRecentChooserMenu`
---@return (boolean|nil) # `true` if numbers should be shown.
function Gtk.RecentChooserMenu:get_show_numbers() end

--- # method Gtk.RecentChooserMenu:set_show_numbers()
---
--- Sets whether a number should be added to the items of `menu`.  The
--- numbers are shown to provide a unique character for a mnemonic to
--- be used inside ten menu item’s label.  Only the first the items
--- get a number to avoid clashes.
---
--- ---
---
---@param self Gtk.RecentChooserMenu # a `GtkRecentChooserMenu`
---@param show_numbers (boolean|nil) # whether to show numbers
---@return nil
function Gtk.RecentChooserMenu:set_show_numbers(show_numbers) end

--- # function Gtk.RecentChooserMenu.new()
---
--- Creates a new `GtkRecentChooserMenu` widget.
--- 
--- This kind of widget shows the list of recently used resources as
--- a menu, each item as a menu item.  Each item inside the menu might
--- have an icon, representing its MIME type, and a number, for mnemonic
--- access.
--- 
--- This widget implements the `GtkRecentChooser` interface.
--- 
--- This widget creates its own `GtkRecentManager` object.  See the
--- `gtk_recent_chooser_menu_new_for_manager()` function to know how to create
--- a `GtkRecentChooserMenu` widget bound to another `GtkRecentManager` object.
---
--- ---
---
---@return Gtk.Widget # a new `GtkRecentChooserMenu`
function Gtk.RecentChooserMenu.new() end

--- # function Gtk.RecentChooserMenu.new_for_manager()
---
--- Creates a new `GtkRecentChooserMenu` widget using `manager` as
--- the underlying recently used resources manager.
--- 
--- This is useful if you have implemented your own recent manager,
--- or if you have a customized instance of a `GtkRecentManager`
--- object or if you wish to share a common `GtkRecentManager` object
--- among multiple `GtkRecentChooser` widgets.
---
--- ---
---
---@param manager Gtk.RecentManager # a `GtkRecentManager`
---@return Gtk.Widget # a new `GtkRecentChooserMenu`, bound to `manager`.
function Gtk.RecentChooserMenu.new_for_manager(manager) end

--- # record Gtk.RecentChooserMenuClass
---
---@class Gtk.RecentChooserMenuClass
---@field parent_class Gtk.MenuClass
---@field gtk_recent1 fun(): nil
---@field gtk_recent2 fun(): nil
---@field gtk_recent3 fun(): nil
---@field gtk_recent4 fun(): nil
Gtk.RecentChooserMenuClass = {}

--- # record Gtk.RecentChooserMenuPrivate
---
---@class Gtk.RecentChooserMenuPrivate
Gtk.RecentChooserMenuPrivate = {}

--- # class Gtk.RecentChooserWidget
---
--- `GtkRecentChooserWidget` is a widget suitable for selecting recently used
--- files.  It is the main building block of a `GtkRecentChooserDialog`.  Most
--- applications will only need to use the latter; you can use
--- `GtkRecentChooserWidget` as part of a larger window if you have special needs.
--- 
--- Note that `GtkRecentChooserWidget` does not have any methods of its own.
--- Instead, you should use the functions that work on a `GtkRecentChooser`.
--- 
--- Recently used files are supported since GTK+ 2.10.
---
--- ---
---
---@class Gtk.RecentChooserWidget : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable, Gtk.RecentChooser
---@field parent_instance Gtk.Box
---@field priv Gtk.RecentChooserWidgetPrivate
---@operator call: Gtk.RecentChooserWidget
Gtk.RecentChooserWidget = {}

--- # function Gtk.RecentChooserWidget.new()
---
--- Creates a new `GtkRecentChooserWidget` object.  This is an embeddable widget
--- used to access the recently used resources list.
---
--- ---
---
---@return Gtk.Widget # a new `GtkRecentChooserWidget`
function Gtk.RecentChooserWidget.new() end

--- # function Gtk.RecentChooserWidget.new_for_manager()
---
--- Creates a new `GtkRecentChooserWidget` with a specified recent manager.
--- 
--- This is useful if you have implemented your own recent manager, or if you
--- have a customized instance of a `GtkRecentManager` object.
---
--- ---
---
---@param manager Gtk.RecentManager # a `GtkRecentManager`
---@return Gtk.Widget # a new `GtkRecentChooserWidget`
function Gtk.RecentChooserWidget.new_for_manager(manager) end

--- # record Gtk.RecentChooserWidgetClass
---
---@class Gtk.RecentChooserWidgetClass
---@field parent_class Gtk.BoxClass
Gtk.RecentChooserWidgetClass = {}

--- # record Gtk.RecentChooserWidgetPrivate
---
---@class Gtk.RecentChooserWidgetPrivate
Gtk.RecentChooserWidgetPrivate = {}

--- # record Gtk.RecentData
---
--- Meta-data to be passed to `gtk_recent_manager_add_full()` when
--- registering a recently used resource.
---
--- ---
---
---@class Gtk.RecentData
---@field display_name string # a UTF-8 encoded string, containing the name of the recently used resource to be displayed, or `nil`;
---@field description string # a UTF-8 encoded string, containing a short description of the resource, or `nil`;
---@field mime_type string # the MIME type of the resource;
---@field app_name string # the name of the application that is registering this recently used resource;
---@field app_exec string # command line used to launch this resource; may contain the “\%f” and “\%u” escape characters which will be expanded to the resource file path and URI respectively when the command line is retrieved;
---@field groups unknown[] # a vector of strings containing groups names;
---@field is_private (boolean|nil) # whether this resource should be displayed only by the applications that have registered it or not.
Gtk.RecentData = {}

--- # class Gtk.RecentFilter
---
--- A `GtkRecentFilter` can be used to restrict the files being shown
--- in a `GtkRecentChooser`.  Files can be filtered based on their name
--- (with `gtk_recent_filter_add_pattern()`), on their mime type (with
--- `gtk_file_filter_add_mime_type()`), on the application that has
--- registered them (with `gtk_recent_filter_add_application()`), or by
--- a custom filter function (with `gtk_recent_filter_add_custom()`).
--- 
--- Filtering by mime type handles aliasing and subclassing of mime
--- types; e.g. a filter for text/plain also matches a file with mime
--- type application/rtf, since application/rtf is a subclass of text/plain.
--- Note that `GtkRecentFilter` allows wildcards for the subtype of a
--- mime type, so you can e.g. filter for image/\*.
--- 
--- Normally, filters are used by adding them to a `GtkRecentChooser`,
--- see `gtk_recent_chooser_add_filter()`, but it is also possible to
--- manually use a filter on a file with `gtk_recent_filter_filter()`.
--- 
--- Recently used files are supported since GTK+ 2.10.
--- 
--- ## GtkRecentFilter as GtkBuildable
--- 
--- The GtkRecentFilter implementation of the GtkBuildable interface
--- supports adding rules using the `<mime-types>`, `<patterns>` and
--- `<applications>` elements and listing the rules within. Specifying
--- a `<mime-type>`, `<pattern>` or `<application>` has the same effect as
--- calling `gtk_recent_filter_add_mime_type()`,
--- `gtk_recent_filter_add_pattern()` or `gtk_recent_filter_add_application()`.
--- 
--- An example of a UI definition fragment specifying `GtkRecentFilter`
--- rules:
--- 
--- ```xml
--- <object class="GtkRecentFilter">
---   <mime-types>
---     <mime-type>text/plain</mime-type>
---     <mime-type>image/png</mime-type>
---   </mime-types>
---   <patterns>
---     <pattern>*.txt</pattern>
---     <pattern>*.png</pattern>
---   </patterns>
---   <applications>
---     <application>gimp</application>
---     <application>gedit</application>
---     <application>glade</application>
---   </applications>
--- </object>
--- ```
---
--- ---
---
---@class Gtk.RecentFilter : GObject.InitiallyUnowned, Gtk.Buildable
---@operator call: Gtk.RecentFilter
Gtk.RecentFilter = {}

--- # method Gtk.RecentFilter:add_age()
---
--- Adds a rule that allows resources based on their age - that is, the number
--- of days elapsed since they were last modified.
---
--- ---
---
---@param self Gtk.RecentFilter # a `GtkRecentFilter`
---@param days integer # number of days
---@return nil
function Gtk.RecentFilter:add_age(days) end

--- # method Gtk.RecentFilter:add_application()
---
--- Adds a rule that allows resources based on the name of the application
--- that has registered them.
---
--- ---
---
---@param self Gtk.RecentFilter # a `GtkRecentFilter`
---@param application string # an application name
---@return nil
function Gtk.RecentFilter:add_application(application) end

--- # method Gtk.RecentFilter:add_custom()
---
--- Adds a rule to a filter that allows resources based on a custom callback
--- function. The bitfield `needed` which is passed in provides information
--- about what sorts of information that the filter function needs;
--- this allows GTK+ to avoid retrieving expensive information when
--- it isn’t needed by the filter.
---
--- ---
---
---@param self Gtk.RecentFilter # a `GtkRecentFilter`
---@param needed Gtk.RecentFilterFlags # bitfield of flags indicating the information that the custom filter function needs.
---@param func Gtk.RecentFilterFunc # callback function; if the function returns `true`, then the file will be displayed.
---@param data? userdata # data to pass to `func`
---@param data_destroy GLib.DestroyNotify # function to call to free `data` when it is no longer needed.
---@return nil
function Gtk.RecentFilter:add_custom(needed, func, data, data_destroy) end

--- # method Gtk.RecentFilter:add_group()
---
--- Adds a rule that allows resources based on the name of the group
--- to which they belong
---
--- ---
---
---@param self Gtk.RecentFilter # a `GtkRecentFilter`
---@param group string # a group name
---@return nil
function Gtk.RecentFilter:add_group(group) end

--- # method Gtk.RecentFilter:add_mime_type()
---
--- Adds a rule that allows resources based on their registered MIME type.
---
--- ---
---
---@param self Gtk.RecentFilter # a `GtkRecentFilter`
---@param mime_type string # a MIME type
---@return nil
function Gtk.RecentFilter:add_mime_type(mime_type) end

--- # method Gtk.RecentFilter:add_pattern()
---
--- Adds a rule that allows resources based on a pattern matching their
--- display name.
---
--- ---
---
---@param self Gtk.RecentFilter # a `GtkRecentFilter`
---@param pattern string # a file pattern
---@return nil
function Gtk.RecentFilter:add_pattern(pattern) end

--- # method Gtk.RecentFilter:add_pixbuf_formats()
---
--- Adds a rule allowing image files in the formats supported
--- by GdkPixbuf.
---
--- ---
---
---@param self Gtk.RecentFilter # a `GtkRecentFilter`
---@return nil
function Gtk.RecentFilter:add_pixbuf_formats() end

--- # method Gtk.RecentFilter:filter()
---
--- Tests whether a file should be displayed according to `filter`.
--- The `GtkRecentFilterInfo` `filter_info` should include
--- the fields returned from `gtk_recent_filter_get_needed()`, and
--- must set the `GtkRecentFilterInfo`.contains field of `filter_info`
--- to indicate which fields have been set.
--- 
--- This function will not typically be used by applications; it
--- is intended principally for use in the implementation of
--- `GtkRecentChooser`.
---
--- ---
---
---@param self Gtk.RecentFilter # a `GtkRecentFilter`
---@param filter_info Gtk.RecentFilterInfo # a `GtkRecentFilterInfo` containing information about a recently used resource
---@return (boolean|nil) # `true` if the file should be displayed
function Gtk.RecentFilter:filter(filter_info) end

--- # method Gtk.RecentFilter:get_name()
---
--- Gets the human-readable name for the filter.
--- See `gtk_recent_filter_set_name()`.
---
--- ---
---
---@param self Gtk.RecentFilter # a `GtkRecentFilter`
---@return string # the name of the filter, or `nil`. The returned string is owned by the filter object and should not be freed.
function Gtk.RecentFilter:get_name() end

--- # method Gtk.RecentFilter:get_needed()
---
--- Gets the fields that need to be filled in for the `GtkRecentFilterInfo`
--- passed to `gtk_recent_filter_filter()`
--- 
--- This function will not typically be used by applications; it
--- is intended principally for use in the implementation of
--- `GtkRecentChooser`.
---
--- ---
---
---@param self Gtk.RecentFilter # a `GtkRecentFilter`
---@return Gtk.RecentFilterFlags # bitfield of flags indicating needed fields when calling `gtk_recent_filter_filter()`
function Gtk.RecentFilter:get_needed() end

--- # method Gtk.RecentFilter:set_name()
---
--- Sets the human-readable name of the filter; this is the string
--- that will be displayed in the recently used resources selector
--- user interface if there is a selectable list of filters.
---
--- ---
---
---@param self Gtk.RecentFilter # a `GtkRecentFilter`
---@param name string # then human readable name of `filter`
---@return nil
function Gtk.RecentFilter:set_name(name) end

--- # function Gtk.RecentFilter.new()
---
--- Creates a new `GtkRecentFilter` with no rules added to it.
--- Such filter does not accept any recently used resources, so is not
--- particularly useful until you add rules with
--- `gtk_recent_filter_add_pattern()`, `gtk_recent_filter_add_mime_type()`,
--- `gtk_recent_filter_add_application()`, `gtk_recent_filter_add_age()`.
--- To create a filter that accepts any recently used resource, use:
--- ```c
--- GtkRecentFilter *filter = gtk_recent_filter_new ();
--- gtk_recent_filter_add_pattern (filter, "*");
--- ```
---
--- ---
---
---@return Gtk.RecentFilter # a new `GtkRecentFilter`
function Gtk.RecentFilter.new() end

---@enum Gtk.RecentFilterFlags
Gtk.RecentFilterFlags = {}

---@alias Gtk.RecentFilterFunc fun(filter_info: Gtk.RecentFilterInfo, user_data: userdata): (boolean|nil)

--- # record Gtk.RecentFilterInfo
---
--- A GtkRecentFilterInfo struct is used
--- to pass information about the tested file to `gtk_recent_filter_filter()`.
---
--- ---
---
---@class Gtk.RecentFilterInfo
---@field contains Gtk.RecentFilterFlags # `GtkRecentFilterFlags` to indicate which fields are set.
---@field uri string # The URI of the file being tested.
---@field display_name string # The string that will be used to display the file in the recent chooser.
---@field mime_type string # MIME type of the file.
---@field applications unknown[] # The list of applications that have registered the file.
---@field groups unknown[] # The groups to which the file belongs to.
---@field age integer # The number of days elapsed since the file has been registered.
Gtk.RecentFilterInfo = {}

--- # record Gtk.RecentInfo
---
--- `GtkRecentInfo`-struct contains private data only, and should
--- be accessed using the provided API.
--- 
--- `GtkRecentInfo` constains all the meta-data
--- associated with an entry in the recently used files list.
---
--- ---
---
---@class Gtk.RecentInfo
Gtk.RecentInfo = {}

--- # method Gtk.RecentInfo:create_app_info()
---
--- Creates a `GAppInfo` for the specified `GtkRecentInfo`
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@param app_name? string # the name of the application that should be mapped to a `GAppInfo`; if `nil` is used then the default application for the MIME type is used
---@return Gio.AppInfo # the newly created `GAppInfo`, or `nil`. In case of error, `error` will be set either with a %GTK_RECENT_MANAGER_ERROR or a %G_IO_ERROR
function Gtk.RecentInfo:create_app_info(app_name) end

--- # method Gtk.RecentInfo:exists()
---
--- Checks whether the resource pointed by `info` still exists.
--- At the moment this check is done only on resources pointing
--- to local files.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@return (boolean|nil) # `true` if the resource exists
function Gtk.RecentInfo:exists() end

--- # method Gtk.RecentInfo:get_added()
---
--- Gets the timestamp (seconds from system’s Epoch) when the resource
--- was added to the recently used resources list.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@return integer # the number of seconds elapsed from system’s Epoch when the resource was added to the list, or -1 on failure.
function Gtk.RecentInfo:get_added() end

--- # method Gtk.RecentInfo:get_age()
---
--- Gets the number of days elapsed since the last update
--- of the resource pointed by `info`.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@return integer # a positive integer containing the number of days elapsed since the time this resource was last modified
function Gtk.RecentInfo:get_age() end

--- # method Gtk.RecentInfo:get_application_info()
---
--- Gets the data regarding the application that has registered the resource
--- pointed by `info`.
--- 
--- If the command line contains any escape characters defined inside the
--- storage specification, they will be expanded.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@param app_name string # the name of the application that has registered this item
---@param app_exec string # return location for the string containing the command line
---@param count integer # return location for the number of times this item was registered
---@param time_ integer # return location for the timestamp this item was last registered for this application
---@return (boolean|nil) # `true` if an application with `app_name` has registered this resource inside the recently used list, or `false` otherwise. The `app_exec` string is owned by the `GtkRecentInfo` and should not be modified or freed
function Gtk.RecentInfo:get_application_info(app_name, app_exec, count, time_) end

--- # method Gtk.RecentInfo:get_applications()
---
--- Retrieves the list of applications that have registered this resource.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@param length? integer # return location for the length of the returned list
---@return unknown[] # a newly allocated `nil`-terminated array of strings. Use `g_strfreev()` to free it.
function Gtk.RecentInfo:get_applications(length) end

--- # method Gtk.RecentInfo:get_description()
---
--- Gets the (short) description of the resource.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@return string # the description of the resource. The returned string is owned by the recent manager, and should not be freed.
function Gtk.RecentInfo:get_description() end

--- # method Gtk.RecentInfo:get_display_name()
---
--- Gets the name of the resource. If none has been defined, the basename
--- of the resource is obtained.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@return string # the display name of the resource. The returned string is owned by the recent manager, and should not be freed.
function Gtk.RecentInfo:get_display_name() end

--- # method Gtk.RecentInfo:get_gicon()
---
--- Retrieves the icon associated to the resource MIME type.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@return Gio.Icon # a `GIcon` containing the icon, or `nil`. Use `g_object_unref()` when finished using the icon
function Gtk.RecentInfo:get_gicon() end

--- # method Gtk.RecentInfo:get_groups()
---
--- Returns all groups registered for the recently used item `info`.
--- The array of returned group names will be `nil` terminated, so
--- length might optionally be `nil`.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@param length? integer # return location for the number of groups returned
---@return unknown[] # a newly allocated `nil` terminated array of strings. Use `g_strfreev()` to free it.
function Gtk.RecentInfo:get_groups(length) end

--- # method Gtk.RecentInfo:get_icon()
---
--- Retrieves the icon of size `size` associated to the resource MIME type.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@param size integer # the size of the icon in pixels
---@return GdkPixbuf.Pixbuf # a `GdkPixbuf` containing the icon, or `nil`. Use `g_object_unref()` when finished using the icon.
function Gtk.RecentInfo:get_icon(size) end

--- # method Gtk.RecentInfo:get_mime_type()
---
--- Gets the MIME type of the resource.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@return string # the MIME type of the resource. The returned string is owned by the recent manager, and should not be freed.
function Gtk.RecentInfo:get_mime_type() end

--- # method Gtk.RecentInfo:get_modified()
---
--- Gets the timestamp (seconds from system’s Epoch) when the meta-data
--- for the resource was last modified.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@return integer # the number of seconds elapsed from system’s Epoch when the resource was last modified, or -1 on failure.
function Gtk.RecentInfo:get_modified() end

--- # method Gtk.RecentInfo:get_private_hint()
---
--- Gets the value of the “private” flag. Resources in the recently used
--- list that have this flag set to `true` should only be displayed by the
--- applications that have registered them.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@return (boolean|nil) # `true` if the private flag was found, `false` otherwise
function Gtk.RecentInfo:get_private_hint() end

--- # method Gtk.RecentInfo:get_short_name()
---
--- Computes a valid UTF-8 string that can be used as the
--- name of the item in a menu or list. For example, calling
--- this function on an item that refers to
--- “file:///foo/bar.txt” will yield “bar.txt”.
---
--- ---
---
---@param self Gtk.RecentInfo # an `GtkRecentInfo`
---@return string # A newly-allocated string in UTF-8 encoding free it with `g_free()`
function Gtk.RecentInfo:get_short_name() end

--- # method Gtk.RecentInfo:get_uri()
---
--- Gets the URI of the resource.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@return string # the URI of the resource. The returned string is owned by the recent manager, and should not be freed.
function Gtk.RecentInfo:get_uri() end

--- # method Gtk.RecentInfo:get_uri_display()
---
--- Gets a displayable version of the resource’s URI. If the resource
--- is local, it returns a local path; if the resource is not local,
--- it returns the UTF-8 encoded content of `gtk_recent_info_get_uri()`.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@return string # a newly allocated UTF-8 string containing the resource’s URI or `nil`. Use `g_free()` when done using it.
function Gtk.RecentInfo:get_uri_display() end

--- # method Gtk.RecentInfo:get_visited()
---
--- Gets the timestamp (seconds from system’s Epoch) when the meta-data
--- for the resource was last visited.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@return integer # the number of seconds elapsed from system’s Epoch when the resource was last visited, or -1 on failure.
function Gtk.RecentInfo:get_visited() end

--- # method Gtk.RecentInfo:has_application()
---
--- Checks whether an application registered this resource using `app_name`.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@param app_name string # a string containing an application name
---@return (boolean|nil) # `true` if an application with name `app_name` was found, `false` otherwise
function Gtk.RecentInfo:has_application(app_name) end

--- # method Gtk.RecentInfo:has_group()
---
--- Checks whether `group_name` appears inside the groups
--- registered for the recently used item `info`.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@param group_name string # name of a group
---@return (boolean|nil) # `true` if the group was found
function Gtk.RecentInfo:has_group(group_name) end

--- # method Gtk.RecentInfo:is_local()
---
--- Checks whether the resource is local or not by looking at the
--- scheme of its URI.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@return (boolean|nil) # `true` if the resource is local
function Gtk.RecentInfo:is_local() end

--- # method Gtk.RecentInfo:last_application()
---
--- Gets the name of the last application that have registered the
--- recently used resource represented by `info`.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@return string # an application name. Use `g_free()` to free it.
function Gtk.RecentInfo:last_application() end

--- # method Gtk.RecentInfo:match()
---
--- Checks whether two `GtkRecentInfo`-struct point to the same
--- resource.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@param info_b Gtk.RecentInfo # a `GtkRecentInfo`
---@return (boolean|nil) # `true` if both `GtkRecentInfo`-struct point to the same resource, `false` otherwise
function Gtk.RecentInfo:match(info_b) end

--- # method Gtk.RecentInfo:ref()
---
--- Increases the reference count of `recent_info` by one.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@return Gtk.RecentInfo # the recent info object with its reference count increased by one
function Gtk.RecentInfo:ref() end

--- # method Gtk.RecentInfo:unref()
---
--- Decreases the reference count of `info` by one. If the reference
--- count reaches zero, `info` is deallocated, and the memory freed.
---
--- ---
---
---@param self Gtk.RecentInfo # a `GtkRecentInfo`
---@return nil
function Gtk.RecentInfo:unref() end

--- # class Gtk.RecentManager
---
--- `GtkRecentManager` provides a facility for adding, removing and
--- looking up recently used files. Each recently used file is
--- identified by its URI, and has meta-data associated to it, like
--- the names and command lines of the applications that have
--- registered it, the number of time each application has registered
--- the same file, the mime type of the file and whether the file
--- should be displayed only by the applications that have
--- registered it.
--- 
--- The recently used files list is per user.
--- 
--- The `GtkRecentManager` acts like a database of all the recently
--- used files. You can create new `GtkRecentManager` objects, but
--- it is more efficient to use the default manager created by GTK+.
--- 
--- Adding a new recently used file is as simple as:
--- 
--- ```c
--- GtkRecentManager *manager;
--- 
--- manager = gtk_recent_manager_get_default ();
--- gtk_recent_manager_add_item (manager, file_uri);
--- ```
--- 
--- The `GtkRecentManager` will try to gather all the needed information
--- from the file itself through GIO.
--- 
--- Looking up the meta-data associated with a recently used file
--- given its URI requires calling `gtk_recent_manager_lookup_item()`:
--- 
--- ```c
--- GtkRecentManager *manager;
--- GtkRecentInfo *info;
--- GError *error = NULL;
--- 
--- manager = gtk_recent_manager_get_default ();
--- info = gtk_recent_manager_lookup_item (manager, file_uri, &error);
--- if (error)
---   {
---     g_warning ("Could not find the file: %s", error->message);
---     g_error_free (error);
---   }
--- else
---  {
---    // Use the info object
---    gtk_recent_info_unref (info);
---  }
--- ```
--- 
--- In order to retrieve the list of recently used files, you can use
--- `gtk_recent_manager_get_items()`, which returns a list of `GtkRecentInfo`-structs.
--- 
--- A `GtkRecentManager` is the model used to populate the contents of
--- one, or more `GtkRecentChooser` implementations.
--- 
--- Note that the maximum age of the recently used files list is
--- controllable through the `GtkSettings`:gtk-recent-files-max-age
--- property.
--- 
--- Recently used files are supported since GTK+ 2.10.
---
--- ---
---
---@class Gtk.RecentManager : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gtk.RecentManagerPrivate
---@operator call: Gtk.RecentManager
Gtk.RecentManager = {}

--- # method Gtk.RecentManager:add_full()
---
--- Adds a new resource, pointed by `uri`, into the recently used
--- resources list, using the metadata specified inside the
--- `GtkRecentData`-struct passed in `recent_data`.
--- 
--- The passed URI will be used to identify this resource inside the
--- list.
--- 
--- In order to register the new recently used resource, metadata about
--- the resource must be passed as well as the URI; the metadata is
--- stored in a `GtkRecentData`-struct, which must contain the MIME
--- type of the resource pointed by the URI; the name of the application
--- that is registering the item, and a command line to be used when
--- launching the item.
--- 
--- Optionally, a `GtkRecentData`-struct might contain a UTF-8 string
--- to be used when viewing the item instead of the last component of
--- the URI; a short description of the item; whether the item should
--- be considered private - that is, should be displayed only by the
--- applications that have registered it.
---
--- ---
---
---@param self Gtk.RecentManager # a `GtkRecentManager`
---@param uri string # a valid URI
---@param recent_data Gtk.RecentData # metadata of the resource
---@return (boolean|nil) # `true` if the new item was successfully added to the recently used resources list, `false` otherwise
function Gtk.RecentManager:add_full(uri, recent_data) end

--- # method Gtk.RecentManager:add_item()
---
--- Adds a new resource, pointed by `uri`, into the recently used
--- resources list.
--- 
--- This function automatically retrieves some of the needed
--- metadata and setting other metadata to common default values;
--- it then feeds the data to `gtk_recent_manager_add_full()`.
--- 
--- See `gtk_recent_manager_add_full()` if you want to explicitly
--- define the metadata for the resource pointed by `uri`.
---
--- ---
---
---@param self Gtk.RecentManager # a `GtkRecentManager`
---@param uri string # a valid URI
---@return (boolean|nil) # `true` if the new item was successfully added to the recently used resources list
function Gtk.RecentManager:add_item(uri) end

--- # method Gtk.RecentManager:get_items()
---
--- Gets the list of recently used resources.
---
--- ---
---
---@param self Gtk.RecentManager # a `GtkRecentManager`
---@return Gtk.RecentInfo[] # a list of newly allocated `GtkRecentInfo` objects. Use `gtk_recent_info_unref()` on each item inside the list, and then free the list itself using `g_list_free()`.
function Gtk.RecentManager:get_items() end

--- # method Gtk.RecentManager:has_item()
---
--- Checks whether there is a recently used resource registered
--- with `uri` inside the recent manager.
---
--- ---
---
---@param self Gtk.RecentManager # a `GtkRecentManager`
---@param uri string # a URI
---@return (boolean|nil) # `true` if the resource was found, `false` otherwise
function Gtk.RecentManager:has_item(uri) end

--- # method Gtk.RecentManager:lookup_item()
---
--- Searches for a URI inside the recently used resources list, and
--- returns a `GtkRecentInfo`-struct containing informations about the resource
--- like its MIME type, or its display name.
---
--- ---
---
---@param self Gtk.RecentManager # a `GtkRecentManager`
---@param uri string # a URI
---@return Gtk.RecentInfo # a `GtkRecentInfo`-struct containing information about the resource pointed by `uri`, or `nil` if the URI was not registered in the recently used resources list. Free with `gtk_recent_info_unref()`.
function Gtk.RecentManager:lookup_item(uri) end

--- # method Gtk.RecentManager:move_item()
---
--- Changes the location of a recently used resource from `uri` to `new_uri`.
--- 
--- Please note that this function will not affect the resource pointed
--- by the URIs, but only the URI used in the recently used resources list.
---
--- ---
---
---@param self Gtk.RecentManager # a `GtkRecentManager`
---@param uri string # the URI of a recently used resource
---@param new_uri? string # the new URI of the recently used resource, or `nil` to remove the item pointed by `uri` in the list
---@return (boolean|nil) # `true` on success
function Gtk.RecentManager:move_item(uri, new_uri) end

--- # method Gtk.RecentManager:purge_items()
---
--- Purges every item from the recently used resources list.
---
--- ---
---
---@param self Gtk.RecentManager # a `GtkRecentManager`
---@return integer # the number of items that have been removed from the recently used resources list
function Gtk.RecentManager:purge_items() end

--- # method Gtk.RecentManager:remove_item()
---
--- Removes a resource pointed by `uri` from the recently used resources
--- list handled by a recent manager.
---
--- ---
---
---@param self Gtk.RecentManager # a `GtkRecentManager`
---@param uri string # the URI of the item you wish to remove
---@return (boolean|nil) # `true` if the item pointed by `uri` has been successfully removed by the recently used resources list, and `false` otherwise
function Gtk.RecentManager:remove_item(uri) end

--- # function Gtk.RecentManager.get_default()
---
--- Gets a unique instance of `GtkRecentManager`, that you can share
--- in your application without caring about memory management.
---
--- ---
---
---@return Gtk.RecentManager # A unique `GtkRecentManager`. Do not ref or unref it.
function Gtk.RecentManager.get_default() end

--- # function Gtk.RecentManager.new()
---
--- Creates a new recent manager object. Recent manager objects are used to
--- handle the list of recently used resources. A `GtkRecentManager` object
--- monitors the recently used resources list, and emits the “changed” signal
--- each time something inside the list changes.
--- 
--- `GtkRecentManager` objects are expensive: be sure to create them only when
--- needed. You should use `gtk_recent_manager_get_default()` instead.
---
--- ---
---
---@return Gtk.RecentManager # A newly created `GtkRecentManager` object
function Gtk.RecentManager.new() end

--- # record Gtk.RecentManagerClass
---
--- `GtkRecentManagerClass` contains only private data.
---
--- ---
---
---@class Gtk.RecentManagerClass
---@field parent_class GObject.ObjectClass
---@field changed fun(manager: Gtk.RecentManager): nil
Gtk.RecentManagerClass = {}

---@enum Gtk.RecentManagerError
Gtk.RecentManagerError = {}

--- # record Gtk.RecentManagerPrivate
---
---@class Gtk.RecentManagerPrivate
Gtk.RecentManagerPrivate = {}

---@alias Gtk.RecentSortFunc fun(a: Gtk.RecentInfo, b: Gtk.RecentInfo, user_data: userdata): integer

---@enum Gtk.RecentSortType
Gtk.RecentSortType = {}

---@enum Gtk.RegionFlags
Gtk.RegionFlags = {}

---@enum Gtk.ReliefStyle
Gtk.ReliefStyle = {}

--- # class Gtk.RendererCellAccessible
---
---@class Gtk.RendererCellAccessible : Gtk.CellAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.TableCell
---@field parent Gtk.CellAccessible
---@field priv Gtk.RendererCellAccessiblePrivate
---@operator call: Gtk.RendererCellAccessible
Gtk.RendererCellAccessible = {}

--- # function Gtk.RendererCellAccessible.new()
---
---@param renderer Gtk.CellRenderer
---@return Atk.Object
function Gtk.RendererCellAccessible.new(renderer) end

--- # record Gtk.RendererCellAccessibleClass
---
---@class Gtk.RendererCellAccessibleClass
---@field parent_class Gtk.CellAccessibleClass
Gtk.RendererCellAccessibleClass = {}

--- # record Gtk.RendererCellAccessiblePrivate
---
---@class Gtk.RendererCellAccessiblePrivate
Gtk.RendererCellAccessiblePrivate = {}

--- # record Gtk.RequestedSize
---
--- Represents a request of a screen object in a given orientation. These
--- are primarily used in container implementations when allocating a natural
--- size for children calling. See `gtk_distribute_natural_allocation()`.
---
--- ---
---
---@class Gtk.RequestedSize
---@field data userdata # A client pointer
---@field minimum_size integer # The minimum size needed for allocation in a given orientation
---@field natural_size integer # The natural size for allocation in a given orientation
Gtk.RequestedSize = {}

--- # record Gtk.Requisition
---
--- A `GtkRequisition`-struct represents the desired size of a widget. See
--- [GtkWidget’s geometry management section][geometry-management] for
--- more information.
---
--- ---
---
---@class Gtk.Requisition
---@field width integer # the widget’s desired width
---@field height integer # the widget’s desired height
---@operator call: Gtk.Requisition
Gtk.Requisition = {}

--- # method Gtk.Requisition:copy()
---
--- Copies a `GtkRequisition`.
---
--- ---
---
---@param self Gtk.Requisition # a `GtkRequisition`
---@return Gtk.Requisition # a copy of `requisition`
function Gtk.Requisition:copy() end

--- # method Gtk.Requisition:free()
---
--- Frees a `GtkRequisition`.
---
--- ---
---
---@param self Gtk.Requisition # a `GtkRequisition`
---@return nil
function Gtk.Requisition:free() end

--- # function Gtk.Requisition.new()
---
--- Allocates a new `GtkRequisition`-struct and initializes its elements to zero.
---
--- ---
---
---@return Gtk.Requisition # a new empty `GtkRequisition`. The newly allocated `GtkRequisition` should be freed with `gtk_requisition_free()`.
function Gtk.Requisition.new() end

---@enum Gtk.ResizeMode
Gtk.ResizeMode = {}

---@enum Gtk.ResponseType
Gtk.ResponseType = {}

--- # class Gtk.Revealer
---
--- The GtkRevealer widget is a container which animates
--- the transition of its child from invisible to visible.
--- 
--- The style of transition can be controlled with
--- `gtk_revealer_set_transition_type()`.
--- 
--- These animations respect the `GtkSettings`:gtk-enable-animations
--- setting.
--- 
--- # CSS nodes
--- 
--- GtkRevealer has a single CSS node with name revealer.
--- 
--- The GtkRevealer widget was added in GTK+ 3.10.
---
--- ---
---
---@class Gtk.Revealer : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent_instance Gtk.Bin
---@operator call: Gtk.Revealer
Gtk.Revealer = {}

--- # method Gtk.Revealer:get_child_revealed()
---
--- Returns whether the child is fully revealed, in other words whether
--- the transition to the revealed state is completed.
---
--- ---
---
---@param self Gtk.Revealer # a `GtkRevealer`
---@return (boolean|nil) # `true` if the child is fully revealed
function Gtk.Revealer:get_child_revealed() end

--- # method Gtk.Revealer:get_reveal_child()
---
--- Returns whether the child is currently
--- revealed. See `gtk_revealer_set_reveal_child()`.
--- 
--- This function returns `true` as soon as the transition
--- is to the revealed state is started. To learn whether
--- the child is fully revealed (ie the transition is completed),
--- use `gtk_revealer_get_child_revealed()`.
---
--- ---
---
---@param self Gtk.Revealer # a `GtkRevealer`
---@return (boolean|nil) # `true` if the child is revealed.
function Gtk.Revealer:get_reveal_child() end

--- # method Gtk.Revealer:get_transition_duration()
---
--- Returns the amount of time (in milliseconds) that
--- transitions will take.
---
--- ---
---
---@param self Gtk.Revealer # a `GtkRevealer`
---@return integer # the transition duration
function Gtk.Revealer:get_transition_duration() end

--- # method Gtk.Revealer:get_transition_type()
---
--- Gets the type of animation that will be used
--- for transitions in `revealer`.
---
--- ---
---
---@param self Gtk.Revealer # a `GtkRevealer`
---@return Gtk.RevealerTransitionType # the current transition type of `revealer`
function Gtk.Revealer:get_transition_type() end

--- # method Gtk.Revealer:set_reveal_child()
---
--- Tells the `GtkRevealer` to reveal or conceal its child.
--- 
--- The transition will be animated with the current
--- transition type of `revealer`.
---
--- ---
---
---@param self Gtk.Revealer # a `GtkRevealer`
---@param reveal_child (boolean|nil) # `true` to reveal the child
---@return nil
function Gtk.Revealer:set_reveal_child(reveal_child) end

--- # method Gtk.Revealer:set_transition_duration()
---
--- Sets the duration that transitions will take.
---
--- ---
---
---@param self Gtk.Revealer # a `GtkRevealer`
---@param duration integer # the new duration, in milliseconds
---@return nil
function Gtk.Revealer:set_transition_duration(duration) end

--- # method Gtk.Revealer:set_transition_type()
---
--- Sets the type of animation that will be used for
--- transitions in `revealer`. Available types include
--- various kinds of fades and slides.
---
--- ---
---
---@param self Gtk.Revealer # a `GtkRevealer`
---@param transition Gtk.RevealerTransitionType # the new transition type
---@return nil
function Gtk.Revealer:set_transition_type(transition) end

--- # function Gtk.Revealer.new()
---
--- Creates a new `GtkRevealer`.
---
--- ---
---
---@return Gtk.Widget # a newly created `GtkRevealer`
function Gtk.Revealer.new() end

--- # record Gtk.RevealerClass
---
---@class Gtk.RevealerClass
---@field parent_class Gtk.BinClass # The parent class.
Gtk.RevealerClass = {}

---@enum Gtk.RevealerTransitionType
Gtk.RevealerTransitionType = {}

--- # class Gtk.Scale
---
--- A GtkScale is a slider control used to select a numeric value.
--- To use it, you’ll probably want to investigate the methods on
--- its base class, `GtkRange`, in addition to the methods for GtkScale itself.
--- To set the value of a scale, you would normally use `gtk_range_set_value()`.
--- To detect changes to the value, you would normally use the
--- `GtkRange`::value-changed signal.
--- 
--- Note that using the same upper and lower bounds for the `GtkScale` (through
--- the `GtkRange` methods) will hide the slider itself. This is useful for
--- applications that want to show an undeterminate value on the scale, without
--- changing the layout of the application (such as movie or music players).
--- 
--- # GtkScale as GtkBuildable
--- 
--- GtkScale supports a custom `<marks>` element, which can contain multiple
--- `<mark>` elements. The “value” and “position” attributes have the same
--- meaning as `gtk_scale_add_mark()` parameters of the same name. If the
--- element is not empty, its content is taken as the markup to show at
--- the mark. It can be translated with the usual ”translatable” and
--- “context” attributes.
--- 
--- # CSS nodes
--- 
--- ```plain
--- scale[.fine-tune][.marks-before][.marks-after]
--- ├── marks.top
--- │   ├── mark
--- │   ┊    ├── [label]
--- │   ┊    ╰── indicator
--- ┊   ┊
--- │   ╰── mark
--- ├── [value]
--- ├── contents
--- │   ╰── trough
--- │       ├── slider
--- │       ├── [highlight]
--- │       ╰── [fill]
--- ╰── marks.bottom
---     ├── mark
---     ┊    ├── indicator
---     ┊    ╰── [label]
---     ╰── mark
--- ```
--- 
--- GtkScale has a main CSS node with name scale and a subnode for its contents,
--- with subnodes named trough and slider.
--- 
--- The main node gets the style class .fine-tune added when the scale is in
--- 'fine-tuning' mode.
--- 
--- If the scale has an origin (see `gtk_scale_set_has_origin()`), there is a
--- subnode with name highlight below the trough node that is used for rendering
--- the highlighted part of the trough.
--- 
--- If the scale is showing a fill level (see `gtk_range_set_show_fill_level()`),
--- there is a subnode with name fill below the trough node that is used for
--- rendering the filled in part of the trough.
--- 
--- If marks are present, there is a marks subnode before or after the contents
--- node, below which each mark gets a node with name mark. The marks nodes get
--- either the .top or .bottom style class.
--- 
--- The mark node has a subnode named indicator. If the mark has text, it also
--- has a subnode named label. When the mark is either above or left of the
--- scale, the label subnode is the first when present. Otherwise, the indicator
--- subnode is the first.
--- 
--- The main CSS node gets the 'marks-before' and/or 'marks-after' style classes
--- added depending on what marks are present.
--- 
--- If the scale is displaying the value (see `GtkScale`:draw-value), there is
--- subnode with name value.
---
--- ---
---
---@class Gtk.Scale : Gtk.Range, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field range Gtk.Range
---@field priv Gtk.ScalePrivate
---@operator call: Gtk.Scale
Gtk.Scale = {}

--- # method Gtk.Scale:add_mark()
---
--- Adds a mark at `value`.
--- 
--- A mark is indicated visually by drawing a tick mark next to the scale,
--- and GTK+ makes it easy for the user to position the scale exactly at the
--- marks value.
--- 
--- If `markup` is not `nil`, text is shown next to the tick mark.
--- 
--- To remove marks from a scale, use `gtk_scale_clear_marks()`.
---
--- ---
---
---@param self Gtk.Scale # a `GtkScale`
---@param value number # the value at which the mark is placed, must be between the lower and upper limits of the scales’ adjustment
---@param position Gtk.PositionType # where to draw the mark. For a horizontal scale, `GTK_POS_TOP` and %GTK_POS_LEFT are drawn above the scale, anything else below. For a vertical scale, `GTK_POS_LEFT` and %GTK_POS_TOP are drawn to the left of the scale, anything else to the right.
---@param markup? string # Text to be shown at the mark, using [Pango markup][PangoMarkupFormat], or `nil`
---@return nil
function Gtk.Scale:add_mark(value, position, markup) end

--- # method Gtk.Scale:clear_marks()
---
--- Removes any marks that have been added with `gtk_scale_add_mark()`.
---
--- ---
---
---@param self Gtk.Scale # a `GtkScale`
---@return nil
function Gtk.Scale:clear_marks() end

--- # method Gtk.Scale:get_digits()
---
--- Gets the number of decimal places that are displayed in the value.
---
--- ---
---
---@param self Gtk.Scale # a `GtkScale`
---@return integer # the number of decimal places that are displayed
function Gtk.Scale:get_digits() end

--- # method Gtk.Scale:get_draw_value()
---
--- Returns whether the current value is displayed as a string
--- next to the slider.
---
--- ---
---
---@param self Gtk.Scale # a `GtkScale`
---@return (boolean|nil) # whether the current value is displayed as a string
function Gtk.Scale:get_draw_value() end

--- # method Gtk.Scale:get_has_origin()
---
--- Returns whether the scale has an origin.
---
--- ---
---
---@param self Gtk.Scale # a `GtkScale`
---@return (boolean|nil) # `true` if the scale has an origin.
function Gtk.Scale:get_has_origin() end

--- # method Gtk.Scale:get_layout()
---
--- Gets the `PangoLayout` used to display the scale. The returned
--- object is owned by the scale so does not need to be freed by
--- the caller.
---
--- ---
---
---@param self Gtk.Scale # A `GtkScale`
---@return Pango.Layout # the `PangoLayout` for this scale, or `nil` if the `GtkScale`:draw-value property is `false`.
function Gtk.Scale:get_layout() end

--- # method Gtk.Scale:get_layout_offsets()
---
--- Obtains the coordinates where the scale will draw the
--- `PangoLayout` representing the text in the scale. Remember
--- when using the `PangoLayout` function you need to convert to
--- and from pixels using PANGO_PIXELS() or `PANGO_SCALE`.
--- 
--- If the `GtkScale`:draw-value property is `false`, the return
--- values are undefined.
---
--- ---
---
---@param self Gtk.Scale # a `GtkScale`
---@param x? integer # location to store X offset of layout, or `nil`
---@param y? integer # location to store Y offset of layout, or `nil`
---@return nil
function Gtk.Scale:get_layout_offsets(x, y) end

--- # method Gtk.Scale:get_value_pos()
---
--- Gets the position in which the current value is displayed.
---
--- ---
---
---@param self Gtk.Scale # a `GtkScale`
---@return Gtk.PositionType # the position in which the current value is displayed
function Gtk.Scale:get_value_pos() end

--- # method Gtk.Scale:set_digits()
---
--- Sets the number of decimal places that are displayed in the value. Also
--- causes the value of the adjustment to be rounded to this number of digits,
--- so the retrieved value matches the displayed one, if `GtkScale`:draw-value is
--- `true` when the value changes. If you want to enforce rounding the value when
--- `GtkScale`:draw-value is `false`, you can set `GtkRange`:round-digits instead.
--- 
--- Note that rounding to a small number of digits can interfere with
--- the smooth autoscrolling that is built into `GtkScale`. As an alternative,
--- you can use the `GtkScale`::format-value signal to format the displayed
--- value yourself.
---
--- ---
---
---@param self Gtk.Scale # a `GtkScale`
---@param digits integer # the number of decimal places to display, e.g. use 1 to display 1.0, 2 to display 1.00, etc
---@return nil
function Gtk.Scale:set_digits(digits) end

--- # method Gtk.Scale:set_draw_value()
---
--- Specifies whether the current value is displayed as a string next
--- to the slider.
---
--- ---
---
---@param self Gtk.Scale # a `GtkScale`
---@param draw_value (boolean|nil) # `true` to draw the value
---@return nil
function Gtk.Scale:set_draw_value(draw_value) end

--- # method Gtk.Scale:set_has_origin()
---
--- If `GtkScale`:has-origin is set to `true` (the default), the scale will
--- highlight the part of the trough between the origin (bottom or left side)
--- and the current value.
---
--- ---
---
---@param self Gtk.Scale # a `GtkScale`
---@param has_origin (boolean|nil) # `true` if the scale has an origin
---@return nil
function Gtk.Scale:set_has_origin(has_origin) end

--- # method Gtk.Scale:set_value_pos()
---
--- Sets the position in which the current value is displayed.
---
--- ---
---
---@param self Gtk.Scale # a `GtkScale`
---@param pos Gtk.PositionType # the position in which the current value is displayed
---@return nil
function Gtk.Scale:set_value_pos(pos) end

--- # function Gtk.Scale.new()
---
--- Creates a new `GtkScale`.
---
--- ---
---
---@param orientation Gtk.Orientation # the scale’s orientation.
---@param adjustment? Gtk.Adjustment # the `GtkAdjustment` which sets the range of the scale, or `nil` to create a new adjustment.
---@return Gtk.Widget # a new `GtkScale`
function Gtk.Scale.new(orientation, adjustment) end

--- # function Gtk.Scale.new_with_range()
---
--- Creates a new scale widget with the given orientation that lets the
--- user input a number between `min` and `max` (including `min` and `max`)
--- with the increment `step`.  `step` must be nonzero; it’s the distance
--- the slider moves when using the arrow keys to adjust the scale
--- value.
--- 
--- Note that the way in which the precision is derived works best if `step`
--- is a power of ten. If the resulting precision is not suitable for your
--- needs, use `gtk_scale_set_digits()` to correct it.
---
--- ---
---
---@param orientation Gtk.Orientation # the scale’s orientation.
---@param min number # minimum value
---@param max number # maximum value
---@param step number # step increment (tick size) used with keyboard shortcuts
---@return Gtk.Widget # a new `GtkScale`
function Gtk.Scale.new_with_range(orientation, min, max, step) end

--- # class Gtk.ScaleAccessible
---
---@class Gtk.ScaleAccessible : Gtk.RangeAccessible, Gtk.Atk.Component, Gtk.Atk.Value
---@field parent Gtk.RangeAccessible
---@field priv Gtk.ScaleAccessiblePrivate
Gtk.ScaleAccessible = {}

--- # record Gtk.ScaleAccessibleClass
---
---@class Gtk.ScaleAccessibleClass
---@field parent_class Gtk.RangeAccessibleClass
Gtk.ScaleAccessibleClass = {}

--- # record Gtk.ScaleAccessiblePrivate
---
---@class Gtk.ScaleAccessiblePrivate
Gtk.ScaleAccessiblePrivate = {}

--- # class Gtk.ScaleButton
---
--- `GtkScaleButton` provides a button which pops up a scale widget.
--- This kind of widget is commonly used for volume controls in multimedia
--- applications, and GTK+ provides a `GtkVolumeButton` subclass that
--- is tailored for this use case.
--- 
--- # CSS nodes
--- 
--- GtkScaleButton has a single CSS node with name button. To differentiate
--- it from a plain `GtkButton`, it gets the .scale style class.
--- 
--- The popup widget that contains the scale has a .scale-popup style class.
---
--- ---
---
---@class Gtk.ScaleButton : Gtk.Button, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable, Gtk.Orientable
---@field parent Gtk.Button
---@field priv Gtk.ScaleButtonPrivate
---@operator call: Gtk.ScaleButton
Gtk.ScaleButton = {}

--- # method Gtk.ScaleButton:get_adjustment()
---
--- Gets the `GtkAdjustment` associated with the `GtkScaleButton`’s scale.
--- See `gtk_range_get_adjustment()` for details.
---
--- ---
---
---@param self Gtk.ScaleButton # a `GtkScaleButton`
---@return Gtk.Adjustment # the adjustment associated with the scale
function Gtk.ScaleButton:get_adjustment() end

--- # method Gtk.ScaleButton:get_minus_button()
---
--- Retrieves the minus button of the `GtkScaleButton`.
---
--- ---
---
---@param self Gtk.ScaleButton # a `GtkScaleButton`
---@return Gtk.Button # the minus button of the `GtkScaleButton` as a `GtkButton`
function Gtk.ScaleButton:get_minus_button() end

--- # method Gtk.ScaleButton:get_plus_button()
---
--- Retrieves the plus button of the `GtkScaleButton`.
---
--- ---
---
---@param self Gtk.ScaleButton # a `GtkScaleButton`
---@return Gtk.Button # the plus button of the `GtkScaleButton` as a `GtkButton`
function Gtk.ScaleButton:get_plus_button() end

--- # method Gtk.ScaleButton:get_popup()
---
--- Retrieves the popup of the `GtkScaleButton`.
---
--- ---
---
---@param self Gtk.ScaleButton # a `GtkScaleButton`
---@return Gtk.Widget # the popup of the `GtkScaleButton`
function Gtk.ScaleButton:get_popup() end

--- # method Gtk.ScaleButton:get_value()
---
--- Gets the current value of the scale button.
---
--- ---
---
---@param self Gtk.ScaleButton # a `GtkScaleButton`
---@return number # current value of the scale button
function Gtk.ScaleButton:get_value() end

--- # method Gtk.ScaleButton:set_adjustment()
---
--- Sets the `GtkAdjustment` to be used as a model
--- for the `GtkScaleButton`’s scale.
--- See `gtk_range_set_adjustment()` for details.
---
--- ---
---
---@param self Gtk.ScaleButton # a `GtkScaleButton`
---@param adjustment Gtk.Adjustment # a `GtkAdjustment`
---@return nil
function Gtk.ScaleButton:set_adjustment(adjustment) end

--- # method Gtk.ScaleButton:set_icons()
---
--- Sets the icons to be used by the scale button.
--- For details, see the `GtkScaleButton`:icons property.
---
--- ---
---
---@param self Gtk.ScaleButton # a `GtkScaleButton`
---@param icons unknown[] # a `nil`-terminated array of icon names
---@return nil
function Gtk.ScaleButton:set_icons(icons) end

--- # method Gtk.ScaleButton:set_value()
---
--- Sets the current value of the scale; if the value is outside
--- the minimum or maximum range values, it will be clamped to fit
--- inside them. The scale button emits the `GtkScaleButton`::value-changed
--- signal if the value changes.
---
--- ---
---
---@param self Gtk.ScaleButton # a `GtkScaleButton`
---@param value number # new value of the scale button
---@return nil
function Gtk.ScaleButton:set_value(value) end

--- # function Gtk.ScaleButton.new()
---
--- Creates a `GtkScaleButton`, with a range between `min` and `max`, with
--- a stepping of `step`.
---
--- ---
---
---@param size integer # a stock icon size (`GtkIconSize`)
---@param min number # the minimum value of the scale (usually 0)
---@param max number # the maximum value of the scale (usually 100)
---@param step number # the stepping of value when a scroll-wheel event, or up/down arrow event occurs (usually 2)
---@param icons? unknown[] # a `nil`-terminated array of icon names, or `nil` if you want to set the list later with `gtk_scale_button_set_icons()`
---@return Gtk.Widget # a new `GtkScaleButton`
function Gtk.ScaleButton.new(size, min, max, step, icons) end

--- # class Gtk.ScaleButtonAccessible
---
---@class Gtk.ScaleButtonAccessible : Gtk.ButtonAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.Image, Gtk.Atk.Value
---@field parent Gtk.ButtonAccessible
---@field priv Gtk.ScaleButtonAccessiblePrivate
Gtk.ScaleButtonAccessible = {}

--- # record Gtk.ScaleButtonAccessibleClass
---
---@class Gtk.ScaleButtonAccessibleClass
---@field parent_class Gtk.ButtonAccessibleClass
Gtk.ScaleButtonAccessibleClass = {}

--- # record Gtk.ScaleButtonAccessiblePrivate
---
---@class Gtk.ScaleButtonAccessiblePrivate
Gtk.ScaleButtonAccessiblePrivate = {}

--- # record Gtk.ScaleButtonClass
---
---@class Gtk.ScaleButtonClass
---@field parent_class Gtk.ButtonClass
---@field value_changed fun(button: Gtk.ScaleButton, value: number): nil
Gtk.ScaleButtonClass = {}

--- # record Gtk.ScaleButtonPrivate
---
---@class Gtk.ScaleButtonPrivate
Gtk.ScaleButtonPrivate = {}

--- # record Gtk.ScaleClass
---
---@class Gtk.ScaleClass
---@field parent_class Gtk.RangeClass
---@field format_value fun(scale: Gtk.Scale, value: number): string
---@field draw_value fun(scale: Gtk.Scale): nil
---@field get_layout_offsets fun(scale: Gtk.Scale, x: integer, y: integer): nil
Gtk.ScaleClass = {}

--- # record Gtk.ScalePrivate
---
---@class Gtk.ScalePrivate
Gtk.ScalePrivate = {}

---@enum Gtk.ScrollStep
Gtk.ScrollStep = {}

---@enum Gtk.ScrollType
Gtk.ScrollType = {}

--- # interface Gtk.Scrollable
---
--- `GtkScrollable` is an interface that is implemented by widgets with native
--- scrolling ability.
--- 
--- To implement this interface you should override the
--- `GtkScrollable`:hadjustment and `GtkScrollable`:vadjustment properties.
--- 
--- ## Creating a scrollable widget
--- 
--- All scrollable widgets should do the following.
--- 
--- - When a parent widget sets the scrollable child widget’s adjustments,
---   the widget should populate the adjustments’
---   `GtkAdjustment`:lower, `GtkAdjustment`:upper,
---   `GtkAdjustment`:step-increment, `GtkAdjustment`:page-increment and
---   `GtkAdjustment`:page-size properties and connect to the
---   `GtkAdjustment`::value-changed signal.
--- 
--- - Because its preferred size is the size for a fully expanded widget,
---   the scrollable widget must be able to cope with underallocations.
---   This means that it must accept any value passed to its
---   `GtkWidgetClass`.`size_allocate()` function.
--- 
--- - When the parent allocates space to the scrollable child widget,
---   the widget should update the adjustments’ properties with new values.
--- 
--- - When any of the adjustments emits the `GtkAdjustment`::value-changed signal,
---   the scrollable widget should scroll its contents.
---
--- ---
---
---@class Gtk.Scrollable
Gtk.Scrollable = {}

--- # method Gtk.Scrollable:get_border()
---
--- Returns the size of a non-scrolling border around the
--- outside of the scrollable. An example for this would
--- be treeview headers. GTK+ can use this information to
--- display overlayed graphics, like the overshoot indication,
--- at the right position.
---
--- ---
---
---@param self Gtk.Scrollable # a `GtkScrollable`
---@param border Gtk.Border # return location for the results
---@return (boolean|nil) # `true` if `border` has been set
function Gtk.Scrollable:get_border(border) end

--- # method Gtk.Scrollable:get_hadjustment()
---
--- Retrieves the `GtkAdjustment` used for horizontal scrolling.
---
--- ---
---
---@param self Gtk.Scrollable # a `GtkScrollable`
---@return Gtk.Adjustment # horizontal `GtkAdjustment`.
function Gtk.Scrollable:get_hadjustment() end

--- # method Gtk.Scrollable:get_hscroll_policy()
---
--- Gets the horizontal `GtkScrollablePolicy`.
---
--- ---
---
---@param self Gtk.Scrollable # a `GtkScrollable`
---@return Gtk.ScrollablePolicy # The horizontal `GtkScrollablePolicy`.
function Gtk.Scrollable:get_hscroll_policy() end

--- # method Gtk.Scrollable:get_vadjustment()
---
--- Retrieves the `GtkAdjustment` used for vertical scrolling.
---
--- ---
---
---@param self Gtk.Scrollable # a `GtkScrollable`
---@return Gtk.Adjustment # vertical `GtkAdjustment`.
function Gtk.Scrollable:get_vadjustment() end

--- # method Gtk.Scrollable:get_vscroll_policy()
---
--- Gets the vertical `GtkScrollablePolicy`.
---
--- ---
---
---@param self Gtk.Scrollable # a `GtkScrollable`
---@return Gtk.ScrollablePolicy # The vertical `GtkScrollablePolicy`.
function Gtk.Scrollable:get_vscroll_policy() end

--- # method Gtk.Scrollable:set_hadjustment()
---
--- Sets the horizontal adjustment of the `GtkScrollable`.
---
--- ---
---
---@param self Gtk.Scrollable # a `GtkScrollable`
---@param hadjustment? Gtk.Adjustment # a `GtkAdjustment`
---@return nil
function Gtk.Scrollable:set_hadjustment(hadjustment) end

--- # method Gtk.Scrollable:set_hscroll_policy()
---
--- Sets the `GtkScrollablePolicy` to determine whether
--- horizontal scrolling should start below the minimum width or
--- below the natural width.
---
--- ---
---
---@param self Gtk.Scrollable # a `GtkScrollable`
---@param policy Gtk.ScrollablePolicy # the horizontal `GtkScrollablePolicy`
---@return nil
function Gtk.Scrollable:set_hscroll_policy(policy) end

--- # method Gtk.Scrollable:set_vadjustment()
---
--- Sets the vertical adjustment of the `GtkScrollable`.
---
--- ---
---
---@param self Gtk.Scrollable # a `GtkScrollable`
---@param vadjustment? Gtk.Adjustment # a `GtkAdjustment`
---@return nil
function Gtk.Scrollable:set_vadjustment(vadjustment) end

--- # method Gtk.Scrollable:set_vscroll_policy()
---
--- Sets the `GtkScrollablePolicy` to determine whether
--- vertical scrolling should start below the minimum height or
--- below the natural height.
---
--- ---
---
---@param self Gtk.Scrollable # a `GtkScrollable`
---@param policy Gtk.ScrollablePolicy # the vertical `GtkScrollablePolicy`
---@return nil
function Gtk.Scrollable:set_vscroll_policy(policy) end

--- # record Gtk.ScrollableInterface
---
---@class Gtk.ScrollableInterface
---@field base_iface GObject.TypeInterface
---@field get_border fun(scrollable: Gtk.Scrollable, border: Gtk.Border): (boolean|nil)
Gtk.ScrollableInterface = {}

---@enum Gtk.ScrollablePolicy
Gtk.ScrollablePolicy = {}

--- # class Gtk.Scrollbar
---
--- The `GtkScrollbar` widget is a horizontal or vertical scrollbar,
--- depending on the value of the `GtkOrientable`:orientation property.
--- 
--- Its position and movement are controlled by the adjustment that is passed to
--- or created by `gtk_scrollbar_new()`. See `GtkAdjustment` for more details. The
--- `GtkAdjustment`:value field sets the position of the thumb and must be between
--- `GtkAdjustment`:lower and `GtkAdjustment`:upper - `GtkAdjustment`:page-size. The
--- `GtkAdjustment`:page-size represents the size of the visible scrollable area.
--- The fields `GtkAdjustment`:step-increment and `GtkAdjustment`:page-increment
--- fields are added to or subtracted from the `GtkAdjustment`:value when the user
--- asks to move by a step (using e.g. the cursor arrow keys or, if present, the
--- stepper buttons) or by a page (using e.g. the Page Down/Up keys).
--- 
--- # CSS nodes
--- 
--- ```plain
--- scrollbar[.fine-tune]
--- ╰── contents
---     ├── [button.up]
---     ├── [button.down]
---     ├── trough
---     │   ╰── slider
---     ├── [button.up]
---     ╰── [button.down]
--- ```
--- 
--- GtkScrollbar has a main CSS node with name scrollbar and a subnode for its
--- contents, with subnodes named trough and slider.
--- 
--- The main node gets the style class .fine-tune added when the scrollbar is
--- in 'fine-tuning' mode.
--- 
--- If steppers are enabled, they are represented by up to four additional
--- subnodes with name button. These get the style classes .up and .down to
--- indicate in which direction they are moving.
--- 
--- Other style classes that may be added to scrollbars inside `GtkScrolledWindow`
--- include the positional classes (.left, .right, .top, .bottom) and style
--- classes related to overlay scrolling (.overlay-indicator, .dragging, .hovering).
---
--- ---
---
---@class Gtk.Scrollbar : Gtk.Range, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field range Gtk.Range
---@operator call: Gtk.Scrollbar
Gtk.Scrollbar = {}

--- # function Gtk.Scrollbar.new()
---
--- Creates a new scrollbar with the given orientation.
---
--- ---
---
---@param orientation Gtk.Orientation # the scrollbar’s orientation.
---@param adjustment? Gtk.Adjustment # the `GtkAdjustment` to use, or `nil` to create a new adjustment.
---@return Gtk.Widget # the new `GtkScrollbar`.
function Gtk.Scrollbar.new(orientation, adjustment) end

--- # record Gtk.ScrollbarClass
---
---@class Gtk.ScrollbarClass
---@field parent_class Gtk.RangeClass
Gtk.ScrollbarClass = {}

--- # class Gtk.ScrolledWindow
---
--- GtkScrolledWindow is a container that accepts a single child widget, makes
--- that child scrollable using either internally added scrollbars or externally
--- associated adjustments, and optionally draws a frame around the child.
--- 
--- Widgets with native scrolling support, i.e. those whose classes implement the
--- `GtkScrollable` interface, are added directly. For other types of widget, the
--- class `GtkViewport` acts as an adaptor, giving scrollability to other widgets.
--- GtkScrolledWindow’s implementation of `gtk_container_add()` intelligently
--- accounts for whether or not the added child is a `GtkScrollable`. If it isn’t,
--- `GtkScrolledWindow` wraps the child in a `GtkViewport` and adds that for you.
--- Therefore, you can just add any child widget and not worry about the details.
--- 
--- If `gtk_container_add()` has added a `GtkViewport` for you, you can remove
--- both your added child widget from the `GtkViewport`, and the `GtkViewport`
--- from the GtkScrolledWindow, like this:
--- 
--- ```c
--- GtkWidget *scrolled_window = gtk_scrolled_window_new (NULL, NULL);
--- GtkWidget *child_widget = gtk_button_new ();
--- 
--- // GtkButton is not a GtkScrollable, so GtkScrolledWindow will automatically
--- // add a GtkViewport.
--- gtk_container_add (GTK_CONTAINER (scrolled_window),
---                    child_widget);
--- 
--- // Either of these will result in child_widget being unparented:
--- gtk_container_remove (GTK_CONTAINER (scrolled_window),
---                       child_widget);
--- // or
--- gtk_container_remove (GTK_CONTAINER (scrolled_window),
---                       gtk_bin_get_child (GTK_BIN (scrolled_window)));
--- ```
--- 
--- Unless `GtkScrolledWindow`:policy is GTK_POLICY_NEVER or GTK_POLICY_EXTERNAL,
--- GtkScrolledWindow adds internal `GtkScrollbar` widgets around its child. The
--- scroll position of the child, and if applicable the scrollbars, is controlled
--- by the `GtkScrolledWindow`:hadjustment and `GtkScrolledWindow`:vadjustment
--- that are associated with the GtkScrolledWindow. See the docs on `GtkScrollbar`
--- for the details, but note that the “step_increment” and “page_increment”
--- fields are only effective if the policy causes scrollbars to be present.
--- 
--- If a GtkScrolledWindow doesn’t behave quite as you would like, or
--- doesn’t have exactly the right layout, it’s very possible to set up
--- your own scrolling with `GtkScrollbar` and for example a `GtkGrid`.
--- 
--- # Touch support
--- 
--- GtkScrolledWindow has built-in support for touch devices. When a
--- touchscreen is used, swiping will move the scrolled window, and will
--- expose 'kinetic' behavior. This can be turned off with the
--- `GtkScrolledWindow`:kinetic-scrolling property if it is undesired.
--- 
--- GtkScrolledWindow also displays visual 'overshoot' indication when
--- the content is pulled beyond the end, and this situation can be
--- captured with the `GtkScrolledWindow`::edge-overshot signal.
--- 
--- If no mouse device is present, the scrollbars will overlayed as
--- narrow, auto-hiding indicators over the content. If traditional
--- scrollbars are desired although no mouse is present, this behaviour
--- can be turned off with the `GtkScrolledWindow`:overlay-scrolling
--- property.
--- 
--- # CSS nodes
--- 
--- GtkScrolledWindow has a main CSS node with name scrolledwindow.
--- 
--- It uses subnodes with names overshoot and undershoot to
--- draw the overflow and underflow indications. These nodes get
--- the .left, .right, .top or .bottom style class added depending
--- on where the indication is drawn.
--- 
--- GtkScrolledWindow also sets the positional style classes (.left,
--- .right, .top, .bottom) and style classes related to overlay
--- scrolling (.overlay-indicator, .dragging, .hovering) on its scrollbars.
--- 
--- If both scrollbars are visible, the area where they meet is drawn
--- with a subnode named junction.
---
--- ---
---
---@class Gtk.ScrolledWindow : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field container Gtk.Bin
---@field priv Gtk.ScrolledWindowPrivate
---@operator call: Gtk.ScrolledWindow
Gtk.ScrolledWindow = {}

--- # method Gtk.ScrolledWindow:add_with_viewport()
---
--- Used to add children without native scrolling capabilities. This
--- is simply a convenience function; it is equivalent to adding the
--- unscrollable child to a viewport, then adding the viewport to the
--- scrolled window. If a child has native scrolling, use
--- `gtk_container_add()` instead of this function.
--- 
--- The viewport scrolls the child by moving its `GdkWindow`, and takes
--- the size of the child to be the size of its toplevel `GdkWindow`.
--- This will be very wrong for most widgets that support native scrolling;
--- for example, if you add a widget such as `GtkTreeView` with a viewport,
--- the whole widget will scroll, including the column headings. Thus,
--- widgets with native scrolling support should not be used with the
--- `GtkViewport` proxy.
--- 
--- A widget supports scrolling natively if it implements the
--- `GtkScrollable` interface.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@param child Gtk.Widget # the widget you want to scroll
---@return nil
function Gtk.ScrolledWindow:add_with_viewport(child) end

--- # method Gtk.ScrolledWindow:get_capture_button_press()
---
--- Return whether button presses are captured during kinetic
--- scrolling. See `gtk_scrolled_window_set_capture_button_press()`.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@return (boolean|nil) # `true` if button presses are captured during kinetic scrolling
function Gtk.ScrolledWindow:get_capture_button_press() end

--- # method Gtk.ScrolledWindow:get_hadjustment()
---
--- Returns the horizontal scrollbar’s adjustment, used to connect the
--- horizontal scrollbar to the child widget’s horizontal scroll
--- functionality.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@return Gtk.Adjustment # the horizontal `GtkAdjustment`
function Gtk.ScrolledWindow:get_hadjustment() end

--- # method Gtk.ScrolledWindow:get_hscrollbar()
---
--- Returns the horizontal scrollbar of `scrolled_window`.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@return Gtk.Widget # the horizontal scrollbar of the scrolled window.
function Gtk.ScrolledWindow:get_hscrollbar() end

--- # method Gtk.ScrolledWindow:get_kinetic_scrolling()
---
--- Returns the specified kinetic scrolling behavior.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@return (boolean|nil) # the scrolling behavior flags.
function Gtk.ScrolledWindow:get_kinetic_scrolling() end

--- # method Gtk.ScrolledWindow:get_max_content_height()
---
--- Returns the maximum content height set.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@return integer # the maximum content height, or -1
function Gtk.ScrolledWindow:get_max_content_height() end

--- # method Gtk.ScrolledWindow:get_max_content_width()
---
--- Returns the maximum content width set.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@return integer # the maximum content width, or -1
function Gtk.ScrolledWindow:get_max_content_width() end

--- # method Gtk.ScrolledWindow:get_min_content_height()
---
--- Gets the minimal content height of `scrolled_window`, or -1 if not set.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@return integer # the minimal content height
function Gtk.ScrolledWindow:get_min_content_height() end

--- # method Gtk.ScrolledWindow:get_min_content_width()
---
--- Gets the minimum content width of `scrolled_window`, or -1 if not set.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@return integer # the minimum content width
function Gtk.ScrolledWindow:get_min_content_width() end

--- # method Gtk.ScrolledWindow:get_overlay_scrolling()
---
--- Returns whether overlay scrolling is enabled for this scrolled window.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@return (boolean|nil) # `true` if overlay scrolling is enabled
function Gtk.ScrolledWindow:get_overlay_scrolling() end

--- # method Gtk.ScrolledWindow:get_placement()
---
--- Gets the placement of the contents with respect to the scrollbars
--- for the scrolled window. See `gtk_scrolled_window_set_placement()`.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@return Gtk.CornerType # the current placement value. See also `gtk_scrolled_window_set_placement()` and `gtk_scrolled_window_unset_placement()`.
function Gtk.ScrolledWindow:get_placement() end

--- # method Gtk.ScrolledWindow:get_policy()
---
--- Retrieves the current policy values for the horizontal and vertical
--- scrollbars. See `gtk_scrolled_window_set_policy()`.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@param hscrollbar_policy? Gtk.PolicyType # location to store the policy for the horizontal scrollbar, or `nil`
---@param vscrollbar_policy? Gtk.PolicyType # location to store the policy for the vertical scrollbar, or `nil`
---@return nil
function Gtk.ScrolledWindow:get_policy(hscrollbar_policy, vscrollbar_policy) end

--- # method Gtk.ScrolledWindow:get_propagate_natural_height()
---
--- Reports whether the natural height of the child will be calculated and propagated
--- through the scrolled window’s requested natural height.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@return (boolean|nil) # whether natural height propagation is enabled.
function Gtk.ScrolledWindow:get_propagate_natural_height() end

--- # method Gtk.ScrolledWindow:get_propagate_natural_width()
---
--- Reports whether the natural width of the child will be calculated and propagated
--- through the scrolled window’s requested natural width.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@return (boolean|nil) # whether natural width propagation is enabled.
function Gtk.ScrolledWindow:get_propagate_natural_width() end

--- # method Gtk.ScrolledWindow:get_shadow_type()
---
--- Gets the shadow type of the scrolled window. See
--- `gtk_scrolled_window_set_shadow_type()`.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@return Gtk.ShadowType # the current shadow type
function Gtk.ScrolledWindow:get_shadow_type() end

--- # method Gtk.ScrolledWindow:get_vadjustment()
---
--- Returns the vertical scrollbar’s adjustment, used to connect the
--- vertical scrollbar to the child widget’s vertical scroll functionality.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@return Gtk.Adjustment # the vertical `GtkAdjustment`
function Gtk.ScrolledWindow:get_vadjustment() end

--- # method Gtk.ScrolledWindow:get_vscrollbar()
---
--- Returns the vertical scrollbar of `scrolled_window`.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@return Gtk.Widget # the vertical scrollbar of the scrolled window.
function Gtk.ScrolledWindow:get_vscrollbar() end

--- # method Gtk.ScrolledWindow:set_capture_button_press()
---
--- Changes the behaviour of `scrolled_window` with regard to the initial
--- event that possibly starts kinetic scrolling. When `capture_button_press`
--- is set to `true`, the event is captured by the scrolled window, and
--- then later replayed if it is meant to go to the child widget.
--- 
--- This should be enabled if any child widgets perform non-reversible
--- actions on `GtkWidget`::button-press-event. If they don't, and handle
--- additionally handle `GtkWidget`::grab-broken-event, it might be better
--- to set `capture_button_press` to `false`.
--- 
--- This setting only has an effect if kinetic scrolling is enabled.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@param capture_button_press (boolean|nil) # `true` to capture button presses
---@return nil
function Gtk.ScrolledWindow:set_capture_button_press(capture_button_press) end

--- # method Gtk.ScrolledWindow:set_hadjustment()
---
--- Sets the `GtkAdjustment` for the horizontal scrollbar.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@param hadjustment? Gtk.Adjustment # the `GtkAdjustment` to use, or `nil` to create a new one
---@return nil
function Gtk.ScrolledWindow:set_hadjustment(hadjustment) end

--- # method Gtk.ScrolledWindow:set_kinetic_scrolling()
---
--- Turns kinetic scrolling on or off.
--- Kinetic scrolling only applies to devices with source
--- %GDK_SOURCE_TOUCHSCREEN.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@param kinetic_scrolling (boolean|nil) # `true` to enable kinetic scrolling
---@return nil
function Gtk.ScrolledWindow:set_kinetic_scrolling(kinetic_scrolling) end

--- # method Gtk.ScrolledWindow:set_max_content_height()
---
--- Sets the maximum height that `scrolled_window` should keep visible. The
--- `scrolled_window` will grow up to this height before it starts scrolling
--- the content.
--- 
--- It is a programming error to set the maximum content height to a value
--- smaller than `GtkScrolledWindow`:min-content-height.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@param height integer # the maximum content height
---@return nil
function Gtk.ScrolledWindow:set_max_content_height(height) end

--- # method Gtk.ScrolledWindow:set_max_content_width()
---
--- Sets the maximum width that `scrolled_window` should keep visible. The
--- `scrolled_window` will grow up to this width before it starts scrolling
--- the content.
--- 
--- It is a programming error to set the maximum content width to a value
--- smaller than `GtkScrolledWindow`:min-content-width.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@param width integer # the maximum content width
---@return nil
function Gtk.ScrolledWindow:set_max_content_width(width) end

--- # method Gtk.ScrolledWindow:set_min_content_height()
---
--- Sets the minimum height that `scrolled_window` should keep visible.
--- Note that this can and (usually will) be smaller than the minimum
--- size of the content.
--- 
--- It is a programming error to set the minimum content height to a
--- value greater than `GtkScrolledWindow`:max-content-height.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@param height integer # the minimal content height
---@return nil
function Gtk.ScrolledWindow:set_min_content_height(height) end

--- # method Gtk.ScrolledWindow:set_min_content_width()
---
--- Sets the minimum width that `scrolled_window` should keep visible.
--- Note that this can and (usually will) be smaller than the minimum
--- size of the content.
--- 
--- It is a programming error to set the minimum content width to a
--- value greater than `GtkScrolledWindow`:max-content-width.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@param width integer # the minimal content width
---@return nil
function Gtk.ScrolledWindow:set_min_content_width(width) end

--- # method Gtk.ScrolledWindow:set_overlay_scrolling()
---
--- Enables or disables overlay scrolling for this scrolled window.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@param overlay_scrolling (boolean|nil) # whether to enable overlay scrolling
---@return nil
function Gtk.ScrolledWindow:set_overlay_scrolling(overlay_scrolling) end

--- # method Gtk.ScrolledWindow:set_placement()
---
--- Sets the placement of the contents with respect to the scrollbars
--- for the scrolled window.
--- 
--- The default is %GTK_CORNER_TOP_LEFT, meaning the child is
--- in the top left, with the scrollbars underneath and to the right.
--- Other values in `GtkCornerType` are %GTK_CORNER_TOP_RIGHT,
--- %GTK_CORNER_BOTTOM_LEFT, and %GTK_CORNER_BOTTOM_RIGHT.
--- 
--- See also `gtk_scrolled_window_get_placement()` and
--- `gtk_scrolled_window_unset_placement()`.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@param window_placement Gtk.CornerType # position of the child window
---@return nil
function Gtk.ScrolledWindow:set_placement(window_placement) end

--- # method Gtk.ScrolledWindow:set_policy()
---
--- Sets the scrollbar policy for the horizontal and vertical scrollbars.
--- 
--- The policy determines when the scrollbar should appear; it is a value
--- from the `GtkPolicyType` enumeration. If %GTK_POLICY_ALWAYS, the
--- scrollbar is always present; if %GTK_POLICY_NEVER, the scrollbar is
--- never present; if %GTK_POLICY_AUTOMATIC, the scrollbar is present only
--- if needed (that is, if the slider part of the bar would be smaller
--- than the trough — the display is larger than the page size).
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@param hscrollbar_policy Gtk.PolicyType # policy for horizontal bar
---@param vscrollbar_policy Gtk.PolicyType # policy for vertical bar
---@return nil
function Gtk.ScrolledWindow:set_policy(hscrollbar_policy, vscrollbar_policy) end

--- # method Gtk.ScrolledWindow:set_propagate_natural_height()
---
--- Sets whether the natural height of the child should be calculated and propagated
--- through the scrolled window’s requested natural height.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@param propagate (boolean|nil) # whether to propagate natural height
---@return nil
function Gtk.ScrolledWindow:set_propagate_natural_height(propagate) end

--- # method Gtk.ScrolledWindow:set_propagate_natural_width()
---
--- Sets whether the natural width of the child should be calculated and propagated
--- through the scrolled window’s requested natural width.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@param propagate (boolean|nil) # whether to propagate natural width
---@return nil
function Gtk.ScrolledWindow:set_propagate_natural_width(propagate) end

--- # method Gtk.ScrolledWindow:set_shadow_type()
---
--- Changes the type of shadow drawn around the contents of
--- `scrolled_window`.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@param type Gtk.ShadowType # kind of shadow to draw around scrolled window contents
---@return nil
function Gtk.ScrolledWindow:set_shadow_type(type) end

--- # method Gtk.ScrolledWindow:set_vadjustment()
---
--- Sets the `GtkAdjustment` for the vertical scrollbar.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@param vadjustment? Gtk.Adjustment # the `GtkAdjustment` to use, or `nil` to create a new one
---@return nil
function Gtk.ScrolledWindow:set_vadjustment(vadjustment) end

--- # method Gtk.ScrolledWindow:unset_placement()
---
--- Unsets the placement of the contents with respect to the scrollbars
--- for the scrolled window. If no window placement is set for a scrolled
--- window, it defaults to %GTK_CORNER_TOP_LEFT.
--- 
--- See also `gtk_scrolled_window_set_placement()` and
--- `gtk_scrolled_window_get_placement()`.
---
--- ---
---
---@param self Gtk.ScrolledWindow # a `GtkScrolledWindow`
---@return nil
function Gtk.ScrolledWindow:unset_placement() end

--- # function Gtk.ScrolledWindow.new()
---
--- Creates a new scrolled window.
--- 
--- The two arguments are the scrolled window’s adjustments; these will be
--- shared with the scrollbars and the child widget to keep the bars in sync
--- with the child. Usually you want to pass `nil` for the adjustments, which
--- will cause the scrolled window to create them for you.
---
--- ---
---
---@param hadjustment? Gtk.Adjustment # horizontal adjustment
---@param vadjustment? Gtk.Adjustment # vertical adjustment
---@return Gtk.Widget # a new scrolled window
function Gtk.ScrolledWindow.new(hadjustment, vadjustment) end

--- # class Gtk.ScrolledWindowAccessible
---
---@class Gtk.ScrolledWindowAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.ScrolledWindowAccessiblePrivate
Gtk.ScrolledWindowAccessible = {}

--- # record Gtk.ScrolledWindowAccessibleClass
---
---@class Gtk.ScrolledWindowAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.ScrolledWindowAccessibleClass = {}

--- # record Gtk.ScrolledWindowAccessiblePrivate
---
---@class Gtk.ScrolledWindowAccessiblePrivate
Gtk.ScrolledWindowAccessiblePrivate = {}

--- # record Gtk.ScrolledWindowClass
---
---@class Gtk.ScrolledWindowClass
---@field parent_class Gtk.BinClass # The parent class.
---@field scrollbar_spacing integer
---@field scroll_child fun(scrolled_window: Gtk.ScrolledWindow, scroll: Gtk.ScrollType, horizontal: (boolean|nil)): (boolean|nil)
---@field move_focus_out fun(scrolled_window: Gtk.ScrolledWindow, direction: Gtk.DirectionType): nil
Gtk.ScrolledWindowClass = {}

--- # record Gtk.ScrolledWindowPrivate
---
---@class Gtk.ScrolledWindowPrivate
Gtk.ScrolledWindowPrivate = {}

--- # class Gtk.SearchBar
---
--- `GtkSearchBar` is a container made to have a search entry (possibly
--- with additional connex widgets, such as drop-down menus, or buttons)
--- built-in. The search bar would appear when a search is started through
--- typing on the keyboard, or the application’s search mode is toggled on.
--- 
--- For keyboard presses to start a search, events will need to be
--- forwarded from the top-level window that contains the search bar.
--- See `gtk_search_bar_handle_event()` for example code. Common shortcuts
--- such as Ctrl+F should be handled as an application action, or through
--- the menu items.
--- 
--- You will also need to tell the search bar about which entry you
--- are using as your search entry using `gtk_search_bar_connect_entry()`.
--- The following example shows you how to create a more complex search
--- entry.
--- 
--- # CSS nodes
--- 
--- GtkSearchBar has a single CSS node with name searchbar.
--- 
--- ## Creating a search bar
--- 
--- [A simple example](https://gitlab.gnome.org/GNOME/gtk/blob/gtk-3-24/examples/search-bar.c)
---
--- ---
---
---@class Gtk.SearchBar : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent Gtk.Bin
---@operator call: Gtk.SearchBar
Gtk.SearchBar = {}

--- # method Gtk.SearchBar:connect_entry()
---
--- Connects the `GtkEntry` widget passed as the one to be used in
--- this search bar. The entry should be a descendant of the search bar.
--- This is only required if the entry isn’t the direct child of the
--- search bar (as in our main example).
---
--- ---
---
---@param self Gtk.SearchBar # a `GtkSearchBar`
---@param entry Gtk.Entry # a `GtkEntry`
---@return nil
function Gtk.SearchBar:connect_entry(entry) end

--- # method Gtk.SearchBar:get_search_mode()
---
--- Returns whether the search mode is on or off.
---
--- ---
---
---@param self Gtk.SearchBar # a `GtkSearchBar`
---@return (boolean|nil) # whether search mode is toggled on
function Gtk.SearchBar:get_search_mode() end

--- # method Gtk.SearchBar:get_show_close_button()
---
--- Returns whether the close button is shown.
---
--- ---
---
---@param self Gtk.SearchBar # a `GtkSearchBar`
---@return (boolean|nil) # whether the close button is shown
function Gtk.SearchBar:get_show_close_button() end

--- # method Gtk.SearchBar:handle_event()
---
--- This function should be called when the top-level
--- window which contains the search bar received a key event.
--- 
--- If the key event is handled by the search bar, the bar will
--- be shown, the entry populated with the entered text and %GDK_EVENT_STOP
--- will be returned. The caller should ensure that events are
--- not propagated further.
--- 
--- If no entry has been connected to the search bar, using
--- `gtk_search_bar_connect_entry()`, this function will return
--- immediately with a warning.
--- 
--- ## Showing the search bar on key presses
--- 
--- ```c
--- static gboolean
--- on_key_press_event (GtkWidget *widget,
---                     GdkEvent  *event,
---                     gpointer   user_data)
--- {
---   GtkSearchBar *bar = GTK_SEARCH_BAR (user_data);
---   return gtk_search_bar_handle_event (bar, event);
--- }
--- 
--- static void
--- create_toplevel (void)
--- {
---   GtkWidget *window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
---   GtkWindow *search_bar = gtk_search_bar_new ();
--- 
---  // Add more widgets to the window...
--- 
---   g_signal_connect (window,
---                    "key-press-event",
---                     G_CALLBACK (on_key_press_event),
---                     search_bar);
--- }
--- ```
---
--- ---
---
---@param self Gtk.SearchBar # a `GtkSearchBar`
---@param event Gdk.Event # a `GdkEvent` containing key press events
---@return (boolean|nil) # %GDK_EVENT_STOP if the key press event resulted in text being entered in the search entry (and revealing the search bar if necessary), %GDK_EVENT_PROPAGATE otherwise.
function Gtk.SearchBar:handle_event(event) end

--- # method Gtk.SearchBar:set_search_mode()
---
--- Switches the search mode on or off.
---
--- ---
---
---@param self Gtk.SearchBar # a `GtkSearchBar`
---@param search_mode (boolean|nil) # the new state of the search mode
---@return nil
function Gtk.SearchBar:set_search_mode(search_mode) end

--- # method Gtk.SearchBar:set_show_close_button()
---
--- Shows or hides the close button. Applications that
--- already have a “search” toggle button should not show a close
--- button in their search bar, as it duplicates the role of the
--- toggle button.
---
--- ---
---
---@param self Gtk.SearchBar # a `GtkSearchBar`
---@param visible (boolean|nil) # whether the close button will be shown or not
---@return nil
function Gtk.SearchBar:set_show_close_button(visible) end

--- # function Gtk.SearchBar.new()
---
--- Creates a `GtkSearchBar`. You will need to tell it about
--- which widget is going to be your text entry using
--- `gtk_search_bar_connect_entry()`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkSearchBar`
function Gtk.SearchBar.new() end

--- # record Gtk.SearchBarClass
---
---@class Gtk.SearchBarClass
---@field parent_class Gtk.BinClass # The parent class.
Gtk.SearchBarClass = {}

--- # class Gtk.SearchEntry
---
--- `GtkSearchEntry` is a subclass of `GtkEntry` that has been
--- tailored for use as a search entry.
--- 
--- It will show an inactive symbolic “find” icon when the search
--- entry is empty, and a symbolic “clear” icon when there is text.
--- Clicking on the “clear” icon will empty the search entry.
--- 
--- Note that the search/clear icon is shown using a secondary
--- icon, and thus does not work if you are using the secondary
--- icon position for some other purpose.
--- 
--- To make filtering appear more reactive, it is a good idea to
--- not react to every change in the entry text immediately, but
--- only after a short delay. To support this, `GtkSearchEntry`
--- emits the `GtkSearchEntry`::search-changed signal which can
--- be used instead of the `GtkEditable`::changed signal.
--- 
--- The `GtkSearchEntry`::previous-match, `GtkSearchEntry`::next-match
--- and `GtkSearchEntry`::stop-search signals can be used to implement
--- moving between search results and ending the search.
--- 
--- Often, GtkSearchEntry will be fed events by means of being
--- placed inside a `GtkSearchBar`. If that is not the case,
--- you can use `gtk_search_entry_handle_event()` to pass events.
---
--- ---
---
---@class Gtk.SearchEntry : Gtk.Entry, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.CellEditable, Gtk.Editable
---@field parent Gtk.Entry
---@operator call: Gtk.SearchEntry
Gtk.SearchEntry = {}

--- # method Gtk.SearchEntry:handle_event()
---
--- This function should be called when the top-level window
--- which contains the search entry received a key event. If
--- the entry is part of a `GtkSearchBar`, it is preferable
--- to call `gtk_search_bar_handle_event()` instead, which will
--- reveal the entry in addition to passing the event to this
--- function.
--- 
--- If the key event is handled by the search entry and starts
--- or continues a search, %GDK_EVENT_STOP will be returned.
--- The caller should ensure that the entry is shown in this
--- case, and not propagate the event further.
---
--- ---
---
---@param self Gtk.SearchEntry # a `GtkSearchEntry`
---@param event Gdk.Event # a key event
---@return (boolean|nil) # %GDK_EVENT_STOP if the key press event resulted in a search beginning or continuing, %GDK_EVENT_PROPAGATE otherwise.
function Gtk.SearchEntry:handle_event(event) end

--- # function Gtk.SearchEntry.new()
---
--- Creates a `GtkSearchEntry`, with a find icon when the search field is
--- empty, and a clear icon when it isn't.
---
--- ---
---
---@return Gtk.Widget # a new `GtkSearchEntry`
function Gtk.SearchEntry.new() end

--- # record Gtk.SearchEntryClass
---
---@class Gtk.SearchEntryClass
---@field parent_class Gtk.EntryClass
---@field search_changed fun(entry: Gtk.SearchEntry): nil
---@field next_match fun(entry: Gtk.SearchEntry): nil
---@field previous_match fun(entry: Gtk.SearchEntry): nil
---@field stop_search fun(entry: Gtk.SearchEntry): nil
Gtk.SearchEntryClass = {}

--- # record Gtk.SelectionData
---
---@class Gtk.SelectionData
Gtk.SelectionData = {}

--- # method Gtk.SelectionData:copy()
---
--- Makes a copy of a `GtkSelectionData`-struct and its data.
---
--- ---
---
---@param self Gtk.SelectionData # a pointer to a `GtkSelectionData`-struct.
---@return Gtk.SelectionData # a pointer to a copy of `data`.
function Gtk.SelectionData:copy() end

--- # method Gtk.SelectionData:free()
---
--- Frees a `GtkSelectionData`-struct returned from
--- `gtk_selection_data_copy()`.
---
--- ---
---
---@param self Gtk.SelectionData # a pointer to a `GtkSelectionData`-struct.
---@return nil
function Gtk.SelectionData:free() end

--- # method Gtk.SelectionData:get_data_type()
---
--- Retrieves the data type of the selection.
---
--- ---
---
---@param self Gtk.SelectionData # a pointer to a `GtkSelectionData`-struct.
---@return Gdk.Atom # the data type of the selection.
function Gtk.SelectionData:get_data_type() end

--- # method Gtk.SelectionData:get_data()
---
--- Retrieves the raw data of the selection along with its length.
---
--- ---
---
---@param self Gtk.SelectionData # a pointer to a `GtkSelectionData`-struct.
---@param length integer # return location for length of the data segment
---@return unknown[] # the raw data of the selection
function Gtk.SelectionData:get_data(length) end

--- # method Gtk.SelectionData:get_display()
---
--- Retrieves the display of the selection.
---
--- ---
---
---@param self Gtk.SelectionData # a pointer to a `GtkSelectionData`-struct.
---@return Gdk.Display # the display of the selection.
function Gtk.SelectionData:get_display() end

--- # method Gtk.SelectionData:get_format()
---
--- Retrieves the format of the selection.
---
--- ---
---
---@param self Gtk.SelectionData # a pointer to a `GtkSelectionData`-struct.
---@return integer # the format of the selection.
function Gtk.SelectionData:get_format() end

--- # method Gtk.SelectionData:get_length()
---
--- Retrieves the length of the raw data of the selection.
---
--- ---
---
---@param self Gtk.SelectionData # a pointer to a `GtkSelectionData`-struct.
---@return integer # the length of the data of the selection.
function Gtk.SelectionData:get_length() end

--- # method Gtk.SelectionData:get_pixbuf()
---
--- Gets the contents of the selection data as a `GdkPixbuf`.
---
--- ---
---
---@param self Gtk.SelectionData # a `GtkSelectionData`
---@return GdkPixbuf.Pixbuf # if the selection data contained a recognized image type and it could be converted to a `GdkPixbuf`, a newly allocated pixbuf is returned, otherwise `nil`. If the result is non-`nil` it must be freed with `g_object_unref()`.
function Gtk.SelectionData:get_pixbuf() end

--- # method Gtk.SelectionData:get_selection()
---
--- Retrieves the selection `GdkAtom` of the selection data.
---
--- ---
---
---@param self Gtk.SelectionData # a pointer to a `GtkSelectionData`-struct.
---@return Gdk.Atom # the selection `GdkAtom` of the selection data.
function Gtk.SelectionData:get_selection() end

--- # method Gtk.SelectionData:get_target()
---
--- Retrieves the target of the selection.
---
--- ---
---
---@param self Gtk.SelectionData # a pointer to a `GtkSelectionData`-struct.
---@return Gdk.Atom # the target of the selection.
function Gtk.SelectionData:get_target() end

--- # method Gtk.SelectionData:get_targets()
---
--- Gets the contents of `selection_data` as an array of targets.
--- This can be used to interpret the results of getting
--- the standard TARGETS target that is always supplied for
--- any selection.
---
--- ---
---
---@param self Gtk.SelectionData # a `GtkSelectionData` object
---@param targets unknown[] # location to store an array of targets. The result stored here must be freed with `g_free()`.
---@param n_atoms integer # location to store number of items in `targets`.
---@return (boolean|nil) # `true` if `selection_data` contains a valid array of targets, otherwise `false`.
function Gtk.SelectionData:get_targets(targets, n_atoms) end

--- # method Gtk.SelectionData:get_text()
---
--- Gets the contents of the selection data as a UTF-8 string.
---
--- ---
---
---@param self Gtk.SelectionData # a `GtkSelectionData`
---@return string # if the selection data contained a recognized text type and it could be converted to UTF-8, a newly allocated string containing the converted text, otherwise `nil`. If the result is non-`nil` it must be freed with `g_free()`.
function Gtk.SelectionData:get_text() end

--- # method Gtk.SelectionData:get_uris()
---
--- Gets the contents of the selection data as array of URIs.
--- 
--- Since 3.24.37, this may involve using the FileTransfer
--- portal to send files between sandboxed apps.
---
--- ---
---
---@param self Gtk.SelectionData # a `GtkSelectionData`
---@return unknown[] # if the selection data contains a list of URIs, a newly allocated `nil`-terminated string array containing the URIs, otherwise `nil`. If the result is non-`nil` it must be freed with `g_strfreev()`.
function Gtk.SelectionData:get_uris() end

--- # method Gtk.SelectionData:set()
---
--- Stores new data into a `GtkSelectionData` object. Should
--- only be called from a selection handler callback.
--- Zero-terminates the stored data.
---
--- ---
---
---@param self Gtk.SelectionData # a pointer to a `GtkSelectionData`-struct.
---@param type Gdk.Atom # the type of selection data
---@param format integer # format (number of bits in a unit)
---@param data unknown[] # pointer to the data (will be copied)
---@param length integer # length of the data
---@return nil
function Gtk.SelectionData:set(type, format, data, length) end

--- # method Gtk.SelectionData:set_pixbuf()
---
--- Sets the contents of the selection from a `GdkPixbuf`
--- The pixbuf is converted to the form determined by
--- `selection_data`->target.
---
--- ---
---
---@param self Gtk.SelectionData # a `GtkSelectionData`
---@param pixbuf GdkPixbuf.Pixbuf # a `GdkPixbuf`
---@return (boolean|nil) # `true` if the selection was successfully set, otherwise `false`.
function Gtk.SelectionData:set_pixbuf(pixbuf) end

--- # method Gtk.SelectionData:set_text()
---
--- Sets the contents of the selection from a UTF-8 encoded string.
--- The string is converted to the form determined by
--- `selection_data`->target.
---
--- ---
---
---@param self Gtk.SelectionData # a `GtkSelectionData`
---@param str string # a UTF-8 string
---@param len integer # the length of `str`, or -1 if `str` is nul-terminated.
---@return (boolean|nil) # `true` if the selection was successfully set, otherwise `false`.
function Gtk.SelectionData:set_text(str, len) end

--- # method Gtk.SelectionData:set_uris()
---
--- Sets the contents of the selection from a list of URIs.
--- The string is converted to the form determined by
--- `selection_data`->target.
--- 
--- Since 3.24.37, this may involve using the FileTransfer
--- portal to send files between sandboxed apps.
---
--- ---
---
---@param self Gtk.SelectionData # a `GtkSelectionData`
---@param uris unknown[] # a `nil`-terminated array of strings holding URIs
---@return (boolean|nil) # `true` if the selection was successfully set, otherwise `false`.
function Gtk.SelectionData:set_uris(uris) end

--- # method Gtk.SelectionData:targets_include_image()
---
--- Given a `GtkSelectionData` object holding a list of targets,
--- determines if any of the targets in `targets` can be used to
--- provide a `GdkPixbuf`.
---
--- ---
---
---@param self Gtk.SelectionData # a `GtkSelectionData` object
---@param writable (boolean|nil) # whether to accept only targets for which GTK+ knows how to convert a pixbuf into the format
---@return (boolean|nil) # `true` if `selection_data` holds a list of targets, and a suitable target for images is included, otherwise `false`.
function Gtk.SelectionData:targets_include_image(writable) end

--- # method Gtk.SelectionData:targets_include_rich_text()
---
--- Given a `GtkSelectionData` object holding a list of targets,
--- determines if any of the targets in `targets` can be used to
--- provide rich text.
---
--- ---
---
---@param self Gtk.SelectionData # a `GtkSelectionData` object
---@param buffer Gtk.TextBuffer # a `GtkTextBuffer`
---@return (boolean|nil) # `true` if `selection_data` holds a list of targets, and a suitable target for rich text is included, otherwise `false`.
function Gtk.SelectionData:targets_include_rich_text(buffer) end

--- # method Gtk.SelectionData:targets_include_text()
---
--- Given a `GtkSelectionData` object holding a list of targets,
--- determines if any of the targets in `targets` can be used to
--- provide text.
---
--- ---
---
---@param self Gtk.SelectionData # a `GtkSelectionData` object
---@return (boolean|nil) # `true` if `selection_data` holds a list of targets, and a suitable target for text is included, otherwise `false`.
function Gtk.SelectionData:targets_include_text() end

--- # method Gtk.SelectionData:targets_include_uri()
---
--- Given a `GtkSelectionData` object holding a list of targets,
--- determines if any of the targets in `targets` can be used to
--- provide a list or URIs.
---
--- ---
---
---@param self Gtk.SelectionData # a `GtkSelectionData` object
---@return (boolean|nil) # `true` if `selection_data` holds a list of targets, and a suitable target for URI lists is included, otherwise `false`.
function Gtk.SelectionData:targets_include_uri() end

---@enum Gtk.SelectionMode
Gtk.SelectionMode = {}

---@enum Gtk.SensitivityType
Gtk.SensitivityType = {}

--- # class Gtk.Separator
---
--- GtkSeparator is a horizontal or vertical separator widget, depending on the
--- value of the `GtkOrientable`:orientation property, used to group the widgets
--- within a window. It displays a line with a shadow to make it appear sunken
--- into the interface.
--- 
--- # CSS nodes
--- 
--- GtkSeparator has a single CSS node with name separator. The node
--- gets one of the .horizontal or .vertical style classes.
---
--- ---
---
---@class Gtk.Separator : Gtk.Widget, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field widget Gtk.Widget
---@field priv Gtk.SeparatorPrivate
---@operator call: Gtk.Separator
Gtk.Separator = {}

--- # function Gtk.Separator.new()
---
--- Creates a new `GtkSeparator` with the given orientation.
---
--- ---
---
---@param orientation Gtk.Orientation # the separator’s orientation.
---@return Gtk.Widget # a new `GtkSeparator`.
function Gtk.Separator.new(orientation) end

--- # record Gtk.SeparatorClass
---
---@class Gtk.SeparatorClass
---@field parent_class Gtk.WidgetClass
Gtk.SeparatorClass = {}

--- # class Gtk.SeparatorMenuItem
---
--- The `GtkSeparatorMenuItem` is a separator used to group
--- items within a menu. It displays a horizontal line with a shadow to
--- make it appear sunken into the interface.
--- 
--- # CSS nodes
--- 
--- GtkSeparatorMenuItem has a single CSS node with name separator.
---
--- ---
---
---@class Gtk.SeparatorMenuItem : Gtk.MenuItem, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field menu_item Gtk.MenuItem
---@operator call: Gtk.SeparatorMenuItem
Gtk.SeparatorMenuItem = {}

--- # function Gtk.SeparatorMenuItem.new()
---
--- Creates a new `GtkSeparatorMenuItem`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkSeparatorMenuItem`.
function Gtk.SeparatorMenuItem.new() end

--- # record Gtk.SeparatorMenuItemClass
---
---@class Gtk.SeparatorMenuItemClass
---@field parent_class Gtk.MenuItemClass # The parent class.
Gtk.SeparatorMenuItemClass = {}

--- # record Gtk.SeparatorPrivate
---
---@class Gtk.SeparatorPrivate
Gtk.SeparatorPrivate = {}

--- # class Gtk.SeparatorToolItem
---
--- A `GtkSeparatorToolItem` is a `GtkToolItem` that separates groups of other
--- `GtkToolItems`. Depending on the theme, a `GtkSeparatorToolItem` will
--- often look like a vertical line on horizontally docked toolbars.
--- 
--- If the `GtkToolbar` child property “expand” is `true` and the property
--- `GtkSeparatorToolItem`:draw is `false`, a `GtkSeparatorToolItem` will act as
--- a “spring” that forces other items to the ends of the toolbar.
--- 
--- Use `gtk_separator_tool_item_new()` to create a new `GtkSeparatorToolItem`.
--- 
--- # CSS nodes
--- 
--- GtkSeparatorToolItem has a single CSS node with name separator.
---
--- ---
---
---@class Gtk.SeparatorToolItem : Gtk.ToolItem, Gtk.Atk.ImplementorIface, Gtk.Activatable, Gtk.Buildable
---@field parent Gtk.ToolItem
---@field priv Gtk.SeparatorToolItemPrivate
---@operator call: Gtk.SeparatorToolItem
Gtk.SeparatorToolItem = {}

--- # method Gtk.SeparatorToolItem:get_draw()
---
--- Returns whether `item` is drawn as a line, or just blank.
--- See `gtk_separator_tool_item_set_draw()`.
---
--- ---
---
---@param self Gtk.SeparatorToolItem # a `GtkSeparatorToolItem`
---@return (boolean|nil) # `true` if `item` is drawn as a line, or just blank.
function Gtk.SeparatorToolItem:get_draw() end

--- # method Gtk.SeparatorToolItem:set_draw()
---
--- Whether `item` is drawn as a vertical line, or just blank.
--- Setting this to `false` along with `gtk_tool_item_set_expand()` is useful
--- to create an item that forces following items to the end of the toolbar.
---
--- ---
---
---@param self Gtk.SeparatorToolItem # a `GtkSeparatorToolItem`
---@param draw (boolean|nil) # whether `item` is drawn as a vertical line
---@return nil
function Gtk.SeparatorToolItem:set_draw(draw) end

--- # function Gtk.SeparatorToolItem.new()
---
--- Create a new `GtkSeparatorToolItem`
---
--- ---
---
---@return Gtk.ToolItem # the new `GtkSeparatorToolItem`
function Gtk.SeparatorToolItem.new() end

--- # record Gtk.SeparatorToolItemClass
---
---@class Gtk.SeparatorToolItemClass
---@field parent_class Gtk.ToolItemClass # The parent class.
Gtk.SeparatorToolItemClass = {}

--- # record Gtk.SeparatorToolItemPrivate
---
---@class Gtk.SeparatorToolItemPrivate
Gtk.SeparatorToolItemPrivate = {}

--- # class Gtk.Settings
---
--- GtkSettings provide a mechanism to share global settings between
--- applications.
--- 
--- On the X window system, this sharing is realized by an
--- [XSettings](http://www.freedesktop.org/wiki/Specifications/xsettings-spec)
--- manager that is usually part of the desktop environment, along with
--- utilities that let the user change these settings. In the absence of
--- an Xsettings manager, GTK+ reads default values for settings from
--- `settings.ini` files in
--- `/etc/gtk-3.0`, `$XDG_CONFIG_DIRS/gtk-3.0`
--- and `$XDG_CONFIG_HOME/gtk-3.0`.
--- These files must be valid key files (see `GKeyFile`), and have
--- a section called Settings. Themes can also provide default values
--- for settings by installing a `settings.ini` file
--- next to their `gtk.css` file.
--- 
--- Applications can override system-wide settings by setting the property
--- of the GtkSettings object with `g_object_set()`. This should be restricted
--- to special cases though; GtkSettings are not meant as an application
--- configuration facility. When doing so, you need to be aware that settings
--- that are specific to individual widgets may not be available before the
--- widget type has been realized at least once. The following example
--- demonstrates a way to do this:
--- ```c
---   gtk_init (&argc, &argv);
--- 
---   // make sure the type is realized
---   g_type_class_unref (g_type_class_ref (GTK_TYPE_IMAGE_MENU_ITEM));
--- 
---   g_object_set (gtk_settings_get_default (), "gtk-enable-animations", FALSE, NULL);
--- ```
--- 
--- There is one GtkSettings instance per screen. It can be obtained with
--- `gtk_settings_get_for_screen()`, but in many cases, it is more convenient
--- to use `gtk_widget_get_settings()`. `gtk_settings_get_default()` returns the
--- GtkSettings instance for the default screen.
---
--- ---
---
---@class Gtk.Settings : GObject.Object, Gtk.StyleProvider
---@field parent_instance GObject.Object
---@field priv Gtk.SettingsPrivate
Gtk.Settings = {}

--- # method Gtk.Settings:reset_property()
---
--- Undoes the effect of calling `g_object_set()` to install an
--- application-specific value for a setting. After this call,
--- the setting will again follow the session-wide value for
--- this setting.
---
--- ---
---
---@param self Gtk.Settings # a `GtkSettings` object
---@param name string # the name of the setting to reset
---@return nil
function Gtk.Settings:reset_property(name) end

--- # method Gtk.Settings:set_double_property()
---
---@param self Gtk.Settings
---@param name string
---@param v_double number
---@param origin string
---@return nil
function Gtk.Settings:set_double_property(name, v_double, origin) end

--- # method Gtk.Settings:set_long_property()
---
---@param self Gtk.Settings
---@param name string
---@param v_long integer
---@param origin string
---@return nil
function Gtk.Settings:set_long_property(name, v_long, origin) end

--- # method Gtk.Settings:set_property_value()
---
---@param self Gtk.Settings
---@param name string
---@param svalue Gtk.SettingsValue
---@return nil
function Gtk.Settings:set_property_value(name, svalue) end

--- # method Gtk.Settings:set_string_property()
---
---@param self Gtk.Settings
---@param name string
---@param v_string string
---@param origin string
---@return nil
function Gtk.Settings:set_string_property(name, v_string, origin) end

--- # function Gtk.Settings.get_default()
---
--- Gets the `GtkSettings` object for the default GDK screen, creating
--- it if necessary. See `gtk_settings_get_for_screen()`.
---
--- ---
---
---@return Gtk.Settings # a `GtkSettings` object. If there is no default screen, then returns `nil`.
function Gtk.Settings.get_default() end

--- # function Gtk.Settings.get_for_screen()
---
--- Gets the `GtkSettings` object for `screen`, creating it if necessary.
---
--- ---
---
---@param screen Gdk.Screen # a `GdkScreen`.
---@return Gtk.Settings # a `GtkSettings` object.
function Gtk.Settings.get_for_screen(screen) end

--- # function Gtk.Settings.install_property()
---
---@param pspec GObject.ParamSpec
---@return nil
function Gtk.Settings.install_property(pspec) end

--- # function Gtk.Settings.install_property_parser()
---
---@param pspec GObject.ParamSpec
---@param parser Gtk.RcPropertyParser
---@return nil
function Gtk.Settings.install_property_parser(pspec, parser) end

--- # record Gtk.SettingsClass
---
---@class Gtk.SettingsClass
---@field parent_class GObject.ObjectClass
Gtk.SettingsClass = {}

--- # record Gtk.SettingsPrivate
---
---@class Gtk.SettingsPrivate
Gtk.SettingsPrivate = {}

--- # record Gtk.SettingsValue
---
---@class Gtk.SettingsValue
---@field origin string # Origin should be something like “filename:linenumber” for rc files, or e.g. “XProperty” for other sources.
---@field value GObject.Value # Valid types are LONG, DOUBLE and STRING corresponding to the token parsed, or a GSTRING holding an unparsed statement
Gtk.SettingsValue = {}

---@enum Gtk.ShadowType
Gtk.ShadowType = {}

--- # class Gtk.ShortcutLabel
---
--- `GtkShortcutLabel` is a widget that represents a single keyboard shortcut or gesture
--- in the user interface.
---
--- ---
---
---@class Gtk.ShortcutLabel : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@operator call: Gtk.ShortcutLabel
Gtk.ShortcutLabel = {}

--- # method Gtk.ShortcutLabel:get_accelerator()
---
--- Retrieves the current accelerator of `self`.
---
--- ---
---
---@param self Gtk.ShortcutLabel # a `GtkShortcutLabel`
---@return string # the current accelerator.
function Gtk.ShortcutLabel:get_accelerator() end

--- # method Gtk.ShortcutLabel:get_disabled_text()
---
--- Retrieves the text that is displayed when no accelerator is set.
---
--- ---
---
---@param self Gtk.ShortcutLabel # a `GtkShortcutLabel`
---@return string # the current text displayed when no accelerator is set.
function Gtk.ShortcutLabel:get_disabled_text() end

--- # method Gtk.ShortcutLabel:set_accelerator()
---
--- Sets the accelerator to be displayed by `self`.
---
--- ---
---
---@param self Gtk.ShortcutLabel # a `GtkShortcutLabel`
---@param accelerator string # the new accelerator
---@return nil
function Gtk.ShortcutLabel:set_accelerator(accelerator) end

--- # method Gtk.ShortcutLabel:set_disabled_text()
---
--- Sets the text to be displayed by `self` when no accelerator is set.
---
--- ---
---
---@param self Gtk.ShortcutLabel # a `GtkShortcutLabel`
---@param disabled_text string # the text to be displayed when no accelerator is set
---@return nil
function Gtk.ShortcutLabel:set_disabled_text(disabled_text) end

--- # function Gtk.ShortcutLabel.new()
---
--- Creates a new `GtkShortcutLabel` with `accelerator` set.
---
--- ---
---
---@param accelerator string # the initial accelerator
---@return Gtk.Widget # a newly-allocated `GtkShortcutLabel`
function Gtk.ShortcutLabel.new(accelerator) end

--- # record Gtk.ShortcutLabelClass
---
---@class Gtk.ShortcutLabelClass
Gtk.ShortcutLabelClass = {}

---@enum Gtk.ShortcutType
Gtk.ShortcutType = {}

--- # class Gtk.ShortcutsGroup
---
--- A GtkShortcutsGroup represents a group of related keyboard shortcuts
--- or gestures. The group has a title. It may optionally be associated with
--- a view of the application, which can be used to show only relevant shortcuts
--- depending on the application context.
--- 
--- This widget is only meant to be used with `GtkShortcutsWindow`.
---
--- ---
---
---@class Gtk.ShortcutsGroup : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
Gtk.ShortcutsGroup = {}

--- # record Gtk.ShortcutsGroupClass
---
---@class Gtk.ShortcutsGroupClass
Gtk.ShortcutsGroupClass = {}

--- # class Gtk.ShortcutsSection
---
--- A GtkShortcutsSection collects all the keyboard shortcuts and gestures
--- for a major application mode. If your application needs multiple sections,
--- you should give each section a unique `GtkShortcutsSection`:section-name and
--- a `GtkShortcutsSection`:title that can be shown in the section selector of
--- the GtkShortcutsWindow.
--- 
--- The `GtkShortcutsSection`:max-height property can be used to influence how
--- the groups in the section are distributed over pages and columns.
--- 
--- This widget is only meant to be used with `GtkShortcutsWindow`.
---
--- ---
---
---@class Gtk.ShortcutsSection : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
Gtk.ShortcutsSection = {}

--- # record Gtk.ShortcutsSectionClass
---
---@class Gtk.ShortcutsSectionClass
Gtk.ShortcutsSectionClass = {}

--- # class Gtk.ShortcutsShortcut
---
--- A GtkShortcutsShortcut represents a single keyboard shortcut or gesture
--- with a short text. This widget is only meant to be used with `GtkShortcutsWindow`.
---
--- ---
---
---@class Gtk.ShortcutsShortcut : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
Gtk.ShortcutsShortcut = {}

--- # record Gtk.ShortcutsShortcutClass
---
---@class Gtk.ShortcutsShortcutClass
Gtk.ShortcutsShortcutClass = {}

--- # class Gtk.ShortcutsWindow
---
--- A GtkShortcutsWindow shows brief information about the keyboard shortcuts
--- and gestures of an application. The shortcuts can be grouped, and you can
--- have multiple sections in this window, corresponding to the major modes of
--- your application.
--- 
--- Additionally, the shortcuts can be filtered by the current view, to avoid
--- showing information that is not relevant in the current application context.
--- 
--- The recommended way to construct a GtkShortcutsWindow is with GtkBuilder,
--- by populating a `GtkShortcutsWindow` with one or more `GtkShortcutsSection`
--- objects, which contain `GtkShortcutsGroups` that in turn contain objects of
--- class `GtkShortcutsShortcut`.
--- 
--- # A simple example:
--- 
--- ![](gedit-shortcuts.png)
--- 
--- This example has as single section. As you can see, the shortcut groups
--- are arranged in columns, and spread across several pages if there are too
--- many to find on a single page.
--- 
--- The .ui file for this example can be found [here](https://git.gnome.org/browse/gtk+/tree/demos/gtk-demo/shortcuts-gedit.ui).
--- 
--- # An example with multiple views:
--- 
--- ![](clocks-shortcuts.png)
--- 
--- This example shows a `GtkShortcutsWindow` that has been configured to show only
--- the shortcuts relevant to the "stopwatch" view.
--- 
--- The .ui file for this example can be found [here](https://git.gnome.org/browse/gtk+/tree/demos/gtk-demo/shortcuts-clocks.ui).
--- 
--- # An example with multiple sections:
--- 
--- ![](builder-shortcuts.png)
--- 
--- This example shows a `GtkShortcutsWindow` with two sections, "Editor Shortcuts"
--- and "Terminal Shortcuts".
--- 
--- The .ui file for this example can be found [here](https://git.gnome.org/browse/gtk+/tree/demos/gtk-demo/shortcuts-builder.ui).
---
--- ---
---
---@class Gtk.ShortcutsWindow : Gtk.Window, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field window Gtk.Window
Gtk.ShortcutsWindow = {}

--- # record Gtk.ShortcutsWindowClass
---
---@class Gtk.ShortcutsWindowClass
---@field parent_class Gtk.WindowClass
---@field close fun(self: Gtk.ShortcutsWindow): nil
---@field search fun(self: Gtk.ShortcutsWindow): nil
Gtk.ShortcutsWindowClass = {}

--- # class Gtk.SizeGroup
---
--- `GtkSizeGroup` provides a mechanism for grouping a number of widgets
--- together so they all request the same amount of space.  This is
--- typically useful when you want a column of widgets to have the same
--- size, but you can’t use a `GtkGrid` widget.
--- 
--- In detail, the size requested for each widget in a `GtkSizeGroup` is
--- the maximum of the sizes that would have been requested for each
--- widget in the size group if they were not in the size group. The mode
--- of the size group (see `gtk_size_group_set_mode()`) determines whether
--- this applies to the horizontal size, the vertical size, or both sizes.
--- 
--- Note that size groups only affect the amount of space requested, not
--- the size that the widgets finally receive. If you want the widgets in
--- a `GtkSizeGroup` to actually be the same size, you need to pack them in
--- such a way that they get the size they request and not more. For
--- example, if you are packing your widgets into a table, you would not
--- include the %GTK_FILL flag.
--- 
--- `GtkSizeGroup` objects are referenced by each widget in the size group,
--- so once you have added all widgets to a `GtkSizeGroup`, you can drop
--- the initial reference to the size group with `g_object_unref()`. If the
--- widgets in the size group are subsequently destroyed, then they will
--- be removed from the size group and drop their references on the size
--- group; when all widgets have been removed, the size group will be
--- freed.
--- 
--- Widgets can be part of multiple size groups; GTK+ will compute the
--- horizontal size of a widget from the horizontal requisition of all
--- widgets that can be reached from the widget by a chain of size groups
--- of type %GTK_SIZE_GROUP_HORIZONTAL or %GTK_SIZE_GROUP_BOTH, and the
--- vertical size from the vertical requisition of all widgets that can be
--- reached from the widget by a chain of size groups of type
--- %GTK_SIZE_GROUP_VERTICAL or %GTK_SIZE_GROUP_BOTH.
--- 
--- Note that only non-contextual sizes of every widget are ever consulted
--- by size groups (since size groups have no knowledge of what size a widget
--- will be allocated in one dimension, it cannot derive how much height
--- a widget will receive for a given width). When grouping widgets that
--- trade height for width in mode %GTK_SIZE_GROUP_VERTICAL or %GTK_SIZE_GROUP_BOTH:
--- the height for the minimum width will be the requested height for all
--- widgets in the group. The same is of course true when horizontally grouping
--- width for height widgets.
--- 
--- Widgets that trade height-for-width should set a reasonably large minimum width
--- by way of `GtkLabel`:width-chars for instance. Widgets with static sizes as well
--- as widgets that grow (such as ellipsizing text) need no such considerations.
--- 
--- # GtkSizeGroup as GtkBuildable
--- 
--- Size groups can be specified in a UI definition by placing an `<object>`
--- element with `class="GtkSizeGroup"` somewhere in the UI definition. The
--- widgets that belong to the size group are specified by a `<widgets>` element
--- that may contain multiple `<widget>` elements, one for each member of the
--- size group. The ”name” attribute gives the id of the widget.
--- 
--- An example of a UI definition fragment with GtkSizeGroup:
--- 
--- ```xml
--- <object class="GtkSizeGroup">
---   <property name="mode">GTK_SIZE_GROUP_HORIZONTAL</property>
---   <widgets>
---     <widget name="radio1"/>
---     <widget name="radio2"/>
---   </widgets>
--- </object>
--- ```
---
--- ---
---
---@class Gtk.SizeGroup : GObject.Object, Gtk.Buildable
---@field parent_instance GObject.Object
---@field priv Gtk.SizeGroupPrivate
---@operator call: Gtk.SizeGroup
Gtk.SizeGroup = {}

--- # method Gtk.SizeGroup:add_widget()
---
--- Adds a widget to a `GtkSizeGroup`. In the future, the requisition
--- of the widget will be determined as the maximum of its requisition
--- and the requisition of the other widgets in the size group.
--- Whether this applies horizontally, vertically, or in both directions
--- depends on the mode of the size group. See `gtk_size_group_set_mode()`.
--- 
--- When the widget is destroyed or no longer referenced elsewhere, it will
--- be removed from the size group.
---
--- ---
---
---@param self Gtk.SizeGroup # a `GtkSizeGroup`
---@param widget Gtk.Widget # the `GtkWidget` to add
---@return nil
function Gtk.SizeGroup:add_widget(widget) end

--- # method Gtk.SizeGroup:get_ignore_hidden()
---
--- Returns if invisible widgets are ignored when calculating the size.
---
--- ---
---
---@param self Gtk.SizeGroup # a `GtkSizeGroup`
---@return (boolean|nil) # `true` if invisible widgets are ignored.
function Gtk.SizeGroup:get_ignore_hidden() end

--- # method Gtk.SizeGroup:get_mode()
---
--- Gets the current mode of the size group. See `gtk_size_group_set_mode()`.
---
--- ---
---
---@param self Gtk.SizeGroup # a `GtkSizeGroup`
---@return Gtk.SizeGroupMode # the current mode of the size group.
function Gtk.SizeGroup:get_mode() end

--- # method Gtk.SizeGroup:get_widgets()
---
--- Returns the list of widgets associated with `size_group`.
---
--- ---
---
---@param self Gtk.SizeGroup # a `GtkSizeGroup`
---@return Gtk.Widget[] # a `GSList` of widgets. The list is owned by GTK+ and should not be modified.
function Gtk.SizeGroup:get_widgets() end

--- # method Gtk.SizeGroup:remove_widget()
---
--- Removes a widget from a `GtkSizeGroup`.
---
--- ---
---
---@param self Gtk.SizeGroup # a `GtkSizeGroup`
---@param widget Gtk.Widget # the `GtkWidget` to remove
---@return nil
function Gtk.SizeGroup:remove_widget(widget) end

--- # method Gtk.SizeGroup:set_ignore_hidden()
---
--- Sets whether unmapped widgets should be ignored when
--- calculating the size.
---
--- ---
---
---@param self Gtk.SizeGroup # a `GtkSizeGroup`
---@param ignore_hidden (boolean|nil) # whether unmapped widgets should be ignored when calculating the size
---@return nil
function Gtk.SizeGroup:set_ignore_hidden(ignore_hidden) end

--- # method Gtk.SizeGroup:set_mode()
---
--- Sets the `GtkSizeGroupMode` of the size group. The mode of the size
--- group determines whether the widgets in the size group should
--- all have the same horizontal requisition (%GTK_SIZE_GROUP_HORIZONTAL)
--- all have the same vertical requisition (%GTK_SIZE_GROUP_VERTICAL),
--- or should all have the same requisition in both directions
--- (%GTK_SIZE_GROUP_BOTH).
---
--- ---
---
---@param self Gtk.SizeGroup # a `GtkSizeGroup`
---@param mode Gtk.SizeGroupMode # the mode to set for the size group.
---@return nil
function Gtk.SizeGroup:set_mode(mode) end

--- # function Gtk.SizeGroup.new()
---
--- Create a new `GtkSizeGroup`.
---
--- ---
---
---@param mode Gtk.SizeGroupMode # the mode for the new size group.
---@return Gtk.SizeGroup # a newly created `GtkSizeGroup`
function Gtk.SizeGroup.new(mode) end

--- # record Gtk.SizeGroupClass
---
---@class Gtk.SizeGroupClass
---@field parent_class GObject.ObjectClass
Gtk.SizeGroupClass = {}

---@enum Gtk.SizeGroupMode
Gtk.SizeGroupMode = {}

--- # record Gtk.SizeGroupPrivate
---
---@class Gtk.SizeGroupPrivate
Gtk.SizeGroupPrivate = {}

---@enum Gtk.SizeRequestMode
Gtk.SizeRequestMode = {}

--- # class Gtk.Socket
---
--- Together with `GtkPlug`, `GtkSocket` provides the ability to embed
--- widgets from one process into another process in a fashion that
--- is transparent to the user. One process creates a `GtkSocket` widget
--- and passes that widget’s window ID to the other process, which then
--- creates a `GtkPlug` with that window ID. Any widgets contained in the
--- `GtkPlug` then will appear inside the first application’s window.
--- 
--- The socket’s window ID is obtained by using `gtk_socket_get_id()`.
--- Before using this function, the socket must have been realized,
--- and for hence, have been added to its parent.
--- 
--- ## Obtaining the window ID of a socket.
--- 
--- ```c
--- GtkWidget *socket = gtk_socket_new ();
--- gtk_widget_show (socket);
--- gtk_container_add (GTK_CONTAINER (parent), socket);
--- 
--- // The following call is only necessary if one of
--- // the ancestors of the socket is not yet visible.
--- gtk_widget_realize (socket);
--- g_print ("The ID of the sockets window is %`x`\n",
---          gtk_socket_get_id (socket));
--- ```
--- 
--- Note that if you pass the window ID of the socket to another
--- process that will create a plug in the socket, you must make
--- sure that the socket widget is not destroyed until that plug
--- is created. Violating this rule will cause unpredictable
--- consequences, the most likely consequence being that the plug
--- will appear as a separate toplevel window. You can check if
--- the plug has been created by using `gtk_socket_get_plug_window()`.
--- If it returns a non-`nil` value, then the plug has been
--- successfully created inside of the socket.
--- 
--- When GTK+ is notified that the embedded window has been destroyed,
--- then it will destroy the socket as well. You should always,
--- therefore, be prepared for your sockets to be destroyed at any
--- time when the main event loop is running. To prevent this from
--- happening, you can connect to the `GtkSocket`::plug-removed signal.
--- 
--- The communication between a `GtkSocket` and a `GtkPlug` follows the
--- [XEmbed Protocol](http://www.freedesktop.org/Standards/xembed-spec).
--- This protocol has also been implemented in other toolkits, e.g. Qt,
--- allowing the same level of integration when embedding a Qt widget
--- in GTK or vice versa.
--- 
--- The `GtkPlug` and `GtkSocket` widgets are only available when GTK+
--- is compiled for the X11 platform and %GDK_WINDOWING_X11 is defined.
--- They can only be used on a `GdkX11Display`. To use `GtkPlug` and
--- `GtkSocket`, you need to include the `gtk/gtkx.h` header.
---
--- ---
---
---@class Gtk.Socket : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field container Gtk.Container
---@field priv Gtk.SocketPrivate
---@operator call: Gtk.Socket
Gtk.Socket = {}

--- # method Gtk.Socket:add_id()
---
--- Adds an XEMBED client, such as a `GtkPlug`, to the `GtkSocket`.  The
--- client may be in the same process or in a different process.
--- 
--- To embed a `GtkPlug` in a `GtkSocket`, you can either create the
--- `GtkPlug` with `gtk_plug_new (0)`, call
--- `gtk_plug_get_id()` to get the window ID of the plug, and then pass that to the
--- `gtk_socket_add_id()`, or you can call `gtk_socket_get_id()` to get the
--- window ID for the socket, and call `gtk_plug_new()` passing in that
--- ID.
--- 
--- The `GtkSocket` must have already be added into a toplevel window
---  before you can make this call.
---
--- ---
---
---@param self Gtk.Socket # a `GtkSocket`
---@param window xlib.Window # the Window of a client participating in the XEMBED protocol.
---@return nil
function Gtk.Socket:add_id(window) end

--- # method Gtk.Socket:get_id()
---
--- Gets the window ID of a `GtkSocket` widget, which can then
--- be used to create a client embedded inside the socket, for
--- instance with `gtk_plug_new()`.
--- 
--- The `GtkSocket` must have already be added into a toplevel window
--- before you can make this call.
---
--- ---
---
---@param self Gtk.Socket # a `GtkSocket`.
---@return xlib.Window # the window ID for the socket
function Gtk.Socket:get_id() end

--- # method Gtk.Socket:get_plug_window()
---
--- Retrieves the window of the plug. Use this to check if the plug has
--- been created inside of the socket.
---
--- ---
---
---@param self Gtk.Socket # a `GtkSocket`.
---@return Gdk.Window # the window of the plug if available, or `nil`
function Gtk.Socket:get_plug_window() end

--- # function Gtk.Socket.new()
---
--- Create a new empty `GtkSocket`.
---
--- ---
---
---@return Gtk.Widget # the new `GtkSocket`.
function Gtk.Socket.new() end

--- # class Gtk.SocketAccessible
---
---@class Gtk.SocketAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.SocketAccessiblePrivate
Gtk.SocketAccessible = {}

--- # method Gtk.SocketAccessible:embed()
---
---@param self Gtk.SocketAccessible
---@param path string
---@return nil
function Gtk.SocketAccessible:embed(path) end

--- # record Gtk.SocketAccessibleClass
---
---@class Gtk.SocketAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.SocketAccessibleClass = {}

--- # record Gtk.SocketAccessiblePrivate
---
---@class Gtk.SocketAccessiblePrivate
Gtk.SocketAccessiblePrivate = {}

--- # record Gtk.SocketClass
---
---@class Gtk.SocketClass
---@field parent_class Gtk.ContainerClass
---@field plug_added fun(socket_: Gtk.Socket): nil
---@field plug_removed fun(socket_: Gtk.Socket): (boolean|nil)
Gtk.SocketClass = {}

--- # record Gtk.SocketPrivate
---
---@class Gtk.SocketPrivate
Gtk.SocketPrivate = {}

---@enum Gtk.SortType
Gtk.SortType = {}

--- # class Gtk.SpinButton
---
--- A `GtkSpinButton` is an ideal way to allow the user to set the value of
--- some attribute. Rather than having to directly type a number into a
--- `GtkEntry`, GtkSpinButton allows the user to click on one of two arrows
--- to increment or decrement the displayed value. A value can still be
--- typed in, with the bonus that it can be checked to ensure it is in a
--- given range.
--- 
--- The main properties of a GtkSpinButton are through an adjustment.
--- See the `GtkAdjustment` section for more details about an adjustment's
--- properties. Note that GtkSpinButton will by default make its entry
--- large enough to accomodate the lower and upper bounds of the adjustment,
--- which can lead to surprising results. Best practice is to set both
--- the `GtkEntry`:width-chars and `GtkEntry`:max-width-chars poperties
--- to the desired number of characters to display in the entry.
--- 
--- # CSS nodes
--- 
--- ```plain
--- spinbutton.horizontal
--- ├── undershoot.left
--- ├── undershoot.right
--- ├── entry
--- │   ╰── ...
--- ├── button.down
--- ╰── button.up
--- ```
--- 
--- ```plain
--- spinbutton.vertical
--- ├── undershoot.left
--- ├── undershoot.right
--- ├── button.up
--- ├── entry
--- │   ╰── ...
--- ╰── button.down
--- ```
--- 
--- GtkSpinButtons main CSS node has the name spinbutton. It creates subnodes
--- for the entry and the two buttons, with these names. The button nodes have
--- the style classes .up and .down. The GtkEntry subnodes (if present) are put
--- below the entry node. The orientation of the spin button is reflected in
--- the .vertical or .horizontal style class on the main node.
--- 
--- ## Using a GtkSpinButton to get an integer
--- 
--- ```c
--- // Provides a function to retrieve an integer value from a GtkSpinButton
--- // and creates a spin button to model percentage values.
--- 
--- gint
--- grab_int_value (GtkSpinButton *button,
---                 gpointer       user_data)
--- {
---   return gtk_spin_button_get_value_as_int (button);
--- }
--- 
--- void
--- create_integer_spin_button (void)
--- {
--- 
---   GtkWidget *window, *button;
---   GtkAdjustment *adjustment;
--- 
---   adjustment = gtk_adjustment_new (50.0, 0.0, 100.0, 1.0, 5.0, 0.0);
--- 
---   window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
---   gtk_container_set_border_width (GTK_CONTAINER (window), 5);
--- 
---   // creates the spinbutton, with no decimal places
---   button = gtk_spin_button_new (adjustment, 1.0, 0);
---   gtk_container_add (GTK_CONTAINER (window), button);
--- 
---   gtk_widget_show_all (window);
--- }
--- ```
--- 
--- ## Using a GtkSpinButton to get a floating point value
--- 
--- ```c
--- // Provides a function to retrieve a floating point value from a
--- // GtkSpinButton, and creates a high precision spin button.
--- 
--- gfloat
--- grab_float_value (GtkSpinButton *button,
---                   gpointer       user_data)
--- {
---   return gtk_spin_button_get_value (button);
--- }
--- 
--- void
--- create_floating_spin_button (void)
--- {
---   GtkWidget *window, *button;
---   GtkAdjustment *adjustment;
--- 
---   adjustment = gtk_adjustment_new (2.500, 0.0, 5.0, 0.001, 0.1, 0.0);
--- 
---   window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
---   gtk_container_set_border_width (GTK_CONTAINER (window), 5);
--- 
---   // creates the spinbutton, with three decimal places
---   button = gtk_spin_button_new (adjustment, 0.001, 3);
---   gtk_container_add (GTK_CONTAINER (window), button);
--- 
---   gtk_widget_show_all (window);
--- }
--- ```
---
--- ---
---
---@class Gtk.SpinButton : Gtk.Entry, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.CellEditable, Gtk.Editable, Gtk.Orientable
---@field entry Gtk.Entry
---@field priv Gtk.SpinButtonPrivate
---@operator call: Gtk.SpinButton
Gtk.SpinButton = {}

--- # method Gtk.SpinButton:configure()
---
--- Changes the properties of an existing spin button. The adjustment,
--- climb rate, and number of decimal places are updated accordingly.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@param adjustment? Gtk.Adjustment # a `GtkAdjustment` to replace the spin button’s existing adjustment, or `nil` to leave its current adjustment unchanged
---@param climb_rate number # the new climb rate
---@param digits integer # the number of decimal places to display in the spin button
---@return nil
function Gtk.SpinButton:configure(adjustment, climb_rate, digits) end

--- # method Gtk.SpinButton:get_adjustment()
---
--- Get the adjustment associated with a `GtkSpinButton`
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@return Gtk.Adjustment # the `GtkAdjustment` of `spin_button`
function Gtk.SpinButton:get_adjustment() end

--- # method Gtk.SpinButton:get_digits()
---
--- Fetches the precision of `spin_button`. See `gtk_spin_button_set_digits()`.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@return integer # the current precision
function Gtk.SpinButton:get_digits() end

--- # method Gtk.SpinButton:get_increments()
---
--- Gets the current step and page the increments used by `spin_button`. See
--- `gtk_spin_button_set_increments()`.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@param step? number # location to store step increment, or `nil`
---@param page? number # location to store page increment, or `nil`
---@return nil
function Gtk.SpinButton:get_increments(step, page) end

--- # method Gtk.SpinButton:get_numeric()
---
--- Returns whether non-numeric text can be typed into the spin button.
--- See `gtk_spin_button_set_numeric()`.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@return (boolean|nil) # `true` if only numeric text can be entered
function Gtk.SpinButton:get_numeric() end

--- # method Gtk.SpinButton:get_range()
---
--- Gets the range allowed for `spin_button`.
--- See `gtk_spin_button_set_range()`.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@param min? number # location to store minimum allowed value, or `nil`
---@param max? number # location to store maximum allowed value, or `nil`
---@return nil
function Gtk.SpinButton:get_range(min, max) end

--- # method Gtk.SpinButton:get_snap_to_ticks()
---
--- Returns whether the values are corrected to the nearest step.
--- See `gtk_spin_button_set_snap_to_ticks()`.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@return (boolean|nil) # `true` if values are snapped to the nearest step
function Gtk.SpinButton:get_snap_to_ticks() end

--- # method Gtk.SpinButton:get_update_policy()
---
--- Gets the update behavior of a spin button.
--- See `gtk_spin_button_set_update_policy()`.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@return Gtk.SpinButtonUpdatePolicy # the current update policy
function Gtk.SpinButton:get_update_policy() end

--- # method Gtk.SpinButton:get_value()
---
--- Get the value in the `spin_button`.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@return number # the value of `spin_button`
function Gtk.SpinButton:get_value() end

--- # method Gtk.SpinButton:get_value_as_int()
---
--- Get the value `spin_button` represented as an integer.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@return integer # the value of `spin_button`
function Gtk.SpinButton:get_value_as_int() end

--- # method Gtk.SpinButton:get_wrap()
---
--- Returns whether the spin button’s value wraps around to the
--- opposite limit when the upper or lower limit of the range is
--- exceeded. See `gtk_spin_button_set_wrap()`.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@return (boolean|nil) # `true` if the spin button wraps around
function Gtk.SpinButton:get_wrap() end

--- # method Gtk.SpinButton:set_adjustment()
---
--- Replaces the `GtkAdjustment` associated with `spin_button`.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@param adjustment Gtk.Adjustment # a `GtkAdjustment` to replace the existing adjustment
---@return nil
function Gtk.SpinButton:set_adjustment(adjustment) end

--- # method Gtk.SpinButton:set_digits()
---
--- Set the precision to be displayed by `spin_button`. Up to 20 digit precision
--- is allowed.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@param digits integer # the number of digits after the decimal point to be displayed for the spin button’s value
---@return nil
function Gtk.SpinButton:set_digits(digits) end

--- # method Gtk.SpinButton:set_increments()
---
--- Sets the step and page increments for spin_button.  This affects how
--- quickly the value changes when the spin button’s arrows are activated.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@param step number # increment applied for a button 1 press.
---@param page number # increment applied for a button 2 press.
---@return nil
function Gtk.SpinButton:set_increments(step, page) end

--- # method Gtk.SpinButton:set_numeric()
---
--- Sets the flag that determines if non-numeric text can be typed
--- into the spin button.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@param numeric (boolean|nil) # flag indicating if only numeric entry is allowed
---@return nil
function Gtk.SpinButton:set_numeric(numeric) end

--- # method Gtk.SpinButton:set_range()
---
--- Sets the minimum and maximum allowable values for `spin_button`.
--- 
--- If the current value is outside this range, it will be adjusted
--- to fit within the range, otherwise it will remain unchanged.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@param min number # minimum allowable value
---@param max number # maximum allowable value
---@return nil
function Gtk.SpinButton:set_range(min, max) end

--- # method Gtk.SpinButton:set_snap_to_ticks()
---
--- Sets the policy as to whether values are corrected to the
--- nearest step increment when a spin button is activated after
--- providing an invalid value.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@param snap_to_ticks (boolean|nil) # a flag indicating if invalid values should be corrected
---@return nil
function Gtk.SpinButton:set_snap_to_ticks(snap_to_ticks) end

--- # method Gtk.SpinButton:set_update_policy()
---
--- Sets the update behavior of a spin button.
--- This determines whether the spin button is always updated
--- or only when a valid value is set.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@param policy Gtk.SpinButtonUpdatePolicy # a `GtkSpinButtonUpdatePolicy` value
---@return nil
function Gtk.SpinButton:set_update_policy(policy) end

--- # method Gtk.SpinButton:set_value()
---
--- Sets the value of `spin_button`.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@param value number # the new value
---@return nil
function Gtk.SpinButton:set_value(value) end

--- # method Gtk.SpinButton:set_wrap()
---
--- Sets the flag that determines if a spin button value wraps
--- around to the opposite limit when the upper or lower limit
--- of the range is exceeded.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@param wrap (boolean|nil) # a flag indicating if wrapping behavior is performed
---@return nil
function Gtk.SpinButton:set_wrap(wrap) end

--- # method Gtk.SpinButton:spin()
---
--- Increment or decrement a spin button’s value in a specified
--- direction by a specified amount.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@param direction Gtk.SpinType # a `GtkSpinType` indicating the direction to spin
---@param increment number # step increment to apply in the specified direction
---@return nil
function Gtk.SpinButton:spin(direction, increment) end

--- # method Gtk.SpinButton:update()
---
--- Manually force an update of the spin button.
---
--- ---
---
---@param self Gtk.SpinButton # a `GtkSpinButton`
---@return nil
function Gtk.SpinButton:update() end

--- # function Gtk.SpinButton.new()
---
--- Creates a new `GtkSpinButton`.
---
--- ---
---
---@param adjustment? Gtk.Adjustment # the `GtkAdjustment` object that this spin button should use, or `nil`
---@param climb_rate number # specifies by how much the rate of change in the value will accelerate if you continue to hold down an up/down button or arrow key
---@param digits integer # the number of decimal places to display
---@return Gtk.Widget # The new spin button as a `GtkWidget`
function Gtk.SpinButton.new(adjustment, climb_rate, digits) end

--- # function Gtk.SpinButton.new_with_range()
---
--- This is a convenience constructor that allows creation of a numeric
--- `GtkSpinButton` without manually creating an adjustment. The value is
--- initially set to the minimum value and a page increment of 10 * `step`
--- is the default. The precision of the spin button is equivalent to the
--- precision of `step`.
--- 
--- Note that the way in which the precision is derived works best if `step`
--- is a power of ten. If the resulting precision is not suitable for your
--- needs, use `gtk_spin_button_set_digits()` to correct it.
---
--- ---
---
---@param min number # Minimum allowable value
---@param max number # Maximum allowable value
---@param step number # Increment added or subtracted by spinning the widget
---@return Gtk.Widget # The new spin button as a `GtkWidget`
function Gtk.SpinButton.new_with_range(min, max, step) end

--- # class Gtk.SpinButtonAccessible
---
---@class Gtk.SpinButtonAccessible : Gtk.EntryAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.EditableText, Gtk.Atk.Text, Gtk.Atk.Value
---@field parent Gtk.EntryAccessible
---@field priv Gtk.SpinButtonAccessiblePrivate
Gtk.SpinButtonAccessible = {}

--- # record Gtk.SpinButtonAccessibleClass
---
---@class Gtk.SpinButtonAccessibleClass
---@field parent_class Gtk.EntryAccessibleClass
Gtk.SpinButtonAccessibleClass = {}

--- # record Gtk.SpinButtonAccessiblePrivate
---
---@class Gtk.SpinButtonAccessiblePrivate
Gtk.SpinButtonAccessiblePrivate = {}

--- # record Gtk.SpinButtonClass
---
---@class Gtk.SpinButtonClass
---@field parent_class Gtk.EntryClass
---@field input fun(spin_button: Gtk.SpinButton, new_value: number): integer
---@field output fun(spin_button: Gtk.SpinButton): integer
---@field value_changed fun(spin_button: Gtk.SpinButton): nil
---@field change_value fun(spin_button: Gtk.SpinButton, scroll: Gtk.ScrollType): nil
---@field wrapped fun(spin_button: Gtk.SpinButton): nil
Gtk.SpinButtonClass = {}

--- # record Gtk.SpinButtonPrivate
---
---@class Gtk.SpinButtonPrivate
Gtk.SpinButtonPrivate = {}

---@enum Gtk.SpinButtonUpdatePolicy
Gtk.SpinButtonUpdatePolicy = {}

---@enum Gtk.SpinType
Gtk.SpinType = {}

--- # class Gtk.Spinner
---
--- A GtkSpinner widget displays an icon-size spinning animation.
--- It is often used as an alternative to a `GtkProgressBar` for
--- displaying indefinite activity, instead of actual progress.
--- 
--- To start the animation, use `gtk_spinner_start()`, to stop it
--- use `gtk_spinner_stop()`.
--- 
--- # CSS nodes
--- 
--- GtkSpinner has a single CSS node with the name spinner. When the animation is
--- active, the :checked pseudoclass is added to this node.
---
--- ---
---
---@class Gtk.Spinner : Gtk.Widget, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent Gtk.Widget
---@field priv Gtk.SpinnerPrivate
---@operator call: Gtk.Spinner
Gtk.Spinner = {}

--- # method Gtk.Spinner:start()
---
--- Starts the animation of the spinner.
---
--- ---
---
---@param self Gtk.Spinner # a `GtkSpinner`
---@return nil
function Gtk.Spinner:start() end

--- # method Gtk.Spinner:stop()
---
--- Stops the animation of the spinner.
---
--- ---
---
---@param self Gtk.Spinner # a `GtkSpinner`
---@return nil
function Gtk.Spinner:stop() end

--- # function Gtk.Spinner.new()
---
--- Returns a new spinner widget. Not yet started.
---
--- ---
---
---@return Gtk.Widget # a new `GtkSpinner`
function Gtk.Spinner.new() end

--- # class Gtk.SpinnerAccessible
---
---@class Gtk.SpinnerAccessible : Gtk.WidgetAccessible, Gtk.Atk.Component, Gtk.Atk.Image
---@field parent Gtk.WidgetAccessible
---@field priv Gtk.SpinnerAccessiblePrivate
Gtk.SpinnerAccessible = {}

--- # record Gtk.SpinnerAccessibleClass
---
---@class Gtk.SpinnerAccessibleClass
---@field parent_class Gtk.WidgetAccessibleClass
Gtk.SpinnerAccessibleClass = {}

--- # record Gtk.SpinnerAccessiblePrivate
---
---@class Gtk.SpinnerAccessiblePrivate
Gtk.SpinnerAccessiblePrivate = {}

--- # record Gtk.SpinnerClass
---
---@class Gtk.SpinnerClass
---@field parent_class Gtk.WidgetClass
Gtk.SpinnerClass = {}

--- # record Gtk.SpinnerPrivate
---
---@class Gtk.SpinnerPrivate
Gtk.SpinnerPrivate = {}

--- # class Gtk.Stack
---
--- The GtkStack widget is a container which only shows
--- one of its children at a time. In contrast to GtkNotebook,
--- GtkStack does not provide a means for users to change the
--- visible child. Instead, the `GtkStackSwitcher` widget can be
--- used with GtkStack to provide this functionality.
--- 
--- Transitions between pages can be animated as slides or
--- fades. This can be controlled with `gtk_stack_set_transition_type()`.
--- These animations respect the `GtkSettings`:gtk-enable-animations
--- setting.
--- 
--- The GtkStack widget was added in GTK+ 3.10.
--- 
--- # CSS nodes
--- 
--- GtkStack has a single CSS node named stack.
---
--- ---
---
---@class Gtk.Stack : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent_instance Gtk.Container
---@operator call: Gtk.Stack
Gtk.Stack = {}

--- # method Gtk.Stack:add_named()
---
--- Adds a child to `stack`.
--- The child is identified by the `name`.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@param child Gtk.Widget # the widget to add
---@param name string # the name for `child`
---@return nil
function Gtk.Stack:add_named(child, name) end

--- # method Gtk.Stack:add_titled()
---
--- Adds a child to `stack`.
--- The child is identified by the `name`. The `title`
--- will be used by `GtkStackSwitcher` to represent
--- `child` in a tab bar, so it should be short.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@param child Gtk.Widget # the widget to add
---@param name string # the name for `child`
---@param title string # a human-readable title for `child`
---@return nil
function Gtk.Stack:add_titled(child, name, title) end

--- # method Gtk.Stack:get_child_by_name()
---
--- Finds the child of the `GtkStack` with the name given as
--- the argument. Returns `nil` if there is no child with this
--- name.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@param name string # the name of the child to find
---@return Gtk.Widget # the requested child of the `GtkStack`
function Gtk.Stack:get_child_by_name(name) end

--- # method Gtk.Stack:get_hhomogeneous()
---
--- Gets whether `stack` is horizontally homogeneous.
--- See `gtk_stack_set_hhomogeneous()`.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@return (boolean|nil) # whether `stack` is horizontally homogeneous.
function Gtk.Stack:get_hhomogeneous() end

--- # method Gtk.Stack:get_homogeneous()
---
--- Gets whether `stack` is homogeneous.
--- See `gtk_stack_set_homogeneous()`.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@return (boolean|nil) # whether `stack` is homogeneous.
function Gtk.Stack:get_homogeneous() end

--- # method Gtk.Stack:get_interpolate_size()
---
--- Returns wether the `GtkStack` is set up to interpolate between
--- the sizes of children on page switch.
---
--- ---
---
---@param self Gtk.Stack # A `GtkStack`
---@return (boolean|nil) # `true` if child sizes are interpolated
function Gtk.Stack:get_interpolate_size() end

--- # method Gtk.Stack:get_transition_duration()
---
--- Returns the amount of time (in milliseconds) that
--- transitions between pages in `stack` will take.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@return integer # the transition duration
function Gtk.Stack:get_transition_duration() end

--- # method Gtk.Stack:get_transition_running()
---
--- Returns whether the `stack` is currently in a transition from one page to
--- another.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@return (boolean|nil) # `true` if the transition is currently running, `false` otherwise.
function Gtk.Stack:get_transition_running() end

--- # method Gtk.Stack:get_transition_type()
---
--- Gets the type of animation that will be used
--- for transitions between pages in `stack`.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@return Gtk.StackTransitionType # the current transition type of `stack`
function Gtk.Stack:get_transition_type() end

--- # method Gtk.Stack:get_vhomogeneous()
---
--- Gets whether `stack` is vertically homogeneous.
--- See `gtk_stack_set_vhomogeneous()`.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@return (boolean|nil) # whether `stack` is vertically homogeneous.
function Gtk.Stack:get_vhomogeneous() end

--- # method Gtk.Stack:get_visible_child()
---
--- Gets the currently visible child of `stack`, or `nil` if
--- there are no visible children.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@return Gtk.Widget # the visible child of the `GtkStack`
function Gtk.Stack:get_visible_child() end

--- # method Gtk.Stack:get_visible_child_name()
---
--- Returns the name of the currently visible child of `stack`, or
--- `nil` if there is no visible child.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@return string # the name of the visible child of the `GtkStack`
function Gtk.Stack:get_visible_child_name() end

--- # method Gtk.Stack:set_hhomogeneous()
---
--- Sets the `GtkStack` to be horizontally homogeneous or not.
--- If it is homogeneous, the `GtkStack` will request the same
--- width for all its children. If it isn't, the stack
--- may change width when a different child becomes visible.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@param hhomogeneous (boolean|nil) # `true` to make `stack` horizontally homogeneous
---@return nil
function Gtk.Stack:set_hhomogeneous(hhomogeneous) end

--- # method Gtk.Stack:set_homogeneous()
---
--- Sets the `GtkStack` to be homogeneous or not. If it
--- is homogeneous, the `GtkStack` will request the same
--- size for all its children. If it isn't, the stack
--- may change size when a different child becomes visible.
--- 
--- Since 3.16, homogeneity can be controlled separately
--- for horizontal and vertical size, with the
--- `GtkStack`:hhomogeneous and `GtkStack`:vhomogeneous.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@param homogeneous (boolean|nil) # `true` to make `stack` homogeneous
---@return nil
function Gtk.Stack:set_homogeneous(homogeneous) end

--- # method Gtk.Stack:set_interpolate_size()
---
--- Sets whether or not `stack` will interpolate its size when
--- changing the visible child. If the `GtkStack`:interpolate-size
--- property is set to `true`, `stack` will interpolate its size between
--- the current one and the one it'll take after changing the
--- visible child, according to the set transition duration.
---
--- ---
---
---@param self Gtk.Stack # A `GtkStack`
---@param interpolate_size (boolean|nil) # the new value
---@return nil
function Gtk.Stack:set_interpolate_size(interpolate_size) end

--- # method Gtk.Stack:set_transition_duration()
---
--- Sets the duration that transitions between pages in `stack`
--- will take.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@param duration integer # the new duration, in milliseconds
---@return nil
function Gtk.Stack:set_transition_duration(duration) end

--- # method Gtk.Stack:set_transition_type()
---
--- Sets the type of animation that will be used for
--- transitions between pages in `stack`. Available
--- types include various kinds of fades and slides.
--- 
--- The transition type can be changed without problems
--- at runtime, so it is possible to change the animation
--- based on the page that is about to become current.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@param transition Gtk.StackTransitionType # the new transition type
---@return nil
function Gtk.Stack:set_transition_type(transition) end

--- # method Gtk.Stack:set_vhomogeneous()
---
--- Sets the `GtkStack` to be vertically homogeneous or not.
--- If it is homogeneous, the `GtkStack` will request the same
--- height for all its children. If it isn't, the stack
--- may change height when a different child becomes visible.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@param vhomogeneous (boolean|nil) # `true` to make `stack` vertically homogeneous
---@return nil
function Gtk.Stack:set_vhomogeneous(vhomogeneous) end

--- # method Gtk.Stack:set_visible_child()
---
--- Makes `child` the visible child of `stack`.
--- 
--- If `child` is different from the currently
--- visible child, the transition between the
--- two will be animated with the current
--- transition type of `stack`.
--- 
--- Note that the `child` widget has to be visible itself
--- (see `gtk_widget_show()`) in order to become the visible
--- child of `stack`.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@param child Gtk.Widget # a child of `stack`
---@return nil
function Gtk.Stack:set_visible_child(child) end

--- # method Gtk.Stack:set_visible_child_full()
---
--- Makes the child with the given name visible.
--- 
--- Note that the child widget has to be visible itself
--- (see `gtk_widget_show()`) in order to become the visible
--- child of `stack`.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@param name string # the name of the child to make visible
---@param transition Gtk.StackTransitionType # the transition type to use
---@return nil
function Gtk.Stack:set_visible_child_full(name, transition) end

--- # method Gtk.Stack:set_visible_child_name()
---
--- Makes the child with the given name visible.
--- 
--- If `child` is different from the currently
--- visible child, the transition between the
--- two will be animated with the current
--- transition type of `stack`.
--- 
--- Note that the child widget has to be visible itself
--- (see `gtk_widget_show()`) in order to become the visible
--- child of `stack`.
---
--- ---
---
---@param self Gtk.Stack # a `GtkStack`
---@param name string # the name of the child to make visible
---@return nil
function Gtk.Stack:set_visible_child_name(name) end

--- # function Gtk.Stack.new()
---
--- Creates a new `GtkStack` container.
---
--- ---
---
---@return Gtk.Widget # a new `GtkStack`
function Gtk.Stack.new() end

--- # class Gtk.StackAccessible
---
---@class Gtk.StackAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component
---@field parent Gtk.ContainerAccessible
Gtk.StackAccessible = {}

--- # record Gtk.StackAccessibleClass
---
---@class Gtk.StackAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.StackAccessibleClass = {}

--- # record Gtk.StackClass
---
---@class Gtk.StackClass
---@field parent_class Gtk.ContainerClass
Gtk.StackClass = {}

--- # class Gtk.StackSidebar
---
--- A GtkStackSidebar enables you to quickly and easily provide a
--- consistent "sidebar" object for your user interface.
--- 
--- In order to use a GtkStackSidebar, you simply use a GtkStack to
--- organize your UI flow, and add the sidebar to your sidebar area. You
--- can use `gtk_stack_sidebar_set_stack()` to connect the `GtkStackSidebar`
--- to the `GtkStack`.
--- 
--- # CSS nodes
--- 
--- GtkStackSidebar has a single CSS node with name stacksidebar and
--- style class .sidebar.
--- 
--- When circumstances require it, GtkStackSidebar adds the
--- .needs-attention style class to the widgets representing the stack
--- pages.
---
--- ---
---
---@class Gtk.StackSidebar : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent Gtk.Bin
---@operator call: Gtk.StackSidebar
Gtk.StackSidebar = {}

--- # method Gtk.StackSidebar:get_stack()
---
--- Retrieves the stack.
--- See `gtk_stack_sidebar_set_stack()`.
---
--- ---
---
---@param self Gtk.StackSidebar # a `GtkStackSidebar`
---@return Gtk.Stack # the associated `GtkStack` or `nil` if none has been set explicitly
function Gtk.StackSidebar:get_stack() end

--- # method Gtk.StackSidebar:set_stack()
---
--- Set the `GtkStack` associated with this `GtkStackSidebar`.
--- 
--- The sidebar widget will automatically update according to the order
--- (packing) and items within the given `GtkStack`.
---
--- ---
---
---@param self Gtk.StackSidebar # a `GtkStackSidebar`
---@param stack Gtk.Stack # a `GtkStack`
---@return nil
function Gtk.StackSidebar:set_stack(stack) end

--- # function Gtk.StackSidebar.new()
---
--- Creates a new sidebar.
---
--- ---
---
---@return Gtk.Widget # the new `GtkStackSidebar`
function Gtk.StackSidebar.new() end

--- # record Gtk.StackSidebarClass
---
---@class Gtk.StackSidebarClass
---@field parent_class Gtk.BinClass
Gtk.StackSidebarClass = {}

--- # record Gtk.StackSidebarPrivate
---
---@class Gtk.StackSidebarPrivate
Gtk.StackSidebarPrivate = {}

--- # class Gtk.StackSwitcher
---
--- The GtkStackSwitcher widget acts as a controller for a
--- `GtkStack`; it shows a row of buttons to switch between
--- the various pages of the associated stack widget.
--- 
--- All the content for the buttons comes from the child properties
--- of the `GtkStack`; the button visibility in a `GtkStackSwitcher`
--- widget is controlled by the visibility of the child in the
--- `GtkStack`.
--- 
--- It is possible to associate multiple `GtkStackSwitcher` widgets
--- with the same `GtkStack` widget.
--- 
--- The GtkStackSwitcher widget was added in 3.10.
--- 
--- # CSS nodes
--- 
--- GtkStackSwitcher has a single CSS node named stackswitcher and
--- style class .stack-switcher.
--- 
--- When circumstances require it, GtkStackSwitcher adds the
--- .needs-attention style class to the widgets representing the
--- stack pages.
---
--- ---
---
---@class Gtk.StackSwitcher : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field widget Gtk.Box
---@operator call: Gtk.StackSwitcher
Gtk.StackSwitcher = {}

--- # method Gtk.StackSwitcher:get_stack()
---
--- Retrieves the stack.
--- See `gtk_stack_switcher_set_stack()`.
---
--- ---
---
---@param self Gtk.StackSwitcher # a `GtkStackSwitcher`
---@return Gtk.Stack # the stack, or `nil` if none has been set explicitly.
function Gtk.StackSwitcher:get_stack() end

--- # method Gtk.StackSwitcher:set_stack()
---
--- Sets the stack to control.
---
--- ---
---
---@param self Gtk.StackSwitcher # a `GtkStackSwitcher`
---@param stack? Gtk.Stack # a `GtkStack`
---@return nil
function Gtk.StackSwitcher:set_stack(stack) end

--- # function Gtk.StackSwitcher.new()
---
--- Create a new `GtkStackSwitcher`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkStackSwitcher`.
function Gtk.StackSwitcher.new() end

--- # record Gtk.StackSwitcherClass
---
---@class Gtk.StackSwitcherClass
---@field parent_class Gtk.BoxClass
Gtk.StackSwitcherClass = {}

---@enum Gtk.StackTransitionType
Gtk.StackTransitionType = {}

---@enum Gtk.StateFlags
Gtk.StateFlags = {}

---@enum Gtk.StateType
Gtk.StateType = {}

--- # class Gtk.StatusIcon
---
--- The “system tray” or notification area is normally used for transient icons
--- that indicate some special state. For example, a system tray icon might
--- appear to tell the user that they have new mail, or have an incoming instant
--- message, or something along those lines. The basic idea is that creating an
--- icon in the notification area is less annoying than popping up a dialog.
--- 
--- A `GtkStatusIcon` object can be used to display an icon in a “system tray”.
--- The icon can have a tooltip, and the user can interact with it by
--- activating it or popping up a context menu.
--- 
--- It is very important to notice that status icons depend on the existence
--- of a notification area being available to the user; you should not use status
--- icons as the only way to convey critical information regarding your application,
--- as the notification area may not exist on the user's environment, or may have
--- been removed. You should always check that a status icon has been embedded into
--- a notification area by using `gtk_status_icon_is_embedded()`, and gracefully
--- recover if the function returns `false`.
--- 
--- On X11, the implementation follows the
--- [FreeDesktop System Tray Specification](http://www.freedesktop.org/wiki/Specifications/systemtray-spec).
--- Implementations of the “tray” side of this specification can
--- be found e.g. in the GNOME 2 and KDE panel applications.
--- 
--- Note that a GtkStatusIcon is not a widget, but just a `GObject`. Making it a
--- widget would be impractical, since the system tray on Windows doesn’t allow
--- to embed arbitrary widgets.
--- 
--- GtkStatusIcon has been deprecated in 3.14. You should consider using
--- notifications or more modern platform-specific APIs instead. GLib provides
--- the `GNotification` API which works well with `GtkApplication` on multiple
--- platforms and environments, and should be the preferred mechanism to notify
--- the users of transient status updates. See this [HowDoI](https://wiki.gnome.org/HowDoI/GNotification)
--- for code examples.
---
--- ---
---
---@class Gtk.StatusIcon : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gtk.StatusIconPrivate
---@operator call: Gtk.StatusIcon
Gtk.StatusIcon = {}

--- # method Gtk.StatusIcon:get_geometry()
---
--- Obtains information about the location of the status icon
--- on screen. This information can be used to e.g. position
--- popups like notification bubbles.
--- 
--- See `gtk_status_icon_position_menu()` for a more convenient
--- alternative for positioning menus.
--- 
--- Note that some platforms do not allow GTK+ to provide
--- this information, and even on platforms that do allow it,
--- the information is not reliable unless the status icon
--- is embedded in a notification area, see
--- `gtk_status_icon_is_embedded()`.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@param screen? Gdk.Screen # return location for the screen, or `nil` if the information is not needed
---@param area? Gdk.Rectangle # return location for the area occupied by the status icon, or `nil`
---@param orientation? Gtk.Orientation # return location for the orientation of the panel in which the status icon is embedded, or `nil`. A panel at the top or bottom of the screen is horizontal, a panel at the left or right is vertical.
---@return (boolean|nil) # `true` if the location information has been filled in
function Gtk.StatusIcon:get_geometry(screen, area, orientation) end

--- # method Gtk.StatusIcon:get_gicon()
---
--- Retrieves the `GIcon` being displayed by the `GtkStatusIcon`.
--- The storage type of the status icon must be %GTK_IMAGE_EMPTY or
--- %GTK_IMAGE_GICON (see `gtk_status_icon_get_storage_type()`).
--- The caller of this function does not own a reference to the
--- returned `GIcon`.
--- 
--- If this function fails, `icon` is left unchanged;
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@return Gio.Icon # the displayed icon, or `nil` if the image is empty
function Gtk.StatusIcon:get_gicon() end

--- # method Gtk.StatusIcon:get_has_tooltip()
---
--- Returns the current value of the has-tooltip property.
--- See `GtkStatusIcon`:has-tooltip for more information.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@return (boolean|nil) # current value of has-tooltip on `status_icon`.
function Gtk.StatusIcon:get_has_tooltip() end

--- # method Gtk.StatusIcon:get_icon_name()
---
--- Gets the name of the icon being displayed by the `GtkStatusIcon`.
--- The storage type of the status icon must be %GTK_IMAGE_EMPTY or
--- %GTK_IMAGE_ICON_NAME (see `gtk_status_icon_get_storage_type()`).
--- The returned string is owned by the `GtkStatusIcon` and should not
--- be freed or modified.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@return string # name of the displayed icon, or `nil` if the image is empty.
function Gtk.StatusIcon:get_icon_name() end

--- # method Gtk.StatusIcon:get_pixbuf()
---
--- Gets the `GdkPixbuf` being displayed by the `GtkStatusIcon`.
--- The storage type of the status icon must be %GTK_IMAGE_EMPTY or
--- %GTK_IMAGE_PIXBUF (see `gtk_status_icon_get_storage_type()`).
--- The caller of this function does not own a reference to the
--- returned pixbuf.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@return GdkPixbuf.Pixbuf # the displayed pixbuf, or `nil` if the image is empty.
function Gtk.StatusIcon:get_pixbuf() end

--- # method Gtk.StatusIcon:get_screen()
---
--- Returns the `GdkScreen` associated with `status_icon`.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@return Gdk.Screen # a `GdkScreen`.
function Gtk.StatusIcon:get_screen() end

--- # method Gtk.StatusIcon:get_size()
---
--- Gets the size in pixels that is available for the image.
--- Stock icons and named icons adapt their size automatically
--- if the size of the notification area changes. For other
--- storage types, the size-changed signal can be used to
--- react to size changes.
--- 
--- Note that the returned size is only meaningful while the
--- status icon is embedded (see `gtk_status_icon_is_embedded()`).
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@return integer # the size that is available for the image
function Gtk.StatusIcon:get_size() end

--- # method Gtk.StatusIcon:get_stock()
---
--- Gets the id of the stock icon being displayed by the `GtkStatusIcon`.
--- The storage type of the status icon must be %GTK_IMAGE_EMPTY or
--- %GTK_IMAGE_STOCK (see `gtk_status_icon_get_storage_type()`).
--- The returned string is owned by the `GtkStatusIcon` and should not
--- be freed or modified.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@return string # stock id of the displayed stock icon, or `nil` if the image is empty.
function Gtk.StatusIcon:get_stock() end

--- # method Gtk.StatusIcon:get_storage_type()
---
--- Gets the type of representation being used by the `GtkStatusIcon`
--- to store image data. If the `GtkStatusIcon` has no image data,
--- the return value will be %GTK_IMAGE_EMPTY.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@return Gtk.ImageType # the image representation being used
function Gtk.StatusIcon:get_storage_type() end

--- # method Gtk.StatusIcon:get_title()
---
--- Gets the title of this tray icon. See `gtk_status_icon_set_title()`.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@return string # the title of the status icon
function Gtk.StatusIcon:get_title() end

--- # method Gtk.StatusIcon:get_tooltip_markup()
---
--- Gets the contents of the tooltip for `status_icon`.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@return string # the tooltip text, or `nil`. You should free the returned string with `g_free()` when done.
function Gtk.StatusIcon:get_tooltip_markup() end

--- # method Gtk.StatusIcon:get_tooltip_text()
---
--- Gets the contents of the tooltip for `status_icon`.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@return string # the tooltip text, or `nil`. You should free the returned string with `g_free()` when done.
function Gtk.StatusIcon:get_tooltip_text() end

--- # method Gtk.StatusIcon:get_visible()
---
--- Returns whether the status icon is visible or not.
--- Note that being visible does not guarantee that
--- the user can actually see the icon, see also
--- `gtk_status_icon_is_embedded()`.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@return (boolean|nil) # `true` if the status icon is visible
function Gtk.StatusIcon:get_visible() end

--- # method Gtk.StatusIcon:get_x11_window_id()
---
--- This function is only useful on the X11/freedesktop.org platform.
--- 
--- It returns a window ID for the widget in the underlying
--- status icon implementation.  This is useful for the Galago
--- notification service, which can send a window ID in the protocol
--- in order for the server to position notification windows
--- pointing to a status icon reliably.
--- 
--- This function is not intended for other use cases which are
--- more likely to be met by one of the non-X11 specific methods, such
--- as `gtk_status_icon_position_menu()`.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@return integer # An 32 bit unsigned integer identifier for the underlying X11 Window
function Gtk.StatusIcon:get_x11_window_id() end

--- # method Gtk.StatusIcon:is_embedded()
---
--- Returns whether the status icon is embedded in a notification
--- area.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@return (boolean|nil) # `true` if the status icon is embedded in a notification area.
function Gtk.StatusIcon:is_embedded() end

--- # method Gtk.StatusIcon:set_from_file()
---
--- Makes `status_icon` display the file `filename`.
--- See `gtk_status_icon_new_from_file()` for details.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@param filename string # a filename
---@return nil
function Gtk.StatusIcon:set_from_file(filename) end

--- # method Gtk.StatusIcon:set_from_gicon()
---
--- Makes `status_icon` display the `GIcon`.
--- See `gtk_status_icon_new_from_gicon()` for details.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@param icon Gio.Icon # a GIcon
---@return nil
function Gtk.StatusIcon:set_from_gicon(icon) end

--- # method Gtk.StatusIcon:set_from_icon_name()
---
--- Makes `status_icon` display the icon named `icon_name` from the
--- current icon theme.
--- See `gtk_status_icon_new_from_icon_name()` for details.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@param icon_name string # an icon name
---@return nil
function Gtk.StatusIcon:set_from_icon_name(icon_name) end

--- # method Gtk.StatusIcon:set_from_pixbuf()
---
--- Makes `status_icon` display `pixbuf`.
--- See `gtk_status_icon_new_from_pixbuf()` for details.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@param pixbuf? GdkPixbuf.Pixbuf # a `GdkPixbuf` or `nil`
---@return nil
function Gtk.StatusIcon:set_from_pixbuf(pixbuf) end

--- # method Gtk.StatusIcon:set_from_stock()
---
--- Makes `status_icon` display the stock icon with the id `stock_id`.
--- See `gtk_status_icon_new_from_stock()` for details.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@param stock_id string # a stock icon id
---@return nil
function Gtk.StatusIcon:set_from_stock(stock_id) end

--- # method Gtk.StatusIcon:set_has_tooltip()
---
--- Sets the has-tooltip property on `status_icon` to `has_tooltip`.
--- See `GtkStatusIcon`:has-tooltip for more information.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@param has_tooltip (boolean|nil) # whether or not `status_icon` has a tooltip
---@return nil
function Gtk.StatusIcon:set_has_tooltip(has_tooltip) end

--- # method Gtk.StatusIcon:set_name()
---
--- Sets the name of this tray icon.
--- This should be a string identifying this icon. It is may be
--- used for sorting the icons in the tray and will not be shown to
--- the user.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@param name string # the name
---@return nil
function Gtk.StatusIcon:set_name(name) end

--- # method Gtk.StatusIcon:set_screen()
---
--- Sets the `GdkScreen` where `status_icon` is displayed; if
--- the icon is already mapped, it will be unmapped, and
--- then remapped on the new screen.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@param screen Gdk.Screen # a `GdkScreen`
---@return nil
function Gtk.StatusIcon:set_screen(screen) end

--- # method Gtk.StatusIcon:set_title()
---
--- Sets the title of this tray icon.
--- This should be a short, human-readable, localized string
--- describing the tray icon. It may be used by tools like screen
--- readers to render the tray icon.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@param title string # the title
---@return nil
function Gtk.StatusIcon:set_title(title) end

--- # method Gtk.StatusIcon:set_tooltip_markup()
---
--- Sets `markup` as the contents of the tooltip, which is marked up with
---  the [Pango text markup language][PangoMarkupFormat].
--- 
--- This function will take care of setting `GtkStatusIcon`:has-tooltip to `true`
--- and of the default handler for the `GtkStatusIcon`::query-tooltip signal.
--- 
--- See also the `GtkStatusIcon`:tooltip-markup property and
--- `gtk_tooltip_set_markup()`.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@param markup? string # the contents of the tooltip for `status_icon`, or `nil`
---@return nil
function Gtk.StatusIcon:set_tooltip_markup(markup) end

--- # method Gtk.StatusIcon:set_tooltip_text()
---
--- Sets `text` as the contents of the tooltip.
--- 
--- This function will take care of setting `GtkStatusIcon`:has-tooltip to
--- `true` and of the default handler for the `GtkStatusIcon`::query-tooltip
--- signal.
--- 
--- See also the `GtkStatusIcon`:tooltip-text property and
--- `gtk_tooltip_set_text()`.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@param text string # the contents of the tooltip for `status_icon`
---@return nil
function Gtk.StatusIcon:set_tooltip_text(text) end

--- # method Gtk.StatusIcon:set_visible()
---
--- Shows or hides a status icon.
---
--- ---
---
---@param self Gtk.StatusIcon # a `GtkStatusIcon`
---@param visible (boolean|nil) # `true` to show the status icon, `false` to hide it
---@return nil
function Gtk.StatusIcon:set_visible(visible) end

--- # function Gtk.StatusIcon.position_menu()
---
--- Menu positioning function to use with `gtk_menu_popup()`
--- to position `menu` aligned to the status icon `user_data`.
---
--- ---
---
---@param menu Gtk.Menu # the `GtkMenu`
---@param x integer # return location for the x position
---@param y integer # return location for the y position
---@param push_in (boolean|nil) # whether the first menu item should be offset (pushed in) to be aligned with the menu popup position (only useful for GtkOptionMenu).
---@param user_data Gtk.StatusIcon # the status icon to position the menu on
---@return nil
function Gtk.StatusIcon.position_menu(menu, x, y, push_in, user_data) end

--- # function Gtk.StatusIcon.new()
---
--- Creates an empty status icon object.
---
--- ---
---
---@return Gtk.StatusIcon # a new `GtkStatusIcon`
function Gtk.StatusIcon.new() end

--- # function Gtk.StatusIcon.new_from_file()
---
--- Creates a status icon displaying the file `filename`.
--- 
--- The image will be scaled down to fit in the available
--- space in the notification area, if necessary.
---
--- ---
---
---@param filename string # a filename
---@return Gtk.StatusIcon # a new `GtkStatusIcon`
function Gtk.StatusIcon.new_from_file(filename) end

--- # function Gtk.StatusIcon.new_from_gicon()
---
--- Creates a status icon displaying a `GIcon`. If the icon is a
--- themed icon, it will be updated when the theme changes.
---
--- ---
---
---@param icon Gio.Icon # a `GIcon`
---@return Gtk.StatusIcon # a new `GtkStatusIcon`
function Gtk.StatusIcon.new_from_gicon(icon) end

--- # function Gtk.StatusIcon.new_from_icon_name()
---
--- Creates a status icon displaying an icon from the current icon theme.
--- If the current icon theme is changed, the icon will be updated
--- appropriately.
---
--- ---
---
---@param icon_name string # an icon name
---@return Gtk.StatusIcon # a new `GtkStatusIcon`
function Gtk.StatusIcon.new_from_icon_name(icon_name) end

--- # function Gtk.StatusIcon.new_from_pixbuf()
---
--- Creates a status icon displaying `pixbuf`.
--- 
--- The image will be scaled down to fit in the available
--- space in the notification area, if necessary.
---
--- ---
---
---@param pixbuf GdkPixbuf.Pixbuf # a `GdkPixbuf`
---@return Gtk.StatusIcon # a new `GtkStatusIcon`
function Gtk.StatusIcon.new_from_pixbuf(pixbuf) end

--- # function Gtk.StatusIcon.new_from_stock()
---
--- Creates a status icon displaying a stock icon. Sample stock icon
--- names are `GTK_STOCK_OPEN`, `GTK_STOCK_QUIT`. You can register your
--- own stock icon names, see `gtk_icon_factory_add_default()` and
--- `gtk_icon_factory_add()`.
---
--- ---
---
---@param stock_id string # a stock icon id
---@return Gtk.StatusIcon # a new `GtkStatusIcon`
function Gtk.StatusIcon.new_from_stock(stock_id) end

--- # record Gtk.StatusIconClass
---
---@class Gtk.StatusIconClass
---@field parent_class GObject.ObjectClass
---@field activate fun(status_icon: Gtk.StatusIcon): nil
---@field popup_menu fun(status_icon: Gtk.StatusIcon, button: integer, activate_time: integer): nil
---@field size_changed fun(status_icon: Gtk.StatusIcon, size: integer): (boolean|nil)
---@field button_press_event fun(status_icon: Gtk.StatusIcon, event: Gdk.EventButton): (boolean|nil)
---@field button_release_event fun(status_icon: Gtk.StatusIcon, event: Gdk.EventButton): (boolean|nil)
---@field scroll_event fun(status_icon: Gtk.StatusIcon, event: Gdk.EventScroll): (boolean|nil)
---@field query_tooltip fun(status_icon: Gtk.StatusIcon, x: integer, y: integer, keyboard_mode: (boolean|nil), tooltip: Gtk.Tooltip): (boolean|nil)
Gtk.StatusIconClass = {}

--- # record Gtk.StatusIconPrivate
---
---@class Gtk.StatusIconPrivate
Gtk.StatusIconPrivate = {}

--- # class Gtk.Statusbar
---
--- A `GtkStatusbar` is usually placed along the bottom of an application's
--- main `GtkWindow`. It may provide a regular commentary of the application's
--- status (as is usually the case in a web browser, for example), or may be
--- used to simply output a message when the status changes, (when an upload
--- is complete in an FTP client, for example).
--- 
--- Status bars in GTK+ maintain a stack of messages. The message at
--- the top of the each bar’s stack is the one that will currently be displayed.
--- 
--- Any messages added to a statusbar’s stack must specify a
--- context id that is used to uniquely identify
--- the source of a message. This context id can be generated by
--- `gtk_statusbar_get_context_id()`, given a message and the statusbar that
--- it will be added to. Note that messages are stored in a stack, and when
--- choosing which message to display, the stack structure is adhered to,
--- regardless of the context identifier of a message.
--- 
--- One could say that a statusbar maintains one stack of messages for
--- display purposes, but allows multiple message producers to maintain
--- sub-stacks of the messages they produced (via context ids).
--- 
--- Status bars are created using `gtk_statusbar_new()`.
--- 
--- Messages are added to the bar’s stack with `gtk_statusbar_push()`.
--- 
--- The message at the top of the stack can be removed using
--- `gtk_statusbar_pop()`. A message can be removed from anywhere in the
--- stack if its message id was recorded at the time it was added. This
--- is done using `gtk_statusbar_remove()`.
--- 
--- # CSS node
--- 
--- GtkStatusbar has a single CSS node with name statusbar.
---
--- ---
---
---@class Gtk.Statusbar : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field parent_widget Gtk.Box
---@field priv Gtk.StatusbarPrivate
---@operator call: Gtk.Statusbar
Gtk.Statusbar = {}

--- # method Gtk.Statusbar:get_context_id()
---
--- Returns a new context identifier, given a description
--- of the actual context. Note that the description is
--- not shown in the UI.
---
--- ---
---
---@param self Gtk.Statusbar # a `GtkStatusbar`
---@param context_description string # textual description of what context the new message is being used in
---@return integer # an integer id
function Gtk.Statusbar:get_context_id(context_description) end

--- # method Gtk.Statusbar:get_message_area()
---
--- Retrieves the box containing the label widget.
---
--- ---
---
---@param self Gtk.Statusbar # a `GtkStatusbar`
---@return Gtk.Box # a `GtkBox`
function Gtk.Statusbar:get_message_area() end

--- # method Gtk.Statusbar:pop()
---
--- Removes the first message in the `GtkStatusbar`’s stack
--- with the given context id.
--- 
--- Note that this may not change the displayed message, if
--- the message at the top of the stack has a different
--- context id.
---
--- ---
---
---@param self Gtk.Statusbar # a `GtkStatusbar`
---@param context_id integer # a context identifier
---@return nil
function Gtk.Statusbar:pop(context_id) end

--- # method Gtk.Statusbar:push()
---
--- Pushes a new message onto a statusbar’s stack.
---
--- ---
---
---@param self Gtk.Statusbar # a `GtkStatusbar`
---@param context_id integer # the message’s context id, as returned by `gtk_statusbar_get_context_id()`
---@param text string # the message to add to the statusbar
---@return integer # a message id that can be used with `gtk_statusbar_remove()`.
function Gtk.Statusbar:push(context_id, text) end

--- # method Gtk.Statusbar:remove()
---
--- Forces the removal of a message from a statusbar’s stack.
--- The exact `context_id` and `message_id` must be specified.
---
--- ---
---
---@param self Gtk.Statusbar # a `GtkStatusbar`
---@param context_id integer # a context identifier
---@param message_id integer # a message identifier, as returned by `gtk_statusbar_push()`
---@return nil
function Gtk.Statusbar:remove(context_id, message_id) end

--- # method Gtk.Statusbar:remove_all()
---
--- Forces the removal of all messages from a statusbar's
--- stack with the exact `context_id`.
---
--- ---
---
---@param self Gtk.Statusbar # a `GtkStatusbar`
---@param context_id integer # a context identifier
---@return nil
function Gtk.Statusbar:remove_all(context_id) end

--- # function Gtk.Statusbar.new()
---
--- Creates a new `GtkStatusbar` ready for messages.
---
--- ---
---
---@return Gtk.Widget # the new `GtkStatusbar`
function Gtk.Statusbar.new() end

--- # class Gtk.StatusbarAccessible
---
---@class Gtk.StatusbarAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.StatusbarAccessiblePrivate
Gtk.StatusbarAccessible = {}

--- # record Gtk.StatusbarAccessibleClass
---
---@class Gtk.StatusbarAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.StatusbarAccessibleClass = {}

--- # record Gtk.StatusbarAccessiblePrivate
---
---@class Gtk.StatusbarAccessiblePrivate
Gtk.StatusbarAccessiblePrivate = {}

--- # record Gtk.StatusbarClass
---
---@class Gtk.StatusbarClass
---@field parent_class Gtk.BoxClass
---@field reserved userdata
---@field text_pushed fun(statusbar: Gtk.Statusbar, context_id: integer, text: string): nil
---@field text_popped fun(statusbar: Gtk.Statusbar, context_id: integer, text: string): nil
Gtk.StatusbarClass = {}

--- # record Gtk.StatusbarPrivate
---
---@class Gtk.StatusbarPrivate
Gtk.StatusbarPrivate = {}

--- # record Gtk.StockItem
---
---@class Gtk.StockItem
---@field stock_id string # Identifier.
---@field label string # User visible label.
---@field modifier Gdk.ModifierType # Modifier type for keyboard accelerator
---@field keyval integer # Keyboard accelerator
---@field translation_domain string # Translation domain of the menu or toolbar item
Gtk.StockItem = {}

--- # method Gtk.StockItem:free()
---
--- Frees a stock item allocated on the heap, such as one returned by
--- `gtk_stock_item_copy()`. Also frees the fields inside the stock item,
--- if they are not `nil`.
---
--- ---
---
---@param self Gtk.StockItem # a `GtkStockItem`
---@return nil
function Gtk.StockItem:free() end

--- # class Gtk.Style
---
--- A `GtkStyle` object encapsulates the information that provides the look and
--- feel for a widget.
--- 
--- > In GTK+ 3.0, GtkStyle has been deprecated and replaced by
--- > `GtkStyleContext`.
--- 
--- Each `GtkWidget` has an associated `GtkStyle` object that is used when
--- rendering that widget. Also, a `GtkStyle` holds information for the five
--- possible widget states though not every widget supports all five
--- states; see `GtkStateType`.
--- 
--- Usually the `GtkStyle` for a widget is the same as the default style that
--- is set by GTK+ and modified the theme engine.
--- 
--- Usually applications should not need to use or modify the `GtkStyle` of
--- their widgets.
---
--- ---
---
---@class Gtk.Style : GObject.Object
---@field parent_instance GObject.Object
---@field fg unknown[] # Set of foreground `GdkColor`
---@field bg unknown[] # Set of background `GdkColor`
---@field light unknown[] # Set of light `GdkColor`
---@field dark unknown[] # Set of dark `GdkColor`
---@field mid unknown[] # Set of mid `GdkColor`
---@field text unknown[] # Set of text `GdkColor`
---@field base unknown[] # Set of base `GdkColor`
---@field text_aa unknown[] # Color halfway between text/base
---@field black Gdk.Color # `GdkColor` to use for black
---@field white Gdk.Color # `GdkColor` to use for white
---@field font_desc Pango.FontDescription # `PangoFontDescription`
---@field xthickness integer # Thickness in X direction
---@field ythickness integer # Thickness in Y direction
---@field background unknown[] # Set of background `cairo_pattern_t`
---@field attach_count integer
---@field visual Gdk.Visual
---@field private_font_desc Pango.FontDescription
---@field rc_style Gtk.RcStyle
---@field styles userdata[]
---@field property_cache unknown[]
---@field icon_factories userdata[]
---@operator call: Gtk.Style
Gtk.Style = {}

--- # method Gtk.Style:apply_default_background()
---
---@param self Gtk.Style
---@param cr cairo.Context
---@param window Gdk.Window
---@param state_type Gtk.StateType
---@param x integer
---@param y integer
---@param width integer
---@param height integer
---@return nil
function Gtk.Style:apply_default_background(cr, window, state_type, x, y, width, height) end

--- # method Gtk.Style:copy()
---
--- Creates a copy of the passed in `GtkStyle` object.
---
--- ---
---
---@param self Gtk.Style # a `GtkStyle`
---@return Gtk.Style # a copy of `style`
function Gtk.Style:copy() end

--- # method Gtk.Style:detach()
---
--- Detaches a style from a window. If the style is not attached
--- to any windows anymore, it is unrealized. See `gtk_style_attach()`.
---
--- ---
---
---@param self Gtk.Style # a `GtkStyle`
---@return nil
function Gtk.Style:detach() end

--- # method Gtk.Style:get_style_property()
---
--- Queries the value of a style property corresponding to a
--- widget class is in the given style.
---
--- ---
---
---@param self Gtk.Style # a `GtkStyle`
---@param widget_type Gtk.GType # the `GType` of a descendant of `GtkWidget`
---@param property_name string # the name of the style property to get
---@param value GObject.Value # a `GValue` where the value of the property being queried will be stored
---@return nil
function Gtk.Style:get_style_property(widget_type, property_name, value) end

--- # method Gtk.Style:has_context()
---
--- Returns whether `style` has an associated `GtkStyleContext`.
---
--- ---
---
---@param self Gtk.Style # a `GtkStyle`
---@return (boolean|nil) # `true` if `style` has a `GtkStyleContext`
function Gtk.Style:has_context() end

--- # method Gtk.Style:lookup_color()
---
--- Looks up `color_name` in the style’s logical color mappings,
--- filling in `color` and returning `true` if found, otherwise
--- returning `false`. Do not cache the found mapping, because
--- it depends on the `GtkStyle` and might change when a theme
--- switch occurs.
---
--- ---
---
---@param self Gtk.Style # a `GtkStyle`
---@param color_name string # the name of the logical color to look up
---@param color Gdk.Color # the `GdkColor` to fill in
---@return (boolean|nil) # `true` if the mapping was found.
function Gtk.Style:lookup_color(color_name, color) end

--- # method Gtk.Style:lookup_icon_set()
---
--- Looks up `stock_id` in the icon factories associated with `style`
--- and the default icon factory, returning an icon set if found,
--- otherwise `nil`.
---
--- ---
---
---@param self Gtk.Style # a `GtkStyle`
---@param stock_id string # an icon name
---@return Gtk.IconSet # icon set of `stock_id`
function Gtk.Style:lookup_icon_set(stock_id) end

--- # method Gtk.Style:render_icon()
---
--- Renders the icon specified by `source` at the given `size`
--- according to the given parameters and returns the result in a
--- pixbuf.
---
--- ---
---
---@param self Gtk.Style # a `GtkStyle`
---@param source Gtk.IconSource # the `GtkIconSource` specifying the icon to render
---@param direction Gtk.TextDirection # a text direction
---@param state Gtk.StateType # a state
---@param size integer # the size to render the icon at (`GtkIconSize`). A size of `(GtkIconSize)-1` means render at the size of the source and don’t scale.
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@return GdkPixbuf.Pixbuf # a newly-created `GdkPixbuf` containing the rendered icon
function Gtk.Style:render_icon(source, direction, state, size, widget, detail) end

--- # method Gtk.Style:set_background()
---
--- Sets the background of `window` to the background color or pixmap
--- specified by `style` for the given state.
---
--- ---
---
---@param self Gtk.Style # a `GtkStyle`
---@param window Gdk.Window # a `GdkWindow`
---@param state_type Gtk.StateType # a state
---@return nil
function Gtk.Style:set_background(window, state_type) end

--- # function Gtk.Style.new()
---
--- Creates a new `GtkStyle`.
---
--- ---
---
---@return Gtk.Style # a new `GtkStyle`.
function Gtk.Style.new() end

--- # record Gtk.StyleClass
---
---@class Gtk.StyleClass
---@field parent_class GObject.ObjectClass # The parent class.
---@field realize fun(style: Gtk.Style): nil
---@field unrealize fun(style: Gtk.Style): nil
---@field copy fun(style: Gtk.Style, src: Gtk.Style): nil
---@field init_from_rc fun(style: Gtk.Style, rc_style: Gtk.RcStyle): nil
---@field set_background fun(style: Gtk.Style, window: Gdk.Window, state_type: Gtk.StateType): nil
---@field render_icon fun(style: Gtk.Style, source: Gtk.IconSource, direction: Gtk.TextDirection, state: Gtk.StateType, size: integer, widget: Gtk.Widget, detail: string): GdkPixbuf.Pixbuf
---@field draw_hline fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, widget: Gtk.Widget, detail: string, x1: integer, x2: integer, y: integer): nil
---@field draw_vline fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, widget: Gtk.Widget, detail: string, y1_: integer, y2_: integer, x: integer): nil
---@field draw_shadow fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, shadow_type: Gtk.ShadowType, widget: Gtk.Widget, detail: string, x: integer, y: integer, width: integer, height: integer): nil
---@field draw_arrow fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, shadow_type: Gtk.ShadowType, widget: Gtk.Widget, detail: string, arrow_type: Gtk.ArrowType, fill: (boolean|nil), x: integer, y: integer, width: integer, height: integer): nil
---@field draw_diamond fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, shadow_type: Gtk.ShadowType, widget: Gtk.Widget, detail: string, x: integer, y: integer, width: integer, height: integer): nil
---@field draw_box fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, shadow_type: Gtk.ShadowType, widget: Gtk.Widget, detail: string, x: integer, y: integer, width: integer, height: integer): nil
---@field draw_flat_box fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, shadow_type: Gtk.ShadowType, widget: Gtk.Widget, detail: string, x: integer, y: integer, width: integer, height: integer): nil
---@field draw_check fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, shadow_type: Gtk.ShadowType, widget: Gtk.Widget, detail: string, x: integer, y: integer, width: integer, height: integer): nil
---@field draw_option fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, shadow_type: Gtk.ShadowType, widget: Gtk.Widget, detail: string, x: integer, y: integer, width: integer, height: integer): nil
---@field draw_tab fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, shadow_type: Gtk.ShadowType, widget: Gtk.Widget, detail: string, x: integer, y: integer, width: integer, height: integer): nil
---@field draw_shadow_gap fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, shadow_type: Gtk.ShadowType, widget: Gtk.Widget, detail: string, x: integer, y: integer, width: integer, height: integer, gap_side: Gtk.PositionType, gap_x: integer, gap_width: integer): nil
---@field draw_box_gap fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, shadow_type: Gtk.ShadowType, widget: Gtk.Widget, detail: string, x: integer, y: integer, width: integer, height: integer, gap_side: Gtk.PositionType, gap_x: integer, gap_width: integer): nil
---@field draw_extension fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, shadow_type: Gtk.ShadowType, widget: Gtk.Widget, detail: string, x: integer, y: integer, width: integer, height: integer, gap_side: Gtk.PositionType): nil
---@field draw_focus fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, widget: Gtk.Widget, detail: string, x: integer, y: integer, width: integer, height: integer): nil
---@field draw_slider fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, shadow_type: Gtk.ShadowType, widget: Gtk.Widget, detail: string, x: integer, y: integer, width: integer, height: integer, orientation: Gtk.Orientation): nil
---@field draw_handle fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, shadow_type: Gtk.ShadowType, widget: Gtk.Widget, detail: string, x: integer, y: integer, width: integer, height: integer, orientation: Gtk.Orientation): nil
---@field draw_expander fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, widget: Gtk.Widget, detail: string, x: integer, y: integer, expander_style: Gtk.ExpanderStyle): nil
---@field draw_layout fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, use_text: (boolean|nil), widget: Gtk.Widget, detail: string, x: integer, y: integer, layout: Pango.Layout): nil
---@field draw_resize_grip fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, widget: Gtk.Widget, detail: string, edge: Gdk.WindowEdge, x: integer, y: integer, width: integer, height: integer): nil
---@field draw_spinner fun(style: Gtk.Style, cr: cairo.Context, state_type: Gtk.StateType, widget: Gtk.Widget, detail: string, step: integer, x: integer, y: integer, width: integer, height: integer): nil
Gtk.StyleClass = {}

--- # class Gtk.StyleContext
---
--- `GtkStyleContext` is an object that stores styling information affecting
--- a widget defined by `GtkWidgetPath`.
--- 
--- In order to construct the final style information, `GtkStyleContext`
--- queries information from all attached `GtkStyleProviders`. Style providers
--- can be either attached explicitly to the context through
--- `gtk_style_context_add_provider()`, or to the screen through
--- `gtk_style_context_add_provider_for_screen()`. The resulting style is a
--- combination of all providers’ information in priority order.
--- 
--- For GTK+ widgets, any `GtkStyleContext` returned by
--- `gtk_widget_get_style_context()` will already have a `GtkWidgetPath`, a
--- `GdkScreen` and RTL/LTR information set. The style context will also be
--- updated automatically if any of these settings change on the widget.
--- 
--- If you are using the theming layer standalone, you will need to set a
--- widget path and a screen yourself to the created style context through
--- `gtk_style_context_set_path()` and possibly `gtk_style_context_set_screen()`. See
--- the “Foreign drawing“ example in gtk3-demo.
--- 
--- # Style Classes # {`gtkstylecontext`-classes}
--- 
--- Widgets can add style classes to their context, which can be used to associate
--- different styles by class. The documentation for individual widgets lists
--- which style classes it uses itself, and which style classes may be added by
--- applications to affect their appearance.
--- 
--- GTK+ defines macros for a number of style classes.
--- 
--- # Style Regions
--- 
--- Widgets can also add regions with flags to their context. This feature is
--- deprecated and will be removed in a future GTK+ update. Please use style
--- classes instead.
--- 
--- GTK+ defines macros for a number of style regions.
--- 
--- # Custom styling in UI libraries and applications
--- 
--- If you are developing a library with custom `GtkWidgets` that
--- render differently than standard components, you may need to add a
--- `GtkStyleProvider` yourself with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK
--- priority, either a `GtkCssProvider` or a custom object implementing the
--- `GtkStyleProvider` interface. This way themes may still attempt
--- to style your UI elements in a different way if needed so.
--- 
--- If you are using custom styling on an applications, you probably want then
--- to make your style information prevail to the theme’s, so you must use
--- a `GtkStyleProvider` with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
--- priority, keep in mind that the user settings in
--- `XDG_CONFIG_HOME/gtk-3.0/gtk.css` will
--- still take precedence over your changes, as it uses the
--- %GTK_STYLE_PROVIDER_PRIORITY_USER priority.
---
--- ---
---
---@class Gtk.StyleContext : GObject.Object
---@field parent_object GObject.Object
---@field priv Gtk.StyleContextPrivate
---@operator call: Gtk.StyleContext
Gtk.StyleContext = {}

--- # method Gtk.StyleContext:add_class()
---
--- Adds a style class to `context`, so posterior calls to
--- `gtk_style_context_get()` or any of the gtk_render_*()
--- functions will make use of this new class for styling.
--- 
--- In the CSS file format, a `GtkEntry` defining a “search”
--- class, would be matched by:
--- 
--- ```c <!-- language="CSS" -->
--- entry.search { ... }
--- ```
--- 
--- While any widget defining a “search” class would be
--- matched by:
--- ```c <!-- language="CSS" -->
--- .search { ... }
--- ```
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param class_name string # class name to use in styling
---@return nil
function Gtk.StyleContext:add_class(class_name) end

--- # method Gtk.StyleContext:add_provider()
---
--- Adds a style provider to `context`, to be used in style construction.
--- Note that a style provider added by this function only affects
--- the style of the widget to which `context` belongs. If you want
--- to affect the style of all widgets, use
--- `gtk_style_context_add_provider_for_screen()`.
--- 
--- Note: If both priorities are the same, a `GtkStyleProvider`
--- added through this function takes precedence over another added
--- through `gtk_style_context_add_provider_for_screen()`.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param provider Gtk.StyleProvider # a `GtkStyleProvider`
---@param priority integer # the priority of the style provider. The lower it is, the earlier it will be used in the style construction. Typically this will be in the range between %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK and %GTK_STYLE_PROVIDER_PRIORITY_USER
---@return nil
function Gtk.StyleContext:add_provider(provider, priority) end

--- # method Gtk.StyleContext:add_region()
---
--- Adds a region to `context`, so posterior calls to
--- `gtk_style_context_get()` or any of the gtk_render_*()
--- functions will make use of this new region for styling.
--- 
--- In the CSS file format, a `GtkTreeView` defining a “row”
--- region, would be matched by:
--- 
--- ```c <!-- language="CSS" -->
--- treeview row { ... }
--- ```
--- 
--- Pseudo-classes are used for matching `flags`, so the two
--- following rules:
--- ```c <!-- language="CSS" -->
--- treeview row:nth-child(even) { ... }
--- treeview row:nth-child(odd) { ... }
--- ```
--- 
--- would apply to even and odd rows, respectively.
--- 
--- Region names must only contain lowercase letters
--- and “-”, starting always with a lowercase letter.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param region_name string # region name to use in styling
---@param flags Gtk.RegionFlags # flags that apply to the region
---@return nil
function Gtk.StyleContext:add_region(region_name, flags) end

--- # method Gtk.StyleContext:cancel_animations()
---
--- Stops all running animations for `region_id` and all animatable
--- regions underneath.
--- 
--- A `nil` `region_id` will stop all ongoing animations in `context`,
--- when dealing with a `GtkStyleContext` obtained through
--- `gtk_widget_get_style_context()`, this is normally done for you
--- in all circumstances you would expect all widget to be stopped,
--- so this should be only used in complex widgets with different
--- animatable regions.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param region_id? userdata # animatable region to stop, or `nil`. See `gtk_style_context_push_animatable_region()`
---@return nil
function Gtk.StyleContext:cancel_animations(region_id) end

--- # method Gtk.StyleContext:get_background_color()
---
--- Gets the background color for a given state.
--- 
--- This function is far less useful than it seems, and it should not be used in
--- newly written code. CSS has no concept of "background color", as a background
--- can be an image, or a gradient, or any other pattern including solid colors.
--- 
--- The only reason why you would call `gtk_style_context_get_background_color()` is
--- to use the returned value to draw the background with it; the correct way to
--- achieve this result is to use `gtk_render_background()` instead, along with CSS
--- style classes to modify the color to be rendered.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param state Gtk.StateFlags # state to retrieve the color for
---@param color Gdk.RGBA # return value for the background color
---@return nil
function Gtk.StyleContext:get_background_color(state, color) end

--- # method Gtk.StyleContext:get_border()
---
--- Gets the border for a given state as a `GtkBorder`.
--- 
--- See `gtk_style_context_get_property()` and
--- `GTK_STYLE_PROPERTY_BORDER_WIDTH` for details.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param state Gtk.StateFlags # state to retrieve the border for
---@param border Gtk.Border # return value for the border settings
---@return nil
function Gtk.StyleContext:get_border(state, border) end

--- # method Gtk.StyleContext:get_border_color()
---
--- Gets the border color for a given state.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param state Gtk.StateFlags # state to retrieve the color for
---@param color Gdk.RGBA # return value for the border color
---@return nil
function Gtk.StyleContext:get_border_color(state, color) end

--- # method Gtk.StyleContext:get_color()
---
--- Gets the foreground color for a given state.
--- 
--- See `gtk_style_context_get_property()` and
--- `GTK_STYLE_PROPERTY_COLOR` for details.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param state Gtk.StateFlags # state to retrieve the color for
---@param color Gdk.RGBA # return value for the foreground color
---@return nil
function Gtk.StyleContext:get_color(state, color) end

--- # method Gtk.StyleContext:get_direction()
---
--- Returns the widget direction used for rendering.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@return Gtk.TextDirection # the widget direction
function Gtk.StyleContext:get_direction() end

--- # method Gtk.StyleContext:get_font()
---
--- Returns the font description for a given state. The returned
--- object is const and will remain valid until the
--- `GtkStyleContext`::changed signal happens.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param state Gtk.StateFlags # state to retrieve the font for
---@return Pango.FontDescription # the `PangoFontDescription` for the given state. This object is owned by GTK+ and should not be freed.
function Gtk.StyleContext:get_font(state) end

--- # method Gtk.StyleContext:get_frame_clock()
---
--- Returns the `GdkFrameClock` to which `context` is attached.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@return Gdk.FrameClock # a `GdkFrameClock`, or `nil` if `context` does not have an attached frame clock.
function Gtk.StyleContext:get_frame_clock() end

--- # method Gtk.StyleContext:get_junction_sides()
---
--- Returns the sides where rendered elements connect visually with others.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@return Gtk.JunctionSides # the junction sides
function Gtk.StyleContext:get_junction_sides() end

--- # method Gtk.StyleContext:get_margin()
---
--- Gets the margin for a given state as a `GtkBorder`.
--- See `gtk_style_property_get()` and `GTK_STYLE_PROPERTY_MARGIN`
--- for details.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param state Gtk.StateFlags # state to retrieve the border for
---@param margin Gtk.Border # return value for the margin settings
---@return nil
function Gtk.StyleContext:get_margin(state, margin) end

--- # method Gtk.StyleContext:get_padding()
---
--- Gets the padding for a given state as a `GtkBorder`.
--- See `gtk_style_context_get()` and `GTK_STYLE_PROPERTY_PADDING`
--- for details.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param state Gtk.StateFlags # state to retrieve the padding for
---@param padding Gtk.Border # return value for the padding settings
---@return nil
function Gtk.StyleContext:get_padding(state, padding) end

--- # method Gtk.StyleContext:get_parent()
---
--- Gets the parent context set via `gtk_style_context_set_parent()`.
--- See that function for details.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@return Gtk.StyleContext # the parent context or `nil`
function Gtk.StyleContext:get_parent() end

--- # method Gtk.StyleContext:get_path()
---
--- Returns the widget path used for style matching.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@return Gtk.WidgetPath # A `GtkWidgetPath`
function Gtk.StyleContext:get_path() end

--- # method Gtk.StyleContext:get_property()
---
--- Gets a style property from `context` for the given state.
--- 
--- Note that not all CSS properties that are supported by GTK+ can be
--- retrieved in this way, since they may not be representable as `GValue`.
--- GTK+ defines macros for a number of properties that can be used
--- with this function.
--- 
--- Note that passing a state other than the current state of `context`
--- is not recommended unless the style context has been saved with
--- `gtk_style_context_save()`.
--- 
--- When `value` is no longer needed, `g_value_unset()` must be called
--- to free any allocated memory.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param property string # style property name
---@param state Gtk.StateFlags # state to retrieve the property value for
---@param value GObject.Value # return location for the style property value
---@return nil
function Gtk.StyleContext:get_property(property, state, value) end

--- # method Gtk.StyleContext:get_scale()
---
--- Returns the scale used for assets.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@return integer # the scale
function Gtk.StyleContext:get_scale() end

--- # method Gtk.StyleContext:get_screen()
---
--- Returns the `GdkScreen` to which `context` is attached.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@return Gdk.Screen # a `GdkScreen`.
function Gtk.StyleContext:get_screen() end

--- # method Gtk.StyleContext:get_section()
---
--- Queries the location in the CSS where `property` was defined for the
--- current `context`. Note that the state to be queried is taken from
--- `gtk_style_context_get_state()`.
--- 
--- If the location is not available, `nil` will be returned. The
--- location might not be available for various reasons, such as the
--- property being overridden, `property` not naming a supported CSS
--- property or tracking of definitions being disabled for performance
--- reasons.
--- 
--- Shorthand CSS properties cannot be queried for a location and will
--- always return `nil`.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param property string # style property name
---@return Gtk.CssSection # `nil` or the section where a value for `property` was defined
function Gtk.StyleContext:get_section(property) end

--- # method Gtk.StyleContext:get_state()
---
--- Returns the state used for style matching.
--- 
--- This method should only be used to retrieve the `GtkStateFlags`
--- to pass to `GtkStyleContext` methods, like `gtk_style_context_get_padding()`.
--- If you need to retrieve the current state of a `GtkWidget`, use
--- `gtk_widget_get_state_flags()`.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@return Gtk.StateFlags # the state flags
function Gtk.StyleContext:get_state() end

--- # method Gtk.StyleContext:get_style_property()
---
--- Gets the value for a widget style property.
--- 
--- When `value` is no longer needed, `g_value_unset()` must be called
--- to free any allocated memory.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param property_name string # the name of the widget style property
---@param value GObject.Value # Return location for the property value
---@return nil
function Gtk.StyleContext:get_style_property(property_name, value) end

--- # method Gtk.StyleContext:has_class()
---
--- Returns `true` if `context` currently has defined the
--- given class name.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param class_name string # a class name
---@return (boolean|nil) # `true` if `context` has `class_name` defined
function Gtk.StyleContext:has_class(class_name) end

--- # method Gtk.StyleContext:has_region()
---
--- Returns `true` if `context` has the region defined.
--- If `flags_return` is not `nil`, it is set to the flags
--- affecting the region.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param region_name string # a region name
---@param flags_return? Gtk.RegionFlags # return location for region flags
---@return (boolean|nil) # `true` if region is defined
function Gtk.StyleContext:has_region(region_name, flags_return) end

--- # method Gtk.StyleContext:invalidate()
---
--- Invalidates `context` style information, so it will be reconstructed
--- again. It is useful if you modify the `context` and need the new
--- information immediately.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`.
---@return nil
function Gtk.StyleContext:invalidate() end

--- # method Gtk.StyleContext:list_classes()
---
--- Returns the list of classes currently defined in `context`.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@return string[] # a `GList` of strings with the currently defined classes. The contents of the list are owned by GTK+, but you must free the list itself with `g_list_free()` when you are done with it.
function Gtk.StyleContext:list_classes() end

--- # method Gtk.StyleContext:list_regions()
---
--- Returns the list of regions currently defined in `context`.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@return string[] # a `GList` of strings with the currently defined regions. The contents of the list are owned by GTK+, but you must free the list itself with `g_list_free()` when you are done with it.
function Gtk.StyleContext:list_regions() end

--- # method Gtk.StyleContext:lookup_color()
---
--- Looks up and resolves a color name in the `context` color map.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param color_name string # color name to lookup
---@param color Gdk.RGBA # Return location for the looked up color
---@return (boolean|nil) # `true` if `color_name` was found and resolved, `false` otherwise
function Gtk.StyleContext:lookup_color(color_name, color) end

--- # method Gtk.StyleContext:lookup_icon_set()
---
--- Looks up `stock_id` in the icon factories associated to `context` and
--- the default icon factory, returning an icon set if found, otherwise
--- `nil`.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param stock_id string # an icon name
---@return Gtk.IconSet # The looked up %GtkIconSet, or `nil`
function Gtk.StyleContext:lookup_icon_set(stock_id) end

--- # method Gtk.StyleContext:notify_state_change()
---
--- Notifies a state change on `context`, so if the current style makes use
--- of transition animations, one will be started so all rendered elements
--- under `region_id` are animated for state `state` being set to value
--- `state_value`.
--- 
--- The `window` parameter is used in order to invalidate the rendered area
--- as the animation runs, so make sure it is the same window that is being
--- rendered on by the gtk_render_*() functions.
--- 
--- If `region_id` is `nil`, all rendered elements using `context` will be
--- affected by this state transition.
--- 
--- As a practical example, a `GtkButton` notifying a state transition on
--- the prelight state:
--- ```c <!-- language="C" -->
--- gtk_style_context_notify_state_change (context,
---                                        gtk_widget_get_window (widget),
---                                        NULL,
---                                        GTK_STATE_PRELIGHT,
---                                        button->in_button);
--- ```
--- 
--- Can be handled in the CSS file like this:
--- ```c <!-- language="CSS" -->
--- button {
---     background-color: `f00`
--- }
--- 
--- button:hover {
---     background-color: `fff`;
---     transition: 200ms linear
--- }
--- ```
--- 
--- This combination will animate the button background from red to white
--- if a pointer enters the button, and back to red if the pointer leaves
--- the button.
--- 
--- Note that `state` is used when finding the transition parameters, which
--- is why the style places the transition under the :hover pseudo-class.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param window Gdk.Window # a `GdkWindow`
---@param region_id? userdata # animatable region to notify on, or `nil`. See `gtk_style_context_push_animatable_region()`
---@param state Gtk.StateType # state to trigger transition for
---@param state_value (boolean|nil) # `true` if `state` is the state we are changing to, `false` if we are changing away from it
---@return nil
function Gtk.StyleContext:notify_state_change(window, region_id, state, state_value) end

--- # method Gtk.StyleContext:pop_animatable_region()
---
--- Pops an animatable region from `context`.
--- See `gtk_style_context_push_animatable_region()`.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@return nil
function Gtk.StyleContext:pop_animatable_region() end

--- # method Gtk.StyleContext:push_animatable_region()
---
--- Pushes an animatable region, so all further gtk_render_*() calls between
--- this call and the following `gtk_style_context_pop_animatable_region()`
--- will potentially show transition animations for this region if
--- `gtk_style_context_notify_state_change()` is called for a given state,
--- and the current theme/style defines transition animations for state
--- changes.
--- 
--- The `region_id` used must be unique in `context` so the themes
--- can uniquely identify rendered elements subject to a state transition.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param region_id? userdata # unique identifier for the animatable region
---@return nil
function Gtk.StyleContext:push_animatable_region(region_id) end

--- # method Gtk.StyleContext:remove_class()
---
--- Removes `class_name` from `context`.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param class_name string # class name to remove
---@return nil
function Gtk.StyleContext:remove_class(class_name) end

--- # method Gtk.StyleContext:remove_provider()
---
--- Removes `provider` from the style providers list in `context`.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param provider Gtk.StyleProvider # a `GtkStyleProvider`
---@return nil
function Gtk.StyleContext:remove_provider(provider) end

--- # method Gtk.StyleContext:remove_region()
---
--- Removes a region from `context`.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param region_name string # region name to unset
---@return nil
function Gtk.StyleContext:remove_region(region_name) end

--- # method Gtk.StyleContext:restore()
---
--- Restores `context` state to a previous stage.
--- See `gtk_style_context_save()`.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@return nil
function Gtk.StyleContext:restore() end

--- # method Gtk.StyleContext:save()
---
--- Saves the `context` state, so temporary modifications done through
--- `gtk_style_context_add_class()`, `gtk_style_context_remove_class()`,
--- `gtk_style_context_set_state()`, etc. can quickly be reverted
--- in one go through `gtk_style_context_restore()`.
--- 
--- The matching call to `gtk_style_context_restore()` must be done
--- before GTK returns to the main loop.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@return nil
function Gtk.StyleContext:save() end

--- # method Gtk.StyleContext:scroll_animations()
---
--- This function is analogous to `gdk_window_scroll()`, and
--- should be called together with it so the invalidation
--- areas for any ongoing animation are scrolled together
--- with it.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param window Gdk.Window # a `GdkWindow` used previously in `gtk_style_context_notify_state_change()`
---@param dx integer # Amount to scroll in the X axis
---@param dy integer # Amount to scroll in the Y axis
---@return nil
function Gtk.StyleContext:scroll_animations(window, dx, dy) end

--- # method Gtk.StyleContext:set_background()
---
--- Sets the background of `window` to the background pattern or
--- color specified in `context` for its current state.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param window Gdk.Window # a `GdkWindow`
---@return nil
function Gtk.StyleContext:set_background(window) end

--- # method Gtk.StyleContext:set_direction()
---
--- Sets the reading direction for rendering purposes.
--- 
--- If you are using a `GtkStyleContext` returned from
--- `gtk_widget_get_style_context()`, you do not need to
--- call this yourself.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param direction Gtk.TextDirection # the new direction.
---@return nil
function Gtk.StyleContext:set_direction(direction) end

--- # method Gtk.StyleContext:set_frame_clock()
---
--- Attaches `context` to the given frame clock.
--- 
--- The frame clock is used for the timing of animations.
--- 
--- If you are using a `GtkStyleContext` returned from
--- `gtk_widget_get_style_context()`, you do not need to
--- call this yourself.
---
--- ---
---
---@param self Gtk.StyleContext # a `GdkFrameClock`
---@param frame_clock Gdk.FrameClock # a `GdkFrameClock`
---@return nil
function Gtk.StyleContext:set_frame_clock(frame_clock) end

--- # method Gtk.StyleContext:set_junction_sides()
---
--- Sets the sides where rendered elements (mostly through
--- `gtk_render_frame()`) will visually connect with other visual elements.
--- 
--- This is merely a hint that may or may not be honored
--- by themes.
--- 
--- Container widgets are expected to set junction hints as appropriate
--- for their children, so it should not normally be necessary to call
--- this function manually.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param sides Gtk.JunctionSides # sides where rendered elements are visually connected to other elements
---@return nil
function Gtk.StyleContext:set_junction_sides(sides) end

--- # method Gtk.StyleContext:set_parent()
---
--- Sets the parent style context for `context`. The parent style
--- context is used to implement
--- [inheritance](http://www.w3.org/TR/css3-cascade/`inheritance`)
--- of properties.
--- 
--- If you are using a `GtkStyleContext` returned from
--- `gtk_widget_get_style_context()`, the parent will be set for you.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param parent? Gtk.StyleContext # the new parent or `nil`
---@return nil
function Gtk.StyleContext:set_parent(parent) end

--- # method Gtk.StyleContext:set_path()
---
--- Sets the `GtkWidgetPath` used for style matching. As a
--- consequence, the style will be regenerated to match
--- the new given path.
--- 
--- If you are using a `GtkStyleContext` returned from
--- `gtk_widget_get_style_context()`, you do not need to call
--- this yourself.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param path Gtk.WidgetPath # a `GtkWidgetPath`
---@return nil
function Gtk.StyleContext:set_path(path) end

--- # method Gtk.StyleContext:set_scale()
---
--- Sets the scale to use when getting image assets for the style.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param scale integer # scale
---@return nil
function Gtk.StyleContext:set_scale(scale) end

--- # method Gtk.StyleContext:set_screen()
---
--- Attaches `context` to the given screen.
--- 
--- The screen is used to add style information from “global” style
--- providers, such as the screen’s `GtkSettings` instance.
--- 
--- If you are using a `GtkStyleContext` returned from
--- `gtk_widget_get_style_context()`, you do not need to
--- call this yourself.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param screen Gdk.Screen # a `GdkScreen`
---@return nil
function Gtk.StyleContext:set_screen(screen) end

--- # method Gtk.StyleContext:set_state()
---
--- Sets the state to be used for style matching.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param flags Gtk.StateFlags # state to represent
---@return nil
function Gtk.StyleContext:set_state(flags) end

--- # method Gtk.StyleContext:state_is_running()
---
--- Returns `true` if there is a transition animation running for the
--- current region (see `gtk_style_context_push_animatable_region()`).
--- 
--- If `progress` is not `nil`, the animation progress will be returned
--- there, 0.0 means the state is closest to being unset, while 1.0 means
--- it’s closest to being set. This means transition animation will
--- run from 0 to 1 when `state` is being set and from 1 to 0 when
--- it’s being unset.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param state Gtk.StateType # a widget state
---@param progress number # return location for the transition progress
---@return (boolean|nil) # `true` if there is a running transition animation for `state`.
function Gtk.StyleContext:state_is_running(state, progress) end

--- # method Gtk.StyleContext:to_string()
---
--- Converts the style context into a string representation.
--- 
--- The string representation always includes information about
--- the name, state, id, visibility and style classes of the CSS
--- node that is backing `context`. Depending on the flags, more
--- information may be included.
--- 
--- This function is intended for testing and debugging of the
--- CSS implementation in GTK+. There are no guarantees about
--- the format of the returned string, it may change.
---
--- ---
---
---@param self Gtk.StyleContext # a `GtkStyleContext`
---@param flags Gtk.StyleContextPrintFlags # Flags that determine what to print
---@return string # a newly allocated string representing `context`
function Gtk.StyleContext:to_string(flags) end

--- # function Gtk.StyleContext.add_provider_for_screen()
---
--- Adds a global style provider to `screen`, which will be used
--- in style construction for all `GtkStyleContexts` under `screen`.
--- 
--- GTK+ uses this to make styling information from `GtkSettings`
--- available.
--- 
--- Note: If both priorities are the same, A `GtkStyleProvider`
--- added through `gtk_style_context_add_provider()` takes precedence
--- over another added through this function.
---
--- ---
---
---@param screen Gdk.Screen # a `GdkScreen`
---@param provider Gtk.StyleProvider # a `GtkStyleProvider`
---@param priority integer # the priority of the style provider. The lower it is, the earlier it will be used in the style construction. Typically this will be in the range between %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK and %GTK_STYLE_PROVIDER_PRIORITY_USER
---@return nil
function Gtk.StyleContext.add_provider_for_screen(screen, provider, priority) end

--- # function Gtk.StyleContext.remove_provider_for_screen()
---
--- Removes `provider` from the global style providers list in `screen`.
---
--- ---
---
---@param screen Gdk.Screen # a `GdkScreen`
---@param provider Gtk.StyleProvider # a `GtkStyleProvider`
---@return nil
function Gtk.StyleContext.remove_provider_for_screen(screen, provider) end

--- # function Gtk.StyleContext.reset_widgets()
---
--- This function recomputes the styles for all widgets under a particular
--- `GdkScreen`. This is useful when some global parameter has changed that
--- affects the appearance of all widgets, because when a widget gets a new
--- style, it will both redraw and recompute any cached information about
--- its appearance. As an example, it is used when the color scheme changes
--- in the related `GtkSettings` object.
---
--- ---
---
---@param screen Gdk.Screen # a `GdkScreen`
---@return nil
function Gtk.StyleContext.reset_widgets(screen) end

--- # function Gtk.StyleContext.new()
---
--- Creates a standalone `GtkStyleContext`, this style context
--- won’t be attached to any widget, so you may want
--- to call `gtk_style_context_set_path()` yourself.
--- 
--- This function is only useful when using the theming layer
--- separated from GTK+, if you are using `GtkStyleContext` to
--- theme `GtkWidgets`, use `gtk_widget_get_style_context()`
--- in order to get a style context ready to theme the widget.
---
--- ---
---
---@return Gtk.StyleContext # A newly created `GtkStyleContext`.
function Gtk.StyleContext.new() end

--- # record Gtk.StyleContextClass
---
---@class Gtk.StyleContextClass
---@field parent_class GObject.ObjectClass
---@field changed fun(context: Gtk.StyleContext): nil
Gtk.StyleContextClass = {}

---@enum Gtk.StyleContextPrintFlags
Gtk.StyleContextPrintFlags = {}

--- # record Gtk.StyleContextPrivate
---
---@class Gtk.StyleContextPrivate
Gtk.StyleContextPrivate = {}

--- # class Gtk.StyleProperties
---
--- GtkStyleProperties provides the storage for style information
--- that is used by `GtkStyleContext` and other `GtkStyleProvider`
--- implementations.
--- 
--- Before style properties can be stored in GtkStyleProperties, they
--- must be registered with `gtk_style_properties_register_property()`.
--- 
--- Unless you are writing a `GtkStyleProvider` implementation, you
--- are unlikely to use this API directly, as `gtk_style_context_get()`
--- and its variants are the preferred way to access styling information
--- from widget implementations and theming engine implementations
--- should use the APIs provided by `GtkThemingEngine` instead.
--- 
--- `GtkStyleProperties` has been deprecated in GTK 3.16. The CSS
--- machinery does not use it anymore and all users of this object
--- have been deprecated.
---
--- ---
---
---@class Gtk.StyleProperties : GObject.Object, Gtk.StyleProvider
---@field parent_object GObject.Object
---@field priv Gtk.StylePropertiesPrivate
---@operator call: Gtk.StyleProperties
Gtk.StyleProperties = {}

--- # method Gtk.StyleProperties:clear()
---
--- Clears all style information from `props`.
---
--- ---
---
---@param self Gtk.StyleProperties # a `GtkStyleProperties`
---@return nil
function Gtk.StyleProperties:clear() end

--- # method Gtk.StyleProperties:get_property()
---
--- Gets a style property from `props` for the given state. When done with `value`,
--- `g_value_unset()` needs to be called to free any allocated memory.
---
--- ---
---
---@param self Gtk.StyleProperties # a `GtkStyleProperties`
---@param property string # style property name
---@param state Gtk.StateFlags # state to retrieve the property value for
---@param value GObject.Value # return location for the style property value.
---@return (boolean|nil) # `true` if the property exists in `props`, `false` otherwise
function Gtk.StyleProperties:get_property(property, state, value) end

--- # method Gtk.StyleProperties:lookup_color()
---
--- Returns the symbolic color that is mapped
--- to `name`.
---
--- ---
---
---@param self Gtk.StyleProperties # a `GtkStyleProperties`
---@param name string # color name to lookup
---@return Gtk.SymbolicColor # The mapped color
function Gtk.StyleProperties:lookup_color(name) end

--- # method Gtk.StyleProperties:map_color()
---
--- Maps `color` so it can be referenced by `name`. See
--- `gtk_style_properties_lookup_color()`
---
--- ---
---
---@param self Gtk.StyleProperties # a `GtkStyleProperties`
---@param name string # color name
---@param color Gtk.SymbolicColor # `GtkSymbolicColor` to map `name` to
---@return nil
function Gtk.StyleProperties:map_color(name, color) end

--- # method Gtk.StyleProperties:merge()
---
--- Merges into `props` all the style information contained
--- in `props_to_merge`. If `replace` is `true`, the values
--- will be overwritten, if it is `false`, the older values
--- will prevail.
---
--- ---
---
---@param self Gtk.StyleProperties # a `GtkStyleProperties`
---@param props_to_merge Gtk.StyleProperties # a second `GtkStyleProperties`
---@param replace (boolean|nil) # whether to replace values or not
---@return nil
function Gtk.StyleProperties:merge(props_to_merge, replace) end

--- # method Gtk.StyleProperties:set_property()
---
--- Sets a styling property in `props`.
---
--- ---
---
---@param self Gtk.StyleProperties # a `GtkStyleProperties`
---@param property string # styling property to set
---@param state Gtk.StateFlags # state to set the value for
---@param value GObject.Value # new value for the property
---@return nil
function Gtk.StyleProperties:set_property(property, state, value) end

--- # method Gtk.StyleProperties:unset_property()
---
--- Unsets a style property in `props`.
---
--- ---
---
---@param self Gtk.StyleProperties # a `GtkStyleProperties`
---@param property string # property to unset
---@param state Gtk.StateFlags # state to unset
---@return nil
function Gtk.StyleProperties:unset_property(property, state) end

--- # function Gtk.StyleProperties.new()
---
--- Returns a newly created `GtkStyleProperties`
---
--- ---
---
---@return Gtk.StyleProperties # a new `GtkStyleProperties`
function Gtk.StyleProperties.new() end

--- # record Gtk.StylePropertiesClass
---
---@class Gtk.StylePropertiesClass
---@field parent_class GObject.ObjectClass
Gtk.StylePropertiesClass = {}

--- # record Gtk.StylePropertiesPrivate
---
---@class Gtk.StylePropertiesPrivate
Gtk.StylePropertiesPrivate = {}

---@alias Gtk.StylePropertyParser fun(string: string, value: GObject.Value): (boolean|nil)

--- # interface Gtk.StyleProvider
---
--- GtkStyleProvider is an interface used to provide style information to a `GtkStyleContext`.
--- See `gtk_style_context_add_provider()` and `gtk_style_context_add_provider_for_screen()`.
---
--- ---
---
---@class Gtk.StyleProvider
Gtk.StyleProvider = {}

--- # method Gtk.StyleProvider:get_icon_factory()
---
--- Returns the `GtkIconFactory` defined to be in use for `path`, or `nil` if none
--- is defined.
---
--- ---
---
---@param self Gtk.StyleProvider # a `GtkStyleProvider`
---@param path Gtk.WidgetPath # `GtkWidgetPath` to query
---@return Gtk.IconFactory # The icon factory to use for `path`, or `nil`
function Gtk.StyleProvider:get_icon_factory(path) end

--- # method Gtk.StyleProvider:get_style()
---
--- Returns the style settings affecting a widget defined by `path`, or `nil` if
--- `provider` doesn’t contemplate styling `path`.
---
--- ---
---
---@param self Gtk.StyleProvider # a `GtkStyleProvider`
---@param path Gtk.WidgetPath # `GtkWidgetPath` to query
---@return Gtk.StyleProperties # a `GtkStyleProperties` containing the style settings affecting `path`
function Gtk.StyleProvider:get_style(path) end

--- # method Gtk.StyleProvider:get_style_property()
---
--- Looks up a widget style property as defined by `provider` for
--- the widget represented by `path`.
---
--- ---
---
---@param self Gtk.StyleProvider # a `GtkStyleProvider`
---@param path Gtk.WidgetPath # `GtkWidgetPath` to query
---@param state Gtk.StateFlags # state to query the style property for
---@param pspec GObject.ParamSpec # The `GParamSpec` to query
---@param value GObject.Value # return location for the property value
---@return (boolean|nil) # `true` if the property was found and has a value, `false` otherwise
function Gtk.StyleProvider:get_style_property(path, state, pspec, value) end

--- # record Gtk.StyleProviderIface
---
---@class Gtk.StyleProviderIface
---@field g_iface GObject.TypeInterface
---@field get_style fun(provider: Gtk.StyleProvider, path: Gtk.WidgetPath): Gtk.StyleProperties
---@field get_style_property fun(provider: Gtk.StyleProvider, path: Gtk.WidgetPath, state: Gtk.StateFlags, pspec: GObject.ParamSpec, value: GObject.Value): (boolean|nil)
---@field get_icon_factory fun(provider: Gtk.StyleProvider, path: Gtk.WidgetPath): Gtk.IconFactory
Gtk.StyleProviderIface = {}

--- # class Gtk.Switch
---
--- `GtkSwitch` is a widget that has two states: on or off. The user can control
--- which state should be active by clicking the empty area, or by dragging the
--- handle.
--- 
--- GtkSwitch can also handle situations where the underlying state changes with
--- a delay. See `GtkSwitch`::state-set for details.
--- 
--- # CSS nodes
--- 
--- ```plain
--- switch
--- ╰── slider
--- ```
--- 
--- GtkSwitch has two css nodes, the main node with the name switch and a subnode
--- named slider. Neither of them is using any style classes.
---
--- ---
---
---@class Gtk.Switch : Gtk.Widget, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field parent_instance Gtk.Widget
---@field priv Gtk.SwitchPrivate
---@operator call: Gtk.Switch
Gtk.Switch = {}

--- # method Gtk.Switch:get_active()
---
--- Gets whether the `GtkSwitch` is in its “on” or “off” state.
---
--- ---
---
---@param self Gtk.Switch # a `GtkSwitch`
---@return (boolean|nil) # `true` if the `GtkSwitch` is active, and `false` otherwise
function Gtk.Switch:get_active() end

--- # method Gtk.Switch:get_state()
---
--- Gets the underlying state of the `GtkSwitch`.
---
--- ---
---
---@param self Gtk.Switch # a `GtkSwitch`
---@return (boolean|nil) # the underlying state
function Gtk.Switch:get_state() end

--- # method Gtk.Switch:set_active()
---
--- Changes the state of `sw` to the desired one.
---
--- ---
---
---@param self Gtk.Switch # a `GtkSwitch`
---@param is_active (boolean|nil) # `true` if `sw` should be active, and `false` otherwise
---@return nil
function Gtk.Switch:set_active(is_active) end

--- # method Gtk.Switch:set_state()
---
--- Sets the underlying state of the `GtkSwitch`.
--- 
--- Normally, this is the same as `GtkSwitch`:active, unless the switch
--- is set up for delayed state changes. This function is typically
--- called from a `GtkSwitch`::state-set signal handler.
--- 
--- See `GtkSwitch`::state-set for details.
---
--- ---
---
---@param self Gtk.Switch # a `GtkSwitch`
---@param state (boolean|nil) # the new state
---@return nil
function Gtk.Switch:set_state(state) end

--- # function Gtk.Switch.new()
---
--- Creates a new `GtkSwitch` widget.
---
--- ---
---
---@return Gtk.Widget # the newly created `GtkSwitch` instance
function Gtk.Switch.new() end

--- # class Gtk.SwitchAccessible
---
---@class Gtk.SwitchAccessible : Gtk.WidgetAccessible, Gtk.Atk.Action, Gtk.Atk.Component
---@field parent Gtk.WidgetAccessible
---@field priv Gtk.SwitchAccessiblePrivate
Gtk.SwitchAccessible = {}

--- # record Gtk.SwitchAccessibleClass
---
---@class Gtk.SwitchAccessibleClass
---@field parent_class Gtk.WidgetAccessibleClass
Gtk.SwitchAccessibleClass = {}

--- # record Gtk.SwitchAccessiblePrivate
---
---@class Gtk.SwitchAccessiblePrivate
Gtk.SwitchAccessiblePrivate = {}

--- # record Gtk.SwitchClass
---
---@class Gtk.SwitchClass
---@field parent_class Gtk.WidgetClass # The parent class.
---@field activate fun(sw: Gtk.Switch): nil
---@field state_set fun(sw: Gtk.Switch, state: (boolean|nil)): (boolean|nil)
Gtk.SwitchClass = {}

--- # record Gtk.SwitchPrivate
---
---@class Gtk.SwitchPrivate
Gtk.SwitchPrivate = {}

--- # record Gtk.SymbolicColor
---
--- GtkSymbolicColor is a boxed type that represents a symbolic color.
--- It is the result of parsing a
--- [color expression][gtkcssprovider-symbolic-colors].
--- To obtain the color represented by a GtkSymbolicColor, it has to
--- be resolved with `gtk_symbolic_color_resolve()`, which replaces all
--- symbolic color references by the colors they refer to (in a given
--- context) and evaluates mix, shade and other expressions, resulting
--- in a `GdkRGBA` value.
--- 
--- It is not normally necessary to deal directly with `GtkSymbolicColors`,
--- since they are mostly used behind the scenes by `GtkStyleContext` and
--- `GtkCssProvider`.
--- 
--- `GtkSymbolicColor` is deprecated. Symbolic colors are considered an
--- implementation detail of GTK+.
---
--- ---
---
---@class Gtk.SymbolicColor
Gtk.SymbolicColor = {}

--- # method Gtk.SymbolicColor:ref()
---
--- Increases the reference count of `color`
---
--- ---
---
---@param self Gtk.SymbolicColor # a `GtkSymbolicColor`
---@return Gtk.SymbolicColor # the same `color`
function Gtk.SymbolicColor:ref() end

--- # method Gtk.SymbolicColor:resolve()
---
--- If `color` is resolvable, `resolved_color` will be filled in
--- with the resolved color, and `true` will be returned. Generally,
--- if `color` can’t be resolved, it is due to it being defined on
--- top of a named color that doesn’t exist in `props`.
--- 
--- When `props` is `nil`, resolving of named colors will fail, so if
--- your `color` is or references such a color, this function will
--- return `false`.
---
--- ---
---
---@param self Gtk.SymbolicColor # a `GtkSymbolicColor`
---@param props? Gtk.StyleProperties # `GtkStyleProperties` to use when resolving named colors, or `nil`
---@param resolved_color Gdk.RGBA # return location for the resolved color
---@return (boolean|nil) # `true` if the color has been resolved
function Gtk.SymbolicColor:resolve(props, resolved_color) end

--- # method Gtk.SymbolicColor:to_string()
---
--- Converts the given `color` to a string representation. This is useful
--- both for debugging and for serialization of strings. The format of
--- the string may change between different versions of GTK, but it is
--- guaranteed that the GTK css parser is able to read the string and
--- create the same symbolic color from it.
---
--- ---
---
---@param self Gtk.SymbolicColor # color to convert to a string
---@return string # a new string representing `color`
function Gtk.SymbolicColor:to_string() end

--- # method Gtk.SymbolicColor:unref()
---
--- Decreases the reference count of `color`, freeing its memory if the
--- reference count reaches 0.
---
--- ---
---
---@param self Gtk.SymbolicColor # a `GtkSymbolicColor`
---@return nil
function Gtk.SymbolicColor:unref() end

--- # function Gtk.SymbolicColor.new_alpha()
---
--- Creates a symbolic color by modifying the relative alpha
--- value of `color`. A factor < 1.0 would resolve to a more
--- transparent color, while > 1.0 would resolve to a more
--- opaque color.
---
--- ---
---
---@param color Gtk.SymbolicColor # another `GtkSymbolicColor`
---@param factor number # factor to apply to `color` alpha
---@return Gtk.SymbolicColor # A newly created `GtkSymbolicColor`
function Gtk.SymbolicColor.new_alpha(color, factor) end

--- # function Gtk.SymbolicColor.new_literal()
---
--- Creates a symbolic color pointing to a literal color.
---
--- ---
---
---@param color Gdk.RGBA # a `GdkRGBA`
---@return Gtk.SymbolicColor # a newly created `GtkSymbolicColor`
function Gtk.SymbolicColor.new_literal(color) end

--- # function Gtk.SymbolicColor.new_mix()
---
--- Creates a symbolic color defined as a mix of another
--- two colors. a mix factor of 0 would resolve to `color1`,
--- while a factor of 1 would resolve to `color2`.
---
--- ---
---
---@param color1 Gtk.SymbolicColor # color to mix
---@param color2 Gtk.SymbolicColor # another color to mix
---@param factor number # mix factor
---@return Gtk.SymbolicColor # A newly created `GtkSymbolicColor`
function Gtk.SymbolicColor.new_mix(color1, color2, factor) end

--- # function Gtk.SymbolicColor.new_name()
---
--- Creates a symbolic color pointing to an unresolved named
--- color. See `gtk_style_context_lookup_color()` and
--- `gtk_style_properties_lookup_color()`.
---
--- ---
---
---@param name string # color name
---@return Gtk.SymbolicColor # a newly created `GtkSymbolicColor`
function Gtk.SymbolicColor.new_name(name) end

--- # function Gtk.SymbolicColor.new_shade()
---
--- Creates a symbolic color defined as a shade of
--- another color. A factor > 1.0 would resolve to
--- a brighter color, while < 1.0 would resolve to
--- a darker color.
---
--- ---
---
---@param color Gtk.SymbolicColor # another `GtkSymbolicColor`
---@param factor number # shading factor to apply to `color`
---@return Gtk.SymbolicColor # A newly created `GtkSymbolicColor`
function Gtk.SymbolicColor.new_shade(color, factor) end

--- # function Gtk.SymbolicColor.new_win32()
---
--- Creates a symbolic color based on the current win32
--- theme.
--- 
--- Note that while this call is available on all platforms
--- the actual value returned is not reliable on non-win32
--- platforms.
---
--- ---
---
---@param theme_class string # The theme class to pull color from
---@param id integer # The color id
---@return Gtk.SymbolicColor # A newly created `GtkSymbolicColor`
function Gtk.SymbolicColor.new_win32(theme_class, id) end

--- # class Gtk.Table
---
--- The `GtkTable` functions allow the programmer to arrange widgets in rows and
--- columns, making it easy to align many widgets next to each other,
--- horizontally and vertically.
--- 
--- Tables are created with a call to `gtk_table_new()`, the size of which can
--- later be changed with `gtk_table_resize()`.
--- 
--- Widgets can be added to a table using `gtk_table_attach()` or the more
--- convenient (but slightly less flexible) `gtk_table_attach_defaults()`.
--- 
--- To alter the space next to a specific row, use `gtk_table_set_row_spacing()`,
--- and for a column, `gtk_table_set_col_spacing()`.
--- The gaps between all rows or columns can be changed by
--- calling `gtk_table_set_row_spacings()` or `gtk_table_set_col_spacings()`
--- respectively. Note that spacing is added between the
--- children, while padding added by `gtk_table_attach()` is added on
--- either side of the widget it belongs to.
--- 
--- `gtk_table_set_homogeneous()`, can be used to set whether all cells in the
--- table will resize themselves to the size of the largest widget in the table.
--- 
--- > `GtkTable` has been deprecated. Use `GtkGrid` instead. It provides the same
--- > capabilities as GtkTable for arranging widgets in a rectangular grid, but
--- > does support height-for-width geometry management.
---
--- ---
---
---@class Gtk.Table : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field container Gtk.Container
---@field priv Gtk.TablePrivate
---@operator call: Gtk.Table
Gtk.Table = {}

--- # method Gtk.Table:attach()
---
--- Adds a widget to a table. The number of “cells” that a widget will occupy is
--- specified by `left_attach`, `right_attach`, `top_attach` and `bottom_attach`.
--- These each represent the leftmost, rightmost, uppermost and lowest column
--- and row numbers of the table. (Columns and rows are indexed from zero).
--- 
--- To make a button occupy the lower right cell of a 2x2 table, use
--- ```c
--- gtk_table_attach (table, button,
---                   1, 2, // left, right attach
---                   1, 2, // top, bottom attach
---                   xoptions, yoptions,
---                   xpadding, ypadding);
--- ```
--- If you want to make the button span the entire bottom row, use `left_attach` == 0 and `right_attach` = 2 instead.
---
--- ---
---
---@param self table<unknown, unknown> # The `GtkTable` to add a new widget to.
---@param child Gtk.Widget # The widget to add.
---@param left_attach integer # the column number to attach the left side of a child widget to.
---@param right_attach integer # the column number to attach the right side of a child widget to.
---@param top_attach integer # the row number to attach the top of a child widget to.
---@param bottom_attach integer # the row number to attach the bottom of a child widget to.
---@param xoptions Gtk.AttachOptions # Used to specify the properties of the child widget when the table is resized.
---@param yoptions Gtk.AttachOptions # The same as xoptions, except this field determines behaviour of vertical resizing.
---@param xpadding integer # An integer value specifying the padding on the left and right of the widget being added to the table.
---@param ypadding integer # The amount of padding above and below the child widget.
---@return nil
function Gtk.Table:attach(child, left_attach, right_attach, top_attach, bottom_attach, xoptions, yoptions, xpadding, ypadding) end

--- # method Gtk.Table:attach_defaults()
---
--- As there are many options associated with `gtk_table_attach()`, this convenience
--- function provides the programmer with a means to add children to a table with
--- identical padding and expansion options. The values used for the `GtkAttachOptions`
--- are `GTK_EXPAND | GTK_FILL`, and the padding is set to 0.
---
--- ---
---
---@param self table<unknown, unknown> # The table to add a new child widget to.
---@param widget Gtk.Widget # The child widget to add.
---@param left_attach integer # The column number to attach the left side of the child widget to.
---@param right_attach integer # The column number to attach the right side of the child widget to.
---@param top_attach integer # The row number to attach the top of the child widget to.
---@param bottom_attach integer # The row number to attach the bottom of the child widget to.
---@return nil
function Gtk.Table:attach_defaults(widget, left_attach, right_attach, top_attach, bottom_attach) end

--- # method Gtk.Table:get_col_spacing()
---
--- Gets the amount of space between column `col`, and
--- column `col` + 1. See `gtk_table_set_col_spacing()`.
---
--- ---
---
---@param self table<unknown, unknown> # a `GtkTable`
---@param column integer # a column in the table, 0 indicates the first column
---@return integer # the column spacing
function Gtk.Table:get_col_spacing(column) end

--- # method Gtk.Table:get_default_col_spacing()
---
--- Gets the default column spacing for the table. This is
--- the spacing that will be used for newly added columns.
--- (See `gtk_table_set_col_spacings()`)
---
--- ---
---
---@param self table<unknown, unknown> # a `GtkTable`
---@return integer # the default column spacing
function Gtk.Table:get_default_col_spacing() end

--- # method Gtk.Table:get_default_row_spacing()
---
--- Gets the default row spacing for the table. This is
--- the spacing that will be used for newly added rows.
--- (See `gtk_table_set_row_spacings()`)
---
--- ---
---
---@param self table<unknown, unknown> # a `GtkTable`
---@return integer # the default row spacing
function Gtk.Table:get_default_row_spacing() end

--- # method Gtk.Table:get_homogeneous()
---
--- Returns whether the table cells are all constrained to the same
--- width and height. (See gtk_table_set_homogeneous ())
---
--- ---
---
---@param self table<unknown, unknown> # a `GtkTable`
---@return (boolean|nil) # `true` if the cells are all constrained to the same size
function Gtk.Table:get_homogeneous() end

--- # method Gtk.Table:get_row_spacing()
---
--- Gets the amount of space between row `row`, and
--- row `row` + 1. See `gtk_table_set_row_spacing()`.
---
--- ---
---
---@param self table<unknown, unknown> # a `GtkTable`
---@param row integer # a row in the table, 0 indicates the first row
---@return integer # the row spacing
function Gtk.Table:get_row_spacing(row) end

--- # method Gtk.Table:get_size()
---
--- Gets the number of rows and columns in the table.
---
--- ---
---
---@param self table<unknown, unknown> # a `GtkTable`
---@param rows? integer # return location for the number of rows, or `nil`
---@param columns? integer # return location for the number of columns, or `nil`
---@return nil
function Gtk.Table:get_size(rows, columns) end

--- # method Gtk.Table:resize()
---
--- If you need to change a table’s size after
--- it has been created, this function allows you to do so.
---
--- ---
---
---@param self table<unknown, unknown> # The `GtkTable` you wish to change the size of.
---@param rows integer # The new number of rows.
---@param columns integer # The new number of columns.
---@return nil
function Gtk.Table:resize(rows, columns) end

--- # method Gtk.Table:set_col_spacing()
---
--- Alters the amount of space between a given table column and the following
--- column.
---
--- ---
---
---@param self table<unknown, unknown> # a `GtkTable`.
---@param column integer # the column whose spacing should be changed.
---@param spacing integer # number of pixels that the spacing should take up.
---@return nil
function Gtk.Table:set_col_spacing(column, spacing) end

--- # method Gtk.Table:set_col_spacings()
---
--- Sets the space between every column in `table` equal to `spacing`.
---
--- ---
---
---@param self table<unknown, unknown> # a `GtkTable`.
---@param spacing integer # the number of pixels of space to place between every column in the table.
---@return nil
function Gtk.Table:set_col_spacings(spacing) end

--- # method Gtk.Table:set_homogeneous()
---
--- Changes the homogenous property of table cells, ie. whether all cells are
--- an equal size or not.
---
--- ---
---
---@param self table<unknown, unknown> # The `GtkTable` you wish to set the homogeneous properties of.
---@param homogeneous (boolean|nil) # Set to `true` to ensure all table cells are the same size. Set to `false` if this is not your desired behaviour.
---@return nil
function Gtk.Table:set_homogeneous(homogeneous) end

--- # method Gtk.Table:set_row_spacing()
---
--- Changes the space between a given table row and the subsequent row.
---
--- ---
---
---@param self table<unknown, unknown> # a `GtkTable` containing the row whose properties you wish to change.
---@param row integer # row number whose spacing will be changed.
---@param spacing integer # number of pixels that the spacing should take up.
---@return nil
function Gtk.Table:set_row_spacing(row, spacing) end

--- # method Gtk.Table:set_row_spacings()
---
--- Sets the space between every row in `table` equal to `spacing`.
---
--- ---
---
---@param self table<unknown, unknown> # a `GtkTable`.
---@param spacing integer # the number of pixels of space to place between every row in the table.
---@return nil
function Gtk.Table:set_row_spacings(spacing) end

--- # function Gtk.Table.new()
---
--- Used to create a new table widget. An initial size must be given by
--- specifying how many rows and columns the table should have, although
--- this can be changed later with `gtk_table_resize()`.  `rows` and `columns`
--- must both be in the range 1 .. 65535. For historical reasons, 0 is accepted
--- as well and is silently interpreted as 1.
---
--- ---
---
---@param rows integer # The number of rows the new table should have.
---@param columns integer # The number of columns the new table should have.
---@param homogeneous (boolean|nil) # If set to `true`, all table cells are resized to the size of the cell containing the largest widget.
---@return Gtk.Widget # A pointer to the newly created table widget.
function Gtk.Table.new(rows, columns, homogeneous) end

--- # record Gtk.TableChild
---
---@class Gtk.TableChild
---@field widget Gtk.Widget
---@field left_attach integer
---@field right_attach integer
---@field top_attach integer
---@field bottom_attach integer
---@field xpadding integer
---@field ypadding integer
---@field xexpand integer
---@field yexpand integer
---@field xshrink integer
---@field yshrink integer
---@field xfill integer
---@field yfill integer
Gtk.TableChild = {}

--- # record Gtk.TableClass
---
---@class Gtk.TableClass
---@field parent_class Gtk.ContainerClass
Gtk.TableClass = {}

--- # record Gtk.TablePrivate
---
---@class Gtk.TablePrivate
Gtk.TablePrivate = {}

--- # record Gtk.TableRowCol
---
---@class Gtk.TableRowCol
---@field requisition integer
---@field allocation integer
---@field spacing integer
---@field need_expand integer
---@field need_shrink integer
---@field expand integer
---@field shrink integer
---@field empty integer
Gtk.TableRowCol = {}

--- # record Gtk.TargetEntry
---
--- A `GtkTargetEntry` represents a single type of
--- data than can be supplied for by a widget for a selection
--- or for supplied or received during drag-and-drop.
---
--- ---
---
---@class Gtk.TargetEntry
---@field target string # a string representation of the target type
---@field flags integer # `GtkTargetFlags` for DND
---@field info integer # an application-assigned integer ID which will get passed as a parameter to e.g the `GtkWidget`::selection-get signal. It allows the application to identify the target type without extensive string compares.
---@operator call: Gtk.TargetEntry
Gtk.TargetEntry = {}

--- # method Gtk.TargetEntry:copy()
---
--- Makes a copy of a `GtkTargetEntry` and its data.
---
--- ---
---
---@param self Gtk.TargetEntry # a pointer to a `GtkTargetEntry`
---@return Gtk.TargetEntry # a pointer to a copy of `data`. Free with `gtk_target_entry_free()`
function Gtk.TargetEntry:copy() end

--- # method Gtk.TargetEntry:free()
---
--- Frees a `GtkTargetEntry` returned from
--- `gtk_target_entry_new()` or `gtk_target_entry_copy()`.
---
--- ---
---
---@param self Gtk.TargetEntry # a pointer to a `GtkTargetEntry`.
---@return nil
function Gtk.TargetEntry:free() end

--- # function Gtk.TargetEntry.new()
---
--- Makes a new `GtkTargetEntry`.
---
--- ---
---
---@param target string # String identifier for target
---@param flags integer # Set of flags, see `GtkTargetFlags`
---@param info integer # an ID that will be passed back to the application
---@return Gtk.TargetEntry # a pointer to a new `GtkTargetEntry`. Free with `gtk_target_entry_free()`
function Gtk.TargetEntry.new(target, flags, info) end

---@enum Gtk.TargetFlags
Gtk.TargetFlags = {}

--- # record Gtk.TargetList
---
--- A `GtkTargetList`-struct is a reference counted list
--- of `GtkTargetPair` and should be treated as
--- opaque.
---
--- ---
---
---@class Gtk.TargetList
---@operator call: Gtk.TargetList
Gtk.TargetList = {}

--- # method Gtk.TargetList:add()
---
--- Appends another target to a `GtkTargetList`.
---
--- ---
---
---@param self Gtk.TargetList # a `GtkTargetList`
---@param target Gdk.Atom # the interned atom representing the target
---@param flags integer # the flags for this target
---@param info integer # an ID that will be passed back to the application
---@return nil
function Gtk.TargetList:add(target, flags, info) end

--- # method Gtk.TargetList:add_image_targets()
---
--- Appends the image targets supported by `GtkSelectionData` to
--- the target list. All targets are added with the same `info`.
---
--- ---
---
---@param self Gtk.TargetList # a `GtkTargetList`
---@param info integer # an ID that will be passed back to the application
---@param writable (boolean|nil) # whether to add only targets for which GTK+ knows how to convert a pixbuf into the format
---@return nil
function Gtk.TargetList:add_image_targets(info, writable) end

--- # method Gtk.TargetList:add_rich_text_targets()
---
--- Appends the rich text targets registered with
--- `gtk_text_buffer_register_serialize_format()` or
--- `gtk_text_buffer_register_deserialize_format()` to the target list. All
--- targets are added with the same `info`.
---
--- ---
---
---@param self Gtk.TargetList # a `GtkTargetList`
---@param info integer # an ID that will be passed back to the application
---@param deserializable (boolean|nil) # if `true`, then deserializable rich text formats will be added, serializable formats otherwise.
---@param buffer Gtk.TextBuffer # a `GtkTextBuffer`.
---@return nil
function Gtk.TargetList:add_rich_text_targets(info, deserializable, buffer) end

--- # method Gtk.TargetList:add_table()
---
--- Prepends a table of `GtkTargetEntry` to a target list.
---
--- ---
---
---@param self Gtk.TargetList # a `GtkTargetList`
---@param targets unknown[] # the table of `GtkTargetEntry`
---@param ntargets integer # number of targets in the table
---@return nil
function Gtk.TargetList:add_table(targets, ntargets) end

--- # method Gtk.TargetList:add_text_targets()
---
--- Appends the text targets supported by `GtkSelectionData` to
--- the target list. All targets are added with the same `info`.
---
--- ---
---
---@param self Gtk.TargetList # a `GtkTargetList`
---@param info integer # an ID that will be passed back to the application
---@return nil
function Gtk.TargetList:add_text_targets(info) end

--- # method Gtk.TargetList:add_uri_targets()
---
--- Appends the URI targets supported by `GtkSelectionData` to
--- the target list. All targets are added with the same `info`.
--- 
--- Since 3.24.37, this includes the application/vnd.portal.files
--- target when possible, to allow sending files between sandboxed
--- apps via the FileTransfer portal.
---
--- ---
---
---@param self Gtk.TargetList # a `GtkTargetList`
---@param info integer # an ID that will be passed back to the application
---@return nil
function Gtk.TargetList:add_uri_targets(info) end

--- # method Gtk.TargetList:find()
---
--- Looks up a given target in a `GtkTargetList`.
---
--- ---
---
---@param self Gtk.TargetList # a `GtkTargetList`
---@param target Gdk.Atom # an interned atom representing the target to search for
---@param info? integer # a pointer to the location to store application info for target, or `nil`
---@return (boolean|nil) # `true` if the target was found, otherwise `false`
function Gtk.TargetList:find(target, info) end

--- # method Gtk.TargetList:ref()
---
--- Increases the reference count of a `GtkTargetList` by one.
---
--- ---
---
---@param self Gtk.TargetList # a `GtkTargetList`
---@return Gtk.TargetList # the passed in `GtkTargetList`.
function Gtk.TargetList:ref() end

--- # method Gtk.TargetList:remove()
---
--- Removes a target from a target list.
---
--- ---
---
---@param self Gtk.TargetList # a `GtkTargetList`
---@param target Gdk.Atom # the interned atom representing the target
---@return nil
function Gtk.TargetList:remove(target) end

--- # method Gtk.TargetList:unref()
---
--- Decreases the reference count of a `GtkTargetList` by one.
--- If the resulting reference count is zero, frees the list.
---
--- ---
---
---@param self Gtk.TargetList # a `GtkTargetList`
---@return nil
function Gtk.TargetList:unref() end

--- # function Gtk.TargetList.new()
---
--- Creates a new `GtkTargetList` from an array of `GtkTargetEntry`.
---
--- ---
---
---@param targets? unknown[] # Pointer to an array of `GtkTargetEntry`
---@param ntargets integer # number of entries in `targets`.
---@return Gtk.TargetList # the new `GtkTargetList`.
function Gtk.TargetList.new(targets, ntargets) end

--- # record Gtk.TargetPair
---
--- A `GtkTargetPair` is used to represent the same
--- information as a table of `GtkTargetEntry`, but in
--- an efficient form.
---
--- ---
---
---@class Gtk.TargetPair
---@field target Gdk.Atom # `GdkAtom` representation of the target type
---@field flags integer # `GtkTargetFlags` for DND
---@field info integer # an application-assigned integer ID which will get passed as a parameter to e.g the `GtkWidget`::selection-get signal. It allows the application to identify the target type without extensive string compares.
Gtk.TargetPair = {}

--- # class Gtk.TearoffMenuItem
---
--- A `GtkTearoffMenuItem` is a special `GtkMenuItem` which is used to
--- tear off and reattach its menu.
--- 
--- When its menu is shown normally, the `GtkTearoffMenuItem` is drawn as a
--- dotted line indicating that the menu can be torn off.  Activating it
--- causes its menu to be torn off and displayed in its own window
--- as a tearoff menu.
--- 
--- When its menu is shown as a tearoff menu, the `GtkTearoffMenuItem` is drawn
--- as a dotted line which has a left pointing arrow graphic indicating that
--- the tearoff menu can be reattached.  Activating it will erase the tearoff
--- menu window.
--- 
--- > `GtkTearoffMenuItem` is deprecated and should not be used in newly
--- > written code. Menus are not meant to be torn around.
---
--- ---
---
---@class Gtk.TearoffMenuItem : Gtk.MenuItem, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field menu_item Gtk.MenuItem
---@field priv Gtk.TearoffMenuItemPrivate
---@operator call: Gtk.TearoffMenuItem
Gtk.TearoffMenuItem = {}

--- # function Gtk.TearoffMenuItem.new()
---
--- Creates a new `GtkTearoffMenuItem`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkTearoffMenuItem`.
function Gtk.TearoffMenuItem.new() end

--- # record Gtk.TearoffMenuItemClass
---
---@class Gtk.TearoffMenuItemClass
---@field parent_class Gtk.MenuItemClass # The parent class.
Gtk.TearoffMenuItemClass = {}

--- # record Gtk.TearoffMenuItemPrivate
---
---@class Gtk.TearoffMenuItemPrivate
Gtk.TearoffMenuItemPrivate = {}

--- # record Gtk.TextAppearance
---
---@class Gtk.TextAppearance
---@field bg_color Gdk.Color # Background `GdkColor`.
---@field fg_color Gdk.Color # Foreground `GdkColor`.
---@field rise integer # Super/subscript rise, can be negative.
---@field underline integer # `PangoUnderline`
---@field strikethrough integer # Strikethrough style
---@field draw_bg integer # Whether to use background-related values; this is irrelevant for the values struct when in a tag, but is used for the composite values struct; it’s true if any of the tags being composited had background stuff set.
---@field inside_selection integer # This are only used when we are actually laying out and rendering a paragraph; not when a `GtkTextAppearance` is part of a `GtkTextAttributes`.
---@field is_text integer # This are only used when we are actually laying out and rendering a paragraph; not when a `GtkTextAppearance` is part of a `GtkTextAttributes`.
Gtk.TextAppearance = {}

--- # record Gtk.TextAttributes
---
--- Using `GtkTextAttributes` directly should rarely be necessary.
--- It’s primarily useful with `gtk_text_iter_get_attributes()`.
--- As with most GTK+ structs, the fields in this struct should only
--- be read, never modified directly.
---
--- ---
---
---@class Gtk.TextAttributes
---@field refcount integer
---@field appearance Gtk.TextAppearance # `GtkTextAppearance` for text.
---@field justification Gtk.Justification # `GtkJustification` for text.
---@field direction Gtk.TextDirection # `GtkTextDirection` for text.
---@field font Pango.FontDescription # `PangoFontDescription` for text.
---@field font_scale number # Font scale factor.
---@field left_margin integer # Width of the left margin in pixels.
---@field right_margin integer # Width of the right margin in pixels.
---@field indent integer # Amount to indent the paragraph, in pixels.
---@field pixels_above_lines integer # Pixels of blank space above paragraphs.
---@field pixels_below_lines integer # Pixels of blank space below paragraphs.
---@field pixels_inside_wrap integer # Pixels of blank space between wrapped lines in a paragraph.
---@field tabs Pango.TabArray # Custom `PangoTabArray` for this text.
---@field wrap_mode Gtk.WrapMode # `GtkWrapMode` for text.
---@field language Pango.Language # `PangoLanguage` for text.
---@field pg_bg_color Gdk.Color
---@field invisible integer # Hide the text.
---@field bg_full_height integer # Background is fit to full line height rather than baseline +/- ascent/descent (font height).
---@field editable integer # Can edit this text.
---@field no_fallback integer # Whether to disable font fallback.
---@field pg_bg_rgba Gdk.RGBA
---@field letter_spacing integer # Extra space to insert between graphemes, in Pango units
---@operator call: Gtk.TextAttributes
Gtk.TextAttributes = {}

--- # method Gtk.TextAttributes:copy()
---
--- Copies `src` and returns a new `GtkTextAttributes`.
---
--- ---
---
---@param self Gtk.TextAttributes # a `GtkTextAttributes` to be copied
---@return Gtk.TextAttributes # a copy of `src`, free with `gtk_text_attributes_unref()`
function Gtk.TextAttributes:copy() end

--- # method Gtk.TextAttributes:copy_values()
---
--- Copies the values from `src` to `dest` so that `dest` has
--- the same values as `src`. Frees existing values in `dest`.
---
--- ---
---
---@param self Gtk.TextAttributes # a `GtkTextAttributes`
---@param dest Gtk.TextAttributes # another `GtkTextAttributes`
---@return nil
function Gtk.TextAttributes:copy_values(dest) end

--- # method Gtk.TextAttributes:ref()
---
--- Increments the reference count on `values`.
---
--- ---
---
---@param self Gtk.TextAttributes # a `GtkTextAttributes`
---@return Gtk.TextAttributes # the `GtkTextAttributes` that were passed in
function Gtk.TextAttributes:ref() end

--- # method Gtk.TextAttributes:unref()
---
--- Decrements the reference count on `values`, freeing the structure
--- if the reference count reaches 0.
---
--- ---
---
---@param self Gtk.TextAttributes # a `GtkTextAttributes`
---@return nil
function Gtk.TextAttributes:unref() end

--- # function Gtk.TextAttributes.new()
---
--- Creates a `GtkTextAttributes`, which describes
--- a set of properties on some text.
---
--- ---
---
---@return Gtk.TextAttributes # a new `GtkTextAttributes`, free with `gtk_text_attributes_unref()`.
function Gtk.TextAttributes.new() end

--- # record Gtk.TextBTree
---
---@class Gtk.TextBTree
Gtk.TextBTree = {}

--- # class Gtk.TextBuffer
---
--- You may wish to begin by reading the
--- [text widget conceptual overview](TextWidget.html)
--- which gives an overview of all the objects and data
--- types related to the text widget and how they work together.
---
--- ---
---
---@class Gtk.TextBuffer : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gtk.TextBufferPrivate
---@operator call: Gtk.TextBuffer
Gtk.TextBuffer = {}

--- # method Gtk.TextBuffer:add_mark()
---
--- Adds the mark at position `where`. The mark must not be added to
--- another buffer, and if its name is not `nil` then there must not
--- be another mark in the buffer with the same name.
--- 
--- Emits the `GtkTextBuffer`::mark-set signal as notification of the mark's
--- initial placement.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param mark Gtk.TextMark # the mark to add
---@param where Gtk.TextIter # location to place mark
---@return nil
function Gtk.TextBuffer:add_mark(mark, where) end

--- # method Gtk.TextBuffer:add_selection_clipboard()
---
--- Adds `clipboard` to the list of clipboards in which the selection
--- contents of `buffer` are available. In most cases, `clipboard` will be
--- the `GtkClipboard` of type %GDK_SELECTION_PRIMARY for a view of `buffer`.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param clipboard Gtk.Clipboard # a `GtkClipboard`
---@return nil
function Gtk.TextBuffer:add_selection_clipboard(clipboard) end

--- # method Gtk.TextBuffer:apply_tag()
---
--- Emits the “apply-tag” signal on `buffer`. The default
--- handler for the signal applies `tag` to the given range.
--- `start` and `end` do not have to be in order.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param tag Gtk.TextTag # a `GtkTextTag`
---@param start Gtk.TextIter # one bound of range to be tagged
---@param end__ Gtk.TextIter # other bound of range to be tagged
---@return nil
function Gtk.TextBuffer:apply_tag(tag, start, end__) end

--- # method Gtk.TextBuffer:apply_tag_by_name()
---
--- Calls `gtk_text_tag_table_lookup()` on the buffer’s tag table to
--- get a `GtkTextTag`, then calls `gtk_text_buffer_apply_tag()`.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param name string # name of a named `GtkTextTag`
---@param start Gtk.TextIter # one bound of range to be tagged
---@param end__ Gtk.TextIter # other bound of range to be tagged
---@return nil
function Gtk.TextBuffer:apply_tag_by_name(name, start, end__) end

--- # method Gtk.TextBuffer:backspace()
---
--- Performs the appropriate action as if the user hit the delete
--- key with the cursor at the position specified by `iter`. In the
--- normal case a single character will be deleted, but when
--- combining accents are involved, more than one character can
--- be deleted, and when precomposed character and accent combinations
--- are involved, less than one character will be deleted.
--- 
--- Because the buffer is modified, all outstanding iterators become
--- invalid after calling this function; however, the `iter` will be
--- re-initialized to point to the location where text was deleted.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # a position in `buffer`
---@param interactive (boolean|nil) # whether the deletion is caused by user interaction
---@param default_editable (boolean|nil) # whether the buffer is editable by default
---@return (boolean|nil) # `true` if the buffer was modified
function Gtk.TextBuffer:backspace(iter, interactive, default_editable) end

--- # method Gtk.TextBuffer:begin_user_action()
---
--- Called to indicate that the buffer operations between here and a
--- call to `gtk_text_buffer_end_user_action()` are part of a single
--- user-visible operation. The operations between
--- `gtk_text_buffer_begin_user_action()` and
--- `gtk_text_buffer_end_user_action()` can then be grouped when creating
--- an undo stack. `GtkTextBuffer` maintains a count of calls to
--- `gtk_text_buffer_begin_user_action()` that have not been closed with
--- a call to `gtk_text_buffer_end_user_action()`, and emits the
--- “begin-user-action” and “end-user-action” signals only for the
--- outermost pair of calls. This allows you to build user actions
--- from other user actions.
--- 
--- The “interactive” buffer mutation functions, such as
--- `gtk_text_buffer_insert_interactive()`, automatically call begin/end
--- user action around the buffer operations they perform, so there's
--- no need to add extra calls if you user action consists solely of a
--- single call to one of those functions.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@return nil
function Gtk.TextBuffer:begin_user_action() end

--- # method Gtk.TextBuffer:copy_clipboard()
---
--- Copies the currently-selected text to a clipboard.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param clipboard Gtk.Clipboard # the `GtkClipboard` object to copy to
---@return nil
function Gtk.TextBuffer:copy_clipboard(clipboard) end

--- # method Gtk.TextBuffer:create_child_anchor()
---
--- This is a convenience function which simply creates a child anchor
--- with `gtk_text_child_anchor_new()` and inserts it into the buffer
--- with `gtk_text_buffer_insert_child_anchor()`. The new anchor is
--- owned by the buffer; no reference count is returned to
--- the caller of `gtk_text_buffer_create_child_anchor()`.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # location in the buffer
---@return Gtk.TextChildAnchor # the created child anchor
function Gtk.TextBuffer:create_child_anchor(iter) end

--- # method Gtk.TextBuffer:create_mark()
---
--- Creates a mark at position `where`. If `mark_name` is `nil`, the mark
--- is anonymous; otherwise, the mark can be retrieved by name using
--- `gtk_text_buffer_get_mark()`. If a mark has left gravity, and text is
--- inserted at the mark’s current location, the mark will be moved to
--- the left of the newly-inserted text. If the mark has right gravity
--- (`left_gravity` = `false`), the mark will end up on the right of
--- newly-inserted text. The standard left-to-right cursor is a mark
--- with right gravity (when you type, the cursor stays on the right
--- side of the text you’re typing).
--- 
--- The caller of this function does not own a
--- reference to the returned `GtkTextMark`, so you can ignore the
--- return value if you like. Marks are owned by the buffer and go
--- away when the buffer does.
--- 
--- Emits the `GtkTextBuffer`::mark-set signal as notification of the mark's
--- initial placement.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param mark_name? string # name for mark, or `nil`
---@param where Gtk.TextIter # location to place mark
---@param left_gravity (boolean|nil) # whether the mark has left gravity
---@return Gtk.TextMark # the new `GtkTextMark` object
function Gtk.TextBuffer:create_mark(mark_name, where, left_gravity) end

--- # method Gtk.TextBuffer:cut_clipboard()
---
--- Copies the currently-selected text to a clipboard, then deletes
--- said text if it’s editable.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param clipboard Gtk.Clipboard # the `GtkClipboard` object to cut to
---@param default_editable (boolean|nil) # default editability of the buffer
---@return nil
function Gtk.TextBuffer:cut_clipboard(clipboard, default_editable) end

--- # method Gtk.TextBuffer:delete()
---
--- Deletes text between `start` and `end`. The order of `start` and `end`
--- is not actually relevant; `gtk_text_buffer_delete()` will reorder
--- them. This function actually emits the “delete-range” signal, and
--- the default handler of that signal deletes the text. Because the
--- buffer is modified, all outstanding iterators become invalid after
--- calling this function; however, the `start` and `end` will be
--- re-initialized to point to the location where text was deleted.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param start Gtk.TextIter # a position in `buffer`
---@param end__ Gtk.TextIter # another position in `buffer`
---@return nil
function Gtk.TextBuffer:delete(start, end__) end

--- # method Gtk.TextBuffer:delete_interactive()
---
--- Deletes all editable text in the given range.
--- Calls `gtk_text_buffer_delete()` for each editable sub-range of
--- [`start`,`end`). `start` and `end` are revalidated to point to
--- the location of the last deleted range, or left untouched if
--- no text was deleted.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param start_iter Gtk.TextIter # start of range to delete
---@param end_iter Gtk.TextIter # end of range
---@param default_editable (boolean|nil) # whether the buffer is editable by default
---@return (boolean|nil) # whether some text was actually deleted
function Gtk.TextBuffer:delete_interactive(start_iter, end_iter, default_editable) end

--- # method Gtk.TextBuffer:delete_mark()
---
--- Deletes `mark`, so that it’s no longer located anywhere in the
--- buffer. Removes the reference the buffer holds to the mark, so if
--- you haven’t called `g_object_ref()` on the mark, it will be freed. Even
--- if the mark isn’t freed, most operations on `mark` become
--- invalid, until it gets added to a buffer again with
--- `gtk_text_buffer_add_mark()`. Use `gtk_text_mark_get_deleted()` to
--- find out if a mark has been removed from its buffer.
--- The `GtkTextBuffer`::mark-deleted signal will be emitted as notification after
--- the mark is deleted.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param mark Gtk.TextMark # a `GtkTextMark` in `buffer`
---@return nil
function Gtk.TextBuffer:delete_mark(mark) end

--- # method Gtk.TextBuffer:delete_mark_by_name()
---
--- Deletes the mark named `name`; the mark must exist. See
--- `gtk_text_buffer_delete_mark()` for details.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param name string # name of a mark in `buffer`
---@return nil
function Gtk.TextBuffer:delete_mark_by_name(name) end

--- # method Gtk.TextBuffer:delete_selection()
---
--- Deletes the range between the “insert” and “selection_bound” marks,
--- that is, the currently-selected text. If `interactive` is `true`,
--- the editability of the selection will be considered (users can’t delete
--- uneditable text).
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param interactive (boolean|nil) # whether the deletion is caused by user interaction
---@param default_editable (boolean|nil) # whether the buffer is editable by default
---@return (boolean|nil) # whether there was a non-empty selection to delete
function Gtk.TextBuffer:delete_selection(interactive, default_editable) end

--- # method Gtk.TextBuffer:deserialize()
---
--- This function deserializes rich text in format `format` and inserts
--- it at `iter`.
--- 
--- `formats` to be used must be registered using
--- `gtk_text_buffer_register_deserialize_format()` or
--- `gtk_text_buffer_register_deserialize_tagset()` beforehand.
---
--- ---
---
---@param self Gtk.TextBuffer # the `GtkTextBuffer` `format` is registered with
---@param content_buffer Gtk.TextBuffer # the `GtkTextBuffer` to deserialize into
---@param format Gdk.Atom # the rich text format to use for deserializing
---@param iter Gtk.TextIter # insertion point for the deserialized text
---@param data unknown[] # data to deserialize
---@param length integer # length of `data`
---@return (boolean|nil) # `true` on success, `false` otherwise.
function Gtk.TextBuffer:deserialize(content_buffer, format, iter, data, length) end

--- # method Gtk.TextBuffer:deserialize_get_can_create_tags()
---
--- This functions returns the value set with
--- `gtk_text_buffer_deserialize_set_can_create_tags()`
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param format Gdk.Atom # a `GdkAtom` representing a registered rich text format
---@return (boolean|nil) # whether deserializing this format may create tags
function Gtk.TextBuffer:deserialize_get_can_create_tags(format) end

--- # method Gtk.TextBuffer:deserialize_set_can_create_tags()
---
--- Use this function to allow a rich text deserialization function to
--- create new tags in the receiving buffer. Note that using this
--- function is almost always a bad idea, because the rich text
--- functions you register should know how to map the rich text format
--- they handler to your text buffers set of tags.
--- 
--- The ability of creating new (arbitrary!) tags in the receiving buffer
--- is meant for special rich text formats like the internal one that
--- is registered using `gtk_text_buffer_register_deserialize_tagset()`,
--- because that format is essentially a dump of the internal structure
--- of the source buffer, including its tag names.
--- 
--- You should allow creation of tags only if you know what you are
--- doing, e.g. if you defined a tagset name for your application
--- suite’s text buffers and you know that it’s fine to receive new
--- tags from these buffers, because you know that your application can
--- handle the newly created tags.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param format Gdk.Atom # a `GdkAtom` representing a registered rich text format
---@param can_create_tags (boolean|nil) # whether deserializing this format may create tags
---@return nil
function Gtk.TextBuffer:deserialize_set_can_create_tags(format, can_create_tags) end

--- # method Gtk.TextBuffer:end_user_action()
---
--- Should be paired with a call to `gtk_text_buffer_begin_user_action()`.
--- See that function for a full explanation.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@return nil
function Gtk.TextBuffer:end_user_action() end

--- # method Gtk.TextBuffer:get_bounds()
---
--- Retrieves the first and last iterators in the buffer, i.e. the
--- entire buffer lies within the range [`start`,`end`).
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param start Gtk.TextIter # iterator to initialize with first position in the buffer
---@param end__ Gtk.TextIter # iterator to initialize with the end iterator
---@return nil
function Gtk.TextBuffer:get_bounds(start, end__) end

--- # method Gtk.TextBuffer:get_char_count()
---
--- Gets the number of characters in the buffer; note that characters
--- and bytes are not the same, you can’t e.g. expect the contents of
--- the buffer in string form to be this many bytes long. The character
--- count is cached, so this function is very fast.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@return integer # number of characters in the buffer
function Gtk.TextBuffer:get_char_count() end

--- # method Gtk.TextBuffer:get_copy_target_list()
---
--- This function returns the list of targets this text buffer can
--- provide for copying and as DND source. The targets in the list are
--- added with `info` values from the `GtkTextBufferTargetInfo` enum,
--- using `gtk_target_list_add_rich_text_targets()` and
--- `gtk_target_list_add_text_targets()`.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@return Gtk.TargetList # the `GtkTargetList`
function Gtk.TextBuffer:get_copy_target_list() end

--- # method Gtk.TextBuffer:get_deserialize_formats()
---
--- This function returns the rich text deserialize formats registered
--- with `buffer` using `gtk_text_buffer_register_deserialize_format()` or
--- `gtk_text_buffer_register_deserialize_tagset()`
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param n_formats integer # return location for the number of formats
---@return unknown[] # an array of `GdkAtoms` representing the registered formats.
function Gtk.TextBuffer:get_deserialize_formats(n_formats) end

--- # method Gtk.TextBuffer:get_end_iter()
---
--- Initializes `iter` with the “end iterator,” one past the last valid
--- character in the text buffer. If dereferenced with
--- `gtk_text_iter_get_char()`, the end iterator has a character value of 0.
--- The entire buffer lies in the range from the first position in
--- the buffer (call `gtk_text_buffer_get_start_iter()` to get
--- character position 0) to the end iterator.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # iterator to initialize
---@return nil
function Gtk.TextBuffer:get_end_iter(iter) end

--- # method Gtk.TextBuffer:get_has_selection()
---
--- Indicates whether the buffer has some text currently selected.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@return (boolean|nil) # `true` if the there is text selected
function Gtk.TextBuffer:get_has_selection() end

--- # method Gtk.TextBuffer:get_insert()
---
--- Returns the mark that represents the cursor (insertion point).
--- Equivalent to calling `gtk_text_buffer_get_mark()` to get the mark
--- named “insert”, but very slightly more efficient, and involves less
--- typing.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@return Gtk.TextMark # insertion point mark
function Gtk.TextBuffer:get_insert() end

--- # method Gtk.TextBuffer:get_iter_at_child_anchor()
---
--- Obtains the location of `anchor` within `buffer`.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # an iterator to be initialized
---@param anchor Gtk.TextChildAnchor # a child anchor that appears in `buffer`
---@return nil
function Gtk.TextBuffer:get_iter_at_child_anchor(iter, anchor) end

--- # method Gtk.TextBuffer:get_iter_at_line()
---
--- Initializes `iter` to the start of the given line. If `line_number` is greater
--- than the number of lines in the `buffer`, the end iterator is returned.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # iterator to initialize
---@param line_number integer # line number counting from 0
---@return nil
function Gtk.TextBuffer:get_iter_at_line(iter, line_number) end

--- # method Gtk.TextBuffer:get_iter_at_line_index()
---
--- Obtains an iterator pointing to `byte_index` within the given line.
--- `byte_index` must be the start of a UTF-8 character. Note bytes, not
--- characters; UTF-8 may encode one character as multiple bytes.
--- 
--- Before the 3.20 version, it was not allowed to pass an invalid location.
--- 
--- Since the 3.20 version, if `line_number` is greater than the number of lines
--- in the `buffer`, the end iterator is returned. And if `byte_index` is off the
--- end of the line, the iterator at the end of the line is returned.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # iterator to initialize
---@param line_number integer # line number counting from 0
---@param byte_index integer # byte index from start of line
---@return nil
function Gtk.TextBuffer:get_iter_at_line_index(iter, line_number, byte_index) end

--- # method Gtk.TextBuffer:get_iter_at_line_offset()
---
--- Obtains an iterator pointing to `char_offset` within the given line. Note
--- characters, not bytes; UTF-8 may encode one character as multiple bytes.
--- 
--- Before the 3.20 version, it was not allowed to pass an invalid location.
--- 
--- Since the 3.20 version, if `line_number` is greater than the number of lines
--- in the `buffer`, the end iterator is returned. And if `char_offset` is off the
--- end of the line, the iterator at the end of the line is returned.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # iterator to initialize
---@param line_number integer # line number counting from 0
---@param char_offset integer # char offset from start of line
---@return nil
function Gtk.TextBuffer:get_iter_at_line_offset(iter, line_number, char_offset) end

--- # method Gtk.TextBuffer:get_iter_at_mark()
---
--- Initializes `iter` with the current position of `mark`.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # iterator to initialize
---@param mark Gtk.TextMark # a `GtkTextMark` in `buffer`
---@return nil
function Gtk.TextBuffer:get_iter_at_mark(iter, mark) end

--- # method Gtk.TextBuffer:get_iter_at_offset()
---
--- Initializes `iter` to a position `char_offset` chars from the start
--- of the entire buffer. If `char_offset` is -1 or greater than the number
--- of characters in the buffer, `iter` is initialized to the end iterator,
--- the iterator one past the last valid character in the buffer.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # iterator to initialize
---@param char_offset integer # char offset from start of buffer, counting from 0, or -1
---@return nil
function Gtk.TextBuffer:get_iter_at_offset(iter, char_offset) end

--- # method Gtk.TextBuffer:get_line_count()
---
--- Obtains the number of lines in the buffer. This value is cached, so
--- the function is very fast.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@return integer # number of lines in the buffer
function Gtk.TextBuffer:get_line_count() end

--- # method Gtk.TextBuffer:get_mark()
---
--- Returns the mark named `name` in buffer `buffer`, or `nil` if no such
--- mark exists in the buffer.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param name string # a mark name
---@return Gtk.TextMark # a `GtkTextMark`, or `nil`
function Gtk.TextBuffer:get_mark(name) end

--- # method Gtk.TextBuffer:get_modified()
---
--- Indicates whether the buffer has been modified since the last call
--- to `gtk_text_buffer_set_modified()` set the modification flag to
--- `false`. Used for example to enable a “save” function in a text
--- editor.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@return (boolean|nil) # `true` if the buffer has been modified
function Gtk.TextBuffer:get_modified() end

--- # method Gtk.TextBuffer:get_paste_target_list()
---
--- This function returns the list of targets this text buffer supports
--- for pasting and as DND destination. The targets in the list are
--- added with `info` values from the `GtkTextBufferTargetInfo` enum,
--- using `gtk_target_list_add_rich_text_targets()` and
--- `gtk_target_list_add_text_targets()`.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@return Gtk.TargetList # the `GtkTargetList`
function Gtk.TextBuffer:get_paste_target_list() end

--- # method Gtk.TextBuffer:get_selection_bound()
---
--- Returns the mark that represents the selection bound.  Equivalent
--- to calling `gtk_text_buffer_get_mark()` to get the mark named
--- “selection_bound”, but very slightly more efficient, and involves
--- less typing.
--- 
--- The currently-selected text in `buffer` is the region between the
--- “selection_bound” and “insert” marks. If “selection_bound” and
--- “insert” are in the same place, then there is no current selection.
--- `gtk_text_buffer_get_selection_bounds()` is another convenient function
--- for handling the selection, if you just want to know whether there’s a
--- selection and what its bounds are.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@return Gtk.TextMark # selection bound mark
function Gtk.TextBuffer:get_selection_bound() end

--- # method Gtk.TextBuffer:get_selection_bounds()
---
--- Returns `true` if some text is selected; places the bounds
--- of the selection in `start` and `end` (if the selection has length 0,
--- then `start` and `end` are filled in with the same value).
--- `start` and `end` will be in ascending order. If `start` and `end` are
--- NULL, then they are not filled in, but the return value still indicates
--- whether text is selected.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer` a `GtkTextBuffer`
---@param start Gtk.TextIter # iterator to initialize with selection start
---@param end__ Gtk.TextIter # iterator to initialize with selection end
---@return (boolean|nil) # whether the selection has nonzero length
function Gtk.TextBuffer:get_selection_bounds(start, end__) end

--- # method Gtk.TextBuffer:get_serialize_formats()
---
--- This function returns the rich text serialize formats registered
--- with `buffer` using `gtk_text_buffer_register_serialize_format()` or
--- `gtk_text_buffer_register_serialize_tagset()`
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param n_formats integer # return location for the number of formats
---@return unknown[] # an array of `GdkAtoms` representing the registered formats.
function Gtk.TextBuffer:get_serialize_formats(n_formats) end

--- # method Gtk.TextBuffer:get_slice()
---
--- Returns the text in the range [`start`,`end`). Excludes undisplayed
--- text (text marked with tags that set the invisibility attribute) if
--- `include_hidden_chars` is `false`. The returned string includes a
--- 0xFFFC character whenever the buffer contains
--- embedded images, so byte and character indexes into
--- the returned string do correspond to byte
--- and character indexes into the buffer. Contrast with
--- `gtk_text_buffer_get_text()`. Note that 0xFFFC can occur in normal
--- text as well, so it is not a reliable indicator that a pixbuf or
--- widget is in the buffer.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param start Gtk.TextIter # start of a range
---@param end__ Gtk.TextIter # end of a range
---@param include_hidden_chars (boolean|nil) # whether to include invisible text
---@return string # an allocated UTF-8 string
function Gtk.TextBuffer:get_slice(start, end__, include_hidden_chars) end

--- # method Gtk.TextBuffer:get_start_iter()
---
--- Initialized `iter` with the first position in the text buffer. This
--- is the same as using `gtk_text_buffer_get_iter_at_offset()` to get
--- the iter at character offset 0.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # iterator to initialize
---@return nil
function Gtk.TextBuffer:get_start_iter(iter) end

--- # method Gtk.TextBuffer:get_tag_table()
---
--- Get the `GtkTextTagTable` associated with this buffer.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@return Gtk.TextTagTable # the buffer’s tag table
function Gtk.TextBuffer:get_tag_table() end

--- # method Gtk.TextBuffer:get_text()
---
--- Returns the text in the range [`start`,`end`). Excludes undisplayed
--- text (text marked with tags that set the invisibility attribute) if
--- `include_hidden_chars` is `false`. Does not include characters
--- representing embedded images, so byte and character indexes into
--- the returned string do not correspond to byte
--- and character indexes into the buffer. Contrast with
--- `gtk_text_buffer_get_slice()`.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param start Gtk.TextIter # start of a range
---@param end__ Gtk.TextIter # end of a range
---@param include_hidden_chars (boolean|nil) # whether to include invisible text
---@return string # an allocated UTF-8 string
function Gtk.TextBuffer:get_text(start, end__, include_hidden_chars) end

--- # method Gtk.TextBuffer:insert()
---
--- Inserts `len` bytes of `text` at position `iter`.  If `len` is -1,
--- `text` must be nul-terminated and will be inserted in its
--- entirety. Emits the “insert-text” signal; insertion actually occurs
--- in the default handler for the signal. `iter` is invalidated when
--- insertion occurs (because the buffer contents change), but the
--- default signal handler revalidates it to point to the end of the
--- inserted text.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # a position in the buffer
---@param text string # text in UTF-8 format
---@param len integer # length of text in bytes, or -1
---@return nil
function Gtk.TextBuffer:insert(iter, text, len) end

--- # method Gtk.TextBuffer:insert_at_cursor()
---
--- Simply calls `gtk_text_buffer_insert()`, using the current
--- cursor position as the insertion point.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param text string # text in UTF-8 format
---@param len integer # length of text, in bytes
---@return nil
function Gtk.TextBuffer:insert_at_cursor(text, len) end

--- # method Gtk.TextBuffer:insert_child_anchor()
---
--- Inserts a child widget anchor into the text buffer at `iter`. The
--- anchor will be counted as one character in character counts, and
--- when obtaining the buffer contents as a string, will be represented
--- by the Unicode “object replacement character” 0xFFFC. Note that the
--- “slice” variants for obtaining portions of the buffer as a string
--- include this character for child anchors, but the “text” variants do
--- not. E.g. see `gtk_text_buffer_get_slice()` and
--- `gtk_text_buffer_get_text()`. Consider
--- `gtk_text_buffer_create_child_anchor()` as a more convenient
--- alternative to this function. The buffer will add a reference to
--- the anchor, so you can unref it after insertion.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # location to insert the anchor
---@param anchor Gtk.TextChildAnchor # a `GtkTextChildAnchor`
---@return nil
function Gtk.TextBuffer:insert_child_anchor(iter, anchor) end

--- # method Gtk.TextBuffer:insert_interactive()
---
--- Like `gtk_text_buffer_insert()`, but the insertion will not occur if
--- `iter` is at a non-editable location in the buffer. Usually you
--- want to prevent insertions at ineditable locations if the insertion
--- results from a user action (is interactive).
--- 
--- `default_editable` indicates the editability of text that doesn't
--- have a tag affecting editability applied to it. Typically the
--- result of `gtk_text_view_get_editable()` is appropriate here.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # a position in `buffer`
---@param text string # some UTF-8 text
---@param len integer # length of text in bytes, or -1
---@param default_editable (boolean|nil) # default editability of buffer
---@return (boolean|nil) # whether text was actually inserted
function Gtk.TextBuffer:insert_interactive(iter, text, len, default_editable) end

--- # method Gtk.TextBuffer:insert_interactive_at_cursor()
---
--- Calls `gtk_text_buffer_insert_interactive()` at the cursor
--- position.
--- 
--- `default_editable` indicates the editability of text that doesn't
--- have a tag affecting editability applied to it. Typically the
--- result of `gtk_text_view_get_editable()` is appropriate here.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param text string # text in UTF-8 format
---@param len integer # length of text in bytes, or -1
---@param default_editable (boolean|nil) # default editability of buffer
---@return (boolean|nil) # whether text was actually inserted
function Gtk.TextBuffer:insert_interactive_at_cursor(text, len, default_editable) end

--- # method Gtk.TextBuffer:insert_markup()
---
--- Inserts the text in `markup` at position `iter`. `markup` will be inserted
--- in its entirety and must be nul-terminated and valid UTF-8. Emits the
--- `GtkTextBuffer`::insert-text signal, possibly multiple times; insertion
--- actually occurs in the default handler for the signal. `iter` will point
--- to the end of the inserted text on return.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # location to insert the markup
---@param markup string # a nul-terminated UTF-8 string containing [Pango markup][PangoMarkupFormat]
---@param len integer # length of `markup` in bytes, or -1
---@return nil
function Gtk.TextBuffer:insert_markup(iter, markup, len) end

--- # method Gtk.TextBuffer:insert_pixbuf()
---
--- Inserts an image into the text buffer at `iter`. The image will be
--- counted as one character in character counts, and when obtaining
--- the buffer contents as a string, will be represented by the Unicode
--- “object replacement character” 0xFFFC. Note that the “slice”
--- variants for obtaining portions of the buffer as a string include
--- this character for pixbufs, but the “text” variants do
--- not. e.g. see `gtk_text_buffer_get_slice()` and
--- `gtk_text_buffer_get_text()`.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # location to insert the pixbuf
---@param pixbuf GdkPixbuf.Pixbuf # a `GdkPixbuf`
---@return nil
function Gtk.TextBuffer:insert_pixbuf(iter, pixbuf) end

--- # method Gtk.TextBuffer:insert_range()
---
--- Copies text, tags, and pixbufs between `start` and `end` (the order
--- of `start` and `end` doesn’t matter) and inserts the copy at `iter`.
--- Used instead of simply getting/inserting text because it preserves
--- images and tags. If `start` and `end` are in a different buffer from
--- `buffer`, the two buffers must share the same tag table.
--- 
--- Implemented via emissions of the insert_text and apply_tag signals,
--- so expect those.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # a position in `buffer`
---@param start Gtk.TextIter # a position in a `GtkTextBuffer`
---@param end__ Gtk.TextIter # another position in the same buffer as `start`
---@return nil
function Gtk.TextBuffer:insert_range(iter, start, end__) end

--- # method Gtk.TextBuffer:insert_range_interactive()
---
--- Same as `gtk_text_buffer_insert_range()`, but does nothing if the
--- insertion point isn’t editable. The `default_editable` parameter
--- indicates whether the text is editable at `iter` if no tags
--- enclosing `iter` affect editability. Typically the result of
--- `gtk_text_view_get_editable()` is appropriate here.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param iter Gtk.TextIter # a position in `buffer`
---@param start Gtk.TextIter # a position in a `GtkTextBuffer`
---@param end__ Gtk.TextIter # another position in the same buffer as `start`
---@param default_editable (boolean|nil) # default editability of the buffer
---@return (boolean|nil) # whether an insertion was possible at `iter`
function Gtk.TextBuffer:insert_range_interactive(iter, start, end__, default_editable) end

--- # method Gtk.TextBuffer:move_mark()
---
--- Moves `mark` to the new location `where`. Emits the `GtkTextBuffer`::mark-set
--- signal as notification of the move.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param mark Gtk.TextMark # a `GtkTextMark`
---@param where Gtk.TextIter # new location for `mark` in `buffer`
---@return nil
function Gtk.TextBuffer:move_mark(mark, where) end

--- # method Gtk.TextBuffer:move_mark_by_name()
---
--- Moves the mark named `name` (which must exist) to location `where`.
--- See `gtk_text_buffer_move_mark()` for details.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param name string # name of a mark
---@param where Gtk.TextIter # new location for mark
---@return nil
function Gtk.TextBuffer:move_mark_by_name(name, where) end

--- # method Gtk.TextBuffer:paste_clipboard()
---
--- Pastes the contents of a clipboard. If `override_location` is `nil`, the
--- pasted text will be inserted at the cursor position, or the buffer selection
--- will be replaced if the selection is non-empty.
--- 
--- Note: pasting is asynchronous, that is, we’ll ask for the paste data and
--- return, and at some point later after the main loop runs, the paste data will
--- be inserted.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param clipboard Gtk.Clipboard # the `GtkClipboard` to paste from
---@param override_location? Gtk.TextIter # location to insert pasted text, or `nil`
---@param default_editable (boolean|nil) # whether the buffer is editable by default
---@return nil
function Gtk.TextBuffer:paste_clipboard(clipboard, override_location, default_editable) end

--- # method Gtk.TextBuffer:place_cursor()
---
--- This function moves the “insert” and “selection_bound” marks
--- simultaneously.  If you move them to the same place in two steps
--- with `gtk_text_buffer_move_mark()`, you will temporarily select a
--- region in between their old and new locations, which can be pretty
--- inefficient since the temporarily-selected region will force stuff
--- to be recalculated. This function moves them as a unit, which can
--- be optimized.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param where Gtk.TextIter # where to put the cursor
---@return nil
function Gtk.TextBuffer:place_cursor(where) end

--- # method Gtk.TextBuffer:register_deserialize_format()
---
--- This function registers a rich text deserialization `function` along with
--- its `mime_type` with the passed `buffer`.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param mime_type string # the format’s mime-type
---@param function__ Gtk.TextBufferDeserializeFunc # the deserialize function to register
---@param user_data? userdata # `function`’s user_data
---@param user_data_destroy GLib.DestroyNotify # a function to call when `user_data` is no longer needed
---@return Gdk.Atom # the `GdkAtom` that corresponds to the newly registered format’s mime-type.
function Gtk.TextBuffer:register_deserialize_format(mime_type, function__, user_data, user_data_destroy) end

--- # method Gtk.TextBuffer:register_deserialize_tagset()
---
--- This function registers GTK+’s internal rich text serialization
--- format with the passed `buffer`. See
--- `gtk_text_buffer_register_serialize_tagset()` for details.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param tagset_name? string # an optional tagset name, on `nil`
---@return Gdk.Atom # the `GdkAtom` that corresponds to the newly registered format’s mime-type.
function Gtk.TextBuffer:register_deserialize_tagset(tagset_name) end

--- # method Gtk.TextBuffer:register_serialize_format()
---
--- This function registers a rich text serialization `function` along with
--- its `mime_type` with the passed `buffer`.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param mime_type string # the format’s mime-type
---@param function__ Gtk.TextBufferSerializeFunc # the serialize function to register
---@param user_data? userdata # `function`’s user_data
---@param user_data_destroy GLib.DestroyNotify # a function to call when `user_data` is no longer needed
---@return Gdk.Atom # the `GdkAtom` that corresponds to the newly registered format’s mime-type.
function Gtk.TextBuffer:register_serialize_format(mime_type, function__, user_data, user_data_destroy) end

--- # method Gtk.TextBuffer:register_serialize_tagset()
---
--- This function registers GTK+’s internal rich text serialization
--- format with the passed `buffer`. The internal format does not comply
--- to any standard rich text format and only works between `GtkTextBuffer`
--- instances. It is capable of serializing all of a text buffer’s tags
--- and embedded pixbufs.
--- 
--- This function is just a wrapper around
--- `gtk_text_buffer_register_serialize_format()`. The mime type used
--- for registering is “application/x-gtk-text-buffer-rich-text”, or
--- “application/x-gtk-text-buffer-rich-text;format=`tagset_name`” if a
--- `tagset_name` was passed.
--- 
--- The `tagset_name` can be used to restrict the transfer of rich text
--- to buffers with compatible sets of tags, in order to avoid unknown
--- tags from being pasted. It is probably the common case to pass an
--- identifier != `nil` here, since the `nil` tagset requires the
--- receiving buffer to deal with with pasting of arbitrary tags.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param tagset_name? string # an optional tagset name, on `nil`
---@return Gdk.Atom # the `GdkAtom` that corresponds to the newly registered format’s mime-type.
function Gtk.TextBuffer:register_serialize_tagset(tagset_name) end

--- # method Gtk.TextBuffer:remove_all_tags()
---
--- Removes all tags in the range between `start` and `end`.  Be careful
--- with this function; it could remove tags added in code unrelated to
--- the code you’re currently writing. That is, using this function is
--- probably a bad idea if you have two or more unrelated code sections
--- that add tags.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param start Gtk.TextIter # one bound of range to be untagged
---@param end__ Gtk.TextIter # other bound of range to be untagged
---@return nil
function Gtk.TextBuffer:remove_all_tags(start, end__) end

--- # method Gtk.TextBuffer:remove_selection_clipboard()
---
--- Removes a `GtkClipboard` added with
--- `gtk_text_buffer_add_selection_clipboard()`.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param clipboard Gtk.Clipboard # a `GtkClipboard` added to `buffer` by `gtk_text_buffer_add_selection_clipboard()`
---@return nil
function Gtk.TextBuffer:remove_selection_clipboard(clipboard) end

--- # method Gtk.TextBuffer:remove_tag()
---
--- Emits the “remove-tag” signal. The default handler for the signal
--- removes all occurrences of `tag` from the given range. `start` and
--- `end` don’t have to be in order.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param tag Gtk.TextTag # a `GtkTextTag`
---@param start Gtk.TextIter # one bound of range to be untagged
---@param end__ Gtk.TextIter # other bound of range to be untagged
---@return nil
function Gtk.TextBuffer:remove_tag(tag, start, end__) end

--- # method Gtk.TextBuffer:remove_tag_by_name()
---
--- Calls `gtk_text_tag_table_lookup()` on the buffer’s tag table to
--- get a `GtkTextTag`, then calls `gtk_text_buffer_remove_tag()`.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param name string # name of a `GtkTextTag`
---@param start Gtk.TextIter # one bound of range to be untagged
---@param end__ Gtk.TextIter # other bound of range to be untagged
---@return nil
function Gtk.TextBuffer:remove_tag_by_name(name, start, end__) end

--- # method Gtk.TextBuffer:select_range()
---
--- This function moves the “insert” and “selection_bound” marks
--- simultaneously.  If you move them in two steps
--- with `gtk_text_buffer_move_mark()`, you will temporarily select a
--- region in between their old and new locations, which can be pretty
--- inefficient since the temporarily-selected region will force stuff
--- to be recalculated. This function moves them as a unit, which can
--- be optimized.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param ins Gtk.TextIter # where to put the “insert” mark
---@param bound Gtk.TextIter # where to put the “selection_bound” mark
---@return nil
function Gtk.TextBuffer:select_range(ins, bound) end

--- # method Gtk.TextBuffer:serialize()
---
--- This function serializes the portion of text between `start`
--- and `end` in the rich text format represented by `format`.
--- 
--- `formats` to be used must be registered using
--- `gtk_text_buffer_register_serialize_format()` or
--- `gtk_text_buffer_register_serialize_tagset()` beforehand.
---
--- ---
---
---@param self Gtk.TextBuffer # the `GtkTextBuffer` `format` is registered with
---@param content_buffer Gtk.TextBuffer # the `GtkTextBuffer` to serialize
---@param format Gdk.Atom # the rich text format to use for serializing
---@param start Gtk.TextIter # start of block of text to serialize
---@param end__ Gtk.TextIter # end of block of test to serialize
---@param length integer # return location for the length of the serialized data
---@return unknown[] # the serialized data, encoded as `format`
function Gtk.TextBuffer:serialize(content_buffer, format, start, end__, length) end

--- # method Gtk.TextBuffer:set_modified()
---
--- Used to keep track of whether the buffer has been modified since the
--- last time it was saved. Whenever the buffer is saved to disk, call
--- gtk_text_buffer_set_modified (`buffer`, FALSE). When the buffer is modified,
--- it will automatically toggled on the modified bit again. When the modified
--- bit flips, the buffer emits the `GtkTextBuffer`::modified-changed signal.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param setting (boolean|nil) # modification flag setting
---@return nil
function Gtk.TextBuffer:set_modified(setting) end

--- # method Gtk.TextBuffer:set_text()
---
--- Deletes current contents of `buffer`, and inserts `text` instead. If
--- `len` is -1, `text` must be nul-terminated. `text` must be valid UTF-8.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param text string # UTF-8 text to insert
---@param len integer # length of `text` in bytes
---@return nil
function Gtk.TextBuffer:set_text(text, len) end

--- # method Gtk.TextBuffer:unregister_deserialize_format()
---
--- This function unregisters a rich text format that was previously
--- registered using `gtk_text_buffer_register_deserialize_format()` or
--- `gtk_text_buffer_register_deserialize_tagset()`.
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param format Gdk.Atom # a `GdkAtom` representing a registered rich text format.
---@return nil
function Gtk.TextBuffer:unregister_deserialize_format(format) end

--- # method Gtk.TextBuffer:unregister_serialize_format()
---
--- This function unregisters a rich text format that was previously
--- registered using `gtk_text_buffer_register_serialize_format()` or
--- `gtk_text_buffer_register_serialize_tagset()`
---
--- ---
---
---@param self Gtk.TextBuffer # a `GtkTextBuffer`
---@param format Gdk.Atom # a `GdkAtom` representing a registered rich text format.
---@return nil
function Gtk.TextBuffer:unregister_serialize_format(format) end

--- # function Gtk.TextBuffer.new()
---
--- Creates a new text buffer.
---
--- ---
---
---@param table? Gtk.TextTagTable # a tag table, or `nil` to create a new one
---@return Gtk.TextBuffer # a new text buffer
function Gtk.TextBuffer.new(table) end

--- # record Gtk.TextBufferClass
---
---@class Gtk.TextBufferClass
---@field parent_class GObject.ObjectClass # The object class structure needs to be the first.
---@field insert_text fun(buffer: Gtk.TextBuffer, pos: Gtk.TextIter, new_text: string, new_text_length: integer): nil
---@field insert_pixbuf fun(buffer: Gtk.TextBuffer, iter: Gtk.TextIter, pixbuf: GdkPixbuf.Pixbuf): nil
---@field insert_child_anchor fun(buffer: Gtk.TextBuffer, iter: Gtk.TextIter, anchor: Gtk.TextChildAnchor): nil
---@field delete_range fun(buffer: Gtk.TextBuffer, start: Gtk.TextIter, end: Gtk.TextIter): nil
---@field changed fun(buffer: Gtk.TextBuffer): nil
---@field modified_changed fun(buffer: Gtk.TextBuffer): nil
---@field mark_set fun(buffer: Gtk.TextBuffer, location: Gtk.TextIter, mark: Gtk.TextMark): nil
---@field mark_deleted fun(buffer: Gtk.TextBuffer, mark: Gtk.TextMark): nil
---@field apply_tag fun(buffer: Gtk.TextBuffer, tag: Gtk.TextTag, start: Gtk.TextIter, end: Gtk.TextIter): nil
---@field remove_tag fun(buffer: Gtk.TextBuffer, tag: Gtk.TextTag, start: Gtk.TextIter, end: Gtk.TextIter): nil
---@field begin_user_action fun(buffer: Gtk.TextBuffer): nil
---@field end_user_action fun(buffer: Gtk.TextBuffer): nil
---@field paste_done fun(buffer: Gtk.TextBuffer, clipboard: Gtk.Clipboard): nil
Gtk.TextBufferClass = {}

---@alias Gtk.TextBufferDeserializeFunc fun(register_buffer: Gtk.TextBuffer, content_buffer: Gtk.TextBuffer, iter: Gtk.TextIter, data: unknown[], length: integer, create_tags: (boolean|nil), user_data: userdata): (boolean|nil)

--- # record Gtk.TextBufferPrivate
---
---@class Gtk.TextBufferPrivate
Gtk.TextBufferPrivate = {}

---@alias Gtk.TextBufferSerializeFunc fun(register_buffer: Gtk.TextBuffer, content_buffer: Gtk.TextBuffer, start: Gtk.TextIter, end: Gtk.TextIter, length: integer, user_data: userdata): unknown[]

---@enum Gtk.TextBufferTargetInfo
Gtk.TextBufferTargetInfo = {}

--- # class Gtk.TextCellAccessible
---
---@class Gtk.TextCellAccessible : Gtk.RendererCellAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.TableCell, Gtk.Atk.Text
---@field parent Gtk.RendererCellAccessible
---@field priv Gtk.TextCellAccessiblePrivate
Gtk.TextCellAccessible = {}

--- # record Gtk.TextCellAccessibleClass
---
---@class Gtk.TextCellAccessibleClass
---@field parent_class Gtk.RendererCellAccessibleClass
Gtk.TextCellAccessibleClass = {}

--- # record Gtk.TextCellAccessiblePrivate
---
---@class Gtk.TextCellAccessiblePrivate
Gtk.TextCellAccessiblePrivate = {}

---@alias Gtk.TextCharPredicate fun(ch: integer, user_data: userdata): (boolean|nil)

--- # class Gtk.TextChildAnchor
---
--- A `GtkTextChildAnchor` is a spot in the buffer where child widgets can
--- be “anchored” (inserted inline, as if they were characters). The anchor
--- can have multiple widgets anchored, to allow for multiple views.
---
--- ---
---
---@class Gtk.TextChildAnchor : GObject.Object
---@field parent_instance GObject.Object
---@field segment userdata
---@operator call: Gtk.TextChildAnchor
Gtk.TextChildAnchor = {}

--- # method Gtk.TextChildAnchor:get_deleted()
---
--- Determines whether a child anchor has been deleted from
--- the buffer. Keep in mind that the child anchor will be
--- unreferenced when removed from the buffer, so you need to
--- hold your own reference (with `g_object_ref()`) if you plan
--- to use this function — otherwise all deleted child anchors
--- will also be finalized.
---
--- ---
---
---@param self Gtk.TextChildAnchor # a `GtkTextChildAnchor`
---@return (boolean|nil) # `true` if the child anchor has been deleted from its buffer
function Gtk.TextChildAnchor:get_deleted() end

--- # method Gtk.TextChildAnchor:get_widgets()
---
--- Gets a list of all widgets anchored at this child anchor.
--- The returned list should be freed with `g_list_free()`.
---
--- ---
---
---@param self Gtk.TextChildAnchor # a `GtkTextChildAnchor`
---@return Gtk.Widget[] # list of widgets anchored at `anchor`
function Gtk.TextChildAnchor:get_widgets() end

--- # function Gtk.TextChildAnchor.new()
---
--- Creates a new `GtkTextChildAnchor`. Usually you would then insert
--- it into a `GtkTextBuffer` with `gtk_text_buffer_insert_child_anchor()`.
--- To perform the creation and insertion in one step, use the
--- convenience function `gtk_text_buffer_create_child_anchor()`.
---
--- ---
---
---@return Gtk.TextChildAnchor # a new `GtkTextChildAnchor`
function Gtk.TextChildAnchor.new() end

--- # record Gtk.TextChildAnchorClass
---
---@class Gtk.TextChildAnchorClass
---@field parent_class GObject.ObjectClass
Gtk.TextChildAnchorClass = {}

---@enum Gtk.TextDirection
Gtk.TextDirection = {}

---@enum Gtk.TextExtendSelection
Gtk.TextExtendSelection = {}

--- # record Gtk.TextIter
---
--- You may wish to begin by reading the
--- [text widget conceptual overview](TextWidget.html)
--- which gives an overview of all the objects and data
--- types related to the text widget and how they work together.
---
--- ---
---
---@class Gtk.TextIter
---@field dummy1 userdata
---@field dummy2 userdata
---@field dummy3 integer
---@field dummy4 integer
---@field dummy5 integer
---@field dummy6 integer
---@field dummy7 integer
---@field dummy8 integer
---@field dummy9 userdata
---@field dummy10 userdata
---@field dummy11 integer
---@field dummy12 integer
---@field dummy13 integer
---@field dummy14 userdata
Gtk.TextIter = {}

--- # method Gtk.TextIter:assign()
---
--- Assigns the value of `other` to `iter`.  This function
--- is not useful in applications, because iterators can be assigned
--- with `GtkTextIter i = j;`. The
--- function is used by language bindings.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param other Gtk.TextIter # another `GtkTextIter`
---@return nil
function Gtk.TextIter:assign(other) end

--- # method Gtk.TextIter:backward_char()
---
--- Moves backward by one character offset. Returns `true` if movement
--- was possible; if `iter` was the first in the buffer (character
--- offset 0), `gtk_text_iter_backward_char()` returns `false` for convenience when
--- writing loops.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return (boolean|nil) # whether movement was possible
function Gtk.TextIter:backward_char() end

--- # method Gtk.TextIter:backward_chars()
---
--- Moves `count` characters backward, if possible (if `count` would move
--- past the start or end of the buffer, moves to the start or end of
--- the buffer).  The return value indicates whether the iterator moved
--- onto a dereferenceable position; if the iterator didn’t move, or
--- moved onto the end iterator, then `false` is returned. If `count` is 0,
--- the function does nothing and returns `false`.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@param count integer # number of characters to move
---@return (boolean|nil) # whether `iter` moved and is dereferenceable
function Gtk.TextIter:backward_chars(count) end

--- # method Gtk.TextIter:backward_cursor_position()
---
--- Like `gtk_text_iter_forward_cursor_position()`, but moves backward.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if we moved
function Gtk.TextIter:backward_cursor_position() end

--- # method Gtk.TextIter:backward_cursor_positions()
---
--- Moves up to `count` cursor positions. See
--- `gtk_text_iter_forward_cursor_position()` for details.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param count integer # number of positions to move
---@return (boolean|nil) # `true` if we moved and the new position is dereferenceable
function Gtk.TextIter:backward_cursor_positions(count) end

--- # method Gtk.TextIter:backward_find_char()
---
--- Same as `gtk_text_iter_forward_find_char()`, but goes backward from `iter`.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param pred Gtk.TextCharPredicate # function to be called on each character
---@param user_data? userdata # user data for `pred`
---@param limit? Gtk.TextIter # search limit, or `nil` for none
---@return (boolean|nil) # whether a match was found
function Gtk.TextIter:backward_find_char(pred, user_data, limit) end

--- # method Gtk.TextIter:backward_line()
---
--- Moves `iter` to the start of the previous line. Returns `true` if
--- `iter` could be moved; i.e. if `iter` was at character offset 0, this
--- function returns `false`. Therefore if `iter` was already on line 0,
--- but not at the start of the line, `iter` is snapped to the start of
--- the line and the function returns `true`. (Note that this implies that
--- in a loop calling this function, the line number may not change on
--- every iteration, if your first iteration is on line 0.)
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return (boolean|nil) # whether `iter` moved
function Gtk.TextIter:backward_line() end

--- # method Gtk.TextIter:backward_lines()
---
--- Moves `count` lines backward, if possible (if `count` would move
--- past the start or end of the buffer, moves to the start or end of
--- the buffer).  The return value indicates whether the iterator moved
--- onto a dereferenceable position; if the iterator didn’t move, or
--- moved onto the end iterator, then `false` is returned. If `count` is 0,
--- the function does nothing and returns `false`. If `count` is negative,
--- moves forward by 0 - `count` lines.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param count integer # number of lines to move backward
---@return (boolean|nil) # whether `iter` moved and is dereferenceable
function Gtk.TextIter:backward_lines(count) end

--- # method Gtk.TextIter:backward_search()
---
--- Same as `gtk_text_iter_forward_search()`, but moves backward.
--- 
--- `match_end` will never be set to a `GtkTextIter` located after `iter`, even if
--- there is a possible `match_start` before or at `iter`.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter` where the search begins
---@param str string # search string
---@param flags Gtk.TextSearchFlags # bitmask of flags affecting the search
---@param match_start? Gtk.TextIter # return location for start of match, or `nil`
---@param match_end? Gtk.TextIter # return location for end of match, or `nil`
---@param limit? Gtk.TextIter # location of last possible `match_start`, or `nil` for start of buffer
---@return (boolean|nil) # whether a match was found
function Gtk.TextIter:backward_search(str, flags, match_start, match_end, limit) end

--- # method Gtk.TextIter:backward_sentence_start()
---
--- Moves backward to the previous sentence start; if `iter` is already at
--- the start of a sentence, moves backward to the next one.  Sentence
--- boundaries are determined by Pango and should be correct for nearly
--- any language (if not, the correct fix would be to the Pango text
--- boundary algorithms).
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` moved and is not the end iterator
function Gtk.TextIter:backward_sentence_start() end

--- # method Gtk.TextIter:backward_sentence_starts()
---
--- Calls `gtk_text_iter_backward_sentence_start()` up to `count` times,
--- or until it returns `false`. If `count` is negative, moves forward
--- instead of backward.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param count integer # number of sentences to move
---@return (boolean|nil) # `true` if `iter` moved and is not the end iterator
function Gtk.TextIter:backward_sentence_starts(count) end

--- # method Gtk.TextIter:backward_to_tag_toggle()
---
--- Moves backward to the next toggle (on or off) of the
--- `GtkTextTag` `tag`, or to the next toggle of any tag if
--- `tag` is `nil`. If no matching tag toggles are found,
--- returns `false`, otherwise `true`. Does not return toggles
--- located at `iter`, only toggles before `iter`. Sets `iter`
--- to the location of the toggle, or the start of the buffer
--- if no toggle is found.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param tag? Gtk.TextTag # a `GtkTextTag`, or `nil`
---@return (boolean|nil) # whether we found a tag toggle before `iter`
function Gtk.TextIter:backward_to_tag_toggle(tag) end

--- # method Gtk.TextIter:backward_visible_cursor_position()
---
--- Moves `iter` forward to the previous visible cursor position. See
--- `gtk_text_iter_backward_cursor_position()` for details.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if we moved and the new position is dereferenceable
function Gtk.TextIter:backward_visible_cursor_position() end

--- # method Gtk.TextIter:backward_visible_cursor_positions()
---
--- Moves up to `count` visible cursor positions. See
--- `gtk_text_iter_backward_cursor_position()` for details.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param count integer # number of positions to move
---@return (boolean|nil) # `true` if we moved and the new position is dereferenceable
function Gtk.TextIter:backward_visible_cursor_positions(count) end

--- # method Gtk.TextIter:backward_visible_line()
---
--- Moves `iter` to the start of the previous visible line. Returns `true` if
--- `iter` could be moved; i.e. if `iter` was at character offset 0, this
--- function returns `false`. Therefore if `iter` was already on line 0,
--- but not at the start of the line, `iter` is snapped to the start of
--- the line and the function returns `true`. (Note that this implies that
--- in a loop calling this function, the line number may not change on
--- every iteration, if your first iteration is on line 0.)
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return (boolean|nil) # whether `iter` moved
function Gtk.TextIter:backward_visible_line() end

--- # method Gtk.TextIter:backward_visible_lines()
---
--- Moves `count` visible lines backward, if possible (if `count` would move
--- past the start or end of the buffer, moves to the start or end of
--- the buffer).  The return value indicates whether the iterator moved
--- onto a dereferenceable position; if the iterator didn’t move, or
--- moved onto the end iterator, then `false` is returned. If `count` is 0,
--- the function does nothing and returns `false`. If `count` is negative,
--- moves forward by 0 - `count` lines.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param count integer # number of lines to move backward
---@return (boolean|nil) # whether `iter` moved and is dereferenceable
function Gtk.TextIter:backward_visible_lines(count) end

--- # method Gtk.TextIter:backward_visible_word_start()
---
--- Moves backward to the previous visible word start. (If `iter` is currently
--- on a word start, moves backward to the next one after that.) Word breaks
--- are determined by Pango and should be correct for nearly any
--- language (if not, the correct fix would be to the Pango word break
--- algorithms).
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` moved and is not the end iterator
function Gtk.TextIter:backward_visible_word_start() end

--- # method Gtk.TextIter:backward_visible_word_starts()
---
--- Calls `gtk_text_iter_backward_visible_word_start()` up to `count` times.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param count integer # number of times to move
---@return (boolean|nil) # `true` if `iter` moved and is not the end iterator
function Gtk.TextIter:backward_visible_word_starts(count) end

--- # method Gtk.TextIter:backward_word_start()
---
--- Moves backward to the previous word start. (If `iter` is currently on a
--- word start, moves backward to the next one after that.) Word breaks
--- are determined by Pango and should be correct for nearly any
--- language (if not, the correct fix would be to the Pango word break
--- algorithms).
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` moved and is not the end iterator
function Gtk.TextIter:backward_word_start() end

--- # method Gtk.TextIter:backward_word_starts()
---
--- Calls `gtk_text_iter_backward_word_start()` up to `count` times.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param count integer # number of times to move
---@return (boolean|nil) # `true` if `iter` moved and is not the end iterator
function Gtk.TextIter:backward_word_starts(count) end

--- # method Gtk.TextIter:begins_tag()
---
--- Returns `true` if `tag` is toggled on at exactly this point. If `tag`
--- is `nil`, returns `true` if any tag is toggled on at this point.
--- 
--- Note that if `gtk_text_iter_begins_tag()` returns `true`, it means that `iter` is
--- at the beginning of the tagged range, and that the
--- character at `iter` is inside the tagged range. In other
--- words, unlike `gtk_text_iter_ends_tag()`, if `gtk_text_iter_begins_tag()` returns
--- `true`, `gtk_text_iter_has_tag()` will also return `true` for the same
--- parameters.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@param tag? Gtk.TextTag # a `GtkTextTag`, or `nil`
---@return (boolean|nil) # whether `iter` is the start of a range tagged with `tag`
function Gtk.TextIter:begins_tag(tag) end

--- # method Gtk.TextIter:can_insert()
---
--- Considering the default editability of the buffer, and tags that
--- affect editability, determines whether text inserted at `iter` would
--- be editable. If text inserted at `iter` would be editable then the
--- user should be allowed to insert text at `iter`.
--- `gtk_text_buffer_insert_interactive()` uses this function to decide
--- whether insertions are allowed at a given position.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@param default_editability (boolean|nil) # `true` if text is editable by default
---@return (boolean|nil) # whether text inserted at `iter` would be editable
function Gtk.TextIter:can_insert(default_editability) end

--- # method Gtk.TextIter:compare()
---
--- A `qsort()`-style function that returns negative if `lhs` is less than
--- `rhs`, positive if `lhs` is greater than `rhs`, and 0 if they’re equal.
--- Ordering is in character offset order, i.e. the first character in the buffer
--- is less than the second character in the buffer.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param rhs Gtk.TextIter # another `GtkTextIter`
---@return integer # -1 if `lhs` is less than `rhs`, 1 if `lhs` is greater, 0 if they are equal
function Gtk.TextIter:compare(rhs) end

--- # method Gtk.TextIter:copy()
---
--- Creates a dynamically-allocated copy of an iterator. This function
--- is not useful in applications, because iterators can be copied with a
--- simple assignment (`GtkTextIter i = j;`). The
--- function is used by language bindings.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return Gtk.TextIter # a copy of the `iter`, free with `gtk_text_iter_free()`
function Gtk.TextIter:copy() end

--- # method Gtk.TextIter:editable()
---
--- Returns whether the character at `iter` is within an editable region
--- of text.  Non-editable text is “locked” and can’t be changed by the
--- user via `GtkTextView`. This function is simply a convenience
--- wrapper around `gtk_text_iter_get_attributes()`. If no tags applied
--- to this text affect editability, `default_setting` will be returned.
--- 
--- You don’t want to use this function to decide whether text can be
--- inserted at `iter`, because for insertion you don’t want to know
--- whether the char at `iter` is inside an editable range, you want to
--- know whether a new character inserted at `iter` would be inside an
--- editable range. Use `gtk_text_iter_can_insert()` to handle this
--- case.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@param default_setting (boolean|nil) # `true` if text is editable by default
---@return (boolean|nil) # whether `iter` is inside an editable range
function Gtk.TextIter:editable(default_setting) end

--- # method Gtk.TextIter:ends_line()
---
--- Returns `true` if `iter` points to the start of the paragraph
--- delimiter characters for a line (delimiters will be either a
--- newline, a carriage return, a carriage return followed by a
--- newline, or a Unicode paragraph separator character). Note that an
--- iterator pointing to the \n of a \r\n pair will not be counted as
--- the end of a line, the line ends before the \r. The end iterator is
--- considered to be at the end of a line, even though there are no
--- paragraph delimiter chars there.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return (boolean|nil) # whether `iter` is at the end of a line
function Gtk.TextIter:ends_line() end

--- # method Gtk.TextIter:ends_sentence()
---
--- Determines whether `iter` ends a sentence.  Sentence boundaries are
--- determined by Pango and should be correct for nearly any language
--- (if not, the correct fix would be to the Pango text boundary
--- algorithms).
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` is at the end of a sentence.
function Gtk.TextIter:ends_sentence() end

--- # method Gtk.TextIter:ends_tag()
---
--- Returns `true` if `tag` is toggled off at exactly this point. If `tag`
--- is `nil`, returns `true` if any tag is toggled off at this point.
--- 
--- Note that if `gtk_text_iter_ends_tag()` returns `true`, it means that `iter` is
--- at the end of the tagged range, but that the character
--- at `iter` is outside the tagged range. In other words,
--- unlike `gtk_text_iter_starts_tag()`, if `gtk_text_iter_ends_tag()` returns `true`,
--- `gtk_text_iter_has_tag()` will return `false` for the same parameters.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@param tag? Gtk.TextTag # a `GtkTextTag`, or `nil`
---@return (boolean|nil) # whether `iter` is the end of a range tagged with `tag`
function Gtk.TextIter:ends_tag(tag) end

--- # method Gtk.TextIter:ends_word()
---
--- Determines whether `iter` ends a natural-language word.  Word breaks
--- are determined by Pango and should be correct for nearly any
--- language (if not, the correct fix would be to the Pango word break
--- algorithms).
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` is at the end of a word
function Gtk.TextIter:ends_word() end

--- # method Gtk.TextIter:equal()
---
--- Tests whether two iterators are equal, using the fastest possible
--- mechanism. This function is very fast; you can expect it to perform
--- better than e.g. getting the character offset for each iterator and
--- comparing the offsets yourself. Also, it’s a bit faster than
--- `gtk_text_iter_compare()`.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param rhs Gtk.TextIter # another `GtkTextIter`
---@return (boolean|nil) # `true` if the iterators point to the same place in the buffer
function Gtk.TextIter:equal(rhs) end

--- # method Gtk.TextIter:forward_char()
---
--- Moves `iter` forward by one character offset. Note that images
--- embedded in the buffer occupy 1 character slot, so
--- `gtk_text_iter_forward_char()` may actually move onto an image instead
--- of a character, if you have images in your buffer.  If `iter` is the
--- end iterator or one character before it, `iter` will now point at
--- the end iterator, and `gtk_text_iter_forward_char()` returns `false` for
--- convenience when writing loops.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return (boolean|nil) # whether `iter` moved and is dereferenceable
function Gtk.TextIter:forward_char() end

--- # method Gtk.TextIter:forward_chars()
---
--- Moves `count` characters if possible (if `count` would move past the
--- start or end of the buffer, moves to the start or end of the
--- buffer). The return value indicates whether the new position of
--- `iter` is different from its original position, and dereferenceable
--- (the last iterator in the buffer is not dereferenceable). If `count`
--- is 0, the function does nothing and returns `false`.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@param count integer # number of characters to move, may be negative
---@return (boolean|nil) # whether `iter` moved and is dereferenceable
function Gtk.TextIter:forward_chars(count) end

--- # method Gtk.TextIter:forward_cursor_position()
---
--- Moves `iter` forward by a single cursor position. Cursor positions
--- are (unsurprisingly) positions where the cursor can appear. Perhaps
--- surprisingly, there may not be a cursor position between all
--- characters. The most common example for European languages would be
--- a carriage return/newline sequence. For some Unicode characters,
--- the equivalent of say the letter “a” with an accent mark will be
--- represented as two characters, first the letter then a "combining
--- mark" that causes the accent to be rendered; so the cursor can’t go
--- between those two characters. See also the `PangoLogAttr`-struct and
--- `pango_break()` function.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if we moved and the new position is dereferenceable
function Gtk.TextIter:forward_cursor_position() end

--- # method Gtk.TextIter:forward_cursor_positions()
---
--- Moves up to `count` cursor positions. See
--- `gtk_text_iter_forward_cursor_position()` for details.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param count integer # number of positions to move
---@return (boolean|nil) # `true` if we moved and the new position is dereferenceable
function Gtk.TextIter:forward_cursor_positions(count) end

--- # method Gtk.TextIter:forward_find_char()
---
--- Advances `iter`, calling `pred` on each character. If
--- `pred` returns `true`, returns `true` and stops scanning.
--- If `pred` never returns `true`, `iter` is set to `limit` if
--- `limit` is non-`nil`, otherwise to the end iterator.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param pred Gtk.TextCharPredicate # a function to be called on each character
---@param user_data? userdata # user data for `pred`
---@param limit? Gtk.TextIter # search limit, or `nil` for none
---@return (boolean|nil) # whether a match was found
function Gtk.TextIter:forward_find_char(pred, user_data, limit) end

--- # method Gtk.TextIter:forward_line()
---
--- Moves `iter` to the start of the next line. If the iter is already on the
--- last line of the buffer, moves the iter to the end of the current line.
--- If after the operation, the iter is at the end of the buffer and not
--- dereferencable, returns `false`. Otherwise, returns `true`.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return (boolean|nil) # whether `iter` can be dereferenced
function Gtk.TextIter:forward_line() end

--- # method Gtk.TextIter:forward_lines()
---
--- Moves `count` lines forward, if possible (if `count` would move
--- past the start or end of the buffer, moves to the start or end of
--- the buffer).  The return value indicates whether the iterator moved
--- onto a dereferenceable position; if the iterator didn’t move, or
--- moved onto the end iterator, then `false` is returned. If `count` is 0,
--- the function does nothing and returns `false`. If `count` is negative,
--- moves backward by 0 - `count` lines.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param count integer # number of lines to move forward
---@return (boolean|nil) # whether `iter` moved and is dereferenceable
function Gtk.TextIter:forward_lines(count) end

--- # method Gtk.TextIter:forward_search()
---
--- Searches forward for `str`. Any match is returned by setting
--- `match_start` to the first character of the match and `match_end` to the
--- first character after the match. The search will not continue past
--- `limit`. Note that a search is a linear or O(n) operation, so you
--- may wish to use `limit` to avoid locking up your UI on large
--- buffers.
--- 
--- `match_start` will never be set to a `GtkTextIter` located before `iter`, even if
--- there is a possible `match_end` after or at `iter`.
---
--- ---
---
---@param self Gtk.TextIter # start of search
---@param str string # a search string
---@param flags Gtk.TextSearchFlags # flags affecting how the search is done
---@param match_start? Gtk.TextIter # return location for start of match, or `nil`
---@param match_end? Gtk.TextIter # return location for end of match, or `nil`
---@param limit? Gtk.TextIter # location of last possible `match_end`, or `nil` for the end of the buffer
---@return (boolean|nil) # whether a match was found
function Gtk.TextIter:forward_search(str, flags, match_start, match_end, limit) end

--- # method Gtk.TextIter:forward_sentence_end()
---
--- Moves forward to the next sentence end. (If `iter` is at the end of
--- a sentence, moves to the next end of sentence.)  Sentence
--- boundaries are determined by Pango and should be correct for nearly
--- any language (if not, the correct fix would be to the Pango text
--- boundary algorithms).
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` moved and is not the end iterator
function Gtk.TextIter:forward_sentence_end() end

--- # method Gtk.TextIter:forward_sentence_ends()
---
--- Calls `gtk_text_iter_forward_sentence_end()` `count` times (or until
--- `gtk_text_iter_forward_sentence_end()` returns `false`). If `count` is
--- negative, moves backward instead of forward.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param count integer # number of sentences to move
---@return (boolean|nil) # `true` if `iter` moved and is not the end iterator
function Gtk.TextIter:forward_sentence_ends(count) end

--- # method Gtk.TextIter:forward_to_end()
---
--- Moves `iter` forward to the “end iterator,” which points one past the last
--- valid character in the buffer. `gtk_text_iter_get_char()` called on the
--- end iterator returns 0, which is convenient for writing loops.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return nil
function Gtk.TextIter:forward_to_end() end

--- # method Gtk.TextIter:forward_to_line_end()
---
--- Moves the iterator to point to the paragraph delimiter characters,
--- which will be either a newline, a carriage return, a carriage
--- return/newline in sequence, or the Unicode paragraph separator
--- character. If the iterator is already at the paragraph delimiter
--- characters, moves to the paragraph delimiter characters for the
--- next line. If `iter` is on the last line in the buffer, which does
--- not end in paragraph delimiters, moves to the end iterator (end of
--- the last line), and returns `false`.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if we moved and the new location is not the end iterator
function Gtk.TextIter:forward_to_line_end() end

--- # method Gtk.TextIter:forward_to_tag_toggle()
---
--- Moves forward to the next toggle (on or off) of the
--- `GtkTextTag` `tag`, or to the next toggle of any tag if
--- `tag` is `nil`. If no matching tag toggles are found,
--- returns `false`, otherwise `true`. Does not return toggles
--- located at `iter`, only toggles after `iter`. Sets `iter` to
--- the location of the toggle, or to the end of the buffer
--- if no toggle is found.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param tag? Gtk.TextTag # a `GtkTextTag`, or `nil`
---@return (boolean|nil) # whether we found a tag toggle after `iter`
function Gtk.TextIter:forward_to_tag_toggle(tag) end

--- # method Gtk.TextIter:forward_visible_cursor_position()
---
--- Moves `iter` forward to the next visible cursor position. See
--- `gtk_text_iter_forward_cursor_position()` for details.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if we moved and the new position is dereferenceable
function Gtk.TextIter:forward_visible_cursor_position() end

--- # method Gtk.TextIter:forward_visible_cursor_positions()
---
--- Moves up to `count` visible cursor positions. See
--- `gtk_text_iter_forward_cursor_position()` for details.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param count integer # number of positions to move
---@return (boolean|nil) # `true` if we moved and the new position is dereferenceable
function Gtk.TextIter:forward_visible_cursor_positions(count) end

--- # method Gtk.TextIter:forward_visible_line()
---
--- Moves `iter` to the start of the next visible line. Returns `true` if there
--- was a next line to move to, and `false` if `iter` was simply moved to
--- the end of the buffer and is now not dereferenceable, or if `iter` was
--- already at the end of the buffer.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return (boolean|nil) # whether `iter` can be dereferenced
function Gtk.TextIter:forward_visible_line() end

--- # method Gtk.TextIter:forward_visible_lines()
---
--- Moves `count` visible lines forward, if possible (if `count` would move
--- past the start or end of the buffer, moves to the start or end of
--- the buffer).  The return value indicates whether the iterator moved
--- onto a dereferenceable position; if the iterator didn’t move, or
--- moved onto the end iterator, then `false` is returned. If `count` is 0,
--- the function does nothing and returns `false`. If `count` is negative,
--- moves backward by 0 - `count` lines.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param count integer # number of lines to move forward
---@return (boolean|nil) # whether `iter` moved and is dereferenceable
function Gtk.TextIter:forward_visible_lines(count) end

--- # method Gtk.TextIter:forward_visible_word_end()
---
--- Moves forward to the next visible word end. (If `iter` is currently on a
--- word end, moves forward to the next one after that.) Word breaks
--- are determined by Pango and should be correct for nearly any
--- language (if not, the correct fix would be to the Pango word break
--- algorithms).
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` moved and is not the end iterator
function Gtk.TextIter:forward_visible_word_end() end

--- # method Gtk.TextIter:forward_visible_word_ends()
---
--- Calls `gtk_text_iter_forward_visible_word_end()` up to `count` times.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param count integer # number of times to move
---@return (boolean|nil) # `true` if `iter` moved and is not the end iterator
function Gtk.TextIter:forward_visible_word_ends(count) end

--- # method Gtk.TextIter:forward_word_end()
---
--- Moves forward to the next word end. (If `iter` is currently on a
--- word end, moves forward to the next one after that.) Word breaks
--- are determined by Pango and should be correct for nearly any
--- language (if not, the correct fix would be to the Pango word break
--- algorithms).
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` moved and is not the end iterator
function Gtk.TextIter:forward_word_end() end

--- # method Gtk.TextIter:forward_word_ends()
---
--- Calls `gtk_text_iter_forward_word_end()` up to `count` times.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param count integer # number of times to move
---@return (boolean|nil) # `true` if `iter` moved and is not the end iterator
function Gtk.TextIter:forward_word_ends(count) end

--- # method Gtk.TextIter:free()
---
--- Free an iterator allocated on the heap. This function
--- is intended for use in language bindings, and is not
--- especially useful for applications, because iterators can
--- simply be allocated on the stack.
---
--- ---
---
---@param self Gtk.TextIter # a dynamically-allocated iterator
---@return nil
function Gtk.TextIter:free() end

--- # method Gtk.TextIter:get_attributes()
---
--- Computes the effect of any tags applied to this spot in the
--- text. The `values` parameter should be initialized to the default
--- settings you wish to use if no tags are in effect. You’d typically
--- obtain the defaults from `gtk_text_view_get_default_attributes()`.
--- 
--- `gtk_text_iter_get_attributes()` will modify `values`, applying the
--- effects of any tags present at `iter`. If any tags affected `values`,
--- the function returns `true`.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@param values Gtk.TextAttributes # a `GtkTextAttributes` to be filled in
---@return (boolean|nil) # `true` if `values` was modified
function Gtk.TextIter:get_attributes(values) end

--- # method Gtk.TextIter:get_buffer()
---
--- Returns the `GtkTextBuffer` this iterator is associated with.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return Gtk.TextBuffer # the buffer
function Gtk.TextIter:get_buffer() end

--- # method Gtk.TextIter:get_bytes_in_line()
---
--- Returns the number of bytes in the line containing `iter`,
--- including the paragraph delimiters.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return integer # number of bytes in the line
function Gtk.TextIter:get_bytes_in_line() end

--- # method Gtk.TextIter:get_char()
---
--- The Unicode character at this iterator is returned.  (Equivalent to
--- operator* on a C++ iterator.)  If the element at this iterator is a
--- non-character element, such as an image embedded in the buffer, the
--- Unicode “unknown” character 0xFFFC is returned. If invoked on
--- the end iterator, zero is returned; zero is not a valid Unicode character.
--- So you can write a loop which ends when `gtk_text_iter_get_char()`
--- returns 0.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return integer # a Unicode character, or 0 if `iter` is not dereferenceable
function Gtk.TextIter:get_char() end

--- # method Gtk.TextIter:get_chars_in_line()
---
--- Returns the number of characters in the line containing `iter`,
--- including the paragraph delimiters.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return integer # number of characters in the line
function Gtk.TextIter:get_chars_in_line() end

--- # method Gtk.TextIter:get_child_anchor()
---
--- If the location at `iter` contains a child anchor, the
--- anchor is returned (with no new reference count added). Otherwise,
--- `nil` is returned.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return Gtk.TextChildAnchor # the anchor at `iter`
function Gtk.TextIter:get_child_anchor() end

--- # method Gtk.TextIter:get_language()
---
--- A convenience wrapper around `gtk_text_iter_get_attributes()`,
--- which returns the language in effect at `iter`. If no tags affecting
--- language apply to `iter`, the return value is identical to that of
--- `gtk_get_default_language()`.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return Pango.Language # language in effect at `iter`
function Gtk.TextIter:get_language() end

--- # method Gtk.TextIter:get_line()
---
--- Returns the line number containing the iterator. Lines in
--- a `GtkTextBuffer` are numbered beginning with 0 for the first
--- line in the buffer.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return integer # a line number
function Gtk.TextIter:get_line() end

--- # method Gtk.TextIter:get_line_index()
---
--- Returns the byte index of the iterator, counting
--- from the start of a newline-terminated line.
--- Remember that `GtkTextBuffer` encodes text in
--- UTF-8, and that characters can require a variable
--- number of bytes to represent.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return integer # distance from start of line, in bytes
function Gtk.TextIter:get_line_index() end

--- # method Gtk.TextIter:get_line_offset()
---
--- Returns the character offset of the iterator,
--- counting from the start of a newline-terminated line.
--- The first character on the line has offset 0.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return integer # offset from start of line
function Gtk.TextIter:get_line_offset() end

--- # method Gtk.TextIter:get_marks()
---
--- Returns a list of all `GtkTextMark` at this location. Because marks
--- are not iterable (they don’t take up any "space" in the buffer,
--- they are just marks in between iterable locations), multiple marks
--- can exist in the same place. The returned list is not in any
--- meaningful order.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return Gtk.TextMark[] # list of `GtkTextMark`
function Gtk.TextIter:get_marks() end

--- # method Gtk.TextIter:get_offset()
---
--- Returns the character offset of an iterator.
--- Each character in a `GtkTextBuffer` has an offset,
--- starting with 0 for the first character in the buffer.
--- Use `gtk_text_buffer_get_iter_at_offset()` to convert an
--- offset back into an iterator.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return integer # a character offset
function Gtk.TextIter:get_offset() end

--- # method Gtk.TextIter:get_pixbuf()
---
--- If the element at `iter` is a pixbuf, the pixbuf is returned
--- (with no new reference count added). Otherwise,
--- `nil` is returned.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return GdkPixbuf.Pixbuf # the pixbuf at `iter`
function Gtk.TextIter:get_pixbuf() end

--- # method Gtk.TextIter:get_slice()
---
--- Returns the text in the given range. A “slice” is an array of
--- characters encoded in UTF-8 format, including the Unicode “unknown”
--- character 0xFFFC for iterable non-character elements in the buffer,
--- such as images.  Because images are encoded in the slice, byte and
--- character offsets in the returned array will correspond to byte
--- offsets in the text buffer. Note that 0xFFFC can occur in normal
--- text as well, so it is not a reliable indicator that a pixbuf or
--- widget is in the buffer.
---
--- ---
---
---@param self Gtk.TextIter # iterator at start of a range
---@param end__ Gtk.TextIter # iterator at end of a range
---@return string # slice of text from the buffer
function Gtk.TextIter:get_slice(end__) end

--- # method Gtk.TextIter:get_tags()
---
--- Returns a list of tags that apply to `iter`, in ascending order of
--- priority (highest-priority tags are last). The `GtkTextTag` in the
--- list don’t have a reference added, but you have to free the list
--- itself.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return Gtk.TextTag[] # list of `GtkTextTag`
function Gtk.TextIter:get_tags() end

--- # method Gtk.TextIter:get_text()
---
--- Returns text in the given range.  If the range
--- contains non-text elements such as images, the character and byte
--- offsets in the returned string will not correspond to character and
--- byte offsets in the buffer. If you want offsets to correspond, see
--- `gtk_text_iter_get_slice()`.
---
--- ---
---
---@param self Gtk.TextIter # iterator at start of a range
---@param end__ Gtk.TextIter # iterator at end of a range
---@return string # array of characters from the buffer
function Gtk.TextIter:get_text(end__) end

--- # method Gtk.TextIter:get_toggled_tags()
---
--- Returns a list of `GtkTextTag` that are toggled on or off at this
--- point.  (If `toggled_on` is `true`, the list contains tags that are
--- toggled on.) If a tag is toggled on at `iter`, then some non-empty
--- range of characters following `iter` has that tag applied to it.  If
--- a tag is toggled off, then some non-empty range following `iter`
--- does not have the tag applied to it.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@param toggled_on (boolean|nil) # `true` to get toggled-on tags
---@return Gtk.TextTag[] # tags toggled at this point
function Gtk.TextIter:get_toggled_tags(toggled_on) end

--- # method Gtk.TextIter:get_visible_line_index()
---
--- Returns the number of bytes from the start of the
--- line to the given `iter`, not counting bytes that
--- are invisible due to tags with the “invisible” flag
--- toggled on.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return integer # byte index of `iter` with respect to the start of the line
function Gtk.TextIter:get_visible_line_index() end

--- # method Gtk.TextIter:get_visible_line_offset()
---
--- Returns the offset in characters from the start of the
--- line to the given `iter`, not counting characters that
--- are invisible due to tags with the “invisible” flag
--- toggled on.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return integer # offset in visible characters from the start of the line
function Gtk.TextIter:get_visible_line_offset() end

--- # method Gtk.TextIter:get_visible_slice()
---
--- Like `gtk_text_iter_get_slice()`, but invisible text is not included.
--- Invisible text is usually invisible because a `GtkTextTag` with the
--- “invisible” attribute turned on has been applied to it.
---
--- ---
---
---@param self Gtk.TextIter # iterator at start of range
---@param end__ Gtk.TextIter # iterator at end of range
---@return string # slice of text from the buffer
function Gtk.TextIter:get_visible_slice(end__) end

--- # method Gtk.TextIter:get_visible_text()
---
--- Like `gtk_text_iter_get_text()`, but invisible text is not included.
--- Invisible text is usually invisible because a `GtkTextTag` with the
--- “invisible” attribute turned on has been applied to it.
---
--- ---
---
---@param self Gtk.TextIter # iterator at start of range
---@param end__ Gtk.TextIter # iterator at end of range
---@return string # string containing visible text in the range
function Gtk.TextIter:get_visible_text(end__) end

--- # method Gtk.TextIter:has_tag()
---
--- Returns `true` if `iter` points to a character that is part of a range tagged
--- with `tag`. See also `gtk_text_iter_starts_tag()` and `gtk_text_iter_ends_tag()`.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@param tag Gtk.TextTag # a `GtkTextTag`
---@return (boolean|nil) # whether `iter` is tagged with `tag`
function Gtk.TextIter:has_tag(tag) end

--- # method Gtk.TextIter:in_range()
---
--- Checks whether `iter` falls in the range [`start`, `end`).
--- `start` and `end` must be in ascending order.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param start Gtk.TextIter # start of range
---@param end__ Gtk.TextIter # end of range
---@return (boolean|nil) # `true` if `iter` is in the range
function Gtk.TextIter:in_range(start, end__) end

--- # method Gtk.TextIter:inside_sentence()
---
--- Determines whether `iter` is inside a sentence (as opposed to in
--- between two sentences, e.g. after a period and before the first
--- letter of the next sentence).  Sentence boundaries are determined
--- by Pango and should be correct for nearly any language (if not, the
--- correct fix would be to the Pango text boundary algorithms).
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` is inside a sentence.
function Gtk.TextIter:inside_sentence() end

--- # method Gtk.TextIter:inside_word()
---
--- Determines whether the character pointed by `iter` is part of a
--- natural-language word (as opposed to say inside some whitespace).  Word
--- breaks are determined by Pango and should be correct for nearly any language
--- (if not, the correct fix would be to the Pango word break algorithms).
--- 
--- Note that if `gtk_text_iter_starts_word()` returns `true`, then this function
--- returns `true` too, since `iter` points to the first character of the word.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` is inside a word
function Gtk.TextIter:inside_word() end

--- # method Gtk.TextIter:is_cursor_position()
---
--- See `gtk_text_iter_forward_cursor_position()` or `PangoLogAttr` or
--- `pango_break()` for details on what a cursor position is.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if the cursor can be placed at `iter`
function Gtk.TextIter:is_cursor_position() end

--- # method Gtk.TextIter:is_end()
---
--- Returns `true` if `iter` is the end iterator, i.e. one past the last
--- dereferenceable iterator in the buffer. `gtk_text_iter_is_end()` is
--- the most efficient way to check whether an iterator is the end
--- iterator.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return (boolean|nil) # whether `iter` is the end iterator
function Gtk.TextIter:is_end() end

--- # method Gtk.TextIter:is_start()
---
--- Returns `true` if `iter` is the first iterator in the buffer, that is
--- if `iter` has a character offset of 0.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return (boolean|nil) # whether `iter` is the first in the buffer
function Gtk.TextIter:is_start() end

--- # method Gtk.TextIter:order()
---
--- Swaps the value of `first` and `second` if `second` comes before
--- `first` in the buffer. That is, ensures that `first` and `second` are
--- in sequence. Most text buffer functions that take a range call this
--- automatically on your behalf, so there’s no real reason to call it yourself
--- in those cases. There are some exceptions, such as `gtk_text_iter_in_range()`,
--- that expect a pre-sorted range.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param second Gtk.TextIter # another `GtkTextIter`
---@return nil
function Gtk.TextIter:order(second) end

--- # method Gtk.TextIter:set_line()
---
--- Moves iterator `iter` to the start of the line `line_number`.  If
--- `line_number` is negative or larger than the number of lines in the
--- buffer, moves `iter` to the start of the last line in the buffer.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param line_number integer # line number (counted from 0)
---@return nil
function Gtk.TextIter:set_line(line_number) end

--- # method Gtk.TextIter:set_line_index()
---
--- Same as `gtk_text_iter_set_line_offset()`, but works with a
--- byte index. The given byte index must be at
--- the start of a character, it can’t be in the middle of a UTF-8
--- encoded character.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param byte_on_line integer # a byte index relative to the start of `iter`’s current line
---@return nil
function Gtk.TextIter:set_line_index(byte_on_line) end

--- # method Gtk.TextIter:set_line_offset()
---
--- Moves `iter` within a line, to a new character
--- (not byte) offset. The given character offset must be less than or
--- equal to the number of characters in the line; if equal, `iter`
--- moves to the start of the next line. See
--- `gtk_text_iter_set_line_index()` if you have a byte index rather than
--- a character offset.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param char_on_line integer # a character offset relative to the start of `iter`’s current line
---@return nil
function Gtk.TextIter:set_line_offset(char_on_line) end

--- # method Gtk.TextIter:set_offset()
---
--- Sets `iter` to point to `char_offset`. `char_offset` counts from the start
--- of the entire text buffer, starting with 0.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param char_offset integer # a character number
---@return nil
function Gtk.TextIter:set_offset(char_offset) end

--- # method Gtk.TextIter:set_visible_line_index()
---
--- Like `gtk_text_iter_set_line_index()`, but the index is in visible
--- bytes, i.e. text with a tag making it invisible is not counted
--- in the index.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param byte_on_line integer # a byte index
---@return nil
function Gtk.TextIter:set_visible_line_index(byte_on_line) end

--- # method Gtk.TextIter:set_visible_line_offset()
---
--- Like `gtk_text_iter_set_line_offset()`, but the offset is in visible
--- characters, i.e. text with a tag making it invisible is not
--- counted in the offset.
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@param char_on_line integer # a character offset
---@return nil
function Gtk.TextIter:set_visible_line_offset(char_on_line) end

--- # method Gtk.TextIter:starts_line()
---
--- Returns `true` if `iter` begins a paragraph,
--- i.e. if `gtk_text_iter_get_line_offset()` would return 0.
--- However this function is potentially more efficient than
--- `gtk_text_iter_get_line_offset()` because it doesn’t have to compute
--- the offset, it just has to see whether it’s 0.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@return (boolean|nil) # whether `iter` begins a line
function Gtk.TextIter:starts_line() end

--- # method Gtk.TextIter:starts_sentence()
---
--- Determines whether `iter` begins a sentence.  Sentence boundaries are
--- determined by Pango and should be correct for nearly any language
--- (if not, the correct fix would be to the Pango text boundary
--- algorithms).
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` is at the start of a sentence.
function Gtk.TextIter:starts_sentence() end

--- # method Gtk.TextIter:starts_tag()
---
--- Returns `true` if `tag` is toggled on at exactly this point. If `tag`
--- is `nil`, returns `true` if any tag is toggled on at this point.
--- 
--- Note that if `gtk_text_iter_starts_tag()` returns `true`, it means that `iter` is
--- at the beginning of the tagged range, and that the
--- character at `iter` is inside the tagged range. In other
--- words, unlike `gtk_text_iter_ends_tag()`, if `gtk_text_iter_starts_tag()` returns
--- `true`, `gtk_text_iter_has_tag()` will also return `true` for the same
--- parameters.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@param tag? Gtk.TextTag # a `GtkTextTag`, or `nil`
---@return (boolean|nil) # whether `iter` is the start of a range tagged with `tag`
function Gtk.TextIter:starts_tag(tag) end

--- # method Gtk.TextIter:starts_word()
---
--- Determines whether `iter` begins a natural-language word.  Word
--- breaks are determined by Pango and should be correct for nearly any
--- language (if not, the correct fix would be to the Pango word break
--- algorithms).
---
--- ---
---
---@param self Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` is at the start of a word
function Gtk.TextIter:starts_word() end

--- # method Gtk.TextIter:toggles_tag()
---
--- This is equivalent to (`gtk_text_iter_starts_tag()` ||
--- `gtk_text_iter_ends_tag()`), i.e. it tells you whether a range with
--- `tag` applied to it begins or ends at `iter`.
---
--- ---
---
---@param self Gtk.TextIter # an iterator
---@param tag? Gtk.TextTag # a `GtkTextTag`, or `nil`
---@return (boolean|nil) # whether `tag` is toggled on or off at `iter`
function Gtk.TextIter:toggles_tag(tag) end

--- # class Gtk.TextMark
---
--- You may wish to begin by reading the
--- [text widget conceptual overview](TextWidget.html)
--- which gives an overview of all the objects and data
--- types related to the text widget and how they work together.
--- 
--- A `GtkTextMark` is like a bookmark in a text buffer; it preserves a position in
--- the text. You can convert the mark to an iterator using
--- `gtk_text_buffer_get_iter_at_mark()`. Unlike iterators, marks remain valid across
--- buffer mutations, because their behavior is defined when text is inserted or
--- deleted. When text containing a mark is deleted, the mark remains in the
--- position originally occupied by the deleted text. When text is inserted at a
--- mark, a mark with “left gravity” will be moved to the
--- beginning of the newly-inserted text, and a mark with “right
--- gravity” will be moved to the end.
--- 
--- Note that “left” and “right” here refer to logical direction (left
--- is the toward the start of the buffer); in some languages such as
--- Hebrew the logically-leftmost text is not actually on the left when
--- displayed.
--- 
--- Marks are reference counted, but the reference count only controls the validity
--- of the memory; marks can be deleted from the buffer at any time with
--- `gtk_text_buffer_delete_mark()`. Once deleted from the buffer, a mark is
--- essentially useless.
--- 
--- Marks optionally have names; these can be convenient to avoid passing the
--- `GtkTextMark` object around.
--- 
--- Marks are typically created using the `gtk_text_buffer_create_mark()` function.
---
--- ---
---
---@class Gtk.TextMark : GObject.Object
---@field parent_instance GObject.Object
---@field segment userdata
---@operator call: Gtk.TextMark
Gtk.TextMark = {}

--- # method Gtk.TextMark:get_buffer()
---
--- Gets the buffer this mark is located inside,
--- or `nil` if the mark is deleted.
---
--- ---
---
---@param self Gtk.TextMark # a `GtkTextMark`
---@return Gtk.TextBuffer # the mark’s `GtkTextBuffer`
function Gtk.TextMark:get_buffer() end

--- # method Gtk.TextMark:get_deleted()
---
--- Returns `true` if the mark has been removed from its buffer
--- with `gtk_text_buffer_delete_mark()`. See `gtk_text_buffer_add_mark()`
--- for a way to add it to a buffer again.
---
--- ---
---
---@param self Gtk.TextMark # a `GtkTextMark`
---@return (boolean|nil) # whether the mark is deleted
function Gtk.TextMark:get_deleted() end

--- # method Gtk.TextMark:get_left_gravity()
---
--- Determines whether the mark has left gravity.
---
--- ---
---
---@param self Gtk.TextMark # a `GtkTextMark`
---@return (boolean|nil) # `true` if the mark has left gravity, `false` otherwise
function Gtk.TextMark:get_left_gravity() end

--- # method Gtk.TextMark:get_name()
---
--- Returns the mark name; returns NULL for anonymous marks.
---
--- ---
---
---@param self Gtk.TextMark # a `GtkTextMark`
---@return string # mark name
function Gtk.TextMark:get_name() end

--- # method Gtk.TextMark:get_visible()
---
--- Returns `true` if the mark is visible (i.e. a cursor is displayed
--- for it).
---
--- ---
---
---@param self Gtk.TextMark # a `GtkTextMark`
---@return (boolean|nil) # `true` if visible
function Gtk.TextMark:get_visible() end

--- # method Gtk.TextMark:set_visible()
---
--- Sets the visibility of `mark`; the insertion point is normally
--- visible, i.e. you can see it as a vertical bar. Also, the text
--- widget uses a visible mark to indicate where a drop will occur when
--- dragging-and-dropping text. Most other marks are not visible.
--- Marks are not visible by default.
---
--- ---
---
---@param self Gtk.TextMark # a `GtkTextMark`
---@param setting (boolean|nil) # visibility of mark
---@return nil
function Gtk.TextMark:set_visible(setting) end

--- # function Gtk.TextMark.new()
---
--- Creates a text mark. Add it to a buffer using `gtk_text_buffer_add_mark()`.
--- If `name` is `nil`, the mark is anonymous; otherwise, the mark can be
--- retrieved by name using `gtk_text_buffer_get_mark()`. If a mark has left
--- gravity, and text is inserted at the mark’s current location, the mark
--- will be moved to the left of the newly-inserted text. If the mark has
--- right gravity (`left_gravity` = `false`), the mark will end up on the
--- right of newly-inserted text. The standard left-to-right cursor is a
--- mark with right gravity (when you type, the cursor stays on the right
--- side of the text you’re typing).
---
--- ---
---
---@param name? string # mark name or `nil`
---@param left_gravity (boolean|nil) # whether the mark should have left gravity
---@return Gtk.TextMark # new `GtkTextMark`
function Gtk.TextMark.new(name, left_gravity) end

--- # record Gtk.TextMarkClass
---
---@class Gtk.TextMarkClass
---@field parent_class GObject.ObjectClass
Gtk.TextMarkClass = {}

---@enum Gtk.TextSearchFlags
Gtk.TextSearchFlags = {}

--- # class Gtk.TextTag
---
--- You may wish to begin by reading the
--- [text widget conceptual overview](TextWidget.html)
--- which gives an overview of all the objects and
--- data types related to the text widget and how they work together.
--- 
--- Tags should be in the `GtkTextTagTable` for a given `GtkTextBuffer`
--- before using them with that buffer.
--- 
--- `gtk_text_buffer_create_tag()` is the best way to create tags.
--- See “gtk3-demo” for numerous examples.
--- 
--- For each property of `GtkTextTag`, there is a “set” property, e.g.
--- “font-set” corresponds to “font”. These “set” properties reflect
--- whether a property has been set or not.
--- They are maintained by GTK+ and you should not set them independently.
---
--- ---
---
---@class Gtk.TextTag : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gtk.TextTagPrivate
---@operator call: Gtk.TextTag
Gtk.TextTag = {}

--- # method Gtk.TextTag:changed()
---
--- Emits the `GtkTextTagTable`::tag-changed signal on the `GtkTextTagTable` where
--- the tag is included.
--- 
--- The signal is already emitted when setting a `GtkTextTag` property. This
--- function is useful for a `GtkTextTag` subclass.
---
--- ---
---
---@param self Gtk.TextTag # a `GtkTextTag`.
---@param size_changed (boolean|nil) # whether the change affects the `GtkTextView` layout.
---@return nil
function Gtk.TextTag:changed(size_changed) end

--- # method Gtk.TextTag:event()
---
--- Emits the “event” signal on the `GtkTextTag`.
---
--- ---
---
---@param self Gtk.TextTag # a `GtkTextTag`
---@param event_object GObject.Object # object that received the event, such as a widget
---@param event Gdk.Event # the event
---@param iter Gtk.TextIter # location where the event was received
---@return (boolean|nil) # result of signal emission (whether the event was handled)
function Gtk.TextTag:event(event_object, event, iter) end

--- # method Gtk.TextTag:get_priority()
---
--- Get the tag priority.
---
--- ---
---
---@param self Gtk.TextTag # a `GtkTextTag`
---@return integer # The tag’s priority.
function Gtk.TextTag:get_priority() end

--- # method Gtk.TextTag:set_priority()
---
--- Sets the priority of a `GtkTextTag`. Valid priorities
--- start at 0 and go to one less than `gtk_text_tag_table_get_size()`.
--- Each tag in a table has a unique priority; setting the priority
--- of one tag shifts the priorities of all the other tags in the
--- table to maintain a unique priority for each tag. Higher priority
--- tags “win” if two tags both set the same text attribute. When adding
--- a tag to a tag table, it will be assigned the highest priority in
--- the table by default; so normally the precedence of a set of tags
--- is the order in which they were added to the table, or created with
--- `gtk_text_buffer_create_tag()`, which adds the tag to the buffer’s table
--- automatically.
---
--- ---
---
---@param self Gtk.TextTag # a `GtkTextTag`
---@param priority integer # the new priority
---@return nil
function Gtk.TextTag:set_priority(priority) end

--- # function Gtk.TextTag.new()
---
--- Creates a `GtkTextTag`. Configure the tag using object arguments,
--- i.e. using `g_object_set()`.
---
--- ---
---
---@param name? string # tag name, or `nil`
---@return Gtk.TextTag # a new `GtkTextTag`
function Gtk.TextTag.new(name) end

--- # record Gtk.TextTagClass
---
---@class Gtk.TextTagClass
---@field parent_class GObject.ObjectClass
---@field event fun(tag: Gtk.TextTag, event_object: GObject.Object, event: Gdk.Event, iter: Gtk.TextIter): (boolean|nil)
Gtk.TextTagClass = {}

--- # record Gtk.TextTagPrivate
---
---@class Gtk.TextTagPrivate
Gtk.TextTagPrivate = {}

--- # class Gtk.TextTagTable
---
--- You may wish to begin by reading the
--- [text widget conceptual overview](TextWidget.html)
--- which gives an overview of all the objects and
--- data types related to the text widget and how they work together.
--- 
--- # GtkTextTagTables as GtkBuildable
--- 
--- The GtkTextTagTable implementation of the GtkBuildable interface
--- supports adding tags by specifying “tag” as the “type” attribute
--- of a `<child>` element.
--- 
--- An example of a UI definition fragment specifying tags:
--- 
--- ```xml
--- <object class="GtkTextTagTable">
---  <child type="tag">
---    <object class="GtkTextTag"/>
---  </child>
--- </object>
--- ```
---
--- ---
---
---@class Gtk.TextTagTable : GObject.Object, Gtk.Buildable
---@field parent_instance GObject.Object
---@field priv Gtk.TextTagTablePrivate
---@operator call: Gtk.TextTagTable
Gtk.TextTagTable = {}

--- # method Gtk.TextTagTable:add()
---
--- Add a tag to the table. The tag is assigned the highest priority
--- in the table.
--- 
--- `tag` must not be in a tag table already, and may not have
--- the same name as an already-added tag.
---
--- ---
---
---@param self Gtk.TextTagTable # a `GtkTextTagTable`
---@param tag Gtk.TextTag # a `GtkTextTag`
---@return (boolean|nil) # `true` on success.
function Gtk.TextTagTable:add(tag) end

--- # method Gtk.TextTagTable:foreach()
---
--- Calls `func` on each tag in `table`, with user data `data`.
--- Note that the table may not be modified while iterating
--- over it (you can’t add/remove tags).
---
--- ---
---
---@param self Gtk.TextTagTable # a `GtkTextTagTable`
---@param func Gtk.TextTagTableForeach # a function to call on each tag
---@param data? userdata # user data
---@return nil
function Gtk.TextTagTable:foreach(func, data) end

--- # method Gtk.TextTagTable:get_size()
---
--- Returns the size of the table (number of tags)
---
--- ---
---
---@param self Gtk.TextTagTable # a `GtkTextTagTable`
---@return integer # number of tags in `table`
function Gtk.TextTagTable:get_size() end

--- # method Gtk.TextTagTable:lookup()
---
--- Look up a named tag.
---
--- ---
---
---@param self Gtk.TextTagTable # a `GtkTextTagTable`
---@param name string # name of a tag
---@return Gtk.TextTag # The tag, or `nil` if none by that name is in the table.
function Gtk.TextTagTable:lookup(name) end

--- # method Gtk.TextTagTable:remove()
---
--- Remove a tag from the table. If a `GtkTextBuffer` has `table` as its tag table,
--- the tag is removed from the buffer. The table’s reference to the tag is
--- removed, so the tag will end up destroyed if you don’t have a reference to
--- it.
---
--- ---
---
---@param self Gtk.TextTagTable # a `GtkTextTagTable`
---@param tag Gtk.TextTag # a `GtkTextTag`
---@return nil
function Gtk.TextTagTable:remove(tag) end

--- # function Gtk.TextTagTable.new()
---
--- Creates a new `GtkTextTagTable`. The table contains no tags by
--- default.
---
--- ---
---
---@return Gtk.TextTagTable # a new `GtkTextTagTable`
function Gtk.TextTagTable.new() end

--- # record Gtk.TextTagTableClass
---
---@class Gtk.TextTagTableClass
---@field parent_class GObject.ObjectClass
---@field tag_changed fun(table: Gtk.TextTagTable, tag: Gtk.TextTag, size_changed: (boolean|nil)): nil
---@field tag_added fun(table: Gtk.TextTagTable, tag: Gtk.TextTag): nil
---@field tag_removed fun(table: Gtk.TextTagTable, tag: Gtk.TextTag): nil
Gtk.TextTagTableClass = {}

---@alias Gtk.TextTagTableForeach fun(tag: Gtk.TextTag, data: userdata): nil

--- # record Gtk.TextTagTablePrivate
---
---@class Gtk.TextTagTablePrivate
Gtk.TextTagTablePrivate = {}

--- # class Gtk.TextView
---
--- You may wish to begin by reading the
--- [text widget conceptual overview](TextWidget.html)
--- which gives an overview of all the objects and data
--- types related to the text widget and how they work together.
--- 
--- # CSS nodes
--- 
--- ```plain
--- textview.view
--- ├── border.top
--- ├── border.left
--- ├── text
--- │   ╰── [selection]
--- ├── border.right
--- ├── border.bottom
--- ╰── [window.popup]
--- ```
--- 
--- GtkTextView has a main css node with name textview and style class .view,
--- and subnodes for each of the border windows, and the main text area,
--- with names border and text, respectively. The border nodes each get
--- one of the style classes .left, .right, .top or .bottom.
--- 
--- A node representing the selection will appear below the text node.
--- 
--- If a context menu is opened, the window node will appear as a subnode
--- of the main node.
---
--- ---
---
---@class Gtk.TextView : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Scrollable
---@field parent_instance Gtk.Container
---@field priv Gtk.TextViewPrivate
---@operator call: Gtk.TextView
Gtk.TextView = {}

--- # method Gtk.TextView:add_child_at_anchor()
---
--- Adds a child widget in the text buffer, at the given `anchor`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param child Gtk.Widget # a `GtkWidget`
---@param anchor Gtk.TextChildAnchor # a `GtkTextChildAnchor` in the `GtkTextBuffer` for `text_view`
---@return nil
function Gtk.TextView:add_child_at_anchor(child, anchor) end

--- # method Gtk.TextView:add_child_in_window()
---
--- Adds a child at fixed coordinates in one of the text widget's
--- windows.
--- 
--- The window must have nonzero size (see
--- `gtk_text_view_set_border_window_size()`). Note that the child
--- coordinates are given relative to scrolling. When
--- placing a child in `GTK_TEXT_WINDOW_WIDGET`, scrolling is
--- irrelevant, the child floats above all scrollable areas. But when
--- placing a child in one of the scrollable windows (border windows or
--- text window) it will move with the scrolling as needed.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param child Gtk.Widget # a `GtkWidget`
---@param which_window Gtk.TextWindowType # which window the child should appear in
---@param xpos integer # X position of child in window coordinates
---@param ypos integer # Y position of child in window coordinates
---@return nil
function Gtk.TextView:add_child_in_window(child, which_window, xpos, ypos) end

--- # method Gtk.TextView:backward_display_line()
---
--- Moves the given `iter` backward by one display (wrapped) line.
--- A display line is different from a paragraph. Paragraphs are
--- separated by newlines or other paragraph separator characters.
--- Display lines are created by line-wrapping a paragraph. If
--- wrapping is turned off, display lines and paragraphs will be the
--- same. Display lines are divided differently for each view, since
--- they depend on the view’s width; paragraphs are the same in all
--- views, since they depend on the contents of the `GtkTextBuffer`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param iter Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` was moved and is not on the end iterator
function Gtk.TextView:backward_display_line(iter) end

--- # method Gtk.TextView:backward_display_line_start()
---
--- Moves the given `iter` backward to the next display line start.
--- A display line is different from a paragraph. Paragraphs are
--- separated by newlines or other paragraph separator characters.
--- Display lines are created by line-wrapping a paragraph. If
--- wrapping is turned off, display lines and paragraphs will be the
--- same. Display lines are divided differently for each view, since
--- they depend on the view’s width; paragraphs are the same in all
--- views, since they depend on the contents of the `GtkTextBuffer`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param iter Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` was moved and is not on the end iterator
function Gtk.TextView:backward_display_line_start(iter) end

--- # method Gtk.TextView:buffer_to_window_coords()
---
--- Converts coordinate (`buffer_x`, `buffer_y`) to coordinates for the window
--- `win`, and stores the result in (`window_x`, `window_y`).
--- 
--- Note that you can’t convert coordinates for a nonexisting window (see
--- `gtk_text_view_set_border_window_size()`).
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param win Gtk.TextWindowType # a `GtkTextWindowType`, except %GTK_TEXT_WINDOW_PRIVATE
---@param buffer_x integer # buffer x coordinate
---@param buffer_y integer # buffer y coordinate
---@param window_x? integer # window x coordinate return location or `nil`
---@param window_y? integer # window y coordinate return location or `nil`
---@return nil
function Gtk.TextView:buffer_to_window_coords(win, buffer_x, buffer_y, window_x, window_y) end

--- # method Gtk.TextView:forward_display_line()
---
--- Moves the given `iter` forward by one display (wrapped) line.
--- A display line is different from a paragraph. Paragraphs are
--- separated by newlines or other paragraph separator characters.
--- Display lines are created by line-wrapping a paragraph. If
--- wrapping is turned off, display lines and paragraphs will be the
--- same. Display lines are divided differently for each view, since
--- they depend on the view’s width; paragraphs are the same in all
--- views, since they depend on the contents of the `GtkTextBuffer`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param iter Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` was moved and is not on the end iterator
function Gtk.TextView:forward_display_line(iter) end

--- # method Gtk.TextView:forward_display_line_end()
---
--- Moves the given `iter` forward to the next display line end.
--- A display line is different from a paragraph. Paragraphs are
--- separated by newlines or other paragraph separator characters.
--- Display lines are created by line-wrapping a paragraph. If
--- wrapping is turned off, display lines and paragraphs will be the
--- same. Display lines are divided differently for each view, since
--- they depend on the view’s width; paragraphs are the same in all
--- views, since they depend on the contents of the `GtkTextBuffer`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param iter Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` was moved and is not on the end iterator
function Gtk.TextView:forward_display_line_end(iter) end

--- # method Gtk.TextView:get_accepts_tab()
---
--- Returns whether pressing the Tab key inserts a tab characters.
--- `gtk_text_view_set_accepts_tab()`.
---
--- ---
---
---@param self Gtk.TextView # A `GtkTextView`
---@return (boolean|nil) # `true` if pressing the Tab key inserts a tab character, `false` if pressing the Tab key moves the keyboard focus.
function Gtk.TextView:get_accepts_tab() end

--- # method Gtk.TextView:get_border_window_size()
---
--- Gets the width of the specified border window. See
--- `gtk_text_view_set_border_window_size()`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param type Gtk.TextWindowType # window to return size from
---@return integer # width of window
function Gtk.TextView:get_border_window_size(type) end

--- # method Gtk.TextView:get_bottom_margin()
---
--- Gets the bottom margin for text in the `text_view`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return integer # bottom margin in pixels
function Gtk.TextView:get_bottom_margin() end

--- # method Gtk.TextView:get_buffer()
---
--- Returns the `GtkTextBuffer` being displayed by this text view.
--- The reference count on the buffer is not incremented; the caller
--- of this function won’t own a new reference.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return Gtk.TextBuffer # a `GtkTextBuffer`
function Gtk.TextView:get_buffer() end

--- # method Gtk.TextView:get_cursor_locations()
---
--- Given an `iter` within a text layout, determine the positions of the
--- strong and weak cursors if the insertion point is at that
--- iterator. The position of each cursor is stored as a zero-width
--- rectangle. The strong cursor location is the location where
--- characters of the directionality equal to the base direction of the
--- paragraph are inserted.  The weak cursor location is the location
--- where characters of the directionality opposite to the base
--- direction of the paragraph are inserted.
--- 
--- If `iter` is `nil`, the actual cursor position is used.
--- 
--- Note that if `iter` happens to be the actual cursor position, and
--- there is currently an IM preedit sequence being entered, the
--- returned locations will be adjusted to account for the preedit
--- cursor’s offset within the preedit sequence.
--- 
--- The rectangle position is in buffer coordinates; use
--- `gtk_text_view_buffer_to_window_coords()` to convert these
--- coordinates to coordinates for one of the windows in the text view.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param iter? Gtk.TextIter # a `GtkTextIter`
---@param strong? Gdk.Rectangle # location to store the strong cursor position (may be `nil`)
---@param weak? Gdk.Rectangle # location to store the weak cursor position (may be `nil`)
---@return nil
function Gtk.TextView:get_cursor_locations(iter, strong, weak) end

--- # method Gtk.TextView:get_cursor_visible()
---
--- Find out whether the cursor should be displayed.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return (boolean|nil) # whether the insertion mark is visible
function Gtk.TextView:get_cursor_visible() end

--- # method Gtk.TextView:get_default_attributes()
---
--- Obtains a copy of the default text attributes. These are the
--- attributes used for text unless a tag overrides them.
--- You’d typically pass the default attributes in to
--- `gtk_text_iter_get_attributes()` in order to get the
--- attributes in effect at a given text position.
--- 
--- The return value is a copy owned by the caller of this function,
--- and should be freed with `gtk_text_attributes_unref()`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return Gtk.TextAttributes # a new `GtkTextAttributes`
function Gtk.TextView:get_default_attributes() end

--- # method Gtk.TextView:get_editable()
---
--- Returns the default editability of the `GtkTextView`. Tags in the
--- buffer may override this setting for some ranges of text.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return (boolean|nil) # whether text is editable by default
function Gtk.TextView:get_editable() end

--- # method Gtk.TextView:get_hadjustment()
---
--- Gets the horizontal-scrolling `GtkAdjustment`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return Gtk.Adjustment # pointer to the horizontal `GtkAdjustment`
function Gtk.TextView:get_hadjustment() end

--- # method Gtk.TextView:get_indent()
---
--- Gets the default indentation of paragraphs in `text_view`.
--- Tags in the view’s buffer may override the default.
--- The indentation may be negative.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return integer # number of pixels of indentation
function Gtk.TextView:get_indent() end

--- # method Gtk.TextView:get_input_hints()
---
--- Gets the value of the `GtkTextView`:input-hints property.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return Gtk.InputHints
function Gtk.TextView:get_input_hints() end

--- # method Gtk.TextView:get_input_purpose()
---
--- Gets the value of the `GtkTextView`:input-purpose property.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return Gtk.InputPurpose
function Gtk.TextView:get_input_purpose() end

--- # method Gtk.TextView:get_iter_at_location()
---
--- Retrieves the iterator at buffer coordinates `x` and `y`. Buffer
--- coordinates are coordinates for the entire buffer, not just the
--- currently-displayed portion.  If you have coordinates from an
--- event, you have to convert those to buffer coordinates with
--- `gtk_text_view_window_to_buffer_coords()`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param iter Gtk.TextIter # a `GtkTextIter`
---@param x integer # x position, in buffer coordinates
---@param y integer # y position, in buffer coordinates
---@return (boolean|nil) # `true` if the position is over text
function Gtk.TextView:get_iter_at_location(iter, x, y) end

--- # method Gtk.TextView:get_iter_at_position()
---
--- Retrieves the iterator pointing to the character at buffer
--- coordinates `x` and `y`. Buffer coordinates are coordinates for
--- the entire buffer, not just the currently-displayed portion.
--- If you have coordinates from an event, you have to convert
--- those to buffer coordinates with
--- `gtk_text_view_window_to_buffer_coords()`.
--- 
--- Note that this is different from `gtk_text_view_get_iter_at_location()`,
--- which returns cursor locations, i.e. positions between
--- characters.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param iter Gtk.TextIter # a `GtkTextIter`
---@param trailing? integer # if non-`nil`, location to store an integer indicating where in the grapheme the user clicked. It will either be zero, or the number of characters in the grapheme. 0 represents the trailing edge of the grapheme.
---@param x integer # x position, in buffer coordinates
---@param y integer # y position, in buffer coordinates
---@return (boolean|nil) # `true` if the position is over text
function Gtk.TextView:get_iter_at_position(iter, trailing, x, y) end

--- # method Gtk.TextView:get_iter_location()
---
--- Gets a rectangle which roughly contains the character at `iter`.
--- The rectangle position is in buffer coordinates; use
--- `gtk_text_view_buffer_to_window_coords()` to convert these
--- coordinates to coordinates for one of the windows in the text view.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param iter Gtk.TextIter # a `GtkTextIter`
---@param location Gdk.Rectangle # bounds of the character at `iter`
---@return nil
function Gtk.TextView:get_iter_location(iter, location) end

--- # method Gtk.TextView:get_justification()
---
--- Gets the default justification of paragraphs in `text_view`.
--- Tags in the buffer may override the default.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return Gtk.Justification # default justification
function Gtk.TextView:get_justification() end

--- # method Gtk.TextView:get_left_margin()
---
--- Gets the default left margin size of paragraphs in the `text_view`.
--- Tags in the buffer may override the default.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return integer # left margin in pixels
function Gtk.TextView:get_left_margin() end

--- # method Gtk.TextView:get_line_at_y()
---
--- Gets the `GtkTextIter` at the start of the line containing
--- the coordinate `y`. `y` is in buffer coordinates, convert from
--- window coordinates with `gtk_text_view_window_to_buffer_coords()`.
--- If non-`nil`, `line_top` will be filled with the coordinate of the top
--- edge of the line.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param target_iter Gtk.TextIter # a `GtkTextIter`
---@param y integer # a y coordinate
---@param line_top integer # return location for top coordinate of the line
---@return nil
function Gtk.TextView:get_line_at_y(target_iter, y, line_top) end

--- # method Gtk.TextView:get_line_yrange()
---
--- Gets the y coordinate of the top of the line containing `iter`,
--- and the height of the line. The coordinate is a buffer coordinate;
--- convert to window coordinates with `gtk_text_view_buffer_to_window_coords()`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param iter Gtk.TextIter # a `GtkTextIter`
---@param y integer # return location for a y coordinate
---@param height integer # return location for a height
---@return nil
function Gtk.TextView:get_line_yrange(iter, y, height) end

--- # method Gtk.TextView:get_monospace()
---
--- Gets the value of the `GtkTextView`:monospace property.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return (boolean|nil) # `true` if monospace fonts are desired
function Gtk.TextView:get_monospace() end

--- # method Gtk.TextView:get_overwrite()
---
--- Returns whether the `GtkTextView` is in overwrite mode or not.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return (boolean|nil) # whether `text_view` is in overwrite mode or not.
function Gtk.TextView:get_overwrite() end

--- # method Gtk.TextView:get_pixels_above_lines()
---
--- Gets the default number of pixels to put above paragraphs.
--- Adding this function with `gtk_text_view_get_pixels_below_lines()`
--- is equal to the line space between each paragraph.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return integer # default number of pixels above paragraphs
function Gtk.TextView:get_pixels_above_lines() end

--- # method Gtk.TextView:get_pixels_below_lines()
---
--- Gets the value set by `gtk_text_view_set_pixels_below_lines()`.
--- 
--- The line space is the sum of the value returned by this function and the
--- value returned by `gtk_text_view_get_pixels_above_lines()`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return integer # default number of blank pixels below paragraphs
function Gtk.TextView:get_pixels_below_lines() end

--- # method Gtk.TextView:get_pixels_inside_wrap()
---
--- Gets the value set by `gtk_text_view_set_pixels_inside_wrap()`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return integer # default number of pixels of blank space between wrapped lines
function Gtk.TextView:get_pixels_inside_wrap() end

--- # method Gtk.TextView:get_right_margin()
---
--- Gets the default right margin for text in `text_view`. Tags
--- in the buffer may override the default.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return integer # right margin in pixels
function Gtk.TextView:get_right_margin() end

--- # method Gtk.TextView:get_tabs()
---
--- Gets the default tabs for `text_view`. Tags in the buffer may
--- override the defaults. The returned array will be `nil` if
--- “standard” (8-space) tabs are used. Free the return value
--- with `pango_tab_array_free()`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return Pango.TabArray # copy of default tab array, or `nil` if “standard" tabs are used; must be freed with `pango_tab_array_free()`.
function Gtk.TextView:get_tabs() end

--- # method Gtk.TextView:get_top_margin()
---
--- Gets the top margin for text in the `text_view`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return integer # top margin in pixels
function Gtk.TextView:get_top_margin() end

--- # method Gtk.TextView:get_vadjustment()
---
--- Gets the vertical-scrolling `GtkAdjustment`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return Gtk.Adjustment # pointer to the vertical `GtkAdjustment`
function Gtk.TextView:get_vadjustment() end

--- # method Gtk.TextView:get_visible_rect()
---
--- Fills `visible_rect` with the currently-visible
--- region of the buffer, in buffer coordinates. Convert to window coordinates
--- with `gtk_text_view_buffer_to_window_coords()`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param visible_rect Gdk.Rectangle # rectangle to fill
---@return nil
function Gtk.TextView:get_visible_rect(visible_rect) end

--- # method Gtk.TextView:get_window()
---
--- Retrieves the `GdkWindow` corresponding to an area of the text view;
--- possible windows include the overall widget window, child windows
--- on the left, right, top, bottom, and the window that displays the
--- text buffer. Windows are `nil` and nonexistent if their width or
--- height is 0, and are nonexistent before the widget has been
--- realized.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param win Gtk.TextWindowType # window to get
---@return Gdk.Window # a `GdkWindow`, or `nil`
function Gtk.TextView:get_window(win) end

--- # method Gtk.TextView:get_window_type()
---
--- Usually used to find out which window an event corresponds to.
--- 
--- If you connect to an event signal on `text_view`, this function
--- should be called on `event->window` to see which window it was.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param window Gdk.Window # a window type
---@return Gtk.TextWindowType # the window type.
function Gtk.TextView:get_window_type(window) end

--- # method Gtk.TextView:get_wrap_mode()
---
--- Gets the line wrapping for the view.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return Gtk.WrapMode # the line wrap setting
function Gtk.TextView:get_wrap_mode() end

--- # method Gtk.TextView:im_context_filter_keypress()
---
--- Allow the `GtkTextView` input method to internally handle key press
--- and release events. If this function returns `true`, then no further
--- processing should be done for this key event. See
--- `gtk_im_context_filter_keypress()`.
--- 
--- Note that you are expected to call this function from your handler
--- when overriding key event handling. This is needed in the case when
--- you need to insert your own key handling between the input method
--- and the default key event handling of the `GtkTextView`.
--- 
--- ```c
--- static gboolean
--- gtk_foo_bar_key_press_event (GtkWidget   *widget,
---                              GdkEventKey *event)
--- {
---   guint keyval;
--- 
---   gdk_event_get_keyval ((GdkEvent*)event, &keyval);
--- 
---   if (keyval == GDK_KEY_Return || keyval == GDK_KEY_KP_Enter)
---     {
---       if (gtk_text_view_im_context_filter_keypress (GTK_TEXT_VIEW (widget), event))
---         return TRUE;
---     }
--- 
---   // Do some stuff
--- 
---   return GTK_WIDGET_CLASS (gtk_foo_bar_parent_class)->key_press_event (widget, event);
--- }
--- ```
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param event Gdk.EventKey # the key event
---@return (boolean|nil) # `true` if the input method handled the key event.
function Gtk.TextView:im_context_filter_keypress(event) end

--- # method Gtk.TextView:move_child()
---
--- Updates the position of a child, as for `gtk_text_view_add_child_in_window()`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param child Gtk.Widget # child widget already added to the text view
---@param xpos integer # new X position in window coordinates
---@param ypos integer # new Y position in window coordinates
---@return nil
function Gtk.TextView:move_child(child, xpos, ypos) end

--- # method Gtk.TextView:move_mark_onscreen()
---
--- Moves a mark within the buffer so that it's
--- located within the currently-visible text area.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param mark Gtk.TextMark # a `GtkTextMark`
---@return (boolean|nil) # `true` if the mark moved (wasn’t already onscreen)
function Gtk.TextView:move_mark_onscreen(mark) end

--- # method Gtk.TextView:move_visually()
---
--- Move the iterator a given number of characters visually, treating
--- it as the strong cursor position. If `count` is positive, then the
--- new strong cursor position will be `count` positions to the right of
--- the old cursor position. If `count` is negative then the new strong
--- cursor position will be `count` positions to the left of the old
--- cursor position.
--- 
--- In the presence of bi-directional text, the correspondence
--- between logical and visual order will depend on the direction
--- of the current run, and there may be jumps when the cursor
--- is moved off of the end of a run.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param iter Gtk.TextIter # a `GtkTextIter`
---@param count integer # number of characters to move (negative moves left, positive moves right)
---@return (boolean|nil) # `true` if `iter` moved and is not on the end iterator
function Gtk.TextView:move_visually(iter, count) end

--- # method Gtk.TextView:place_cursor_onscreen()
---
--- Moves the cursor to the currently visible region of the
--- buffer, it it isn’t there already.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return (boolean|nil) # `true` if the cursor had to be moved.
function Gtk.TextView:place_cursor_onscreen() end

--- # method Gtk.TextView:reset_cursor_blink()
---
--- Ensures that the cursor is shown (i.e. not in an 'off' blink
--- interval) and resets the time that it will stay blinking (or
--- visible, in case blinking is disabled).
--- 
--- This function should be called in response to user input
--- (e.g. from derived classes that override the textview's
--- `GtkWidget`::key-press-event handler).
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return nil
function Gtk.TextView:reset_cursor_blink() end

--- # method Gtk.TextView:reset_im_context()
---
--- Reset the input method context of the text view if needed.
--- 
--- This can be necessary in the case where modifying the buffer
--- would confuse on-going input method behavior.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@return nil
function Gtk.TextView:reset_im_context() end

--- # method Gtk.TextView:scroll_mark_onscreen()
---
--- Scrolls `text_view` the minimum distance such that `mark` is contained
--- within the visible area of the widget.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param mark Gtk.TextMark # a mark in the buffer for `text_view`
---@return nil
function Gtk.TextView:scroll_mark_onscreen(mark) end

--- # method Gtk.TextView:scroll_to_iter()
---
--- Scrolls `text_view` so that `iter` is on the screen in the position
--- indicated by `xalign` and `yalign`. An alignment of 0.0 indicates
--- left or top, 1.0 indicates right or bottom, 0.5 means center.
--- If `use_align` is `false`, the text scrolls the minimal distance to
--- get the mark onscreen, possibly not scrolling at all. The effective
--- screen for purposes of this function is reduced by a margin of size
--- `within_margin`.
--- 
--- Note that this function uses the currently-computed height of the
--- lines in the text buffer. Line heights are computed in an idle
--- handler; so this function may not have the desired effect if it’s
--- called before the height computations. To avoid oddness, consider
--- using `gtk_text_view_scroll_to_mark()` which saves a point to be
--- scrolled to after line validation.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param iter Gtk.TextIter # a `GtkTextIter`
---@param within_margin number # margin as a [0.0,0.5) fraction of screen size
---@param use_align (boolean|nil) # whether to use alignment arguments (if `false`, just get the mark onscreen)
---@param xalign number # horizontal alignment of mark within visible area
---@param yalign number # vertical alignment of mark within visible area
---@return (boolean|nil) # `true` if scrolling occurred
function Gtk.TextView:scroll_to_iter(iter, within_margin, use_align, xalign, yalign) end

--- # method Gtk.TextView:scroll_to_mark()
---
--- Scrolls `text_view` so that `mark` is on the screen in the position
--- indicated by `xalign` and `yalign`. An alignment of 0.0 indicates
--- left or top, 1.0 indicates right or bottom, 0.5 means center.
--- If `use_align` is `false`, the text scrolls the minimal distance to
--- get the mark onscreen, possibly not scrolling at all. The effective
--- screen for purposes of this function is reduced by a margin of size
--- `within_margin`.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param mark Gtk.TextMark # a `GtkTextMark`
---@param within_margin number # margin as a [0.0,0.5) fraction of screen size
---@param use_align (boolean|nil) # whether to use alignment arguments (if `false`, just get the mark onscreen)
---@param xalign number # horizontal alignment of mark within visible area
---@param yalign number # vertical alignment of mark within visible area
---@return nil
function Gtk.TextView:scroll_to_mark(mark, within_margin, use_align, xalign, yalign) end

--- # method Gtk.TextView:set_accepts_tab()
---
--- Sets the behavior of the text widget when the Tab key is pressed.
--- If `accepts_tab` is `true`, a tab character is inserted. If `accepts_tab`
--- is `false` the keyboard focus is moved to the next widget in the focus
--- chain.
---
--- ---
---
---@param self Gtk.TextView # A `GtkTextView`
---@param accepts_tab (boolean|nil) # `true` if pressing the Tab key should insert a tab character, `false`, if pressing the Tab key should move the keyboard focus.
---@return nil
function Gtk.TextView:set_accepts_tab(accepts_tab) end

--- # method Gtk.TextView:set_border_window_size()
---
--- Sets the width of %GTK_TEXT_WINDOW_LEFT or %GTK_TEXT_WINDOW_RIGHT,
--- or the height of %GTK_TEXT_WINDOW_TOP or %GTK_TEXT_WINDOW_BOTTOM.
--- Automatically destroys the corresponding window if the size is set
--- to 0, and creates the window if the size is set to non-zero.  This
--- function can only be used for the “border windows”, and it won’t
--- work with %GTK_TEXT_WINDOW_WIDGET, %GTK_TEXT_WINDOW_TEXT, or
--- %GTK_TEXT_WINDOW_PRIVATE.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param type Gtk.TextWindowType # window to affect
---@param size integer # width or height of the window
---@return nil
function Gtk.TextView:set_border_window_size(type, size) end

--- # method Gtk.TextView:set_bottom_margin()
---
--- Sets the bottom margin for text in `text_view`.
--- 
--- Note that this function is confusingly named.
--- In CSS terms, the value set here is padding.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param bottom_margin integer # bottom margin in pixels
---@return nil
function Gtk.TextView:set_bottom_margin(bottom_margin) end

--- # method Gtk.TextView:set_buffer()
---
--- Sets `buffer` as the buffer being displayed by `text_view`. The previous
--- buffer displayed by the text view is unreferenced, and a reference is
--- added to `buffer`. If you owned a reference to `buffer` before passing it
--- to this function, you must remove that reference yourself; `GtkTextView`
--- will not “adopt” it.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param buffer? Gtk.TextBuffer # a `GtkTextBuffer`
---@return nil
function Gtk.TextView:set_buffer(buffer) end

--- # method Gtk.TextView:set_cursor_visible()
---
--- Toggles whether the insertion point should be displayed. A buffer with
--- no editable text probably shouldn’t have a visible cursor, so you may
--- want to turn the cursor off.
--- 
--- Note that this property may be overridden by the
--- `GtkSettings`:gtk-keynave-use-caret settings.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param setting (boolean|nil) # whether to show the insertion cursor
---@return nil
function Gtk.TextView:set_cursor_visible(setting) end

--- # method Gtk.TextView:set_editable()
---
--- Sets the default editability of the `GtkTextView`. You can override
--- this default setting with tags in the buffer, using the “editable”
--- attribute of tags.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param setting (boolean|nil) # whether it’s editable
---@return nil
function Gtk.TextView:set_editable(setting) end

--- # method Gtk.TextView:set_indent()
---
--- Sets the default indentation for paragraphs in `text_view`.
--- Tags in the buffer may override the default.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param indent integer # indentation in pixels
---@return nil
function Gtk.TextView:set_indent(indent) end

--- # method Gtk.TextView:set_input_hints()
---
--- Sets the `GtkTextView`:input-hints property, which
--- allows input methods to fine-tune their behaviour.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param hints Gtk.InputHints # the hints
---@return nil
function Gtk.TextView:set_input_hints(hints) end

--- # method Gtk.TextView:set_input_purpose()
---
--- Sets the `GtkTextView`:input-purpose property which
--- can be used by on-screen keyboards and other input
--- methods to adjust their behaviour.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param purpose Gtk.InputPurpose # the purpose
---@return nil
function Gtk.TextView:set_input_purpose(purpose) end

--- # method Gtk.TextView:set_justification()
---
--- Sets the default justification of text in `text_view`.
--- Tags in the view’s buffer may override the default.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param justification Gtk.Justification # justification
---@return nil
function Gtk.TextView:set_justification(justification) end

--- # method Gtk.TextView:set_left_margin()
---
--- Sets the default left margin for text in `text_view`.
--- Tags in the buffer may override the default.
--- 
--- Note that this function is confusingly named.
--- In CSS terms, the value set here is padding.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param left_margin integer # left margin in pixels
---@return nil
function Gtk.TextView:set_left_margin(left_margin) end

--- # method Gtk.TextView:set_monospace()
---
--- Sets the `GtkTextView`:monospace property, which
--- indicates that the text view should use monospace
--- fonts.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param monospace (boolean|nil) # `true` to request monospace styling
---@return nil
function Gtk.TextView:set_monospace(monospace) end

--- # method Gtk.TextView:set_overwrite()
---
--- Changes the `GtkTextView` overwrite mode.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param overwrite (boolean|nil) # `true` to turn on overwrite mode, `false` to turn it off
---@return nil
function Gtk.TextView:set_overwrite(overwrite) end

--- # method Gtk.TextView:set_pixels_above_lines()
---
--- Sets the default number of blank pixels above paragraphs in `text_view`.
--- Tags in the buffer for `text_view` may override the defaults.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param pixels_above_lines integer # pixels above paragraphs
---@return nil
function Gtk.TextView:set_pixels_above_lines(pixels_above_lines) end

--- # method Gtk.TextView:set_pixels_below_lines()
---
--- Sets the default number of pixels of blank space
--- to put below paragraphs in `text_view`. May be overridden
--- by tags applied to `text_view`’s buffer.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param pixels_below_lines integer # pixels below paragraphs
---@return nil
function Gtk.TextView:set_pixels_below_lines(pixels_below_lines) end

--- # method Gtk.TextView:set_pixels_inside_wrap()
---
--- Sets the default number of pixels of blank space to leave between
--- display/wrapped lines within a paragraph. May be overridden by
--- tags in `text_view`’s buffer.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param pixels_inside_wrap integer # default number of pixels between wrapped lines
---@return nil
function Gtk.TextView:set_pixels_inside_wrap(pixels_inside_wrap) end

--- # method Gtk.TextView:set_right_margin()
---
--- Sets the default right margin for text in the text view.
--- Tags in the buffer may override the default.
--- 
--- Note that this function is confusingly named.
--- In CSS terms, the value set here is padding.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param right_margin integer # right margin in pixels
---@return nil
function Gtk.TextView:set_right_margin(right_margin) end

--- # method Gtk.TextView:set_tabs()
---
--- Sets the default tab stops for paragraphs in `text_view`.
--- Tags in the buffer may override the default.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param tabs Pango.TabArray # tabs as a `PangoTabArray`
---@return nil
function Gtk.TextView:set_tabs(tabs) end

--- # method Gtk.TextView:set_top_margin()
---
--- Sets the top margin for text in `text_view`.
--- 
--- Note that this function is confusingly named.
--- In CSS terms, the value set here is padding.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param top_margin integer # top margin in pixels
---@return nil
function Gtk.TextView:set_top_margin(top_margin) end

--- # method Gtk.TextView:set_wrap_mode()
---
--- Sets the line wrapping for the view.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param wrap_mode Gtk.WrapMode # a `GtkWrapMode`
---@return nil
function Gtk.TextView:set_wrap_mode(wrap_mode) end

--- # method Gtk.TextView:starts_display_line()
---
--- Determines whether `iter` is at the start of a display line.
--- See `gtk_text_view_forward_display_line()` for an explanation of
--- display lines vs. paragraphs.
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param iter Gtk.TextIter # a `GtkTextIter`
---@return (boolean|nil) # `true` if `iter` begins a wrapped line
function Gtk.TextView:starts_display_line(iter) end

--- # method Gtk.TextView:window_to_buffer_coords()
---
--- Converts coordinates on the window identified by `win` to buffer
--- coordinates, storing the result in (`buffer_x`,`buffer_y`).
--- 
--- Note that you can’t convert coordinates for a nonexisting window (see
--- `gtk_text_view_set_border_window_size()`).
---
--- ---
---
---@param self Gtk.TextView # a `GtkTextView`
---@param win Gtk.TextWindowType # a `GtkTextWindowType` except %GTK_TEXT_WINDOW_PRIVATE
---@param window_x integer # window x coordinate
---@param window_y integer # window y coordinate
---@param buffer_x? integer # buffer x coordinate return location or `nil`
---@param buffer_y? integer # buffer y coordinate return location or `nil`
---@return nil
function Gtk.TextView:window_to_buffer_coords(win, window_x, window_y, buffer_x, buffer_y) end

--- # function Gtk.TextView.new()
---
--- Creates a new `GtkTextView`. If you don’t call `gtk_text_view_set_buffer()`
--- before using the text view, an empty default buffer will be created
--- for you. Get the buffer with `gtk_text_view_get_buffer()`. If you want
--- to specify your own buffer, consider `gtk_text_view_new_with_buffer()`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkTextView`
function Gtk.TextView.new() end

--- # function Gtk.TextView.new_with_buffer()
---
--- Creates a new `GtkTextView` widget displaying the buffer
--- `buffer`. One buffer can be shared among many widgets.
--- `buffer` may be `nil` to create a default buffer, in which case
--- this function is equivalent to `gtk_text_view_new()`. The
--- text view adds its own reference count to the buffer; it does not
--- take over an existing reference.
---
--- ---
---
---@param buffer Gtk.TextBuffer # a `GtkTextBuffer`
---@return Gtk.Widget # a new `GtkTextView`.
function Gtk.TextView.new_with_buffer(buffer) end

--- # class Gtk.TextViewAccessible
---
---@class Gtk.TextViewAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component, Gtk.Atk.EditableText, Gtk.Atk.StreamableContent, Gtk.Atk.Text
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.TextViewAccessiblePrivate
Gtk.TextViewAccessible = {}

--- # record Gtk.TextViewAccessibleClass
---
---@class Gtk.TextViewAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.TextViewAccessibleClass = {}

--- # record Gtk.TextViewAccessiblePrivate
---
---@class Gtk.TextViewAccessiblePrivate
Gtk.TextViewAccessiblePrivate = {}

--- # record Gtk.TextViewClass
---
---@class Gtk.TextViewClass
---@field parent_class Gtk.ContainerClass # The object class structure needs to be the first
---@field populate_popup fun(text_view: Gtk.TextView, popup: Gtk.Widget): nil
---@field move_cursor fun(text_view: Gtk.TextView, step: Gtk.MovementStep, count: integer, extend_selection: (boolean|nil)): nil
---@field set_anchor fun(text_view: Gtk.TextView): nil
---@field insert_at_cursor fun(text_view: Gtk.TextView, str: string): nil
---@field delete_from_cursor fun(text_view: Gtk.TextView, type: Gtk.DeleteType, count: integer): nil
---@field backspace fun(text_view: Gtk.TextView): nil
---@field cut_clipboard fun(text_view: Gtk.TextView): nil
---@field copy_clipboard fun(text_view: Gtk.TextView): nil
---@field paste_clipboard fun(text_view: Gtk.TextView): nil
---@field toggle_overwrite fun(text_view: Gtk.TextView): nil
---@field draw_layer fun(text_view: Gtk.TextView, layer: Gtk.TextViewLayer, cr: cairo.Context): nil
---@field extend_selection fun(text_view: Gtk.TextView, granularity: Gtk.TextExtendSelection, location: Gtk.TextIter, start: Gtk.TextIter, end: Gtk.TextIter): (boolean|nil)
---@field insert_emoji fun(text_view: Gtk.TextView): nil
Gtk.TextViewClass = {}

---@enum Gtk.TextViewLayer
Gtk.TextViewLayer = {}

--- # record Gtk.TextViewPrivate
---
---@class Gtk.TextViewPrivate
Gtk.TextViewPrivate = {}

---@enum Gtk.TextWindowType
Gtk.TextWindowType = {}

--- # record Gtk.ThemeEngine
---
---@class Gtk.ThemeEngine
Gtk.ThemeEngine = {}

--- # class Gtk.ThemingEngine
---
--- `GtkThemingEngine` was the object used for rendering themed content
--- in GTK+ widgets. It used to allow overriding GTK+'s default
--- implementation of rendering functions by allowing engines to be
--- loaded as modules.
--- 
--- `GtkThemingEngine` has been deprecated in GTK+ 3.14 and will be
--- ignored for rendering. The advancements in CSS theming are good
--- enough to allow themers to achieve their goals without the need
--- to modify source code.
---
--- ---
---
---@class Gtk.ThemingEngine : GObject.Object
---@field parent_object GObject.Object
---@field priv Gtk.ThemingEnginePrivate
Gtk.ThemingEngine = {}

--- # method Gtk.ThemingEngine:get_background_color()
---
--- Gets the background color for a given state.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@param state Gtk.StateFlags # state to retrieve the color for
---@param color Gdk.RGBA # return value for the background color
---@return nil
function Gtk.ThemingEngine:get_background_color(state, color) end

--- # method Gtk.ThemingEngine:get_border()
---
--- Gets the border for a given state as a `GtkBorder`.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@param state Gtk.StateFlags # state to retrieve the border for
---@param border Gtk.Border # return value for the border settings
---@return nil
function Gtk.ThemingEngine:get_border(state, border) end

--- # method Gtk.ThemingEngine:get_border_color()
---
--- Gets the border color for a given state.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@param state Gtk.StateFlags # state to retrieve the color for
---@param color Gdk.RGBA # return value for the border color
---@return nil
function Gtk.ThemingEngine:get_border_color(state, color) end

--- # method Gtk.ThemingEngine:get_color()
---
--- Gets the foreground color for a given state.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@param state Gtk.StateFlags # state to retrieve the color for
---@param color Gdk.RGBA # return value for the foreground color
---@return nil
function Gtk.ThemingEngine:get_color(state, color) end

--- # method Gtk.ThemingEngine:get_direction()
---
--- Returns the widget direction used for rendering.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@return Gtk.TextDirection # the widget direction
function Gtk.ThemingEngine:get_direction() end

--- # method Gtk.ThemingEngine:get_font()
---
--- Returns the font description for a given state.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@param state Gtk.StateFlags # state to retrieve the font for
---@return Pango.FontDescription # the `PangoFontDescription` for the given state. This object is owned by GTK+ and should not be freed.
function Gtk.ThemingEngine:get_font(state) end

--- # method Gtk.ThemingEngine:get_junction_sides()
---
--- Returns the widget direction used for rendering.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@return Gtk.JunctionSides # the widget direction
function Gtk.ThemingEngine:get_junction_sides() end

--- # method Gtk.ThemingEngine:get_margin()
---
--- Gets the margin for a given state as a `GtkBorder`.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@param state Gtk.StateFlags # state to retrieve the border for
---@param margin Gtk.Border # return value for the margin settings
---@return nil
function Gtk.ThemingEngine:get_margin(state, margin) end

--- # method Gtk.ThemingEngine:get_padding()
---
--- Gets the padding for a given state as a `GtkBorder`.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@param state Gtk.StateFlags # state to retrieve the padding for
---@param padding Gtk.Border # return value for the padding settings
---@return nil
function Gtk.ThemingEngine:get_padding(state, padding) end

--- # method Gtk.ThemingEngine:get_path()
---
--- Returns the widget path used for style matching.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@return Gtk.WidgetPath # A `GtkWidgetPath`
function Gtk.ThemingEngine:get_path() end

--- # method Gtk.ThemingEngine:get_property()
---
--- Gets a property value as retrieved from the style settings that apply
--- to the currently rendered element.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@param property string # the property name
---@param state Gtk.StateFlags # state to retrieve the value for
---@param value GObject.Value # return location for the property value, you must free this memory using `g_value_unset()` once you are done with it.
---@return nil
function Gtk.ThemingEngine:get_property(property, state, value) end

--- # method Gtk.ThemingEngine:get_screen()
---
--- Returns the `GdkScreen` to which `engine` currently rendering to.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@return Gdk.Screen # a `GdkScreen`, or `nil`.
function Gtk.ThemingEngine:get_screen() end

--- # method Gtk.ThemingEngine:get_state()
---
--- returns the state used when rendering.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@return Gtk.StateFlags # the state flags
function Gtk.ThemingEngine:get_state() end

--- # method Gtk.ThemingEngine:get_style_property()
---
--- Gets the value for a widget style property.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@param property_name string # the name of the widget style property
---@param value GObject.Value # Return location for the property value, free with `g_value_unset()` after use.
---@return nil
function Gtk.ThemingEngine:get_style_property(property_name, value) end

--- # method Gtk.ThemingEngine:has_class()
---
--- Returns `true` if the currently rendered contents have
--- defined the given class name.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@param style_class string # class name to look up
---@return (boolean|nil) # `true` if `engine` has `class_name` defined
function Gtk.ThemingEngine:has_class(style_class) end

--- # method Gtk.ThemingEngine:has_region()
---
--- Returns `true` if the currently rendered contents have the
--- region defined. If `flags_return` is not `nil`, it is set
--- to the flags affecting the region.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@param style_region string # a region name
---@param flags? Gtk.RegionFlags # return location for region flags
---@return (boolean|nil) # `true` if region is defined
function Gtk.ThemingEngine:has_region(style_region, flags) end

--- # method Gtk.ThemingEngine:lookup_color()
---
--- Looks up and resolves a color name in the current style’s color map.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@param color_name string # color name to lookup
---@param color Gdk.RGBA # Return location for the looked up color
---@return (boolean|nil) # `true` if `color_name` was found and resolved, `false` otherwise
function Gtk.ThemingEngine:lookup_color(color_name, color) end

--- # method Gtk.ThemingEngine:state_is_running()
---
--- Returns `true` if there is a transition animation running for the
--- current region (see `gtk_style_context_push_animatable_region()`).
--- 
--- If `progress` is not `nil`, the animation progress will be returned
--- there, 0.0 means the state is closest to being `false`, while 1.0 means
--- it’s closest to being `true`. This means transition animations will
--- run from 0 to 1 when `state` is being set to `true` and from 1 to 0 when
--- it’s being set to `false`.
---
--- ---
---
---@param self Gtk.ThemingEngine # a `GtkThemingEngine`
---@param state Gtk.StateType # a widget state
---@param progress number # return location for the transition progress
---@return (boolean|nil) # `true` if there is a running transition animation for `state`.
function Gtk.ThemingEngine:state_is_running(state, progress) end

--- # function Gtk.ThemingEngine.load()
---
--- Loads and initializes a theming engine module from the
--- standard directories.
---
--- ---
---
---@param name string # Theme engine name to load
---@return Gtk.ThemingEngine # A theming engine, or `nil` if the engine `name` doesn’t exist.
function Gtk.ThemingEngine.load(name) end

--- # record Gtk.ThemingEngineClass
---
--- Base class for theming engines.
---
--- ---
---
---@class Gtk.ThemingEngineClass
---@field parent_class GObject.ObjectClass # The parent class.
---@field render_line fun(engine: Gtk.ThemingEngine, cr: cairo.Context, x0: number, y0: number, x1: number, y1: number): nil
---@field render_background fun(engine: Gtk.ThemingEngine, cr: cairo.Context, x: number, y: number, width: number, height: number): nil
---@field render_frame fun(engine: Gtk.ThemingEngine, cr: cairo.Context, x: number, y: number, width: number, height: number): nil
---@field render_frame_gap fun(engine: Gtk.ThemingEngine, cr: cairo.Context, x: number, y: number, width: number, height: number, gap_side: Gtk.PositionType, xy0_gap: number, xy1_gap: number): nil
---@field render_extension fun(engine: Gtk.ThemingEngine, cr: cairo.Context, x: number, y: number, width: number, height: number, gap_side: Gtk.PositionType): nil
---@field render_check fun(engine: Gtk.ThemingEngine, cr: cairo.Context, x: number, y: number, width: number, height: number): nil
---@field render_option fun(engine: Gtk.ThemingEngine, cr: cairo.Context, x: number, y: number, width: number, height: number): nil
---@field render_arrow fun(engine: Gtk.ThemingEngine, cr: cairo.Context, angle: number, x: number, y: number, size: number): nil
---@field render_expander fun(engine: Gtk.ThemingEngine, cr: cairo.Context, x: number, y: number, width: number, height: number): nil
---@field render_focus fun(engine: Gtk.ThemingEngine, cr: cairo.Context, x: number, y: number, width: number, height: number): nil
---@field render_layout fun(engine: Gtk.ThemingEngine, cr: cairo.Context, x: number, y: number, layout: Pango.Layout): nil
---@field render_slider fun(engine: Gtk.ThemingEngine, cr: cairo.Context, x: number, y: number, width: number, height: number, orientation: Gtk.Orientation): nil
---@field render_handle fun(engine: Gtk.ThemingEngine, cr: cairo.Context, x: number, y: number, width: number, height: number): nil
---@field render_activity fun(engine: Gtk.ThemingEngine, cr: cairo.Context, x: number, y: number, width: number, height: number): nil
---@field render_icon fun(engine: Gtk.ThemingEngine, cr: cairo.Context, pixbuf: GdkPixbuf.Pixbuf, x: number, y: number): nil
---@field render_icon_surface fun(engine: Gtk.ThemingEngine, cr: cairo.Context, surface: cairo.Surface, x: number, y: number): nil
---@field padding unknown[]
Gtk.ThemingEngineClass = {}

--- # record Gtk.ThemingEnginePrivate
---
---@class Gtk.ThemingEnginePrivate
Gtk.ThemingEnginePrivate = {}

---@alias Gtk.TickCallback fun(widget: Gtk.Widget, frame_clock: Gdk.FrameClock, user_data: userdata): (boolean|nil)

--- # class Gtk.ToggleAction
---
--- A `GtkToggleAction` corresponds roughly to a `GtkCheckMenuItem`. It has an
--- “active” state specifying whether the action has been checked or not.
---
--- ---
---
---@class Gtk.ToggleAction : Gtk.Action, Gtk.Buildable
---@field parent Gtk.Action
---@field private_data Gtk.ToggleActionPrivate
---@operator call: Gtk.ToggleAction
Gtk.ToggleAction = {}

--- # method Gtk.ToggleAction:get_active()
---
--- Returns the checked state of the toggle action.
---
--- ---
---
---@param self Gtk.ToggleAction # the action object
---@return (boolean|nil) # the checked state of the toggle action
function Gtk.ToggleAction:get_active() end

--- # method Gtk.ToggleAction:get_draw_as_radio()
---
--- Returns whether the action should have proxies like a radio action.
---
--- ---
---
---@param self Gtk.ToggleAction # the action object
---@return (boolean|nil) # whether the action should have proxies like a radio action.
function Gtk.ToggleAction:get_draw_as_radio() end

--- # method Gtk.ToggleAction:set_active()
---
--- Sets the checked state on the toggle action.
---
--- ---
---
---@param self Gtk.ToggleAction # the action object
---@param is_active (boolean|nil) # whether the action should be checked or not
---@return nil
function Gtk.ToggleAction:set_active(is_active) end

--- # method Gtk.ToggleAction:set_draw_as_radio()
---
--- Sets whether the action should have proxies like a radio action.
---
--- ---
---
---@param self Gtk.ToggleAction # the action object
---@param draw_as_radio (boolean|nil) # whether the action should have proxies like a radio action
---@return nil
function Gtk.ToggleAction:set_draw_as_radio(draw_as_radio) end

--- # method Gtk.ToggleAction:toggled()
---
--- Emits the “toggled” signal on the toggle action.
---
--- ---
---
---@param self Gtk.ToggleAction # the action object
---@return nil
function Gtk.ToggleAction:toggled() end

--- # function Gtk.ToggleAction.new()
---
--- Creates a new `GtkToggleAction` object. To add the action to
--- a `GtkActionGroup` and set the accelerator for the action,
--- call `gtk_action_group_add_action_with_accel()`.
---
--- ---
---
---@param name string # A unique name for the action
---@param label? string # The label displayed in menu items and on buttons, or `nil`
---@param tooltip? string # A tooltip for the action, or `nil`
---@param stock_id? string # The stock icon to display in widgets representing the action, or `nil`
---@return Gtk.ToggleAction # a new `GtkToggleAction`
function Gtk.ToggleAction.new(name, label, tooltip, stock_id) end

--- # record Gtk.ToggleActionClass
---
---@class Gtk.ToggleActionClass
---@field parent_class Gtk.ActionClass
---@field toggled fun(action: Gtk.ToggleAction): nil
Gtk.ToggleActionClass = {}

--- # record Gtk.ToggleActionEntry
---
--- `GtkToggleActionEntry` structs are used with
--- `gtk_action_group_add_toggle_actions()` to construct toggle actions.
---
--- ---
---
---@class Gtk.ToggleActionEntry
---@field name string # The name of the action.
---@field stock_id string # The stock id for the action, or the name of an icon from the icon theme.
---@field label string # The label for the action. This field should typically be marked for translation, see `gtk_action_group_set_translation_domain()`.
---@field accelerator string # The accelerator for the action, in the format understood by `gtk_accelerator_parse()`.
---@field tooltip string # The tooltip for the action. This field should typically be marked for translation, see `gtk_action_group_set_translation_domain()`.
---@field callback GObject.Callback # The function to call when the action is activated.
---@field is_active (boolean|nil) # The initial state of the toggle action.
Gtk.ToggleActionEntry = {}

--- # record Gtk.ToggleActionPrivate
---
---@class Gtk.ToggleActionPrivate
Gtk.ToggleActionPrivate = {}

--- # class Gtk.ToggleButton
---
--- A `GtkToggleButton` is a `GtkButton` which will remain “pressed-in” when
--- clicked. Clicking again will cause the toggle button to return to its
--- normal state.
--- 
--- A toggle button is created by calling either `gtk_toggle_button_new()` or
--- `gtk_toggle_button_new_with_label()`. If using the former, it is advisable to
--- pack a widget, (such as a `GtkLabel` and/or a `GtkImage`), into the toggle
--- button’s container. (See `GtkButton` for more information).
--- 
--- The state of a `GtkToggleButton` can be set specifically using
--- `gtk_toggle_button_set_active()`, and retrieved using
--- `gtk_toggle_button_get_active()`.
--- 
--- To simply switch the state of a toggle button, use `gtk_toggle_button_toggled()`.
--- 
--- # CSS nodes
--- 
--- GtkToggleButton has a single CSS node with name button. To differentiate
--- it from a plain `GtkButton`, it gets the .toggle style class.
--- 
--- ## Creating two `GtkToggleButton` widgets.
--- 
--- ```c
--- static void output_state (GtkToggleButton *source, gpointer user_data) {
---   printf ("Active: %d\n", gtk_toggle_button_get_active (source));
--- }
--- 
--- void make_toggles (void) {
---   GtkWidget *window, *toggle1, *toggle2;
---   GtkWidget *box;
---   const char *text;
--- 
---   window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
---   box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 12);
--- 
---   text = "Hi, I’m a toggle button.";
---   toggle1 = gtk_toggle_button_new_with_label (text);
--- 
---   // Makes this toggle button invisible
---   gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (toggle1),
---                               TRUE);
--- 
---   g_signal_connect (toggle1, "toggled",
---                     G_CALLBACK (output_state),
---                     NULL);
---   gtk_container_add (GTK_CONTAINER (box), toggle1);
--- 
---   text = "Hi, I’m a toggle button.";
---   toggle2 = gtk_toggle_button_new_with_label (text);
---   gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (toggle2),
---                               FALSE);
---   g_signal_connect (toggle2, "toggled",
---                     G_CALLBACK (output_state),
---                     NULL);
---   gtk_container_add (GTK_CONTAINER (box), toggle2);
--- 
---   gtk_container_add (GTK_CONTAINER (window), box);
---   gtk_widget_show_all (window);
--- }
--- ```
---
--- ---
---
---@class Gtk.ToggleButton : Gtk.Button, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field button Gtk.Button
---@field priv Gtk.ToggleButtonPrivate
---@operator call: Gtk.ToggleButton
Gtk.ToggleButton = {}

--- # method Gtk.ToggleButton:get_active()
---
--- Queries a `GtkToggleButton` and returns its current state. Returns `true` if
--- the toggle button is pressed in and `false` if it is raised.
---
--- ---
---
---@param self Gtk.ToggleButton # a `GtkToggleButton`.
---@return (boolean|nil) # a `gboolean` value.
function Gtk.ToggleButton:get_active() end

--- # method Gtk.ToggleButton:get_inconsistent()
---
--- Gets the value set by `gtk_toggle_button_set_inconsistent()`.
---
--- ---
---
---@param self Gtk.ToggleButton # a `GtkToggleButton`
---@return (boolean|nil) # `true` if the button is displayed as inconsistent, `false` otherwise
function Gtk.ToggleButton:get_inconsistent() end

--- # method Gtk.ToggleButton:get_mode()
---
--- Retrieves whether the button is displayed as a separate indicator
--- and label. See `gtk_toggle_button_set_mode()`.
---
--- ---
---
---@param self Gtk.ToggleButton # a `GtkToggleButton`
---@return (boolean|nil) # `true` if the togglebutton is drawn as a separate indicator and label.
function Gtk.ToggleButton:get_mode() end

--- # method Gtk.ToggleButton:set_active()
---
--- Sets the status of the toggle button. Set to `true` if you want the
--- GtkToggleButton to be “pressed in”, and `false` to raise it.
--- This action causes the `GtkToggleButton`::toggled signal and the
--- `GtkButton`::clicked signal to be emitted.
---
--- ---
---
---@param self Gtk.ToggleButton # a `GtkToggleButton`.
---@param is_active (boolean|nil) # `true` or `false`.
---@return nil
function Gtk.ToggleButton:set_active(is_active) end

--- # method Gtk.ToggleButton:set_inconsistent()
---
--- If the user has selected a range of elements (such as some text or
--- spreadsheet cells) that are affected by a toggle button, and the
--- current values in that range are inconsistent, you may want to
--- display the toggle in an “in between” state. This function turns on
--- “in between” display.  Normally you would turn off the inconsistent
--- state again if the user toggles the toggle button. This has to be
--- done manually, `gtk_toggle_button_set_inconsistent()` only affects
--- visual appearance, it doesn’t affect the semantics of the button.
---
--- ---
---
---@param self Gtk.ToggleButton # a `GtkToggleButton`
---@param setting (boolean|nil) # `true` if state is inconsistent
---@return nil
function Gtk.ToggleButton:set_inconsistent(setting) end

--- # method Gtk.ToggleButton:set_mode()
---
--- Sets whether the button is displayed as a separate indicator and label.
--- You can call this function on a checkbutton or a radiobutton with
--- `draw_indicator` = `false` to make the button look like a normal button.
--- 
--- This can be used to create linked strip of buttons that work like
--- a `GtkStackSwitcher`.
--- 
--- This function only affects instances of classes like `GtkCheckButton`
--- and `GtkRadioButton` that derive from `GtkToggleButton`,
--- not instances of `GtkToggleButton` itself.
---
--- ---
---
---@param self Gtk.ToggleButton # a `GtkToggleButton`
---@param draw_indicator (boolean|nil) # if `true`, draw the button as a separate indicator and label; if `false`, draw the button like a normal button
---@return nil
function Gtk.ToggleButton:set_mode(draw_indicator) end

--- # method Gtk.ToggleButton:toggled()
---
--- Emits the `GtkToggleButton`::toggled signal on the
--- `GtkToggleButton`. There is no good reason for an
--- application ever to call this function.
---
--- ---
---
---@param self Gtk.ToggleButton # a `GtkToggleButton`.
---@return nil
function Gtk.ToggleButton:toggled() end

--- # function Gtk.ToggleButton.new()
---
--- Creates a new toggle button. A widget should be packed into the button, as in `gtk_button_new()`.
---
--- ---
---
---@return Gtk.Widget # a new toggle button.
function Gtk.ToggleButton.new() end

--- # function Gtk.ToggleButton.new_with_label()
---
--- Creates a new toggle button with a text label.
---
--- ---
---
---@param label string # a string containing the message to be placed in the toggle button.
---@return Gtk.Widget # a new toggle button.
function Gtk.ToggleButton.new_with_label(label) end

--- # function Gtk.ToggleButton.new_with_mnemonic()
---
--- Creates a new `GtkToggleButton` containing a label. The label
--- will be created using `gtk_label_new_with_mnemonic()`, so underscores
--- in `label` indicate the mnemonic for the button.
---
--- ---
---
---@param label string # the text of the button, with an underscore in front of the mnemonic character
---@return Gtk.Widget # a new `GtkToggleButton`
function Gtk.ToggleButton.new_with_mnemonic(label) end

--- # class Gtk.ToggleButtonAccessible
---
---@class Gtk.ToggleButtonAccessible : Gtk.ButtonAccessible, Gtk.Atk.Action, Gtk.Atk.Component, Gtk.Atk.Image
---@field parent Gtk.ButtonAccessible
---@field priv Gtk.ToggleButtonAccessiblePrivate
Gtk.ToggleButtonAccessible = {}

--- # record Gtk.ToggleButtonAccessibleClass
---
---@class Gtk.ToggleButtonAccessibleClass
---@field parent_class Gtk.ButtonAccessibleClass
Gtk.ToggleButtonAccessibleClass = {}

--- # record Gtk.ToggleButtonAccessiblePrivate
---
---@class Gtk.ToggleButtonAccessiblePrivate
Gtk.ToggleButtonAccessiblePrivate = {}

--- # record Gtk.ToggleButtonClass
---
---@class Gtk.ToggleButtonClass
---@field parent_class Gtk.ButtonClass
---@field toggled fun(toggle_button: Gtk.ToggleButton): nil
Gtk.ToggleButtonClass = {}

--- # record Gtk.ToggleButtonPrivate
---
---@class Gtk.ToggleButtonPrivate
Gtk.ToggleButtonPrivate = {}

--- # class Gtk.ToggleToolButton
---
--- A `GtkToggleToolButton` is a `GtkToolItem` that contains a toggle
--- button.
--- 
--- Use `gtk_toggle_tool_button_new()` to create a new GtkToggleToolButton.
--- 
--- # CSS nodes
--- 
--- GtkToggleToolButton has a single CSS node with name togglebutton.
---
--- ---
---
---@class Gtk.ToggleToolButton : Gtk.ToolButton, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field parent Gtk.ToolButton
---@field priv Gtk.ToggleToolButtonPrivate
---@operator call: Gtk.ToggleToolButton
Gtk.ToggleToolButton = {}

--- # method Gtk.ToggleToolButton:get_active()
---
--- Queries a `GtkToggleToolButton` and returns its current state.
--- Returns `true` if the toggle button is pressed in and `false` if it is raised.
---
--- ---
---
---@param self Gtk.ToggleToolButton # a `GtkToggleToolButton`
---@return (boolean|nil) # `true` if the toggle tool button is pressed in, `false` if not
function Gtk.ToggleToolButton:get_active() end

--- # method Gtk.ToggleToolButton:set_active()
---
--- Sets the status of the toggle tool button. Set to `true` if you
--- want the GtkToggleButton to be “pressed in”, and `false` to raise it.
--- This action causes the toggled signal to be emitted.
---
--- ---
---
---@param self Gtk.ToggleToolButton # a `GtkToggleToolButton`
---@param is_active (boolean|nil) # whether `button` should be active
---@return nil
function Gtk.ToggleToolButton:set_active(is_active) end

--- # function Gtk.ToggleToolButton.new()
---
--- Returns a new `GtkToggleToolButton`
---
--- ---
---
---@return Gtk.ToolItem # a newly created `GtkToggleToolButton`
function Gtk.ToggleToolButton.new() end

--- # function Gtk.ToggleToolButton.new_from_stock()
---
--- Creates a new `GtkToggleToolButton` containing the image and text from a
--- stock item. Some stock ids have preprocessor macros like `GTK_STOCK_OK`
--- and `GTK_STOCK_APPLY`.
--- 
--- It is an error if `stock_id` is not a name of a stock item.
---
--- ---
---
---@param stock_id string # the name of the stock item
---@return Gtk.ToolItem # A new `GtkToggleToolButton`
function Gtk.ToggleToolButton.new_from_stock(stock_id) end

--- # record Gtk.ToggleToolButtonClass
---
---@class Gtk.ToggleToolButtonClass
---@field parent_class Gtk.ToolButtonClass # The parent class.
---@field toggled fun(button: Gtk.ToggleToolButton): nil
Gtk.ToggleToolButtonClass = {}

--- # record Gtk.ToggleToolButtonPrivate
---
---@class Gtk.ToggleToolButtonPrivate
Gtk.ToggleToolButtonPrivate = {}

--- # class Gtk.ToolButton
---
--- `GtkToolButtons` are `GtkToolItems` containing buttons.
--- 
--- Use `gtk_tool_button_new()` to create a new `GtkToolButton`.
--- 
--- The label of a `GtkToolButton` is determined by the properties
--- `GtkToolButton`:label-widget, `GtkToolButton`:label, and
--- `GtkToolButton`:stock-id. If `GtkToolButton`:label-widget is
--- non-`nil`, then that widget is used as the label. Otherwise, if
--- `GtkToolButton`:label is non-`nil`, that string is used as the label.
--- Otherwise, if `GtkToolButton`:stock-id is non-`nil`, the label is
--- determined by the stock item. Otherwise, the button does not have a label.
--- 
--- The icon of a `GtkToolButton` is determined by the properties
--- `GtkToolButton`:icon-widget and `GtkToolButton`:stock-id. If
--- `GtkToolButton`:icon-widget is non-`nil`, then
--- that widget is used as the icon. Otherwise, if `GtkToolButton`:stock-id is
--- non-`nil`, the icon is determined by the stock item. Otherwise,
--- the button does not have a icon.
--- 
--- # CSS nodes
--- 
--- GtkToolButton has a single CSS node with name toolbutton.
---
--- ---
---
---@class Gtk.ToolButton : Gtk.ToolItem, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable
---@field parent Gtk.ToolItem
---@field priv Gtk.ToolButtonPrivate
---@operator call: Gtk.ToolButton
Gtk.ToolButton = {}

--- # method Gtk.ToolButton:get_icon_name()
---
--- Returns the name of the themed icon for the tool button,
--- see `gtk_tool_button_set_icon_name()`.
---
--- ---
---
---@param self Gtk.ToolButton # a `GtkToolButton`
---@return string # the icon name or `nil` if the tool button has no themed icon
function Gtk.ToolButton:get_icon_name() end

--- # method Gtk.ToolButton:get_icon_widget()
---
--- Return the widget used as icon widget on `button`.
--- See `gtk_tool_button_set_icon_widget()`.
---
--- ---
---
---@param self Gtk.ToolButton # a `GtkToolButton`
---@return Gtk.Widget # The widget used as icon on `button`, or `nil`.
function Gtk.ToolButton:get_icon_widget() end

--- # method Gtk.ToolButton:get_label()
---
--- Returns the label used by the tool button, or `nil` if the tool button
--- doesn’t have a label. or uses a the label from a stock item. The returned
--- string is owned by GTK+, and must not be modified or freed.
---
--- ---
---
---@param self Gtk.ToolButton # a `GtkToolButton`
---@return string # The label, or `nil`
function Gtk.ToolButton:get_label() end

--- # method Gtk.ToolButton:get_label_widget()
---
--- Returns the widget used as label on `button`.
--- See `gtk_tool_button_set_label_widget()`.
---
--- ---
---
---@param self Gtk.ToolButton # a `GtkToolButton`
---@return Gtk.Widget # The widget used as label on `button`, or `nil`.
function Gtk.ToolButton:get_label_widget() end

--- # method Gtk.ToolButton:get_stock_id()
---
--- Returns the name of the stock item. See `gtk_tool_button_set_stock_id()`.
--- The returned string is owned by GTK+ and must not be freed or modifed.
---
--- ---
---
---@param self Gtk.ToolButton # a `GtkToolButton`
---@return string # the name of the stock item for `button`.
function Gtk.ToolButton:get_stock_id() end

--- # method Gtk.ToolButton:get_use_underline()
---
--- Returns whether underscores in the label property are used as mnemonics
--- on menu items on the overflow menu. See `gtk_tool_button_set_use_underline()`.
---
--- ---
---
---@param self Gtk.ToolButton # a `GtkToolButton`
---@return (boolean|nil) # `true` if underscores in the label property are used as mnemonics on menu items on the overflow menu.
function Gtk.ToolButton:get_use_underline() end

--- # method Gtk.ToolButton:set_icon_name()
---
--- Sets the icon for the tool button from a named themed icon.
--- See the docs for `GtkIconTheme` for more details.
--- The `GtkToolButton`:icon-name property only has an effect if not
--- overridden by non-`nil` `GtkToolButton`:label-widget,
--- `GtkToolButton`:icon-widget and `GtkToolButton`:stock-id properties.
---
--- ---
---
---@param self Gtk.ToolButton # a `GtkToolButton`
---@param icon_name? string # the name of the themed icon
---@return nil
function Gtk.ToolButton:set_icon_name(icon_name) end

--- # method Gtk.ToolButton:set_icon_widget()
---
--- Sets `icon` as the widget used as icon on `button`. If `icon_widget` is
--- `nil` the icon is determined by the `GtkToolButton`:stock-id property. If the
--- `GtkToolButton`:stock-id property is also `nil`, `button` will not have an icon.
---
--- ---
---
---@param self Gtk.ToolButton # a `GtkToolButton`
---@param icon_widget? Gtk.Widget # the widget used as icon, or `nil`
---@return nil
function Gtk.ToolButton:set_icon_widget(icon_widget) end

--- # method Gtk.ToolButton:set_label()
---
--- Sets `label` as the label used for the tool button. The `GtkToolButton`:label
--- property only has an effect if not overridden by a non-`nil`
--- `GtkToolButton`:label-widget property. If both the `GtkToolButton`:label-widget
--- and `GtkToolButton`:label properties are `nil`, the label is determined by the
--- `GtkToolButton`:stock-id property. If the `GtkToolButton`:stock-id property is
--- also `nil`, `button` will not have a label.
---
--- ---
---
---@param self Gtk.ToolButton # a `GtkToolButton`
---@param label? string # a string that will be used as label, or `nil`.
---@return nil
function Gtk.ToolButton:set_label(label) end

--- # method Gtk.ToolButton:set_label_widget()
---
--- Sets `label_widget` as the widget that will be used as the label
--- for `button`. If `label_widget` is `nil` the `GtkToolButton`:label property is used
--- as label. If `GtkToolButton`:label is also `nil`, the label in the stock item
--- determined by the `GtkToolButton`:stock-id property is used as label. If
--- `GtkToolButton`:stock-id is also `nil`, `button` does not have a label.
---
--- ---
---
---@param self Gtk.ToolButton # a `GtkToolButton`
---@param label_widget? Gtk.Widget # the widget used as label, or `nil`
---@return nil
function Gtk.ToolButton:set_label_widget(label_widget) end

--- # method Gtk.ToolButton:set_stock_id()
---
--- Sets the name of the stock item. See `gtk_tool_button_new_from_stock()`.
--- The stock_id property only has an effect if not overridden by non-`nil`
--- `GtkToolButton`:label-widget and `GtkToolButton`:icon-widget properties.
---
--- ---
---
---@param self Gtk.ToolButton # a `GtkToolButton`
---@param stock_id? string # a name of a stock item, or `nil`
---@return nil
function Gtk.ToolButton:set_stock_id(stock_id) end

--- # method Gtk.ToolButton:set_use_underline()
---
--- If set, an underline in the label property indicates that the next character
--- should be used for the mnemonic accelerator key in the overflow menu. For
--- example, if the label property is “_Open” and `use_underline` is `true`,
--- the label on the tool button will be “Open” and the item on the overflow
--- menu will have an underlined “O”.
--- 
--- Labels shown on tool buttons never have mnemonics on them; this property
--- only affects the menu item on the overflow menu.
---
--- ---
---
---@param self Gtk.ToolButton # a `GtkToolButton`
---@param use_underline (boolean|nil) # whether the button label has the form “_Open”
---@return nil
function Gtk.ToolButton:set_use_underline(use_underline) end

--- # function Gtk.ToolButton.new()
---
--- Creates a new `GtkToolButton` using `icon_widget` as contents and `label` as
--- label.
---
--- ---
---
---@param icon_widget? Gtk.Widget # a widget that will be used as the button contents, or `nil`
---@param label? string # a string that will be used as label, or `nil`
---@return Gtk.ToolItem # A new `GtkToolButton`
function Gtk.ToolButton.new(icon_widget, label) end

--- # function Gtk.ToolButton.new_from_stock()
---
--- Creates a new `GtkToolButton` containing the image and text from a
--- stock item. Some stock ids have preprocessor macros like `GTK_STOCK_OK`
--- and `GTK_STOCK_APPLY`.
--- 
--- It is an error if `stock_id` is not a name of a stock item.
---
--- ---
---
---@param stock_id string # the name of the stock item
---@return Gtk.ToolItem # A new `GtkToolButton`
function Gtk.ToolButton.new_from_stock(stock_id) end

--- # record Gtk.ToolButtonClass
---
---@class Gtk.ToolButtonClass
---@field parent_class Gtk.ToolItemClass # The parent class.
---@field button_type Gtk.GType
---@field clicked fun(tool_item: Gtk.ToolButton): nil
Gtk.ToolButtonClass = {}

--- # record Gtk.ToolButtonPrivate
---
---@class Gtk.ToolButtonPrivate
Gtk.ToolButtonPrivate = {}

--- # class Gtk.ToolItem
---
--- `GtkToolItems` are widgets that can appear on a toolbar. To
--- create a toolbar item that contain something else than a button, use
--- `gtk_tool_item_new()`. Use `gtk_container_add()` to add a child
--- widget to the tool item.
--- 
--- For toolbar items that contain buttons, see the `GtkToolButton`,
--- `GtkToggleToolButton` and `GtkRadioToolButton` classes.
--- 
--- See the `GtkToolbar` class for a description of the toolbar widget, and
--- `GtkToolShell` for a description of the tool shell interface.
---
--- ---
---
---@class Gtk.ToolItem : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Activatable, Gtk.Buildable
---@field parent Gtk.Bin
---@field priv Gtk.ToolItemPrivate
---@operator call: Gtk.ToolItem
Gtk.ToolItem = {}

--- # method Gtk.ToolItem:get_ellipsize_mode()
---
--- Returns the ellipsize mode used for `tool_item`. Custom subclasses of
--- `GtkToolItem` should call this function to find out how text should
--- be ellipsized.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@return Pango.EllipsizeMode # a `PangoEllipsizeMode` indicating how text in `tool_item` should be ellipsized.
function Gtk.ToolItem:get_ellipsize_mode() end

--- # method Gtk.ToolItem:get_expand()
---
--- Returns whether `tool_item` is allocated extra space.
--- See `gtk_tool_item_set_expand()`.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@return (boolean|nil) # `true` if `tool_item` is allocated extra space.
function Gtk.ToolItem:get_expand() end

--- # method Gtk.ToolItem:get_homogeneous()
---
--- Returns whether `tool_item` is the same size as other homogeneous
--- items. See `gtk_tool_item_set_homogeneous()`.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@return (boolean|nil) # `true` if the item is the same size as other homogeneous items.
function Gtk.ToolItem:get_homogeneous() end

--- # method Gtk.ToolItem:get_icon_size()
---
--- Returns the icon size used for `tool_item`. Custom subclasses of
--- `GtkToolItem` should call this function to find out what size icons
--- they should use.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@return integer # a `GtkIconSize` indicating the icon size used for `tool_item`
function Gtk.ToolItem:get_icon_size() end

--- # method Gtk.ToolItem:get_is_important()
---
--- Returns whether `tool_item` is considered important. See
--- `gtk_tool_item_set_is_important()`
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@return (boolean|nil) # `true` if `tool_item` is considered important.
function Gtk.ToolItem:get_is_important() end

--- # method Gtk.ToolItem:get_orientation()
---
--- Returns the orientation used for `tool_item`. Custom subclasses of
--- `GtkToolItem` should call this function to find out what size icons
--- they should use.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@return Gtk.Orientation # a `GtkOrientation` indicating the orientation used for `tool_item`
function Gtk.ToolItem:get_orientation() end

--- # method Gtk.ToolItem:get_proxy_menu_item()
---
--- If `menu_item_id` matches the string passed to
--- `gtk_tool_item_set_proxy_menu_item()` return the corresponding `GtkMenuItem`.
--- 
--- Custom subclasses of `GtkToolItem` should use this function to
--- update their menu item when the `GtkToolItem` changes. That the
--- `menu_item_ids` must match ensures that a `GtkToolItem`
--- will not inadvertently change a menu item that they did not create.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@param menu_item_id string # a string used to identify the menu item
---@return Gtk.Widget # The `GtkMenuItem` passed to `gtk_tool_item_set_proxy_menu_item()`, if the `menu_item_ids` match.
function Gtk.ToolItem:get_proxy_menu_item(menu_item_id) end

--- # method Gtk.ToolItem:get_relief_style()
---
--- Returns the relief style of `tool_item`. See `gtk_button_set_relief()`.
--- Custom subclasses of `GtkToolItem` should call this function in the handler
--- of the `GtkToolItem`::toolbar_reconfigured signal to find out the
--- relief style of buttons.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@return Gtk.ReliefStyle # a `GtkReliefStyle` indicating the relief style used for `tool_item`.
function Gtk.ToolItem:get_relief_style() end

--- # method Gtk.ToolItem:get_text_alignment()
---
--- Returns the text alignment used for `tool_item`. Custom subclasses of
--- `GtkToolItem` should call this function to find out how text should
--- be aligned.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`:
---@return number # a `gfloat` indicating the horizontal text alignment used for `tool_item`
function Gtk.ToolItem:get_text_alignment() end

--- # method Gtk.ToolItem:get_text_orientation()
---
--- Returns the text orientation used for `tool_item`. Custom subclasses of
--- `GtkToolItem` should call this function to find out how text should
--- be orientated.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@return Gtk.Orientation # a `GtkOrientation` indicating the text orientation used for `tool_item`
function Gtk.ToolItem:get_text_orientation() end

--- # method Gtk.ToolItem:get_text_size_group()
---
--- Returns the size group used for labels in `tool_item`.
--- Custom subclasses of `GtkToolItem` should call this function
--- and use the size group for labels.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@return Gtk.SizeGroup # a `GtkSizeGroup`
function Gtk.ToolItem:get_text_size_group() end

--- # method Gtk.ToolItem:get_toolbar_style()
---
--- Returns the toolbar style used for `tool_item`. Custom subclasses of
--- `GtkToolItem` should call this function in the handler of the
--- GtkToolItem::toolbar_reconfigured signal to find out in what style
--- the toolbar is displayed and change themselves accordingly
--- 
--- Possibilities are:
--- - %GTK_TOOLBAR_BOTH, meaning the tool item should show
---   both an icon and a label, stacked vertically
--- - %GTK_TOOLBAR_ICONS, meaning the toolbar shows only icons
--- - %GTK_TOOLBAR_TEXT, meaning the tool item should only show text
--- - %GTK_TOOLBAR_BOTH_HORIZ, meaning the tool item should show
---   both an icon and a label, arranged horizontally
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@return Gtk.ToolbarStyle # A `GtkToolbarStyle` indicating the toolbar style used for `tool_item`.
function Gtk.ToolItem:get_toolbar_style() end

--- # method Gtk.ToolItem:get_use_drag_window()
---
--- Returns whether `tool_item` has a drag window. See
--- `gtk_tool_item_set_use_drag_window()`.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@return (boolean|nil) # `true` if `tool_item` uses a drag window.
function Gtk.ToolItem:get_use_drag_window() end

--- # method Gtk.ToolItem:get_visible_horizontal()
---
--- Returns whether the `tool_item` is visible on toolbars that are
--- docked horizontally.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@return (boolean|nil) # `true` if `tool_item` is visible on toolbars that are docked horizontally.
function Gtk.ToolItem:get_visible_horizontal() end

--- # method Gtk.ToolItem:get_visible_vertical()
---
--- Returns whether `tool_item` is visible when the toolbar is docked vertically.
--- See `gtk_tool_item_set_visible_vertical()`.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@return (boolean|nil) # Whether `tool_item` is visible when the toolbar is docked vertically
function Gtk.ToolItem:get_visible_vertical() end

--- # method Gtk.ToolItem:rebuild_menu()
---
--- Calling this function signals to the toolbar that the
--- overflow menu item for `tool_item` has changed. If the
--- overflow menu is visible when this function it called,
--- the menu will be rebuilt.
--- 
--- The function must be called when the tool item changes what it
--- will do in response to the `GtkToolItem`::create-menu-proxy signal.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@return nil
function Gtk.ToolItem:rebuild_menu() end

--- # method Gtk.ToolItem:retrieve_proxy_menu_item()
---
--- Returns the `GtkMenuItem` that was last set by
--- `gtk_tool_item_set_proxy_menu_item()`, ie. the `GtkMenuItem`
--- that is going to appear in the overflow menu.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@return Gtk.Widget # The `GtkMenuItem` that is going to appear in the overflow menu for `tool_item`.
function Gtk.ToolItem:retrieve_proxy_menu_item() end

--- # method Gtk.ToolItem:set_expand()
---
--- Sets whether `tool_item` is allocated extra space when there
--- is more room on the toolbar then needed for the items. The
--- effect is that the item gets bigger when the toolbar gets bigger
--- and smaller when the toolbar gets smaller.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@param expand (boolean|nil) # Whether `tool_item` is allocated extra space
---@return nil
function Gtk.ToolItem:set_expand(expand) end

--- # method Gtk.ToolItem:set_homogeneous()
---
--- Sets whether `tool_item` is to be allocated the same size as other
--- homogeneous items. The effect is that all homogeneous items will have
--- the same width as the widest of the items.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@param homogeneous (boolean|nil) # whether `tool_item` is the same size as other homogeneous items
---@return nil
function Gtk.ToolItem:set_homogeneous(homogeneous) end

--- # method Gtk.ToolItem:set_is_important()
---
--- Sets whether `tool_item` should be considered important. The `GtkToolButton`
--- class uses this property to determine whether to show or hide its label
--- when the toolbar style is %GTK_TOOLBAR_BOTH_HORIZ. The result is that
--- only tool buttons with the “is_important” property set have labels, an
--- effect known as “priority text”
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@param is_important (boolean|nil) # whether the tool item should be considered important
---@return nil
function Gtk.ToolItem:set_is_important(is_important) end

--- # method Gtk.ToolItem:set_proxy_menu_item()
---
--- Sets the `GtkMenuItem` used in the toolbar overflow menu. The
--- `menu_item_id` is used to identify the caller of this function and
--- should also be used with `gtk_tool_item_get_proxy_menu_item()`.
--- 
--- See also `GtkToolItem`::create-menu-proxy.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@param menu_item_id string # a string used to identify `menu_item`
---@param menu_item? Gtk.Widget # a `GtkMenuItem` to use in the overflow menu, or `nil`
---@return nil
function Gtk.ToolItem:set_proxy_menu_item(menu_item_id, menu_item) end

--- # method Gtk.ToolItem:set_tooltip_markup()
---
--- Sets the markup text to be displayed as tooltip on the item.
--- See `gtk_widget_set_tooltip_markup()`.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@param markup string # markup text to be used as tooltip for `tool_item`
---@return nil
function Gtk.ToolItem:set_tooltip_markup(markup) end

--- # method Gtk.ToolItem:set_tooltip_text()
---
--- Sets the text to be displayed as tooltip on the item.
--- See `gtk_widget_set_tooltip_text()`.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@param text string # text to be used as tooltip for `tool_item`
---@return nil
function Gtk.ToolItem:set_tooltip_text(text) end

--- # method Gtk.ToolItem:set_use_drag_window()
---
--- Sets whether `tool_item` has a drag window. When `true` the
--- toolitem can be used as a drag source through `gtk_drag_source_set()`.
--- When `tool_item` has a drag window it will intercept all events,
--- even those that would otherwise be sent to a child of `tool_item`.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@param use_drag_window (boolean|nil) # Whether `tool_item` has a drag window.
---@return nil
function Gtk.ToolItem:set_use_drag_window(use_drag_window) end

--- # method Gtk.ToolItem:set_visible_horizontal()
---
--- Sets whether `tool_item` is visible when the toolbar is docked horizontally.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@param visible_horizontal (boolean|nil) # Whether `tool_item` is visible when in horizontal mode
---@return nil
function Gtk.ToolItem:set_visible_horizontal(visible_horizontal) end

--- # method Gtk.ToolItem:set_visible_vertical()
---
--- Sets whether `tool_item` is visible when the toolbar is docked
--- vertically. Some tool items, such as text entries, are too wide to be
--- useful on a vertically docked toolbar. If `visible_vertical` is `false`
--- `tool_item` will not appear on toolbars that are docked vertically.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@param visible_vertical (boolean|nil) # whether `tool_item` is visible when the toolbar is in vertical mode
---@return nil
function Gtk.ToolItem:set_visible_vertical(visible_vertical) end

--- # method Gtk.ToolItem:toolbar_reconfigured()
---
--- Emits the signal `GtkToolItem`::toolbar_reconfigured on `tool_item`.
--- `GtkToolbar` and other `GtkToolShell` implementations use this function
--- to notify children, when some aspect of their configuration changes.
---
--- ---
---
---@param self Gtk.ToolItem # a `GtkToolItem`
---@return nil
function Gtk.ToolItem:toolbar_reconfigured() end

--- # function Gtk.ToolItem.new()
---
--- Creates a new `GtkToolItem`
---
--- ---
---
---@return Gtk.ToolItem # the new `GtkToolItem`
function Gtk.ToolItem.new() end

--- # record Gtk.ToolItemClass
---
---@class Gtk.ToolItemClass
---@field parent_class Gtk.BinClass # The parent class.
---@field create_menu_proxy fun(tool_item: Gtk.ToolItem): (boolean|nil)
---@field toolbar_reconfigured fun(tool_item: Gtk.ToolItem): nil
Gtk.ToolItemClass = {}

--- # class Gtk.ToolItemGroup
---
--- A `GtkToolItemGroup` is used together with `GtkToolPalette` to add
--- `GtkToolItems` to a palette like container with different
--- categories and drag and drop support.
--- 
--- # CSS nodes
--- 
--- GtkToolItemGroup has a single CSS node named toolitemgroup.
---
--- ---
---
---@class Gtk.ToolItemGroup : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.ToolShell
---@field parent_instance Gtk.Container
---@field priv Gtk.ToolItemGroupPrivate
---@operator call: Gtk.ToolItemGroup
Gtk.ToolItemGroup = {}

--- # method Gtk.ToolItemGroup:get_collapsed()
---
--- Gets whether `group` is collapsed or expanded.
---
--- ---
---
---@param self Gtk.ToolItemGroup # a GtkToolItemGroup
---@return (boolean|nil) # `true` if `group` is collapsed, `false` if it is expanded
function Gtk.ToolItemGroup:get_collapsed() end

--- # method Gtk.ToolItemGroup:get_drop_item()
---
--- Gets the tool item at position (x, y).
---
--- ---
---
---@param self Gtk.ToolItemGroup # a `GtkToolItemGroup`
---@param x integer # the x position
---@param y integer # the y position
---@return Gtk.ToolItem # the `GtkToolItem` at position (x, y)
function Gtk.ToolItemGroup:get_drop_item(x, y) end

--- # method Gtk.ToolItemGroup:get_ellipsize()
---
--- Gets the ellipsization mode of `group`.
---
--- ---
---
---@param self Gtk.ToolItemGroup # a `GtkToolItemGroup`
---@return Pango.EllipsizeMode # the `PangoEllipsizeMode` of `group`
function Gtk.ToolItemGroup:get_ellipsize() end

--- # method Gtk.ToolItemGroup:get_header_relief()
---
--- Gets the relief mode of the header button of `group`.
---
--- ---
---
---@param self Gtk.ToolItemGroup # a `GtkToolItemGroup`
---@return Gtk.ReliefStyle # the `GtkReliefStyle`
function Gtk.ToolItemGroup:get_header_relief() end

--- # method Gtk.ToolItemGroup:get_item_position()
---
--- Gets the position of `item` in `group` as index.
---
--- ---
---
---@param self Gtk.ToolItemGroup # a `GtkToolItemGroup`
---@param item Gtk.ToolItem # a `GtkToolItem`
---@return integer # the index of `item` in `group` or -1 if `item` is no child of `group`
function Gtk.ToolItemGroup:get_item_position(item) end

--- # method Gtk.ToolItemGroup:get_label()
---
--- Gets the label of `group`.
---
--- ---
---
---@param self Gtk.ToolItemGroup # a `GtkToolItemGroup`
---@return string # the label of `group`. The label is an internal string of `group` and must not be modified. Note that `nil` is returned if a custom label has been set with `gtk_tool_item_group_set_label_widget()`
function Gtk.ToolItemGroup:get_label() end

--- # method Gtk.ToolItemGroup:get_label_widget()
---
--- Gets the label widget of `group`.
--- See `gtk_tool_item_group_set_label_widget()`.
---
--- ---
---
---@param self Gtk.ToolItemGroup # a `GtkToolItemGroup`
---@return Gtk.Widget # the label widget of `group`
function Gtk.ToolItemGroup:get_label_widget() end

--- # method Gtk.ToolItemGroup:get_n_items()
---
--- Gets the number of tool items in `group`.
---
--- ---
---
---@param self Gtk.ToolItemGroup # a `GtkToolItemGroup`
---@return integer # the number of tool items in `group`
function Gtk.ToolItemGroup:get_n_items() end

--- # method Gtk.ToolItemGroup:get_nth_item()
---
--- Gets the tool item at `index` in group.
---
--- ---
---
---@param self Gtk.ToolItemGroup # a `GtkToolItemGroup`
---@param index integer # the index
---@return Gtk.ToolItem # the `GtkToolItem` at index
function Gtk.ToolItemGroup:get_nth_item(index) end

--- # method Gtk.ToolItemGroup:insert()
---
--- Inserts `item` at `position` in the list of children of `group`.
---
--- ---
---
---@param self Gtk.ToolItemGroup # a `GtkToolItemGroup`
---@param item Gtk.ToolItem # the `GtkToolItem` to insert into `group`
---@param position integer # the position of `item` in `group`, starting with 0. The position -1 means end of list.
---@return nil
function Gtk.ToolItemGroup:insert(item, position) end

--- # method Gtk.ToolItemGroup:set_collapsed()
---
--- Sets whether the `group` should be collapsed or expanded.
---
--- ---
---
---@param self Gtk.ToolItemGroup # a `GtkToolItemGroup`
---@param collapsed (boolean|nil) # whether the `group` should be collapsed or expanded
---@return nil
function Gtk.ToolItemGroup:set_collapsed(collapsed) end

--- # method Gtk.ToolItemGroup:set_ellipsize()
---
--- Sets the ellipsization mode which should be used by labels in `group`.
---
--- ---
---
---@param self Gtk.ToolItemGroup # a `GtkToolItemGroup`
---@param ellipsize Pango.EllipsizeMode # the `PangoEllipsizeMode` labels in `group` should use
---@return nil
function Gtk.ToolItemGroup:set_ellipsize(ellipsize) end

--- # method Gtk.ToolItemGroup:set_header_relief()
---
--- Set the button relief of the group header.
--- See `gtk_button_set_relief()` for details.
---
--- ---
---
---@param self Gtk.ToolItemGroup # a `GtkToolItemGroup`
---@param style Gtk.ReliefStyle # the `GtkReliefStyle`
---@return nil
function Gtk.ToolItemGroup:set_header_relief(style) end

--- # method Gtk.ToolItemGroup:set_item_position()
---
--- Sets the position of `item` in the list of children of `group`.
---
--- ---
---
---@param self Gtk.ToolItemGroup # a `GtkToolItemGroup`
---@param item Gtk.ToolItem # the `GtkToolItem` to move to a new position, should be a child of `group`.
---@param position integer # the new position of `item` in `group`, starting with 0. The position -1 means end of list.
---@return nil
function Gtk.ToolItemGroup:set_item_position(item, position) end

--- # method Gtk.ToolItemGroup:set_label()
---
--- Sets the label of the tool item group. The label is displayed in the header
--- of the group.
---
--- ---
---
---@param self Gtk.ToolItemGroup # a `GtkToolItemGroup`
---@param label string # the new human-readable label of of the group
---@return nil
function Gtk.ToolItemGroup:set_label(label) end

--- # method Gtk.ToolItemGroup:set_label_widget()
---
--- Sets the label of the tool item group.
--- The label widget is displayed in the header of the group, in place
--- of the usual label.
---
--- ---
---
---@param self Gtk.ToolItemGroup # a `GtkToolItemGroup`
---@param label_widget Gtk.Widget # the widget to be displayed in place of the usual label
---@return nil
function Gtk.ToolItemGroup:set_label_widget(label_widget) end

--- # function Gtk.ToolItemGroup.new()
---
--- Creates a new tool item group with label `label`.
---
--- ---
---
---@param label string # the label of the new group
---@return Gtk.Widget # a new `GtkToolItemGroup`.
function Gtk.ToolItemGroup.new(label) end

--- # record Gtk.ToolItemGroupClass
---
---@class Gtk.ToolItemGroupClass
---@field parent_class Gtk.ContainerClass # The parent class.
Gtk.ToolItemGroupClass = {}

--- # record Gtk.ToolItemGroupPrivate
---
---@class Gtk.ToolItemGroupPrivate
Gtk.ToolItemGroupPrivate = {}

--- # record Gtk.ToolItemPrivate
---
---@class Gtk.ToolItemPrivate
Gtk.ToolItemPrivate = {}

--- # class Gtk.ToolPalette
---
--- A `GtkToolPalette` allows you to add `GtkToolItems` to a palette-like
--- container with different categories and drag and drop support.
--- 
--- A `GtkToolPalette` is created with a call to `gtk_tool_palette_new()`.
--- 
--- `GtkToolItems` cannot be added directly to a `GtkToolPalette` -
--- instead they are added to a `GtkToolItemGroup` which can than be added
--- to a `GtkToolPalette`. To add a `GtkToolItemGroup` to a `GtkToolPalette`,
--- use `gtk_container_add()`.
--- 
--- ```c
--- GtkWidget *palette, *group;
--- GtkToolItem *item;
--- 
--- palette = gtk_tool_palette_new ();
--- group = gtk_tool_item_group_new (_("Test Category"));
--- gtk_container_add (GTK_CONTAINER (palette), group);
--- 
--- item = gtk_tool_button_new (NULL, _("_Open"));
--- gtk_tool_button_set_icon_name (GTK_TOOL_BUTTON (item), "document-open");
--- gtk_tool_item_group_insert (GTK_TOOL_ITEM_GROUP (group), item, -1);
--- ```
--- 
--- The easiest way to use drag and drop with `GtkToolPalette` is to call
--- `gtk_tool_palette_add_drag_dest()` with the desired drag source `palette`
--- and the desired drag target `widget`. Then `gtk_tool_palette_get_drag_item()`
--- can be used to get the dragged item in the `GtkWidget`::drag-data-received
--- signal handler of the drag target.
--- 
--- ```c
--- static void
--- passive_canvas_drag_data_received (GtkWidget        *widget,
---                                    GdkDragContext   *context,
---                                    gint              x,
---                                    gint              y,
---                                    GtkSelectionData *selection,
---                                    guint             info,
---                                    guint             time,
---                                    gpointer          data)
--- {
---   GtkWidget *palette;
---   GtkWidget *item;
--- 
---   // Get the dragged item
---   palette = gtk_widget_get_ancestor (gtk_drag_get_source_widget (context),
---                                      GTK_TYPE_TOOL_PALETTE);
---   if (palette != NULL)
---     item = gtk_tool_palette_get_drag_item (GTK_TOOL_PALETTE (palette),
---                                            selection);
--- 
---   // Do something with item
--- }
--- 
--- GtkWidget *target, palette;
--- 
--- palette = gtk_tool_palette_new ();
--- target = gtk_drawing_area_new ();
--- 
--- g_signal_connect (G_OBJECT (target), "drag-data-received",
---                   G_CALLBACK (passive_canvas_drag_data_received), NULL);
--- gtk_tool_palette_add_drag_dest (GTK_TOOL_PALETTE (palette), target,
---                                 GTK_DEST_DEFAULT_ALL,
---                                 GTK_TOOL_PALETTE_DRAG_ITEMS,
---                                 GDK_ACTION_COPY);
--- ```
--- 
--- # CSS nodes
--- 
--- GtkToolPalette has a single CSS node named toolpalette.
---
--- ---
---
---@class Gtk.ToolPalette : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable, Gtk.Scrollable
---@field parent_instance Gtk.Container
---@field priv Gtk.ToolPalettePrivate
---@operator call: Gtk.ToolPalette
Gtk.ToolPalette = {}

--- # method Gtk.ToolPalette:add_drag_dest()
---
--- Sets `palette` as drag source (see `gtk_tool_palette_set_drag_source()`)
--- and sets `widget` as a drag destination for drags from `palette`.
--- See `gtk_drag_dest_set()`.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@param widget Gtk.Widget # a `GtkWidget` which should be a drag destination for `palette`
---@param flags Gtk.DestDefaults # the flags that specify what actions GTK+ should take for drops on that widget
---@param targets Gtk.ToolPaletteDragTargets # the `GtkToolPaletteDragTargets` which the widget should support
---@param actions Gdk.DragAction # the `GdkDragActions` which the widget should suppport
---@return nil
function Gtk.ToolPalette:add_drag_dest(widget, flags, targets, actions) end

--- # method Gtk.ToolPalette:get_drag_item()
---
--- Get the dragged item from the selection.
--- This could be a `GtkToolItem` or a `GtkToolItemGroup`.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@param selection Gtk.SelectionData # a `GtkSelectionData`
---@return Gtk.Widget # the dragged item in selection
function Gtk.ToolPalette:get_drag_item(selection) end

--- # method Gtk.ToolPalette:get_drop_group()
---
--- Gets the group at position (x, y).
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@param x integer # the x position
---@param y integer # the y position
---@return Gtk.ToolItemGroup # the `GtkToolItemGroup` at position or `nil` if there is no such group
function Gtk.ToolPalette:get_drop_group(x, y) end

--- # method Gtk.ToolPalette:get_drop_item()
---
--- Gets the item at position (x, y).
--- See `gtk_tool_palette_get_drop_group()`.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@param x integer # the x position
---@param y integer # the y position
---@return Gtk.ToolItem # the `GtkToolItem` at position or `nil` if there is no such item
function Gtk.ToolPalette:get_drop_item(x, y) end

--- # method Gtk.ToolPalette:get_exclusive()
---
--- Gets whether `group` is exclusive or not.
--- See `gtk_tool_palette_set_exclusive()`.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@param group Gtk.ToolItemGroup # a `GtkToolItemGroup` which is a child of palette
---@return (boolean|nil) # `true` if `group` is exclusive
function Gtk.ToolPalette:get_exclusive(group) end

--- # method Gtk.ToolPalette:get_expand()
---
--- Gets whether group should be given extra space.
--- See `gtk_tool_palette_set_expand()`.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@param group Gtk.ToolItemGroup # a `GtkToolItemGroup` which is a child of palette
---@return (boolean|nil) # `true` if group should be given extra space, `false` otherwise
function Gtk.ToolPalette:get_expand(group) end

--- # method Gtk.ToolPalette:get_group_position()
---
--- Gets the position of `group` in `palette` as index.
--- See `gtk_tool_palette_set_group_position()`.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@param group Gtk.ToolItemGroup # a `GtkToolItemGroup`
---@return integer # the index of group or -1 if `group` is not a child of `palette`
function Gtk.ToolPalette:get_group_position(group) end

--- # method Gtk.ToolPalette:get_hadjustment()
---
--- Gets the horizontal adjustment of the tool palette.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@return Gtk.Adjustment # the horizontal adjustment of `palette`
function Gtk.ToolPalette:get_hadjustment() end

--- # method Gtk.ToolPalette:get_icon_size()
---
--- Gets the size of icons in the tool palette.
--- See `gtk_tool_palette_set_icon_size()`.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@return integer # the `GtkIconSize` of icons in the tool palette
function Gtk.ToolPalette:get_icon_size() end

--- # method Gtk.ToolPalette:get_style()
---
--- Gets the style (icons, text or both) of items in the tool palette.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@return Gtk.ToolbarStyle # the `GtkToolbarStyle` of items in the tool palette.
function Gtk.ToolPalette:get_style() end

--- # method Gtk.ToolPalette:get_vadjustment()
---
--- Gets the vertical adjustment of the tool palette.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@return Gtk.Adjustment # the vertical adjustment of `palette`
function Gtk.ToolPalette:get_vadjustment() end

--- # method Gtk.ToolPalette:set_drag_source()
---
--- Sets the tool palette as a drag source.
--- Enables all groups and items in the tool palette as drag sources
--- on button 1 and button 3 press with copy and move actions.
--- See `gtk_drag_source_set()`.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@param targets Gtk.ToolPaletteDragTargets # the `GtkToolPaletteDragTargets` which the widget should support
---@return nil
function Gtk.ToolPalette:set_drag_source(targets) end

--- # method Gtk.ToolPalette:set_exclusive()
---
--- Sets whether the group should be exclusive or not.
--- If an exclusive group is expanded all other groups are collapsed.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@param group Gtk.ToolItemGroup # a `GtkToolItemGroup` which is a child of palette
---@param exclusive (boolean|nil) # whether the group should be exclusive or not
---@return nil
function Gtk.ToolPalette:set_exclusive(group, exclusive) end

--- # method Gtk.ToolPalette:set_expand()
---
--- Sets whether the group should be given extra space.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@param group Gtk.ToolItemGroup # a `GtkToolItemGroup` which is a child of palette
---@param expand (boolean|nil) # whether the group should be given extra space
---@return nil
function Gtk.ToolPalette:set_expand(group, expand) end

--- # method Gtk.ToolPalette:set_group_position()
---
--- Sets the position of the group as an index of the tool palette.
--- If position is 0 the group will become the first child, if position is
--- -1 it will become the last child.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@param group Gtk.ToolItemGroup # a `GtkToolItemGroup` which is a child of palette
---@param position integer # a new index for group
---@return nil
function Gtk.ToolPalette:set_group_position(group, position) end

--- # method Gtk.ToolPalette:set_icon_size()
---
--- Sets the size of icons in the tool palette.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@param icon_size integer # the `GtkIconSize` that icons in the tool palette shall have
---@return nil
function Gtk.ToolPalette:set_icon_size(icon_size) end

--- # method Gtk.ToolPalette:set_style()
---
--- Sets the style (text, icons or both) of items in the tool palette.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@param style Gtk.ToolbarStyle # the `GtkToolbarStyle` that items in the tool palette shall have
---@return nil
function Gtk.ToolPalette:set_style(style) end

--- # method Gtk.ToolPalette:unset_icon_size()
---
--- Unsets the tool palette icon size set with `gtk_tool_palette_set_icon_size()`,
--- so that user preferences will be used to determine the icon size.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@return nil
function Gtk.ToolPalette:unset_icon_size() end

--- # method Gtk.ToolPalette:unset_style()
---
--- Unsets a toolbar style set with `gtk_tool_palette_set_style()`,
--- so that user preferences will be used to determine the toolbar style.
---
--- ---
---
---@param self Gtk.ToolPalette # a `GtkToolPalette`
---@return nil
function Gtk.ToolPalette:unset_style() end

--- # function Gtk.ToolPalette.get_drag_target_group()
---
--- Get the target entry for a dragged `GtkToolItemGroup`.
---
--- ---
---
---@return Gtk.TargetEntry # the `GtkTargetEntry` for a dragged group
function Gtk.ToolPalette.get_drag_target_group() end

--- # function Gtk.ToolPalette.get_drag_target_item()
---
--- Gets the target entry for a dragged `GtkToolItem`.
---
--- ---
---
---@return Gtk.TargetEntry # the `GtkTargetEntry` for a dragged item.
function Gtk.ToolPalette.get_drag_target_item() end

--- # function Gtk.ToolPalette.new()
---
--- Creates a new tool palette.
---
--- ---
---
---@return Gtk.Widget # a new `GtkToolPalette`
function Gtk.ToolPalette.new() end

--- # record Gtk.ToolPaletteClass
---
---@class Gtk.ToolPaletteClass
---@field parent_class Gtk.ContainerClass # The parent class.
Gtk.ToolPaletteClass = {}

---@enum Gtk.ToolPaletteDragTargets
Gtk.ToolPaletteDragTargets = {}

--- # record Gtk.ToolPalettePrivate
---
---@class Gtk.ToolPalettePrivate
Gtk.ToolPalettePrivate = {}

--- # interface Gtk.ToolShell
---
--- The `GtkToolShell` interface allows container widgets to provide additional
--- information when embedding `GtkToolItem` widgets.
---
--- ---
---
---@class Gtk.ToolShell
Gtk.ToolShell = {}

--- # method Gtk.ToolShell:get_ellipsize_mode()
---
--- Retrieves the current ellipsize mode for the tool shell. Tool items must not
--- call this function directly, but rely on `gtk_tool_item_get_ellipsize_mode()`
--- instead.
---
--- ---
---
---@param self Gtk.ToolShell # a `GtkToolShell`
---@return Pango.EllipsizeMode # the current ellipsize mode of `shell`
function Gtk.ToolShell:get_ellipsize_mode() end

--- # method Gtk.ToolShell:get_icon_size()
---
--- Retrieves the icon size for the tool shell. Tool items must not call this
--- function directly, but rely on `gtk_tool_item_get_icon_size()` instead.
---
--- ---
---
---@param self Gtk.ToolShell # a `GtkToolShell`
---@return integer # the current size (`GtkIconSize`) for icons of `shell`
function Gtk.ToolShell:get_icon_size() end

--- # method Gtk.ToolShell:get_orientation()
---
--- Retrieves the current orientation for the tool shell. Tool items must not
--- call this function directly, but rely on `gtk_tool_item_get_orientation()`
--- instead.
---
--- ---
---
---@param self Gtk.ToolShell # a `GtkToolShell`
---@return Gtk.Orientation # the current orientation of `shell`
function Gtk.ToolShell:get_orientation() end

--- # method Gtk.ToolShell:get_relief_style()
---
--- Returns the relief style of buttons on `shell`. Tool items must not call this
--- function directly, but rely on `gtk_tool_item_get_relief_style()` instead.
---
--- ---
---
---@param self Gtk.ToolShell # a `GtkToolShell`
---@return Gtk.ReliefStyle # The relief style of buttons on `shell`.
function Gtk.ToolShell:get_relief_style() end

--- # method Gtk.ToolShell:get_style()
---
--- Retrieves whether the tool shell has text, icons, or both. Tool items must
--- not call this function directly, but rely on `gtk_tool_item_get_toolbar_style()`
--- instead.
---
--- ---
---
---@param self Gtk.ToolShell # a `GtkToolShell`
---@return Gtk.ToolbarStyle # the current style of `shell`
function Gtk.ToolShell:get_style() end

--- # method Gtk.ToolShell:get_text_alignment()
---
--- Retrieves the current text alignment for the tool shell. Tool items must not
--- call this function directly, but rely on `gtk_tool_item_get_text_alignment()`
--- instead.
---
--- ---
---
---@param self Gtk.ToolShell # a `GtkToolShell`
---@return number # the current text alignment of `shell`
function Gtk.ToolShell:get_text_alignment() end

--- # method Gtk.ToolShell:get_text_orientation()
---
--- Retrieves the current text orientation for the tool shell. Tool items must not
--- call this function directly, but rely on `gtk_tool_item_get_text_orientation()`
--- instead.
---
--- ---
---
---@param self Gtk.ToolShell # a `GtkToolShell`
---@return Gtk.Orientation # the current text orientation of `shell`
function Gtk.ToolShell:get_text_orientation() end

--- # method Gtk.ToolShell:get_text_size_group()
---
--- Retrieves the current text size group for the tool shell. Tool items must not
--- call this function directly, but rely on `gtk_tool_item_get_text_size_group()`
--- instead.
---
--- ---
---
---@param self Gtk.ToolShell # a `GtkToolShell`
---@return Gtk.SizeGroup # the current text size group of `shell`
function Gtk.ToolShell:get_text_size_group() end

--- # method Gtk.ToolShell:rebuild_menu()
---
--- Calling this function signals the tool shell that the overflow menu item for
--- tool items have changed. If there is an overflow menu and if it is visible
--- when this function it called, the menu will be rebuilt.
--- 
--- Tool items must not call this function directly, but rely on
--- `gtk_tool_item_rebuild_menu()` instead.
---
--- ---
---
---@param self Gtk.ToolShell # a `GtkToolShell`
---@return nil
function Gtk.ToolShell:rebuild_menu() end

--- # record Gtk.ToolShellIface
---
--- Virtual function table for the `GtkToolShell` interface.
---
--- ---
---
---@class Gtk.ToolShellIface
---@field g_iface GObject.TypeInterface
---@field get_icon_size fun(shell: Gtk.ToolShell): Gtk.IconSize
---@field get_orientation fun(shell: Gtk.ToolShell): Gtk.Orientation
---@field get_style fun(shell: Gtk.ToolShell): Gtk.ToolbarStyle
---@field get_relief_style fun(shell: Gtk.ToolShell): Gtk.ReliefStyle
---@field rebuild_menu fun(shell: Gtk.ToolShell): nil
---@field get_text_orientation fun(shell: Gtk.ToolShell): Gtk.Orientation
---@field get_text_alignment fun(shell: Gtk.ToolShell): number
---@field get_ellipsize_mode fun(shell: Gtk.ToolShell): Pango.EllipsizeMode
---@field get_text_size_group fun(shell: Gtk.ToolShell): Gtk.SizeGroup
Gtk.ToolShellIface = {}

--- # class Gtk.Toolbar
---
--- A toolbar is created with a call to `gtk_toolbar_new()`.
--- 
--- A toolbar can contain instances of a subclass of `GtkToolItem`. To add
--- a `GtkToolItem` to the a toolbar, use `gtk_toolbar_insert()`. To remove
--- an item from the toolbar use `gtk_container_remove()`. To add a button
--- to the toolbar, add an instance of `GtkToolButton`.
--- 
--- Toolbar items can be visually grouped by adding instances of
--- `GtkSeparatorToolItem` to the toolbar. If the GtkToolbar child property
--- “expand” is `TRUE` and the property `GtkSeparatorToolItem`:draw is set to
--- `FALSE`, the effect is to force all following items to the end of the toolbar.
--- 
--- By default, a toolbar can be shrunk, upon which it will add an arrow button
--- to show an overflow menu offering access to any `GtkToolItem` child that has
--- a proxy menu item. To disable this and request enough size for all children,
--- call `gtk_toolbar_set_show_arrow()` to set `GtkToolbar`:show-arrow to `false`.
--- 
--- Creating a context menu for the toolbar can be done by connecting to
--- the `GtkToolbar`::popup-context-menu signal.
--- 
--- # CSS nodes
--- 
--- GtkToolbar has a single CSS node with name toolbar.
---
--- ---
---
---@class Gtk.Toolbar : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable, Gtk.ToolShell
---@field container Gtk.Container
---@field priv Gtk.ToolbarPrivate
---@operator call: Gtk.Toolbar
Gtk.Toolbar = {}

--- # method Gtk.Toolbar:get_drop_index()
---
--- Returns the position corresponding to the indicated point on
--- `toolbar`. This is useful when dragging items to the toolbar:
--- this function returns the position a new item should be
--- inserted.
--- 
--- `x` and `y` are in `toolbar` coordinates.
---
--- ---
---
---@param self Gtk.Toolbar # a `GtkToolbar`
---@param x integer # x coordinate of a point on the toolbar
---@param y integer # y coordinate of a point on the toolbar
---@return integer # The position corresponding to the point (`x`, `y`) on the toolbar.
function Gtk.Toolbar:get_drop_index(x, y) end

--- # method Gtk.Toolbar:get_icon_size()
---
--- Retrieves the icon size for the toolbar. See `gtk_toolbar_set_icon_size()`.
---
--- ---
---
---@param self Gtk.Toolbar # a `GtkToolbar`
---@return Gtk.IconSize # the current icon size for the icons on the toolbar.
function Gtk.Toolbar:get_icon_size() end

--- # method Gtk.Toolbar:get_item_index()
---
--- Returns the position of `item` on the toolbar, starting from 0.
--- It is an error if `item` is not a child of the toolbar.
---
--- ---
---
---@param self Gtk.Toolbar # a `GtkToolbar`
---@param item Gtk.ToolItem # a `GtkToolItem` that is a child of `toolbar`
---@return integer # the position of item on the toolbar.
function Gtk.Toolbar:get_item_index(item) end

--- # method Gtk.Toolbar:get_n_items()
---
--- Returns the number of items on the toolbar.
---
--- ---
---
---@param self Gtk.Toolbar # a `GtkToolbar`
---@return integer # the number of items on the toolbar
function Gtk.Toolbar:get_n_items() end

--- # method Gtk.Toolbar:get_nth_item()
---
--- Returns the `n`'th item on `toolbar`, or `nil` if the
--- toolbar does not contain an `n`'th item.
---
--- ---
---
---@param self Gtk.Toolbar # a `GtkToolbar`
---@param n integer # A position on the toolbar
---@return Gtk.ToolItem # The `n`'th `GtkToolItem` on `toolbar`, or `nil` if there isn’t an `n`'th item.
function Gtk.Toolbar:get_nth_item(n) end

--- # method Gtk.Toolbar:get_relief_style()
---
--- Returns the relief style of buttons on `toolbar`. See
--- `gtk_button_set_relief()`.
---
--- ---
---
---@param self Gtk.Toolbar # a `GtkToolbar`
---@return Gtk.ReliefStyle # The relief style of buttons on `toolbar`.
function Gtk.Toolbar:get_relief_style() end

--- # method Gtk.Toolbar:get_show_arrow()
---
--- Returns whether the toolbar has an overflow menu.
--- See `gtk_toolbar_set_show_arrow()`.
---
--- ---
---
---@param self Gtk.Toolbar # a `GtkToolbar`
---@return (boolean|nil) # `true` if the toolbar has an overflow menu.
function Gtk.Toolbar:get_show_arrow() end

--- # method Gtk.Toolbar:get_style()
---
--- Retrieves whether the toolbar has text, icons, or both . See
--- `gtk_toolbar_set_style()`.
---
--- ---
---
---@param self Gtk.Toolbar # a `GtkToolbar`
---@return Gtk.ToolbarStyle # the current style of `toolbar`
function Gtk.Toolbar:get_style() end

--- # method Gtk.Toolbar:insert()
---
--- Insert a `GtkToolItem` into the toolbar at position `pos`. If `pos` is
--- 0 the item is prepended to the start of the toolbar. If `pos` is
--- negative, the item is appended to the end of the toolbar.
---
--- ---
---
---@param self Gtk.Toolbar # a `GtkToolbar`
---@param item Gtk.ToolItem # a `GtkToolItem`
---@param pos integer # the position of the new item
---@return nil
function Gtk.Toolbar:insert(item, pos) end

--- # method Gtk.Toolbar:set_drop_highlight_item()
---
--- Highlights `toolbar` to give an idea of what it would look like
--- if `item` was added to `toolbar` at the position indicated by `index_`.
--- If `item` is `nil`, highlighting is turned off. In that case `index_`
--- is ignored.
--- 
--- The `tool_item` passed to this function must not be part of any widget
--- hierarchy. When an item is set as drop highlight item it can not
--- added to any widget hierarchy or used as highlight item for another
--- toolbar.
---
--- ---
---
---@param self Gtk.Toolbar # a `GtkToolbar`
---@param tool_item? Gtk.ToolItem # a `GtkToolItem`, or `nil` to turn of highlighting
---@param index_ integer # a position on `toolbar`
---@return nil
function Gtk.Toolbar:set_drop_highlight_item(tool_item, index_) end

--- # method Gtk.Toolbar:set_icon_size()
---
--- This function sets the size of stock icons in the toolbar. You
--- can call it both before you add the icons and after they’ve been
--- added. The size you set will override user preferences for the default
--- icon size.
--- 
--- This should only be used for special-purpose toolbars, normal
--- application toolbars should respect the user preferences for the
--- size of icons.
---
--- ---
---
---@param self Gtk.Toolbar # A `GtkToolbar`
---@param icon_size Gtk.IconSize # The `GtkIconSize` that stock icons in the toolbar shall have.
---@return nil
function Gtk.Toolbar:set_icon_size(icon_size) end

--- # method Gtk.Toolbar:set_show_arrow()
---
--- Sets whether to show an overflow menu when `toolbar` isn’t allocated enough
--- size to show all of its items. If `true`, items which can’t fit in `toolbar`,
--- and which have a proxy menu item set by `gtk_tool_item_set_proxy_menu_item()`
--- or `GtkToolItem`::create-menu-proxy, will be available in an overflow menu,
--- which can be opened by an added arrow button. If `false`, `toolbar` will
--- request enough size to fit all of its child items without any overflow.
---
--- ---
---
---@param self Gtk.Toolbar # a `GtkToolbar`
---@param show_arrow (boolean|nil) # Whether to show an overflow menu
---@return nil
function Gtk.Toolbar:set_show_arrow(show_arrow) end

--- # method Gtk.Toolbar:set_style()
---
--- Alters the view of `toolbar` to display either icons only, text only, or both.
---
--- ---
---
---@param self Gtk.Toolbar # a `GtkToolbar`.
---@param style Gtk.ToolbarStyle # the new style for `toolbar`.
---@return nil
function Gtk.Toolbar:set_style(style) end

--- # method Gtk.Toolbar:unset_icon_size()
---
--- Unsets toolbar icon size set with `gtk_toolbar_set_icon_size()`, so that
--- user preferences will be used to determine the icon size.
---
--- ---
---
---@param self Gtk.Toolbar # a `GtkToolbar`
---@return nil
function Gtk.Toolbar:unset_icon_size() end

--- # method Gtk.Toolbar:unset_style()
---
--- Unsets a toolbar style set with `gtk_toolbar_set_style()`, so that
--- user preferences will be used to determine the toolbar style.
---
--- ---
---
---@param self Gtk.Toolbar # a `GtkToolbar`
---@return nil
function Gtk.Toolbar:unset_style() end

--- # function Gtk.Toolbar.new()
---
--- Creates a new toolbar.
---
--- ---
---
---@return Gtk.Widget # the newly-created toolbar.
function Gtk.Toolbar.new() end

--- # record Gtk.ToolbarClass
---
---@class Gtk.ToolbarClass
---@field parent_class Gtk.ContainerClass
---@field orientation_changed fun(toolbar: Gtk.Toolbar, orientation: Gtk.Orientation): nil
---@field style_changed fun(toolbar: Gtk.Toolbar, style: Gtk.ToolbarStyle): nil
---@field popup_context_menu fun(toolbar: Gtk.Toolbar, x: integer, y: integer, button_number: integer): (boolean|nil)
Gtk.ToolbarClass = {}

--- # record Gtk.ToolbarPrivate
---
---@class Gtk.ToolbarPrivate
Gtk.ToolbarPrivate = {}

---@enum Gtk.ToolbarSpaceStyle
Gtk.ToolbarSpaceStyle = {}

---@enum Gtk.ToolbarStyle
Gtk.ToolbarStyle = {}

--- # class Gtk.Tooltip
---
--- Basic tooltips can be realized simply by using `gtk_widget_set_tooltip_text()`
--- or `gtk_widget_set_tooltip_markup()` without any explicit tooltip object.
--- 
--- When you need a tooltip with a little more fancy contents, like adding an
--- image, or you want the tooltip to have different contents per `GtkTreeView`
--- row or cell, you will have to do a little more work:
--- 
--- - Set the `GtkWidget`:has-tooltip property to `true`, this will make GTK+
---   monitor the widget for motion and related events which are needed to
---   determine when and where to show a tooltip.
--- 
--- - Connect to the `GtkWidget`::query-tooltip signal.  This signal will be
---   emitted when a tooltip is supposed to be shown. One of the arguments passed
---   to the signal handler is a GtkTooltip object. This is the object that we
---   are about to display as a tooltip, and can be manipulated in your callback
---   using functions like `gtk_tooltip_set_icon()`. There are functions for setting
---   the tooltip’s markup, setting an image from a named icon, or even putting in
---   a custom widget.
--- 
---   Return `true` from your query-tooltip handler. This causes the tooltip to be
---   show. If you return `false`, it will not be shown.
--- 
--- In the probably rare case where you want to have even more control over the
--- tooltip that is about to be shown, you can set your own `GtkWindow` which
--- will be used as tooltip window.  This works as follows:
--- 
--- - Set `GtkWidget`:has-tooltip and connect to `GtkWidget`::query-tooltip as before.
---   Use `gtk_widget_set_tooltip_window()` to set a `GtkWindow` created by you as
---   tooltip window.
--- 
--- - In the `GtkWidget`::query-tooltip callback you can access your window using
---   `gtk_widget_get_tooltip_window()` and manipulate as you wish. The semantics of
---   the return value are exactly as before, return `true` to show the window,
---   `false` to not show it.
---
--- ---
---
---@class Gtk.Tooltip : GObject.Object
Gtk.Tooltip = {}

--- # method Gtk.Tooltip:set_custom()
---
--- Replaces the widget packed into the tooltip with
--- `custom_widget`. `custom_widget` does not get destroyed when the tooltip goes
--- away.
--- By default a box with a `GtkImage` and `GtkLabel` is embedded in
--- the tooltip, which can be configured using `gtk_tooltip_set_markup()`
--- and `gtk_tooltip_set_icon()`.
---
--- ---
---
---@param self Gtk.Tooltip # a `GtkTooltip`
---@param custom_widget? Gtk.Widget # a `GtkWidget`, or `nil` to unset the old custom widget.
---@return nil
function Gtk.Tooltip:set_custom(custom_widget) end

--- # method Gtk.Tooltip:set_icon()
---
--- Sets the icon of the tooltip (which is in front of the text) to be
--- `pixbuf`.  If `pixbuf` is `nil`, the image will be hidden.
---
--- ---
---
---@param self Gtk.Tooltip # a `GtkTooltip`
---@param pixbuf? GdkPixbuf.Pixbuf # a `GdkPixbuf`, or `nil`
---@return nil
function Gtk.Tooltip:set_icon(pixbuf) end

--- # method Gtk.Tooltip:set_icon_from_gicon()
---
--- Sets the icon of the tooltip (which is in front of the text)
--- to be the icon indicated by `gicon` with the size indicated
--- by `size`. If `gicon` is `nil`, the image will be hidden.
---
--- ---
---
---@param self Gtk.Tooltip # a `GtkTooltip`
---@param gicon? Gio.Icon # a `GIcon` representing the icon, or `nil`
---@param size integer # a stock icon size (`GtkIconSize`)
---@return nil
function Gtk.Tooltip:set_icon_from_gicon(gicon, size) end

--- # method Gtk.Tooltip:set_icon_from_icon_name()
---
--- Sets the icon of the tooltip (which is in front of the text) to be
--- the icon indicated by `icon_name` with the size indicated
--- by `size`.  If `icon_name` is `nil`, the image will be hidden.
---
--- ---
---
---@param self Gtk.Tooltip # a `GtkTooltip`
---@param icon_name? string # an icon name, or `nil`
---@param size integer # a stock icon size (`GtkIconSize`)
---@return nil
function Gtk.Tooltip:set_icon_from_icon_name(icon_name, size) end

--- # method Gtk.Tooltip:set_icon_from_stock()
---
--- Sets the icon of the tooltip (which is in front of the text) to be
--- the stock item indicated by `stock_id` with the size indicated
--- by `size`.  If `stock_id` is `nil`, the image will be hidden.
---
--- ---
---
---@param self Gtk.Tooltip # a `GtkTooltip`
---@param stock_id? string # a stock id, or `nil`
---@param size integer # a stock icon size (`GtkIconSize`)
---@return nil
function Gtk.Tooltip:set_icon_from_stock(stock_id, size) end

--- # method Gtk.Tooltip:set_markup()
---
--- Sets the text of the tooltip to be `markup`, which is marked up
--- with the [Pango text markup language][PangoMarkupFormat].
--- If `markup` is `nil`, the label will be hidden.
---
--- ---
---
---@param self Gtk.Tooltip # a `GtkTooltip`
---@param markup? string # a markup string (see [Pango markup format][PangoMarkupFormat]) or `nil`
---@return nil
function Gtk.Tooltip:set_markup(markup) end

--- # method Gtk.Tooltip:set_text()
---
--- Sets the text of the tooltip to be `text`. If `text` is `nil`, the label
--- will be hidden. See also `gtk_tooltip_set_markup()`.
---
--- ---
---
---@param self Gtk.Tooltip # a `GtkTooltip`
---@param text? string # a text string or `nil`
---@return nil
function Gtk.Tooltip:set_text(text) end

--- # method Gtk.Tooltip:set_tip_area()
---
--- Sets the area of the widget, where the contents of this tooltip apply,
--- to be `rect` (in widget coordinates).  This is especially useful for
--- properly setting tooltips on `GtkTreeView` rows and cells, `GtkIconViews`,
--- etc.
--- 
--- For setting tooltips on `GtkTreeView`, please refer to the convenience
--- functions for this: `gtk_tree_view_set_tooltip_row()` and
--- `gtk_tree_view_set_tooltip_cell()`.
---
--- ---
---
---@param self Gtk.Tooltip # a `GtkTooltip`
---@param rect Gdk.Rectangle # a `GdkRectangle`
---@return nil
function Gtk.Tooltip:set_tip_area(rect) end

--- # function Gtk.Tooltip.trigger_tooltip_query()
---
--- Triggers a new tooltip query on `display`, in order to update the current
--- visible tooltip, or to show/hide the current tooltip.  This function is
--- useful to call when, for example, the state of the widget changed by a
--- key press.
---
--- ---
---
---@param display Gdk.Display # a `GdkDisplay`
---@return nil
function Gtk.Tooltip.trigger_tooltip_query(display) end

--- # class Gtk.ToplevelAccessible
---
---@class Gtk.ToplevelAccessible : Atk.Object
---@field parent Atk.Object
---@field priv Gtk.ToplevelAccessiblePrivate
Gtk.ToplevelAccessible = {}

--- # method Gtk.ToplevelAccessible:get_children()
---
---@param self Gtk.ToplevelAccessible
---@return Gtk.Window[] # List of children.
function Gtk.ToplevelAccessible:get_children() end

--- # record Gtk.ToplevelAccessibleClass
---
---@class Gtk.ToplevelAccessibleClass
---@field parent_class Atk.ObjectClass
Gtk.ToplevelAccessibleClass = {}

--- # record Gtk.ToplevelAccessiblePrivate
---
---@class Gtk.ToplevelAccessiblePrivate
Gtk.ToplevelAccessiblePrivate = {}

---@alias Gtk.TranslateFunc fun(path: string, func_data: userdata): string

---@alias Gtk.TreeCellDataFunc fun(tree_column: Gtk.TreeViewColumn, cell: Gtk.CellRenderer, tree_model: Gtk.TreeModel, iter: Gtk.TreeIter, data: userdata): nil

---@alias Gtk.TreeDestroyCountFunc fun(tree_view: Gtk.TreeView, path: Gtk.TreePath, children: integer, user_data: userdata): nil

--- # interface Gtk.TreeDragDest
---
---@class Gtk.TreeDragDest
Gtk.TreeDragDest = {}

--- # method Gtk.TreeDragDest:drag_data_received()
---
--- Asks the `GtkTreeDragDest` to insert a row before the path `dest`,
--- deriving the contents of the row from `selection_data`. If `dest` is
--- outside the tree so that inserting before it is impossible, `false`
--- will be returned. Also, `false` may be returned if the new row is
--- not created for some model-specific reason.  Should robustly handle
--- a `dest` no longer found in the model!
---
--- ---
---
---@param self Gtk.TreeDragDest # a `GtkTreeDragDest`
---@param dest Gtk.TreePath # row to drop in front of
---@param selection_data Gtk.SelectionData # data to drop
---@return (boolean|nil) # whether a new row was created before position `dest`
function Gtk.TreeDragDest:drag_data_received(dest, selection_data) end

--- # method Gtk.TreeDragDest:row_drop_possible()
---
--- Determines whether a drop is possible before the given `dest_path`,
--- at the same depth as `dest_path`. i.e., can we drop the data in
--- `selection_data` at that location. `dest_path` does not have to
--- exist; the return value will almost certainly be `false` if the
--- parent of `dest_path` doesn’t exist, though.
---
--- ---
---
---@param self Gtk.TreeDragDest # a `GtkTreeDragDest`
---@param dest_path Gtk.TreePath # destination row
---@param selection_data Gtk.SelectionData # the data being dragged
---@return (boolean|nil) # `true` if a drop is possible before `dest_path`
function Gtk.TreeDragDest:row_drop_possible(dest_path, selection_data) end

--- # record Gtk.TreeDragDestIface
---
---@class Gtk.TreeDragDestIface
---@field g_iface GObject.TypeInterface
---@field drag_data_received fun(drag_dest: Gtk.TreeDragDest, dest: Gtk.TreePath, selection_data: Gtk.SelectionData): (boolean|nil)
---@field row_drop_possible fun(drag_dest: Gtk.TreeDragDest, dest_path: Gtk.TreePath, selection_data: Gtk.SelectionData): (boolean|nil)
Gtk.TreeDragDestIface = {}

--- # interface Gtk.TreeDragSource
---
---@class Gtk.TreeDragSource
Gtk.TreeDragSource = {}

--- # method Gtk.TreeDragSource:drag_data_delete()
---
--- Asks the `GtkTreeDragSource` to delete the row at `path`, because
--- it was moved somewhere else via drag-and-drop. Returns `false`
--- if the deletion fails because `path` no longer exists, or for
--- some model-specific reason. Should robustly handle a `path` no
--- longer found in the model!
---
--- ---
---
---@param self Gtk.TreeDragSource # a `GtkTreeDragSource`
---@param path Gtk.TreePath # row that was being dragged
---@return (boolean|nil) # `true` if the row was successfully deleted
function Gtk.TreeDragSource:drag_data_delete(path) end

--- # method Gtk.TreeDragSource:drag_data_get()
---
--- Asks the `GtkTreeDragSource` to fill in `selection_data` with a
--- representation of the row at `path`. `selection_data`->target gives
--- the required type of the data.  Should robustly handle a `path` no
--- longer found in the model!
---
--- ---
---
---@param self Gtk.TreeDragSource # a `GtkTreeDragSource`
---@param path Gtk.TreePath # row that was dragged
---@param selection_data Gtk.SelectionData # a `GtkSelectionData` to fill with data from the dragged row
---@return (boolean|nil) # `true` if data of the required type was provided
function Gtk.TreeDragSource:drag_data_get(path, selection_data) end

--- # method Gtk.TreeDragSource:row_draggable()
---
--- Asks the `GtkTreeDragSource` whether a particular row can be used as
--- the source of a DND operation. If the source doesn’t implement
--- this interface, the row is assumed draggable.
---
--- ---
---
---@param self Gtk.TreeDragSource # a `GtkTreeDragSource`
---@param path Gtk.TreePath # row on which user is initiating a drag
---@return (boolean|nil) # `true` if the row can be dragged
function Gtk.TreeDragSource:row_draggable(path) end

--- # record Gtk.TreeDragSourceIface
---
---@class Gtk.TreeDragSourceIface
---@field g_iface GObject.TypeInterface
---@field row_draggable fun(drag_source: Gtk.TreeDragSource, path: Gtk.TreePath): (boolean|nil)
---@field drag_data_get fun(drag_source: Gtk.TreeDragSource, path: Gtk.TreePath, selection_data: Gtk.SelectionData): (boolean|nil)
---@field drag_data_delete fun(drag_source: Gtk.TreeDragSource, path: Gtk.TreePath): (boolean|nil)
Gtk.TreeDragSourceIface = {}

--- # record Gtk.TreeIter
---
--- The `GtkTreeIter` is the primary structure
--- for accessing a `GtkTreeModel`. Models are expected to put a unique
--- integer in the `stamp` member, and put
--- model-specific data in the three `user_data`
--- members.
---
--- ---
---
---@class Gtk.TreeIter
---@field stamp integer # a unique stamp to catch invalid iterators
---@field user_data userdata # model-specific data
---@field user_data2 userdata # model-specific data
---@field user_data3 userdata # model-specific data
Gtk.TreeIter = {}

--- # method Gtk.TreeIter:copy()
---
--- Creates a dynamically allocated tree iterator as a copy of `iter`.
--- 
--- This function is not intended for use in applications,
--- because you can just copy the structs by value
--- (`GtkTreeIter new_iter = iter;`).
--- You must free this iter with `gtk_tree_iter_free()`.
---
--- ---
---
---@param self Gtk.TreeIter # a `GtkTreeIter`-struct
---@return Gtk.TreeIter # a newly-allocated copy of `iter`
function Gtk.TreeIter:copy() end

--- # method Gtk.TreeIter:free()
---
--- Frees an iterator that has been allocated by `gtk_tree_iter_copy()`.
--- 
--- This function is mainly used for language bindings.
---
--- ---
---
---@param self Gtk.TreeIter # a dynamically allocated tree iterator
---@return nil
function Gtk.TreeIter:free() end

---@alias Gtk.TreeIterCompareFunc fun(model: Gtk.TreeModel, a: Gtk.TreeIter, b: Gtk.TreeIter, user_data: userdata): integer

--- # interface Gtk.TreeModel
---
--- The `GtkTreeModel` interface defines a generic tree interface for
--- use by the `GtkTreeView` widget. It is an abstract interface, and
--- is designed to be usable with any appropriate data structure. The
--- programmer just has to implement this interface on their own data
--- type for it to be viewable by a `GtkTreeView` widget.
--- 
--- The model is represented as a hierarchical tree of strongly-typed,
--- columned data. In other words, the model can be seen as a tree where
--- every node has different values depending on which column is being
--- queried. The type of data found in a column is determined by using
--- the GType system (ie. `G_TYPE_INT`, `GTK_TYPE_BUTTON`, `G_TYPE_POINTER`,
--- etc). The types are homogeneous per column across all nodes. It is
--- important to note that this interface only provides a way of examining
--- a model and observing changes. The implementation of each individual
--- model decides how and if changes are made.
--- 
--- In order to make life simpler for programmers who do not need to
--- write their own specialized model, two generic models are provided
--- — the `GtkTreeStore` and the `GtkListStore`. To use these, the
--- developer simply pushes data into these models as necessary. These
--- models provide the data structure as well as all appropriate tree
--- interfaces. As a result, implementing drag and drop, sorting, and
--- storing data is trivial. For the vast majority of trees and lists,
--- these two models are sufficient.
--- 
--- Models are accessed on a node/column level of granularity. One can
--- query for the value of a model at a certain node and a certain
--- column on that node. There are two structures used to reference a
--- particular node in a model. They are the `GtkTreePath`-struct and
--- the `GtkTreeIter`-struct (“iter” is short for iterator). Most of the
--- interface consists of operations on a `GtkTreeIter`-struct.
--- 
--- A path is essentially a potential node. It is a location on a model
--- that may or may not actually correspond to a node on a specific
--- model. The `GtkTreePath`-struct can be converted into either an
--- array of unsigned integers or a string. The string form is a list
--- of numbers separated by a colon. Each number refers to the offset
--- at that level. Thus, the path `0` refers to the root
--- node and the path `2:4` refers to the fifth child of
--- the third node.
--- 
--- By contrast, a `GtkTreeIter`-struct is a reference to a specific node on
--- a specific model. It is a generic struct with an integer and three
--- generic pointers. These are filled in by the model in a model-specific
--- way. One can convert a path to an iterator by calling
--- `gtk_tree_model_get_iter()`. These iterators are the primary way
--- of accessing a model and are similar to the iterators used by
--- `GtkTextBuffer`. They are generally statically allocated on the
--- stack and only used for a short time. The model interface defines
--- a set of operations using them for navigating the model.
--- 
--- It is expected that models fill in the iterator with private data.
--- For example, the `GtkListStore` model, which is internally a simple
--- linked list, stores a list node in one of the pointers. The
--- `GtkTreeModelSort` stores an array and an offset in two of the
--- pointers. Additionally, there is an integer field. This field is
--- generally filled with a unique stamp per model. This stamp is for
--- catching errors resulting from using invalid iterators with a model.
--- 
--- The lifecycle of an iterator can be a little confusing at first.
--- Iterators are expected to always be valid for as long as the model
--- is unchanged (and doesn’t emit a signal). The model is considered
--- to own all outstanding iterators and nothing needs to be done to
--- free them from the user’s point of view. Additionally, some models
--- guarantee that an iterator is valid for as long as the node it refers
--- to is valid (most notably the `GtkTreeStore` and `GtkListStore`).
--- Although generally uninteresting, as one always has to allow for
--- the case where iterators do not persist beyond a signal, some very
--- important performance enhancements were made in the sort model.
--- As a result, the `GTK_TREE_MODEL_ITERS_PERSIST` flag was added to
--- indicate this behavior.
--- 
--- To help show some common operation of a model, some examples are
--- provided. The first example shows three ways of getting the iter at
--- the location `3:2:5`. While the first method shown is
--- easier, the second is much more common, as you often get paths from
--- callbacks.
--- 
--- ## Acquiring a `GtkTreeIter`-struct
--- 
--- ```c
--- // Three ways of getting the iter pointing to the location
--- GtkTreePath *path;
--- GtkTreeIter iter;
--- GtkTreeIter parent_iter;
--- 
--- // get the iterator from a string
--- gtk_tree_model_get_iter_from_string (model,
---                                      &iter,
---                                      "3:2:5");
--- 
--- // get the iterator from a path
--- path = gtk_tree_path_new_from_string ("3:2:5");
--- gtk_tree_model_get_iter (model, &iter, path);
--- gtk_tree_path_free (path);
--- 
--- // walk the tree to find the iterator
--- gtk_tree_model_iter_nth_child (model, &iter,
---                                NULL, 3);
--- parent_iter = iter;
--- gtk_tree_model_iter_nth_child (model, &iter,
---                                &parent_iter, 2);
--- parent_iter = iter;
--- gtk_tree_model_iter_nth_child (model, &iter,
---                                &parent_iter, 5);
--- ```
--- 
--- This second example shows a quick way of iterating through a list
--- and getting a string and an integer from each row. The
--- `populate_model()` function used below is not
--- shown, as it is specific to the `GtkListStore`. For information on
--- how to write such a function, see the `GtkListStore` documentation.
--- 
--- ## Reading data from a `GtkTreeModel`
--- 
--- ```c
--- enum
--- {
---   STRING_COLUMN,
---   INT_COLUMN,
---   N_COLUMNS
--- };
--- 
--- ...
--- 
--- GtkTreeModel *list_store;
--- GtkTreeIter iter;
--- gboolean valid;
--- gint row_count = 0;
--- 
--- // make a new list_store
--- list_store = gtk_list_store_new (N_COLUMNS,
---                                  G_TYPE_STRING,
---                                  G_TYPE_INT);
--- 
--- // Fill the list store with data
--- populate_model (list_store);
--- 
--- // Get the first iter in the list, check it is valid and walk
--- // through the list, reading each row.
--- 
--- valid = gtk_tree_model_get_iter_first (list_store,
---                                        &iter);
--- while (valid)
---  {
---    gchar *str_data;
---    gint   int_data;
--- 
---    // Make sure you terminate calls to `gtk_tree_model_get()` with a “-1” value
---    gtk_tree_model_get (list_store, &iter,
---                        STRING_COLUMN, &str_data,
---                        INT_COLUMN, &int_data,
---                        -1);
--- 
---    // Do something with the data
---    g_print ("Row %d: (%s,%d)\n",
---             row_count, str_data, int_data);
---    g_free (str_data);
--- 
---    valid = gtk_tree_model_iter_next (list_store,
---                                      &iter);
---    row_count++;
---  }
--- ```
--- 
--- The `GtkTreeModel` interface contains two methods for reference
--- counting: `gtk_tree_model_ref_node()` and `gtk_tree_model_unref_node()`.
--- These two methods are optional to implement. The reference counting
--- is meant as a way for views to let models know when nodes are being
--- displayed. `GtkTreeView` will take a reference on a node when it is
--- visible, which means the node is either in the toplevel or expanded.
--- Being displayed does not mean that the node is currently directly
--- visible to the user in the viewport. Based on this reference counting
--- scheme a caching model, for example, can decide whether or not to cache
--- a node based on the reference count. A file-system based model would
--- not want to keep the entire file hierarchy in memory, but just the
--- folders that are currently expanded in every current view.
--- 
--- When working with reference counting, the following rules must be taken
--- into account:
--- 
--- - Never take a reference on a node without owning a reference on its parent.
---   This means that all parent nodes of a referenced node must be referenced
---   as well.
--- 
--- - Outstanding references on a deleted node are not released. This is not
---   possible because the node has already been deleted by the time the
---   row-deleted signal is received.
--- 
--- - Models are not obligated to emit a signal on rows of which none of its
---   siblings are referenced. To phrase this differently, signals are only
---   required for levels in which nodes are referenced. For the root level
---   however, signals must be emitted at all times (however the root level
---   is always referenced when any view is attached).
---
--- ---
---
---@class Gtk.TreeModel
Gtk.TreeModel = {}

--- # method Gtk.TreeModel:filter_new()
---
--- Creates a new `GtkTreeModel`, with `child_model` as the child_model
--- and `root` as the virtual root.
---
--- ---
---
---@param self Gtk.TreeModel # A `GtkTreeModel`.
---@param root? Gtk.TreePath # A `GtkTreePath` or `nil`.
---@return Gtk.TreeModel # A new `GtkTreeModel`.
function Gtk.TreeModel:filter_new(root) end

--- # method Gtk.TreeModel:foreach()
---
--- Calls func on each node in model in a depth-first fashion.
--- 
--- If `func` returns `true`, then the tree ceases to be walked,
--- and `gtk_tree_model_foreach()` returns.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param func Gtk.TreeModelForeachFunc # a function to be called on each row
---@param user_data? userdata # user data to passed to `func`
---@return nil
function Gtk.TreeModel:foreach(func, user_data) end

--- # method Gtk.TreeModel:get_column_type()
---
--- Returns the type of the column.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param index_ integer # the column index
---@return Gtk.GType # the type of the column
function Gtk.TreeModel:get_column_type(index_) end

--- # method Gtk.TreeModel:get_flags()
---
--- Returns a set of flags supported by this interface.
--- 
--- The flags are a bitwise combination of `GtkTreeModelFlags`.
--- The flags supported should not change during the lifetime
--- of the `tree_model`.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@return Gtk.TreeModelFlags # the flags supported by this interface
function Gtk.TreeModel:get_flags() end

--- # method Gtk.TreeModel:get_iter()
---
--- Sets `iter` to a valid iterator pointing to `path`.  If `path` does
--- not exist, `iter` is set to an invalid iterator and `false` is returned.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param iter Gtk.TreeIter # the uninitialized `GtkTreeIter`-struct
---@param path Gtk.TreePath # the `GtkTreePath`-struct
---@return (boolean|nil) # `true`, if `iter` was set
function Gtk.TreeModel:get_iter(iter, path) end

--- # method Gtk.TreeModel:get_iter_first()
---
--- Initializes `iter` with the first iterator in the tree
--- (the one at the path "0") and returns `true`. Returns
--- `false` if the tree is empty.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param iter Gtk.TreeIter # the uninitialized `GtkTreeIter`-struct
---@return (boolean|nil) # `true`, if `iter` was set
function Gtk.TreeModel:get_iter_first(iter) end

--- # method Gtk.TreeModel:get_iter_from_string()
---
--- Sets `iter` to a valid iterator pointing to `path_string`, if it
--- exists. Otherwise, `iter` is left invalid and `false` is returned.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param iter Gtk.TreeIter # an uninitialized `GtkTreeIter`-struct
---@param path_string string # a string representation of a `GtkTreePath`-struct
---@return (boolean|nil) # `true`, if `iter` was set
function Gtk.TreeModel:get_iter_from_string(iter, path_string) end

--- # method Gtk.TreeModel:get_n_columns()
---
--- Returns the number of columns supported by `tree_model`.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@return integer # the number of columns
function Gtk.TreeModel:get_n_columns() end

--- # method Gtk.TreeModel:get_path()
---
--- Returns a newly-created `GtkTreePath`-struct referenced by `iter`.
--- 
--- This path should be freed with `gtk_tree_path_free()`.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param iter Gtk.TreeIter # the `GtkTreeIter`-struct
---@return Gtk.TreePath # a newly-created `GtkTreePath`-struct
function Gtk.TreeModel:get_path(iter) end

--- # method Gtk.TreeModel:get_string_from_iter()
---
--- Generates a string representation of the iter.
--- 
--- This string is a “:” separated list of numbers.
--- For example, “4:10:0:3” would be an acceptable
--- return value for this string.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param iter Gtk.TreeIter # a `GtkTreeIter`-struct
---@return string # a newly-allocated string. Must be freed with `g_free()`.
function Gtk.TreeModel:get_string_from_iter(iter) end

--- # method Gtk.TreeModel:get_value()
---
--- Initializes and sets `value` to that at `column`.
--- 
--- When done with `value`, `g_value_unset()` needs to be called
--- to free any allocated memory.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param iter Gtk.TreeIter # the `GtkTreeIter`-struct
---@param column integer # the column to lookup the value at
---@param value GObject.Value # an empty `GValue` to set
---@return nil
function Gtk.TreeModel:get_value(iter, column, value) end

--- # method Gtk.TreeModel:iter_children()
---
--- Sets `iter` to point to the first child of `parent`.
--- 
--- If `parent` has no children, `false` is returned and `iter` is
--- set to be invalid. `parent` will remain a valid node after this
--- function has been called.
--- 
--- If `parent` is `nil` returns the first node, equivalent to
--- `gtk_tree_model_get_iter_first (tree_model, iter);`
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param iter Gtk.TreeIter # the new `GtkTreeIter`-struct to be set to the child
---@param parent? Gtk.TreeIter # the `GtkTreeIter`-struct, or `nil`
---@return (boolean|nil) # `true`, if `iter` has been set to the first child
function Gtk.TreeModel:iter_children(iter, parent) end

--- # method Gtk.TreeModel:iter_has_child()
---
--- Returns `true` if `iter` has children, `false` otherwise.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param iter Gtk.TreeIter # the `GtkTreeIter`-struct to test for children
---@return (boolean|nil) # `true` if `iter` has children
function Gtk.TreeModel:iter_has_child(iter) end

--- # method Gtk.TreeModel:iter_n_children()
---
--- Returns the number of children that `iter` has.
--- 
--- As a special case, if `iter` is `nil`, then the number
--- of toplevel nodes is returned.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param iter? Gtk.TreeIter # the `GtkTreeIter`-struct, or `nil`
---@return integer # the number of children of `iter`
function Gtk.TreeModel:iter_n_children(iter) end

--- # method Gtk.TreeModel:iter_next()
---
--- Sets `iter` to point to the node following it at the current level.
--- 
--- If there is no next `iter`, `false` is returned and `iter` is set
--- to be invalid.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param iter Gtk.TreeIter # the `GtkTreeIter`-struct
---@return (boolean|nil) # `true` if `iter` has been changed to the next node
function Gtk.TreeModel:iter_next(iter) end

--- # method Gtk.TreeModel:iter_nth_child()
---
--- Sets `iter` to be the child of `parent`, using the given index.
--- 
--- The first index is 0. If `n` is too big, or `parent` has no children,
--- `iter` is set to an invalid iterator and `false` is returned. `parent`
--- will remain a valid node after this function has been called. As a
--- special case, if `parent` is `nil`, then the `n`-th root node
--- is set.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param iter Gtk.TreeIter # the `GtkTreeIter`-struct to set to the nth child
---@param parent? Gtk.TreeIter # the `GtkTreeIter`-struct to get the child from, or `nil`.
---@param n integer # the index of the desired child
---@return (boolean|nil) # `true`, if `parent` has an `n`-th child
function Gtk.TreeModel:iter_nth_child(iter, parent, n) end

--- # method Gtk.TreeModel:iter_parent()
---
--- Sets `iter` to be the parent of `child`.
--- 
--- If `child` is at the toplevel, and doesn’t have a parent, then
--- `iter` is set to an invalid iterator and `false` is returned.
--- `child` will remain a valid node after this function has been
--- called.
--- 
--- `iter` will be initialized before the lookup is performed, so `child`
--- and `iter` cannot point to the same memory location.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param iter Gtk.TreeIter # the new `GtkTreeIter`-struct to set to the parent
---@param child Gtk.TreeIter # the `GtkTreeIter`-struct
---@return (boolean|nil) # `true`, if `iter` is set to the parent of `child`
function Gtk.TreeModel:iter_parent(iter, child) end

--- # method Gtk.TreeModel:iter_previous()
---
--- Sets `iter` to point to the previous node at the current level.
--- 
--- If there is no previous `iter`, `false` is returned and `iter` is
--- set to be invalid.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param iter Gtk.TreeIter # the `GtkTreeIter`-struct
---@return (boolean|nil) # `true` if `iter` has been changed to the previous node
function Gtk.TreeModel:iter_previous(iter) end

--- # method Gtk.TreeModel:ref_node()
---
--- Lets the tree ref the node.
--- 
--- This is an optional method for models to implement.
--- To be more specific, models may ignore this call as it exists
--- primarily for performance reasons.
--- 
--- This function is primarily meant as a way for views to let
--- caching models know when nodes are being displayed (and hence,
--- whether or not to cache that node). Being displayed means a node
--- is in an expanded branch, regardless of whether the node is currently
--- visible in the viewport. For example, a file-system based model
--- would not want to keep the entire file-hierarchy in memory,
--- just the sections that are currently being displayed by
--- every current view.
--- 
--- A model should be expected to be able to get an iter independent
--- of its reffed state.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param iter Gtk.TreeIter # the `GtkTreeIter`-struct
---@return nil
function Gtk.TreeModel:ref_node(iter) end

--- # method Gtk.TreeModel:row_changed()
---
--- Emits the `GtkTreeModel`::row-changed signal on `tree_model`.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param path Gtk.TreePath # a `GtkTreePath`-struct pointing to the changed row
---@param iter Gtk.TreeIter # a valid `GtkTreeIter`-struct pointing to the changed row
---@return nil
function Gtk.TreeModel:row_changed(path, iter) end

--- # method Gtk.TreeModel:row_deleted()
---
--- Emits the `GtkTreeModel`::row-deleted signal on `tree_model`.
--- 
--- This should be called by models after a row has been removed.
--- The location pointed to by `path` should be the location that
--- the row previously was at. It may not be a valid location anymore.
--- 
--- Nodes that are deleted are not unreffed, this means that any
--- outstanding references on the deleted node should not be released.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param path Gtk.TreePath # a `GtkTreePath`-struct pointing to the previous location of the deleted row
---@return nil
function Gtk.TreeModel:row_deleted(path) end

--- # method Gtk.TreeModel:row_has_child_toggled()
---
--- Emits the `GtkTreeModel`::row-has-child-toggled signal on
--- `tree_model`. This should be called by models after the child
--- state of a node changes.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param path Gtk.TreePath # a `GtkTreePath`-struct pointing to the changed row
---@param iter Gtk.TreeIter # a valid `GtkTreeIter`-struct pointing to the changed row
---@return nil
function Gtk.TreeModel:row_has_child_toggled(path, iter) end

--- # method Gtk.TreeModel:row_inserted()
---
--- Emits the `GtkTreeModel`::row-inserted signal on `tree_model`.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param path Gtk.TreePath # a `GtkTreePath`-struct pointing to the inserted row
---@param iter Gtk.TreeIter # a valid `GtkTreeIter`-struct pointing to the inserted row
---@return nil
function Gtk.TreeModel:row_inserted(path, iter) end

--- # method Gtk.TreeModel:rows_reordered()
---
--- Emits the `GtkTreeModel`::rows-reordered signal on `tree_model`.
--- 
--- This should be called by models when their rows have been
--- reordered.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param path Gtk.TreePath # a `GtkTreePath`-struct pointing to the tree node whose children have been reordered
---@param iter? Gtk.TreeIter # a valid `GtkTreeIter`-struct pointing to the node whose children have been reordered, or `nil` if the depth of `path` is 0
---@param new_order unknown[] # an array of integers mapping the current position of each child to its old position before the re-ordering, i.e. `new_order``[newpos] = oldpos`
---@param length integer # length of `new_order` array
---@return nil
function Gtk.TreeModel:rows_reordered(path, iter, new_order, length) end

--- # method Gtk.TreeModel:unref_node()
---
--- Lets the tree unref the node.
--- 
--- This is an optional method for models to implement.
--- To be more specific, models may ignore this call as it exists
--- primarily for performance reasons. For more information on what
--- this means, see `gtk_tree_model_ref_node()`.
--- 
--- Please note that nodes that are deleted are not unreffed.
---
--- ---
---
---@param self Gtk.TreeModel # a `GtkTreeModel`
---@param iter Gtk.TreeIter # the `GtkTreeIter`-struct
---@return nil
function Gtk.TreeModel:unref_node(iter) end

--- # class Gtk.TreeModelFilter
---
--- A `GtkTreeModelFilter` is a tree model which wraps another tree model,
--- and can do the following things:
--- 
--- - Filter specific rows, based on data from a “visible column”, a column
---   storing booleans indicating whether the row should be filtered or not,
---   or based on the return value of a “visible function”, which gets a
---   model, iter and user_data and returns a boolean indicating whether the
---   row should be filtered or not.
--- 
--- - Modify the “appearance” of the model, using a modify function.
---   This is extremely powerful and allows for just changing some
---   values and also for creating a completely different model based
---   on the given child model.
--- 
--- - Set a different root node, also known as a “virtual root”. You can pass
---   in a `GtkTreePath` indicating the root node for the filter at construction
---   time.
--- 
--- The basic API is similar to `GtkTreeModelSort`. For an example on its usage,
--- see the section on `GtkTreeModelSort`.
--- 
--- When using `GtkTreeModelFilter`, it is important to realize that
--- `GtkTreeModelFilter` maintains an internal cache of all nodes which are
--- visible in its clients. The cache is likely to be a subtree of the tree
--- exposed by the child model. `GtkTreeModelFilter` will not cache the entire
--- child model when unnecessary to not compromise the caching mechanism
--- that is exposed by the reference counting scheme. If the child model
--- implements reference counting, unnecessary signals may not be emitted
--- because of reference counting rule 3, see the `GtkTreeModel`
--- documentation. (Note that e.g. `GtkTreeStore` does not implement
--- reference counting and will always emit all signals, even when
--- the receiving node is not visible).
--- 
--- Because of this, limitations for possible visible functions do apply.
--- In general, visible functions should only use data or properties from
--- the node for which the visibility state must be determined, its siblings
--- or its parents. Usually, having a dependency on the state of any child
--- node is not possible, unless references are taken on these explicitly.
--- When no such reference exists, no signals may be received for these child
--- nodes (see reference couting rule number 3 in the `GtkTreeModel` section).
--- 
--- Determining the visibility state of a given node based on the state
--- of its child nodes is a frequently occurring use case. Therefore,
--- `GtkTreeModelFilter` explicitly supports this. For example, when a node
--- does not have any children, you might not want the node to be visible.
--- As soon as the first row is added to the node’s child level (or the
--- last row removed), the node’s visibility should be updated.
--- 
--- This introduces a dependency from the node on its child nodes. In order
--- to accommodate this, `GtkTreeModelFilter` must make sure the necessary
--- signals are received from the child model. This is achieved by building,
--- for all nodes which are exposed as visible nodes to `GtkTreeModelFilter`'s
--- clients, the child level (if any) and take a reference on the first node
--- in this level. Furthermore, for every row-inserted, row-changed or
--- row-deleted signal (also these which were not handled because the node
--- was not cached), `GtkTreeModelFilter` will check if the visibility state
--- of any parent node has changed.
--- 
--- Beware, however, that this explicit support is limited to these two
--- cases. For example, if you want a node to be visible only if two nodes
--- in a child’s child level (2 levels deeper) are visible, you are on your
--- own. In this case, either rely on `GtkTreeStore` to emit all signals
--- because it does not implement reference counting, or for models that
--- do implement reference counting, obtain references on these child levels
--- yourself.
---
--- ---
---
---@class Gtk.TreeModelFilter : GObject.Object, Gtk.TreeDragSource, Gtk.TreeModel
---@field parent GObject.Object
---@field priv Gtk.TreeModelFilterPrivate
Gtk.TreeModelFilter = {}

--- # method Gtk.TreeModelFilter:clear_cache()
---
--- This function should almost never be called. It clears the `filter`
--- of any cached iterators that haven’t been reffed with
--- `gtk_tree_model_ref_node()`. This might be useful if the child model
--- being filtered is static (and doesn’t change often) and there has been
--- a lot of unreffed access to nodes. As a side effect of this function,
--- all unreffed iters will be invalid.
---
--- ---
---
---@param self Gtk.TreeModelFilter # A `GtkTreeModelFilter`.
---@return nil
function Gtk.TreeModelFilter:clear_cache() end

--- # method Gtk.TreeModelFilter:convert_child_iter_to_iter()
---
--- Sets `filter_iter` to point to the row in `filter` that corresponds to the
--- row pointed at by `child_iter`.  If `filter_iter` was not set, `false` is
--- returned.
---
--- ---
---
---@param self Gtk.TreeModelFilter # A `GtkTreeModelFilter`.
---@param filter_iter Gtk.TreeIter # An uninitialized `GtkTreeIter`.
---@param child_iter Gtk.TreeIter # A valid `GtkTreeIter` pointing to a row on the child model.
---@return (boolean|nil) # `true`, if `filter_iter` was set, i.e. if `child_iter` is a valid iterator pointing to a visible row in child model.
function Gtk.TreeModelFilter:convert_child_iter_to_iter(filter_iter, child_iter) end

--- # method Gtk.TreeModelFilter:convert_child_path_to_path()
---
--- Converts `child_path` to a path relative to `filter`. That is, `child_path`
--- points to a path in the child model. The rerturned path will point to the
--- same row in the filtered model. If `child_path` isn’t a valid path on the
--- child model or points to a row which is not visible in `filter`, then `nil`
--- is returned.
---
--- ---
---
---@param self Gtk.TreeModelFilter # A `GtkTreeModelFilter`.
---@param child_path Gtk.TreePath # A `GtkTreePath` to convert.
---@return Gtk.TreePath # A newly allocated `GtkTreePath`, or `nil`.
function Gtk.TreeModelFilter:convert_child_path_to_path(child_path) end

--- # method Gtk.TreeModelFilter:convert_iter_to_child_iter()
---
--- Sets `child_iter` to point to the row pointed to by `filter_iter`.
---
--- ---
---
---@param self Gtk.TreeModelFilter # A `GtkTreeModelFilter`.
---@param child_iter Gtk.TreeIter # An uninitialized `GtkTreeIter`.
---@param filter_iter Gtk.TreeIter # A valid `GtkTreeIter` pointing to a row on `filter`.
---@return nil
function Gtk.TreeModelFilter:convert_iter_to_child_iter(child_iter, filter_iter) end

--- # method Gtk.TreeModelFilter:convert_path_to_child_path()
---
--- Converts `filter_path` to a path on the child model of `filter`. That is,
--- `filter_path` points to a location in `filter`. The returned path will
--- point to the same location in the model not being filtered. If `filter_path`
--- does not point to a location in the child model, `nil` is returned.
---
--- ---
---
---@param self Gtk.TreeModelFilter # A `GtkTreeModelFilter`.
---@param filter_path Gtk.TreePath # A `GtkTreePath` to convert.
---@return Gtk.TreePath # A newly allocated `GtkTreePath`, or `nil`.
function Gtk.TreeModelFilter:convert_path_to_child_path(filter_path) end

--- # method Gtk.TreeModelFilter:get_model()
---
--- Returns a pointer to the child model of `filter`.
---
--- ---
---
---@param self Gtk.TreeModelFilter # A `GtkTreeModelFilter`.
---@return Gtk.TreeModel # A pointer to a `GtkTreeModel`.
function Gtk.TreeModelFilter:get_model() end

--- # method Gtk.TreeModelFilter:refilter()
---
--- Emits ::row_changed for each row in the child model, which causes
--- the filter to re-evaluate whether a row is visible or not.
---
--- ---
---
---@param self Gtk.TreeModelFilter # A `GtkTreeModelFilter`.
---@return nil
function Gtk.TreeModelFilter:refilter() end

--- # method Gtk.TreeModelFilter:set_modify_func()
---
--- With the `n_columns` and `types` parameters, you give an array of column
--- types for this model (which will be exposed to the parent model/view).
--- The `func`, `data` and `destroy` parameters are for specifying the modify
--- function. The modify function will get called for each
--- data access, the goal of the modify function is to return the data which
--- should be displayed at the location specified using the parameters of the
--- modify function.
--- 
--- Note that `gtk_tree_model_filter_set_modify_func()`
--- can only be called once for a given filter model.
---
--- ---
---
---@param self Gtk.TreeModelFilter # A `GtkTreeModelFilter`.
---@param n_columns integer # The number of columns in the filter model.
---@param types unknown[] # The `GTypes` of the columns.
---@param func Gtk.TreeModelFilterModifyFunc # A `GtkTreeModelFilterModifyFunc`
---@param data? userdata # User data to pass to the modify function, or `nil`.
---@param destroy? GLib.DestroyNotify # Destroy notifier of `data`, or `nil`.
---@return nil
function Gtk.TreeModelFilter:set_modify_func(n_columns, types, func, data, destroy) end

--- # method Gtk.TreeModelFilter:set_visible_column()
---
--- Sets `column` of the child_model to be the column where `filter` should
--- look for visibility information. `columns` should be a column of type
--- %G_TYPE_BOOLEAN, where `true` means that a row is visible, and `false`
--- if not.
--- 
--- Note that `gtk_tree_model_filter_set_visible_func()` or
--- `gtk_tree_model_filter_set_visible_column()` can only be called
--- once for a given filter model.
---
--- ---
---
---@param self Gtk.TreeModelFilter # A `GtkTreeModelFilter`
---@param column integer # A `gint` which is the column containing the visible information
---@return nil
function Gtk.TreeModelFilter:set_visible_column(column) end

--- # method Gtk.TreeModelFilter:set_visible_func()
---
--- Sets the visible function used when filtering the `filter` to be `func`.
--- The function should return `true` if the given row should be visible and
--- `false` otherwise.
--- 
--- If the condition calculated by the function changes over time (e.g.
--- because it depends on some global parameters), you must call
--- `gtk_tree_model_filter_refilter()` to keep the visibility information
--- of the model up-to-date.
--- 
--- Note that `func` is called whenever a row is inserted, when it may still
--- be empty. The visible function should therefore take special care of empty
--- rows, like in the example below.
--- 
--- ```c
--- static gboolean
--- visible_func (GtkTreeModel *model,
---               GtkTreeIter  *iter,
---               gpointer      data)
--- {
---   // Visible if row is non-empty and first column is “HI”
---   gchar *str;
---   gboolean visible = FALSE;
--- 
---   gtk_tree_model_get (model, iter, 0, &str, -1);
---   if (str && strcmp (str, "HI") == 0)
---     visible = TRUE;
---   g_free (str);
--- 
---   return visible;
--- }
--- ```
--- 
--- Note that `gtk_tree_model_filter_set_visible_func()` or
--- `gtk_tree_model_filter_set_visible_column()` can only be called
--- once for a given filter model.
---
--- ---
---
---@param self Gtk.TreeModelFilter # A `GtkTreeModelFilter`
---@param func Gtk.TreeModelFilterVisibleFunc # A `GtkTreeModelFilterVisibleFunc`, the visible function
---@param data? userdata # User data to pass to the visible function, or `nil`
---@param destroy? GLib.DestroyNotify # Destroy notifier of `data`, or `nil`
---@return nil
function Gtk.TreeModelFilter:set_visible_func(func, data, destroy) end

--- # record Gtk.TreeModelFilterClass
---
---@class Gtk.TreeModelFilterClass
---@field parent_class GObject.ObjectClass
---@field visible fun(self: Gtk.TreeModelFilter, child_model: Gtk.TreeModel, iter: Gtk.TreeIter): (boolean|nil)
---@field modify fun(self: Gtk.TreeModelFilter, child_model: Gtk.TreeModel, iter: Gtk.TreeIter, value: GObject.Value, column: integer): nil
Gtk.TreeModelFilterClass = {}

---@alias Gtk.TreeModelFilterModifyFunc fun(model: Gtk.TreeModel, iter: Gtk.TreeIter, value: GObject.Value, column: integer, data: userdata): nil

--- # record Gtk.TreeModelFilterPrivate
---
---@class Gtk.TreeModelFilterPrivate
Gtk.TreeModelFilterPrivate = {}

---@alias Gtk.TreeModelFilterVisibleFunc fun(model: Gtk.TreeModel, iter: Gtk.TreeIter, data: userdata): (boolean|nil)

---@enum Gtk.TreeModelFlags
Gtk.TreeModelFlags = {}

---@alias Gtk.TreeModelForeachFunc fun(model: Gtk.TreeModel, path: Gtk.TreePath, iter: Gtk.TreeIter, data: userdata): (boolean|nil)

--- # record Gtk.TreeModelIface
---
---@class Gtk.TreeModelIface
---@field g_iface GObject.TypeInterface
---@field row_changed fun(tree_model: Gtk.TreeModel, path: Gtk.TreePath, iter: Gtk.TreeIter): nil
---@field row_inserted fun(tree_model: Gtk.TreeModel, path: Gtk.TreePath, iter: Gtk.TreeIter): nil
---@field row_has_child_toggled fun(tree_model: Gtk.TreeModel, path: Gtk.TreePath, iter: Gtk.TreeIter): nil
---@field row_deleted fun(tree_model: Gtk.TreeModel, path: Gtk.TreePath): nil
---@field rows_reordered fun(tree_model: Gtk.TreeModel, path: Gtk.TreePath, iter: Gtk.TreeIter, new_order: integer): nil
---@field get_flags fun(tree_model: Gtk.TreeModel): Gtk.TreeModelFlags
---@field get_n_columns fun(tree_model: Gtk.TreeModel): integer
---@field get_column_type fun(tree_model: Gtk.TreeModel, index_: integer): Gtk.GType
---@field get_iter fun(tree_model: Gtk.TreeModel, iter: Gtk.TreeIter, path: Gtk.TreePath): (boolean|nil)
---@field get_path fun(tree_model: Gtk.TreeModel, iter: Gtk.TreeIter): Gtk.TreePath
---@field get_value fun(tree_model: Gtk.TreeModel, iter: Gtk.TreeIter, column: integer, value: GObject.Value): nil
---@field iter_next fun(tree_model: Gtk.TreeModel, iter: Gtk.TreeIter): (boolean|nil)
---@field iter_previous fun(tree_model: Gtk.TreeModel, iter: Gtk.TreeIter): (boolean|nil)
---@field iter_children fun(tree_model: Gtk.TreeModel, iter: Gtk.TreeIter, parent: Gtk.TreeIter): (boolean|nil)
---@field iter_has_child fun(tree_model: Gtk.TreeModel, iter: Gtk.TreeIter): (boolean|nil)
---@field iter_n_children fun(tree_model: Gtk.TreeModel, iter: Gtk.TreeIter): integer
---@field iter_nth_child fun(tree_model: Gtk.TreeModel, iter: Gtk.TreeIter, parent: Gtk.TreeIter, n: integer): (boolean|nil)
---@field iter_parent fun(tree_model: Gtk.TreeModel, iter: Gtk.TreeIter, child: Gtk.TreeIter): (boolean|nil)
---@field ref_node fun(tree_model: Gtk.TreeModel, iter: Gtk.TreeIter): nil
---@field unref_node fun(tree_model: Gtk.TreeModel, iter: Gtk.TreeIter): nil
Gtk.TreeModelIface = {}

--- # class Gtk.TreeModelSort
---
--- The `GtkTreeModelSort` is a model which implements the `GtkTreeSortable`
--- interface.  It does not hold any data itself, but rather is created with
--- a child model and proxies its data.  It has identical column types to
--- this child model, and the changes in the child are propagated.  The
--- primary purpose of this model is to provide a way to sort a different
--- model without modifying it. Note that the sort function used by
--- `GtkTreeModelSort` is not guaranteed to be stable.
--- 
--- The use of this is best demonstrated through an example.  In the
--- following sample code we create two `GtkTreeView` widgets each with a
--- view of the same data.  As the model is wrapped here by a
--- `GtkTreeModelSort`, the two `GtkTreeViews` can each sort their
--- view of the data without affecting the other.  By contrast, if we
--- simply put the same model in each widget, then sorting the first would
--- sort the second.
--- 
--- ## Using a `GtkTreeModelSort`
--- 
--- ```c
--- {
---   GtkTreeView *tree_view1;
---   GtkTreeView *tree_view2;
---   GtkTreeModel *sort_model1;
---   GtkTreeModel *sort_model2;
---   GtkTreeModel *child_model;
--- 
---   // get the child model
---   child_model = get_my_model ();
--- 
---   // Create the first tree
---   sort_model1 = gtk_tree_model_sort_new_with_model (child_model);
---   tree_view1 = gtk_tree_view_new_with_model (sort_model1);
--- 
---   // Create the second tree
---   sort_model2 = gtk_tree_model_sort_new_with_model (child_model);
---   tree_view2 = gtk_tree_view_new_with_model (sort_model2);
--- 
---   // Now we can sort the two models independently
---   gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model1),
---                                         COLUMN_1, GTK_SORT_ASCENDING);
---   gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model2),
---                                         COLUMN_1, GTK_SORT_DESCENDING);
--- }
--- ```
--- 
--- To demonstrate how to access the underlying child model from the sort
--- model, the next example will be a callback for the `GtkTreeSelection`
--- `GtkTreeSelection`::changed signal.  In this callback, we get a string
--- from COLUMN_1 of the model.  We then modify the string, find the same
--- selected row on the child model, and change the row there.
--- 
--- ## Accessing the child model of in a selection changed callback
--- 
--- ```c
--- void
--- selection_changed (GtkTreeSelection *selection, gpointer data)
--- {
---   GtkTreeModel *sort_model = NULL;
---   GtkTreeModel *child_model;
---   GtkTreeIter sort_iter;
---   GtkTreeIter child_iter;
---   char *some_data = NULL;
---   char *modified_data;
--- 
---   // Get the current selected row and the model.
---   if (! gtk_tree_selection_get_selected (selection,
---                                          &sort_model,
---                                          &sort_iter))
---     return;
--- 
---   // Look up the current value on the selected row and get
---   // a new value to change it to.
---   gtk_tree_model_get (GTK_TREE_MODEL (sort_model), &sort_iter,
---                       COLUMN_1, &some_data,
---                       -1);
--- 
---   modified_data = change_the_data (some_data);
---   g_free (some_data);
--- 
---   // Get an iterator on the child model, instead of the sort model.
---   gtk_tree_model_sort_convert_iter_to_child_iter (GTK_TREE_MODEL_SORT (sort_model),
---                                                   &child_iter,
---                                                   &sort_iter);
--- 
---   // Get the child model and change the value of the row. In this
---   // example, the child model is a GtkListStore. It could be any other
---   // type of model, though.
---   child_model = gtk_tree_model_sort_get_model (GTK_TREE_MODEL_SORT (sort_model));
---   gtk_list_store_set (GTK_LIST_STORE (child_model), &child_iter,
---                       COLUMN_1, &modified_data,
---                       -1);
---   g_free (modified_data);
--- }
--- ```
---
--- ---
---
---@class Gtk.TreeModelSort : GObject.Object, Gtk.TreeDragSource, Gtk.TreeModel, Gtk.TreeSortable
---@field parent GObject.Object
---@field priv Gtk.TreeModelSortPrivate
Gtk.TreeModelSort = {}

--- # method Gtk.TreeModelSort:clear_cache()
---
--- This function should almost never be called.  It clears the `tree_model_sort`
--- of any cached iterators that haven’t been reffed with
--- `gtk_tree_model_ref_node()`.  This might be useful if the child model being
--- sorted is static (and doesn’t change often) and there has been a lot of
--- unreffed access to nodes.  As a side effect of this function, all unreffed
--- iters will be invalid.
---
--- ---
---
---@param self Gtk.TreeModelSort # A `GtkTreeModelSort`
---@return nil
function Gtk.TreeModelSort:clear_cache() end

--- # method Gtk.TreeModelSort:convert_child_iter_to_iter()
---
--- Sets `sort_iter` to point to the row in `tree_model_sort` that corresponds to
--- the row pointed at by `child_iter`.  If `sort_iter` was not set, `false`
--- is returned.  Note: a boolean is only returned since 2.14.
---
--- ---
---
---@param self Gtk.TreeModelSort # A `GtkTreeModelSort`
---@param sort_iter Gtk.TreeIter # An uninitialized `GtkTreeIter`.
---@param child_iter Gtk.TreeIter # A valid `GtkTreeIter` pointing to a row on the child model
---@return (boolean|nil) # `true`, if `sort_iter` was set, i.e. if `sort_iter` is a valid iterator pointer to a visible row in the child model.
function Gtk.TreeModelSort:convert_child_iter_to_iter(sort_iter, child_iter) end

--- # method Gtk.TreeModelSort:convert_child_path_to_path()
---
--- Converts `child_path` to a path relative to `tree_model_sort`.  That is,
--- `child_path` points to a path in the child model.  The returned path will
--- point to the same row in the sorted model.  If `child_path` isn’t a valid
--- path on the child model, then `nil` is returned.
---
--- ---
---
---@param self Gtk.TreeModelSort # A `GtkTreeModelSort`
---@param child_path Gtk.TreePath # A `GtkTreePath` to convert
---@return Gtk.TreePath # A newly allocated `GtkTreePath`, or `nil`
function Gtk.TreeModelSort:convert_child_path_to_path(child_path) end

--- # method Gtk.TreeModelSort:convert_iter_to_child_iter()
---
--- Sets `child_iter` to point to the row pointed to by `sorted_iter`.
---
--- ---
---
---@param self Gtk.TreeModelSort # A `GtkTreeModelSort`
---@param child_iter Gtk.TreeIter # An uninitialized `GtkTreeIter`
---@param sorted_iter Gtk.TreeIter # A valid `GtkTreeIter` pointing to a row on `tree_model_sort`.
---@return nil
function Gtk.TreeModelSort:convert_iter_to_child_iter(child_iter, sorted_iter) end

--- # method Gtk.TreeModelSort:convert_path_to_child_path()
---
--- Converts `sorted_path` to a path on the child model of `tree_model_sort`.
--- That is, `sorted_path` points to a location in `tree_model_sort`.  The
--- returned path will point to the same location in the model not being
--- sorted.  If `sorted_path` does not point to a location in the child model,
--- `nil` is returned.
---
--- ---
---
---@param self Gtk.TreeModelSort # A `GtkTreeModelSort`
---@param sorted_path Gtk.TreePath # A `GtkTreePath` to convert
---@return Gtk.TreePath # A newly allocated `GtkTreePath`, or `nil`
function Gtk.TreeModelSort:convert_path_to_child_path(sorted_path) end

--- # method Gtk.TreeModelSort:get_model()
---
--- Returns the model the `GtkTreeModelSort` is sorting.
---
--- ---
---
---@param self Gtk.TreeModelSort # a `GtkTreeModelSort`
---@return Gtk.TreeModel # the "child model" being sorted
function Gtk.TreeModelSort:get_model() end

--- # method Gtk.TreeModelSort:iter_is_valid()
---
--- > This function is slow. Only use it for debugging and/or testing
--- > purposes.
--- 
--- Checks if the given iter is a valid iter for this `GtkTreeModelSort`.
---
--- ---
---
---@param self Gtk.TreeModelSort # A `GtkTreeModelSort`.
---@param iter Gtk.TreeIter # A `GtkTreeIter`.
---@return (boolean|nil) # `true` if the iter is valid, `false` if the iter is invalid.
function Gtk.TreeModelSort:iter_is_valid(iter) end

--- # method Gtk.TreeModelSort:reset_default_sort_func()
---
--- This resets the default sort function to be in the “unsorted” state.  That
--- is, it is in the same order as the child model. It will re-sort the model
--- to be in the same order as the child model only if the `GtkTreeModelSort`
--- is in “unsorted” state.
---
--- ---
---
---@param self Gtk.TreeModelSort # A `GtkTreeModelSort`
---@return nil
function Gtk.TreeModelSort:reset_default_sort_func() end

--- # function Gtk.TreeModelSort.new_with_model()
---
--- Creates a new `GtkTreeModelSort`, with `child_model` as the child model.
---
--- ---
---
---@param child_model Gtk.TreeModel # A `GtkTreeModel`
---@return Gtk.TreeModelSort # A new `GtkTreeModelSort`.
function Gtk.TreeModelSort.new_with_model(child_model) end

--- # record Gtk.TreeModelSortClass
---
---@class Gtk.TreeModelSortClass
---@field parent_class GObject.ObjectClass
Gtk.TreeModelSortClass = {}

--- # record Gtk.TreeModelSortPrivate
---
---@class Gtk.TreeModelSortPrivate
Gtk.TreeModelSortPrivate = {}

--- # record Gtk.TreePath
---
---@class Gtk.TreePath
---@operator call: Gtk.TreePath
Gtk.TreePath = {}

--- # method Gtk.TreePath:append_index()
---
--- Appends a new index to a path.
--- 
--- As a result, the depth of the path is increased.
---
--- ---
---
---@param self Gtk.TreePath # a `GtkTreePath`-struct
---@param index_ integer # the index
---@return nil
function Gtk.TreePath:append_index(index_) end

--- # method Gtk.TreePath:compare()
---
--- Compares two paths.
--- 
--- If `a` appears before `b` in a tree, then -1 is returned.
--- If `b` appears before `a`, then 1 is returned.
--- If the two nodes are equal, then 0 is returned.
---
--- ---
---
---@param self Gtk.TreePath # a `GtkTreePath`-struct
---@param b Gtk.TreePath # a `GtkTreePath`-struct to compare with
---@return integer # the relative positions of `a` and `b`
function Gtk.TreePath:compare(b) end

--- # method Gtk.TreePath:copy()
---
--- Creates a new `GtkTreePath`-struct as a copy of `path`.
---
--- ---
---
---@param self Gtk.TreePath # a `GtkTreePath`-struct
---@return Gtk.TreePath # a new `GtkTreePath`-struct
function Gtk.TreePath:copy() end

--- # method Gtk.TreePath:down()
---
--- Moves `path` to point to the first child of the current path.
---
--- ---
---
---@param self Gtk.TreePath # a `GtkTreePath`-struct
---@return nil
function Gtk.TreePath:down() end

--- # method Gtk.TreePath:free()
---
--- Frees `path`. If `path` is `nil`, it simply returns.
---
--- ---
---
---@param self? Gtk.TreePath # a `GtkTreePath`-struct
---@return nil
function Gtk.TreePath:free() end

--- # method Gtk.TreePath:get_depth()
---
--- Returns the current depth of `path`.
---
--- ---
---
---@param self Gtk.TreePath # a `GtkTreePath`-struct
---@return integer # The depth of `path`
function Gtk.TreePath:get_depth() end

--- # method Gtk.TreePath:get_indices()
---
--- Returns the current indices of `path`.
--- 
--- This is an array of integers, each representing a node in a tree.
--- It also returns the number of elements in the array.
--- The array should not be freed.
---
--- ---
---
---@param self Gtk.TreePath # a `GtkTreePath`-struct
---@param depth? integer # return location for number of elements returned in the integer array, or `nil`
---@return unknown[] # The current indices, or `nil`
function Gtk.TreePath:get_indices(depth) end

--- # method Gtk.TreePath:is_ancestor()
---
--- Returns `true` if `descendant` is a descendant of `path`.
---
--- ---
---
---@param self Gtk.TreePath # a `GtkTreePath`-struct
---@param descendant Gtk.TreePath # another `GtkTreePath`-struct
---@return (boolean|nil) # `true` if `descendant` is contained inside `path`
function Gtk.TreePath:is_ancestor(descendant) end

--- # method Gtk.TreePath:is_descendant()
---
--- Returns `true` if `path` is a descendant of `ancestor`.
---
--- ---
---
---@param self Gtk.TreePath # a `GtkTreePath`-struct
---@param ancestor Gtk.TreePath # another `GtkTreePath`-struct
---@return (boolean|nil) # `true` if `ancestor` contains `path` somewhere below it
function Gtk.TreePath:is_descendant(ancestor) end

--- # method Gtk.TreePath:next()
---
--- Moves the `path` to point to the next node at the current depth.
---
--- ---
---
---@param self Gtk.TreePath # a `GtkTreePath`-struct
---@return nil
function Gtk.TreePath:next() end

--- # method Gtk.TreePath:prepend_index()
---
--- Prepends a new index to a path.
--- 
--- As a result, the depth of the path is increased.
---
--- ---
---
---@param self Gtk.TreePath # a `GtkTreePath`-struct
---@param index_ integer # the index
---@return nil
function Gtk.TreePath:prepend_index(index_) end

--- # method Gtk.TreePath:prev()
---
--- Moves the `path` to point to the previous node at the
--- current depth, if it exists.
---
--- ---
---
---@param self Gtk.TreePath # a `GtkTreePath`-struct
---@return (boolean|nil) # `true` if `path` has a previous node, and the move was made
function Gtk.TreePath:prev() end

--- # method Gtk.TreePath:to_string()
---
--- Generates a string representation of the path.
--- 
--- This string is a “:” separated list of numbers.
--- For example, “4:10:0:3” would be an acceptable
--- return value for this string.
---
--- ---
---
---@param self Gtk.TreePath # A `GtkTreePath`-struct
---@return string # A newly-allocated string. Must be freed with `g_free()`.
function Gtk.TreePath:to_string() end

--- # method Gtk.TreePath:up()
---
--- Moves the `path` to point to its parent node, if it has a parent.
---
--- ---
---
---@param self Gtk.TreePath # a `GtkTreePath`-struct
---@return (boolean|nil) # `true` if `path` has a parent, and the move was made
function Gtk.TreePath:up() end

--- # function Gtk.TreePath.new()
---
--- Creates a new `GtkTreePath`-struct.
--- This refers to a row.
---
--- ---
---
---@return Gtk.TreePath # A newly created `GtkTreePath`-struct.
function Gtk.TreePath.new() end

--- # function Gtk.TreePath.new_first()
---
--- Creates a new `GtkTreePath`-struct.
--- 
--- The string representation of this path is “0”.
---
--- ---
---
---@return Gtk.TreePath # A new `GtkTreePath`-struct
function Gtk.TreePath.new_first() end

--- # function Gtk.TreePath.new_from_indices()
---
--- Creates a new path with the given `indices` array of `length`.
---
--- ---
---
---@param indices unknown[] # array of indices
---@param length integer # length of `indices` array
---@return Gtk.TreePath # A newly created `GtkTreePath`-struct
function Gtk.TreePath.new_from_indices(indices, length) end

--- # function Gtk.TreePath.new_from_string()
---
--- Creates a new `GtkTreePath`-struct initialized to `path`.
--- 
--- `path` is expected to be a colon separated list of numbers.
--- For example, the string “10:4:0” would create a path of depth
--- 3 pointing to the 11th child of the root node, the 5th
--- child of that 11th child, and the 1st child of that 5th child.
--- If an invalid path string is passed in, `nil` is returned.
---
--- ---
---
---@param path string # The string representation of a path
---@return Gtk.TreePath # A newly-created `GtkTreePath`-struct, or `nil`
function Gtk.TreePath.new_from_string(path) end

--- # record Gtk.TreeRowReference
---
--- A GtkTreeRowReference tracks model changes so that it always refers to the
--- same row (a `GtkTreePath` refers to a position, not a fixed row). Create a
--- new GtkTreeRowReference with `gtk_tree_row_reference_new()`.
---
--- ---
---
---@class Gtk.TreeRowReference
---@operator call: Gtk.TreeRowReference
Gtk.TreeRowReference = {}

--- # method Gtk.TreeRowReference:copy()
---
--- Copies a `GtkTreeRowReference`.
---
--- ---
---
---@param self Gtk.TreeRowReference # a `GtkTreeRowReference`
---@return Gtk.TreeRowReference # a copy of `reference`
function Gtk.TreeRowReference:copy() end

--- # method Gtk.TreeRowReference:free()
---
--- Free’s `reference`. `reference` may be `nil`
---
--- ---
---
---@param self? Gtk.TreeRowReference # a `GtkTreeRowReference`, or `nil`
---@return nil
function Gtk.TreeRowReference:free() end

--- # method Gtk.TreeRowReference:get_model()
---
--- Returns the model that the row reference is monitoring.
---
--- ---
---
---@param self Gtk.TreeRowReference # a `GtkTreeRowReference`
---@return Gtk.TreeModel # the model
function Gtk.TreeRowReference:get_model() end

--- # method Gtk.TreeRowReference:get_path()
---
--- Returns a path that the row reference currently points to,
--- or `nil` if the path pointed to is no longer valid.
---
--- ---
---
---@param self Gtk.TreeRowReference # a `GtkTreeRowReference`
---@return Gtk.TreePath # a current path, or `nil`
function Gtk.TreeRowReference:get_path() end

--- # method Gtk.TreeRowReference:valid()
---
--- Returns `true` if the `reference` is non-`nil` and refers to
--- a current valid path.
---
--- ---
---
---@param self? Gtk.TreeRowReference # a `GtkTreeRowReference`, or `nil`
---@return (boolean|nil) # `true` if `reference` points to a valid path
function Gtk.TreeRowReference:valid() end

--- # function Gtk.TreeRowReference.deleted()
---
--- Lets a set of row reference created by
--- `gtk_tree_row_reference_new_proxy()` know that the
--- model emitted the `GtkTreeModel`::row-deleted signal.
---
--- ---
---
---@param proxy GObject.Object # a `GObject`
---@param path Gtk.TreePath # the path position that was deleted
---@return nil
function Gtk.TreeRowReference.deleted(proxy, path) end

--- # function Gtk.TreeRowReference.inserted()
---
--- Lets a set of row reference created by
--- `gtk_tree_row_reference_new_proxy()` know that the
--- model emitted the `GtkTreeModel`::row-inserted signal.
---
--- ---
---
---@param proxy GObject.Object # a `GObject`
---@param path Gtk.TreePath # the row position that was inserted
---@return nil
function Gtk.TreeRowReference.inserted(proxy, path) end

--- # function Gtk.TreeRowReference.new()
---
--- Creates a row reference based on `path`.
--- 
--- This reference will keep pointing to the node pointed to
--- by `path`, so long as it exists. Any changes that occur on `model` are
--- propagated, and the path is updated appropriately. If
--- `path` isn’t a valid path in `model`, then `nil` is returned.
---
--- ---
---
---@param model Gtk.TreeModel # a `GtkTreeModel`
---@param path Gtk.TreePath # a valid `GtkTreePath`-struct to monitor
---@return Gtk.TreeRowReference # a newly allocated `GtkTreeRowReference`, or `nil`
function Gtk.TreeRowReference.new(model, path) end

--- # function Gtk.TreeRowReference.new_proxy()
---
--- You do not need to use this function.
--- 
--- Creates a row reference based on `path`.
--- 
--- This reference will keep pointing to the node pointed to
--- by `path`, so long as it exists. If `path` isn’t a valid
--- path in `model`, then `nil` is returned. However, unlike
--- references created with `gtk_tree_row_reference_new()`, it
--- does not listen to the model for changes. The creator of
--- the row reference must do this explicitly using
--- `gtk_tree_row_reference_inserted()`, `gtk_tree_row_reference_deleted()`,
--- `gtk_tree_row_reference_reordered()`.
--- 
--- These functions must be called exactly once per proxy when the
--- corresponding signal on the model is emitted. This single call
--- updates all row references for that proxy. Since built-in GTK+
--- objects like `GtkTreeView` already use this mechanism internally,
--- using them as the proxy object will produce unpredictable results.
--- Further more, passing the same object as `model` and `proxy`
--- doesn’t work for reasons of internal implementation.
--- 
--- This type of row reference is primarily meant by structures that
--- need to carefully monitor exactly when a row reference updates
--- itself, and is not generally needed by most applications.
---
--- ---
---
---@param proxy GObject.Object # a proxy `GObject`
---@param model Gtk.TreeModel # a `GtkTreeModel`
---@param path Gtk.TreePath # a valid `GtkTreePath`-struct to monitor
---@return Gtk.TreeRowReference # a newly allocated `GtkTreeRowReference`, or `nil`
function Gtk.TreeRowReference.new_proxy(proxy, model, path) end

--- # class Gtk.TreeSelection
---
--- The `GtkTreeSelection` object is a helper object to manage the selection
--- for a `GtkTreeView` widget.  The `GtkTreeSelection` object is
--- automatically created when a new `GtkTreeView` widget is created, and
--- cannot exist independently of this widget.  The primary reason the
--- `GtkTreeSelection` objects exists is for cleanliness of code and API.
--- That is, there is no conceptual reason all these functions could not be
--- methods on the `GtkTreeView` widget instead of a separate function.
--- 
--- The `GtkTreeSelection` object is gotten from a `GtkTreeView` by calling
--- `gtk_tree_view_get_selection()`.  It can be manipulated to check the
--- selection status of the tree, as well as select and deselect individual
--- rows.  Selection is done completely view side.  As a result, multiple
--- views of the same model can have completely different selections.
--- Additionally, you cannot change the selection of a row on the model that
--- is not currently displayed by the view without expanding its parents
--- first.
--- 
--- One of the important things to remember when monitoring the selection of
--- a view is that the `GtkTreeSelection`::changed signal is mostly a hint.
--- That is, it may only emit one signal when a range of rows is selected.
--- Additionally, it may on occasion emit a `GtkTreeSelection`::changed signal
--- when nothing has happened (mostly as a result of programmers calling
--- select_row on an already selected row).
---
--- ---
---
---@class Gtk.TreeSelection : GObject.Object
---@field parent GObject.Object
---@field priv Gtk.TreeSelectionPrivate
Gtk.TreeSelection = {}

--- # method Gtk.TreeSelection:count_selected_rows()
---
--- Returns the number of rows that have been selected in `tree`.
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`.
---@return integer # The number of rows selected.
function Gtk.TreeSelection:count_selected_rows() end

--- # method Gtk.TreeSelection:get_mode()
---
--- Gets the selection mode for `selection`. See
--- `gtk_tree_selection_set_mode()`.
---
--- ---
---
---@param self Gtk.TreeSelection # a `GtkTreeSelection`
---@return Gtk.SelectionMode # the current selection mode
function Gtk.TreeSelection:get_mode() end

--- # method Gtk.TreeSelection:get_selected()
---
--- Sets `iter` to the currently selected node, if `selection` is set to
--- %GTK_SELECTION_SINGLE or %GTK_SELECTION_BROWSE.
--- 
--- The `iter` argument may be `nil` if you just want to test if `selection`
--- has any selected nodes.
--- 
--- The `model` argument is filled with the current model as a convenience.
--- 
--- This function will not work with %GTK_SELECTION_MULTIPLE. See
--- `gtk_tree_selection_get_selected_rows()` instead.
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`.
---@param model? Gtk.TreeModel # the model
---@param iter? Gtk.TreeIter # the iterator for the selected row
---@return (boolean|nil) # `true`, if there is a selected node.
function Gtk.TreeSelection:get_selected(model, iter) end

--- # method Gtk.TreeSelection:get_selected_rows()
---
--- Creates a list of path of all selected rows.
--- 
--- Additionally, if you are planning on modifying the model after calling
--- this function, you may want to convert the returned list into a list
--- of `GtkTreeRowReferences`.
--- 
--- To do this, you can use `gtk_tree_row_reference_new()`.
--- 
--- To free the return value, use:
--- 
--- ```c
--- g_list_free_full (list, (GDestroyNotify) gtk_tree_path_free);
--- ```
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`.
---@param model? Gtk.TreeModel # A pointer to set to the `GtkTreeModel`, or `nil`.
---@return Gtk.TreePath[] # the selected paths
function Gtk.TreeSelection:get_selected_rows(model) end

--- # method Gtk.TreeSelection:get_tree_view()
---
--- Returns the tree view associated with `selection`.
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`
---@return Gtk.TreeView # A `GtkTreeView`
function Gtk.TreeSelection:get_tree_view() end

--- # method Gtk.TreeSelection:iter_is_selected()
---
--- Returns `true` if the row at `iter` is currently selected.
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`
---@param iter Gtk.TreeIter # A valid `GtkTreeIter`
---@return (boolean|nil) # `true`, if `iter` is selected
function Gtk.TreeSelection:iter_is_selected(iter) end

--- # method Gtk.TreeSelection:path_is_selected()
---
--- Returns `true` if the row pointed to by `path` is currently selected.  If `path`
--- does not point to a valid location, `false` is returned
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`.
---@param path Gtk.TreePath # A `GtkTreePath` to check selection on.
---@return (boolean|nil) # `true` if `path` is selected.
function Gtk.TreeSelection:path_is_selected(path) end

--- # method Gtk.TreeSelection:select_all()
---
--- Selects all the nodes. `selection` must be set to `GTK_SELECTION_MULTIPLE`
--- mode.
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`.
---@return nil
function Gtk.TreeSelection:select_all() end

--- # method Gtk.TreeSelection:select_iter()
---
--- Selects the specified iterator.
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`.
---@param iter Gtk.TreeIter # The `GtkTreeIter` to be selected.
---@return nil
function Gtk.TreeSelection:select_iter(iter) end

--- # method Gtk.TreeSelection:select_path()
---
--- Select the row at `path`.
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`.
---@param path Gtk.TreePath # The `GtkTreePath` to be selected.
---@return nil
function Gtk.TreeSelection:select_path(path) end

--- # method Gtk.TreeSelection:select_range()
---
--- Selects a range of nodes, determined by `start_path` and `end_path` inclusive.
--- `selection` must be set to `GTK_SELECTION_MULTIPLE` mode.
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`.
---@param start_path Gtk.TreePath # The initial node of the range.
---@param end_path Gtk.TreePath # The final node of the range.
---@return nil
function Gtk.TreeSelection:select_range(start_path, end_path) end

--- # method Gtk.TreeSelection:selected_foreach()
---
--- Calls a function for each selected node. Note that you cannot modify
--- the tree or selection from within this function. As a result,
--- `gtk_tree_selection_get_selected_rows()` might be more useful.
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`.
---@param func Gtk.TreeSelectionForeachFunc # The function to call for each selected node.
---@param data? userdata # user data to pass to the function.
---@return nil
function Gtk.TreeSelection:selected_foreach(func, data) end

--- # method Gtk.TreeSelection:set_mode()
---
--- Sets the selection mode of the `selection`.  If the previous type was
--- `GTK_SELECTION_MULTIPLE`, then the anchor is kept selected, if it was
--- previously selected.
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`.
---@param type Gtk.SelectionMode # The selection mode
---@return nil
function Gtk.TreeSelection:set_mode(type) end

--- # method Gtk.TreeSelection:set_select_function()
---
--- Sets the selection function.
--- 
--- If set, this function is called before any node is selected or unselected,
--- giving some control over which nodes are selected. The select function
--- should return `true` if the state of the node may be toggled, and `false`
--- if the state of the node should be left unchanged.
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`.
---@param func? Gtk.TreeSelectionFunc # The selection function. May be `nil`
---@param data? userdata # The selection function’s data. May be `nil`
---@param destroy GLib.DestroyNotify # The destroy function for user data. May be `nil`
---@return nil
function Gtk.TreeSelection:set_select_function(func, data, destroy) end

--- # method Gtk.TreeSelection:unselect_all()
---
--- Unselects all the nodes.
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`.
---@return nil
function Gtk.TreeSelection:unselect_all() end

--- # method Gtk.TreeSelection:unselect_iter()
---
--- Unselects the specified iterator.
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`.
---@param iter Gtk.TreeIter # The `GtkTreeIter` to be unselected.
---@return nil
function Gtk.TreeSelection:unselect_iter(iter) end

--- # method Gtk.TreeSelection:unselect_path()
---
--- Unselects the row at `path`.
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`.
---@param path Gtk.TreePath # The `GtkTreePath` to be unselected.
---@return nil
function Gtk.TreeSelection:unselect_path(path) end

--- # method Gtk.TreeSelection:unselect_range()
---
--- Unselects a range of nodes, determined by `start_path` and `end_path`
--- inclusive.
---
--- ---
---
---@param self Gtk.TreeSelection # A `GtkTreeSelection`.
---@param start_path Gtk.TreePath # The initial node of the range.
---@param end_path Gtk.TreePath # The initial node of the range.
---@return nil
function Gtk.TreeSelection:unselect_range(start_path, end_path) end

--- # record Gtk.TreeSelectionClass
---
---@class Gtk.TreeSelectionClass
---@field parent_class GObject.ObjectClass # The parent class.
---@field changed fun(selection: Gtk.TreeSelection): nil
Gtk.TreeSelectionClass = {}

---@alias Gtk.TreeSelectionForeachFunc fun(model: Gtk.TreeModel, path: Gtk.TreePath, iter: Gtk.TreeIter, data: userdata): nil

---@alias Gtk.TreeSelectionFunc fun(selection: Gtk.TreeSelection, model: Gtk.TreeModel, path: Gtk.TreePath, path_currently_selected: (boolean|nil), data: userdata): (boolean|nil)

--- # record Gtk.TreeSelectionPrivate
---
---@class Gtk.TreeSelectionPrivate
Gtk.TreeSelectionPrivate = {}

--- # interface Gtk.TreeSortable
---
--- `GtkTreeSortable` is an interface to be implemented by tree models which
--- support sorting. The `GtkTreeView` uses the methods provided by this interface
--- to sort the model.
---
--- ---
---
---@class Gtk.TreeSortable
Gtk.TreeSortable = {}

--- # method Gtk.TreeSortable:get_sort_column_id()
---
--- Fills in `sort_column_id` and `order` with the current sort column and the
--- order. It returns `true` unless the `sort_column_id` is
--- %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID or
--- %GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID.
---
--- ---
---
---@param self Gtk.TreeSortable # A `GtkTreeSortable`
---@param sort_column_id integer # The sort column id to be filled in
---@param order Gtk.SortType # The `GtkSortType` to be filled in
---@return (boolean|nil) # `true` if the sort column is not one of the special sort column ids.
function Gtk.TreeSortable:get_sort_column_id(sort_column_id, order) end

--- # method Gtk.TreeSortable:has_default_sort_func()
---
--- Returns `true` if the model has a default sort function. This is used
--- primarily by GtkTreeViewColumns in order to determine if a model can
--- go back to the default state, or not.
---
--- ---
---
---@param self Gtk.TreeSortable # A `GtkTreeSortable`
---@return (boolean|nil) # `true`, if the model has a default sort function
function Gtk.TreeSortable:has_default_sort_func() end

--- # method Gtk.TreeSortable:set_default_sort_func()
---
--- Sets the default comparison function used when sorting to be `sort_func`.
--- If the current sort column id of `sortable` is
--- %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, then the model will sort using
--- this function.
--- 
--- If `sort_func` is `nil`, then there will be no default comparison function.
--- This means that once the model  has been sorted, it can’t go back to the
--- default state. In this case, when the current sort column id of `sortable`
--- is %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, the model will be unsorted.
---
--- ---
---
---@param self Gtk.TreeSortable # A `GtkTreeSortable`
---@param sort_func Gtk.TreeIterCompareFunc # The comparison function
---@param user_data? userdata # User data to pass to `sort_func`, or `nil`
---@param destroy? GLib.DestroyNotify # Destroy notifier of `user_data`, or `nil`
---@return nil
function Gtk.TreeSortable:set_default_sort_func(sort_func, user_data, destroy) end

--- # method Gtk.TreeSortable:set_sort_column_id()
---
--- Sets the current sort column to be `sort_column_id`. The `sortable` will
--- resort itself to reflect this change, after emitting a
--- `GtkTreeSortable`::sort-column-changed signal. `sort_column_id` may either be
--- a regular column id, or one of the following special values:
--- 
--- - %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID: the default sort function
---   will be used, if it is set
--- 
--- - %GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID: no sorting will occur
---
--- ---
---
---@param self Gtk.TreeSortable # A `GtkTreeSortable`
---@param sort_column_id integer # the sort column id to set
---@param order Gtk.SortType # The sort order of the column
---@return nil
function Gtk.TreeSortable:set_sort_column_id(sort_column_id, order) end

--- # method Gtk.TreeSortable:set_sort_func()
---
--- Sets the comparison function used when sorting to be `sort_func`. If the
--- current sort column id of `sortable` is the same as `sort_column_id`, then
--- the model will sort using this function.
---
--- ---
---
---@param self Gtk.TreeSortable # A `GtkTreeSortable`
---@param sort_column_id integer # the sort column id to set the function for
---@param sort_func Gtk.TreeIterCompareFunc # The comparison function
---@param user_data? userdata # User data to pass to `sort_func`, or `nil`
---@param destroy? GLib.DestroyNotify # Destroy notifier of `user_data`, or `nil`
---@return nil
function Gtk.TreeSortable:set_sort_func(sort_column_id, sort_func, user_data, destroy) end

--- # method Gtk.TreeSortable:sort_column_changed()
---
--- Emits a `GtkTreeSortable`::sort-column-changed signal on `sortable`.
---
--- ---
---
---@param self Gtk.TreeSortable # A `GtkTreeSortable`
---@return nil
function Gtk.TreeSortable:sort_column_changed() end

--- # record Gtk.TreeSortableIface
---
---@class Gtk.TreeSortableIface
---@field g_iface GObject.TypeInterface
---@field sort_column_changed fun(sortable: Gtk.TreeSortable): nil
---@field get_sort_column_id fun(sortable: Gtk.TreeSortable, sort_column_id: integer, order: Gtk.SortType): (boolean|nil)
---@field set_sort_column_id fun(sortable: Gtk.TreeSortable, sort_column_id: integer, order: Gtk.SortType): nil
---@field set_sort_func fun(sortable: Gtk.TreeSortable, sort_column_id: integer, sort_func: Gtk.TreeIterCompareFunc, user_data: userdata, destroy: GLib.DestroyNotify): nil
---@field set_default_sort_func fun(sortable: Gtk.TreeSortable, sort_func: Gtk.TreeIterCompareFunc, user_data: userdata, destroy: GLib.DestroyNotify): nil
---@field has_default_sort_func fun(sortable: Gtk.TreeSortable): (boolean|nil)
Gtk.TreeSortableIface = {}

--- # class Gtk.TreeStore
---
--- The `GtkTreeStore` object is a list model for use with a `GtkTreeView`
--- widget.  It implements the `GtkTreeModel` interface, and consequentially,
--- can use all of the methods available there.  It also implements the
--- `GtkTreeSortable` interface so it can be sorted by the view.  Finally,
--- it also implements the tree
--- [drag and drop][gtk3-GtkTreeView-drag-and-drop]
--- interfaces.
--- 
--- # GtkTreeStore as GtkBuildable
--- 
--- The GtkTreeStore implementation of the `GtkBuildable` interface allows
--- to specify the model columns with a `<columns>` element that may contain
--- multiple `<column>` elements, each specifying one model column. The “type”
--- attribute specifies the data type for the column.
--- 
--- An example of a UI Definition fragment for a tree store:
--- 
--- ```xml
--- <object class="GtkTreeStore">
---   <columns>
---     <column type="gchararray"/>
---     <column type="gchararray"/>
---     <column type="gint"/>
---   </columns>
--- </object>
--- ```
---
--- ---
---
---@class Gtk.TreeStore : GObject.Object, Gtk.Buildable, Gtk.TreeDragDest, Gtk.TreeDragSource, Gtk.TreeModel, Gtk.TreeSortable
---@field parent GObject.Object
---@field priv Gtk.TreeStorePrivate
---@operator call: Gtk.TreeStore
Gtk.TreeStore = {}

--- # method Gtk.TreeStore:append()
---
--- Appends a new row to `tree_store`.  If `parent` is non-`nil`, then it will append the
--- new row after the last child of `parent`, otherwise it will append a row to
--- the top level.  `iter` will be changed to point to this new row.  The row will
--- be empty after this function is called.  To fill in values, you need to call
--- `gtk_tree_store_set()` or `gtk_tree_store_set_value()`.
---
--- ---
---
---@param self Gtk.TreeStore # A `GtkTreeStore`
---@param iter Gtk.TreeIter # An unset `GtkTreeIter` to set to the appended row
---@param parent? Gtk.TreeIter # A valid `GtkTreeIter`, or `nil`
---@return nil
function Gtk.TreeStore:append(iter, parent) end

--- # method Gtk.TreeStore:clear()
---
--- Removes all rows from `tree_store`
---
--- ---
---
---@param self Gtk.TreeStore # a `GtkTreeStore`
---@return nil
function Gtk.TreeStore:clear() end

--- # method Gtk.TreeStore:insert()
---
--- Creates a new row at `position`.  If parent is non-`nil`, then the row will be
--- made a child of `parent`.  Otherwise, the row will be created at the toplevel.
--- If `position` is -1 or is larger than the number of rows at that level, then
--- the new row will be inserted to the end of the list.  `iter` will be changed
--- to point to this new row.  The row will be empty after this function is
--- called.  To fill in values, you need to call `gtk_tree_store_set()` or
--- `gtk_tree_store_set_value()`.
---
--- ---
---
---@param self Gtk.TreeStore # A `GtkTreeStore`
---@param iter Gtk.TreeIter # An unset `GtkTreeIter` to set to the new row
---@param parent? Gtk.TreeIter # A valid `GtkTreeIter`, or `nil`
---@param position integer # position to insert the new row, or -1 for last
---@return nil
function Gtk.TreeStore:insert(iter, parent, position) end

--- # method Gtk.TreeStore:insert_after()
---
--- Inserts a new row after `sibling`.  If `sibling` is `nil`, then the row will be
--- prepended to `parent` ’s children.  If `parent` and `sibling` are `nil`, then
--- the row will be prepended to the toplevel.  If both `sibling` and `parent` are
--- set, then `parent` must be the parent of `sibling`.  When `sibling` is set,
--- `parent` is optional.
--- 
--- `iter` will be changed to point to this new row.  The row will be empty after
--- this function is called.  To fill in values, you need to call
--- `gtk_tree_store_set()` or `gtk_tree_store_set_value()`.
---
--- ---
---
---@param self Gtk.TreeStore # A `GtkTreeStore`
---@param iter Gtk.TreeIter # An unset `GtkTreeIter` to set to the new row
---@param parent? Gtk.TreeIter # A valid `GtkTreeIter`, or `nil`
---@param sibling? Gtk.TreeIter # A valid `GtkTreeIter`, or `nil`
---@return nil
function Gtk.TreeStore:insert_after(iter, parent, sibling) end

--- # method Gtk.TreeStore:insert_before()
---
--- Inserts a new row before `sibling`.  If `sibling` is `nil`, then the row will
--- be appended to `parent` ’s children.  If `parent` and `sibling` are `nil`, then
--- the row will be appended to the toplevel.  If both `sibling` and `parent` are
--- set, then `parent` must be the parent of `sibling`.  When `sibling` is set,
--- `parent` is optional.
--- 
--- `iter` will be changed to point to this new row.  The row will be empty after
--- this function is called.  To fill in values, you need to call
--- `gtk_tree_store_set()` or `gtk_tree_store_set_value()`.
---
--- ---
---
---@param self Gtk.TreeStore # A `GtkTreeStore`
---@param iter Gtk.TreeIter # An unset `GtkTreeIter` to set to the new row
---@param parent? Gtk.TreeIter # A valid `GtkTreeIter`, or `nil`
---@param sibling? Gtk.TreeIter # A valid `GtkTreeIter`, or `nil`
---@return nil
function Gtk.TreeStore:insert_before(iter, parent, sibling) end

--- # method Gtk.TreeStore:insert_with_values()
---
--- A variant of `gtk_tree_store_insert_with_values()` which takes
--- the columns and values as two arrays, instead of varargs.  This
--- function is mainly intended for language bindings.
---
--- ---
---
---@param self Gtk.TreeStore # A `GtkTreeStore`
---@param iter? Gtk.TreeIter # An unset `GtkTreeIter` to set the new row, or `nil`.
---@param parent? Gtk.TreeIter # A valid `GtkTreeIter`, or `nil`
---@param position integer # position to insert the new row, or -1 for last
---@param columns unknown[] # an array of column numbers
---@param values unknown[] # an array of GValues
---@param n_values integer # the length of the `columns` and `values` arrays
---@return nil
function Gtk.TreeStore:insert_with_values(iter, parent, position, columns, values, n_values) end

--- # method Gtk.TreeStore:is_ancestor()
---
--- Returns `true` if `iter` is an ancestor of `descendant`.  That is, `iter` is the
--- parent (or grandparent or great-grandparent) of `descendant`.
---
--- ---
---
---@param self Gtk.TreeStore # A `GtkTreeStore`
---@param iter Gtk.TreeIter # A valid `GtkTreeIter`
---@param descendant Gtk.TreeIter # A valid `GtkTreeIter`
---@return (boolean|nil) # `true`, if `iter` is an ancestor of `descendant`
function Gtk.TreeStore:is_ancestor(iter, descendant) end

--- # method Gtk.TreeStore:iter_depth()
---
--- Returns the depth of `iter`.  This will be 0 for anything on the root level, 1
--- for anything down a level, etc.
---
--- ---
---
---@param self Gtk.TreeStore # A `GtkTreeStore`
---@param iter Gtk.TreeIter # A valid `GtkTreeIter`
---@return integer # The depth of `iter`
function Gtk.TreeStore:iter_depth(iter) end

--- # method Gtk.TreeStore:iter_is_valid()
---
--- WARNING: This function is slow. Only use it for debugging and/or testing
--- purposes.
--- 
--- Checks if the given iter is a valid iter for this `GtkTreeStore`.
---
--- ---
---
---@param self Gtk.TreeStore # A `GtkTreeStore`.
---@param iter Gtk.TreeIter # A `GtkTreeIter`.
---@return (boolean|nil) # `true` if the iter is valid, `false` if the iter is invalid.
function Gtk.TreeStore:iter_is_valid(iter) end

--- # method Gtk.TreeStore:move_after()
---
--- Moves `iter` in `tree_store` to the position after `position`. `iter` and
--- `position` should be in the same level. Note that this function only
--- works with unsorted stores. If `position` is `nil`, `iter` will be moved
--- to the start of the level.
---
--- ---
---
---@param self Gtk.TreeStore # A `GtkTreeStore`.
---@param iter Gtk.TreeIter # A `GtkTreeIter`.
---@param position? Gtk.TreeIter # A `GtkTreeIter`.
---@return nil
function Gtk.TreeStore:move_after(iter, position) end

--- # method Gtk.TreeStore:move_before()
---
--- Moves `iter` in `tree_store` to the position before `position`. `iter` and
--- `position` should be in the same level. Note that this function only
--- works with unsorted stores. If `position` is `nil`, `iter` will be
--- moved to the end of the level.
---
--- ---
---
---@param self Gtk.TreeStore # A `GtkTreeStore`.
---@param iter Gtk.TreeIter # A `GtkTreeIter`.
---@param position? Gtk.TreeIter # A `GtkTreeIter` or `nil`.
---@return nil
function Gtk.TreeStore:move_before(iter, position) end

--- # method Gtk.TreeStore:prepend()
---
--- Prepends a new row to `tree_store`.  If `parent` is non-`nil`, then it will prepend
--- the new row before the first child of `parent`, otherwise it will prepend a row
--- to the top level.  `iter` will be changed to point to this new row.  The row
--- will be empty after this function is called.  To fill in values, you need to
--- call `gtk_tree_store_set()` or `gtk_tree_store_set_value()`.
---
--- ---
---
---@param self Gtk.TreeStore # A `GtkTreeStore`
---@param iter Gtk.TreeIter # An unset `GtkTreeIter` to set to the prepended row
---@param parent? Gtk.TreeIter # A valid `GtkTreeIter`, or `nil`
---@return nil
function Gtk.TreeStore:prepend(iter, parent) end

--- # method Gtk.TreeStore:remove()
---
--- Removes `iter` from `tree_store`.  After being removed, `iter` is set to the
--- next valid row at that level, or invalidated if it previously pointed to the
--- last one.
---
--- ---
---
---@param self Gtk.TreeStore # A `GtkTreeStore`
---@param iter Gtk.TreeIter # A valid `GtkTreeIter`
---@return (boolean|nil) # `true` if `iter` is still valid, `false` if not.
function Gtk.TreeStore:remove(iter) end

--- # method Gtk.TreeStore:set_column_types()
---
--- This function is meant primarily for `GObjects` that inherit from
--- `GtkTreeStore`, and should only be used when constructing a new
--- `GtkTreeStore`.  It will not function after a row has been added,
--- or a method on the `GtkTreeModel` interface is called.
---
--- ---
---
---@param self Gtk.TreeStore # A `GtkTreeStore`
---@param n_columns integer # Number of columns for the tree store
---@param types unknown[] # An array of `GType` types, one for each column
---@return nil
function Gtk.TreeStore:set_column_types(n_columns, types) end

--- # method Gtk.TreeStore:set_value()
---
--- Sets the data in the cell specified by `iter` and `column`.
--- The type of `value` must be convertible to the type of the
--- column.
---
--- ---
---
---@param self Gtk.TreeStore # a `GtkTreeStore`
---@param iter Gtk.TreeIter # A valid `GtkTreeIter` for the row being modified
---@param column integer # column number to modify
---@param value GObject.Value # new value for the cell
---@return nil
function Gtk.TreeStore:set_value(iter, column, value) end

--- # method Gtk.TreeStore:set()
---
--- A variant of `gtk_tree_store_set_valist()` which takes
--- the columns and values as two arrays, instead of varargs.  This
--- function is mainly intended for language bindings or in case
--- the number of columns to change is not known until run-time.
---
--- ---
---
---@param self Gtk.TreeStore # A `GtkTreeStore`
---@param iter Gtk.TreeIter # A valid `GtkTreeIter` for the row being modified
---@param columns unknown[] # an array of column numbers
---@param values unknown[] # an array of GValues
---@param n_values integer # the length of the `columns` and `values` arrays
---@return nil
function Gtk.TreeStore:set(iter, columns, values, n_values) end

--- # method Gtk.TreeStore:swap()
---
--- Swaps `a` and `b` in the same level of `tree_store`. Note that this function
--- only works with unsorted stores.
---
--- ---
---
---@param self Gtk.TreeStore # A `GtkTreeStore`.
---@param a Gtk.TreeIter # A `GtkTreeIter`.
---@param b Gtk.TreeIter # Another `GtkTreeIter`.
---@return nil
function Gtk.TreeStore:swap(a, b) end

--- # function Gtk.TreeStore.new()
---
--- Non vararg creation function.  Used primarily by language bindings.
---
--- ---
---
---@param n_columns integer # number of columns in the tree store
---@param types unknown[] # an array of `GType` types for the columns, from first to last
---@return Gtk.TreeStore # a new `GtkTreeStore`
function Gtk.TreeStore.new(n_columns, types) end

--- # record Gtk.TreeStoreClass
---
---@class Gtk.TreeStoreClass
---@field parent_class GObject.ObjectClass
Gtk.TreeStoreClass = {}

--- # record Gtk.TreeStorePrivate
---
---@class Gtk.TreeStorePrivate
Gtk.TreeStorePrivate = {}

--- # class Gtk.TreeView
---
--- Widget that displays any object that implements the `GtkTreeModel` interface.
--- 
--- Please refer to the
--- [tree widget conceptual overview](TreeWidget.html)
--- for an overview of all the objects and data types related
--- to the tree widget and how they work together.
--- 
--- Several different coordinate systems are exposed in the GtkTreeView API.
--- These are:
--- 
--- ![](tree-view-coordinates.png)
--- 
--- Coordinate systems in GtkTreeView API:
--- 
--- - Widget coordinates: Coordinates relative to the widget (usually `widget->window`).
--- 
--- - Bin window coordinates: Coordinates relative to the window that GtkTreeView renders to.
--- 
--- - Tree coordinates: Coordinates relative to the entire scrollable area of GtkTreeView. These
---   coordinates start at (0, 0) for row 0 of the tree.
--- 
--- Several functions are available for converting between the different
--- coordinate systems.  The most common translations are between widget and bin
--- window coordinates and between bin window and tree coordinates. For the
--- former you can use `gtk_tree_view_convert_widget_to_bin_window_coords()`
--- (and vice versa), for the latter `gtk_tree_view_convert_bin_window_to_tree_coords()`
--- (and vice versa).
--- 
--- # GtkTreeView as GtkBuildable
--- 
--- The GtkTreeView implementation of the GtkBuildable interface accepts
--- `GtkTreeViewColumn` objects as `<child>` elements and exposes the internal
--- `GtkTreeSelection` in UI definitions.
--- 
--- An example of a UI definition fragment with GtkTreeView:
--- 
--- ```xml
--- <object class="GtkTreeView" id="treeview">
---   <property name="model">liststore1</property>
---   <child>
---     <object class="GtkTreeViewColumn" id="test-column">
---       <property name="title">Test</property>
---       <child>
---         <object class="GtkCellRendererText" id="test-renderer"/>
---         <attributes>
---           <attribute name="text">1</attribute>
---         </attributes>
---       </child>
---     </object>
---   </child>
---   <child internal-child="selection">
---     <object class="GtkTreeSelection" id="selection">
---       <signal name="changed" handler="on_treeview_selection_changed"/>
---     </object>
---   </child>
--- </object>
--- ```
--- 
--- # CSS nodes
--- 
--- ```plain
--- treeview.view
--- ├── header
--- │   ├── <column header>
--- ┊   ┊
--- │   ╰── <column header>
--- │
--- ╰── [rubberband]
--- ```
--- 
--- GtkTreeView has a main CSS node with name treeview and style class .view.
--- It has a subnode with name header, which is the parent for all the column
--- header widgets' CSS nodes.
--- For rubberband selection, a subnode with name rubberband is used.
---
--- ---
---
---@class Gtk.TreeView : Gtk.Container, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Scrollable
---@field parent Gtk.Container
---@field priv Gtk.TreeViewPrivate
---@operator call: Gtk.TreeView
Gtk.TreeView = {}

--- # method Gtk.TreeView:append_column()
---
--- Appends `column` to the list of columns. If `tree_view` has “fixed_height”
--- mode enabled, then `column` must have its “sizing” property set to be
--- GTK_TREE_VIEW_COLUMN_FIXED.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@param column Gtk.TreeViewColumn # The `GtkTreeViewColumn` to add.
---@return integer # The number of columns in `tree_view` after appending.
function Gtk.TreeView:append_column(column) end

--- # method Gtk.TreeView:collapse_all()
---
--- Recursively collapses all visible, expanded nodes in `tree_view`.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@return nil
function Gtk.TreeView:collapse_all() end

--- # method Gtk.TreeView:collapse_row()
---
--- Collapses a row (hides its child rows, if they exist).
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param path Gtk.TreePath # path to a row in the `tree_view`
---@return (boolean|nil) # `true` if the row was collapsed.
function Gtk.TreeView:collapse_row(path) end

--- # method Gtk.TreeView:columns_autosize()
---
--- Resizes all columns to their optimal width. Only works after the
--- treeview has been realized.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@return nil
function Gtk.TreeView:columns_autosize() end

--- # method Gtk.TreeView:convert_bin_window_to_tree_coords()
---
--- Converts bin_window coordinates to coordinates for the
--- tree (the full scrollable area of the tree).
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param bx integer # X coordinate relative to bin_window
---@param by integer # Y coordinate relative to bin_window
---@param tx integer # return location for tree X coordinate
---@param ty integer # return location for tree Y coordinate
---@return nil
function Gtk.TreeView:convert_bin_window_to_tree_coords(bx, by, tx, ty) end

--- # method Gtk.TreeView:convert_bin_window_to_widget_coords()
---
--- Converts bin_window coordinates (see `gtk_tree_view_get_bin_window()`)
--- to widget relative coordinates.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param bx integer # bin_window X coordinate
---@param by integer # bin_window Y coordinate
---@param wx integer # return location for widget X coordinate
---@param wy integer # return location for widget Y coordinate
---@return nil
function Gtk.TreeView:convert_bin_window_to_widget_coords(bx, by, wx, wy) end

--- # method Gtk.TreeView:convert_tree_to_bin_window_coords()
---
--- Converts tree coordinates (coordinates in full scrollable area of the tree)
--- to bin_window coordinates.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param tx integer # tree X coordinate
---@param ty integer # tree Y coordinate
---@param bx integer # return location for X coordinate relative to bin_window
---@param by integer # return location for Y coordinate relative to bin_window
---@return nil
function Gtk.TreeView:convert_tree_to_bin_window_coords(tx, ty, bx, by) end

--- # method Gtk.TreeView:convert_tree_to_widget_coords()
---
--- Converts tree coordinates (coordinates in full scrollable area of the tree)
--- to widget coordinates.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param tx integer # X coordinate relative to the tree
---@param ty integer # Y coordinate relative to the tree
---@param wx integer # return location for widget X coordinate
---@param wy integer # return location for widget Y coordinate
---@return nil
function Gtk.TreeView:convert_tree_to_widget_coords(tx, ty, wx, wy) end

--- # method Gtk.TreeView:convert_widget_to_bin_window_coords()
---
--- Converts widget coordinates to coordinates for the bin_window
--- (see `gtk_tree_view_get_bin_window()`).
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param wx integer # X coordinate relative to the widget
---@param wy integer # Y coordinate relative to the widget
---@param bx integer # return location for bin_window X coordinate
---@param by integer # return location for bin_window Y coordinate
---@return nil
function Gtk.TreeView:convert_widget_to_bin_window_coords(wx, wy, bx, by) end

--- # method Gtk.TreeView:convert_widget_to_tree_coords()
---
--- Converts widget coordinates to coordinates for the
--- tree (the full scrollable area of the tree).
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param wx integer # X coordinate relative to the widget
---@param wy integer # Y coordinate relative to the widget
---@param tx integer # return location for tree X coordinate
---@param ty integer # return location for tree Y coordinate
---@return nil
function Gtk.TreeView:convert_widget_to_tree_coords(wx, wy, tx, ty) end

--- # method Gtk.TreeView:create_row_drag_icon()
---
--- Creates a `cairo_surface_t` representation of the row at `path`.
--- This image is used for a drag icon.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param path Gtk.TreePath # a `GtkTreePath` in `tree_view`
---@return cairo.Surface # a newly-allocated surface of the drag icon.
function Gtk.TreeView:create_row_drag_icon(path) end

--- # method Gtk.TreeView:enable_model_drag_dest()
---
--- Turns `tree_view` into a drop destination for automatic DND. Calling
--- this method sets `GtkTreeView`:reorderable to `false`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param targets unknown[] # the table of targets that the drag will support
---@param n_targets integer # the number of items in `targets`
---@param actions Gdk.DragAction # the bitmask of possible actions for a drag from this widget
---@return nil
function Gtk.TreeView:enable_model_drag_dest(targets, n_targets, actions) end

--- # method Gtk.TreeView:enable_model_drag_source()
---
--- Turns `tree_view` into a drag source for automatic DND. Calling this
--- method sets `GtkTreeView`:reorderable to `false`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param start_button_mask Gdk.ModifierType # Mask of allowed buttons to start drag
---@param targets unknown[] # the table of targets that the drag will support
---@param n_targets integer # the number of items in `targets`
---@param actions Gdk.DragAction # the bitmask of possible actions for a drag from this widget
---@return nil
function Gtk.TreeView:enable_model_drag_source(start_button_mask, targets, n_targets, actions) end

--- # method Gtk.TreeView:expand_all()
---
--- Recursively expands all nodes in the `tree_view`.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@return nil
function Gtk.TreeView:expand_all() end

--- # method Gtk.TreeView:expand_row()
---
--- Opens the row so its children are visible.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param path Gtk.TreePath # path to a row
---@param open_all (boolean|nil) # whether to recursively expand, or just expand immediate children
---@return (boolean|nil) # `true` if the row existed and had children
function Gtk.TreeView:expand_row(path, open_all) end

--- # method Gtk.TreeView:expand_to_path()
---
--- Expands the row at `path`. This will also expand all parent rows of
--- `path` as necessary.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@param path Gtk.TreePath # path to a row.
---@return nil
function Gtk.TreeView:expand_to_path(path) end

--- # method Gtk.TreeView:get_activate_on_single_click()
---
--- Gets the setting set by `gtk_tree_view_set_activate_on_single_click()`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@return (boolean|nil) # `true` if row-activated will be emitted on a single click
function Gtk.TreeView:get_activate_on_single_click() end

--- # method Gtk.TreeView:get_background_area()
---
--- Fills the bounding rectangle in bin_window coordinates for the cell at the
--- row specified by `path` and the column specified by `column`.  If `path` is
--- `nil`, or points to a node not found in the tree, the `y` and `height` fields of
--- the rectangle will be filled with 0. If `column` is `nil`, the `x` and `width`
--- fields will be filled with 0.  The returned rectangle is equivalent to the
--- `background_area` passed to `gtk_cell_renderer_render()`.  These background
--- areas tile to cover the entire bin window.  Contrast with the `cell_area`,
--- returned by `gtk_tree_view_get_cell_area()`, which returns only the cell
--- itself, excluding surrounding borders and the tree expander area.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param path? Gtk.TreePath # a `GtkTreePath` for the row, or `nil` to get only horizontal coordinates
---@param column? Gtk.TreeViewColumn # a `GtkTreeViewColumn` for the column, or `nil` to get only vertical coordiantes
---@param rect Gdk.Rectangle # rectangle to fill with cell background rect
---@return nil
function Gtk.TreeView:get_background_area(path, column, rect) end

--- # method Gtk.TreeView:get_bin_window()
---
--- Returns the window that `tree_view` renders to.
--- This is used primarily to compare to `event->window`
--- to confirm that the event on `tree_view` is on the right window.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@return Gdk.Window # A `GdkWindow`, or `nil` when `tree_view` hasn’t been realized yet.
function Gtk.TreeView:get_bin_window() end

--- # method Gtk.TreeView:get_cell_area()
---
--- Fills the bounding rectangle in bin_window coordinates for the cell at the
--- row specified by `path` and the column specified by `column`.  If `path` is
--- `nil`, or points to a path not currently displayed, the `y` and `height` fields
--- of the rectangle will be filled with 0. If `column` is `nil`, the `x` and `width`
--- fields will be filled with 0.  The sum of all cell rects does not cover the
--- entire tree; there are extra pixels in between rows, for example. The
--- returned rectangle is equivalent to the `cell_area` passed to
--- `gtk_cell_renderer_render()`.  This function is only valid if `tree_view` is
--- realized.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param path? Gtk.TreePath # a `GtkTreePath` for the row, or `nil` to get only horizontal coordinates
---@param column? Gtk.TreeViewColumn # a `GtkTreeViewColumn` for the column, or `nil` to get only vertical coordinates
---@param rect Gdk.Rectangle # rectangle to fill with cell rect
---@return nil
function Gtk.TreeView:get_cell_area(path, column, rect) end

--- # method Gtk.TreeView:get_column()
---
--- Gets the `GtkTreeViewColumn` at the given position in the `tree_view`.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@param n integer # The position of the column, counting from 0.
---@return Gtk.TreeViewColumn # The `GtkTreeViewColumn`, or `nil` if the position is outside the range of columns.
function Gtk.TreeView:get_column(n) end

--- # method Gtk.TreeView:get_columns()
---
--- Returns a `GList` of all the `GtkTreeViewColumn` s currently in `tree_view`.
--- The returned list must be freed with g_list_free ().
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@return Gtk.TreeViewColumn[] # A list of `GtkTreeViewColumn` s
function Gtk.TreeView:get_columns() end

--- # method Gtk.TreeView:get_cursor()
---
--- Fills in `path` and `focus_column` with the current path and focus column.  If
--- the cursor isn’t currently set, then *`path` will be `nil`.  If no column
--- currently has focus, then *`focus_column` will be `nil`.
--- 
--- The returned `GtkTreePath` must be freed with `gtk_tree_path_free()` when
--- you are done with it.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param path? Gtk.TreePath # A pointer to be filled with the current cursor path, or `nil`
---@param focus_column? Gtk.TreeViewColumn # A pointer to be filled with the current focus column, or `nil`
---@return nil
function Gtk.TreeView:get_cursor(path, focus_column) end

--- # method Gtk.TreeView:get_dest_row_at_pos()
---
--- Determines the destination row for a given position.  `drag_x` and
--- `drag_y` are expected to be in widget coordinates.  This function is only
--- meaningful if `tree_view` is realized.  Therefore this function will always
--- return `false` if `tree_view` is not realized or does not have a model.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param drag_x integer # the position to determine the destination row for
---@param drag_y integer # the position to determine the destination row for
---@param path? Gtk.TreePath # Return location for the path of the highlighted row, or `nil`.
---@param pos? Gtk.TreeViewDropPosition # Return location for the drop position, or `nil`
---@return (boolean|nil) # whether there is a row at the given position, `true` if this is indeed the case.
function Gtk.TreeView:get_dest_row_at_pos(drag_x, drag_y, path, pos) end

--- # method Gtk.TreeView:get_drag_dest_row()
---
--- Gets information about the row that is highlighted for feedback.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param path? Gtk.TreePath # Return location for the path of the highlighted row, or `nil`.
---@param pos? Gtk.TreeViewDropPosition # Return location for the drop position, or `nil`
---@return nil
function Gtk.TreeView:get_drag_dest_row(path, pos) end

--- # method Gtk.TreeView:get_enable_search()
---
--- Returns whether or not the tree allows to start interactive searching
--- by typing in text.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@return (boolean|nil) # whether or not to let the user search interactively
function Gtk.TreeView:get_enable_search() end

--- # method Gtk.TreeView:get_enable_tree_lines()
---
--- Returns whether or not tree lines are drawn in `tree_view`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`.
---@return (boolean|nil) # `true` if tree lines are drawn in `tree_view`, `false` otherwise.
function Gtk.TreeView:get_enable_tree_lines() end

--- # method Gtk.TreeView:get_expander_column()
---
--- Returns the column that is the current expander column.
--- This column has the expander arrow drawn next to it.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@return Gtk.TreeViewColumn # The expander column.
function Gtk.TreeView:get_expander_column() end

--- # method Gtk.TreeView:get_fixed_height_mode()
---
--- Returns whether fixed height mode is turned on for `tree_view`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@return (boolean|nil) # `true` if `tree_view` is in fixed height mode
function Gtk.TreeView:get_fixed_height_mode() end

--- # method Gtk.TreeView:get_grid_lines()
---
--- Returns which grid lines are enabled in `tree_view`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@return Gtk.TreeViewGridLines # a `GtkTreeViewGridLines` value indicating which grid lines are enabled.
function Gtk.TreeView:get_grid_lines() end

--- # method Gtk.TreeView:get_hadjustment()
---
--- Gets the `GtkAdjustment` currently being used for the horizontal aspect.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@return Gtk.Adjustment # A `GtkAdjustment` object, or `nil` if none is currently being used.
function Gtk.TreeView:get_hadjustment() end

--- # method Gtk.TreeView:get_headers_clickable()
---
--- Returns whether all header columns are clickable.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@return (boolean|nil) # `true` if all header columns are clickable, otherwise `false`
function Gtk.TreeView:get_headers_clickable() end

--- # method Gtk.TreeView:get_headers_visible()
---
--- Returns `true` if the headers on the `tree_view` are visible.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@return (boolean|nil) # Whether the headers are visible or not.
function Gtk.TreeView:get_headers_visible() end

--- # method Gtk.TreeView:get_hover_expand()
---
--- Returns whether hover expansion mode is turned on for `tree_view`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@return (boolean|nil) # `true` if `tree_view` is in hover expansion mode
function Gtk.TreeView:get_hover_expand() end

--- # method Gtk.TreeView:get_hover_selection()
---
--- Returns whether hover selection mode is turned on for `tree_view`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@return (boolean|nil) # `true` if `tree_view` is in hover selection mode
function Gtk.TreeView:get_hover_selection() end

--- # method Gtk.TreeView:get_level_indentation()
---
--- Returns the amount, in pixels, of extra indentation for child levels
--- in `tree_view`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`.
---@return integer # the amount of extra indentation for child levels in `tree_view`. A return value of 0 means that this feature is disabled.
function Gtk.TreeView:get_level_indentation() end

--- # method Gtk.TreeView:get_model()
---
--- Returns the model the `GtkTreeView` is based on.  Returns `nil` if the
--- model is unset.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@return Gtk.TreeModel # A `GtkTreeModel`, or `nil` if none is currently being used.
function Gtk.TreeView:get_model() end

--- # method Gtk.TreeView:get_n_columns()
---
--- Queries the number of columns in the given `tree_view`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@return integer # The number of columns in the `tree_view`
function Gtk.TreeView:get_n_columns() end

--- # method Gtk.TreeView:get_path_at_pos()
---
--- Finds the path at the point (`x`, `y`), relative to bin_window coordinates
--- (please see `gtk_tree_view_get_bin_window()`).
--- That is, `x` and `y` are relative to an events coordinates. `x` and `y` must
--- come from an event on the `tree_view` only where `event->window ==
--- gtk_tree_view_get_bin_window ()`. It is primarily for
--- things like popup menus. If `path` is non-`nil`, then it will be filled
--- with the `GtkTreePath` at that point.  This path should be freed with
--- `gtk_tree_path_free()`.  If `column` is non-`nil`, then it will be filled
--- with the column at that point.  `cell_x` and `cell_y` return the coordinates
--- relative to the cell background (i.e. the `background_area` passed to
--- `gtk_cell_renderer_render()`).  This function is only meaningful if
--- `tree_view` is realized.  Therefore this function will always return `false`
--- if `tree_view` is not realized or does not have a model.
--- 
--- For converting widget coordinates (eg. the ones you get from
--- GtkWidget::query-tooltip), please see
--- `gtk_tree_view_convert_widget_to_bin_window_coords()`.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@param x integer # The x position to be identified (relative to bin_window).
---@param y integer # The y position to be identified (relative to bin_window).
---@param path? Gtk.TreePath # A pointer to a `GtkTreePath` pointer to be filled in, or `nil`
---@param column? Gtk.TreeViewColumn # A pointer to a `GtkTreeViewColumn` pointer to be filled in, or `nil`
---@param cell_x? integer # A pointer where the X coordinate relative to the cell can be placed, or `nil`
---@param cell_y? integer # A pointer where the Y coordinate relative to the cell can be placed, or `nil`
---@return (boolean|nil) # `true` if a row exists at that coordinate.
function Gtk.TreeView:get_path_at_pos(x, y, path, column, cell_x, cell_y) end

--- # method Gtk.TreeView:get_reorderable()
---
--- Retrieves whether the user can reorder the tree via drag-and-drop. See
--- `gtk_tree_view_set_reorderable()`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@return (boolean|nil) # `true` if the tree can be reordered.
function Gtk.TreeView:get_reorderable() end

--- # method Gtk.TreeView:get_rubber_banding()
---
--- Returns whether rubber banding is turned on for `tree_view`.  If the
--- selection mode is `GTK_SELECTION_MULTIPLE`, rubber banding will allow the
--- user to select multiple rows by dragging the mouse.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@return (boolean|nil) # `true` if rubber banding in `tree_view` is enabled.
function Gtk.TreeView:get_rubber_banding() end

--- # method Gtk.TreeView:get_rules_hint()
---
--- Gets the setting set by `gtk_tree_view_set_rules_hint()`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@return (boolean|nil) # `true` if the hint is set
function Gtk.TreeView:get_rules_hint() end

--- # method Gtk.TreeView:get_search_column()
---
--- Gets the column searched on by the interactive search code.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@return integer # the column the interactive search code searches in.
function Gtk.TreeView:get_search_column() end

--- # method Gtk.TreeView:get_search_entry()
---
--- Returns the `GtkEntry` which is currently in use as interactive search
--- entry for `tree_view`.  In case the built-in entry is being used, `nil`
--- will be returned.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@return Gtk.Entry # the entry currently in use as search entry.
function Gtk.TreeView:get_search_entry() end

--- # method Gtk.TreeView:get_selection()
---
--- Gets the `GtkTreeSelection` associated with `tree_view`.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@return Gtk.TreeSelection # A `GtkTreeSelection` object.
function Gtk.TreeView:get_selection() end

--- # method Gtk.TreeView:get_show_expanders()
---
--- Returns whether or not expanders are drawn in `tree_view`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`.
---@return (boolean|nil) # `true` if expanders are drawn in `tree_view`, `false` otherwise.
function Gtk.TreeView:get_show_expanders() end

--- # method Gtk.TreeView:get_tooltip_column()
---
--- Returns the column of `tree_view`’s model which is being used for
--- displaying tooltips on `tree_view`’s rows.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@return integer # the index of the tooltip column that is currently being used, or -1 if this is disabled.
function Gtk.TreeView:get_tooltip_column() end

--- # method Gtk.TreeView:get_tooltip_context()
---
--- This function is supposed to be used in a `GtkWidget`::query-tooltip
--- signal handler for `GtkTreeView`.  The `x`, `y` and `keyboard_tip` values
--- which are received in the signal handler, should be passed to this
--- function without modification.
--- 
--- The return value indicates whether there is a tree view row at the given
--- coordinates (`true`) or not (`false`) for mouse tooltips.  For keyboard
--- tooltips the row returned will be the cursor row.  When `true`, then any of
--- `model`, `path` and `iter` which have been provided will be set to point to
--- that row and the corresponding model.  `x` and `y` will always be converted
--- to be relative to `tree_view`’s bin_window if `keyboard_tooltip` is `false`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param x integer # the x coordinate (relative to widget coordinates)
---@param y integer # the y coordinate (relative to widget coordinates)
---@param keyboard_tip (boolean|nil) # whether this is a keyboard tooltip or not
---@param model? Gtk.TreeModel # a pointer to receive a `GtkTreeModel` or `nil`
---@param path? Gtk.TreePath # a pointer to receive a `GtkTreePath` or `nil`
---@param iter? Gtk.TreeIter # a pointer to receive a `GtkTreeIter` or `nil`
---@return (boolean|nil) # whether or not the given tooltip context points to a row.
function Gtk.TreeView:get_tooltip_context(x, y, keyboard_tip, model, path, iter) end

--- # method Gtk.TreeView:get_vadjustment()
---
--- Gets the `GtkAdjustment` currently being used for the vertical aspect.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@return Gtk.Adjustment # A `GtkAdjustment` object, or `nil` if none is currently being used.
function Gtk.TreeView:get_vadjustment() end

--- # method Gtk.TreeView:get_visible_range()
---
--- Sets `start_path` and `end_path` to be the first and last visible path.
--- Note that there may be invisible paths in between.
--- 
--- The paths should be freed with `gtk_tree_path_free()` after use.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param start_path? Gtk.TreePath # Return location for start of region, or `nil`.
---@param end_path? Gtk.TreePath # Return location for end of region, or `nil`.
---@return (boolean|nil) # `true`, if valid paths were placed in `start_path` and `end_path`.
function Gtk.TreeView:get_visible_range(start_path, end_path) end

--- # method Gtk.TreeView:get_visible_rect()
---
--- Fills `visible_rect` with the currently-visible region of the
--- buffer, in tree coordinates. Convert to bin_window coordinates with
--- `gtk_tree_view_convert_tree_to_bin_window_coords()`.
--- Tree coordinates start at 0,0 for row 0 of the tree, and cover the entire
--- scrollable area of the tree.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param visible_rect Gdk.Rectangle # rectangle to fill
---@return nil
function Gtk.TreeView:get_visible_rect(visible_rect) end

--- # method Gtk.TreeView:insert_column()
---
--- This inserts the `column` into the `tree_view` at `position`.  If `position` is
--- -1, then the column is inserted at the end. If `tree_view` has
--- “fixed_height” mode enabled, then `column` must have its “sizing” property
--- set to be GTK_TREE_VIEW_COLUMN_FIXED.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@param column Gtk.TreeViewColumn # The `GtkTreeViewColumn` to be inserted.
---@param position integer # The position to insert `column` in.
---@return integer # The number of columns in `tree_view` after insertion.
function Gtk.TreeView:insert_column(column, position) end

--- # method Gtk.TreeView:insert_column_with_data_func()
---
--- Convenience function that inserts a new column into the `GtkTreeView`
--- with the given cell renderer and a `GtkTreeCellDataFunc` to set cell renderer
--- attributes (normally using data from the model). See also
--- `gtk_tree_view_column_set_cell_data_func()`, `gtk_tree_view_column_pack_start()`.
--- If `tree_view` has “fixed_height” mode enabled, then the new column will have its
--- “sizing” property set to be GTK_TREE_VIEW_COLUMN_FIXED.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param position integer # Position to insert, -1 for append
---@param title string # column title
---@param cell Gtk.CellRenderer # cell renderer for column
---@param func Gtk.TreeCellDataFunc # function to set attributes of cell renderer
---@param data? userdata # data for `func`
---@param dnotify GLib.DestroyNotify # destroy notifier for `data`
---@return integer # number of columns in the tree view post-insert
function Gtk.TreeView:insert_column_with_data_func(position, title, cell, func, data, dnotify) end

--- # method Gtk.TreeView:is_blank_at_pos()
---
--- Determine whether the point (`x`, `y`) in `tree_view` is blank, that is no
--- cell content nor an expander arrow is drawn at the location. If so, the
--- location can be considered as the background. You might wish to take
--- special action on clicks on the background, such as clearing a current
--- selection, having a custom context menu or starting rubber banding.
--- 
--- The `x` and `y` coordinate that are provided must be relative to bin_window
--- coordinates.  That is, `x` and `y` must come from an event on `tree_view`
--- where `event->window == gtk_tree_view_get_bin_window ()`.
--- 
--- For converting widget coordinates (eg. the ones you get from
--- GtkWidget::query-tooltip), please see
--- `gtk_tree_view_convert_widget_to_bin_window_coords()`.
--- 
--- The `path`, `column`, `cell_x` and `cell_y` arguments will be filled in
--- likewise as for `gtk_tree_view_get_path_at_pos()`.  Please see
--- `gtk_tree_view_get_path_at_pos()` for more information.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param x integer # The x position to be identified (relative to bin_window)
---@param y integer # The y position to be identified (relative to bin_window)
---@param path? Gtk.TreePath # A pointer to a `GtkTreePath` pointer to be filled in, or `nil`
---@param column? Gtk.TreeViewColumn # A pointer to a `GtkTreeViewColumn` pointer to be filled in, or `nil`
---@param cell_x? integer # A pointer where the X coordinate relative to the cell can be placed, or `nil`
---@param cell_y? integer # A pointer where the Y coordinate relative to the cell can be placed, or `nil`
---@return (boolean|nil) # `true` if the area at the given coordinates is blank, `false` otherwise.
function Gtk.TreeView:is_blank_at_pos(x, y, path, column, cell_x, cell_y) end

--- # method Gtk.TreeView:is_rubber_banding_active()
---
--- Returns whether a rubber banding operation is currently being done
--- in `tree_view`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@return (boolean|nil) # `true` if a rubber banding operation is currently being done in `tree_view`.
function Gtk.TreeView:is_rubber_banding_active() end

--- # method Gtk.TreeView:map_expanded_rows()
---
--- Calls `func` on all expanded rows.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param func Gtk.TreeViewMappingFunc # A function to be called
---@param data? userdata # User data to be passed to the function.
---@return nil
function Gtk.TreeView:map_expanded_rows(func, data) end

--- # method Gtk.TreeView:move_column_after()
---
--- Moves `column` to be after to `base_column`.  If `base_column` is `nil`, then
--- `column` is placed in the first position.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param column Gtk.TreeViewColumn # The `GtkTreeViewColumn` to be moved.
---@param base_column? Gtk.TreeViewColumn # The `GtkTreeViewColumn` to be moved relative to, or `nil`.
---@return nil
function Gtk.TreeView:move_column_after(column, base_column) end

--- # method Gtk.TreeView:remove_column()
---
--- Removes `column` from `tree_view`.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@param column Gtk.TreeViewColumn # The `GtkTreeViewColumn` to remove.
---@return integer # The number of columns in `tree_view` after removing.
function Gtk.TreeView:remove_column(column) end

--- # method Gtk.TreeView:row_activated()
---
--- Activates the cell determined by `path` and `column`.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param path Gtk.TreePath # The `GtkTreePath` to be activated.
---@param column Gtk.TreeViewColumn # The `GtkTreeViewColumn` to be activated.
---@return nil
function Gtk.TreeView:row_activated(path, column) end

--- # method Gtk.TreeView:row_expanded()
---
--- Returns `true` if the node pointed to by `path` is expanded in `tree_view`.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@param path Gtk.TreePath # A `GtkTreePath` to test expansion state.
---@return (boolean|nil) # `true` if `path` is expanded.
function Gtk.TreeView:row_expanded(path) end

--- # method Gtk.TreeView:scroll_to_cell()
---
--- Moves the alignments of `tree_view` to the position specified by `column` and
--- `path`.  If `column` is `nil`, then no horizontal scrolling occurs.  Likewise,
--- if `path` is `nil` no vertical scrolling occurs.  At a minimum, one of `column`
--- or `path` need to be non-`nil`.  `row_align` determines where the row is
--- placed, and `col_align` determines where `column` is placed.  Both are expected
--- to be between 0.0 and 1.0. 0.0 means left/top alignment, 1.0 means
--- right/bottom alignment, 0.5 means center.
--- 
--- If `use_align` is `false`, then the alignment arguments are ignored, and the
--- tree does the minimum amount of work to scroll the cell onto the screen.
--- This means that the cell will be scrolled to the edge closest to its current
--- position.  If the cell is currently visible on the screen, nothing is done.
--- 
--- This function only works if the model is set, and `path` is a valid row on the
--- model.  If the model changes before the `tree_view` is realized, the centered
--- path will be modified to reflect this change.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@param path? Gtk.TreePath # The path of the row to move to, or `nil`.
---@param column? Gtk.TreeViewColumn # The `GtkTreeViewColumn` to move horizontally to, or `nil`.
---@param use_align (boolean|nil) # whether to use alignment arguments, or `false`.
---@param row_align number # The vertical alignment of the row specified by `path`.
---@param col_align number # The horizontal alignment of the column specified by `column`.
---@return nil
function Gtk.TreeView:scroll_to_cell(path, column, use_align, row_align, col_align) end

--- # method Gtk.TreeView:scroll_to_point()
---
--- Scrolls the tree view such that the top-left corner of the visible
--- area is `tree_x`, `tree_y`, where `tree_x` and `tree_y` are specified
--- in tree coordinates.  The `tree_view` must be realized before
--- this function is called.  If it isn't, you probably want to be
--- using `gtk_tree_view_scroll_to_cell()`.
--- 
--- If either `tree_x` or `tree_y` are -1, then that direction isn’t scrolled.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param tree_x integer # X coordinate of new top-left pixel of visible area, or -1
---@param tree_y integer # Y coordinate of new top-left pixel of visible area, or -1
---@return nil
function Gtk.TreeView:scroll_to_point(tree_x, tree_y) end

--- # method Gtk.TreeView:set_activate_on_single_click()
---
--- Cause the `GtkTreeView`::row-activated signal to be emitted
--- on a single click instead of a double click.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param single (boolean|nil) # `true` to emit row-activated on a single click
---@return nil
function Gtk.TreeView:set_activate_on_single_click(single) end

--- # method Gtk.TreeView:set_column_drag_function()
---
--- Sets a user function for determining where a column may be dropped when
--- dragged.  This function is called on every column pair in turn at the
--- beginning of a column drag to determine where a drop can take place.  The
--- arguments passed to `func` are: the `tree_view`, the `GtkTreeViewColumn` being
--- dragged, the two `GtkTreeViewColumn` s determining the drop spot, and
--- `user_data`.  If either of the `GtkTreeViewColumn` arguments for the drop spot
--- are `nil`, then they indicate an edge.  If `func` is set to be `nil`, then
--- `tree_view` reverts to the default behavior of allowing all columns to be
--- dropped everywhere.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@param func? Gtk.TreeViewColumnDropFunc # A function to determine which columns are reorderable, or `nil`.
---@param user_data? userdata # User data to be passed to `func`, or `nil`
---@param destroy? GLib.DestroyNotify # Destroy notifier for `user_data`, or `nil`
---@return nil
function Gtk.TreeView:set_column_drag_function(func, user_data, destroy) end

--- # method Gtk.TreeView:set_cursor()
---
--- Sets the current keyboard focus to be at `path`, and selects it.  This is
--- useful when you want to focus the user’s attention on a particular row.  If
--- `focus_column` is not `nil`, then focus is given to the column specified by
--- it. Additionally, if `focus_column` is specified, and `start_editing` is
--- `true`, then editing should be started in the specified cell.
--- This function is often followed by `gtk_widget_grab_focus` (`tree_view`)
--- in order to give keyboard focus to the widget.  Please note that editing
--- can only happen when the widget is realized.
--- 
--- If `path` is invalid for `model`, the current cursor (if any) will be unset
--- and the function will return without failing.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param path Gtk.TreePath # A `GtkTreePath`
---@param focus_column? Gtk.TreeViewColumn # A `GtkTreeViewColumn`, or `nil`
---@param start_editing (boolean|nil) # `true` if the specified cell should start being edited.
---@return nil
function Gtk.TreeView:set_cursor(path, focus_column, start_editing) end

--- # method Gtk.TreeView:set_cursor_on_cell()
---
--- Sets the current keyboard focus to be at `path`, and selects it.  This is
--- useful when you want to focus the user’s attention on a particular row.  If
--- `focus_column` is not `nil`, then focus is given to the column specified by
--- it. If `focus_column` and `focus_cell` are not `nil`, and `focus_column`
--- contains 2 or more editable or activatable cells, then focus is given to
--- the cell specified by `focus_cell`. Additionally, if `focus_column` is
--- specified, and `start_editing` is `true`, then editing should be started in
--- the specified cell.  This function is often followed by
--- `gtk_widget_grab_focus` (`tree_view`) in order to give keyboard focus to the
--- widget.  Please note that editing can only happen when the widget is
--- realized.
--- 
--- If `path` is invalid for `model`, the current cursor (if any) will be unset
--- and the function will return without failing.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param path Gtk.TreePath # A `GtkTreePath`
---@param focus_column? Gtk.TreeViewColumn # A `GtkTreeViewColumn`, or `nil`
---@param focus_cell? Gtk.CellRenderer # A `GtkCellRenderer`, or `nil`
---@param start_editing (boolean|nil) # `true` if the specified cell should start being edited.
---@return nil
function Gtk.TreeView:set_cursor_on_cell(path, focus_column, focus_cell, start_editing) end

--- # method Gtk.TreeView:set_destroy_count_func()
---
--- This function should almost never be used.  It is meant for private use by
--- ATK for determining the number of visible children that are removed when the
--- user collapses a row, or a row is deleted.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param func? Gtk.TreeDestroyCountFunc # Function to be called when a view row is destroyed, or `nil`
---@param data? userdata # User data to be passed to `func`, or `nil`
---@param destroy? GLib.DestroyNotify # Destroy notifier for `data`, or `nil`
---@return nil
function Gtk.TreeView:set_destroy_count_func(func, data, destroy) end

--- # method Gtk.TreeView:set_drag_dest_row()
---
--- Sets the row that is highlighted for feedback.
--- If `path` is `nil`, an existing highlight is removed.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param path? Gtk.TreePath # The path of the row to highlight, or `nil`
---@param pos Gtk.TreeViewDropPosition # Specifies whether to drop before, after or into the row
---@return nil
function Gtk.TreeView:set_drag_dest_row(path, pos) end

--- # method Gtk.TreeView:set_enable_search()
---
--- If `enable_search` is set, then the user can type in text to search through
--- the tree interactively (this is sometimes called "typeahead find").
--- 
--- Note that even if this is `false`, the user can still initiate a search
--- using the “start-interactive-search” key binding.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param enable_search (boolean|nil) # `true`, if the user can search interactively
---@return nil
function Gtk.TreeView:set_enable_search(enable_search) end

--- # method Gtk.TreeView:set_enable_tree_lines()
---
--- Sets whether to draw lines interconnecting the expanders in `tree_view`.
--- This does not have any visible effects for lists.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param enabled (boolean|nil) # `true` to enable tree line drawing, `false` otherwise.
---@return nil
function Gtk.TreeView:set_enable_tree_lines(enabled) end

--- # method Gtk.TreeView:set_expander_column()
---
--- Sets the column to draw the expander arrow at. It must be in `tree_view`.
--- If `column` is `nil`, then the expander arrow is always at the first
--- visible column.
--- 
--- If you do not want expander arrow to appear in your tree, set the
--- expander column to a hidden column.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param column? Gtk.TreeViewColumn # `nil`, or the column to draw the expander arrow at.
---@return nil
function Gtk.TreeView:set_expander_column(column) end

--- # method Gtk.TreeView:set_fixed_height_mode()
---
--- Enables or disables the fixed height mode of `tree_view`.
--- Fixed height mode speeds up `GtkTreeView` by assuming that all
--- rows have the same height.
--- Only enable this option if all rows are the same height and all
--- columns are of type %GTK_TREE_VIEW_COLUMN_FIXED.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param enable (boolean|nil) # `true` to enable fixed height mode
---@return nil
function Gtk.TreeView:set_fixed_height_mode(enable) end

--- # method Gtk.TreeView:set_grid_lines()
---
--- Sets which grid lines to draw in `tree_view`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param grid_lines Gtk.TreeViewGridLines # a `GtkTreeViewGridLines` value indicating which grid lines to enable.
---@return nil
function Gtk.TreeView:set_grid_lines(grid_lines) end

--- # method Gtk.TreeView:set_hadjustment()
---
--- Sets the `GtkAdjustment` for the current horizontal aspect.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param adjustment? Gtk.Adjustment # The `GtkAdjustment` to set, or `nil`
---@return nil
function Gtk.TreeView:set_hadjustment(adjustment) end

--- # method Gtk.TreeView:set_headers_clickable()
---
--- Allow the column title buttons to be clicked.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@param setting (boolean|nil) # `true` if the columns are clickable.
---@return nil
function Gtk.TreeView:set_headers_clickable(setting) end

--- # method Gtk.TreeView:set_headers_visible()
---
--- Sets the visibility state of the headers.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@param headers_visible (boolean|nil) # `true` if the headers are visible
---@return nil
function Gtk.TreeView:set_headers_visible(headers_visible) end

--- # method Gtk.TreeView:set_hover_expand()
---
--- Enables or disables the hover expansion mode of `tree_view`.
--- Hover expansion makes rows expand or collapse if the pointer
--- moves over them.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param expand (boolean|nil) # `true` to enable hover selection mode
---@return nil
function Gtk.TreeView:set_hover_expand(expand) end

--- # method Gtk.TreeView:set_hover_selection()
---
--- Enables or disables the hover selection mode of `tree_view`.
--- Hover selection makes the selected row follow the pointer.
--- Currently, this works only for the selection modes
--- %GTK_SELECTION_SINGLE and %GTK_SELECTION_BROWSE.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param hover (boolean|nil) # `true` to enable hover selection mode
---@return nil
function Gtk.TreeView:set_hover_selection(hover) end

--- # method Gtk.TreeView:set_level_indentation()
---
--- Sets the amount of extra indentation for child levels to use in `tree_view`
--- in addition to the default indentation.  The value should be specified in
--- pixels, a value of 0 disables this feature and in this case only the default
--- indentation will be used.
--- This does not have any visible effects for lists.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param indentation integer # the amount, in pixels, of extra indentation in `tree_view`.
---@return nil
function Gtk.TreeView:set_level_indentation(indentation) end

--- # method Gtk.TreeView:set_model()
---
--- Sets the model for a `GtkTreeView`.  If the `tree_view` already has a model
--- set, it will remove it before setting the new model.  If `model` is `nil`,
--- then it will unset the old model.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@param model? Gtk.TreeModel # The model.
---@return nil
function Gtk.TreeView:set_model(model) end

--- # method Gtk.TreeView:set_reorderable()
---
--- This function is a convenience function to allow you to reorder
--- models that support the `GtkTreeDragSourceIface` and the
--- `GtkTreeDragDestIface`.  Both `GtkTreeStore` and `GtkListStore` support
--- these.  If `reorderable` is `true`, then the user can reorder the
--- model by dragging and dropping rows. The developer can listen to
--- these changes by connecting to the model’s `GtkTreeModel`::row-inserted
--- and `GtkTreeModel`::row-deleted signals. The reordering is implemented
--- by setting up the tree view as a drag source and destination.
--- Therefore, drag and drop can not be used in a reorderable view for any
--- other purpose.
--- 
--- This function does not give you any degree of control over the order -- any
--- reordering is allowed.  If more control is needed, you should probably
--- handle drag and drop manually.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`.
---@param reorderable (boolean|nil) # `true`, if the tree can be reordered.
---@return nil
function Gtk.TreeView:set_reorderable(reorderable) end

--- # method Gtk.TreeView:set_row_separator_func()
---
--- Sets the row separator function, which is used to determine
--- whether a row should be drawn as a separator. If the row separator
--- function is `nil`, no separators are drawn. This is the default value.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param func? Gtk.TreeViewRowSeparatorFunc # a `GtkTreeViewRowSeparatorFunc`
---@param data? userdata # user data to pass to `func`, or `nil`
---@param destroy? GLib.DestroyNotify # destroy notifier for `data`, or `nil`
---@return nil
function Gtk.TreeView:set_row_separator_func(func, data, destroy) end

--- # method Gtk.TreeView:set_rubber_banding()
---
--- Enables or disables rubber banding in `tree_view`.  If the selection mode
--- is `GTK_SELECTION_MULTIPLE`, rubber banding will allow the user to select
--- multiple rows by dragging the mouse.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param enable (boolean|nil) # `true` to enable rubber banding
---@return nil
function Gtk.TreeView:set_rubber_banding(enable) end

--- # method Gtk.TreeView:set_rules_hint()
---
--- Sets a hint for the theme to draw even/odd rows in the `tree_view`
--- with different colors, also known as "zebra striping".
--- 
--- This function tells the GTK+ theme that the user interface for your
--- application requires users to read across tree rows and associate
--- cells with one another.
--- 
--- Do not use it just because you prefer the appearance of the ruled
--- tree; that’s a question for the theme. Some themes will draw tree
--- rows in alternating colors even when rules are turned off, and
--- users who prefer that appearance all the time can choose those
--- themes. You should call this function only as a semantic hint to
--- the theme engine that your tree makes alternating colors useful
--- from a functional standpoint (since it has lots of columns,
--- generally).
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param setting (boolean|nil) # `true` if the tree requires reading across rows
---@return nil
function Gtk.TreeView:set_rules_hint(setting) end

--- # method Gtk.TreeView:set_search_column()
---
--- Sets `column` as the column where the interactive search code should
--- search in for the current model.
--- 
--- If the search column is set, users can use the “start-interactive-search”
--- key binding to bring up search popup. The enable-search property controls
--- whether simply typing text will also start an interactive search.
--- 
--- Note that `column` refers to a column of the current model. The search
--- column is reset to -1 when the model is changed.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param column integer # the column of the model to search in, or -1 to disable searching
---@return nil
function Gtk.TreeView:set_search_column(column) end

--- # method Gtk.TreeView:set_search_entry()
---
--- Sets the entry which the interactive search code will use for this
--- `tree_view`.  This is useful when you want to provide a search entry
--- in our interface at all time at a fixed position.  Passing `nil` for
--- `entry` will make the interactive search code use the built-in popup
--- entry again.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param entry? Gtk.Entry # the entry the interactive search code of `tree_view` should use or `nil`
---@return nil
function Gtk.TreeView:set_search_entry(entry) end

--- # method Gtk.TreeView:set_search_equal_func()
---
--- Sets the compare function for the interactive search capabilities; note
--- that somewhat like `strcmp()` returning 0 for equality
--- `GtkTreeViewSearchEqualFunc` returns `false` on matches.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param search_equal_func Gtk.TreeViewSearchEqualFunc # the compare function to use during the search
---@param search_user_data? userdata # user data to pass to `search_equal_func`, or `nil`
---@param search_destroy? GLib.DestroyNotify # Destroy notifier for `search_user_data`, or `nil`
---@return nil
function Gtk.TreeView:set_search_equal_func(search_equal_func, search_user_data, search_destroy) end

--- # method Gtk.TreeView:set_search_position_func()
---
--- Sets the function to use when positioning the search dialog.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param func? Gtk.TreeViewSearchPositionFunc # the function to use to position the search dialog, or `nil` to use the default search position function
---@param data? userdata # user data to pass to `func`, or `nil`
---@param destroy? GLib.DestroyNotify # Destroy notifier for `data`, or `nil`
---@return nil
function Gtk.TreeView:set_search_position_func(func, data, destroy) end

--- # method Gtk.TreeView:set_show_expanders()
---
--- Sets whether to draw and enable expanders and indent child rows in
--- `tree_view`.  When disabled there will be no expanders visible in trees
--- and there will be no way to expand and collapse rows by default.  Also
--- note that hiding the expanders will disable the default indentation.  You
--- can set a custom indentation in this case using
--- `gtk_tree_view_set_level_indentation()`.
--- This does not have any visible effects for lists.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param enabled (boolean|nil) # `true` to enable expander drawing, `false` otherwise.
---@return nil
function Gtk.TreeView:set_show_expanders(enabled) end

--- # method Gtk.TreeView:set_tooltip_cell()
---
--- Sets the tip area of `tooltip` to the area `path`, `column` and `cell` have
--- in common.  For example if `path` is `nil` and `column` is set, the tip
--- area will be set to the full area covered by `column`.  See also
--- `gtk_tooltip_set_tip_area()`.
--- 
--- Note that if `path` is not specified and `cell` is set and part of a column
--- containing the expander, the tooltip might not show and hide at the correct
--- position.  In such cases `path` must be set to the current node under the
--- mouse cursor for this function to operate correctly.
--- 
--- See also `gtk_tree_view_set_tooltip_column()` for a simpler alternative.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param tooltip Gtk.Tooltip # a `GtkTooltip`
---@param path? Gtk.TreePath # a `GtkTreePath` or `nil`
---@param column? Gtk.TreeViewColumn # a `GtkTreeViewColumn` or `nil`
---@param cell? Gtk.CellRenderer # a `GtkCellRenderer` or `nil`
---@return nil
function Gtk.TreeView:set_tooltip_cell(tooltip, path, column, cell) end

--- # method Gtk.TreeView:set_tooltip_column()
---
--- If you only plan to have simple (text-only) tooltips on full rows, you
--- can use this function to have `GtkTreeView` handle these automatically
--- for you. `column` should be set to the column in `tree_view`’s model
--- containing the tooltip texts, or -1 to disable this feature.
--- 
--- When enabled, `GtkWidget`:has-tooltip will be set to `true` and
--- `tree_view` will connect a `GtkWidget`::query-tooltip signal handler.
--- 
--- Note that the signal handler sets the text with `gtk_tooltip_set_markup()`,
--- so &, <, etc have to be escaped in the text.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param column integer # an integer, which is a valid column number for `tree_view`’s model
---@return nil
function Gtk.TreeView:set_tooltip_column(column) end

--- # method Gtk.TreeView:set_tooltip_row()
---
--- Sets the tip area of `tooltip` to be the area covered by the row at `path`.
--- See also `gtk_tree_view_set_tooltip_column()` for a simpler alternative.
--- See also `gtk_tooltip_set_tip_area()`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@param tooltip Gtk.Tooltip # a `GtkTooltip`
---@param path Gtk.TreePath # a `GtkTreePath`
---@return nil
function Gtk.TreeView:set_tooltip_row(tooltip, path) end

--- # method Gtk.TreeView:set_vadjustment()
---
--- Sets the `GtkAdjustment` for the current vertical aspect.
---
--- ---
---
---@param self Gtk.TreeView # A `GtkTreeView`
---@param adjustment? Gtk.Adjustment # The `GtkAdjustment` to set, or `nil`
---@return nil
function Gtk.TreeView:set_vadjustment(adjustment) end

--- # method Gtk.TreeView:unset_rows_drag_dest()
---
--- Undoes the effect of
--- `gtk_tree_view_enable_model_drag_dest()`. Calling this method sets
--- `GtkTreeView`:reorderable to `false`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@return nil
function Gtk.TreeView:unset_rows_drag_dest() end

--- # method Gtk.TreeView:unset_rows_drag_source()
---
--- Undoes the effect of
--- `gtk_tree_view_enable_model_drag_source()`. Calling this method sets
--- `GtkTreeView`:reorderable to `false`.
---
--- ---
---
---@param self Gtk.TreeView # a `GtkTreeView`
---@return nil
function Gtk.TreeView:unset_rows_drag_source() end

--- # function Gtk.TreeView.new()
---
--- Creates a new `GtkTreeView` widget.
---
--- ---
---
---@return Gtk.Widget # A newly created `GtkTreeView` widget.
function Gtk.TreeView.new() end

--- # function Gtk.TreeView.new_with_model()
---
--- Creates a new `GtkTreeView` widget with the model initialized to `model`.
---
--- ---
---
---@param model Gtk.TreeModel # the model.
---@return Gtk.Widget # A newly created `GtkTreeView` widget.
function Gtk.TreeView.new_with_model(model) end

--- # class Gtk.TreeViewAccessible
---
---@class Gtk.TreeViewAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component, Gtk.Atk.Selection, Gtk.Atk.Table, Gtk.CellAccessibleParent
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.TreeViewAccessiblePrivate
Gtk.TreeViewAccessible = {}

--- # record Gtk.TreeViewAccessibleClass
---
---@class Gtk.TreeViewAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.TreeViewAccessibleClass = {}

--- # record Gtk.TreeViewAccessiblePrivate
---
---@class Gtk.TreeViewAccessiblePrivate
Gtk.TreeViewAccessiblePrivate = {}

--- # record Gtk.TreeViewClass
---
---@class Gtk.TreeViewClass
---@field parent_class Gtk.ContainerClass
---@field row_activated fun(tree_view: Gtk.TreeView, path: Gtk.TreePath, column: Gtk.TreeViewColumn): nil
---@field test_expand_row fun(tree_view: Gtk.TreeView, iter: Gtk.TreeIter, path: Gtk.TreePath): (boolean|nil)
---@field test_collapse_row fun(tree_view: Gtk.TreeView, iter: Gtk.TreeIter, path: Gtk.TreePath): (boolean|nil)
---@field row_expanded fun(tree_view: Gtk.TreeView, iter: Gtk.TreeIter, path: Gtk.TreePath): nil
---@field row_collapsed fun(tree_view: Gtk.TreeView, iter: Gtk.TreeIter, path: Gtk.TreePath): nil
---@field columns_changed fun(tree_view: Gtk.TreeView): nil
---@field cursor_changed fun(tree_view: Gtk.TreeView): nil
---@field move_cursor fun(tree_view: Gtk.TreeView, step: Gtk.MovementStep, count: integer): (boolean|nil)
---@field select_all fun(tree_view: Gtk.TreeView): (boolean|nil)
---@field unselect_all fun(tree_view: Gtk.TreeView): (boolean|nil)
---@field select_cursor_row fun(tree_view: Gtk.TreeView, start_editing: (boolean|nil)): (boolean|nil)
---@field toggle_cursor_row fun(tree_view: Gtk.TreeView): (boolean|nil)
---@field expand_collapse_cursor_row fun(tree_view: Gtk.TreeView, logical: (boolean|nil), expand: (boolean|nil), open_all: (boolean|nil)): (boolean|nil)
---@field select_cursor_parent fun(tree_view: Gtk.TreeView): (boolean|nil)
---@field start_interactive_search fun(tree_view: Gtk.TreeView): (boolean|nil)
Gtk.TreeViewClass = {}

--- # class Gtk.TreeViewColumn
---
--- The GtkTreeViewColumn object represents a visible column in a `GtkTreeView` widget.
--- It allows to set properties of the column header, and functions as a holding pen for
--- the cell renderers which determine how the data in the column is displayed.
--- 
--- Please refer to the [tree widget conceptual overview](TreeWidget.html)
--- for an overview of all the objects and data types related to the tree widget and how
--- they work together.
---
--- ---
---
---@class Gtk.TreeViewColumn : GObject.InitiallyUnowned, Gtk.Buildable, Gtk.CellLayout
---@field parent_instance GObject.InitiallyUnowned
---@field priv Gtk.TreeViewColumnPrivate
---@operator call: Gtk.TreeViewColumn
Gtk.TreeViewColumn = {}

--- # method Gtk.TreeViewColumn:add_attribute()
---
--- Adds an attribute mapping to the list in `tree_column`.  The `column` is the
--- column of the model to get a value from, and the `attribute` is the
--- parameter on `cell_renderer` to be set from the value. So for example
--- if column 2 of the model contains strings, you could have the
--- “text” attribute of a `GtkCellRendererText` get its values from
--- column 2.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@param cell_renderer Gtk.CellRenderer # the `GtkCellRenderer` to set attributes on
---@param attribute string # An attribute on the renderer
---@param column integer # The column position on the model to get the attribute from.
---@return nil
function Gtk.TreeViewColumn:add_attribute(cell_renderer, attribute, column) end

--- # method Gtk.TreeViewColumn:cell_get_position()
---
--- Obtains the horizontal position and size of a cell in a column. If the
--- cell is not found in the column, `start_pos` and `width` are not changed and
--- `false` is returned.
---
--- ---
---
---@param self Gtk.TreeViewColumn # a `GtkTreeViewColumn`
---@param cell_renderer Gtk.CellRenderer # a `GtkCellRenderer`
---@param x_offset? integer # return location for the horizontal position of `cell` within `tree_column`, may be `nil`
---@param width? integer # return location for the width of `cell`, may be `nil`
---@return (boolean|nil) # `true` if `cell` belongs to `tree_column`.
function Gtk.TreeViewColumn:cell_get_position(cell_renderer, x_offset, width) end

--- # method Gtk.TreeViewColumn:cell_get_size()
---
--- Obtains the width and height needed to render the column.  This is used
--- primarily by the `GtkTreeView`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@param cell_area? Gdk.Rectangle # The area a cell in the column will be allocated, or `nil`
---@param x_offset? integer # location to return x offset of a cell relative to `cell_area`, or `nil`
---@param y_offset? integer # location to return y offset of a cell relative to `cell_area`, or `nil`
---@param width? integer # location to return width needed to render a cell, or `nil`
---@param height? integer # location to return height needed to render a cell, or `nil`
---@return nil
function Gtk.TreeViewColumn:cell_get_size(cell_area, x_offset, y_offset, width, height) end

--- # method Gtk.TreeViewColumn:cell_is_visible()
---
--- Returns `true` if any of the cells packed into the `tree_column` are visible.
--- For this to be meaningful, you must first initialize the cells with
--- `gtk_tree_view_column_cell_set_cell_data()`
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`
---@return (boolean|nil) # `true`, if any of the cells packed into the `tree_column` are currently visible
function Gtk.TreeViewColumn:cell_is_visible() end

--- # method Gtk.TreeViewColumn:cell_set_cell_data()
---
--- Sets the cell renderer based on the `tree_model` and `iter`.  That is, for
--- every attribute mapping in `tree_column`, it will get a value from the set
--- column on the `iter`, and use that value to set the attribute on the cell
--- renderer.  This is used primarily by the `GtkTreeView`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@param tree_model Gtk.TreeModel # The `GtkTreeModel` to to get the cell renderers attributes from.
---@param iter Gtk.TreeIter # The `GtkTreeIter` to to get the cell renderer’s attributes from.
---@param is_expander (boolean|nil) # `true`, if the row has children
---@param is_expanded (boolean|nil) # `true`, if the row has visible children
---@return nil
function Gtk.TreeViewColumn:cell_set_cell_data(tree_model, iter, is_expander, is_expanded) end

--- # method Gtk.TreeViewColumn:clear()
---
--- Unsets all the mappings on all renderers on the `tree_column`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`
---@return nil
function Gtk.TreeViewColumn:clear() end

--- # method Gtk.TreeViewColumn:clear_attributes()
---
--- Clears all existing attributes previously set with
--- `gtk_tree_view_column_set_attributes()`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # a `GtkTreeViewColumn`
---@param cell_renderer Gtk.CellRenderer # a `GtkCellRenderer` to clear the attribute mapping on.
---@return nil
function Gtk.TreeViewColumn:clear_attributes(cell_renderer) end

--- # method Gtk.TreeViewColumn:clicked()
---
--- Emits the “clicked” signal on the column.  This function will only work if
--- `tree_column` is clickable.
---
--- ---
---
---@param self Gtk.TreeViewColumn # a `GtkTreeViewColumn`
---@return nil
function Gtk.TreeViewColumn:clicked() end

--- # method Gtk.TreeViewColumn:focus_cell()
---
--- Sets the current keyboard focus to be at `cell`, if the column contains
--- 2 or more editable and activatable cells.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`
---@param cell Gtk.CellRenderer # A `GtkCellRenderer`
---@return nil
function Gtk.TreeViewColumn:focus_cell(cell) end

--- # method Gtk.TreeViewColumn:get_alignment()
---
--- Returns the current x alignment of `tree_column`.  This value can range
--- between 0.0 and 1.0.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@return number # The current alignent of `tree_column`.
function Gtk.TreeViewColumn:get_alignment() end

--- # method Gtk.TreeViewColumn:get_button()
---
--- Returns the button used in the treeview column header
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`
---@return Gtk.Widget # The button for the column header.
function Gtk.TreeViewColumn:get_button() end

--- # method Gtk.TreeViewColumn:get_clickable()
---
--- Returns `true` if the user can click on the header for the column.
---
--- ---
---
---@param self Gtk.TreeViewColumn # a `GtkTreeViewColumn`
---@return (boolean|nil) # `true` if user can click the column header.
function Gtk.TreeViewColumn:get_clickable() end

--- # method Gtk.TreeViewColumn:get_expand()
---
--- Returns `true` if the column expands to fill available space.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@return (boolean|nil) # `true` if the column expands to fill available space.
function Gtk.TreeViewColumn:get_expand() end

--- # method Gtk.TreeViewColumn:get_fixed_width()
---
--- Gets the fixed width of the column.  This may not be the actual displayed
--- width of the column; for that, use `gtk_tree_view_column_get_width()`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@return integer # The fixed width of the column.
function Gtk.TreeViewColumn:get_fixed_width() end

--- # method Gtk.TreeViewColumn:get_max_width()
---
--- Returns the maximum width in pixels of the `tree_column`, or -1 if no maximum
--- width is set.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@return integer # The maximum width of the `tree_column`.
function Gtk.TreeViewColumn:get_max_width() end

--- # method Gtk.TreeViewColumn:get_min_width()
---
--- Returns the minimum width in pixels of the `tree_column`, or -1 if no minimum
--- width is set.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@return integer # The minimum width of the `tree_column`.
function Gtk.TreeViewColumn:get_min_width() end

--- # method Gtk.TreeViewColumn:get_reorderable()
---
--- Returns `true` if the `tree_column` can be reordered by the user.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`
---@return (boolean|nil) # `true` if the `tree_column` can be reordered by the user.
function Gtk.TreeViewColumn:get_reorderable() end

--- # method Gtk.TreeViewColumn:get_resizable()
---
--- Returns `true` if the `tree_column` can be resized by the end user.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`
---@return (boolean|nil) # `true`, if the `tree_column` can be resized.
function Gtk.TreeViewColumn:get_resizable() end

--- # method Gtk.TreeViewColumn:get_sizing()
---
--- Returns the current type of `tree_column`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@return Gtk.TreeViewColumnSizing # The type of `tree_column`.
function Gtk.TreeViewColumn:get_sizing() end

--- # method Gtk.TreeViewColumn:get_sort_column_id()
---
--- Gets the logical `sort_column_id` that the model sorts on when this
--- column is selected for sorting.
--- See `gtk_tree_view_column_set_sort_column_id()`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # a `GtkTreeViewColumn`
---@return integer # the current `sort_column_id` for this column, or -1 if this column can’t be used for sorting.
function Gtk.TreeViewColumn:get_sort_column_id() end

--- # method Gtk.TreeViewColumn:get_sort_indicator()
---
--- Gets the value set by `gtk_tree_view_column_set_sort_indicator()`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # a `GtkTreeViewColumn`
---@return (boolean|nil) # whether the sort indicator arrow is displayed
function Gtk.TreeViewColumn:get_sort_indicator() end

--- # method Gtk.TreeViewColumn:get_sort_order()
---
--- Gets the value set by `gtk_tree_view_column_set_sort_order()`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # a `GtkTreeViewColumn`
---@return Gtk.SortType # the sort order the sort indicator is indicating
function Gtk.TreeViewColumn:get_sort_order() end

--- # method Gtk.TreeViewColumn:get_spacing()
---
--- Returns the spacing of `tree_column`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@return integer # the spacing of `tree_column`.
function Gtk.TreeViewColumn:get_spacing() end

--- # method Gtk.TreeViewColumn:get_title()
---
--- Returns the title of the widget.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@return string # the title of the column. This string should not be modified or freed.
function Gtk.TreeViewColumn:get_title() end

--- # method Gtk.TreeViewColumn:get_tree_view()
---
--- Returns the `GtkTreeView` wherein `tree_column` has been inserted.
--- If `column` is currently not inserted in any tree view, `nil` is
--- returned.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`
---@return Gtk.Widget # The tree view wherein `column` has been inserted if any, `nil` otherwise.
function Gtk.TreeViewColumn:get_tree_view() end

--- # method Gtk.TreeViewColumn:get_visible()
---
--- Returns `true` if `tree_column` is visible.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@return (boolean|nil) # whether the column is visible or not. If it is visible, then the tree will show the column.
function Gtk.TreeViewColumn:get_visible() end

--- # method Gtk.TreeViewColumn:get_widget()
---
--- Returns the `GtkWidget` in the button on the column header.
--- If a custom widget has not been set then `nil` is returned.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@return Gtk.Widget # The `GtkWidget` in the column header, or `nil`
function Gtk.TreeViewColumn:get_widget() end

--- # method Gtk.TreeViewColumn:get_width()
---
--- Returns the current size of `tree_column` in pixels.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@return integer # The current width of `tree_column`.
function Gtk.TreeViewColumn:get_width() end

--- # method Gtk.TreeViewColumn:get_x_offset()
---
--- Returns the current X offset of `tree_column` in pixels.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@return integer # The current X offset of `tree_column`.
function Gtk.TreeViewColumn:get_x_offset() end

--- # method Gtk.TreeViewColumn:pack_end()
---
--- Adds the `cell` to end of the column. If `expand` is `false`, then the `cell`
--- is allocated no more space than it needs. Any unused space is divided
--- evenly between cells for which `expand` is `true`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@param cell Gtk.CellRenderer # The `GtkCellRenderer`.
---@param expand (boolean|nil) # `true` if `cell` is to be given extra space allocated to `tree_column`.
---@return nil
function Gtk.TreeViewColumn:pack_end(cell, expand) end

--- # method Gtk.TreeViewColumn:pack_start()
---
--- Packs the `cell` into the beginning of the column. If `expand` is `false`, then
--- the `cell` is allocated no more space than it needs. Any unused space is divided
--- evenly between cells for which `expand` is `true`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@param cell Gtk.CellRenderer # The `GtkCellRenderer`.
---@param expand (boolean|nil) # `true` if `cell` is to be given extra space allocated to `tree_column`.
---@return nil
function Gtk.TreeViewColumn:pack_start(cell, expand) end

--- # method Gtk.TreeViewColumn:queue_resize()
---
--- Flags the column, and the cell renderers added to this column, to have
--- their sizes renegotiated.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`
---@return nil
function Gtk.TreeViewColumn:queue_resize() end

--- # method Gtk.TreeViewColumn:set_alignment()
---
--- Sets the alignment of the title or custom widget inside the column header.
--- The alignment determines its location inside the button -- 0.0 for left, 0.5
--- for center, 1.0 for right.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@param xalign number # The alignment, which is between [0.0 and 1.0] inclusive.
---@return nil
function Gtk.TreeViewColumn:set_alignment(xalign) end

--- # method Gtk.TreeViewColumn:set_cell_data_func()
---
--- Sets the `GtkTreeCellDataFunc` to use for the column.  This
--- function is used instead of the standard attributes mapping for
--- setting the column value, and should set the value of `tree_column`'s
--- cell renderer as appropriate.  `func` may be `nil` to remove an
--- older one.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`
---@param cell_renderer Gtk.CellRenderer # A `GtkCellRenderer`
---@param func? Gtk.TreeCellDataFunc # The `GtkTreeCellDataFunc` to use.
---@param func_data? userdata # The user data for `func`.
---@param destroy GLib.DestroyNotify # The destroy notification for `func_data`
---@return nil
function Gtk.TreeViewColumn:set_cell_data_func(cell_renderer, func, func_data, destroy) end

--- # method Gtk.TreeViewColumn:set_clickable()
---
--- Sets the header to be active if `clickable` is `true`.  When the header is
--- active, then it can take keyboard focus, and can be clicked.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@param clickable (boolean|nil) # `true` if the header is active.
---@return nil
function Gtk.TreeViewColumn:set_clickable(clickable) end

--- # method Gtk.TreeViewColumn:set_expand()
---
--- Sets the column to take available extra space.  This space is shared equally
--- amongst all columns that have the expand set to `true`.  If no column has this
--- option set, then the last column gets all extra space.  By default, every
--- column is created with this `false`.
--- 
--- Along with “fixed-width”, the “expand” property changes when the column is
--- resized by the user.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@param expand (boolean|nil) # `true` if the column should expand to fill available space.
---@return nil
function Gtk.TreeViewColumn:set_expand(expand) end

--- # method Gtk.TreeViewColumn:set_fixed_width()
---
--- If `fixed_width` is not -1, sets the fixed width of `tree_column`; otherwise
--- unsets it.  The effective value of `fixed_width` is clamped between the
--- minimum and maximum width of the column; however, the value stored in the
--- “fixed-width” property is not clamped.  If the column sizing is
--- `GTK_TREE_VIEW_COLUMN_GROW_ONLY` or `GTK_TREE_VIEW_COLUMN_AUTOSIZE`, setting
--- a fixed width overrides the automatically calculated width.  Note that
--- `fixed_width` is only a hint to GTK+; the width actually allocated to the
--- column may be greater or less than requested.
--- 
--- Along with “expand”, the “fixed-width” property changes when the column is
--- resized by the user.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@param fixed_width integer # The new fixed width, in pixels, or -1.
---@return nil
function Gtk.TreeViewColumn:set_fixed_width(fixed_width) end

--- # method Gtk.TreeViewColumn:set_max_width()
---
--- Sets the maximum width of the `tree_column`.  If `max_width` is -1, then the
--- maximum width is unset.  Note, the column can actually be wider than max
--- width if it’s the last column in a view.  In this case, the column expands to
--- fill any extra space.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@param max_width integer # The maximum width of the column in pixels, or -1.
---@return nil
function Gtk.TreeViewColumn:set_max_width(max_width) end

--- # method Gtk.TreeViewColumn:set_min_width()
---
--- Sets the minimum width of the `tree_column`.  If `min_width` is -1, then the
--- minimum width is unset.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@param min_width integer # The minimum width of the column in pixels, or -1.
---@return nil
function Gtk.TreeViewColumn:set_min_width(min_width) end

--- # method Gtk.TreeViewColumn:set_reorderable()
---
--- If `reorderable` is `true`, then the column can be reordered by the end user
--- dragging the header.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`
---@param reorderable (boolean|nil) # `true`, if the column can be reordered.
---@return nil
function Gtk.TreeViewColumn:set_reorderable(reorderable) end

--- # method Gtk.TreeViewColumn:set_resizable()
---
--- If `resizable` is `true`, then the user can explicitly resize the column by
--- grabbing the outer edge of the column button.  If resizable is `true` and
--- sizing mode of the column is `GTK_TREE_VIEW_COLUMN_AUTOSIZE`, then the sizing
--- mode is changed to `GTK_TREE_VIEW_COLUMN_GROW_ONLY`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`
---@param resizable (boolean|nil) # `true`, if the column can be resized
---@return nil
function Gtk.TreeViewColumn:set_resizable(resizable) end

--- # method Gtk.TreeViewColumn:set_sizing()
---
--- Sets the growth behavior of `tree_column` to `type`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@param type Gtk.TreeViewColumnSizing # The `GtkTreeViewColumnSizing`.
---@return nil
function Gtk.TreeViewColumn:set_sizing(type) end

--- # method Gtk.TreeViewColumn:set_sort_column_id()
---
--- Sets the logical `sort_column_id` that this column sorts on when this column
--- is selected for sorting.  Doing so makes the column header clickable.
---
--- ---
---
---@param self Gtk.TreeViewColumn # a `GtkTreeViewColumn`
---@param sort_column_id integer # The `sort_column_id` of the model to sort on.
---@return nil
function Gtk.TreeViewColumn:set_sort_column_id(sort_column_id) end

--- # method Gtk.TreeViewColumn:set_sort_indicator()
---
--- Call this function with a `setting` of `true` to display an arrow in
--- the header button indicating the column is sorted. Call
--- `gtk_tree_view_column_set_sort_order()` to change the direction of
--- the arrow.
---
--- ---
---
---@param self Gtk.TreeViewColumn # a `GtkTreeViewColumn`
---@param setting (boolean|nil) # `true` to display an indicator that the column is sorted
---@return nil
function Gtk.TreeViewColumn:set_sort_indicator(setting) end

--- # method Gtk.TreeViewColumn:set_sort_order()
---
--- Changes the appearance of the sort indicator.
--- 
--- This does not actually sort the model.  Use
--- `gtk_tree_view_column_set_sort_column_id()` if you want automatic sorting
--- support.  This function is primarily for custom sorting behavior, and should
--- be used in conjunction with `gtk_tree_sortable_set_sort_column_id()` to do
--- that. For custom models, the mechanism will vary.
--- 
--- The sort indicator changes direction to indicate normal sort or reverse sort.
--- Note that you must have the sort indicator enabled to see anything when
--- calling this function; see `gtk_tree_view_column_set_sort_indicator()`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # a `GtkTreeViewColumn`
---@param order Gtk.SortType # sort order that the sort indicator should indicate
---@return nil
function Gtk.TreeViewColumn:set_sort_order(order) end

--- # method Gtk.TreeViewColumn:set_spacing()
---
--- Sets the spacing field of `tree_column`, which is the number of pixels to
--- place between cell renderers packed into it.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@param spacing integer # distance between cell renderers in pixels.
---@return nil
function Gtk.TreeViewColumn:set_spacing(spacing) end

--- # method Gtk.TreeViewColumn:set_title()
---
--- Sets the title of the `tree_column`.  If a custom widget has been set, then
--- this value is ignored.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@param title string # The title of the `tree_column`.
---@return nil
function Gtk.TreeViewColumn:set_title(title) end

--- # method Gtk.TreeViewColumn:set_visible()
---
--- Sets the visibility of `tree_column`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@param visible (boolean|nil) # `true` if the `tree_column` is visible.
---@return nil
function Gtk.TreeViewColumn:set_visible(visible) end

--- # method Gtk.TreeViewColumn:set_widget()
---
--- Sets the widget in the header to be `widget`.  If widget is `nil`, then the
--- header button is set with a `GtkLabel` set to the title of `tree_column`.
---
--- ---
---
---@param self Gtk.TreeViewColumn # A `GtkTreeViewColumn`.
---@param widget? Gtk.Widget # A child `GtkWidget`, or `nil`.
---@return nil
function Gtk.TreeViewColumn:set_widget(widget) end

--- # function Gtk.TreeViewColumn.new()
---
--- Creates a new `GtkTreeViewColumn`.
---
--- ---
---
---@return Gtk.TreeViewColumn # A newly created `GtkTreeViewColumn`.
function Gtk.TreeViewColumn.new() end

--- # function Gtk.TreeViewColumn.new_with_area()
---
--- Creates a new `GtkTreeViewColumn` using `area` to render its cells.
---
--- ---
---
---@param area Gtk.CellArea # the `GtkCellArea` that the newly created column should use to layout cells.
---@return Gtk.TreeViewColumn # A newly created `GtkTreeViewColumn`.
function Gtk.TreeViewColumn.new_with_area(area) end

--- # record Gtk.TreeViewColumnClass
---
---@class Gtk.TreeViewColumnClass
---@field parent_class GObject.InitiallyUnownedClass
---@field clicked fun(tree_column: Gtk.TreeViewColumn): nil
Gtk.TreeViewColumnClass = {}

---@alias Gtk.TreeViewColumnDropFunc fun(tree_view: Gtk.TreeView, column: Gtk.TreeViewColumn, prev_column: Gtk.TreeViewColumn, next_column: Gtk.TreeViewColumn, data: userdata): (boolean|nil)

--- # record Gtk.TreeViewColumnPrivate
---
---@class Gtk.TreeViewColumnPrivate
Gtk.TreeViewColumnPrivate = {}

---@enum Gtk.TreeViewColumnSizing
Gtk.TreeViewColumnSizing = {}

---@enum Gtk.TreeViewDropPosition
Gtk.TreeViewDropPosition = {}

---@enum Gtk.TreeViewGridLines
Gtk.TreeViewGridLines = {}

---@alias Gtk.TreeViewMappingFunc fun(tree_view: Gtk.TreeView, path: Gtk.TreePath, user_data: userdata): nil

--- # record Gtk.TreeViewPrivate
---
---@class Gtk.TreeViewPrivate
Gtk.TreeViewPrivate = {}

---@alias Gtk.TreeViewRowSeparatorFunc fun(model: Gtk.TreeModel, iter: Gtk.TreeIter, data: userdata): (boolean|nil)

---@alias Gtk.TreeViewSearchEqualFunc fun(model: Gtk.TreeModel, column: integer, key: string, iter: Gtk.TreeIter, search_data: userdata): (boolean|nil)

---@alias Gtk.TreeViewSearchPositionFunc fun(tree_view: Gtk.TreeView, search_dialog: Gtk.Widget, user_data: userdata): nil

--- # class Gtk.UIManager
---
--- A `GtkUIManager` constructs a user interface (menus and toolbars) from
--- one or more UI definitions, which reference actions from one or more
--- action groups.
--- 
--- > GtkUIManager is deprecated since GTK+ 3.10. To construct user interfaces
--- > from XML definitions, you should use `GtkBuilder`, `GMenuModel`, et al. To
--- > work with actions, use `GAction`, `GtkActionable` et al. These newer classes
--- > support richer functionality and integration with various desktop shells.
--- > It should be possible to migrate most/all functionality from GtkUIManager.
--- 
--- # UI Definitions # {`XML`-UI}
--- 
--- The UI definitions are specified in an XML format which can be
--- roughly described by the following DTD.
--- 
--- > Do not confuse the GtkUIManager UI Definitions described here with
--- > the similarly named [GtkBuilder UI Definitions][BUILDER-UI].
--- 
--- ```c
--- <!ELEMENT ui          (menubar|toolbar|popup|accelerator)* >
--- <!ELEMENT menubar     (menuitem|separator|placeholder|menu)* >
--- <!ELEMENT menu        (menuitem|separator|placeholder|menu)* >
--- <!ELEMENT popup       (menuitem|separator|placeholder|menu)* >
--- <!ELEMENT toolbar     (toolitem|separator|placeholder)* >
--- <!ELEMENT placeholder (menuitem|toolitem|separator|placeholder|menu)* >
--- <!ELEMENT menuitem     EMPTY >
--- <!ELEMENT toolitem     (menu?) >
--- <!ELEMENT separator    EMPTY >
--- <!ELEMENT accelerator  EMPTY >
--- <!ATTLIST menubar      name                      `IMPLIED`
---                        action                    `IMPLIED` >
--- <!ATTLIST toolbar      name                      `IMPLIED`
---                        action                    `IMPLIED` >
--- <!ATTLIST popup        name                      `IMPLIED`
---                        action                    `IMPLIED`
---                        accelerators (true|false) `IMPLIED` >
--- <!ATTLIST placeholder  name                      `IMPLIED`
---                        action                    `IMPLIED` >
--- <!ATTLIST separator    name                      `IMPLIED`
---                        action                    `IMPLIED`
---                        expand       (true|false) `IMPLIED` >
--- <!ATTLIST menu         name                      `IMPLIED`
---                        action                    `REQUIRED`
---                        position     (top|bot)    `IMPLIED` >
--- <!ATTLIST menuitem     name                      `IMPLIED`
---                        action                    `REQUIRED`
---                        position     (top|bot)    `IMPLIED`
---                        always-show-image (true|false) `IMPLIED` >
--- <!ATTLIST toolitem     name                      `IMPLIED`
---                        action                    `REQUIRED`
---                        position     (top|bot)    `IMPLIED` >
--- <!ATTLIST accelerator  name                      `IMPLIED`
---                        action                    `REQUIRED` >
--- ```
--- 
--- There are some additional restrictions beyond those specified in the
--- DTD, e.g. every toolitem must have a toolbar in its anchestry and
--- every menuitem must have a menubar or popup in its anchestry. Since
--- a `GMarkupParser` is used to parse the UI description, it must not only
--- be valid XML, but valid markup.
--- 
--- If a name is not specified, it defaults to the action. If an action is
--- not specified either, the element name is used. The name and action
--- attributes must not contain “/” characters after parsing (since that
--- would mess up path lookup) and must be usable as XML attributes when
--- enclosed in doublequotes, thus they must not “"” characters or references
--- to the &quot; entity.
--- 
--- # A UI definition #
--- 
--- ```xml
--- <ui>
---   <menubar>
---     <menu name="FileMenu" action="FileMenuAction">
---       <menuitem name="New" action="New2Action" />
---       <placeholder name="FileMenuAdditions" />
---     </menu>
---     <menu name="JustifyMenu" action="JustifyMenuAction">
---       <menuitem name="Left" action="justify-left"/>
---       <menuitem name="Centre" action="justify-center"/>
---       <menuitem name="Right" action="justify-right"/>
---       <menuitem name="Fill" action="justify-fill"/>
---     </menu>
---   </menubar>
---   <toolbar action="toolbar1">
---     <placeholder name="JustifyToolItems">
---       <separator/>
---       <toolitem name="Left" action="justify-left"/>
---       <toolitem name="Centre" action="justify-center"/>
---       <toolitem name="Right" action="justify-right"/>
---       <toolitem name="Fill" action="justify-fill"/>
---       <separator/>
---     </placeholder>
---   </toolbar>
--- </ui>
--- ```
--- 
--- The constructed widget hierarchy is very similar to the element tree
--- of the XML, with the exception that placeholders are merged into their
--- parents. The correspondence of XML elements to widgets should be
--- almost obvious:
--- 
--- - menubar
--- 
---    a `GtkMenuBar`
--- 
--- - toolbar
--- 
---    a `GtkToolbar`
--- 
--- - popup
--- 
---    a toplevel `GtkMenu`
--- 
--- - menu
--- 
---    a `GtkMenu` attached to a menuitem
--- 
--- - menuitem
--- 
---    a `GtkMenuItem` subclass, the exact type depends on the action
--- 
--- - toolitem
--- 
---    a `GtkToolItem` subclass, the exact type depends on the
---    action. Note that toolitem elements may contain a menu element,
---    but only if their associated action specifies a
---    `GtkMenuToolButton` as proxy.
--- 
--- - separator
--- 
---    a `GtkSeparatorMenuItem` or `GtkSeparatorToolItem`
--- 
--- - accelerator
--- 
---    a keyboard accelerator
--- 
--- The “position” attribute determines where a constructed widget is positioned
--- wrt. to its siblings in the partially constructed tree. If it is
--- “top”, the widget is prepended, otherwise it is appended.
--- 
--- # UI Merging # {`UI`-Merging}
--- 
--- The most remarkable feature of `GtkUIManager` is that it can overlay a set
--- of menuitems and toolitems over another one, and demerge them later.
--- 
--- Merging is done based on the names of the XML elements. Each element is
--- identified by a path which consists of the names of its anchestors, separated
--- by slashes. For example, the menuitem named “Left” in the example above
--- has the path `/ui/menubar/JustifyMenu/Left` and the
--- toolitem with the same name has path
--- `/ui/toolbar1/JustifyToolItems/Left`.
--- 
--- # Accelerators #
--- 
--- Every action has an accelerator path. Accelerators are installed together
--- with menuitem proxies, but they can also be explicitly added with
--- `<accelerator>` elements in the UI definition. This makes it possible to
--- have accelerators for actions even if they have no visible proxies.
--- 
--- # Smart Separators # {`Smart`-Separators}
--- 
--- The separators created by `GtkUIManager` are “smart”, i.e. they do not show up
--- in the UI unless they end up between two visible menu or tool items. Separators
--- which are located at the very beginning or end of the menu or toolbar
--- containing them, or multiple separators next to each other, are hidden. This
--- is a useful feature, since the merging of UI elements from multiple sources
--- can make it hard or impossible to determine in advance whether a separator
--- will end up in such an unfortunate position.
--- 
--- For separators in toolbars, you can set `expand="true"` to
--- turn them from a small, visible separator to an expanding, invisible one.
--- Toolitems following an expanding separator are effectively right-aligned.
--- 
--- # Empty Menus
--- 
--- Submenus pose similar problems to separators inconnection with merging. It is
--- impossible to know in advance whether they will end up empty after merging.
--- `GtkUIManager` offers two ways to treat empty submenus:
--- 
--- - make them disappear by hiding the menu item they’re attached to
--- 
--- - add an insensitive “Empty” item
--- 
--- The behaviour is chosen based on the “hide_if_empty” property of the action
--- to which the submenu is associated.
--- 
--- # GtkUIManager as GtkBuildable # {`GtkUIManager`-BUILDER-UI}
--- 
--- The GtkUIManager implementation of the GtkBuildable interface accepts
--- GtkActionGroup objects as `<child>` elements in UI definitions.
--- 
--- A GtkUIManager UI definition as described above can be embedded in
--- an GtkUIManager `<object>` element in a GtkBuilder UI definition.
--- 
--- The widgets that are constructed by a GtkUIManager can be embedded in
--- other parts of the constructed user interface with the help of the
--- “constructor” attribute. See the example below.
--- 
--- ## An embedded GtkUIManager UI definition
--- 
--- ```xml
--- <object class="GtkUIManager" id="uiman">
---   <child>
---     <object class="GtkActionGroup" id="actiongroup">
---       <child>
---         <object class="GtkAction" id="file">
---           <property name="label">_File</property>
---         </object>
---       </child>
---     </object>
---   </child>
---   <ui>
---     <menubar name="menubar1">
---       <menu action="file">
---       </menu>
---     </menubar>
---   </ui>
--- </object>
--- <object class="GtkWindow" id="main-window">
---   <child>
---     <object class="GtkMenuBar" id="menubar1" constructor="uiman"/>
---   </child>
--- </object>
--- ```
---
--- ---
---
---@class Gtk.UIManager : GObject.Object, Gtk.Buildable
---@field parent GObject.Object
---@field private_data Gtk.UIManagerPrivate
---@operator call: Gtk.UIManager
Gtk.UIManager = {}

--- # method Gtk.UIManager:add_ui()
---
--- Adds a UI element to the current contents of `manager`.
--- 
--- If `type` is %GTK_UI_MANAGER_AUTO, GTK+ inserts a menuitem, toolitem or
--- separator if such an element can be inserted at the place determined by
--- `path`. Otherwise `type` must indicate an element that can be inserted at
--- the place determined by `path`.
--- 
--- If `path` points to a menuitem or toolitem, the new element will be inserted
--- before or after this item, depending on `top`.
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager`
---@param merge_id integer # the merge id for the merged UI, see `gtk_ui_manager_new_merge_id()`
---@param path string # a path
---@param name string # the name for the added UI element
---@param action? string # the name of the action to be proxied, or `nil` to add a separator
---@param type Gtk.UIManagerItemType # the type of UI element to add.
---@param top (boolean|nil) # if `true`, the UI element is added before its siblings, otherwise it is added after its siblings.
---@return nil
function Gtk.UIManager:add_ui(merge_id, path, name, action, type, top) end

--- # method Gtk.UIManager:add_ui_from_file()
---
--- Parses a file containing a [UI definition][XML-UI] and
--- merges it with the current contents of `manager`.
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager` object
---@param filename string # the name of the file to parse
---@return integer # The merge id for the merged UI. The merge id can be used to unmerge the UI with `gtk_ui_manager_remove_ui()`. If an error occurred, the return value is 0.
function Gtk.UIManager:add_ui_from_file(filename) end

--- # method Gtk.UIManager:add_ui_from_resource()
---
--- Parses a resource file containing a [UI definition][XML-UI] and
--- merges it with the current contents of `manager`.
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager` object
---@param resource_path string # the resource path of the file to parse
---@return integer # The merge id for the merged UI. The merge id can be used to unmerge the UI with `gtk_ui_manager_remove_ui()`. If an error occurred, the return value is 0.
function Gtk.UIManager:add_ui_from_resource(resource_path) end

--- # method Gtk.UIManager:add_ui_from_string()
---
--- Parses a string containing a [UI definition][XML-UI] and merges it with
--- the current contents of `manager`. An enclosing `<ui>` element is added if
--- it is missing.
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager` object
---@param buffer string # the string to parse
---@param length integer # the length of `buffer` (may be -1 if `buffer` is nul-terminated)
---@return integer # The merge id for the merged UI. The merge id can be used to unmerge the UI with `gtk_ui_manager_remove_ui()`. If an error occurred, the return value is 0.
function Gtk.UIManager:add_ui_from_string(buffer, length) end

--- # method Gtk.UIManager:ensure_update()
---
--- Makes sure that all pending updates to the UI have been completed.
--- 
--- This may occasionally be necessary, since `GtkUIManager` updates the
--- UI in an idle function. A typical example where this function is
--- useful is to enforce that the menubar and toolbar have been added to
--- the main window before showing it:
--- ```c
--- gtk_container_add (GTK_CONTAINER (window), vbox);
--- g_signal_connect (merge, "add-widget",
---                   G_CALLBACK (add_widget), vbox);
--- gtk_ui_manager_add_ui_from_file (merge, "my-menus");
--- gtk_ui_manager_add_ui_from_file (merge, "my-toolbars");
--- gtk_ui_manager_ensure_update (merge);
--- gtk_widget_show (window);
--- ```
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager`
---@return nil
function Gtk.UIManager:ensure_update() end

--- # method Gtk.UIManager:get_accel_group()
---
--- Returns the `GtkAccelGroup` associated with `manager`.
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager` object
---@return Gtk.AccelGroup # the `GtkAccelGroup`.
function Gtk.UIManager:get_accel_group() end

--- # method Gtk.UIManager:get_action()
---
--- Looks up an action by following a path. See `gtk_ui_manager_get_widget()`
--- for more information about paths.
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager`
---@param path string # a path
---@return Gtk.Action # the action whose proxy widget is found by following the path, or `nil` if no widget was found.
function Gtk.UIManager:get_action(path) end

--- # method Gtk.UIManager:get_action_groups()
---
--- Returns the list of action groups associated with `manager`.
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager` object
---@return Gtk.ActionGroup[] # a `GList` of action groups. The list is owned by GTK+ and should not be modified.
function Gtk.UIManager:get_action_groups() end

--- # method Gtk.UIManager:get_add_tearoffs()
---
--- Returns whether menus generated by this `GtkUIManager`
--- will have tearoff menu items.
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager`
---@return (boolean|nil) # whether tearoff menu items are added
function Gtk.UIManager:get_add_tearoffs() end

--- # method Gtk.UIManager:get_toplevels()
---
--- Obtains a list of all toplevel widgets of the requested types.
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager`
---@param types Gtk.UIManagerItemType # specifies the types of toplevel widgets to include. Allowed types are `GTK_UI_MANAGER_MENUBAR`, `GTK_UI_MANAGER_TOOLBAR` and `GTK_UI_MANAGER_POPUP`.
---@return Gtk.Widget[] # a newly-allocated `GSList` of all toplevel widgets of the requested types. Free the returned list with `g_slist_free()`.
function Gtk.UIManager:get_toplevels(types) end

--- # method Gtk.UIManager:get_ui()
---
--- Creates a [UI definition][XML-UI] of the merged UI.
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager`
---@return string # A newly allocated string containing an XML representation of the merged UI.
function Gtk.UIManager:get_ui() end

--- # method Gtk.UIManager:get_widget()
---
--- Looks up a widget by following a path.
--- The path consists of the names specified in the XML description of the UI.
--- separated by “/”. Elements which don’t have a name or action attribute in
--- the XML (e.g. `<popup>`) can be addressed by their XML element name
--- (e.g. "popup"). The root element ("/ui") can be omitted in the path.
--- 
--- Note that the widget found by following a path that ends in a `<menu>`;
--- element is the menuitem to which the menu is attached, not the menu it
--- manages.
--- 
--- Also note that the widgets constructed by a ui manager are not tied to
--- the lifecycle of the ui manager. If you add the widgets returned by this
--- function to some container or explicitly ref them, they will survive the
--- destruction of the ui manager.
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager`
---@param path string # a path
---@return Gtk.Widget # the widget found by following the path, or `nil` if no widget was found
function Gtk.UIManager:get_widget(path) end

--- # method Gtk.UIManager:insert_action_group()
---
--- Inserts an action group into the list of action groups associated
--- with `manager`. Actions in earlier groups hide actions with the same
--- name in later groups.
--- 
--- If `pos` is larger than the number of action groups in `manager`, or
--- negative, `action_group` will be inserted at the end of the internal
--- list.
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager` object
---@param action_group Gtk.ActionGroup # the action group to be inserted
---@param pos integer # the position at which the group will be inserted.
---@return nil
function Gtk.UIManager:insert_action_group(action_group, pos) end

--- # method Gtk.UIManager:new_merge_id()
---
--- Returns an unused merge id, suitable for use with
--- `gtk_ui_manager_add_ui()`.
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager`
---@return integer # an unused merge id.
function Gtk.UIManager:new_merge_id() end

--- # method Gtk.UIManager:remove_action_group()
---
--- Removes an action group from the list of action groups associated
--- with `manager`.
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager` object
---@param action_group Gtk.ActionGroup # the action group to be removed
---@return nil
function Gtk.UIManager:remove_action_group(action_group) end

--- # method Gtk.UIManager:remove_ui()
---
--- Unmerges the part of `manager`'s content identified by `merge_id`.
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager` object
---@param merge_id integer # a merge id as returned by `gtk_ui_manager_add_ui_from_string()`
---@return nil
function Gtk.UIManager:remove_ui(merge_id) end

--- # method Gtk.UIManager:set_add_tearoffs()
---
--- Sets the “add_tearoffs” property, which controls whether menus
--- generated by this `GtkUIManager` will have tearoff menu items.
--- 
--- Note that this only affects regular menus. Generated popup
--- menus never have tearoff menu items.
---
--- ---
---
---@param self Gtk.UIManager # a `GtkUIManager`
---@param add_tearoffs (boolean|nil) # whether tearoff menu items are added
---@return nil
function Gtk.UIManager:set_add_tearoffs(add_tearoffs) end

--- # function Gtk.UIManager.new()
---
--- Creates a new ui manager object.
---
--- ---
---
---@return Gtk.UIManager # a new ui manager object.
function Gtk.UIManager.new() end

--- # record Gtk.UIManagerClass
---
---@class Gtk.UIManagerClass
---@field parent_class GObject.ObjectClass
---@field add_widget fun(manager: Gtk.UIManager, widget: Gtk.Widget): nil
---@field actions_changed fun(manager: Gtk.UIManager): nil
---@field connect_proxy fun(manager: Gtk.UIManager, action: Gtk.Action, proxy: Gtk.Widget): nil
---@field disconnect_proxy fun(manager: Gtk.UIManager, action: Gtk.Action, proxy: Gtk.Widget): nil
---@field pre_activate fun(manager: Gtk.UIManager, action: Gtk.Action): nil
---@field post_activate fun(manager: Gtk.UIManager, action: Gtk.Action): nil
---@field get_widget fun(manager: Gtk.UIManager, path: string): Gtk.Widget
---@field get_action fun(manager: Gtk.UIManager, path: string): Gtk.Action
Gtk.UIManagerClass = {}

---@enum Gtk.UIManagerItemType
Gtk.UIManagerItemType = {}

--- # record Gtk.UIManagerPrivate
---
---@class Gtk.UIManagerPrivate
Gtk.UIManagerPrivate = {}

---@enum Gtk.Unit
Gtk.Unit = {}

--- # class Gtk.VBox
---
--- A `GtkVBox` is a container that organizes child widgets into a single column.
--- 
--- Use the `GtkBox` packing interface to determine the arrangement,
--- spacing, height, and alignment of `GtkVBox` children.
--- 
--- All children are allocated the same width.
--- 
--- GtkVBox has been deprecated. You can use `GtkBox` with a `GtkOrientable`:orientation
--- set to %GTK_ORIENTATION_VERTICAL instead when calling `gtk_box_new()`,
--- which is a very quick and easy change.
--- 
--- If you have derived your own classes from GtkVBox, you can change the
--- inheritance to derive directly from `GtkBox`, and set the `GtkOrientable`:orientation
--- property to %GTK_ORIENTATION_VERTICAL in your instance init function,
--- with a call like:
--- 
--- ```c
---   gtk_orientable_set_orientation (GTK_ORIENTABLE (object),
---                                   GTK_ORIENTATION_VERTICAL);
--- ```
--- 
--- If you have a grid-like layout composed of nested boxes, and you don’t
--- need first-child or last-child styling, the recommendation is to switch
--- to `GtkGrid`. For more information about migrating to `GtkGrid`, see
--- [Migrating from other containers to GtkGrid][gtk-migrating-GtkGrid].
---
--- ---
---
---@class Gtk.VBox : Gtk.Box, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field box Gtk.Box
---@operator call: Gtk.VBox
Gtk.VBox = {}

--- # function Gtk.VBox.new()
---
--- Creates a new `GtkVBox`.
---
--- ---
---
---@param homogeneous (boolean|nil) # `true` if all children are to be given equal space allotments.
---@param spacing integer # the number of pixels to place by default between children.
---@return Gtk.Widget # a new `GtkVBox`.
function Gtk.VBox.new(homogeneous, spacing) end

--- # record Gtk.VBoxClass
---
---@class Gtk.VBoxClass
---@field parent_class Gtk.BoxClass
Gtk.VBoxClass = {}

--- # class Gtk.VButtonBox
---
---@class Gtk.VButtonBox : Gtk.ButtonBox, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field button_box Gtk.ButtonBox
---@operator call: Gtk.VButtonBox
Gtk.VButtonBox = {}

--- # function Gtk.VButtonBox.new()
---
--- Creates a new vertical button box.
---
--- ---
---
---@return Gtk.Widget # a new button box `GtkWidget`.
function Gtk.VButtonBox.new() end

--- # record Gtk.VButtonBoxClass
---
---@class Gtk.VButtonBoxClass
---@field parent_class Gtk.ButtonBoxClass
Gtk.VButtonBoxClass = {}

--- # class Gtk.VPaned
---
--- The VPaned widget is a container widget with two
--- children arranged vertically. The division between
--- the two panes is adjustable by the user by dragging
--- a handle. See `GtkPaned` for details.
--- 
--- GtkVPaned has been deprecated, use `GtkPaned` instead.
---
--- ---
---
---@class Gtk.VPaned : Gtk.Paned, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field paned Gtk.Paned
---@operator call: Gtk.VPaned
Gtk.VPaned = {}

--- # function Gtk.VPaned.new()
---
--- Create a new `GtkVPaned`
---
--- ---
---
---@return Gtk.Widget # the new `GtkVPaned`
function Gtk.VPaned.new() end

--- # record Gtk.VPanedClass
---
---@class Gtk.VPanedClass
---@field parent_class Gtk.PanedClass
Gtk.VPanedClass = {}

--- # class Gtk.VScale
---
--- The `GtkVScale` widget is used to allow the user to select a value using
--- a vertical slider. To create one, use `gtk_hscale_new_with_range()`.
--- 
--- The position to show the current value, and the number of decimal places
--- shown can be set using the parent `GtkScale` class’s functions.
--- 
--- GtkVScale has been deprecated, use `GtkScale` instead.
---
--- ---
---
---@class Gtk.VScale : Gtk.Scale, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field scale Gtk.Scale
---@operator call: Gtk.VScale
Gtk.VScale = {}

--- # function Gtk.VScale.new()
---
--- Creates a new `GtkVScale`.
---
--- ---
---
---@param adjustment Gtk.Adjustment # the `GtkAdjustment` which sets the range of the scale.
---@return Gtk.Widget # a new `GtkVScale`.
function Gtk.VScale.new(adjustment) end

--- # function Gtk.VScale.new_with_range()
---
--- Creates a new vertical scale widget that lets the user input a
--- number between `min` and `max` (including `min` and `max`) with the
--- increment `step`.  `step` must be nonzero; it’s the distance the
--- slider moves when using the arrow keys to adjust the scale value.
--- 
--- Note that the way in which the precision is derived works best if `step`
--- is a power of ten. If the resulting precision is not suitable for your
--- needs, use `gtk_scale_set_digits()` to correct it.
---
--- ---
---
---@param min number # minimum value
---@param max number # maximum value
---@param step number # step increment (tick size) used with keyboard shortcuts
---@return Gtk.Widget # a new `GtkVScale`
function Gtk.VScale.new_with_range(min, max, step) end

--- # record Gtk.VScaleClass
---
---@class Gtk.VScaleClass
---@field parent_class Gtk.ScaleClass
Gtk.VScaleClass = {}

--- # class Gtk.VScrollbar
---
--- The `GtkVScrollbar` widget is a widget arranged vertically creating a
--- scrollbar. See `GtkScrollbar` for details on
--- scrollbars. `GtkAdjustment` pointers may be added to handle the
--- adjustment of the scrollbar or it may be left `nil` in which case one
--- will be created for you. See `GtkScrollbar` for a description of what the
--- fields in an adjustment represent for a scrollbar.
--- 
--- GtkVScrollbar has been deprecated, use `GtkScrollbar` instead.
---
--- ---
---
---@class Gtk.VScrollbar : Gtk.Scrollbar, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field scrollbar Gtk.Scrollbar
---@operator call: Gtk.VScrollbar
Gtk.VScrollbar = {}

--- # function Gtk.VScrollbar.new()
---
--- Creates a new vertical scrollbar.
---
--- ---
---
---@param adjustment? Gtk.Adjustment # the `GtkAdjustment` to use, or `nil` to create a new adjustment
---@return Gtk.Widget # the new `GtkVScrollbar`
function Gtk.VScrollbar.new(adjustment) end

--- # record Gtk.VScrollbarClass
---
---@class Gtk.VScrollbarClass
---@field parent_class Gtk.ScrollbarClass
Gtk.VScrollbarClass = {}

--- # class Gtk.VSeparator
---
--- The `GtkVSeparator` widget is a vertical separator, used to group the
--- widgets within a window. It displays a vertical line with a shadow to
--- make it appear sunken into the interface.
--- 
--- GtkVSeparator has been deprecated, use `GtkSeparator` instead.
---
--- ---
---
---@class Gtk.VSeparator : Gtk.Separator, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable
---@field separator Gtk.Separator
---@operator call: Gtk.VSeparator
Gtk.VSeparator = {}

--- # function Gtk.VSeparator.new()
---
--- Creates a new `GtkVSeparator`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkVSeparator`.
function Gtk.VSeparator.new() end

--- # record Gtk.VSeparatorClass
---
---@class Gtk.VSeparatorClass
---@field parent_class Gtk.SeparatorClass
Gtk.VSeparatorClass = {}

--- # class Gtk.Viewport
---
--- The `GtkViewport` widget acts as an adaptor class, implementing
--- scrollability for child widgets that lack their own scrolling
--- capabilities. Use GtkViewport to scroll child widgets such as
--- `GtkGrid`, `GtkBox`, and so on.
--- 
--- If a widget has native scrolling abilities, such as `GtkTextView`,
--- `GtkTreeView` or `GtkIconView`, it can be added to a `GtkScrolledWindow`
--- with `gtk_container_add()`. If a widget does not, you must first add the
--- widget to a `GtkViewport`, then add the viewport to the scrolled window.
--- `gtk_container_add()` does this automatically if a child that does not
--- implement `GtkScrollable` is added to a `GtkScrolledWindow`, so you can
--- ignore the presence of the viewport.
--- 
--- The GtkViewport will start scrolling content only if allocated less
--- than the child widget’s minimum size in a given orientation.
--- 
--- # CSS nodes
--- 
--- GtkViewport has a single CSS node with name viewport.
---
--- ---
---
---@class Gtk.Viewport : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Buildable, Gtk.Scrollable
---@field bin Gtk.Bin
---@field priv Gtk.ViewportPrivate
---@operator call: Gtk.Viewport
Gtk.Viewport = {}

--- # method Gtk.Viewport:get_bin_window()
---
--- Gets the bin window of the `GtkViewport`.
---
--- ---
---
---@param self Gtk.Viewport # a `GtkViewport`
---@return Gdk.Window # a `GdkWindow`
function Gtk.Viewport:get_bin_window() end

--- # method Gtk.Viewport:get_hadjustment()
---
--- Returns the horizontal adjustment of the viewport.
---
--- ---
---
---@param self Gtk.Viewport # a `GtkViewport`.
---@return Gtk.Adjustment # the horizontal adjustment of `viewport`.
function Gtk.Viewport:get_hadjustment() end

--- # method Gtk.Viewport:get_shadow_type()
---
--- Gets the shadow type of the `GtkViewport`. See
--- `gtk_viewport_set_shadow_type()`.
---
--- ---
---
---@param self Gtk.Viewport # a `GtkViewport`
---@return Gtk.ShadowType # the shadow type
function Gtk.Viewport:get_shadow_type() end

--- # method Gtk.Viewport:get_vadjustment()
---
--- Returns the vertical adjustment of the viewport.
---
--- ---
---
---@param self Gtk.Viewport # a `GtkViewport`.
---@return Gtk.Adjustment # the vertical adjustment of `viewport`.
function Gtk.Viewport:get_vadjustment() end

--- # method Gtk.Viewport:get_view_window()
---
--- Gets the view window of the `GtkViewport`.
---
--- ---
---
---@param self Gtk.Viewport # a `GtkViewport`
---@return Gdk.Window # a `GdkWindow`
function Gtk.Viewport:get_view_window() end

--- # method Gtk.Viewport:set_hadjustment()
---
--- Sets the horizontal adjustment of the viewport.
---
--- ---
---
---@param self Gtk.Viewport # a `GtkViewport`.
---@param adjustment? Gtk.Adjustment # a `GtkAdjustment`.
---@return nil
function Gtk.Viewport:set_hadjustment(adjustment) end

--- # method Gtk.Viewport:set_shadow_type()
---
--- Sets the shadow type of the viewport.
---
--- ---
---
---@param self Gtk.Viewport # a `GtkViewport`.
---@param type Gtk.ShadowType # the new shadow type.
---@return nil
function Gtk.Viewport:set_shadow_type(type) end

--- # method Gtk.Viewport:set_vadjustment()
---
--- Sets the vertical adjustment of the viewport.
---
--- ---
---
---@param self Gtk.Viewport # a `GtkViewport`.
---@param adjustment? Gtk.Adjustment # a `GtkAdjustment`.
---@return nil
function Gtk.Viewport:set_vadjustment(adjustment) end

--- # function Gtk.Viewport.new()
---
--- Creates a new `GtkViewport` with the given adjustments, or with default
--- adjustments if none are given.
---
--- ---
---
---@param hadjustment? Gtk.Adjustment # horizontal adjustment
---@param vadjustment? Gtk.Adjustment # vertical adjustment
---@return Gtk.Widget # a new `GtkViewport`
function Gtk.Viewport.new(hadjustment, vadjustment) end

--- # record Gtk.ViewportClass
---
---@class Gtk.ViewportClass
---@field parent_class Gtk.BinClass # The parent class.
Gtk.ViewportClass = {}

--- # record Gtk.ViewportPrivate
---
---@class Gtk.ViewportPrivate
Gtk.ViewportPrivate = {}

--- # class Gtk.VolumeButton
---
--- `GtkVolumeButton` is a subclass of `GtkScaleButton` that has
--- been tailored for use as a volume control widget with suitable
--- icons, tooltips and accessible labels.
---
--- ---
---
---@class Gtk.VolumeButton : Gtk.ScaleButton, Gtk.Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable, Gtk.Orientable
---@field parent Gtk.ScaleButton
---@operator call: Gtk.VolumeButton
Gtk.VolumeButton = {}

--- # function Gtk.VolumeButton.new()
---
--- Creates a `GtkVolumeButton`, with a range between 0.0 and 1.0, with
--- a stepping of 0.02. Volume values can be obtained and modified using
--- the functions from `GtkScaleButton`.
---
--- ---
---
---@return Gtk.Widget # a new `GtkVolumeButton`
function Gtk.VolumeButton.new() end

--- # record Gtk.VolumeButtonClass
---
---@class Gtk.VolumeButtonClass
---@field parent_class Gtk.ScaleButtonClass
Gtk.VolumeButtonClass = {}

--- # class Gtk.Widget
---
--- GtkWidget is the base class all widgets in GTK+ derive from. It manages the
--- widget lifecycle, states and style.
--- 
--- # Height-for-width Geometry Management # {`geometry`-management}
--- 
--- GTK+ uses a height-for-width (and width-for-height) geometry management
--- system. Height-for-width means that a widget can change how much
--- vertical space it needs, depending on the amount of horizontal space
--- that it is given (and similar for width-for-height). The most common
--- example is a label that reflows to fill up the available width, wraps
--- to fewer lines, and therefore needs less height.
--- 
--- Height-for-width geometry management is implemented in GTK+ by way
--- of five virtual methods:
--- 
--- - `GtkWidgetClass`.`get_request_mode()`
--- - `GtkWidgetClass`.`get_preferred_width()`
--- - `GtkWidgetClass`.`get_preferred_height()`
--- - `GtkWidgetClass`.`get_preferred_height_for_width()`
--- - `GtkWidgetClass`.`get_preferred_width_for_height()`
--- - `GtkWidgetClass`.`get_preferred_height_and_baseline_for_width()`
--- 
--- There are some important things to keep in mind when implementing
--- height-for-width and when using it in container implementations.
--- 
--- The geometry management system will query a widget hierarchy in
--- only one orientation at a time. When widgets are initially queried
--- for their minimum sizes it is generally done in two initial passes
--- in the `GtkSizeRequestMode` chosen by the toplevel.
--- 
--- For example, when queried in the normal
--- %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH mode:
--- First, the default minimum and natural width for each widget
--- in the interface will be computed using `gtk_widget_get_preferred_width()`.
--- Because the preferred widths for each container depend on the preferred
--- widths of their children, this information propagates up the hierarchy,
--- and finally a minimum and natural width is determined for the entire
--- toplevel. Next, the toplevel will use the minimum width to query for the
--- minimum height contextual to that width using
--- `gtk_widget_get_preferred_height_for_width()`, which will also be a highly
--- recursive operation. The minimum height for the minimum width is normally
--- used to set the minimum size constraint on the toplevel
--- (unless `gtk_window_set_geometry_hints()` is explicitly used instead).
--- 
--- After the toplevel window has initially requested its size in both
--- dimensions it can go on to allocate itself a reasonable size (or a size
--- previously specified with `gtk_window_set_default_size()`). During the
--- recursive allocation process it’s important to note that request cycles
--- will be recursively executed while container widgets allocate their children.
--- Each container widget, once allocated a size, will go on to first share the
--- space in one orientation among its children and then request each child's
--- height for its target allocated width or its width for allocated height,
--- depending. In this way a `GtkWidget` will typically be requested its size
--- a number of times before actually being allocated a size. The size a
--- widget is finally allocated can of course differ from the size it has
--- requested. For this reason, `GtkWidget` caches a  small number of results
--- to avoid re-querying for the same sizes in one allocation cycle.
--- 
--- See
--- [GtkContainer’s geometry management section][container-geometry-management]
--- to learn more about how height-for-width allocations are performed
--- by container widgets.
--- 
--- If a widget does move content around to intelligently use up the
--- allocated size then it must support the request in both
--- `GtkSizeRequestModes` even if the widget in question only
--- trades sizes in a single orientation.
--- 
--- For instance, a `GtkLabel` that does height-for-width word wrapping
--- will not expect to have `GtkWidgetClass`.`get_preferred_height()` called
--- because that call is specific to a width-for-height request. In this
--- case the label must return the height required for its own minimum
--- possible width. By following this rule any widget that handles
--- height-for-width or width-for-height requests will always be allocated
--- at least enough space to fit its own content.
--- 
--- Here are some examples of how a %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH widget
--- generally deals with width-for-height requests, for `GtkWidgetClass`.`get_preferred_height()`
--- it will do:
--- 
--- ```c
--- static void
--- foo_widget_get_preferred_height (GtkWidget *widget,
---                                  gint *min_height,
---                                  gint *nat_height)
--- {
---    if (i_am_in_height_for_width_mode)
---      {
---        gint min_width, nat_width;
--- 
---        GTK_WIDGET_GET_CLASS (widget)->get_preferred_width (widget,
---                                                            &min_width,
---                                                            &nat_width);
---        GTK_WIDGET_GET_CLASS (widget)->get_preferred_height_for_width
---                                                           (widget,
---                                                            min_width,
---                                                            min_height,
---                                                            nat_height);
---      }
---    else
---      {
---         ... some widgets do both. For instance, if a GtkLabel is
---         rotated to 90 degrees it will return the minimum and
---         natural height for the rotated label here.
---      }
--- }
--- ```
--- 
--- And in `GtkWidgetClass`.`get_preferred_width_for_height()` it will simply return
--- the minimum and natural width:
--- ```c
--- static void
--- foo_widget_get_preferred_width_for_height (GtkWidget *widget,
---                                            gint for_height,
---                                            gint *min_width,
---                                            gint *nat_width)
--- {
---    if (i_am_in_height_for_width_mode)
---      {
---        GTK_WIDGET_GET_CLASS (widget)->get_preferred_width (widget,
---                                                            min_width,
---                                                            nat_width);
---      }
---    else
---      {
---         ... again if a widget is sometimes operating in
---         width-for-height mode (like a rotated GtkLabel) it can go
---         ahead and do its real width for height calculation here.
---      }
--- }
--- ```
--- 
--- Often a widget needs to get its own request during size request or
--- allocation. For example, when computing height it may need to also
--- compute width. Or when deciding how to use an allocation, the widget
--- may need to know its natural size. In these cases, the widget should
--- be careful to call its virtual methods directly, like this:
--- 
--- ```c
--- GTK_WIDGET_GET_CLASS(widget)->get_preferred_width (widget,
---                                                    &min,
---                                                    &natural);
--- ```
--- 
--- It will not work to use the wrapper functions, such as
--- `gtk_widget_get_preferred_width()` inside your own size request
--- implementation. These return a request adjusted by `GtkSizeGroup`
--- and by the `GtkWidgetClass`.`adjust_size_request()` virtual method. If a
--- widget used the wrappers inside its virtual method implementations,
--- then the adjustments (such as widget margins) would be applied
--- twice. GTK+ therefore does not allow this and will warn if you try
--- to do it.
--- 
--- Of course if you are getting the size request for
--- another widget, such as a child of a
--- container, you must use the wrapper APIs.
--- Otherwise, you would not properly consider widget margins,
--- `GtkSizeGroup`, and so forth.
--- 
--- Since 3.10 GTK+ also supports baseline vertical alignment of widgets. This
--- means that widgets are positioned such that the typographical baseline of
--- widgets in the same row are aligned. This happens if a widget supports baselines,
--- has a vertical alignment of %GTK_ALIGN_BASELINE, and is inside a container
--- that supports baselines and has a natural “row” that it aligns to the baseline,
--- or a baseline assigned to it by the grandparent.
--- 
--- Baseline alignment support for a widget is done by the `GtkWidgetClass`.`get_preferred_height_and_baseline_for_width()`
--- virtual function. It allows you to report a baseline in combination with the
--- minimum and natural height. If there is no baseline you can return -1 to indicate
--- this. The default implementation of this virtual function calls into the
--- `GtkWidgetClass`.`get_preferred_height()` and `GtkWidgetClass`.`get_preferred_height_for_width()`,
--- so if baselines are not supported it doesn’t need to be implemented.
--- 
--- If a widget ends up baseline aligned it will be allocated all the space in the parent
--- as if it was %GTK_ALIGN_FILL, but the selected baseline can be found via `gtk_widget_get_allocated_baseline()`.
--- If this has a value other than -1 you need to align the widget such that the baseline
--- appears at the position.
--- 
--- # Style Properties
--- 
--- `GtkWidget` introduces “style
--- properties” - these are basically object properties that are stored
--- not on the object, but in the style object associated to the widget. Style
--- properties are set in [resource files][gtk3-Resource-Files].
--- This mechanism is used for configuring such things as the location of the
--- scrollbar arrows through the theme, giving theme authors more control over the
--- look of applications without the need to write a theme engine in C.
--- 
--- Use `gtk_widget_class_install_style_property()` to install style properties for
--- a widget class, `gtk_widget_class_find_style_property()` or
--- `gtk_widget_class_list_style_properties()` to get information about existing
--- style properties and `gtk_widget_style_get_property()`, `gtk_widget_style_get()` or
--- `gtk_widget_style_get_valist()` to obtain the value of a style property.
--- 
--- # GtkWidget as GtkBuildable
--- 
--- The GtkWidget implementation of the GtkBuildable interface supports a
--- custom `<accelerator>` element, which has attributes named ”key”, ”modifiers”
--- and ”signal” and allows to specify accelerators.
--- 
--- An example of a UI definition fragment specifying an accelerator:
--- 
--- ```xml
--- <object class="GtkButton">
---   <accelerator key="q" modifiers="GDK_CONTROL_MASK" signal="clicked"/>
--- </object>
--- ```
--- 
--- In addition to accelerators, GtkWidget also support a custom `<accessible>`
--- element, which supports actions and relations. Properties on the accessible
--- implementation of an object can be set by accessing the internal child
--- “accessible” of a `GtkWidget`.
--- 
--- An example of a UI definition fragment specifying an accessible:
--- 
--- ```xml
--- <object class="GtkLabel" id="label1"/>
---   <property name="label">I am a Label for a Button</property>
--- </object>
--- <object class="GtkButton" id="button1">
---   <accessibility>
---     <action action_name="click" translatable="yes">Click the button.</action>
---     <relation target="label1" type="labelled-by"/>
---   </accessibility>
---   <child internal-child="accessible">
---     <object class="AtkObject" id="a11y-button1">
---       <property name="accessible-name">Clickable Button</property>
---     </object>
---   </child>
--- </object>
--- ```
--- 
--- Finally, GtkWidget allows style information such as style classes to
--- be associated with widgets, using the custom `<style>` element:
--- 
--- ```xml
--- <object class="GtkButton" id="button1">
---   <style>
---     <class name="my-special-button-class"/>
---     <class name="dark-button"/>
---   </style>
--- </object>
--- ```
--- 
--- # Building composite widgets from template XML ## {`composite`-templates}
--- 
--- GtkWidget exposes some facilities to automate the procedure
--- of creating composite widgets using `GtkBuilder` interface description
--- language.
--- 
--- To create composite widgets with `GtkBuilder` XML, one must associate
--- the interface description with the widget class at class initialization
--- time using `gtk_widget_class_set_template()`.
--- 
--- The interface description semantics expected in composite template descriptions
--- is slightly different from regular `GtkBuilder` XML.
--- 
--- Unlike regular interface descriptions, `gtk_widget_class_set_template()` will
--- expect a `<template>` tag as a direct child of the toplevel `<interface>`
--- tag. The `<template>` tag must specify the “class” attribute which must be
--- the type name of the widget. Optionally, the “parent” attribute may be
--- specified to specify the direct parent type of the widget type, this is
--- ignored by the GtkBuilder but required for Glade to introspect what kind
--- of properties and internal children exist for a given type when the actual
--- type does not exist.
--- 
--- The XML which is contained inside the `<template>` tag behaves as if it were
--- added to the `<object>` tag defining "widget" itself. You may set properties
--- on `widget` by inserting `<property>` tags into the `<template>` tag, and also
--- add `<child>` tags to add children and extend "widget" in the normal way you
--- would with `<object>` tags.
--- 
--- Additionally, `<object>` tags can also be added before and after the initial
--- `<template>` tag in the normal way, allowing one to define auxiliary objects
--- which might be referenced by other widgets declared as children of the
--- `<template>` tag.
--- 
--- An example of a GtkBuilder Template Definition:
--- 
--- ```xml
--- <interface>
---   <template class="FooWidget" parent="GtkBox">
---     <property name="orientation">GTK_ORIENTATION_HORIZONTAL</property>
---     <property name="spacing">4</property>
---     <child>
---       <object class="GtkButton" id="hello_button">
---         <property name="label">Hello World</property>
---         <signal name="clicked" handler="hello_button_clicked" object="FooWidget" swapped="yes"/>
---       </object>
---     </child>
---     <child>
---       <object class="GtkButton" id="goodbye_button">
---         <property name="label">Goodbye World</property>
---       </object>
---     </child>
---   </template>
--- </interface>
--- ```
--- 
--- Typically, you'll place the template fragment into a file that is
--- bundled with your project, using `GResource`. In order to load the
--- template, you need to call `gtk_widget_class_set_template_from_resource()`
--- from the class initialization of your `GtkWidget` type:
--- 
--- ```c
--- static void
--- foo_widget_class_init (FooWidgetClass *klass)
--- {
---   // ...
--- 
---   gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
---                                                "/com/example/ui/foowidget.ui");
--- }
--- ```
--- 
--- You will also need to call `gtk_widget_init_template()` from the instance
--- initialization function:
--- 
--- ```c
--- static void
--- foo_widget_init (FooWidget *self)
--- {
---   // ...
---   gtk_widget_init_template (GTK_WIDGET (self));
--- }
--- ```
--- 
--- You can access widgets defined in the template using the
--- `gtk_widget_get_template_child()` function, but you will typically declare
--- a pointer in the instance private data structure of your type using the same
--- name as the widget in the template definition, and call
--- `gtk_widget_class_bind_template_child_private()` with that name, e.g.
--- 
--- ```c
--- typedef struct {
---   GtkWidget *hello_button;
---   GtkWidget *goodbye_button;
--- } FooWidgetPrivate;
--- 
--- G_DEFINE_TYPE_WITH_PRIVATE (FooWidget, foo_widget, GTK_TYPE_BOX)
--- 
--- static void
--- foo_widget_class_init (FooWidgetClass *klass)
--- {
---   // ...
---   gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
---                                                "/com/example/ui/foowidget.ui");
---   gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass),
---                                                 FooWidget, hello_button);
---   gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass),
---                                                 FooWidget, goodbye_button);
--- }
--- 
--- static void
--- foo_widget_init (FooWidget *widget)
--- {
--- 
--- }
--- ```
--- 
--- You can also use `gtk_widget_class_bind_template_callback()` to connect a signal
--- callback defined in the template with a function visible in the scope of the
--- class, e.g.
--- 
--- ```c
--- // the signal handler has the instance and user data swapped
--- // because of the swapped="yes" attribute in the template XML
--- static void
--- hello_button_clicked (FooWidget *self,
---                       GtkButton *button)
--- {
---   g_print ("Hello, world!\n");
--- }
--- 
--- static void
--- foo_widget_class_init (FooWidgetClass *klass)
--- {
---   // ...
---   gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
---                                                "/com/example/ui/foowidget.ui");
---   gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), hello_button_clicked);
--- }
--- ```
---
--- ---
---
---@class Gtk.Widget : GObject.InitiallyUnowned, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field parent_instance GObject.InitiallyUnowned
---@field priv Gtk.WidgetPrivate
Gtk.Widget = {}

--- # method Gtk.Widget:activate()
---
--- For widgets that can be “activated” (buttons, menu items, etc.)
--- this function activates them. Activation is what happens when you
--- press Enter on a widget during key navigation. If `widget` isn't
--- activatable, the function returns `false`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` that’s activatable
---@return (boolean|nil) # `true` if the widget was activatable
function Gtk.Widget:activate() end

--- # method Gtk.Widget:add_accelerator()
---
--- Installs an accelerator for this `widget` in `accel_group` that causes
--- `accel_signal` to be emitted if the accelerator is activated.
--- The `accel_group` needs to be added to the widget’s toplevel via
--- `gtk_window_add_accel_group()`, and the signal must be of type %G_SIGNAL_ACTION.
--- Accelerators added through this function are not user changeable during
--- runtime. If you want to support accelerators that can be changed by the
--- user, use `gtk_accel_map_add_entry()` and `gtk_widget_set_accel_path()` or
--- `gtk_menu_item_set_accel_path()` instead.
---
--- ---
---
---@param self Gtk.Widget # widget to install an accelerator on
---@param accel_signal string # widget signal to emit on accelerator activation
---@param accel_group Gtk.AccelGroup # accel group for this widget, added to its toplevel
---@param accel_key integer # GDK keyval of the accelerator
---@param accel_mods Gdk.ModifierType # modifier key combination of the accelerator
---@param accel_flags Gtk.AccelFlags # flag accelerators, e.g. %GTK_ACCEL_VISIBLE
---@return nil
function Gtk.Widget:add_accelerator(accel_signal, accel_group, accel_key, accel_mods, accel_flags) end

--- # method Gtk.Widget:add_device_events()
---
--- Adds the device events in the bitfield `events` to the event mask for
--- `widget`. See `gtk_widget_set_device_events()` for details.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param device Gdk.Device # a `GdkDevice`
---@param events Gdk.EventMask # an event mask, see `GdkEventMask`
---@return nil
function Gtk.Widget:add_device_events(device, events) end

--- # method Gtk.Widget:add_events()
---
--- Adds the events in the bitfield `events` to the event mask for
--- `widget`. See `gtk_widget_set_events()` and the
--- [input handling overview][event-masks] for details.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param events integer # an event mask, see `GdkEventMask`
---@return nil
function Gtk.Widget:add_events(events) end

--- # method Gtk.Widget:add_mnemonic_label()
---
--- Adds a widget to the list of mnemonic labels for
--- this widget. (See `gtk_widget_list_mnemonic_labels()`). Note the
--- list of mnemonic labels for the widget is cleared when the
--- widget is destroyed, so the caller must make sure to update
--- its internal state at this point as well, by using a connection
--- to the `GtkWidget`::destroy signal or a weak notifier.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param label Gtk.Widget # a `GtkWidget` that acts as a mnemonic label for `widget`
---@return nil
function Gtk.Widget:add_mnemonic_label(label) end

--- # method Gtk.Widget:add_tick_callback()
---
--- Queues an animation frame update and adds a callback to be called
--- before each frame. Until the tick callback is removed, it will be
--- called frequently (usually at the frame rate of the output device
--- or as quickly as the application can be repainted, whichever is
--- slower). For this reason, is most suitable for handling graphics
--- that change every frame or every few frames. The tick callback does
--- not automatically imply a relayout or repaint. If you want a
--- repaint or relayout, and aren’t changing widget properties that
--- would trigger that (for example, changing the text of a `GtkLabel`),
--- then you will have to call `gtk_widget_queue_resize()` or
--- `gtk_widget_queue_draw_area()` yourself.
--- 
--- `gdk_frame_clock_get_frame_time()` should generally be used for timing
--- continuous animations and
--- `gdk_frame_timings_get_predicted_presentation_time()` if you are
--- trying to display isolated frames at particular times.
--- 
--- This is a more convenient alternative to connecting directly to the
--- `GdkFrameClock`::update signal of `GdkFrameClock`, since you don't
--- have to worry about when a `GdkFrameClock` is assigned to a widget.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param callback Gtk.TickCallback # function to call for updating animations
---@param user_data? userdata # data to pass to `callback`
---@param notify GLib.DestroyNotify # function to call to free `user_data` when the callback is removed.
---@return integer # an id for the connection of this callback. Remove the callback by passing it to `gtk_widget_remove_tick_callback()`
function Gtk.Widget:add_tick_callback(callback, user_data, notify) end

--- # method Gtk.Widget:can_activate_accel()
---
--- Determines whether an accelerator that activates the signal
--- identified by `signal_id` can currently be activated.
--- This is done by emitting the `GtkWidget`::can-activate-accel
--- signal on `widget`; if the signal isn’t overridden by a
--- handler or in a derived widget, then the default check is
--- that the widget must be sensitive, and the widget and all
--- its ancestors mapped.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param signal_id integer # the ID of a signal installed on `widget`
---@return (boolean|nil) # `true` if the accelerator can be activated.
function Gtk.Widget:can_activate_accel(signal_id) end

--- # method Gtk.Widget:child_focus()
---
--- This function is used by custom widget implementations; if you're
--- writing an app, you’d use `gtk_widget_grab_focus()` to move the focus
--- to a particular widget, and `gtk_container_set_focus_chain()` to
--- change the focus tab order. So you may want to investigate those
--- functions instead.
--- 
--- `gtk_widget_child_focus()` is called by containers as the user moves
--- around the window using keyboard shortcuts. `direction` indicates
--- what kind of motion is taking place (up, down, left, right, tab
--- forward, tab backward). `gtk_widget_child_focus()` emits the
--- `GtkWidget`::focus signal; widgets override the default handler
--- for this signal in order to implement appropriate focus behavior.
--- 
--- The default ::focus handler for a widget should return `true` if
--- moving in `direction` left the focus on a focusable location inside
--- that widget, and `false` if moving in `direction` moved the focus
--- outside the widget. If returning `true`, widgets normally
--- call `gtk_widget_grab_focus()` to place the focus accordingly;
--- if returning `false`, they don’t modify the current focus location.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param direction Gtk.DirectionType # direction of focus movement
---@return (boolean|nil) # `true` if focus ended up inside `widget`
function Gtk.Widget:child_focus(direction) end

--- # method Gtk.Widget:child_notify()
---
--- Emits a `GtkWidget`::child-notify signal for the
--- [child property][child-properties] `child_property`
--- on `widget`.
--- 
--- This is the analogue of `g_object_notify()` for child properties.
--- 
--- Also see `gtk_container_child_notify()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param child_property string # the name of a child property installed on the class of `widget`’s parent
---@return nil
function Gtk.Widget:child_notify(child_property) end

--- # method Gtk.Widget:class_path()
---
--- Same as `gtk_widget_path()`, but always uses the name of a widget’s type,
--- never uses a custom name set with `gtk_widget_set_name()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param path_length? integer # location to store the length of the class path, or `nil`
---@param path? string # location to store the class path as an allocated string, or `nil`
---@param path_reversed? string # location to store the reverse class path as an allocated string, or `nil`
---@return nil
function Gtk.Widget:class_path(path_length, path, path_reversed) end

--- # method Gtk.Widget:compute_expand()
---
--- Computes whether a container should give this widget extra space
--- when possible. Containers should check this, rather than
--- looking at `gtk_widget_get_hexpand()` or `gtk_widget_get_vexpand()`.
--- 
--- This function already checks whether the widget is visible, so
--- visibility does not need to be checked separately. Non-visible
--- widgets are not expanded.
--- 
--- The computed expand value uses either the expand setting explicitly
--- set on the widget itself, or, if none has been explicitly set,
--- the widget may expand if some of its children do.
---
--- ---
---
---@param self Gtk.Widget # the widget
---@param orientation Gtk.Orientation # expand direction
---@return (boolean|nil) # whether widget tree rooted here should be expanded
function Gtk.Widget:compute_expand(orientation) end

--- # method Gtk.Widget:create_pango_context()
---
--- Creates a new `PangoContext` with the appropriate font map,
--- font options, font description, and base direction for drawing
--- text for this widget. See also `gtk_widget_get_pango_context()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Pango.Context # the new `PangoContext`
function Gtk.Widget:create_pango_context() end

--- # method Gtk.Widget:create_pango_layout()
---
--- Creates a new `PangoLayout` with the appropriate font map,
--- font description, and base direction for drawing text for
--- this widget.
--- 
--- If you keep a `PangoLayout` created in this way around, you need
--- to re-create it when the widget `PangoContext` is replaced.
--- This can be tracked by using the `GtkWidget`::screen-changed signal
--- on the widget.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param text? string # text to set on the layout (can be `nil`)
---@return Pango.Layout # the new `PangoLayout`
function Gtk.Widget:create_pango_layout(text) end

--- # method Gtk.Widget:destroy()
---
--- Destroys a widget.
--- 
--- When a widget is destroyed all references it holds on other objects
--- will be released:
--- 
---  - if the widget is inside a container, it will be removed from its
---  parent
---  - if the widget is a container, all its children will be destroyed,
---  recursively
---  - if the widget is a top level, it will be removed from the list
---  of top level widgets that GTK+ maintains internally
--- 
--- It's expected that all references held on the widget will also
--- be released; you should connect to the `GtkWidget`::destroy signal
--- if you hold a reference to `widget` and you wish to remove it when
--- this function is called. It is not necessary to do so if you are
--- implementing a `GtkContainer`, as you'll be able to use the
--- `GtkContainerClass`.`remove()` virtual function for that.
--- 
--- It's important to notice that `gtk_widget_destroy()` will only cause
--- the `widget` to be finalized if no additional references, acquired
--- using `g_object_ref()`, are held on it. In case additional references
--- are in place, the `widget` will be in an "inert" state after calling
--- this function; `widget` will still point to valid memory, allowing you
--- to release the references you hold, but you may not query the widget's
--- own state.
--- 
--- You should typically call this function on top level widgets, and
--- rarely on child widgets.
--- 
--- See also: `gtk_container_remove()`
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:destroy() end

--- # method Gtk.Widget:destroyed()
---
--- This function sets *`widget_pointer` to `nil` if `widget_pointer` !=
--- `nil`.  It’s intended to be used as a callback connected to the
--- “destroy” signal of a widget. You connect `gtk_widget_destroyed()`
--- as a signal handler, and pass the address of your widget variable
--- as user data. Then when the widget is destroyed, the variable will
--- be set to `nil`. Useful for example to avoid multiple copies
--- of the same dialog.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param widget_pointer Gtk.Widget # address of a variable that contains `widget`
---@return nil
function Gtk.Widget:destroyed(widget_pointer) end

--- # method Gtk.Widget:device_is_shadowed()
---
--- Returns `true` if `device` has been shadowed by a GTK+
--- device grab on another widget, so it would stop sending
--- events to `widget`. This may be used in the
--- `GtkWidget`::grab-notify signal to check for specific
--- devices. See `gtk_device_grab_add()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param device Gdk.Device # a `GdkDevice`
---@return (boolean|nil) # `true` if there is an ongoing grab on `device` by another `GtkWidget` than `widget`.
function Gtk.Widget:device_is_shadowed(device) end

--- # method Gtk.Widget:drag_begin()
---
--- This function is equivalent to `gtk_drag_begin_with_coordinates()`,
--- passing -1, -1 as coordinates.
---
--- ---
---
---@param self Gtk.Widget # the source widget
---@param targets Gtk.TargetList # The targets (data formats) in which the source can provide the data
---@param actions Gdk.DragAction # A bitmask of the allowed drag actions for this drag
---@param button integer # The button the user clicked to start the drag
---@param event? Gdk.Event # The event that triggered the start of the drag, or `nil` if none can be obtained.
---@return Gdk.DragContext # the context for this drag
function Gtk.Widget:drag_begin(targets, actions, button, event) end

--- # method Gtk.Widget:drag_begin_with_coordinates()
---
--- Initiates a drag on the source side. The function only needs to be used
--- when the application is starting drags itself, and is not needed when
--- `gtk_drag_source_set()` is used.
--- 
--- The `event` is used to retrieve the timestamp that will be used internally to
--- grab the pointer.  If `event` is `nil`, then %GDK_CURRENT_TIME will be used.
--- However, you should try to pass a real event in all cases, since that can be
--- used to get information about the drag.
--- 
--- Generally there are three cases when you want to start a drag by hand by
--- calling this function:
--- 
--- 1. During a `GtkWidget`::button-press-event handler, if you want to start a drag
--- immediately when the user presses the mouse button.  Pass the `event`
--- that you have in your `GtkWidget`::button-press-event handler.
--- 
--- 2. During a `GtkWidget`::motion-notify-event handler, if you want to start a drag
--- when the mouse moves past a certain threshold distance after a button-press.
--- Pass the `event` that you have in your `GtkWidget`::motion-notify-event handler.
--- 
--- 3. During a timeout handler, if you want to start a drag after the mouse
--- button is held down for some time.  Try to save the last event that you got
--- from the mouse, using `gdk_event_copy()`, and pass it to this function
--- (remember to free the event with `gdk_event_free()` when you are done).
--- If you really cannot pass a real event, pass `nil` instead.
---
--- ---
---
---@param self Gtk.Widget # the source widget
---@param targets Gtk.TargetList # The targets (data formats) in which the source can provide the data
---@param actions Gdk.DragAction # A bitmask of the allowed drag actions for this drag
---@param button integer # The button the user clicked to start the drag
---@param event? Gdk.Event # The event that triggered the start of the drag, or `nil` if none can be obtained.
---@param x integer # The initial x coordinate to start dragging from, in the coordinate space of `widget`. If -1 is passed, the coordinates are retrieved from `event` or the current pointer position
---@param y integer # The initial y coordinate to start dragging from, in the coordinate space of `widget`. If -1 is passed, the coordinates are retrieved from `event` or the current pointer position
---@return Gdk.DragContext # the context for this drag
function Gtk.Widget:drag_begin_with_coordinates(targets, actions, button, event, x, y) end

--- # method Gtk.Widget:drag_check_threshold()
---
--- Checks to see if a mouse drag starting at (`start_x`, `start_y`) and ending
--- at (`current_x`, `current_y`) has passed the GTK+ drag threshold, and thus
--- should trigger the beginning of a drag-and-drop operation.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param start_x integer # X coordinate of start of drag
---@param start_y integer # Y coordinate of start of drag
---@param current_x integer # current X coordinate
---@param current_y integer # current Y coordinate
---@return (boolean|nil) # `true` if the drag threshold has been passed.
function Gtk.Widget:drag_check_threshold(start_x, start_y, current_x, current_y) end

--- # method Gtk.Widget:drag_dest_add_image_targets()
---
--- Add the image targets supported by `GtkSelectionData` to
--- the target list of the drag destination. The targets
--- are added with `info` = 0. If you need another value,
--- use `gtk_target_list_add_image_targets()` and
--- `gtk_drag_dest_set_target_list()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` that’s a drag destination
---@return nil
function Gtk.Widget:drag_dest_add_image_targets() end

--- # method Gtk.Widget:drag_dest_add_text_targets()
---
--- Add the text targets supported by `GtkSelectionData` to
--- the target list of the drag destination. The targets
--- are added with `info` = 0. If you need another value,
--- use `gtk_target_list_add_text_targets()` and
--- `gtk_drag_dest_set_target_list()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` that’s a drag destination
---@return nil
function Gtk.Widget:drag_dest_add_text_targets() end

--- # method Gtk.Widget:drag_dest_add_uri_targets()
---
--- Add the URI targets supported by `GtkSelectionData` to
--- the target list of the drag destination. The targets
--- are added with `info` = 0. If you need another value,
--- use `gtk_target_list_add_uri_targets()` and
--- `gtk_drag_dest_set_target_list()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` that’s a drag destination
---@return nil
function Gtk.Widget:drag_dest_add_uri_targets() end

--- # method Gtk.Widget:drag_dest_find_target()
---
--- Looks for a match between the supported targets of `context` and the
--- `dest_target_list`, returning the first matching target, otherwise
--- returning %GDK_NONE. `dest_target_list` should usually be the return
--- value from `gtk_drag_dest_get_target_list()`, but some widgets may
--- have different valid targets for different parts of the widget; in
--- that case, they will have to implement a drag_motion handler that
--- passes the correct target list to this function.
---
--- ---
---
---@param self Gtk.Widget # drag destination widget
---@param context Gdk.DragContext # drag context
---@param target_list? Gtk.TargetList # list of droppable targets, or `nil` to use gtk_drag_dest_get_target_list (`widget`).
---@return Gdk.Atom # first target that the source offers and the dest can accept, or %GDK_NONE
function Gtk.Widget:drag_dest_find_target(context, target_list) end

--- # method Gtk.Widget:drag_dest_get_target_list()
---
--- Returns the list of targets this widget can accept from
--- drag-and-drop.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.TargetList # the `GtkTargetList`, or `nil` if none
function Gtk.Widget:drag_dest_get_target_list() end

--- # method Gtk.Widget:drag_dest_get_track_motion()
---
--- Returns whether the widget has been configured to always
--- emit `GtkWidget`::drag-motion signals.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` that’s a drag destination
---@return (boolean|nil) # `true` if the widget always emits `GtkWidget`::drag-motion events
function Gtk.Widget:drag_dest_get_track_motion() end

--- # method Gtk.Widget:drag_dest_set()
---
--- Sets a widget as a potential drop destination, and adds default behaviors.
--- 
--- The default behaviors listed in `flags` have an effect similar
--- to installing default handlers for the widget’s drag-and-drop signals
--- (`GtkWidget`::drag-motion, `GtkWidget`::drag-drop, ...). They all exist
--- for convenience. When passing `GTK_DEST_DEFAULT_ALL` for instance it is
--- sufficient to connect to the widget’s `GtkWidget`::drag-data-received
--- signal to get primitive, but consistent drag-and-drop support.
--- 
--- Things become more complicated when you try to preview the dragged data,
--- as described in the documentation for `GtkWidget`::drag-motion. The default
--- behaviors described by `flags` make some assumptions, that can conflict
--- with your own signal handlers. For instance `GTK_DEST_DEFAULT_DROP` causes
--- invokations of `gdk_drag_status()` in the context of `GtkWidget`::drag-motion,
--- and invokations of `gtk_drag_finish()` in `GtkWidget`::drag-data-received.
--- Especially the later is dramatic, when your own `GtkWidget`::drag-motion
--- handler calls `gtk_drag_get_data()` to inspect the dragged data.
--- 
--- There’s no way to set a default action here, you can use the
--- `GtkWidget`::drag-motion callback for that. Here’s an example which selects
--- the action to use depending on whether the control key is pressed or not:
--- ```c
--- static void
--- drag_motion (GtkWidget *widget,
---              GdkDragContext *context,
---              gint x,
---              gint y,
---              guint time)
--- {
---   GdkModifierType mask;
--- 
---   gdk_window_get_pointer (gtk_widget_get_window (widget),
---                           NULL, NULL, &mask);
---   if (mask & GDK_CONTROL_MASK)
---     gdk_drag_status (context, GDK_ACTION_COPY, time);
---   else
---     gdk_drag_status (context, GDK_ACTION_MOVE, time);
--- }
--- ```
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param flags Gtk.DestDefaults # which types of default drag behavior to use
---@param targets? unknown[] # a pointer to an array of `GtkTargetEntrys` indicating the drop types that this `widget` will accept, or `nil`. Later you can access the list with `gtk_drag_dest_get_target_list()` and `gtk_drag_dest_find_target()`.
---@param n_targets integer # the number of entries in `targets`
---@param actions Gdk.DragAction # a bitmask of possible actions for a drop onto this `widget`.
---@return nil
function Gtk.Widget:drag_dest_set(flags, targets, n_targets, actions) end

--- # method Gtk.Widget:drag_dest_set_proxy()
---
--- Sets this widget as a proxy for drops to another window.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param proxy_window Gdk.Window # the window to which to forward drag events
---@param protocol Gdk.DragProtocol # the drag protocol which the `proxy_window` accepts (You can use `gdk_drag_get_protocol()` to determine this)
---@param use_coordinates (boolean|nil) # If `true`, send the same coordinates to the destination, because it is an embedded subwindow.
---@return nil
function Gtk.Widget:drag_dest_set_proxy(proxy_window, protocol, use_coordinates) end

--- # method Gtk.Widget:drag_dest_set_target_list()
---
--- Sets the target types that this widget can accept from drag-and-drop.
--- The widget must first be made into a drag destination with
--- `gtk_drag_dest_set()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` that’s a drag destination
---@param target_list? Gtk.TargetList # list of droppable targets, or `nil` for none
---@return nil
function Gtk.Widget:drag_dest_set_target_list(target_list) end

--- # method Gtk.Widget:drag_dest_set_track_motion()
---
--- Tells the widget to emit `GtkWidget`::drag-motion and
--- `GtkWidget`::drag-leave events regardless of the targets and the
--- %GTK_DEST_DEFAULT_MOTION flag.
--- 
--- This may be used when a widget wants to do generic
--- actions regardless of the targets that the source offers.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` that’s a drag destination
---@param track_motion (boolean|nil) # whether to accept all targets
---@return nil
function Gtk.Widget:drag_dest_set_track_motion(track_motion) end

--- # method Gtk.Widget:drag_dest_unset()
---
--- Clears information about a drop destination set with
--- `gtk_drag_dest_set()`. The widget will no longer receive
--- notification of drags.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:drag_dest_unset() end

--- # method Gtk.Widget:drag_get_data()
---
--- Gets the data associated with a drag. When the data
--- is received or the retrieval fails, GTK+ will emit a
--- `GtkWidget`::drag-data-received signal. Failure of the retrieval
--- is indicated by the length field of the `selection_data`
--- signal parameter being negative. However, when `gtk_drag_get_data()`
--- is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
--- then the widget will not receive notification of failed
--- drops.
---
--- ---
---
---@param self Gtk.Widget # the widget that will receive the `GtkWidget`::drag-data-received signal
---@param context Gdk.DragContext # the drag context
---@param target Gdk.Atom # the target (form of the data) to retrieve
---@param time_ integer # a timestamp for retrieving the data. This will generally be the time received in a `GtkWidget`::drag-motion or `GtkWidget`::drag-drop signal
---@return nil
function Gtk.Widget:drag_get_data(context, target, time_) end

--- # method Gtk.Widget:drag_highlight()
---
--- Highlights a widget as a currently hovered drop target.
--- To end the highlight, call `gtk_drag_unhighlight()`.
--- GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
---
--- ---
---
---@param self Gtk.Widget # a widget to highlight
---@return nil
function Gtk.Widget:drag_highlight() end

--- # method Gtk.Widget:drag_source_add_image_targets()
---
--- Add the writable image targets supported by `GtkSelectionData` to
--- the target list of the drag source. The targets
--- are added with `info` = 0. If you need another value,
--- use `gtk_target_list_add_image_targets()` and
--- `gtk_drag_source_set_target_list()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` that’s is a drag source
---@return nil
function Gtk.Widget:drag_source_add_image_targets() end

--- # method Gtk.Widget:drag_source_add_text_targets()
---
--- Add the text targets supported by `GtkSelectionData` to
--- the target list of the drag source.  The targets
--- are added with `info` = 0. If you need another value,
--- use `gtk_target_list_add_text_targets()` and
--- `gtk_drag_source_set_target_list()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` that’s is a drag source
---@return nil
function Gtk.Widget:drag_source_add_text_targets() end

--- # method Gtk.Widget:drag_source_add_uri_targets()
---
--- Add the URI targets supported by `GtkSelectionData` to
--- the target list of the drag source.  The targets
--- are added with `info` = 0. If you need another value,
--- use `gtk_target_list_add_uri_targets()` and
--- `gtk_drag_source_set_target_list()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` that’s is a drag source
---@return nil
function Gtk.Widget:drag_source_add_uri_targets() end

--- # method Gtk.Widget:drag_source_get_target_list()
---
--- Gets the list of targets this widget can provide for
--- drag-and-drop.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.TargetList # the `GtkTargetList`, or `nil` if none
function Gtk.Widget:drag_source_get_target_list() end

--- # method Gtk.Widget:drag_source_set()
---
--- Sets up a widget so that GTK+ will start a drag operation when the user
--- clicks and drags on the widget. The widget must have a window.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param start_button_mask Gdk.ModifierType # the bitmask of buttons that can start the drag
---@param targets? unknown[] # the table of targets that the drag will support, may be `nil`
---@param n_targets integer # the number of items in `targets`
---@param actions Gdk.DragAction # the bitmask of possible actions for a drag from this widget
---@return nil
function Gtk.Widget:drag_source_set(start_button_mask, targets, n_targets, actions) end

--- # method Gtk.Widget:drag_source_set_icon_gicon()
---
--- Sets the icon that will be used for drags from a particular source
--- to `icon`. See the docs for `GtkIconTheme` for more details.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param icon Gio.Icon # A `GIcon`
---@return nil
function Gtk.Widget:drag_source_set_icon_gicon(icon) end

--- # method Gtk.Widget:drag_source_set_icon_name()
---
--- Sets the icon that will be used for drags from a particular source
--- to a themed icon. See the docs for `GtkIconTheme` for more details.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param icon_name string # name of icon to use
---@return nil
function Gtk.Widget:drag_source_set_icon_name(icon_name) end

--- # method Gtk.Widget:drag_source_set_icon_pixbuf()
---
--- Sets the icon that will be used for drags from a particular widget
--- from a `GdkPixbuf`. GTK+ retains a reference for `pixbuf` and will
--- release it when it is no longer needed.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param pixbuf GdkPixbuf.Pixbuf # the `GdkPixbuf` for the drag icon
---@return nil
function Gtk.Widget:drag_source_set_icon_pixbuf(pixbuf) end

--- # method Gtk.Widget:drag_source_set_icon_stock()
---
--- Sets the icon that will be used for drags from a particular source
--- to a stock icon.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param stock_id string # the ID of the stock icon to use
---@return nil
function Gtk.Widget:drag_source_set_icon_stock(stock_id) end

--- # method Gtk.Widget:drag_source_set_target_list()
---
--- Changes the target types that this widget offers for drag-and-drop.
--- The widget must first be made into a drag source with
--- `gtk_drag_source_set()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` that’s a drag source
---@param target_list? Gtk.TargetList # list of draggable targets, or `nil` for none
---@return nil
function Gtk.Widget:drag_source_set_target_list(target_list) end

--- # method Gtk.Widget:drag_source_unset()
---
--- Undoes the effects of `gtk_drag_source_set()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:drag_source_unset() end

--- # method Gtk.Widget:drag_unhighlight()
---
--- Removes a highlight set by `gtk_drag_highlight()` from
--- a widget.
---
--- ---
---
---@param self Gtk.Widget # a widget to remove the highlight from
---@return nil
function Gtk.Widget:drag_unhighlight() end

--- # method Gtk.Widget:draw()
---
--- Draws `widget` to `cr`. The top left corner of the widget will be
--- drawn to the currently set origin point of `cr`.
--- 
--- You should pass a cairo context as `cr` argument that is in an
--- original state. Otherwise the resulting drawing is undefined. For
--- example changing the operator using `cairo_set_operator()` or the
--- line width using `cairo_set_line_width()` might have unwanted side
--- effects.
--- You may however change the context’s transform matrix - like with
--- `cairo_scale()`, `cairo_translate()` or `cairo_set_matrix()` and clip
--- region with `cairo_clip()` prior to calling this function. Also, it
--- is fine to modify the context with `cairo_save()` and
--- `cairo_push_group()` prior to calling this function.
--- 
--- Note that special-purpose widgets may contain special code for
--- rendering to the screen and might appear differently on screen
--- and when rendered using `gtk_widget_draw()`.
---
--- ---
---
---@param self Gtk.Widget # the widget to draw. It must be drawable (see `gtk_widget_is_drawable()`) and a size must have been allocated.
---@param cr cairo.Context # a cairo context to draw to
---@return nil
function Gtk.Widget:draw(cr) end

--- # method Gtk.Widget:ensure_style()
---
--- Ensures that `widget` has a style (`widget`->style).
--- 
--- Not a very useful function; most of the time, if you
--- want the style, the widget is realized, and realized
--- widgets are guaranteed to have a style already.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:ensure_style() end

--- # method Gtk.Widget:error_bell()
---
--- Notifies the user about an input-related error on this widget.
--- If the `GtkSettings`:gtk-error-bell setting is `true`, it calls
--- `gdk_window_beep()`, otherwise it does nothing.
--- 
--- Note that the effect of `gdk_window_beep()` can be configured in many
--- ways, depending on the windowing backend and the desktop environment
--- or window manager that is used.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:error_bell() end

--- # method Gtk.Widget:event()
---
--- Rarely-used function. This function is used to emit
--- the event signals on a widget (those signals should never
--- be emitted without using this function to do so).
--- If you want to synthesize an event though, don’t use this function;
--- instead, use `gtk_main_do_event()` so the event will behave as if
--- it were in the event queue. Don’t synthesize expose events; instead,
--- use `gdk_window_invalidate_rect()` to invalidate a region of the
--- window.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param event Gdk.Event # a `GdkEvent`
---@return (boolean|nil) # return from the event signal emission (`true` if the event was handled)
function Gtk.Widget:event(event) end

--- # method Gtk.Widget:freeze_child_notify()
---
--- Stops emission of `GtkWidget`::child-notify signals on `widget`. The
--- signals are queued until `gtk_widget_thaw_child_notify()` is called
--- on `widget`.
--- 
--- This is the analogue of `g_object_freeze_notify()` for child properties.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:freeze_child_notify() end

--- # method Gtk.Widget:get_accessible()
---
--- Returns the accessible object that describes the widget to an
--- assistive technology.
--- 
--- If accessibility support is not available, this `AtkObject`
--- instance may be a no-op. Likewise, if no class-specific `AtkObject`
--- implementation is available for the widget instance in question,
--- it will inherit an `AtkObject` implementation from the first ancestor
--- class for which such an implementation is defined.
--- 
--- The documentation of the
--- [ATK](http://developer.gnome.org/atk/stable/)
--- library contains more information about accessible objects and their uses.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Atk.Object # the `AtkObject` associated with `widget`
function Gtk.Widget:get_accessible() end

--- # method Gtk.Widget:get_action_group()
---
--- Retrieves the `GActionGroup` that was registered using `prefix`. The resulting
--- `GActionGroup` may have been registered to `widget` or any `GtkWidget` in its
--- ancestry.
--- 
--- If no action group was found matching `prefix`, then `nil` is returned.
---
--- ---
---
---@param self Gtk.Widget # A `GtkWidget`
---@param prefix string # The “prefix” of the action group.
---@return Gio.ActionGroup # A `GActionGroup` or `nil`.
function Gtk.Widget:get_action_group(prefix) end

--- # method Gtk.Widget:get_allocated_baseline()
---
--- Returns the baseline that has currently been allocated to `widget`.
--- This function is intended to be used when implementing handlers
--- for the `GtkWidget`::draw function, and when allocating child
--- widgets in `GtkWidget`::size_allocate.
---
--- ---
---
---@param self Gtk.Widget # the widget to query
---@return integer # the baseline of the `widget`, or -1 if none
function Gtk.Widget:get_allocated_baseline() end

--- # method Gtk.Widget:get_allocated_height()
---
--- Returns the height that has currently been allocated to `widget`.
--- This function is intended to be used when implementing handlers
--- for the `GtkWidget`::draw function.
---
--- ---
---
---@param self Gtk.Widget # the widget to query
---@return integer # the height of the `widget`
function Gtk.Widget:get_allocated_height() end

--- # method Gtk.Widget:get_allocated_size()
---
--- Retrieves the widget’s allocated size.
--- 
--- This function returns the last values passed to
--- `gtk_widget_size_allocate_with_baseline()`. The value differs from
--- the size returned in `gtk_widget_get_allocation()` in that functions
--- like `gtk_widget_set_halign()` can adjust the allocation, but not
--- the value returned by this function.
--- 
--- If a widget is not visible, its allocated size is 0.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param allocation Gtk.Allocation # a pointer to a `GtkAllocation` to copy to
---@param baseline? integer # a pointer to an integer to copy to
---@return nil
function Gtk.Widget:get_allocated_size(allocation, baseline) end

--- # method Gtk.Widget:get_allocated_width()
---
--- Returns the width that has currently been allocated to `widget`.
--- This function is intended to be used when implementing handlers
--- for the `GtkWidget`::draw function.
---
--- ---
---
---@param self Gtk.Widget # the widget to query
---@return integer # the width of the `widget`
function Gtk.Widget:get_allocated_width() end

--- # method Gtk.Widget:get_allocation()
---
--- Retrieves the widget’s allocation.
--- 
--- Note, when implementing a `GtkContainer`: a widget’s allocation will
--- be its “adjusted” allocation, that is, the widget’s parent
--- container typically calls `gtk_widget_size_allocate()` with an
--- allocation, and that allocation is then adjusted (to handle margin
--- and alignment for example) before assignment to the widget.
--- `gtk_widget_get_allocation()` returns the adjusted allocation that
--- was actually assigned to the widget. The adjusted allocation is
--- guaranteed to be completely contained within the
--- `gtk_widget_size_allocate()` allocation, however. So a `GtkContainer`
--- is guaranteed that its children stay inside the assigned bounds,
--- but not that they have exactly the bounds the container assigned.
--- There is no way to get the original allocation assigned by
--- `gtk_widget_size_allocate()`, since it isn’t stored; if a container
--- implementation needs that information it will have to track it itself.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param allocation Gtk.Allocation # a pointer to a `GtkAllocation` to copy to
---@return nil
function Gtk.Widget:get_allocation(allocation) end

--- # method Gtk.Widget:get_ancestor()
---
--- Gets the first ancestor of `widget` with type `widget_type`. For example,
--- `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
--- the first `GtkBox` that’s an ancestor of `widget`. No reference will be
--- added to the returned widget; it should not be unreferenced. See note
--- about checking for a toplevel `GtkWindow` in the docs for
--- `gtk_widget_get_toplevel()`.
--- 
--- Note that unlike `gtk_widget_is_ancestor()`, `gtk_widget_get_ancestor()`
--- considers `widget` to be an ancestor of itself.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param widget_type Gtk.GType # ancestor type
---@return Gtk.Widget # the ancestor widget, or `nil` if not found
function Gtk.Widget:get_ancestor(widget_type) end

--- # method Gtk.Widget:get_app_paintable()
---
--- Determines whether the application intends to draw on the widget in
--- an `GtkWidget`::draw handler.
--- 
--- See `gtk_widget_set_app_paintable()`
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if the widget is app paintable
function Gtk.Widget:get_app_paintable() end

--- # method Gtk.Widget:get_can_default()
---
--- Determines whether `widget` can be a default widget. See
--- `gtk_widget_set_can_default()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if `widget` can be a default widget, `false` otherwise
function Gtk.Widget:get_can_default() end

--- # method Gtk.Widget:get_can_focus()
---
--- Determines whether `widget` can own the input focus. See
--- `gtk_widget_set_can_focus()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if `widget` can own the input focus, `false` otherwise
function Gtk.Widget:get_can_focus() end

--- # method Gtk.Widget:get_child_requisition()
---
--- This function is only for use in widget implementations. Obtains
--- `widget`->requisition, unless someone has forced a particular
--- geometry on the widget (e.g. with `gtk_widget_set_size_request()`),
--- in which case it returns that geometry instead of the widget's
--- requisition.
--- 
--- This function differs from `gtk_widget_size_request()` in that
--- it retrieves the last size request value from `widget`->requisition,
--- while `gtk_widget_size_request()` actually calls the "size_request" method
--- on `widget` to compute the size request and fill in `widget`->requisition,
--- and only then returns `widget`->requisition.
--- 
--- Because this function does not call the “size_request” method, it
--- can only be used when you know that `widget`->requisition is
--- up-to-date, that is, `gtk_widget_size_request()` has been called
--- since the last time a resize was queued. In general, only container
--- implementations have this information; applications should use
--- `gtk_widget_size_request()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param requisition Gtk.Requisition # a `GtkRequisition` to be filled in
---@return nil
function Gtk.Widget:get_child_requisition(requisition) end

--- # method Gtk.Widget:get_child_visible()
---
--- Gets the value set with `gtk_widget_set_child_visible()`.
--- If you feel a need to use this function, your code probably
--- needs reorganization.
--- 
--- This function is only useful for container implementations and
--- never should be called by an application.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if the widget is mapped with the parent.
function Gtk.Widget:get_child_visible() end

--- # method Gtk.Widget:get_clip()
---
--- Retrieves the widget’s clip area.
--- 
--- The clip area is the area in which all of `widget`'s drawing will
--- happen. Other toolkits call it the bounding box.
--- 
--- Historically, in GTK+ the clip area has been equal to the allocation
--- retrieved via `gtk_widget_get_allocation()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param clip Gtk.Allocation # a pointer to a `GtkAllocation` to copy to
---@return nil
function Gtk.Widget:get_clip(clip) end

--- # method Gtk.Widget:get_clipboard()
---
--- Returns the clipboard object for the given selection to
--- be used with `widget`. `widget` must have a `GdkDisplay`
--- associated with it, so must be attached to a toplevel
--- window.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param selection Gdk.Atom # a `GdkAtom` which identifies the clipboard to use. %GDK_SELECTION_CLIPBOARD gives the default clipboard. Another common value is %GDK_SELECTION_PRIMARY, which gives the primary X selection.
---@return Gtk.Clipboard # the appropriate clipboard object. If no clipboard already exists, a new one will be created. Once a clipboard object has been created, it is persistent for all time.
function Gtk.Widget:get_clipboard(selection) end

--- # method Gtk.Widget:get_composite_name()
---
--- Obtains the composite name of a widget.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return string # the composite name of `widget`, or `nil` if `widget` is not a composite child. The string should be freed when it is no longer needed.
function Gtk.Widget:get_composite_name() end

--- # method Gtk.Widget:get_device_enabled()
---
--- Returns whether `device` can interact with `widget` and its
--- children. See `gtk_widget_set_device_enabled()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param device Gdk.Device # a `GdkDevice`
---@return (boolean|nil) # `true` is `device` is enabled for `widget`
function Gtk.Widget:get_device_enabled(device) end

--- # method Gtk.Widget:get_device_events()
---
--- Returns the events mask for the widget corresponding to an specific device. These
--- are the events that the widget will receive when `device` operates on it.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param device Gdk.Device # a `GdkDevice`
---@return Gdk.EventMask # device event mask for `widget`
function Gtk.Widget:get_device_events(device) end

--- # method Gtk.Widget:get_direction()
---
--- Gets the reading direction for a particular widget. See
--- `gtk_widget_set_direction()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.TextDirection # the reading direction for the widget.
function Gtk.Widget:get_direction() end

--- # method Gtk.Widget:get_display()
---
--- Get the `GdkDisplay` for the toplevel window associated with
--- this widget. This function can only be called after the widget
--- has been added to a widget hierarchy with a `GtkWindow` at the top.
--- 
--- In general, you should only create display specific
--- resources when a widget has been realized, and you should
--- free those resources when the widget is unrealized.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gdk.Display # the `GdkDisplay` for the toplevel for this widget.
function Gtk.Widget:get_display() end

--- # method Gtk.Widget:get_double_buffered()
---
--- Determines whether the widget is double buffered.
--- 
--- See `gtk_widget_set_double_buffered()`
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if the widget is double buffered
function Gtk.Widget:get_double_buffered() end

--- # method Gtk.Widget:get_events()
---
--- Returns the event mask (see `GdkEventMask`) for the widget. These are the
--- events that the widget will receive.
--- 
--- Note: Internally, the widget event mask will be the logical OR of the event
--- mask set through `gtk_widget_set_events()` or `gtk_widget_add_events()`, and the
--- event mask necessary to cater for every `GtkEventController` created for the
--- widget.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return integer # event mask for `widget`
function Gtk.Widget:get_events() end

--- # method Gtk.Widget:get_focus_on_click()
---
--- Returns whether the widget should grab focus when it is clicked with the mouse.
--- See `gtk_widget_set_focus_on_click()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if the widget should grab focus when it is clicked with the mouse.
function Gtk.Widget:get_focus_on_click() end

--- # method Gtk.Widget:get_font_map()
---
--- Gets the font map that has been set with `gtk_widget_set_font_map()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Pango.FontMap # A `PangoFontMap`, or `nil`
function Gtk.Widget:get_font_map() end

--- # method Gtk.Widget:get_font_options()
---
--- Returns the `cairo_font_options_t` used for Pango rendering. When not set,
--- the defaults font options for the `GdkScreen` will be used.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return cairo.FontOptions # the `cairo_font_options_t` or `nil` if not set
function Gtk.Widget:get_font_options() end

--- # method Gtk.Widget:get_frame_clock()
---
--- Obtains the frame clock for a widget. The frame clock is a global
--- “ticker” that can be used to drive animations and repaints.  The
--- most common reason to get the frame clock is to call
--- `gdk_frame_clock_get_frame_time()`, in order to get a time to use for
--- animating. For example you might record the start of the animation
--- with an initial value from `gdk_frame_clock_get_frame_time()`, and
--- then update the animation by calling
--- `gdk_frame_clock_get_frame_time()` again during each repaint.
--- 
--- `gdk_frame_clock_request_phase()` will result in a new frame on the
--- clock, but won’t necessarily repaint any widgets. To repaint a
--- widget, you have to use `gtk_widget_queue_draw()` which invalidates
--- the widget (thus scheduling it to receive a draw on the next
--- frame). `gtk_widget_queue_draw()` will also end up requesting a frame
--- on the appropriate frame clock.
--- 
--- A widget’s frame clock will not change while the widget is
--- mapped. Reparenting a widget (which implies a temporary unmap) can
--- change the widget’s frame clock.
--- 
--- Unrealized widgets do not have a frame clock.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gdk.FrameClock # a `GdkFrameClock`, or `nil` if widget is unrealized
function Gtk.Widget:get_frame_clock() end

--- # method Gtk.Widget:get_halign()
---
--- Gets the value of the `GtkWidget`:halign property.
--- 
--- For backwards compatibility reasons this method will never return
--- %GTK_ALIGN_BASELINE, but instead it will convert it to
--- %GTK_ALIGN_FILL. Baselines are not supported for horizontal
--- alignment.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.Align # the horizontal alignment of `widget`
function Gtk.Widget:get_halign() end

--- # method Gtk.Widget:get_has_tooltip()
---
--- Returns the current value of the has-tooltip property.  See
--- `GtkWidget`:has-tooltip for more information.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # current value of has-tooltip on `widget`.
function Gtk.Widget:get_has_tooltip() end

--- # method Gtk.Widget:get_has_window()
---
--- Determines whether `widget` has a `GdkWindow` of its own. See
--- `gtk_widget_set_has_window()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if `widget` has a window, `false` otherwise
function Gtk.Widget:get_has_window() end

--- # method Gtk.Widget:get_hexpand()
---
--- Gets whether the widget would like any available extra horizontal
--- space. When a user resizes a `GtkWindow`, widgets with expand=TRUE
--- generally receive the extra space. For example, a list or
--- scrollable area or document in your window would often be set to
--- expand.
--- 
--- Containers should use `gtk_widget_compute_expand()` rather than
--- this function, to see whether a widget, or any of its children,
--- has the expand flag set. If any child of a widget wants to
--- expand, the parent may ask to expand also.
--- 
--- This function only looks at the widget’s own hexpand flag, rather
--- than computing whether the entire widget tree rooted at this widget
--- wants to expand.
---
--- ---
---
---@param self Gtk.Widget # the widget
---@return (boolean|nil) # whether hexpand flag is set
function Gtk.Widget:get_hexpand() end

--- # method Gtk.Widget:get_hexpand_set()
---
--- Gets whether `gtk_widget_set_hexpand()` has been used to
--- explicitly set the expand flag on this widget.
--- 
--- If hexpand is set, then it overrides any computed
--- expand value based on child widgets. If hexpand is not
--- set, then the expand value depends on whether any
--- children of the widget would like to expand.
--- 
--- There are few reasons to use this function, but it’s here
--- for completeness and consistency.
---
--- ---
---
---@param self Gtk.Widget # the widget
---@return (boolean|nil) # whether hexpand has been explicitly set
function Gtk.Widget:get_hexpand_set() end

--- # method Gtk.Widget:get_mapped()
---
--- Whether the widget is mapped.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if the widget is mapped, `false` otherwise.
function Gtk.Widget:get_mapped() end

--- # method Gtk.Widget:get_margin_bottom()
---
--- Gets the value of the `GtkWidget`:margin-bottom property.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return integer # The bottom margin of `widget`
function Gtk.Widget:get_margin_bottom() end

--- # method Gtk.Widget:get_margin_end()
---
--- Gets the value of the `GtkWidget`:margin-end property.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return integer # The end margin of `widget`
function Gtk.Widget:get_margin_end() end

--- # method Gtk.Widget:get_margin_left()
---
--- Gets the value of the `GtkWidget`:margin-left property.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return integer # The left margin of `widget`
function Gtk.Widget:get_margin_left() end

--- # method Gtk.Widget:get_margin_right()
---
--- Gets the value of the `GtkWidget`:margin-right property.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return integer # The right margin of `widget`
function Gtk.Widget:get_margin_right() end

--- # method Gtk.Widget:get_margin_start()
---
--- Gets the value of the `GtkWidget`:margin-start property.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return integer # The start margin of `widget`
function Gtk.Widget:get_margin_start() end

--- # method Gtk.Widget:get_margin_top()
---
--- Gets the value of the `GtkWidget`:margin-top property.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return integer # The top margin of `widget`
function Gtk.Widget:get_margin_top() end

--- # method Gtk.Widget:get_modifier_mask()
---
--- Returns the modifier mask the `widget`’s windowing system backend
--- uses for a particular purpose.
--- 
--- See `gdk_keymap_get_modifier_mask()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param intent Gdk.ModifierIntent # the use case for the modifier mask
---@return Gdk.ModifierType # the modifier mask used for `intent`.
function Gtk.Widget:get_modifier_mask(intent) end

--- # method Gtk.Widget:get_modifier_style()
---
--- Returns the current modifier style for the widget. (As set by
--- `gtk_widget_modify_style()`.) If no style has previously set, a new
--- `GtkRcStyle` will be created with all values unset, and set as the
--- modifier style for the widget. If you make changes to this rc
--- style, you must call `gtk_widget_modify_style()`, passing in the
--- returned rc style, to make sure that your changes take effect.
--- 
--- Caution: passing the style back to `gtk_widget_modify_style()` will
--- normally end up destroying it, because `gtk_widget_modify_style()` copies
--- the passed-in style and sets the copy as the new modifier style,
--- thus dropping any reference to the old modifier style. Add a reference
--- to the modifier style if you want to keep it alive.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.RcStyle # the modifier style for the widget. This rc style is owned by the widget. If you want to keep a pointer to value this around, you must add a refcount using `g_object_ref()`.
function Gtk.Widget:get_modifier_style() end

--- # method Gtk.Widget:get_name()
---
--- Retrieves the name of a widget. See `gtk_widget_set_name()` for the
--- significance of widget names.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return string # name of the widget. This string is owned by GTK+ and should not be modified or freed
function Gtk.Widget:get_name() end

--- # method Gtk.Widget:get_no_show_all()
---
--- Returns the current value of the `GtkWidget`:no-show-all property,
--- which determines whether calls to `gtk_widget_show_all()`
--- will affect this widget.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # the current value of the “no-show-all” property.
function Gtk.Widget:get_no_show_all() end

--- # method Gtk.Widget:get_opacity()
---
--- Fetches the requested opacity for this widget.
--- See `gtk_widget_set_opacity()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return number # the requested opacity for this widget.
function Gtk.Widget:get_opacity() end

--- # method Gtk.Widget:get_pango_context()
---
--- Gets a `PangoContext` with the appropriate font map, font description,
--- and base direction for this widget. Unlike the context returned
--- by `gtk_widget_create_pango_context()`, this context is owned by
--- the widget (it can be used until the screen for the widget changes
--- or the widget is removed from its toplevel), and will be updated to
--- match any changes to the widget’s attributes. This can be tracked
--- by using the `GtkWidget`::screen-changed signal on the widget.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Pango.Context # the `PangoContext` for the widget.
function Gtk.Widget:get_pango_context() end

--- # method Gtk.Widget:get_parent()
---
--- Returns the parent container of `widget`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.Widget # the parent container of `widget`, or `nil`
function Gtk.Widget:get_parent() end

--- # method Gtk.Widget:get_parent_window()
---
--- Gets `widget`’s parent window, or `nil` if it does not have one.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`.
---@return Gdk.Window # the parent window of `widget`, or `nil` if it does not have a parent window.
function Gtk.Widget:get_parent_window() end

--- # method Gtk.Widget:get_path()
---
--- Returns the `GtkWidgetPath` representing `widget`, if the widget
--- is not connected to a toplevel widget, a partial path will be
--- created.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.WidgetPath # The `GtkWidgetPath` representing `widget`
function Gtk.Widget:get_path() end

--- # method Gtk.Widget:get_pointer()
---
--- Obtains the location of the mouse pointer in widget coordinates.
--- Widget coordinates are a bit odd; for historical reasons, they are
--- defined as `widget`->window coordinates for widgets that return `true` for
--- `gtk_widget_get_has_window()`; and are relative to `widget`->allocation.x,
--- `widget`->allocation.y otherwise.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param x? integer # return location for the X coordinate, or `nil`
---@param y? integer # return location for the Y coordinate, or `nil`
---@return nil
function Gtk.Widget:get_pointer(x, y) end

--- # method Gtk.Widget:get_preferred_height()
---
--- Retrieves a widget’s initial minimum and natural height.
--- 
--- This call is specific to width-for-height requests.
--- 
--- The returned request will be modified by the
--- GtkWidgetClass::adjust_size_request virtual method and by any
--- `GtkSizeGroups` that have been applied. That is, the returned request
--- is the one that should be used for layout, not necessarily the one
--- returned by the widget itself.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` instance
---@param minimum_height? integer # location to store the minimum height, or `nil`
---@param natural_height? integer # location to store the natural height, or `nil`
---@return nil
function Gtk.Widget:get_preferred_height(minimum_height, natural_height) end

--- # method Gtk.Widget:get_preferred_height_and_baseline_for_width()
---
--- Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
--- the specified `width`, or the default height if `width` is -1. The baselines may be -1 which means
--- that no baseline is requested for this widget.
--- 
--- The returned request will be modified by the
--- GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
--- and by any `GtkSizeGroups` that have been applied. That is, the returned request
--- is the one that should be used for layout, not necessarily the one
--- returned by the widget itself.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` instance
---@param width integer # the width which is available for allocation, or -1 if none
---@param minimum_height? integer # location for storing the minimum height, or `nil`
---@param natural_height? integer # location for storing the natural height, or `nil`
---@param minimum_baseline? integer # location for storing the baseline for the minimum height, or `nil`
---@param natural_baseline? integer # location for storing the baseline for the natural height, or `nil`
---@return nil
function Gtk.Widget:get_preferred_height_and_baseline_for_width(width, minimum_height, natural_height, minimum_baseline, natural_baseline) end

--- # method Gtk.Widget:get_preferred_height_for_width()
---
--- Retrieves a widget’s minimum and natural height if it would be given
--- the specified `width`.
--- 
--- The returned request will be modified by the
--- GtkWidgetClass::adjust_size_request virtual method and by any
--- `GtkSizeGroups` that have been applied. That is, the returned request
--- is the one that should be used for layout, not necessarily the one
--- returned by the widget itself.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` instance
---@param width integer # the width which is available for allocation
---@param minimum_height? integer # location for storing the minimum height, or `nil`
---@param natural_height? integer # location for storing the natural height, or `nil`
---@return nil
function Gtk.Widget:get_preferred_height_for_width(width, minimum_height, natural_height) end

--- # method Gtk.Widget:get_preferred_size()
---
--- Retrieves the minimum and natural size of a widget, taking
--- into account the widget’s preference for height-for-width management.
--- 
--- This is used to retrieve a suitable size by container widgets which do
--- not impose any restrictions on the child placement. It can be used
--- to deduce toplevel window and menu sizes as well as child widgets in
--- free-form containers such as GtkLayout.
--- 
--- Handle with care. Note that the natural height of a height-for-width
--- widget will generally be a smaller size than the minimum height, since the required
--- height for the natural width is generally smaller than the required height for
--- the minimum width.
--- 
--- Use `gtk_widget_get_preferred_height_and_baseline_for_width()` if you want to support
--- baseline alignment.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` instance
---@param minimum_size? Gtk.Requisition # location for storing the minimum size, or `nil`
---@param natural_size? Gtk.Requisition # location for storing the natural size, or `nil`
---@return nil
function Gtk.Widget:get_preferred_size(minimum_size, natural_size) end

--- # method Gtk.Widget:get_preferred_width()
---
--- Retrieves a widget’s initial minimum and natural width.
--- 
--- This call is specific to height-for-width requests.
--- 
--- The returned request will be modified by the
--- GtkWidgetClass::adjust_size_request virtual method and by any
--- `GtkSizeGroups` that have been applied. That is, the returned request
--- is the one that should be used for layout, not necessarily the one
--- returned by the widget itself.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` instance
---@param minimum_width? integer # location to store the minimum width, or `nil`
---@param natural_width? integer # location to store the natural width, or `nil`
---@return nil
function Gtk.Widget:get_preferred_width(minimum_width, natural_width) end

--- # method Gtk.Widget:get_preferred_width_for_height()
---
--- Retrieves a widget’s minimum and natural width if it would be given
--- the specified `height`.
--- 
--- The returned request will be modified by the
--- GtkWidgetClass::adjust_size_request virtual method and by any
--- `GtkSizeGroups` that have been applied. That is, the returned request
--- is the one that should be used for layout, not necessarily the one
--- returned by the widget itself.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` instance
---@param height integer # the height which is available for allocation
---@param minimum_width? integer # location for storing the minimum width, or `nil`
---@param natural_width? integer # location for storing the natural width, or `nil`
---@return nil
function Gtk.Widget:get_preferred_width_for_height(height, minimum_width, natural_width) end

--- # method Gtk.Widget:get_realized()
---
--- Determines whether `widget` is realized.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if `widget` is realized, `false` otherwise
function Gtk.Widget:get_realized() end

--- # method Gtk.Widget:get_receives_default()
---
--- Determines whether `widget` is always treated as the default widget
--- within its toplevel when it has the focus, even if another widget
--- is the default.
--- 
--- See `gtk_widget_set_receives_default()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if `widget` acts as the default widget when focused, `false` otherwise
function Gtk.Widget:get_receives_default() end

--- # method Gtk.Widget:get_request_mode()
---
--- Gets whether the widget prefers a height-for-width layout
--- or a width-for-height layout.
--- 
--- `GtkBin` widgets generally propagate the preference of
--- their child, container widgets need to request something either in
--- context of their children or in context of their allocation
--- capabilities.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget` instance
---@return Gtk.SizeRequestMode # The `GtkSizeRequestMode` preferred by `widget`.
function Gtk.Widget:get_request_mode() end

--- # method Gtk.Widget:get_requisition()
---
--- Retrieves the widget’s requisition.
--- 
--- This function should only be used by widget implementations in
--- order to figure whether the widget’s requisition has actually
--- changed after some internal state change (so that they can call
--- `gtk_widget_queue_resize()` instead of `gtk_widget_queue_draw()`).
--- 
--- Normally, `gtk_widget_size_request()` should be used.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param requisition Gtk.Requisition # a pointer to a `GtkRequisition` to copy to
---@return nil
function Gtk.Widget:get_requisition(requisition) end

--- # method Gtk.Widget:get_root_window()
---
--- Get the root window where this widget is located. This function can
--- only be called after the widget has been added to a widget
--- hierarchy with `GtkWindow` at the top.
--- 
--- The root window is useful for such purposes as creating a popup
--- `GdkWindow` associated with the window. In general, you should only
--- create display specific resources when a widget has been realized,
--- and you should free those resources when the widget is unrealized.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gdk.Window # the `GdkWindow` root window for the toplevel for this widget.
function Gtk.Widget:get_root_window() end

--- # method Gtk.Widget:get_scale_factor()
---
--- Retrieves the internal scale factor that maps from window coordinates
--- to the actual device pixels. On traditional systems this is 1, on
--- high density outputs, it can be a higher value (typically 2).
--- 
--- See `gdk_window_get_scale_factor()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return integer # the scale factor for `widget`
function Gtk.Widget:get_scale_factor() end

--- # method Gtk.Widget:get_screen()
---
--- Get the `GdkScreen` from the toplevel window associated with
--- this widget. This function can only be called after the widget
--- has been added to a widget hierarchy with a `GtkWindow`
--- at the top.
--- 
--- In general, you should only create screen specific
--- resources when a widget has been realized, and you should
--- free those resources when the widget is unrealized.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gdk.Screen # the `GdkScreen` for the toplevel for this widget.
function Gtk.Widget:get_screen() end

--- # method Gtk.Widget:get_sensitive()
---
--- Returns the widget’s sensitivity (in the sense of returning
--- the value that has been set using `gtk_widget_set_sensitive()`).
--- 
--- The effective sensitivity of a widget is however determined by both its
--- own and its parent widget’s sensitivity. See `gtk_widget_is_sensitive()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if the widget is sensitive
function Gtk.Widget:get_sensitive() end

--- # method Gtk.Widget:get_settings()
---
--- Gets the settings object holding the settings used for this widget.
--- 
--- Note that this function can only be called when the `GtkWidget`
--- is attached to a toplevel, since the settings object is specific
--- to a particular `GdkScreen`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.Settings # the relevant `GtkSettings` object
function Gtk.Widget:get_settings() end

--- # method Gtk.Widget:get_size_request()
---
--- Gets the size request that was explicitly set for the widget using
--- `gtk_widget_set_size_request()`. A value of -1 stored in `width` or
--- `height` indicates that that dimension has not been set explicitly
--- and the natural requisition of the widget will be used instead. See
--- `gtk_widget_set_size_request()`. To get the size a widget will
--- actually request, call `gtk_widget_get_preferred_size()` instead of
--- this function.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param width? integer # return location for width, or `nil`
---@param height? integer # return location for height, or `nil`
---@return nil
function Gtk.Widget:get_size_request(width, height) end

--- # method Gtk.Widget:get_state()
---
--- Returns the widget’s state. See `gtk_widget_set_state()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.StateType # the state of `widget`.
function Gtk.Widget:get_state() end

--- # method Gtk.Widget:get_state_flags()
---
--- Returns the widget state as a flag set. It is worth mentioning
--- that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
--- returned, that is, also based on parent insensitivity, even if
--- `widget` itself is sensitive.
--- 
--- Also note that if you are looking for a way to obtain the
--- `GtkStateFlags` to pass to a `GtkStyleContext` method, you
--- should look at `gtk_style_context_get_state()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.StateFlags # The state flags for widget
function Gtk.Widget:get_state_flags() end

--- # method Gtk.Widget:get_style()
---
--- Simply an accessor function that returns `widget`->style.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.Style # the widget’s `GtkStyle`
function Gtk.Widget:get_style() end

--- # method Gtk.Widget:get_style_context()
---
--- Returns the style context associated to `widget`. The returned object is
--- guaranteed to be the same for the lifetime of `widget`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.StyleContext # a `GtkStyleContext`. This memory is owned by `widget` and must not be freed.
function Gtk.Widget:get_style_context() end

--- # method Gtk.Widget:get_support_multidevice()
---
--- Returns `true` if `widget` is multiple pointer aware. See
--- `gtk_widget_set_support_multidevice()` for more information.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if `widget` is multidevice aware.
function Gtk.Widget:get_support_multidevice() end

--- # method Gtk.Widget:get_template_child()
---
--- Fetch an object build from the template XML for `widget_type` in this `widget` instance.
--- 
--- This will only report children which were previously declared with
--- `gtk_widget_class_bind_template_child_full()` or one of its
--- variants.
--- 
--- This function is only meant to be called for code which is private to the `widget_type` which
--- declared the child and is meant for language bindings which cannot easily make use
--- of the GObject structure offsets.
---
--- ---
---
---@param self Gtk.Widget # A `GtkWidget`
---@param widget_type Gtk.GType # The `GType` to get a template child for
---@param name string # The “id” of the child defined in the template XML
---@return GObject.Object # The object built in the template XML with the id `name`
function Gtk.Widget:get_template_child(widget_type, name) end

--- # method Gtk.Widget:get_tooltip_markup()
---
--- Gets the contents of the tooltip for `widget`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return string # the tooltip text, or `nil`. You should free the returned string with `g_free()` when done.
function Gtk.Widget:get_tooltip_markup() end

--- # method Gtk.Widget:get_tooltip_text()
---
--- Gets the contents of the tooltip for `widget`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return string # the tooltip text, or `nil`. You should free the returned string with `g_free()` when done.
function Gtk.Widget:get_tooltip_text() end

--- # method Gtk.Widget:get_tooltip_window()
---
--- Returns the `GtkWindow` of the current tooltip. This can be the
--- GtkWindow created by default, or the custom tooltip window set
--- using `gtk_widget_set_tooltip_window()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.Window # The `GtkWindow` of the current tooltip.
function Gtk.Widget:get_tooltip_window() end

--- # method Gtk.Widget:get_toplevel()
---
--- This function returns the topmost widget in the container hierarchy
--- `widget` is a part of. If `widget` has no parent widgets, it will be
--- returned as the topmost widget. No reference will be added to the
--- returned widget; it should not be unreferenced.
--- 
--- Note the difference in behavior vs. `gtk_widget_get_ancestor()`;
--- `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
--- would return
--- `nil` if `widget` wasn’t inside a toplevel window, and if the
--- window was inside a `GtkWindow`-derived widget which was in turn
--- inside the toplevel `GtkWindow`. While the second case may
--- seem unlikely, it actually happens when a `GtkPlug` is embedded
--- inside a `GtkSocket` within the same application.
--- 
--- To reliably find the toplevel `GtkWindow`, use
--- `gtk_widget_get_toplevel()` and call GTK_IS_WINDOW()
--- on the result. For instance, to get the title of a widget's toplevel
--- window, one might use:
--- ```c
--- static const char *
--- get_widget_toplevel_title (GtkWidget *widget)
--- {
---   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
---   if (GTK_IS_WINDOW (toplevel))
---     {
---       return gtk_window_get_title (GTK_WINDOW (toplevel));
---     }
--- 
---   return NULL;
--- }
--- ```
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.Widget # the topmost ancestor of `widget`, or `widget` itself if there’s no ancestor.
function Gtk.Widget:get_toplevel() end

--- # method Gtk.Widget:get_valign()
---
--- Gets the value of the `GtkWidget`:valign property.
--- 
--- For backwards compatibility reasons this method will never return
--- %GTK_ALIGN_BASELINE, but instead it will convert it to
--- %GTK_ALIGN_FILL. If your widget want to support baseline aligned
--- children it must use `gtk_widget_get_valign_with_baseline()`, or
--- `g_object_get (widget, "valign", &value, NULL)`, which will
--- also report the true value.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.Align # the vertical alignment of `widget`, ignoring baseline alignment
function Gtk.Widget:get_valign() end

--- # method Gtk.Widget:get_valign_with_baseline()
---
--- Gets the value of the `GtkWidget`:valign property, including
--- %GTK_ALIGN_BASELINE.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.Align # the vertical alignment of `widget`
function Gtk.Widget:get_valign_with_baseline() end

--- # method Gtk.Widget:get_vexpand()
---
--- Gets whether the widget would like any available extra vertical
--- space.
--- 
--- See `gtk_widget_get_hexpand()` for more detail.
---
--- ---
---
---@param self Gtk.Widget # the widget
---@return (boolean|nil) # whether vexpand flag is set
function Gtk.Widget:get_vexpand() end

--- # method Gtk.Widget:get_vexpand_set()
---
--- Gets whether `gtk_widget_set_vexpand()` has been used to
--- explicitly set the expand flag on this widget.
--- 
--- See `gtk_widget_get_hexpand_set()` for more detail.
---
--- ---
---
---@param self Gtk.Widget # the widget
---@return (boolean|nil) # whether vexpand has been explicitly set
function Gtk.Widget:get_vexpand_set() end

--- # method Gtk.Widget:get_visible()
---
--- Determines whether the widget is visible. If you want to
--- take into account whether the widget’s parent is also marked as
--- visible, use `gtk_widget_is_visible()` instead.
--- 
--- This function does not check if the widget is obscured in any way.
--- 
--- See `gtk_widget_set_visible()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if the widget is visible
function Gtk.Widget:get_visible() end

--- # method Gtk.Widget:get_visual()
---
--- Gets the visual that will be used to render `widget`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gdk.Visual # the visual for `widget`
function Gtk.Widget:get_visual() end

--- # method Gtk.Widget:get_window()
---
--- Returns the widget’s window if it is realized, `nil` otherwise
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gdk.Window # `widget`’s window.
function Gtk.Widget:get_window() end

--- # method Gtk.Widget:grab_add()
---
--- Makes `widget` the current grabbed widget.
--- 
--- This means that interaction with other widgets in the same
--- application is blocked and mouse as well as keyboard events
--- are delivered to this widget.
--- 
--- If `widget` is not sensitive, it is not set as the current
--- grabbed widget and this function does nothing.
---
--- ---
---
---@param self Gtk.Widget # The widget that grabs keyboard and pointer events
---@return nil
function Gtk.Widget:grab_add() end

--- # method Gtk.Widget:grab_default()
---
--- Causes `widget` to become the default widget. `widget` must be able to be
--- a default widget; typically you would ensure this yourself
--- by calling `gtk_widget_set_can_default()` with a `true` value.
--- The default widget is activated when
--- the user presses Enter in a window. Default widgets must be
--- activatable, that is, `gtk_widget_activate()` should affect them. Note
--- that `GtkEntry` widgets require the “activates-default” property
--- set to `true` before they activate the default widget when Enter
--- is pressed and the `GtkEntry` is focused.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:grab_default() end

--- # method Gtk.Widget:grab_focus()
---
--- Causes `widget` to have the keyboard focus for the `GtkWindow` it's
--- inside. `widget` must be a focusable widget, such as a `GtkEntry`;
--- something like `GtkFrame` won’t work.
--- 
--- More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
--- `gtk_widget_set_can_focus()` to modify that flag.
--- 
--- The widget also needs to be realized and mapped. This is indicated by the
--- related signals. Grabbing the focus immediately after creating the widget
--- will likely fail and cause critical warnings.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:grab_focus() end

--- # method Gtk.Widget:grab_remove()
---
--- Removes the grab from the given widget.
--- 
--- You have to pair calls to `gtk_grab_add()` and `gtk_grab_remove()`.
--- 
--- If `widget` does not have the grab, this function does nothing.
---
--- ---
---
---@param self Gtk.Widget # The widget which gives up the grab
---@return nil
function Gtk.Widget:grab_remove() end

--- # method Gtk.Widget:has_default()
---
--- Determines whether `widget` is the current default widget within its
--- toplevel. See `gtk_widget_set_can_default()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if `widget` is the current default widget within its toplevel, `false` otherwise
function Gtk.Widget:has_default() end

--- # method Gtk.Widget:has_focus()
---
--- Determines if the widget has the global input focus. See
--- `gtk_widget_is_focus()` for the difference between having the global
--- input focus, and only having the focus within a toplevel.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if the widget has the global input focus.
function Gtk.Widget:has_focus() end

--- # method Gtk.Widget:has_grab()
---
--- Determines whether the widget is currently grabbing events, so it
--- is the only widget receiving input events (keyboard and mouse).
--- 
--- See also `gtk_grab_add()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if the widget is in the grab_widgets stack
function Gtk.Widget:has_grab() end

--- # method Gtk.Widget:has_rc_style()
---
--- Determines if the widget style has been looked up through the rc mechanism.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if the widget has been looked up through the rc mechanism, `false` otherwise.
function Gtk.Widget:has_rc_style() end

--- # method Gtk.Widget:has_screen()
---
--- Checks whether there is a `GdkScreen` is associated with
--- this widget. All toplevel widgets have an associated
--- screen, and all widgets added into a hierarchy with a toplevel
--- window at the top.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if there is a `GdkScreen` associated with the widget.
function Gtk.Widget:has_screen() end

--- # method Gtk.Widget:has_visible_focus()
---
--- Determines if the widget should show a visible indication that
--- it has the global input focus. This is a convenience function for
--- use in ::draw handlers that takes into account whether focus
--- indication should currently be shown in the toplevel window of
--- `widget`. See `gtk_window_get_focus_visible()` for more information
--- about focus indication.
--- 
--- To find out if the widget has the global input focus, use
--- `gtk_widget_has_focus()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if the widget should display a “focus rectangle”
function Gtk.Widget:has_visible_focus() end

--- # method Gtk.Widget:hide()
---
--- Reverses the effects of `gtk_widget_show()`, causing the widget to be
--- hidden (invisible to the user).
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:hide() end

--- # method Gtk.Widget:hide_on_delete()
---
--- Utility function; intended to be connected to the `GtkWidget`::delete-event
--- signal on a `GtkWindow`. The function calls `gtk_widget_hide()` on its
--- argument, then returns `true`. If connected to ::delete-event, the
--- result is that clicking the close button for a window (on the
--- window frame, top right corner usually) will hide but not destroy
--- the window. By default, GTK+ destroys windows when ::delete-event
--- is received.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true`
function Gtk.Widget:hide_on_delete() end

--- # method Gtk.Widget:in_destruction()
---
--- Returns whether the widget is currently being destroyed.
--- This information can sometimes be used to avoid doing
--- unnecessary work.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if `widget` is being destroyed
function Gtk.Widget:in_destruction() end

--- # method Gtk.Widget:init_template()
---
--- Creates and initializes child widgets defined in templates. This
--- function must be called in the instance initializer for any
--- class which assigned itself a template using `gtk_widget_class_set_template()`
--- 
--- It is important to call this function in the instance initializer
--- of a `GtkWidget` subclass and not in `GObject`.`constructed()` or
--- `GObject`.`constructor()` for two reasons.
--- 
--- One reason is that generally derived widgets will assume that parent
--- class composite widgets have been created in their instance
--- initializers.
--- 
--- Another reason is that when calling `g_object_new()` on a widget with
--- composite templates, it’s important to build the composite widgets
--- before the construct properties are set. Properties passed to `g_object_new()`
--- should take precedence over properties set in the private template XML.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:init_template() end

--- # method Gtk.Widget:input_shape_combine_region()
---
--- Sets an input shape for this widget’s GDK window. This allows for
--- windows which react to mouse click in a nonrectangular region, see
--- `gdk_window_input_shape_combine_region()` for more information.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param region? cairo.Region # shape to be added, or `nil` to remove an existing shape
---@return nil
function Gtk.Widget:input_shape_combine_region(region) end

--- # method Gtk.Widget:insert_action_group()
---
--- Inserts `group` into `widget`. Children of `widget` that implement
--- `GtkActionable` can then be associated with actions in `group` by
--- setting their “action-name” to
--- `prefix`.`action-name`.
--- 
--- If `group` is `nil`, a previously inserted group for `name` is removed
--- from `widget`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param name string # the prefix for actions in `group`
---@param group? Gio.ActionGroup # a `GActionGroup`, or `nil`
---@return nil
function Gtk.Widget:insert_action_group(name, group) end

--- # method Gtk.Widget:intersect()
---
--- Computes the intersection of a `widget`’s area and `area`, storing
--- the intersection in `intersection`, and returns `true` if there was
--- an intersection.  `intersection` may be `nil` if you’re only
--- interested in whether there was an intersection.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param area Gdk.Rectangle # a rectangle
---@param intersection? Gdk.Rectangle # rectangle to store intersection of `widget` and `area`
---@return (boolean|nil) # `true` if there was an intersection
function Gtk.Widget:intersect(area, intersection) end

--- # method Gtk.Widget:is_ancestor()
---
--- Determines whether `widget` is somewhere inside `ancestor`, possibly with
--- intermediate containers.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param ancestor Gtk.Widget # another `GtkWidget`
---@return (boolean|nil) # `true` if `ancestor` contains `widget` as a child, grandchild, great grandchild, etc.
function Gtk.Widget:is_ancestor(ancestor) end

--- # method Gtk.Widget:is_composited()
---
--- Whether `widget` can rely on having its alpha channel
--- drawn correctly. On X11 this function returns whether a
--- compositing manager is running for `widget`’s screen.
--- 
--- Please note that the semantics of this call will change
--- in the future if used on a widget that has a composited
--- window in its hierarchy (as set by `gdk_window_set_composited()`).
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if the widget can rely on its alpha channel being drawn correctly.
function Gtk.Widget:is_composited() end

--- # method Gtk.Widget:is_drawable()
---
--- Determines whether `widget` can be drawn to. A widget can be drawn
--- to if it is mapped and visible.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if `widget` is drawable, `false` otherwise
function Gtk.Widget:is_drawable() end

--- # method Gtk.Widget:is_focus()
---
--- Determines if the widget is the focus widget within its
--- toplevel. (This does not mean that the `GtkWidget`:has-focus property is
--- necessarily set; `GtkWidget`:has-focus will only be set if the
--- toplevel widget additionally has the global input focus.)
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if the widget is the focus widget.
function Gtk.Widget:is_focus() end

--- # method Gtk.Widget:is_sensitive()
---
--- Returns the widget’s effective sensitivity, which means
--- it is sensitive itself and also its parent widget is sensitive
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if the widget is effectively sensitive
function Gtk.Widget:is_sensitive() end

--- # method Gtk.Widget:is_toplevel()
---
--- Determines whether `widget` is a toplevel widget.
--- 
--- Currently only `GtkWindow` and `GtkInvisible` (and out-of-process
--- `GtkPlugs`) are toplevel widgets. Toplevel widgets have no parent
--- widget.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if `widget` is a toplevel, `false` otherwise
function Gtk.Widget:is_toplevel() end

--- # method Gtk.Widget:is_visible()
---
--- Determines whether the widget and all its parents are marked as
--- visible.
--- 
--- This function does not check if the widget is obscured in any way.
--- 
--- See also `gtk_widget_get_visible()` and `gtk_widget_set_visible()`
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return (boolean|nil) # `true` if the widget and all its parents are visible
function Gtk.Widget:is_visible() end

--- # method Gtk.Widget:keynav_failed()
---
--- This function should be called whenever keyboard navigation within
--- a single widget hits a boundary. The function emits the
--- `GtkWidget`::keynav-failed signal on the widget and its return
--- value should be interpreted in a way similar to the return value of
--- `gtk_widget_child_focus()`:
--- 
--- When `true` is returned, stay in the widget, the failed keyboard
--- navigation is OK and/or there is nowhere we can/should move the
--- focus to.
--- 
--- When `false` is returned, the caller should continue with keyboard
--- navigation outside the widget, e.g. by calling
--- `gtk_widget_child_focus()` on the widget’s toplevel.
--- 
--- The default ::keynav-failed handler returns `false` for
--- %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
--- values of `GtkDirectionType` it returns `true`.
--- 
--- Whenever the default handler returns `true`, it also calls
--- `gtk_widget_error_bell()` to notify the user of the failed keyboard
--- navigation.
--- 
--- A use case for providing an own implementation of ::keynav-failed
--- (either by connecting to it or by overriding it) would be a row of
--- `GtkEntry` widgets where the user should be able to navigate the
--- entire row with the cursor keys, as e.g. known from user interfaces
--- that require entering license keys.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param direction Gtk.DirectionType # direction of focus movement
---@return (boolean|nil) # `true` if stopping keyboard navigation is fine, `false` if the emitting widget should try to handle the keyboard navigation attempt in its parent container(s).
function Gtk.Widget:keynav_failed(direction) end

--- # method Gtk.Widget:list_accel_closures()
---
--- Lists the closures used by `widget` for accelerator group connections
--- with `gtk_accel_group_connect_by_path()` or `gtk_accel_group_connect()`.
--- The closures can be used to monitor accelerator changes on `widget`,
--- by connecting to the `GtkAccelGroup`::accel-changed signal of the
--- `GtkAccelGroup` of a closure which can be found out with
--- `gtk_accel_group_from_accel_closure()`.
---
--- ---
---
---@param self Gtk.Widget # widget to list accelerator closures for
---@return GObject.Closure[] # a newly allocated `GList` of closures
function Gtk.Widget:list_accel_closures() end

--- # method Gtk.Widget:list_action_prefixes()
---
--- Retrieves a `nil`-terminated array of strings containing the prefixes of
--- `GActionGroup`'s available to `widget`.
---
--- ---
---
---@param self Gtk.Widget # A `GtkWidget`
---@return unknown[] # a `nil`-terminated array of strings.
function Gtk.Widget:list_action_prefixes() end

--- # method Gtk.Widget:list_mnemonic_labels()
---
--- Returns a newly allocated list of the widgets, normally labels, for
--- which this widget is the target of a mnemonic (see for example,
--- `gtk_label_set_mnemonic_widget()`).
--- 
--- The widgets in the list are not individually referenced. If you
--- want to iterate through the list and perform actions involving
--- callbacks that might destroy the widgets, you
--- must call `g_list_foreach (result,
--- (GFunc)g_object_ref, NULL)` first, and then unref all the
--- widgets afterwards.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return Gtk.Widget[] # the list of mnemonic labels; free this list with `g_list_free()` when you are done with it.
function Gtk.Widget:list_mnemonic_labels() end

--- # method Gtk.Widget:map()
---
--- This function is only for use in widget implementations. Causes
--- a widget to be mapped if it isn’t already.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:map() end

--- # method Gtk.Widget:mnemonic_activate()
---
--- Emits the `GtkWidget`::mnemonic-activate signal.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param group_cycling (boolean|nil) # `true` if there are other widgets with the same mnemonic
---@return (boolean|nil) # `true` if the signal has been handled
function Gtk.Widget:mnemonic_activate(group_cycling) end

--- # method Gtk.Widget:modify_base()
---
--- Sets the base color for a widget in a particular state.
--- All other style values are left untouched. The base color
--- is the background color used along with the text color
--- (see `gtk_widget_modify_text()`) for widgets such as `GtkEntry`
--- and `GtkTextView`. See also `gtk_widget_modify_style()`.
--- 
--- > Note that “no window” widgets (which have the %GTK_NO_WINDOW
--- > flag set) draw on their parent container’s window and thus may
--- > not draw any background themselves. This is the case for e.g.
--- > `GtkLabel`.
--- >
--- > To modify the background of such widgets, you have to set the
--- > base color on their parent; if you want to set the background
--- > of a rectangular area around a label, try placing the label in
--- > a `GtkEventBox` widget and setting the base color on that.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param state Gtk.StateType # the state for which to set the base color
---@param color? Gdk.Color # the color to assign (does not need to be allocated), or `nil` to undo the effect of previous calls to of `gtk_widget_modify_base()`.
---@return nil
function Gtk.Widget:modify_base(state, color) end

--- # method Gtk.Widget:modify_bg()
---
--- Sets the background color for a widget in a particular state.
--- 
--- All other style values are left untouched.
--- See also `gtk_widget_modify_style()`.
--- 
--- > Note that “no window” widgets (which have the %GTK_NO_WINDOW
--- > flag set) draw on their parent container’s window and thus may
--- > not draw any background themselves. This is the case for e.g.
--- > `GtkLabel`.
--- >
--- > To modify the background of such widgets, you have to set the
--- > background color on their parent; if you want to set the background
--- > of a rectangular area around a label, try placing the label in
--- > a `GtkEventBox` widget and setting the background color on that.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param state Gtk.StateType # the state for which to set the background color
---@param color? Gdk.Color # the color to assign (does not need to be allocated), or `nil` to undo the effect of previous calls to of `gtk_widget_modify_bg()`.
---@return nil
function Gtk.Widget:modify_bg(state, color) end

--- # method Gtk.Widget:modify_cursor()
---
--- Sets the cursor color to use in a widget, overriding the `GtkWidget`
--- cursor-color and secondary-cursor-color
--- style properties.
--- 
--- All other style values are left untouched.
--- See also `gtk_widget_modify_style()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param primary? Gdk.Color # the color to use for primary cursor (does not need to be allocated), or `nil` to undo the effect of previous calls to of `gtk_widget_modify_cursor()`.
---@param secondary? Gdk.Color # the color to use for secondary cursor (does not need to be allocated), or `nil` to undo the effect of previous calls to of `gtk_widget_modify_cursor()`.
---@return nil
function Gtk.Widget:modify_cursor(primary, secondary) end

--- # method Gtk.Widget:modify_fg()
---
--- Sets the foreground color for a widget in a particular state.
--- 
--- All other style values are left untouched.
--- See also `gtk_widget_modify_style()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param state Gtk.StateType # the state for which to set the foreground color
---@param color? Gdk.Color # the color to assign (does not need to be allocated), or `nil` to undo the effect of previous calls to of `gtk_widget_modify_fg()`.
---@return nil
function Gtk.Widget:modify_fg(state, color) end

--- # method Gtk.Widget:modify_font()
---
--- Sets the font to use for a widget.
--- 
--- All other style values are left untouched.
--- See also `gtk_widget_modify_style()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param font_desc? Pango.FontDescription # the font description to use, or `nil` to undo the effect of previous calls to `gtk_widget_modify_font()`
---@return nil
function Gtk.Widget:modify_font(font_desc) end

--- # method Gtk.Widget:modify_style()
---
--- Modifies style values on the widget.
--- 
--- Modifications made using this technique take precedence over
--- style values set via an RC file, however, they will be overridden
--- if a style is explicitly set on the widget using `gtk_widget_set_style()`.
--- The `GtkRcStyle`-struct is designed so each field can either be
--- set or unset, so it is possible, using this function, to modify some
--- style values and leave the others unchanged.
--- 
--- Note that modifications made with this function are not cumulative
--- with previous calls to `gtk_widget_modify_style()` or with such
--- functions as `gtk_widget_modify_fg()`. If you wish to retain
--- previous values, you must first call `gtk_widget_get_modifier_style()`,
--- make your modifications to the returned style, then call
--- `gtk_widget_modify_style()` with that style. On the other hand,
--- if you first call `gtk_widget_modify_style()`, subsequent calls
--- to such functions `gtk_widget_modify_fg()` will have a cumulative
--- effect with the initial modifications.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param style Gtk.RcStyle # the `GtkRcStyle`-struct holding the style modifications
---@return nil
function Gtk.Widget:modify_style(style) end

--- # method Gtk.Widget:modify_text()
---
--- Sets the text color for a widget in a particular state.
--- 
--- All other style values are left untouched.
--- The text color is the foreground color used along with the
--- base color (see `gtk_widget_modify_base()`) for widgets such
--- as `GtkEntry` and `GtkTextView`.
--- See also `gtk_widget_modify_style()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param state Gtk.StateType # the state for which to set the text color
---@param color? Gdk.Color # the color to assign (does not need to be allocated), or `nil` to undo the effect of previous calls to of `gtk_widget_modify_text()`.
---@return nil
function Gtk.Widget:modify_text(state, color) end

--- # method Gtk.Widget:override_background_color()
---
--- Sets the background color to use for a widget.
--- 
--- All other style values are left untouched.
--- See `gtk_widget_override_color()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param state Gtk.StateFlags # the state for which to set the background color
---@param color? Gdk.RGBA # the color to assign, or `nil` to undo the effect of previous calls to `gtk_widget_override_background_color()`
---@return nil
function Gtk.Widget:override_background_color(state, color) end

--- # method Gtk.Widget:override_color()
---
--- Sets the color to use for a widget.
--- 
--- All other style values are left untouched.
--- 
--- This function does not act recursively. Setting the color of a
--- container does not affect its children. Note that some widgets that
--- you may not think of as containers, for instance `GtkButtons`,
--- are actually containers.
--- 
--- This API is mostly meant as a quick way for applications to
--- change a widget appearance. If you are developing a widgets
--- library and intend this change to be themeable, it is better
--- done by setting meaningful CSS classes in your
--- widget/container implementation through `gtk_style_context_add_class()`.
--- 
--- This way, your widget library can install a `GtkCssProvider`
--- with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
--- to provide a default styling for those widgets that need so, and
--- this theming may fully overridden by the user’s theme.
--- 
--- Note that for complex widgets this may bring in undesired
--- results (such as uniform background color everywhere), in
--- these cases it is better to fully style such widgets through a
--- `GtkCssProvider` with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
--- priority.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param state Gtk.StateFlags # the state for which to set the color
---@param color? Gdk.RGBA # the color to assign, or `nil` to undo the effect of previous calls to `gtk_widget_override_color()`
---@return nil
function Gtk.Widget:override_color(state, color) end

--- # method Gtk.Widget:override_cursor()
---
--- Sets the cursor color to use in a widget, overriding the
--- cursor-color and secondary-cursor-color
--- style properties. All other style values are left untouched.
--- See also `gtk_widget_modify_style()`.
--- 
--- Note that the underlying properties have the `GdkColor` type,
--- so the alpha value in `primary` and `secondary` will be ignored.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param cursor? Gdk.RGBA # the color to use for primary cursor (does not need to be allocated), or `nil` to undo the effect of previous calls to of `gtk_widget_override_cursor()`.
---@param secondary_cursor? Gdk.RGBA # the color to use for secondary cursor (does not need to be allocated), or `nil` to undo the effect of previous calls to of `gtk_widget_override_cursor()`.
---@return nil
function Gtk.Widget:override_cursor(cursor, secondary_cursor) end

--- # method Gtk.Widget:override_font()
---
--- Sets the font to use for a widget. All other style values are
--- left untouched. See `gtk_widget_override_color()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param font_desc? Pango.FontDescription # the font description to use, or `nil` to undo the effect of previous calls to `gtk_widget_override_font()`
---@return nil
function Gtk.Widget:override_font(font_desc) end

--- # method Gtk.Widget:override_symbolic_color()
---
--- Sets a symbolic color for a widget.
--- 
--- All other style values are left untouched.
--- See `gtk_widget_override_color()` for overriding the foreground
--- or background color.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param name string # the name of the symbolic color to modify
---@param color? Gdk.RGBA # the color to assign (does not need to be allocated), or `nil` to undo the effect of previous calls to `gtk_widget_override_symbolic_color()`
---@return nil
function Gtk.Widget:override_symbolic_color(name, color) end

--- # method Gtk.Widget:path()
---
--- Obtains the full path to `widget`. The path is simply the name of a
--- widget and all its parents in the container hierarchy, separated by
--- periods. The name of a widget comes from
--- `gtk_widget_get_name()`. Paths are used to apply styles to a widget
--- in gtkrc configuration files. Widget names are the type of the
--- widget by default (e.g. “GtkButton”) or can be set to an
--- application-specific value with `gtk_widget_set_name()`. By setting
--- the name of a widget, you allow users or theme authors to apply
--- styles to that specific widget in their gtkrc
--- file. `path_reversed_p` fills in the path in reverse order,
--- i.e. starting with `widget`’s name instead of starting with the name
--- of `widget`’s outermost ancestor.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param path_length? integer # location to store length of the path, or `nil`
---@param path? string # location to store allocated path string, or `nil`
---@param path_reversed? string # location to store allocated reverse path string, or `nil`
---@return nil
function Gtk.Widget:path(path_length, path, path_reversed) end

--- # method Gtk.Widget:queue_allocate()
---
--- This function is only for use in widget implementations.
--- 
--- Flags the widget for a rerun of the GtkWidgetClass::size_allocate
--- function. Use this function instead of `gtk_widget_queue_resize()`
--- when the `widget`'s size request didn't change but it wants to
--- reposition its contents.
--- 
--- An example user of this function is `gtk_widget_set_halign()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:queue_allocate() end

--- # method Gtk.Widget:queue_compute_expand()
---
--- Mark `widget` as needing to recompute its expand flags. Call
--- this function when setting legacy expand child properties
--- on the child of a container.
--- 
--- See `gtk_widget_compute_expand()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:queue_compute_expand() end

--- # method Gtk.Widget:queue_draw()
---
--- Equivalent to calling `gtk_widget_queue_draw_area()` for the
--- entire area of a widget.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:queue_draw() end

--- # method Gtk.Widget:queue_draw_area()
---
--- Convenience function that calls `gtk_widget_queue_draw_region()` on
--- the region created from the given coordinates.
--- 
--- The region here is specified in widget coordinates.
--- Widget coordinates are a bit odd; for historical reasons, they are
--- defined as `widget`->window coordinates for widgets that return `true` for
--- `gtk_widget_get_has_window()`, and are relative to `widget`->allocation.x,
--- `widget`->allocation.y otherwise.
--- 
--- `width` or `height` may be 0, in this case this function does
--- nothing. Negative values for `width` and `height` are not allowed.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param x integer # x coordinate of upper-left corner of rectangle to redraw
---@param y integer # y coordinate of upper-left corner of rectangle to redraw
---@param width integer # width of region to draw
---@param height integer # height of region to draw
---@return nil
function Gtk.Widget:queue_draw_area(x, y, width, height) end

--- # method Gtk.Widget:queue_draw_region()
---
--- Invalidates the area of `widget` defined by `region` by calling
--- `gdk_window_invalidate_region()` on the widget’s window and all its
--- child windows. Once the main loop becomes idle (after the current
--- batch of events has been processed, roughly), the window will
--- receive expose events for the union of all regions that have been
--- invalidated.
--- 
--- Normally you would only use this function in widget
--- implementations. You might also use it to schedule a redraw of a
--- `GtkDrawingArea` or some portion thereof.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param region cairo.Region # region to draw
---@return nil
function Gtk.Widget:queue_draw_region(region) end

--- # method Gtk.Widget:queue_resize()
---
--- This function is only for use in widget implementations.
--- Flags a widget to have its size renegotiated; should
--- be called when a widget for some reason has a new size request.
--- For example, when you change the text in a `GtkLabel`, `GtkLabel`
--- queues a resize to ensure there’s enough space for the new text.
--- 
--- Note that you cannot call `gtk_widget_queue_resize()` on a widget
--- from inside its implementation of the GtkWidgetClass::size_allocate
--- virtual method. Calls to `gtk_widget_queue_resize()` from inside
--- GtkWidgetClass::size_allocate will be silently ignored.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:queue_resize() end

--- # method Gtk.Widget:queue_resize_no_redraw()
---
--- This function works like `gtk_widget_queue_resize()`,
--- except that the widget is not invalidated.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:queue_resize_no_redraw() end

--- # method Gtk.Widget:realize()
---
--- Creates the GDK (windowing system) resources associated with a
--- widget.  For example, `widget`->window will be created when a widget
--- is realized.  Normally realization happens implicitly; if you show
--- a widget and all its parent containers, then the widget will be
--- realized and mapped automatically.
--- 
--- Realizing a widget requires all
--- the widget’s parent widgets to be realized; calling
--- `gtk_widget_realize()` realizes the widget’s parents in addition to
--- `widget` itself. If a widget is not yet inside a toplevel window
--- when you realize it, bad things will happen.
--- 
--- This function is primarily used in widget implementations, and
--- isn’t very useful otherwise. Many times when you think you might
--- need it, a better approach is to connect to a signal that will be
--- called after the widget is realized automatically, such as
--- `GtkWidget`::draw. Or simply g_signal_connect () to the
--- `GtkWidget`::realize signal.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:realize() end

--- # method Gtk.Widget:region_intersect()
---
--- Computes the intersection of a `widget`’s area and `region`, returning
--- the intersection. The result may be empty, use `cairo_region_is_empty()` to
--- check.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param region cairo.Region # a `cairo_region_t`, in the same coordinate system as `widget`->allocation. That is, relative to `widget`->window for widgets which return `false` from `gtk_widget_get_has_window()`; relative to the parent window of `widget`->window otherwise.
---@return cairo.Region # A newly allocated region holding the intersection of `widget` and `region`.
function Gtk.Widget:region_intersect(region) end

--- # method Gtk.Widget:register_window()
---
--- Registers a `GdkWindow` with the widget and sets it up so that
--- the widget receives events for it. Call `gtk_widget_unregister_window()`
--- when destroying the window.
--- 
--- Before 3.8 you needed to call `gdk_window_set_user_data()` directly to set
--- this up. This is now deprecated and you should use `gtk_widget_register_window()`
--- instead. Old code will keep working as is, although some new features like
--- transparency might not work perfectly.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param window Gdk.Window # a `GdkWindow`
---@return nil
function Gtk.Widget:register_window(window) end

--- # method Gtk.Widget:remove_accelerator()
---
--- Removes an accelerator from `widget`, previously installed with
--- `gtk_widget_add_accelerator()`.
---
--- ---
---
---@param self Gtk.Widget # widget to install an accelerator on
---@param accel_group Gtk.AccelGroup # accel group for this widget
---@param accel_key integer # GDK keyval of the accelerator
---@param accel_mods Gdk.ModifierType # modifier key combination of the accelerator
---@return (boolean|nil) # whether an accelerator was installed and could be removed
function Gtk.Widget:remove_accelerator(accel_group, accel_key, accel_mods) end

--- # method Gtk.Widget:remove_mnemonic_label()
---
--- Removes a widget from the list of mnemonic labels for
--- this widget. (See `gtk_widget_list_mnemonic_labels()`). The widget
--- must have previously been added to the list with
--- `gtk_widget_add_mnemonic_label()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param label Gtk.Widget # a `GtkWidget` that was previously set as a mnemonic label for `widget` with `gtk_widget_add_mnemonic_label()`.
---@return nil
function Gtk.Widget:remove_mnemonic_label(label) end

--- # method Gtk.Widget:remove_tick_callback()
---
--- Removes a tick callback previously registered with
--- `gtk_widget_add_tick_callback()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param id integer # an id returned by `gtk_widget_add_tick_callback()`
---@return nil
function Gtk.Widget:remove_tick_callback(id) end

--- # method Gtk.Widget:render_icon()
---
--- A convenience function that uses the theme settings for `widget`
--- to look up `stock_id` and render it to a pixbuf. `stock_id` should
--- be a stock icon ID such as `GTK_STOCK_OPEN` or `GTK_STOCK_OK`. `size`
--- should be a size such as `GTK_ICON_SIZE_MENU`. `detail` should be a
--- string that identifies the widget or code doing the rendering, so
--- that theme engines can special-case rendering for that widget or
--- code.
--- 
--- The pixels in the returned `GdkPixbuf` are shared with the rest of
--- the application and should not be modified. The pixbuf should be
--- freed after use with `g_object_unref()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param stock_id string # a stock ID
---@param size integer # a stock size (`GtkIconSize`). A size of `(GtkIconSize)-1` means render at the size of the source and don’t scale (if there are multiple source sizes, GTK+ picks one of the available sizes).
---@param detail? string # render detail to pass to theme engine
---@return GdkPixbuf.Pixbuf # a new pixbuf, or `nil` if the stock ID wasn’t known
function Gtk.Widget:render_icon(stock_id, size, detail) end

--- # method Gtk.Widget:render_icon_pixbuf()
---
--- A convenience function that uses the theme engine and style
--- settings for `widget` to look up `stock_id` and render it to
--- a pixbuf. `stock_id` should be a stock icon ID such as
--- `GTK_STOCK_OPEN` or `GTK_STOCK_OK`. `size` should be a size
--- such as `GTK_ICON_SIZE_MENU`.
--- 
--- The pixels in the returned `GdkPixbuf` are shared with the rest of
--- the application and should not be modified. The pixbuf should be freed
--- after use with `g_object_unref()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param stock_id string # a stock ID
---@param size integer # a stock size (`GtkIconSize`). A size of `(GtkIconSize)-1` means render at the size of the source and don’t scale (if there are multiple source sizes, GTK+ picks one of the available sizes).
---@return GdkPixbuf.Pixbuf # a new pixbuf, or `nil` if the stock ID wasn’t known
function Gtk.Widget:render_icon_pixbuf(stock_id, size) end

--- # method Gtk.Widget:reparent()
---
--- Moves a widget from one `GtkContainer` to another, handling reference
--- count issues to avoid destroying the widget.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param new_parent Gtk.Widget # a `GtkContainer` to move the widget into
---@return nil
function Gtk.Widget:reparent(new_parent) end

--- # method Gtk.Widget:reset_rc_styles()
---
--- Reset the styles of `widget` and all descendents, so when
--- they are looked up again, they get the correct values
--- for the currently loaded RC file settings.
--- 
--- This function is not useful for applications.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`.
---@return nil
function Gtk.Widget:reset_rc_styles() end

--- # method Gtk.Widget:reset_style()
---
--- Updates the style context of `widget` and all descendants
--- by updating its widget path. `GtkContainers` may want
--- to use this on a child when reordering it in a way that a different
--- style might apply to it. See also `gtk_container_get_path_for_child()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:reset_style() end

--- # method Gtk.Widget:send_expose()
---
--- Very rarely-used function. This function is used to emit
--- an expose event on a widget. This function is not normally used
--- directly. The only time it is used is when propagating an expose
--- event to a windowless child widget (`gtk_widget_get_has_window()` is `false`),
--- and that is normally done using `gtk_container_propagate_draw()`.
--- 
--- If you want to force an area of a window to be redrawn,
--- use `gdk_window_invalidate_rect()` or `gdk_window_invalidate_region()`.
--- To cause the redraw to be done immediately, follow that call
--- with a call to `gdk_window_process_updates()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param event Gdk.Event # a expose `GdkEvent`
---@return integer # return from the event signal emission (`true` if the event was handled)
function Gtk.Widget:send_expose(event) end

--- # method Gtk.Widget:send_focus_change()
---
--- Sends the focus change `event` to `widget`
--- 
--- This function is not meant to be used by applications. The only time it
--- should be used is when it is necessary for a `GtkWidget` to assign focus
--- to a widget that is semantically owned by the first widget even though
--- it’s not a direct child - for instance, a search entry in a floating
--- window similar to the quick search in `GtkTreeView`.
--- 
--- An example of its usage is:
--- 
--- ```c
---   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
--- 
---   fevent->focus_change.type = GDK_FOCUS_CHANGE;
---   fevent->focus_change.in = TRUE;
---   fevent->focus_change.window = _gtk_widget_get_window (widget);
---   if (fevent->focus_change.window != NULL)
---     g_object_ref (fevent->focus_change.window);
--- 
---   gtk_widget_send_focus_change (widget, fevent);
--- 
---   gdk_event_free (event);
--- ```
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param event Gdk.Event # a `GdkEvent` of type GDK_FOCUS_CHANGE
---@return (boolean|nil) # the return value from the event signal emission: `true` if the event was handled, and `false` otherwise
function Gtk.Widget:send_focus_change(event) end

--- # method Gtk.Widget:set_accel_path()
---
--- Given an accelerator group, `accel_group`, and an accelerator path,
--- `accel_path`, sets up an accelerator in `accel_group` so whenever the
--- key binding that is defined for `accel_path` is pressed, `widget`
--- will be activated.  This removes any accelerators (for any
--- accelerator group) installed by previous calls to
--- `gtk_widget_set_accel_path()`. Associating accelerators with
--- paths allows them to be modified by the user and the modifications
--- to be saved for future use. (See `gtk_accel_map_save()`.)
--- 
--- This function is a low level function that would most likely
--- be used by a menu creation system like `GtkUIManager`. If you
--- use `GtkUIManager`, setting up accelerator paths will be done
--- automatically.
--- 
--- Even when you you aren’t using `GtkUIManager`, if you only want to
--- set up accelerators on menu items `gtk_menu_item_set_accel_path()`
--- provides a somewhat more convenient interface.
--- 
--- Note that `accel_path` string will be stored in a `GQuark`. Therefore, if you
--- pass a static string, you can save some memory by interning it first with
--- `g_intern_static_string()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param accel_path? string # path used to look up the accelerator
---@param accel_group? Gtk.AccelGroup # a `GtkAccelGroup`.
---@return nil
function Gtk.Widget:set_accel_path(accel_path, accel_group) end

--- # method Gtk.Widget:set_allocation()
---
--- Sets the widget’s allocation.  This should not be used
--- directly, but from within a widget’s size_allocate method.
--- 
--- The allocation set should be the “adjusted” or actual
--- allocation. If you’re implementing a `GtkContainer`, you want to use
--- `gtk_widget_size_allocate()` instead of `gtk_widget_set_allocation()`.
--- The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
--- allocation inside `gtk_widget_size_allocate()` to create an adjusted
--- allocation.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param allocation Gtk.Allocation # a pointer to a `GtkAllocation` to copy from
---@return nil
function Gtk.Widget:set_allocation(allocation) end

--- # method Gtk.Widget:set_app_paintable()
---
--- Sets whether the application intends to draw on the widget in
--- an `GtkWidget`::draw handler.
--- 
--- This is a hint to the widget and does not affect the behavior of
--- the GTK+ core; many widgets ignore this flag entirely. For widgets
--- that do pay attention to the flag, such as `GtkEventBox` and `GtkWindow`,
--- the effect is to suppress default themed drawing of the widget's
--- background. (Children of the widget will still be drawn.) The application
--- is then entirely responsible for drawing the widget background.
--- 
--- Note that the background is still drawn when the widget is mapped.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param app_paintable (boolean|nil) # `true` if the application will paint on the widget
---@return nil
function Gtk.Widget:set_app_paintable(app_paintable) end

--- # method Gtk.Widget:set_can_default()
---
--- Specifies whether `widget` can be a default widget. See
--- `gtk_widget_grab_default()` for details about the meaning of
--- “default”.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param can_default (boolean|nil) # whether or not `widget` can be a default widget.
---@return nil
function Gtk.Widget:set_can_default(can_default) end

--- # method Gtk.Widget:set_can_focus()
---
--- Specifies whether `widget` can own the input focus. See
--- `gtk_widget_grab_focus()` for actually setting the input focus on a
--- widget.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param can_focus (boolean|nil) # whether or not `widget` can own the input focus.
---@return nil
function Gtk.Widget:set_can_focus(can_focus) end

--- # method Gtk.Widget:set_child_visible()
---
--- Sets whether `widget` should be mapped along with its when its parent
--- is mapped and `widget` has been shown with `gtk_widget_show()`.
--- 
--- The child visibility can be set for widget before it is added to
--- a container with `gtk_widget_set_parent()`, to avoid mapping
--- children unnecessary before immediately unmapping them. However
--- it will be reset to its default state of `true` when the widget
--- is removed from a container.
--- 
--- Note that changing the child visibility of a widget does not
--- queue a resize on the widget. Most of the time, the size of
--- a widget is computed from all visible children, whether or
--- not they are mapped. If this is not the case, the container
--- can queue a resize itself.
--- 
--- This function is only useful for container implementations and
--- never should be called by an application.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param is_visible (boolean|nil) # if `true`, `widget` should be mapped along with its parent.
---@return nil
function Gtk.Widget:set_child_visible(is_visible) end

--- # method Gtk.Widget:set_clip()
---
--- Sets the widget’s clip.  This must not be used directly,
--- but from within a widget’s size_allocate method.
--- It must be called after `gtk_widget_set_allocation()` (or after chaining up
--- to the parent class), because that function resets the clip.
--- 
--- The clip set should be the area that `widget` draws on. If `widget` is a
--- `GtkContainer`, the area must contain all children's clips.
--- 
--- If this function is not called by `widget` during a ::size-allocate handler,
--- the clip will be set to `widget`'s allocation.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param clip Gtk.Allocation # a pointer to a `GtkAllocation` to copy from
---@return nil
function Gtk.Widget:set_clip(clip) end

--- # method Gtk.Widget:set_composite_name()
---
--- Sets a widgets composite name. The widget must be
--- a composite child of its parent; see `gtk_widget_push_composite_child()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`.
---@param name string # the name to set
---@return nil
function Gtk.Widget:set_composite_name(name) end

--- # method Gtk.Widget:set_device_enabled()
---
--- Enables or disables a `GdkDevice` to interact with `widget`
--- and all its children.
--- 
--- It does so by descending through the `GdkWindow` hierarchy
--- and enabling the same mask that is has for core events
--- (i.e. the one that `gdk_window_get_events()` returns).
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param device Gdk.Device # a `GdkDevice`
---@param enabled (boolean|nil) # whether to enable the device
---@return nil
function Gtk.Widget:set_device_enabled(device, enabled) end

--- # method Gtk.Widget:set_device_events()
---
--- Sets the device event mask (see `GdkEventMask`) for a widget. The event
--- mask determines which events a widget will receive from `device`. Keep
--- in mind that different widgets have different default event masks, and by
--- changing the event mask you may disrupt a widget’s functionality,
--- so be careful. This function must be called while a widget is
--- unrealized. Consider `gtk_widget_add_device_events()` for widgets that are
--- already realized, or if you want to preserve the existing event
--- mask. This function can’t be used with windowless widgets (which return
--- `false` from `gtk_widget_get_has_window()`);
--- to get events on those widgets, place them inside a `GtkEventBox`
--- and receive events on the event box.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param device Gdk.Device # a `GdkDevice`
---@param events Gdk.EventMask # event mask
---@return nil
function Gtk.Widget:set_device_events(device, events) end

--- # method Gtk.Widget:set_direction()
---
--- Sets the reading direction on a particular widget. This direction
--- controls the primary direction for widgets containing text,
--- and also the direction in which the children of a container are
--- packed. The ability to set the direction is present in order
--- so that correct localization into languages with right-to-left
--- reading directions can be done. Generally, applications will
--- let the default reading direction present, except for containers
--- where the containers are arranged in an order that is explicitly
--- visual rather than logical (such as buttons for text justification).
--- 
--- If the direction is set to %GTK_TEXT_DIR_NONE, then the value
--- set by `gtk_widget_set_default_direction()` will be used.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param dir Gtk.TextDirection # the new direction
---@return nil
function Gtk.Widget:set_direction(dir) end

--- # method Gtk.Widget:set_double_buffered()
---
--- Widgets are double buffered by default; you can use this function
--- to turn off the buffering. “Double buffered” simply means that
--- `gdk_window_begin_draw_frame()` and `gdk_window_end_draw_frame()` are called
--- automatically around expose events sent to the
--- widget. `gdk_window_begin_draw_frame()` diverts all drawing to a widget's
--- window to an offscreen buffer, and `gdk_window_end_draw_frame()` draws the
--- buffer to the screen. The result is that users see the window
--- update in one smooth step, and don’t see individual graphics
--- primitives being rendered.
--- 
--- In very simple terms, double buffered widgets don’t flicker,
--- so you would only use this function to turn off double buffering
--- if you had special needs and really knew what you were doing.
--- 
--- Note: if you turn off double-buffering, you have to handle
--- expose events, since even the clearing to the background color or
--- pixmap will not happen automatically (as it is done in
--- `gdk_window_begin_draw_frame()`).
--- 
--- In 3.10 GTK and GDK have been restructured for translucent drawing. Since
--- then expose events for double-buffered widgets are culled into a single
--- event to the toplevel GDK window. If you now unset double buffering, you
--- will cause a separate rendering pass for every widget. This will likely
--- cause rendering problems - in particular related to stacking - and usually
--- increases rendering times significantly.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param double_buffered (boolean|nil) # `true` to double-buffer a widget
---@return nil
function Gtk.Widget:set_double_buffered(double_buffered) end

--- # method Gtk.Widget:set_events()
---
--- Sets the event mask (see `GdkEventMask`) for a widget. The event
--- mask determines which events a widget will receive. Keep in mind
--- that different widgets have different default event masks, and by
--- changing the event mask you may disrupt a widget’s functionality,
--- so be careful. This function must be called while a widget is
--- unrealized. Consider `gtk_widget_add_events()` for widgets that are
--- already realized, or if you want to preserve the existing event
--- mask. This function can’t be used with widgets that have no window.
--- (See `gtk_widget_get_has_window()`).  To get events on those widgets,
--- place them inside a `GtkEventBox` and receive events on the event
--- box.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param events integer # event mask
---@return nil
function Gtk.Widget:set_events(events) end

--- # method Gtk.Widget:set_focus_on_click()
---
--- Sets whether the widget should grab focus when it is clicked with the mouse.
--- Making mouse clicks not grab focus is useful in places like toolbars where
--- you don’t want the keyboard focus removed from the main area of the
--- application.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param focus_on_click (boolean|nil) # whether the widget should grab focus when clicked with the mouse
---@return nil
function Gtk.Widget:set_focus_on_click(focus_on_click) end

--- # method Gtk.Widget:set_font_map()
---
--- Sets the font map to use for Pango rendering. When not set, the widget
--- will inherit the font map from its parent.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param font_map? Pango.FontMap # a `PangoFontMap`, or `nil` to unset any previously set font map
---@return nil
function Gtk.Widget:set_font_map(font_map) end

--- # method Gtk.Widget:set_font_options()
---
--- Sets the `cairo_font_options_t` used for Pango rendering in this widget.
--- When not set, the default font options for the `GdkScreen` will be used.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param options? cairo.FontOptions # a `cairo_font_options_t`, or `nil` to unset any previously set default font options.
---@return nil
function Gtk.Widget:set_font_options(options) end

--- # method Gtk.Widget:set_halign()
---
--- Sets the horizontal alignment of `widget`.
--- See the `GtkWidget`:halign property.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param align Gtk.Align # the horizontal alignment
---@return nil
function Gtk.Widget:set_halign(align) end

--- # method Gtk.Widget:set_has_tooltip()
---
--- Sets the has-tooltip property on `widget` to `has_tooltip`.  See
--- `GtkWidget`:has-tooltip for more information.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param has_tooltip (boolean|nil) # whether or not `widget` has a tooltip.
---@return nil
function Gtk.Widget:set_has_tooltip(has_tooltip) end

--- # method Gtk.Widget:set_has_window()
---
--- Specifies whether `widget` has a `GdkWindow` of its own. Note that
--- all realized widgets have a non-`nil` “window” pointer
--- (`gtk_widget_get_window()` never returns a `nil` window when a widget
--- is realized), but for many of them it’s actually the `GdkWindow` of
--- one of its parent widgets. Widgets that do not create a %window for
--- themselves in `GtkWidget`::realize must announce this by
--- calling this function with `has_window` = `false`.
--- 
--- This function should only be called by widget implementations,
--- and they should call it in their `init()` function.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param has_window (boolean|nil) # whether or not `widget` has a window.
---@return nil
function Gtk.Widget:set_has_window(has_window) end

--- # method Gtk.Widget:set_hexpand()
---
--- Sets whether the widget would like any available extra horizontal
--- space. When a user resizes a `GtkWindow`, widgets with expand=TRUE
--- generally receive the extra space. For example, a list or
--- scrollable area or document in your window would often be set to
--- expand.
--- 
--- Call this function to set the expand flag if you would like your
--- widget to become larger horizontally when the window has extra
--- room.
--- 
--- By default, widgets automatically expand if any of their children
--- want to expand. (To see if a widget will automatically expand given
--- its current children and state, call `gtk_widget_compute_expand()`. A
--- container can decide how the expandability of children affects the
--- expansion of the container by overriding the compute_expand virtual
--- method on `GtkWidget`.).
--- 
--- Setting hexpand explicitly with this function will override the
--- automatic expand behavior.
--- 
--- This function forces the widget to expand or not to expand,
--- regardless of children.  The override occurs because
--- `gtk_widget_set_hexpand()` sets the hexpand-set property (see
--- `gtk_widget_set_hexpand_set()`) which causes the widget’s hexpand
--- value to be used, rather than looking at children and widget state.
---
--- ---
---
---@param self Gtk.Widget # the widget
---@param expand (boolean|nil) # whether to expand
---@return nil
function Gtk.Widget:set_hexpand(expand) end

--- # method Gtk.Widget:set_hexpand_set()
---
--- Sets whether the hexpand flag (see `gtk_widget_get_hexpand()`) will
--- be used.
--- 
--- The hexpand-set property will be set automatically when you call
--- `gtk_widget_set_hexpand()` to set hexpand, so the most likely
--- reason to use this function would be to unset an explicit expand
--- flag.
--- 
--- If hexpand is set, then it overrides any computed
--- expand value based on child widgets. If hexpand is not
--- set, then the expand value depends on whether any
--- children of the widget would like to expand.
--- 
--- There are few reasons to use this function, but it’s here
--- for completeness and consistency.
---
--- ---
---
---@param self Gtk.Widget # the widget
---@param set (boolean|nil) # value for hexpand-set property
---@return nil
function Gtk.Widget:set_hexpand_set(set) end

--- # method Gtk.Widget:set_mapped()
---
--- Marks the widget as being mapped.
--- 
--- This function should only ever be called in a derived widget's
--- “map” or “unmap” implementation.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param mapped (boolean|nil) # `true` to mark the widget as mapped
---@return nil
function Gtk.Widget:set_mapped(mapped) end

--- # method Gtk.Widget:set_margin_bottom()
---
--- Sets the bottom margin of `widget`.
--- See the `GtkWidget`:margin-bottom property.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param margin integer # the bottom margin
---@return nil
function Gtk.Widget:set_margin_bottom(margin) end

--- # method Gtk.Widget:set_margin_end()
---
--- Sets the end margin of `widget`.
--- See the `GtkWidget`:margin-end property.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param margin integer # the end margin
---@return nil
function Gtk.Widget:set_margin_end(margin) end

--- # method Gtk.Widget:set_margin_left()
---
--- Sets the left margin of `widget`.
--- See the `GtkWidget`:margin-left property.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param margin integer # the left margin
---@return nil
function Gtk.Widget:set_margin_left(margin) end

--- # method Gtk.Widget:set_margin_right()
---
--- Sets the right margin of `widget`.
--- See the `GtkWidget`:margin-right property.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param margin integer # the right margin
---@return nil
function Gtk.Widget:set_margin_right(margin) end

--- # method Gtk.Widget:set_margin_start()
---
--- Sets the start margin of `widget`.
--- See the `GtkWidget`:margin-start property.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param margin integer # the start margin
---@return nil
function Gtk.Widget:set_margin_start(margin) end

--- # method Gtk.Widget:set_margin_top()
---
--- Sets the top margin of `widget`.
--- See the `GtkWidget`:margin-top property.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param margin integer # the top margin
---@return nil
function Gtk.Widget:set_margin_top(margin) end

--- # method Gtk.Widget:set_name()
---
--- Widgets can be named, which allows you to refer to them from a
--- CSS file. You can apply a style to widgets with a particular name
--- in the CSS file. See the documentation for the CSS syntax (on the
--- same page as the docs for `GtkStyleContext`).
--- 
--- Note that the CSS syntax has certain special characters to delimit
--- and represent elements in a selector (period, #, >, *...), so using
--- these will make your widget impossible to match by name. Any combination
--- of alphanumeric symbols, dashes and underscores will suffice.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param name string # name for the widget
---@return nil
function Gtk.Widget:set_name(name) end

--- # method Gtk.Widget:set_no_show_all()
---
--- Sets the `GtkWidget`:no-show-all property, which determines whether
--- calls to `gtk_widget_show_all()` will affect this widget.
--- 
--- This is mostly for use in constructing widget hierarchies with externally
--- controlled visibility, see `GtkUIManager`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param no_show_all (boolean|nil) # the new value for the “no-show-all” property
---@return nil
function Gtk.Widget:set_no_show_all(no_show_all) end

--- # method Gtk.Widget:set_opacity()
---
--- Request the `widget` to be rendered partially transparent,
--- with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
--- are clamped to the [0,1] range.).
--- This works on both toplevel widget, and child widgets, although there
--- are some limitations:
--- 
--- For toplevel widgets this depends on the capabilities of the windowing
--- system. On X11 this has any effect only on X screens with a compositing manager
--- running. See `gtk_widget_is_composited()`. On Windows it should work
--- always, although setting a window’s opacity after the window has been
--- shown causes it to flicker once on Windows.
--- 
--- For child widgets it doesn’t work if any affected widget has a native window, or
--- disables double buffering.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param opacity number # desired opacity, between 0 and 1
---@return nil
function Gtk.Widget:set_opacity(opacity) end

--- # method Gtk.Widget:set_parent()
---
--- This function is useful only when implementing subclasses of
--- `GtkContainer`.
--- Sets the container as the parent of `widget`, and takes care of
--- some details such as updating the state and style of the child
--- to reflect its new location. The opposite function is
--- `gtk_widget_unparent()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param parent Gtk.Widget # parent container
---@return nil
function Gtk.Widget:set_parent(parent) end

--- # method Gtk.Widget:set_parent_window()
---
--- Sets a non default parent window for `widget`.
--- 
--- For `GtkWindow` classes, setting a `parent_window` effects whether
--- the window is a toplevel window or can be embedded into other
--- widgets.
--- 
--- For `GtkWindow` classes, this needs to be called before the
--- window is realized.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`.
---@param parent_window Gdk.Window # the new parent window.
---@return nil
function Gtk.Widget:set_parent_window(parent_window) end

--- # method Gtk.Widget:set_realized()
---
--- Marks the widget as being realized. This function must only be
--- called after all `GdkWindows` for the `widget` have been created
--- and registered.
--- 
--- This function should only ever be called in a derived widget's
--- “realize” or “unrealize” implementation.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param realized (boolean|nil) # `true` to mark the widget as realized
---@return nil
function Gtk.Widget:set_realized(realized) end

--- # method Gtk.Widget:set_receives_default()
---
--- Specifies whether `widget` will be treated as the default widget
--- within its toplevel when it has the focus, even if another widget
--- is the default.
--- 
--- See `gtk_widget_grab_default()` for details about the meaning of
--- “default”.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param receives_default (boolean|nil) # whether or not `widget` can be a default widget.
---@return nil
function Gtk.Widget:set_receives_default(receives_default) end

--- # method Gtk.Widget:set_redraw_on_allocate()
---
--- Sets whether the entire widget is queued for drawing when its size
--- allocation changes. By default, this setting is `true` and
--- the entire widget is redrawn on every size change. If your widget
--- leaves the upper left unchanged when made bigger, turning this
--- setting off will improve performance.
--- 
--- Note that for widgets where `gtk_widget_get_has_window()` is `false`
--- setting this flag to `false` turns off all allocation on resizing:
--- the widget will not even redraw if its position changes; this is to
--- allow containers that don’t draw anything to avoid excess
--- invalidations. If you set this flag on a widget with no window that
--- does draw on `widget`->window, you are
--- responsible for invalidating both the old and new allocation of the
--- widget when the widget is moved and responsible for invalidating
--- regions newly when the widget increases size.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param redraw_on_allocate (boolean|nil) # if `true`, the entire widget will be redrawn when it is allocated to a new size. Otherwise, only the new portion of the widget will be redrawn.
---@return nil
function Gtk.Widget:set_redraw_on_allocate(redraw_on_allocate) end

--- # method Gtk.Widget:set_sensitive()
---
--- Sets the sensitivity of a widget. A widget is sensitive if the user
--- can interact with it. Insensitive widgets are “grayed out” and the
--- user can’t interact with them. Insensitive widgets are known as
--- “inactive”, “disabled”, or “ghosted” in some other toolkits.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param sensitive (boolean|nil) # `true` to make the widget sensitive
---@return nil
function Gtk.Widget:set_sensitive(sensitive) end

--- # method Gtk.Widget:set_size_request()
---
--- Sets the minimum size of a widget; that is, the widget’s size
--- request will be at least `width` by `height`. You can use this
--- function to force a widget to be larger than it normally would be.
--- 
--- In most cases, `gtk_window_set_default_size()` is a better choice for
--- toplevel windows than this function; setting the default size will
--- still allow users to shrink the window. Setting the size request
--- will force them to leave the window at least as large as the size
--- request. When dealing with window sizes,
--- `gtk_window_set_geometry_hints()` can be a useful function as well.
--- 
--- Note the inherent danger of setting any fixed size - themes,
--- translations into other languages, different fonts, and user action
--- can all change the appropriate size for a given widget. So, it's
--- basically impossible to hardcode a size that will always be
--- correct.
--- 
--- The size request of a widget is the smallest size a widget can
--- accept while still functioning well and drawing itself correctly.
--- However in some strange cases a widget may be allocated less than
--- its requested size, and in many cases a widget may be allocated more
--- space than it requested.
--- 
--- If the size request in a given direction is -1 (unset), then
--- the “natural” size request of the widget will be used instead.
--- 
--- The size request set here does not include any margin from the
--- `GtkWidget` properties margin-left, margin-right, margin-top, and
--- margin-bottom, but it does include pretty much all other padding
--- or border properties set by any subclass of `GtkWidget`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param width integer # width `widget` should request, or -1 to unset
---@param height integer # height `widget` should request, or -1 to unset
---@return nil
function Gtk.Widget:set_size_request(width, height) end

--- # method Gtk.Widget:set_state()
---
--- This function is for use in widget implementations. Sets the state
--- of a widget (insensitive, prelighted, etc.) Usually you should set
--- the state using wrapper functions such as `gtk_widget_set_sensitive()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param state Gtk.StateType # new state for `widget`
---@return nil
function Gtk.Widget:set_state(state) end

--- # method Gtk.Widget:set_state_flags()
---
--- This function is for use in widget implementations. Turns on flag
--- values in the current widget state (insensitive, prelighted, etc.).
--- 
--- This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
--- %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
--- direction, use `gtk_widget_set_direction()`.
--- 
--- It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
--- will be propagated down to all non-internal children if `widget` is a
--- `GtkContainer`, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
--- down to all `GtkContainer` children by different means than turning on the
--- state flag down the hierarchy, both `gtk_widget_get_state_flags()` and
--- `gtk_widget_is_sensitive()` will make use of these.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param flags Gtk.StateFlags # State flags to turn on
---@param clear (boolean|nil) # Whether to clear state before turning on `flags`
---@return nil
function Gtk.Widget:set_state_flags(flags, clear) end

--- # method Gtk.Widget:set_style()
---
--- Used to set the `GtkStyle` for a widget (`widget`->style). Since
--- GTK 3, this function does nothing, the passed in style is ignored.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param style? Gtk.Style # a `GtkStyle`, or `nil` to remove the effect of a previous call to `gtk_widget_set_style()` and go back to the default style
---@return nil
function Gtk.Widget:set_style(style) end

--- # method Gtk.Widget:set_support_multidevice()
---
--- Enables or disables multiple pointer awareness. If this setting is `true`,
--- `widget` will start receiving multiple, per device enter/leave events. Note
--- that if custom `GdkWindows` are created in `GtkWidget`::realize,
--- `gdk_window_set_support_multidevice()` will have to be called manually on them.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param support_multidevice (boolean|nil) # `true` to support input from multiple devices.
---@return nil
function Gtk.Widget:set_support_multidevice(support_multidevice) end

--- # method Gtk.Widget:set_tooltip_markup()
---
--- Sets `markup` as the contents of the tooltip, which is marked up with
---  the [Pango text markup language][PangoMarkupFormat].
--- 
--- This function will take care of setting `GtkWidget`:has-tooltip to `true`
--- and of the default handler for the `GtkWidget`::query-tooltip signal.
--- 
--- See also the `GtkWidget`:tooltip-markup property and
--- `gtk_tooltip_set_markup()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param markup? string # the contents of the tooltip for `widget`, or `nil`
---@return nil
function Gtk.Widget:set_tooltip_markup(markup) end

--- # method Gtk.Widget:set_tooltip_text()
---
--- Sets `text` as the contents of the tooltip. This function will take
--- care of setting `GtkWidget`:has-tooltip to `true` and of the default
--- handler for the `GtkWidget`::query-tooltip signal.
--- 
--- See also the `GtkWidget`:tooltip-text property and `gtk_tooltip_set_text()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param text? string # the contents of the tooltip for `widget`
---@return nil
function Gtk.Widget:set_tooltip_text(text) end

--- # method Gtk.Widget:set_tooltip_window()
---
--- Replaces the default window used for displaying
--- tooltips with `custom_window`. GTK+ will take care of showing and
--- hiding `custom_window` at the right moment, to behave likewise as
--- the default tooltip window. If `custom_window` is `nil`, the default
--- tooltip window will be used.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param custom_window? Gtk.Window # a `GtkWindow`, or `nil`
---@return nil
function Gtk.Widget:set_tooltip_window(custom_window) end

--- # method Gtk.Widget:set_valign()
---
--- Sets the vertical alignment of `widget`.
--- See the `GtkWidget`:valign property.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param align Gtk.Align # the vertical alignment
---@return nil
function Gtk.Widget:set_valign(align) end

--- # method Gtk.Widget:set_vexpand()
---
--- Sets whether the widget would like any available extra vertical
--- space.
--- 
--- See `gtk_widget_set_hexpand()` for more detail.
---
--- ---
---
---@param self Gtk.Widget # the widget
---@param expand (boolean|nil) # whether to expand
---@return nil
function Gtk.Widget:set_vexpand(expand) end

--- # method Gtk.Widget:set_vexpand_set()
---
--- Sets whether the vexpand flag (see `gtk_widget_get_vexpand()`) will
--- be used.
--- 
--- See `gtk_widget_set_hexpand_set()` for more detail.
---
--- ---
---
---@param self Gtk.Widget # the widget
---@param set (boolean|nil) # value for vexpand-set property
---@return nil
function Gtk.Widget:set_vexpand_set(set) end

--- # method Gtk.Widget:set_visible()
---
--- Sets the visibility state of `widget`. Note that setting this to
--- `true` doesn’t mean the widget is actually viewable, see
--- `gtk_widget_get_visible()`.
--- 
--- This function simply calls `gtk_widget_show()` or `gtk_widget_hide()`
--- but is nicer to use when the visibility of the widget depends on
--- some condition.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param visible (boolean|nil) # whether the widget should be shown or not
---@return nil
function Gtk.Widget:set_visible(visible) end

--- # method Gtk.Widget:set_visual()
---
--- Sets the visual that should be used for by widget and its children for
--- creating `GdkWindows`. The visual must be on the same `GdkScreen` as
--- returned by `gtk_widget_get_screen()`, so handling the
--- `GtkWidget`::screen-changed signal is necessary.
--- 
--- Setting a new `visual` will not cause `widget` to recreate its windows,
--- so you should call this function before `widget` is realized.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param visual? Gdk.Visual # visual to be used or `nil` to unset a previous one
---@return nil
function Gtk.Widget:set_visual(visual) end

--- # method Gtk.Widget:set_window()
---
--- Sets a widget’s window. This function should only be used in a
--- widget’s `GtkWidget`::realize implementation. The %window passed is
--- usually either new window created with `gdk_window_new()`, or the
--- window of its parent widget as returned by
--- `gtk_widget_get_parent_window()`.
--- 
--- Widgets must indicate whether they will create their own `GdkWindow`
--- by calling `gtk_widget_set_has_window()`. This is usually done in the
--- widget’s `init()` function.
--- 
--- Note that this function does not add any reference to `window`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param window Gdk.Window # a `GdkWindow`
---@return nil
function Gtk.Widget:set_window(window) end

--- # method Gtk.Widget:shape_combine_region()
---
--- Sets a shape for this widget’s GDK window. This allows for
--- transparent windows etc., see `gdk_window_shape_combine_region()`
--- for more information.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param region? cairo.Region # shape to be added, or `nil` to remove an existing shape
---@return nil
function Gtk.Widget:shape_combine_region(region) end

--- # method Gtk.Widget:show()
---
--- Flags a widget to be displayed. Any widget that isn’t shown will
--- not appear on the screen. If you want to show all the widgets in a
--- container, it’s easier to call `gtk_widget_show_all()` on the
--- container, instead of individually showing the widgets.
--- 
--- Remember that you have to show the containers containing a widget,
--- in addition to the widget itself, before it will appear onscreen.
--- 
--- When a toplevel container is shown, it is immediately realized and
--- mapped; other shown widgets are realized and mapped when their
--- toplevel container is realized and mapped.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:show() end

--- # method Gtk.Widget:show_all()
---
--- Recursively shows a widget, and any child widgets (if the widget is
--- a container).
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:show_all() end

--- # method Gtk.Widget:show_now()
---
--- Shows a widget. If the widget is an unmapped toplevel widget
--- (i.e. a `GtkWindow` that has not yet been shown), enter the main
--- loop and wait for the window to actually be mapped. Be careful;
--- because the main loop is running, anything can happen during
--- this function.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:show_now() end

--- # method Gtk.Widget:size_allocate()
---
--- This function is only used by `GtkContainer` subclasses, to assign a size
--- and position to their child widgets.
--- 
--- In this function, the allocation may be adjusted. It will be forced
--- to a 1x1 minimum size, and the adjust_size_allocation virtual
--- method on the child will be used to adjust the allocation. Standard
--- adjustments include removing the widget’s margins, and applying the
--- widget’s `GtkWidget`:halign and `GtkWidget`:valign properties.
--- 
--- For baseline support in containers you need to use `gtk_widget_size_allocate_with_baseline()`
--- instead.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param allocation Gtk.Allocation # position and size to be allocated to `widget`
---@return nil
function Gtk.Widget:size_allocate(allocation) end

--- # method Gtk.Widget:size_allocate_with_baseline()
---
--- This function is only used by `GtkContainer` subclasses, to assign a size,
--- position and (optionally) baseline to their child widgets.
--- 
--- In this function, the allocation and baseline may be adjusted. It
--- will be forced to a 1x1 minimum size, and the
--- adjust_size_allocation virtual and adjust_baseline_allocation
--- methods on the child will be used to adjust the allocation and
--- baseline. Standard adjustments include removing the widget's
--- margins, and applying the widget’s `GtkWidget`:halign and
--- `GtkWidget`:valign properties.
--- 
--- If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
--- baseline argument is ignored and -1 is used instead.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param allocation Gtk.Allocation # position and size to be allocated to `widget`
---@param baseline integer # The baseline of the child, or -1
---@return nil
function Gtk.Widget:size_allocate_with_baseline(allocation, baseline) end

--- # method Gtk.Widget:size_request()
---
--- This function is typically used when implementing a `GtkContainer`
--- subclass.  Obtains the preferred size of a widget. The container
--- uses this information to arrange its child widgets and decide what
--- size allocations to give them with `gtk_widget_size_allocate()`.
--- 
--- You can also call this function from an application, with some
--- caveats. Most notably, getting a size request requires the widget
--- to be associated with a screen, because font information may be
--- needed. Multihead-aware applications should keep this in mind.
--- 
--- Also remember that the size request is not necessarily the size
--- a widget will actually be allocated.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param requisition Gtk.Requisition # a `GtkRequisition` to be filled in
---@return nil
function Gtk.Widget:size_request(requisition) end

--- # method Gtk.Widget:style_attach()
---
--- This function attaches the widget’s `GtkStyle` to the widget's
--- `GdkWindow`. It is a replacement for
--- 
--- ```c
--- widget->style = gtk_style_attach (widget->style, widget->window);
--- ```
--- 
--- and should only ever be called in a derived widget’s “realize”
--- implementation which does not chain up to its parent class'
--- “realize” implementation, because one of the parent classes
--- (finally `GtkWidget`) would attach the style itself.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:style_attach() end

--- # method Gtk.Widget:style_get_property()
---
--- Gets the value of a style property of `widget`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param property_name string # the name of a style property
---@param value GObject.Value # location to return the property value
---@return nil
function Gtk.Widget:style_get_property(property_name, value) end

--- # method Gtk.Widget:thaw_child_notify()
---
--- Reverts the effect of a previous call to `gtk_widget_freeze_child_notify()`.
--- This causes all queued `GtkWidget`::child-notify signals on `widget` to be
--- emitted.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:thaw_child_notify() end

--- # method Gtk.Widget:translate_coordinates()
---
--- Translate coordinates relative to `src_widget`’s allocation to coordinates
--- relative to `dest_widget`’s allocations. In order to perform this
--- operation, both widgets must be realized, and must share a common
--- toplevel.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param dest_widget Gtk.Widget # a `GtkWidget`
---@param src_x integer # X position relative to `src_widget`
---@param src_y integer # Y position relative to `src_widget`
---@param dest_x? integer # location to store X position relative to `dest_widget`
---@param dest_y? integer # location to store Y position relative to `dest_widget`
---@return (boolean|nil) # `false` if either widget was not realized, or there was no common ancestor. In this case, nothing is stored in *`dest_x` and *`dest_y`. Otherwise `true`.
function Gtk.Widget:translate_coordinates(dest_widget, src_x, src_y, dest_x, dest_y) end

--- # method Gtk.Widget:trigger_tooltip_query()
---
--- Triggers a tooltip query on the display where the toplevel of `widget`
--- is located. See `gtk_tooltip_trigger_tooltip_query()` for more
--- information.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:trigger_tooltip_query() end

--- # method Gtk.Widget:unmap()
---
--- This function is only for use in widget implementations. Causes
--- a widget to be unmapped if it’s currently mapped.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:unmap() end

--- # method Gtk.Widget:unparent()
---
--- This function is only for use in widget implementations.
--- Should be called by implementations of the remove method
--- on `GtkContainer`, to dissociate a child from the container.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:unparent() end

--- # method Gtk.Widget:unrealize()
---
--- This function is only useful in widget implementations.
--- Causes a widget to be unrealized (frees all GDK resources
--- associated with the widget, such as `widget`->window).
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.Widget:unrealize() end

--- # method Gtk.Widget:unregister_window()
---
--- Unregisters a `GdkWindow` from the widget that was previously set up with
--- `gtk_widget_register_window()`. You need to call this when the window is
--- no longer used by the widget, such as when you destroy it.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param window Gdk.Window # a `GdkWindow`
---@return nil
function Gtk.Widget:unregister_window(window) end

--- # method Gtk.Widget:unset_state_flags()
---
--- This function is for use in widget implementations. Turns off flag
--- values for the current widget state (insensitive, prelighted, etc.).
--- See `gtk_widget_set_state_flags()`.
---
--- ---
---
---@param self Gtk.Widget # a `GtkWidget`
---@param flags Gtk.StateFlags # State flags to turn off
---@return nil
function Gtk.Widget:unset_state_flags(flags) end

--- # function Gtk.Widget.get_default_direction()
---
--- Obtains the current default reading direction. See
--- `gtk_widget_set_default_direction()`.
---
--- ---
---
---@return Gtk.TextDirection # the current default direction.
function Gtk.Widget.get_default_direction() end

--- # function Gtk.Widget.get_default_style()
---
--- Returns the default style used by all widgets initially.
---
--- ---
---
---@return Gtk.Style # the default style. This `GtkStyle` object is owned by GTK+ and should not be modified or freed.
function Gtk.Widget.get_default_style() end

--- # function Gtk.Widget.pop_composite_child()
---
--- Cancels the effect of a previous call to `gtk_widget_push_composite_child()`.
---
--- ---
---
---@return nil
function Gtk.Widget.pop_composite_child() end

--- # function Gtk.Widget.push_composite_child()
---
--- Makes all newly-created widgets as composite children until
--- the corresponding `gtk_widget_pop_composite_child()` call.
--- 
--- A composite child is a child that’s an implementation detail of the
--- container it’s inside and should not be visible to people using the
--- container. Composite children aren’t treated differently by GTK+ (but
--- see `gtk_container_foreach()` vs. `gtk_container_forall()`), but e.g. GUI
--- builders might want to treat them in a different way.
---
--- ---
---
---@return nil
function Gtk.Widget.push_composite_child() end

--- # function Gtk.Widget.set_default_direction()
---
--- Sets the default reading direction for widgets where the
--- direction has not been explicitly set by `gtk_widget_set_direction()`.
---
--- ---
---
---@param dir Gtk.TextDirection # the new default direction. This cannot be %GTK_TEXT_DIR_NONE.
---@return nil
function Gtk.Widget.set_default_direction(dir) end

--- # class Gtk.WidgetAccessible
---
---@class Gtk.WidgetAccessible : Gtk.Accessible, Gtk.Atk.Component
---@field parent Gtk.Accessible
---@field priv Gtk.WidgetAccessiblePrivate
Gtk.WidgetAccessible = {}

--- # record Gtk.WidgetAccessibleClass
---
---@class Gtk.WidgetAccessibleClass
---@field parent_class Gtk.AccessibleClass
---@field notify_gtk fun(object: GObject.Object, pspec: GObject.ParamSpec): nil
Gtk.WidgetAccessibleClass = {}

--- # record Gtk.WidgetAccessiblePrivate
---
---@class Gtk.WidgetAccessiblePrivate
Gtk.WidgetAccessiblePrivate = {}

--- # record Gtk.WidgetClass
---
---@class Gtk.WidgetClass
---@field parent_class GObject.InitiallyUnownedClass # The object class structure needs to be the first element in the widget class structure in order for the class mechanism to work correctly. This allows a GtkWidgetClass pointer to be cast to a GObjectClass pointer.
---@field activate_signal integer # The signal to emit when a widget of this class is activated, `gtk_widget_activate()` handles the emission. Implementation of this signal is optional.
---@field dispatch_child_properties_changed fun(widget: Gtk.Widget, n_pspecs: integer, pspecs: GObject.ParamSpec): nil
---@field destroy fun(widget: Gtk.Widget): nil
---@field show fun(widget: Gtk.Widget): nil
---@field show_all fun(widget: Gtk.Widget): nil
---@field hide fun(widget: Gtk.Widget): nil
---@field map fun(widget: Gtk.Widget): nil
---@field unmap fun(widget: Gtk.Widget): nil
---@field realize fun(widget: Gtk.Widget): nil
---@field unrealize fun(widget: Gtk.Widget): nil
---@field size_allocate fun(widget: Gtk.Widget, allocation: Gtk.Allocation): nil
---@field state_changed fun(widget: Gtk.Widget, previous_state: Gtk.StateType): nil
---@field state_flags_changed fun(widget: Gtk.Widget, previous_state_flags: Gtk.StateFlags): nil
---@field parent_set fun(widget: Gtk.Widget, previous_parent: Gtk.Widget): nil
---@field hierarchy_changed fun(widget: Gtk.Widget, previous_toplevel: Gtk.Widget): nil
---@field style_set fun(widget: Gtk.Widget, previous_style: Gtk.Style): nil
---@field direction_changed fun(widget: Gtk.Widget, previous_direction: Gtk.TextDirection): nil
---@field grab_notify fun(widget: Gtk.Widget, was_grabbed: (boolean|nil)): nil
---@field child_notify fun(widget: Gtk.Widget, child_property: GObject.ParamSpec): nil
---@field draw fun(widget: Gtk.Widget, cr: cairo.Context): (boolean|nil)
---@field get_request_mode fun(widget: Gtk.Widget): Gtk.SizeRequestMode
---@field get_preferred_height fun(widget: Gtk.Widget, minimum_height: integer, natural_height: integer): nil
---@field get_preferred_width_for_height fun(widget: Gtk.Widget, height: integer, minimum_width: integer, natural_width: integer): nil
---@field get_preferred_width fun(widget: Gtk.Widget, minimum_width: integer, natural_width: integer): nil
---@field get_preferred_height_for_width fun(widget: Gtk.Widget, width: integer, minimum_height: integer, natural_height: integer): nil
---@field mnemonic_activate fun(widget: Gtk.Widget, group_cycling: (boolean|nil)): (boolean|nil)
---@field grab_focus fun(widget: Gtk.Widget): nil
---@field focus fun(widget: Gtk.Widget, direction: Gtk.DirectionType): (boolean|nil)
---@field move_focus fun(widget: Gtk.Widget, direction: Gtk.DirectionType): nil
---@field keynav_failed fun(widget: Gtk.Widget, direction: Gtk.DirectionType): (boolean|nil)
---@field event fun(widget: Gtk.Widget, event: Gdk.Event): (boolean|nil)
---@field button_press_event fun(widget: Gtk.Widget, event: Gdk.EventButton): (boolean|nil)
---@field button_release_event fun(widget: Gtk.Widget, event: Gdk.EventButton): (boolean|nil)
---@field scroll_event fun(widget: Gtk.Widget, event: Gdk.EventScroll): (boolean|nil)
---@field motion_notify_event fun(widget: Gtk.Widget, event: Gdk.EventMotion): (boolean|nil)
---@field delete_event fun(widget: Gtk.Widget, event: Gdk.EventAny): (boolean|nil)
---@field destroy_event fun(widget: Gtk.Widget, event: Gdk.EventAny): (boolean|nil)
---@field key_press_event fun(widget: Gtk.Widget, event: Gdk.EventKey): (boolean|nil)
---@field key_release_event fun(widget: Gtk.Widget, event: Gdk.EventKey): (boolean|nil)
---@field enter_notify_event fun(widget: Gtk.Widget, event: Gdk.EventCrossing): (boolean|nil)
---@field leave_notify_event fun(widget: Gtk.Widget, event: Gdk.EventCrossing): (boolean|nil)
---@field configure_event fun(widget: Gtk.Widget, event: Gdk.EventConfigure): (boolean|nil)
---@field focus_in_event fun(widget: Gtk.Widget, event: Gdk.EventFocus): (boolean|nil)
---@field focus_out_event fun(widget: Gtk.Widget, event: Gdk.EventFocus): (boolean|nil)
---@field map_event fun(widget: Gtk.Widget, event: Gdk.EventAny): (boolean|nil)
---@field unmap_event fun(widget: Gtk.Widget, event: Gdk.EventAny): (boolean|nil)
---@field property_notify_event fun(widget: Gtk.Widget, event: Gdk.EventProperty): (boolean|nil)
---@field selection_clear_event fun(widget: Gtk.Widget, event: Gdk.EventSelection): (boolean|nil)
---@field selection_request_event fun(widget: Gtk.Widget, event: Gdk.EventSelection): (boolean|nil)
---@field selection_notify_event fun(widget: Gtk.Widget, event: Gdk.EventSelection): (boolean|nil)
---@field proximity_in_event fun(widget: Gtk.Widget, event: Gdk.EventProximity): (boolean|nil)
---@field proximity_out_event fun(widget: Gtk.Widget, event: Gdk.EventProximity): (boolean|nil)
---@field visibility_notify_event fun(widget: Gtk.Widget, event: Gdk.EventVisibility): (boolean|nil)
---@field window_state_event fun(widget: Gtk.Widget, event: Gdk.EventWindowState): (boolean|nil)
---@field damage_event fun(widget: Gtk.Widget, event: Gdk.EventExpose): (boolean|nil)
---@field grab_broken_event fun(widget: Gtk.Widget, event: Gdk.EventGrabBroken): (boolean|nil)
---@field selection_get fun(widget: Gtk.Widget, selection_data: Gtk.SelectionData, info: integer, time_: integer): nil
---@field selection_received fun(widget: Gtk.Widget, selection_data: Gtk.SelectionData, time_: integer): nil
---@field drag_begin fun(widget: Gtk.Widget, context: Gdk.DragContext): nil
---@field drag_end fun(widget: Gtk.Widget, context: Gdk.DragContext): nil
---@field drag_data_get fun(widget: Gtk.Widget, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: integer, time_: integer): nil
---@field drag_data_delete fun(widget: Gtk.Widget, context: Gdk.DragContext): nil
---@field drag_leave fun(widget: Gtk.Widget, context: Gdk.DragContext, time_: integer): nil
---@field drag_motion fun(widget: Gtk.Widget, context: Gdk.DragContext, x: integer, y: integer, time_: integer): (boolean|nil)
---@field drag_drop fun(widget: Gtk.Widget, context: Gdk.DragContext, x: integer, y: integer, time_: integer): (boolean|nil)
---@field drag_data_received fun(widget: Gtk.Widget, context: Gdk.DragContext, x: integer, y: integer, selection_data: Gtk.SelectionData, info: integer, time_: integer): nil
---@field drag_failed fun(widget: Gtk.Widget, context: Gdk.DragContext, result: Gtk.DragResult): (boolean|nil)
---@field popup_menu fun(widget: Gtk.Widget): (boolean|nil)
---@field show_help fun(widget: Gtk.Widget, help_type: Gtk.WidgetHelpType): (boolean|nil)
---@field get_accessible fun(widget: Gtk.Widget): Atk.Object
---@field screen_changed fun(widget: Gtk.Widget, previous_screen: Gdk.Screen): nil
---@field can_activate_accel fun(widget: Gtk.Widget, signal_id: integer): (boolean|nil)
---@field composited_changed fun(widget: Gtk.Widget): nil
---@field query_tooltip fun(widget: Gtk.Widget, x: integer, y: integer, keyboard_tooltip: (boolean|nil), tooltip: Gtk.Tooltip): (boolean|nil)
---@field compute_expand fun(widget: Gtk.Widget, hexpand_p: (boolean|nil), vexpand_p: (boolean|nil)): nil
---@field adjust_size_request fun(widget: Gtk.Widget, orientation: Gtk.Orientation, minimum_size: integer, natural_size: integer): nil
---@field adjust_size_allocation fun(widget: Gtk.Widget, orientation: Gtk.Orientation, minimum_size: integer, natural_size: integer, allocated_pos: integer, allocated_size: integer): nil
---@field style_updated fun(widget: Gtk.Widget): nil
---@field touch_event fun(widget: Gtk.Widget, event: Gdk.EventTouch): (boolean|nil)
---@field get_preferred_height_and_baseline_for_width fun(widget: Gtk.Widget, width: integer, minimum_height: integer, natural_height: integer, minimum_baseline: integer, natural_baseline: integer): nil
---@field adjust_baseline_request fun(widget: Gtk.Widget, minimum_baseline: integer, natural_baseline: integer): nil
---@field adjust_baseline_allocation fun(widget: Gtk.Widget, baseline: integer): nil
---@field queue_draw_region fun(widget: Gtk.Widget, region: cairo.Region): nil
---@field priv Gtk.WidgetClassPrivate
Gtk.WidgetClass = {}

--- # method Gtk.WidgetClass:bind_template_callback_full()
---
--- Declares a `callback_symbol` to handle `callback_name` from the template XML
--- defined for `widget_type`. See `gtk_builder_add_callback_symbol()`.
--- 
--- Note that this must be called from a composite widget classes class
--- initializer after calling `gtk_widget_class_set_template()`.
---
--- ---
---
---@param self Gtk.WidgetClass # A `GtkWidgetClass`
---@param callback_name string # The name of the callback as expected in the template XML
---@param callback_symbol GObject.Callback # The callback symbol
---@return nil
function Gtk.WidgetClass:bind_template_callback_full(callback_name, callback_symbol) end

--- # method Gtk.WidgetClass:bind_template_child_full()
---
--- Automatically assign an object declared in the class template XML to be set to a location
--- on a freshly built instance’s private data, or alternatively accessible via `gtk_widget_get_template_child()`.
--- 
--- The struct can point either into the public instance, then you should use G_STRUCT_OFFSET(WidgetType, member)
--- for `struct_offset`,  or in the private struct, then you should use G_PRIVATE_OFFSET(WidgetType, member).
--- 
--- An explicit strong reference will be held automatically for the duration of your
--- instance’s life cycle, it will be released automatically when `GObjectClass`.`dispose()` runs
--- on your instance and if a `struct_offset` that is != 0 is specified, then the automatic location
--- in your instance public or private data will be set to `nil`. You can however access an automated child
--- pointer the first time your classes `GObjectClass`.`dispose()` runs, or alternatively in
--- `GtkWidgetClass`.`destroy()`.
--- 
--- If `internal_child` is specified, `GtkBuildableIface`.`get_internal_child()` will be automatically
--- implemented by the `GtkWidget` class so there is no need to implement it manually.
--- 
--- The wrapper macros `gtk_widget_class_bind_template_child()`, `gtk_widget_class_bind_template_child_internal()`,
--- `gtk_widget_class_bind_template_child_private()` and `gtk_widget_class_bind_template_child_internal_private()`
--- might be more convenient to use.
--- 
--- Note that this must be called from a composite widget classes class
--- initializer after calling `gtk_widget_class_set_template()`.
---
--- ---
---
---@param self Gtk.WidgetClass # A `GtkWidgetClass`
---@param name string # The “id” of the child defined in the template XML
---@param internal_child (boolean|nil) # Whether the child should be accessible as an “internal-child” when this class is used in GtkBuilder XML
---@param struct_offset integer # The structure offset into the composite widget’s instance public or private structure where the automated child pointer should be set, or 0 to not assign the pointer.
---@return nil
function Gtk.WidgetClass:bind_template_child_full(name, internal_child, struct_offset) end

--- # method Gtk.WidgetClass:find_style_property()
---
--- Finds a style property of a widget class by name.
---
--- ---
---
---@param self Gtk.WidgetClass # a `GtkWidgetClass`
---@param property_name string # the name of the style property to find
---@return GObject.ParamSpec # the `GParamSpec` of the style property or `nil` if `class` has no style property with that name.
function Gtk.WidgetClass:find_style_property(property_name) end

--- # method Gtk.WidgetClass:get_css_name()
---
--- Gets the name used by this class for matching in CSS code. See
--- `gtk_widget_class_set_css_name()` for details.
---
--- ---
---
---@param self Gtk.WidgetClass # class to set the name on
---@return string # the CSS name of the given class
function Gtk.WidgetClass:get_css_name() end

--- # method Gtk.WidgetClass:install_style_property()
---
--- Installs a style property on a widget class. The parser for the
--- style property is determined by the value type of `pspec`.
---
--- ---
---
---@param self Gtk.WidgetClass # a `GtkWidgetClass`
---@param pspec GObject.ParamSpec # the `GParamSpec` for the property
---@return nil
function Gtk.WidgetClass:install_style_property(pspec) end

--- # method Gtk.WidgetClass:list_style_properties()
---
--- Returns all style properties of a widget class.
---
--- ---
---
---@param self Gtk.WidgetClass # a `GtkWidgetClass`
---@param n_properties integer # location to return the number of style properties found
---@return unknown[] # a newly allocated array of `GParamSpec`*. The array must be freed with `g_free()`.
function Gtk.WidgetClass:list_style_properties(n_properties) end

--- # method Gtk.WidgetClass:set_accessible_role()
---
--- Sets the default `AtkRole` to be set on accessibles created for
--- widgets of `widget_class`. Accessibles may decide to not honor this
--- setting if their role reporting is more refined. Calls to
--- `gtk_widget_class_set_accessible_type()` will reset this value.
--- 
--- In cases where you want more fine-grained control over the role of
--- accessibles created for `widget_class`, you should provide your own
--- accessible type and use `gtk_widget_class_set_accessible_type()`
--- instead.
--- 
--- If `role` is `ATK_ROLE_INVALID`, the default role will not be changed
--- and the accessible’s default role will be used instead.
--- 
--- This function should only be called from class init functions of widgets.
---
--- ---
---
---@param self Gtk.WidgetClass # class to set the accessible role for
---@param role Atk.Role # The role to use for accessibles created for `widget_class`
---@return nil
function Gtk.WidgetClass:set_accessible_role(role) end

--- # method Gtk.WidgetClass:set_accessible_type()
---
--- Sets the type to be used for creating accessibles for widgets of
--- `widget_class`. The given `type` must be a subtype of the type used for
--- accessibles of the parent class.
--- 
--- This function should only be called from class init functions of widgets.
---
--- ---
---
---@param self Gtk.WidgetClass # class to set the accessible type for
---@param type Gtk.GType # The object type that implements the accessible for `widget_class`
---@return nil
function Gtk.WidgetClass:set_accessible_type(type) end

--- # method Gtk.WidgetClass:set_connect_func()
---
--- For use in language bindings, this will override the default `GtkBuilderConnectFunc` to be
--- used when parsing GtkBuilder XML from this class’s template data.
--- 
--- Note that this must be called from a composite widget classes class
--- initializer after calling `gtk_widget_class_set_template()`.
---
--- ---
---
---@param self Gtk.WidgetClass # A `GtkWidgetClass`
---@param connect_func Gtk.BuilderConnectFunc # The `GtkBuilderConnectFunc` to use when connecting signals in the class template
---@param connect_data? userdata # The data to pass to `connect_func`
---@param connect_data_destroy GLib.DestroyNotify # The `GDestroyNotify` to free `connect_data`, this will only be used at class finalization time, when no classes of type `widget_type` are in use anymore.
---@return nil
function Gtk.WidgetClass:set_connect_func(connect_func, connect_data, connect_data_destroy) end

--- # method Gtk.WidgetClass:set_css_name()
---
--- Sets the name to be used for CSS matching of widgets.
--- 
--- If this function is not called for a given class, the name
--- of the parent class is used.
---
--- ---
---
---@param self Gtk.WidgetClass # class to set the name on
---@param name string # name to use
---@return nil
function Gtk.WidgetClass:set_css_name(name) end

--- # method Gtk.WidgetClass:set_template()
---
--- This should be called at class initialization time to specify
--- the GtkBuilder XML to be used to extend a widget.
--- 
--- For convenience, `gtk_widget_class_set_template_from_resource()` is also provided.
--- 
--- Note that any class that installs templates must call `gtk_widget_init_template()`
--- in the widget’s instance initializer.
---
--- ---
---
---@param self Gtk.WidgetClass # A `GtkWidgetClass`
---@param template_bytes GLib.Bytes # A `GBytes` holding the `GtkBuilder` XML
---@return nil
function Gtk.WidgetClass:set_template(template_bytes) end

--- # method Gtk.WidgetClass:set_template_from_resource()
---
--- A convenience function to call `gtk_widget_class_set_template()`.
--- 
--- Note that any class that installs templates must call `gtk_widget_init_template()`
--- in the widget’s instance initializer.
---
--- ---
---
---@param self Gtk.WidgetClass # A `GtkWidgetClass`
---@param resource_name string # The name of the resource to load the template from
---@return nil
function Gtk.WidgetClass:set_template_from_resource(resource_name) end

--- # record Gtk.WidgetClassPrivate
---
---@class Gtk.WidgetClassPrivate
Gtk.WidgetClassPrivate = {}

---@enum Gtk.WidgetHelpType
Gtk.WidgetHelpType = {}

--- # record Gtk.WidgetPath
---
--- GtkWidgetPath is a boxed type that represents a widget hierarchy from
--- the topmost widget, typically a toplevel, to any child. This widget
--- path abstraction is used in `GtkStyleContext` on behalf of the real
--- widget in order to query style information.
--- 
--- If you are using GTK+ widgets, you probably will not need to use
--- this API directly, as there is `gtk_widget_get_path()`, and the style
--- context returned by `gtk_widget_get_style_context()` will be automatically
--- updated on widget hierarchy changes.
--- 
--- The widget path generation is generally simple:
--- 
--- ## Defining a button within a window
--- 
--- ```c
--- {
---   GtkWidgetPath *path;
--- 
---   path = gtk_widget_path_new ();
---   gtk_widget_path_append_type (path, GTK_TYPE_WINDOW);
---   gtk_widget_path_append_type (path, GTK_TYPE_BUTTON);
--- }
--- ```
--- 
--- Although more complex information, such as widget names, or
--- different classes (property that may be used by other widget
--- types) and intermediate regions may be included:
--- 
--- ## Defining the first tab widget in a notebook
--- 
--- ```c
--- {
---   GtkWidgetPath *path;
---   guint pos;
--- 
---   path = gtk_widget_path_new ();
--- 
---   pos = gtk_widget_path_append_type (path, GTK_TYPE_NOTEBOOK);
---   gtk_widget_path_iter_add_region (path, pos, "tab", GTK_REGION_EVEN | GTK_REGION_FIRST);
--- 
---   pos = gtk_widget_path_append_type (path, GTK_TYPE_LABEL);
---   gtk_widget_path_iter_set_name (path, pos, "first tab label");
--- }
--- ```
--- 
--- All this information will be used to match the style information
--- that applies to the described widget.
---
--- ---
---
---@class Gtk.WidgetPath
---@operator call: Gtk.WidgetPath
Gtk.WidgetPath = {}

--- # method Gtk.WidgetPath:append_for_widget()
---
--- Appends the data from `widget` to the widget hierarchy represented
--- by `path`. This function is a shortcut for adding information from
--- `widget` to the given `path`. This includes setting the name or
--- adding the style classes from `widget`.
---
--- ---
---
---@param self Gtk.WidgetPath # a widget path
---@param widget Gtk.Widget # the widget to append to the widget path
---@return integer # the position where the data was inserted
function Gtk.WidgetPath:append_for_widget(widget) end

--- # method Gtk.WidgetPath:append_type()
---
--- Appends a widget type to the widget hierarchy represented by `path`.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param type Gtk.GType # widget type to append
---@return integer # the position where the element was inserted
function Gtk.WidgetPath:append_type(type) end

--- # method Gtk.WidgetPath:append_with_siblings()
---
--- Appends a widget type with all its siblings to the widget hierarchy
--- represented by `path`. Using this function instead of
--- `gtk_widget_path_append_type()` will allow the CSS theming to use
--- sibling matches in selectors and apply :nth-`child()` pseudo classes.
--- In turn, it requires a lot more care in widget implementations as
--- widgets need to make sure to call `gtk_widget_reset_style()` on all
--- involved widgets when the `siblings` path changes.
---
--- ---
---
---@param self Gtk.WidgetPath # the widget path to append to
---@param siblings Gtk.WidgetPath # a widget path describing a list of siblings. This path may not contain any siblings itself and it must not be modified afterwards.
---@param sibling_index integer # index into `siblings` for where the added element is positioned.
---@return integer # the position where the element was inserted.
function Gtk.WidgetPath:append_with_siblings(siblings, sibling_index) end

--- # method Gtk.WidgetPath:copy()
---
--- Returns a copy of `path`
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@return Gtk.WidgetPath # a copy of `path`
function Gtk.WidgetPath:copy() end

--- # method Gtk.WidgetPath:free()
---
--- Decrements the reference count on `path`, freeing the structure
--- if the reference count reaches 0.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@return nil
function Gtk.WidgetPath:free() end

--- # method Gtk.WidgetPath:get_object_type()
---
--- Returns the topmost object type, that is, the object type this path
--- is representing.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidget`
---@return Gtk.GType # The object type
function Gtk.WidgetPath:get_object_type() end

--- # method Gtk.WidgetPath:has_parent()
---
--- Returns `true` if any of the parents of the widget represented
--- in `path` is of type `type`, or any subtype of it.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param type Gtk.GType # widget type to check in parents
---@return (boolean|nil) # `true` if any parent is of type `type`
function Gtk.WidgetPath:has_parent(type) end

--- # method Gtk.WidgetPath:is_type()
---
--- Returns `true` if the widget type represented by this path
--- is `type`, or a subtype of it.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param type Gtk.GType # widget type to match
---@return (boolean|nil) # `true` if the widget represented by `path` is of type `type`
function Gtk.WidgetPath:is_type(type) end

--- # method Gtk.WidgetPath:iter_add_class()
---
--- Adds the class `name` to the widget at position `pos` in
--- the hierarchy defined in `path`. See
--- `gtk_style_context_add_class()`.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidget`
---@param pos integer # position to modify, -1 for the path head
---@param name string # a class name
---@return nil
function Gtk.WidgetPath:iter_add_class(pos, name) end

--- # method Gtk.WidgetPath:iter_add_region()
---
--- Adds the region `name` to the widget at position `pos` in
--- the hierarchy defined in `path`. See
--- `gtk_style_context_add_region()`.
--- 
--- Region names must only contain lowercase letters
--- and “-”, starting always with a lowercase letter.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to modify, -1 for the path head
---@param name string # region name
---@param flags Gtk.RegionFlags # flags affecting the region
---@return nil
function Gtk.WidgetPath:iter_add_region(pos, name, flags) end

--- # method Gtk.WidgetPath:iter_clear_classes()
---
--- Removes all classes from the widget at position `pos` in the
--- hierarchy defined in `path`.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidget`
---@param pos integer # position to modify, -1 for the path head
---@return nil
function Gtk.WidgetPath:iter_clear_classes(pos) end

--- # method Gtk.WidgetPath:iter_clear_regions()
---
--- Removes all regions from the widget at position `pos` in the
--- hierarchy defined in `path`.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to modify, -1 for the path head
---@return nil
function Gtk.WidgetPath:iter_clear_regions(pos) end

--- # method Gtk.WidgetPath:iter_get_name()
---
--- Returns the name corresponding to the widget found at
--- the position `pos` in the widget hierarchy defined by
--- `path`
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to get the widget name for, -1 for the path head
---@return string # The widget name, or `nil` if none was set.
function Gtk.WidgetPath:iter_get_name(pos) end

--- # method Gtk.WidgetPath:iter_get_object_name()
---
--- Returns the object name that is at position `pos` in the widget
--- hierarchy defined in `path`.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to get the object name for, -1 for the path head
---@return string # the name or `nil`
function Gtk.WidgetPath:iter_get_object_name(pos) end

--- # method Gtk.WidgetPath:iter_get_object_type()
---
--- Returns the object `GType` that is at position `pos` in the widget
--- hierarchy defined in `path`.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to get the object type for, -1 for the path head
---@return Gtk.GType # a widget type
function Gtk.WidgetPath:iter_get_object_type(pos) end

--- # method Gtk.WidgetPath:iter_get_sibling_index()
---
--- Returns the index into the list of siblings for the element at `pos` as
--- returned by `gtk_widget_path_iter_get_siblings()`. If that function would
--- return `nil` because the element at `pos` has no siblings, this function
--- will return 0.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to get the sibling index for, -1 for the path head
---@return integer # 0 or the index into the list of siblings for the element at `pos`.
function Gtk.WidgetPath:iter_get_sibling_index(pos) end

--- # method Gtk.WidgetPath:iter_get_siblings()
---
--- Returns the list of siblings for the element at `pos`. If the element
--- was not added with siblings, `nil` is returned.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to get the siblings for, -1 for the path head
---@return Gtk.WidgetPath # `nil` or the list of siblings for the element at `pos`.
function Gtk.WidgetPath:iter_get_siblings(pos) end

--- # method Gtk.WidgetPath:iter_get_state()
---
--- Returns the state flags corresponding to the widget found at
--- the position `pos` in the widget hierarchy defined by
--- `path`
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to get the state for, -1 for the path head
---@return Gtk.StateFlags # The state flags
function Gtk.WidgetPath:iter_get_state(pos) end

--- # method Gtk.WidgetPath:iter_has_class()
---
--- Returns `true` if the widget at position `pos` has the class `name`
--- defined, `false` otherwise.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to query, -1 for the path head
---@param name string # class name
---@return (boolean|nil) # `true` if the class `name` is defined for the widget at `pos`
function Gtk.WidgetPath:iter_has_class(pos, name) end

--- # method Gtk.WidgetPath:iter_has_name()
---
--- Returns `true` if the widget at position `pos` has the name `name`,
--- `false` otherwise.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to query, -1 for the path head
---@param name string # a widget name
---@return (boolean|nil) # `true` if the widget at `pos` has this name
function Gtk.WidgetPath:iter_has_name(pos, name) end

--- # method Gtk.WidgetPath:iter_has_qclass()
---
--- See `gtk_widget_path_iter_has_class()`. This is a version that operates
--- with GQuarks.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to query, -1 for the path head
---@param qname GLib.Quark # class name as a `GQuark`
---@return (boolean|nil) # `true` if the widget at `pos` has the class defined.
function Gtk.WidgetPath:iter_has_qclass(pos, qname) end

--- # method Gtk.WidgetPath:iter_has_qname()
---
--- See `gtk_widget_path_iter_has_name()`. This is a version
--- that operates on `GQuarks`.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to query, -1 for the path head
---@param qname GLib.Quark # widget name as a `GQuark`
---@return (boolean|nil) # `true` if the widget at `pos` has this name
function Gtk.WidgetPath:iter_has_qname(pos, qname) end

--- # method Gtk.WidgetPath:iter_has_qregion()
---
--- See `gtk_widget_path_iter_has_region()`. This is a version that operates
--- with GQuarks.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to query, -1 for the path head
---@param qname GLib.Quark # region name as a `GQuark`
---@param flags Gtk.RegionFlags # return location for the region flags
---@return (boolean|nil) # `true` if the widget at `pos` has the region defined.
function Gtk.WidgetPath:iter_has_qregion(pos, qname, flags) end

--- # method Gtk.WidgetPath:iter_has_region()
---
--- Returns `true` if the widget at position `pos` has the class `name`
--- defined, `false` otherwise.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to query, -1 for the path head
---@param name string # region name
---@param flags Gtk.RegionFlags # return location for the region flags
---@return (boolean|nil) # `true` if the class `name` is defined for the widget at `pos`
function Gtk.WidgetPath:iter_has_region(pos, name, flags) end

--- # method Gtk.WidgetPath:iter_list_classes()
---
--- Returns a list with all the class names defined for the widget
--- at position `pos` in the hierarchy defined in `path`.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to query, -1 for the path head
---@return string[] # The list of classes, This is a list of strings, the `GSList` contents are owned by GTK+, but you should use `g_slist_free()` to free the list itself.
function Gtk.WidgetPath:iter_list_classes(pos) end

--- # method Gtk.WidgetPath:iter_list_regions()
---
--- Returns a list with all the region names defined for the widget
--- at position `pos` in the hierarchy defined in `path`.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to query, -1 for the path head
---@return string[] # The list of regions, This is a list of strings, the `GSList` contents are owned by GTK+, but you should use `g_slist_free()` to free the list itself.
function Gtk.WidgetPath:iter_list_regions(pos) end

--- # method Gtk.WidgetPath:iter_remove_class()
---
--- Removes the class `name` from the widget at position `pos` in
--- the hierarchy defined in `path`.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to modify, -1 for the path head
---@param name string # class name
---@return nil
function Gtk.WidgetPath:iter_remove_class(pos, name) end

--- # method Gtk.WidgetPath:iter_remove_region()
---
--- Removes the region `name` from the widget at position `pos` in
--- the hierarchy defined in `path`.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to modify, -1 for the path head
---@param name string # region name
---@return nil
function Gtk.WidgetPath:iter_remove_region(pos, name) end

--- # method Gtk.WidgetPath:iter_set_name()
---
--- Sets the widget name for the widget found at position `pos`
--- in the widget hierarchy defined by `path`.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to modify, -1 for the path head
---@param name string # widget name
---@return nil
function Gtk.WidgetPath:iter_set_name(pos, name) end

--- # method Gtk.WidgetPath:iter_set_object_name()
---
--- Sets the object name for a given position in the widget hierarchy
--- defined by `path`.
--- 
--- When set, the object name overrides the object type when matching
--- CSS.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to modify, -1 for the path head
---@param name? string # object name to set or `nil` to unset
---@return nil
function Gtk.WidgetPath:iter_set_object_name(pos, name) end

--- # method Gtk.WidgetPath:iter_set_object_type()
---
--- Sets the object type for a given position in the widget hierarchy
--- defined by `path`.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to modify, -1 for the path head
---@param type Gtk.GType # object type to set
---@return nil
function Gtk.WidgetPath:iter_set_object_type(pos, type) end

--- # method Gtk.WidgetPath:iter_set_state()
---
--- Sets the widget name for the widget found at position `pos`
--- in the widget hierarchy defined by `path`.
--- 
--- If you want to update just a single state flag, you need to do
--- this manually, as this function updates all state flags.
--- 
--- ## Setting a flag
--- 
--- ```c
--- gtk_widget_path_iter_set_state (path, pos, gtk_widget_path_iter_get_state (path, pos) | flag);
--- ```
--- 
--- ## Unsetting a flag
--- 
--- ```c
--- gtk_widget_path_iter_set_state (path, pos, gtk_widget_path_iter_get_state (path, pos) & ~flag);
--- ```
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param pos integer # position to modify, -1 for the path head
---@param state Gtk.StateFlags # state flags
---@return nil
function Gtk.WidgetPath:iter_set_state(pos, state) end

--- # method Gtk.WidgetPath:length()
---
--- Returns the number of `GtkWidget` `GTypes` between the represented
--- widget and its topmost container.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@return integer # the number of elements in the path
function Gtk.WidgetPath:length() end

--- # method Gtk.WidgetPath:prepend_type()
---
--- Prepends a widget type to the widget hierachy represented by `path`.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@param type Gtk.GType # widget type to prepend
---@return nil
function Gtk.WidgetPath:prepend_type(type) end

--- # method Gtk.WidgetPath:ref()
---
--- Increments the reference count on `path`.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@return Gtk.WidgetPath # `path` itself.
function Gtk.WidgetPath:ref() end

--- # method Gtk.WidgetPath:to_string()
---
--- Dumps the widget path into a string representation. It tries to match
--- the CSS style as closely as possible (Note that there might be paths
--- that cannot be represented in CSS).
--- 
--- The main use of this code is for debugging purposes, so that you can
--- `g_print()` the path or dump it in a gdb session.
---
--- ---
---
---@param self Gtk.WidgetPath # the path
---@return string # A new string describing `path`.
function Gtk.WidgetPath:to_string() end

--- # method Gtk.WidgetPath:unref()
---
--- Decrements the reference count on `path`, freeing the structure
--- if the reference count reaches 0.
---
--- ---
---
---@param self Gtk.WidgetPath # a `GtkWidgetPath`
---@return nil
function Gtk.WidgetPath:unref() end

--- # function Gtk.WidgetPath.new()
---
--- Returns an empty widget path.
---
--- ---
---
---@return Gtk.WidgetPath # A newly created, empty, `GtkWidgetPath`
function Gtk.WidgetPath.new() end

--- # record Gtk.WidgetPrivate
---
---@class Gtk.WidgetPrivate
Gtk.WidgetPrivate = {}

--- # class Gtk.Window
---
--- A GtkWindow is a toplevel window which can contain other widgets.
--- Windows normally have decorations that are under the control
--- of the windowing system and allow the user to manipulate the window
--- (resize it, move it, close it,...).
--- 
--- # GtkWindow as GtkBuildable
--- 
--- The GtkWindow implementation of the `GtkBuildable` interface supports a
--- custom `<accel-groups>` element, which supports any number of `<group>`
--- elements representing the `GtkAccelGroup` objects you want to add to
--- your window (synonymous with `gtk_window_add_accel_group()`.
--- 
--- It also supports the `<initial-focus>` element, whose name property names
--- the widget to receive the focus when the window is mapped.
--- 
--- An example of a UI definition fragment with accel groups:
--- 
--- ```xml
--- <object class="GtkWindow">
---   <accel-groups>
---     <group name="accelgroup1"/>
---   </accel-groups>
---   <initial-focus name="thunderclap"/>
--- </object>
--- 
--- ...
--- 
--- <object class="GtkAccelGroup" id="accelgroup1"/>
--- ```
--- 
--- The GtkWindow implementation of the `GtkBuildable` interface supports
--- setting a child as the titlebar by specifying “titlebar” as the “type”
--- attribute of a `<child>` element.
--- 
--- # CSS nodes
--- 
--- ```plain
--- window.background
--- ├── decoration
--- ├── <titlebar child>.titlebar [.default-decoration]
--- ╰── <child>
--- ```
--- 
--- GtkWindow has a main CSS node with name window and style class .background,
--- and a subnode with name decoration.
--- 
--- Style classes that are typically used with the main CSS node are .csd (when
--- client-side decorations are in use), .solid-csd (for client-side decorations
--- without invisible borders), .ssd (used by mutter when rendering server-side
--- decorations). GtkWindow also represents window states with the following
--- style classes on the main node: .tiled, .maximized, .fullscreen. Specialized
--- types of window often add their own discriminating style classes, such as
--- .popup or .tooltip.
--- 
--- GtkWindow adds the .titlebar and .default-decoration style classes to the
--- widget that is added as a titlebar child.
---
--- ---
---
---@class Gtk.Window : Gtk.Bin, Gtk.Atk.ImplementorIface, Gtk.Buildable
---@field bin Gtk.Bin
---@field priv Gtk.WindowPrivate
---@operator call: Gtk.Window
Gtk.Window = {}

--- # method Gtk.Window:activate_default()
---
--- Activates the default widget for the window, unless the current
--- focused widget has been configured to receive the default action
--- (see `gtk_widget_set_receives_default()`), in which case the
--- focused widget is activated.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if a widget got activated.
function Gtk.Window:activate_default() end

--- # method Gtk.Window:activate_focus()
---
--- Activates the current focused widget within the window.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if a widget got activated.
function Gtk.Window:activate_focus() end

--- # method Gtk.Window:activate_key()
---
--- Activates mnemonics and accelerators for this `GtkWindow`. This is normally
--- called by the default ::key_press_event handler for toplevel windows,
--- however in some cases it may be useful to call this directly when
--- overriding the standard key handling for a toplevel window.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param event Gdk.EventKey # a `GdkEventKey`
---@return (boolean|nil) # `true` if a mnemonic or accelerator was found and activated.
function Gtk.Window:activate_key(event) end

--- # method Gtk.Window:add_accel_group()
---
--- Associate `accel_group` with `window`, such that calling
--- `gtk_accel_groups_activate()` on `window` will activate accelerators
--- in `accel_group`.
---
--- ---
---
---@param self Gtk.Window # window to attach accelerator group to
---@param accel_group Gtk.AccelGroup # a `GtkAccelGroup`
---@return nil
function Gtk.Window:add_accel_group(accel_group) end

--- # method Gtk.Window:add_mnemonic()
---
--- Adds a mnemonic to this window.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param keyval integer # the mnemonic
---@param target Gtk.Widget # the widget that gets activated by the mnemonic
---@return nil
function Gtk.Window:add_mnemonic(keyval, target) end

--- # method Gtk.Window:begin_move_drag()
---
--- Starts moving a window. This function is used if an application has
--- window movement grips. When GDK can support it, the window movement
--- will be done using the standard mechanism for the
--- [window manager][gtk-X11-arch] or windowing
--- system. Otherwise, GDK will try to emulate window movement,
--- potentially not all that well, depending on the windowing system.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param button integer # mouse button that initiated the drag
---@param root_x integer # X position where the user clicked to initiate the drag, in root window coordinates
---@param root_y integer # Y position where the user clicked to initiate the drag
---@param timestamp integer # timestamp from the click event that initiated the drag
---@return nil
function Gtk.Window:begin_move_drag(button, root_x, root_y, timestamp) end

--- # method Gtk.Window:begin_resize_drag()
---
--- Starts resizing a window. This function is used if an application
--- has window resizing controls. When GDK can support it, the resize
--- will be done using the standard mechanism for the
--- [window manager][gtk-X11-arch] or windowing
--- system. Otherwise, GDK will try to emulate window resizing,
--- potentially not all that well, depending on the windowing system.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param edge Gdk.WindowEdge # position of the resize control
---@param button integer # mouse button that initiated the drag
---@param root_x integer # X position where the user clicked to initiate the drag, in root window coordinates
---@param root_y integer # Y position where the user clicked to initiate the drag
---@param timestamp integer # timestamp from the click event that initiated the drag
---@return nil
function Gtk.Window:begin_resize_drag(edge, button, root_x, root_y, timestamp) end

--- # method Gtk.Window:close()
---
--- Requests that the window is closed, similar to what happens
--- when a window manager close button is clicked.
--- 
--- This function can be used with close buttons in custom
--- titlebars.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return nil
function Gtk.Window:close() end

--- # method Gtk.Window:deiconify()
---
--- Asks to deiconify (i.e. unminimize) the specified `window`. Note
--- that you shouldn’t assume the window is definitely deiconified
--- afterward, because other entities (e.g. the user or
--- [window manager][gtk-X11-arch])) could iconify it
--- again before your code which assumes deiconification gets to run.
--- 
--- You can track iconification via the “window-state-event” signal
--- on `GtkWidget`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return nil
function Gtk.Window:deiconify() end

--- # method Gtk.Window:fullscreen()
---
--- Asks to place `window` in the fullscreen state. Note that you
--- shouldn’t assume the window is definitely full screen afterward,
--- because other entities (e.g. the user or
--- [window manager][gtk-X11-arch]) could unfullscreen it
--- again, and not all window managers honor requests to fullscreen
--- windows. But normally the window will end up fullscreen. Just
--- don’t write code that crashes if not.
--- 
--- You can track the fullscreen state via the “window-state-event” signal
--- on `GtkWidget`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return nil
function Gtk.Window:fullscreen() end

--- # method Gtk.Window:fullscreen_on_monitor()
---
--- Asks to place `window` in the fullscreen state. Note that you shouldn't assume
--- the window is definitely full screen afterward.
--- 
--- You can track the fullscreen state via the "window-state-event" signal
--- on `GtkWidget`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param screen Gdk.Screen # a `GdkScreen` to draw to
---@param monitor integer # which monitor to go fullscreen on
---@return nil
function Gtk.Window:fullscreen_on_monitor(screen, monitor) end

--- # method Gtk.Window:get_accept_focus()
---
--- Gets the value set by `gtk_window_set_accept_focus()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if window should receive the input focus
function Gtk.Window:get_accept_focus() end

--- # method Gtk.Window:get_application()
---
--- Gets the `GtkApplication` associated with the window (if any).
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return Gtk.Application # a `GtkApplication`, or `nil`
function Gtk.Window:get_application() end

--- # method Gtk.Window:get_attached_to()
---
--- Fetches the attach widget for this window. See
--- `gtk_window_set_attached_to()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return Gtk.Widget # the widget where the window is attached, or `nil` if the window is not attached to any widget.
function Gtk.Window:get_attached_to() end

--- # method Gtk.Window:get_decorated()
---
--- Returns whether the window has been set to have decorations
--- such as a title bar via `gtk_window_set_decorated()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if the window has been set to have decorations
function Gtk.Window:get_decorated() end

--- # method Gtk.Window:get_default_size()
---
--- Gets the default size of the window. A value of -1 for the width or
--- height indicates that a default size has not been explicitly set
--- for that dimension, so the “natural” size of the window will be
--- used.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param width? integer # location to store the default width, or `nil`
---@param height? integer # location to store the default height, or `nil`
---@return nil
function Gtk.Window:get_default_size(width, height) end

--- # method Gtk.Window:get_default_widget()
---
--- Returns the default widget for `window`. See
--- `gtk_window_set_default()` for more details.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return Gtk.Widget # the default widget, or `nil` if there is none.
function Gtk.Window:get_default_widget() end

--- # method Gtk.Window:get_deletable()
---
--- Returns whether the window has been set to have a close button
--- via `gtk_window_set_deletable()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if the window has been set to have a close button
function Gtk.Window:get_deletable() end

--- # method Gtk.Window:get_destroy_with_parent()
---
--- Returns whether the window will be destroyed with its transient parent. See
--- gtk_window_set_destroy_with_parent ().
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if the window will be destroyed with its transient parent.
function Gtk.Window:get_destroy_with_parent() end

--- # method Gtk.Window:get_focus()
---
--- Retrieves the current focused widget within the window.
--- Note that this is the widget that would have the focus
--- if the toplevel window focused; if the toplevel window
--- is not focused then  `gtk_widget_has_focus (widget)` will
--- not be `true` for the widget.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return Gtk.Widget # the currently focused widget, or `nil` if there is none.
function Gtk.Window:get_focus() end

--- # method Gtk.Window:get_focus_on_map()
---
--- Gets the value set by `gtk_window_set_focus_on_map()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if window should receive the input focus when mapped.
function Gtk.Window:get_focus_on_map() end

--- # method Gtk.Window:get_focus_visible()
---
--- Gets the value of the `GtkWindow`:focus-visible property.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if “focus rectangles” are supposed to be visible in this window.
function Gtk.Window:get_focus_visible() end

--- # method Gtk.Window:get_gravity()
---
--- Gets the value set by `gtk_window_set_gravity()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return Gdk.Gravity # window gravity
function Gtk.Window:get_gravity() end

--- # method Gtk.Window:get_group()
---
--- Returns the group for `window` or the default group, if
--- `window` is `nil` or if `window` does not have an explicit
--- window group.
---
--- ---
---
---@param self? Gtk.Window # a `GtkWindow`, or `nil`
---@return Gtk.WindowGroup # the `GtkWindowGroup` for a window or the default group
function Gtk.Window:get_group() end

--- # method Gtk.Window:get_has_resize_grip()
---
--- Determines whether the window may have a resize grip.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if the window has a resize grip
function Gtk.Window:get_has_resize_grip() end

--- # method Gtk.Window:get_hide_titlebar_when_maximized()
---
--- Returns whether the window has requested to have its titlebar hidden
--- when maximized. See gtk_window_set_hide_titlebar_when_maximized ().
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if the window has requested to have its titlebar hidden when maximized
function Gtk.Window:get_hide_titlebar_when_maximized() end

--- # method Gtk.Window:get_icon()
---
--- Gets the value set by `gtk_window_set_icon()` (or if you've
--- called `gtk_window_set_icon_list()`, gets the first icon in
--- the icon list).
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return GdkPixbuf.Pixbuf # icon for window or `nil` if none
function Gtk.Window:get_icon() end

--- # method Gtk.Window:get_icon_list()
---
--- Retrieves the list of icons set by `gtk_window_set_icon_list()`.
--- The list is copied, but the reference count on each
--- member won’t be incremented.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return GdkPixbuf.Pixbuf[] # copy of window’s icon list
function Gtk.Window:get_icon_list() end

--- # method Gtk.Window:get_icon_name()
---
--- Returns the name of the themed icon for the window,
--- see `gtk_window_set_icon_name()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return string # the icon name or `nil` if the window has no themed icon
function Gtk.Window:get_icon_name() end

--- # method Gtk.Window:get_mnemonic_modifier()
---
--- Returns the mnemonic modifier for this window. See
--- `gtk_window_set_mnemonic_modifier()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return Gdk.ModifierType # the modifier mask used to activate mnemonics on this window.
function Gtk.Window:get_mnemonic_modifier() end

--- # method Gtk.Window:get_mnemonics_visible()
---
--- Gets the value of the `GtkWindow`:mnemonics-visible property.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if mnemonics are supposed to be visible in this window.
function Gtk.Window:get_mnemonics_visible() end

--- # method Gtk.Window:get_modal()
---
--- Returns whether the window is modal. See `gtk_window_set_modal()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if the window is set to be modal and establishes a grab when shown
function Gtk.Window:get_modal() end

--- # method Gtk.Window:get_opacity()
---
--- Fetches the requested opacity for this window. See
--- `gtk_window_set_opacity()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return number # the requested opacity for this window.
function Gtk.Window:get_opacity() end

--- # method Gtk.Window:get_position()
---
--- This function returns the position you need to pass to
--- `gtk_window_move()` to keep `window` in its current position.
--- This means that the meaning of the returned value varies with
--- window gravity. See `gtk_window_move()` for more details.
--- 
--- The reliability of this function depends on the windowing system
--- currently in use. Some windowing systems, such as Wayland, do not
--- support a global coordinate system, and thus the position of the
--- window will always be (0, 0). Others, like X11, do not have a reliable
--- way to obtain the geometry of the decorations of a window if they are
--- provided by the window manager. Additionally, on X11, window manager
--- have been known to mismanage window gravity, which result in windows
--- moving even if you use the coordinates of the current position as
--- returned by this function.
--- 
--- If you haven’t changed the window gravity, its gravity will be
--- `GDK_GRAVITY_NORTH_WEST`. This means that `gtk_window_get_position()`
--- gets the position of the top-left corner of the window manager
--- frame for the window. `gtk_window_move()` sets the position of this
--- same top-left corner.
--- 
--- If a window has gravity `GDK_GRAVITY_STATIC` the window manager
--- frame is not relevant, and thus `gtk_window_get_position()` will
--- always produce accurate results. However you can’t use static
--- gravity to do things like place a window in a corner of the screen,
--- because static gravity ignores the window manager decorations.
--- 
--- Ideally, this function should return appropriate values if the
--- window has client side decorations, assuming that the windowing
--- system supports global coordinates.
--- 
--- In practice, saving the window position should not be left to
--- applications, as they lack enough knowledge of the windowing
--- system and the window manager state to effectively do so. The
--- appropriate way to implement saving the window position is to
--- use a platform-specific protocol, wherever that is available.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param root_x? integer # return location for X coordinate of gravity-determined reference point, or `nil`
---@param root_y? integer # return location for Y coordinate of gravity-determined reference point, or `nil`
---@return nil
function Gtk.Window:get_position(root_x, root_y) end

--- # method Gtk.Window:get_resizable()
---
--- Gets the value set by `gtk_window_set_resizable()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if the user can resize the window
function Gtk.Window:get_resizable() end

--- # method Gtk.Window:get_resize_grip_area()
---
--- If a window has a resize grip, this will retrieve the grip
--- position, width and height into the specified `GdkRectangle`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param rect Gdk.Rectangle # a pointer to a `GdkRectangle` which we should store the resize grip area
---@return (boolean|nil) # `true` if the resize grip’s area was retrieved
function Gtk.Window:get_resize_grip_area(rect) end

--- # method Gtk.Window:get_role()
---
--- Returns the role of the window. See `gtk_window_set_role()` for
--- further explanation.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return string # the role of the window if set, or `nil`. The returned is owned by the widget and must not be modified or freed.
function Gtk.Window:get_role() end

--- # method Gtk.Window:get_screen()
---
--- Returns the `GdkScreen` associated with `window`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`.
---@return Gdk.Screen # a `GdkScreen`.
function Gtk.Window:get_screen() end

--- # method Gtk.Window:get_size()
---
--- Obtains the current size of `window`.
--- 
--- If `window` is not visible on screen, this function return the size GTK+
--- will suggest to the [window manager][gtk-X11-arch] for the initial window
--- size (but this is not reliably the same as the size the window manager
--- will actually select). See: `gtk_window_set_default_size()`.
--- 
--- Depending on the windowing system and the window manager constraints,
--- the size returned by this function may not match the size set using
--- `gtk_window_resize()`; additionally, since `gtk_window_resize()` may be
--- implemented as an asynchronous operation, GTK+ cannot guarantee in any
--- way that this code:
--- 
--- ```c
---   // width and height are set elsewhere
---   gtk_window_resize (window, width, height);
--- 
---   int new_width, new_height;
---   gtk_window_get_size (window, &new_width, &new_height);
--- ```
--- 
--- will result in `new_width` and `new_height` matching `width` and
--- `height`, respectively.
--- 
--- This function will return the logical size of the `GtkWindow`,
--- excluding the widgets used in client side decorations; there is,
--- however, no guarantee that the result will be completely accurate
--- because client side decoration may include widgets that depend on
--- the user preferences and that may not be visibile at the time you
--- call this function.
--- 
--- The dimensions returned by this function are suitable for being
--- stored across sessions; use `gtk_window_set_default_size()` to
--- restore them when before showing the window.
--- 
--- To avoid potential race conditions, you should only call this
--- function in response to a size change notification, for instance
--- inside a handler for the `GtkWidget`::size-allocate signal, or
--- inside a handler for the `GtkWidget`::configure-event signal:
--- 
--- ```c
--- static void
--- on_size_allocate (GtkWidget *widget, GtkAllocation *allocation)
--- {
---   int new_width, new_height;
--- 
---   gtk_window_get_size (GTK_WINDOW (widget), &new_width, &new_height);
--- 
---   ...
--- }
--- ```
--- 
--- Note that, if you connect to the `GtkWidget`::size-allocate signal,
--- you should not use the dimensions of the `GtkAllocation` passed to
--- the signal handler, as the allocation may contain client side
--- decorations added by GTK+, depending on the windowing system in
--- use.
--- 
--- If you are getting a window size in order to position the window
--- on the screen, you should, instead, simply set the window’s semantic
--- type with `gtk_window_set_type_hint()`, which allows the window manager
--- to e.g. center dialogs. Also, if you set the transient parent of
--- dialogs with `gtk_window_set_transient_for()` window managers will
--- often center the dialog over its parent window. It's much preferred
--- to let the window manager handle these cases rather than doing it
--- yourself, because all apps will behave consistently and according to
--- user or system preferences, if the window manager handles it. Also,
--- the window manager can take into account the size of the window
--- decorations and border that it may add, and of which GTK+ has no
--- knowledge. Additionally, positioning windows in global screen coordinates
--- may not be allowed by the windowing system. For more information,
--- see: `gtk_window_set_position()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param width? integer # return location for width, or `nil`
---@param height? integer # return location for height, or `nil`
---@return nil
function Gtk.Window:get_size(width, height) end

--- # method Gtk.Window:get_skip_pager_hint()
---
--- Gets the value set by `gtk_window_set_skip_pager_hint()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if window shouldn’t be in pager
function Gtk.Window:get_skip_pager_hint() end

--- # method Gtk.Window:get_skip_taskbar_hint()
---
--- Gets the value set by `gtk_window_set_skip_taskbar_hint()`
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if window shouldn’t be in taskbar
function Gtk.Window:get_skip_taskbar_hint() end

--- # method Gtk.Window:get_title()
---
--- Retrieves the title of the window. See `gtk_window_set_title()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return string # the title of the window, or `nil` if none has been set explicitly. The returned string is owned by the widget and must not be modified or freed.
function Gtk.Window:get_title() end

--- # method Gtk.Window:get_titlebar()
---
--- Returns the custom titlebar that has been set with
--- `gtk_window_set_titlebar()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return Gtk.Widget # the custom titlebar, or `nil`
function Gtk.Window:get_titlebar() end

--- # method Gtk.Window:get_transient_for()
---
--- Fetches the transient parent for this window. See
--- `gtk_window_set_transient_for()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return Gtk.Window # the transient parent for this window, or `nil` if no transient parent has been set.
function Gtk.Window:get_transient_for() end

--- # method Gtk.Window:get_type_hint()
---
--- Gets the type hint for this window. See `gtk_window_set_type_hint()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return Gdk.WindowTypeHint # the type hint for `window`.
function Gtk.Window:get_type_hint() end

--- # method Gtk.Window:get_urgency_hint()
---
--- Gets the value set by `gtk_window_set_urgency_hint()`
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if window is urgent
function Gtk.Window:get_urgency_hint() end

--- # method Gtk.Window:get_window_type()
---
--- Gets the type of the window. See `GtkWindowType`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return Gtk.WindowType # the type of the window
function Gtk.Window:get_window_type() end

--- # method Gtk.Window:has_group()
---
--- Returns whether `window` has an explicit window group.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if `window` has an explicit window group. Since 2.22
function Gtk.Window:has_group() end

--- # method Gtk.Window:has_toplevel_focus()
---
--- Returns whether the input focus is within this GtkWindow.
--- For real toplevel windows, this is identical to `gtk_window_is_active()`,
--- but for embedded windows, like `GtkPlug`, the results will differ.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if the input focus is within this GtkWindow
function Gtk.Window:has_toplevel_focus() end

--- # method Gtk.Window:iconify()
---
--- Asks to iconify (i.e. minimize) the specified `window`. Note that
--- you shouldn’t assume the window is definitely iconified afterward,
--- because other entities (e.g. the user or
--- [window manager][gtk-X11-arch]) could deiconify it
--- again, or there may not be a window manager in which case
--- iconification isn’t possible, etc. But normally the window will end
--- up iconified. Just don’t write code that crashes if not.
--- 
--- It’s permitted to call this function before showing a window,
--- in which case the window will be iconified before it ever appears
--- onscreen.
--- 
--- You can track iconification via the “window-state-event” signal
--- on `GtkWidget`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return nil
function Gtk.Window:iconify() end

--- # method Gtk.Window:is_active()
---
--- Returns whether the window is part of the current active toplevel.
--- (That is, the toplevel window receiving keystrokes.)
--- The return value is `true` if the window is active toplevel
--- itself, but also if it is, say, a `GtkPlug` embedded in the active toplevel.
--- You might use this function if you wanted to draw a widget
--- differently in an active window from a widget in an inactive window.
--- See `gtk_window_has_toplevel_focus()`
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if the window part of the current active window.
function Gtk.Window:is_active() end

--- # method Gtk.Window:is_maximized()
---
--- Retrieves the current maximized state of `window`.
--- 
--- Note that since maximization is ultimately handled by the window
--- manager and happens asynchronously to an application request, you
--- shouldn’t assume the return value of this function changing
--- immediately (or at all), as an effect of calling
--- `gtk_window_maximize()` or `gtk_window_unmaximize()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # whether the window has a maximized state.
function Gtk.Window:is_maximized() end

--- # method Gtk.Window:maximize()
---
--- Asks to maximize `window`, so that it becomes full-screen. Note that
--- you shouldn’t assume the window is definitely maximized afterward,
--- because other entities (e.g. the user or
--- [window manager][gtk-X11-arch]) could unmaximize it
--- again, and not all window managers support maximization. But
--- normally the window will end up maximized. Just don’t write code
--- that crashes if not.
--- 
--- It’s permitted to call this function before showing a window,
--- in which case the window will be maximized when it appears onscreen
--- initially.
--- 
--- You can track maximization via the “window-state-event” signal
--- on `GtkWidget`, or by listening to notifications on the
--- `GtkWindow`:is-maximized property.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return nil
function Gtk.Window:maximize() end

--- # method Gtk.Window:mnemonic_activate()
---
--- Activates the targets associated with the mnemonic.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param keyval integer # the mnemonic
---@param modifier Gdk.ModifierType # the modifiers
---@return (boolean|nil) # `true` if the activation is done.
function Gtk.Window:mnemonic_activate(keyval, modifier) end

--- # method Gtk.Window:move()
---
--- Asks the [window manager][gtk-X11-arch] to move
--- `window` to the given position.  Window managers are free to ignore
--- this; most window managers ignore requests for initial window
--- positions (instead using a user-defined placement algorithm) and
--- honor requests after the window has already been shown.
--- 
--- Note: the position is the position of the gravity-determined
--- reference point for the window. The gravity determines two things:
--- first, the location of the reference point in root window
--- coordinates; and second, which point on the window is positioned at
--- the reference point.
--- 
--- By default the gravity is `GDK_GRAVITY_NORTH_WEST`, so the reference
--- point is simply the `x`, `y` supplied to `gtk_window_move()`. The
--- top-left corner of the window decorations (aka window frame or
--- border) will be placed at `x`, `y`.  Therefore, to position a window
--- at the top left of the screen, you want to use the default gravity
--- (which is `GDK_GRAVITY_NORTH_WEST`) and move the window to 0,0.
--- 
--- To position a window at the bottom right corner of the screen, you
--- would set `GDK_GRAVITY_SOUTH_EAST`, which means that the reference
--- point is at `x` + the window width and `y` + the window height, and
--- the bottom-right corner of the window border will be placed at that
--- reference point. So, to place a window in the bottom right corner
--- you would first set gravity to south east, then write:
--- `gtk_window_move (window, gdk_screen_width () - window_width,
--- gdk_screen_height () - window_height)` (note that this
--- example does not take multi-head scenarios into account).
--- 
--- The [Extended Window Manager Hints Specification](http://www.freedesktop.org/Standards/wm-spec)
--- has a nice table of gravities in the “implementation notes” section.
--- 
--- The `gtk_window_get_position()` documentation may also be relevant.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param x integer # X coordinate to move window to
---@param y integer # Y coordinate to move window to
---@return nil
function Gtk.Window:move(x, y) end

--- # method Gtk.Window:parse_geometry()
---
--- Parses a standard X Window System geometry string - see the
--- manual page for X (type “man X”) for details on this.
--- `gtk_window_parse_geometry()` does work on all GTK+ ports
--- including Win32 but is primarily intended for an X environment.
--- 
--- If either a size or a position can be extracted from the
--- geometry string, `gtk_window_parse_geometry()` returns `true`
--- and calls `gtk_window_set_default_size()` and/or `gtk_window_move()`
--- to resize/move the window.
--- 
--- If `gtk_window_parse_geometry()` returns `true`, it will also
--- set the `GDK_HINT_USER_POS` and/or `GDK_HINT_USER_SIZE` hints
--- indicating to the window manager that the size/position of
--- the window was user-specified. This causes most window
--- managers to honor the geometry.
--- 
--- Note that for `gtk_window_parse_geometry()` to work as expected, it has
--- to be called when the window has its “final” size, i.e. after calling
--- `gtk_widget_show_all()` on the contents and `gtk_window_set_geometry_hints()`
--- on the window.
--- ```c
--- `include` <gtk/gtk.h>
--- 
--- static void
--- fill_with_content (GtkWidget *vbox)
--- {
---   // fill with content...
--- }
--- 
--- int
--- main (int argc, char *argv[])
--- {
---   GtkWidget *window, *vbox;
---   GdkGeometry size_hints = {
---     100, 50, 0, 0, 100, 50, 10,
---     10, 0.0, 0.0, GDK_GRAVITY_NORTH_WEST
---   };
--- 
---   gtk_init (&argc, &argv);
--- 
---   window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
---   vbox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
--- 
---   gtk_container_add (GTK_CONTAINER (window), vbox);
---   fill_with_content (vbox);
---   gtk_widget_show_all (vbox);
--- 
---   gtk_window_set_geometry_hints (GTK_WINDOW (window),
--- 	  			    NULL,
--- 				    &size_hints,
--- 				    GDK_HINT_MIN_SIZE |
--- 				    GDK_HINT_BASE_SIZE |
--- 				    GDK_HINT_RESIZE_INC);
--- 
---   if (argc > 1)
---     {
---       gboolean res;
---       res = gtk_window_parse_geometry (GTK_WINDOW (window),
---                                        argv[1]);
---       if (! res)
---         fprintf (stderr,
---                  "Failed to parse “%s”\n",
---                  argv[1]);
---     }
--- 
---   gtk_widget_show_all (window);
---   gtk_main ();
--- 
---   return 0;
--- }
--- ```
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param geometry string # geometry string
---@return (boolean|nil) # `true` if string was parsed successfully
function Gtk.Window:parse_geometry(geometry) end

--- # method Gtk.Window:present()
---
--- Presents a window to the user. This function should not be used
--- as when it is called, it is too late to gather a valid timestamp
--- to allow focus stealing prevention to work correctly.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return nil
function Gtk.Window:present() end

--- # method Gtk.Window:present_with_time()
---
--- Presents a window to the user. This may mean raising the window
--- in the stacking order, deiconifying it, moving it to the current
--- desktop, and/or giving it the keyboard focus, possibly dependent
--- on the user’s platform, window manager, and preferences.
--- 
--- If `window` is hidden, this function calls `gtk_widget_show()`
--- as well.
--- 
--- This function should be used when the user tries to open a window
--- that’s already open. Say for example the preferences dialog is
--- currently open, and the user chooses Preferences from the menu
--- a second time; use `gtk_window_present()` to move the already-open dialog
--- where the user can see it.
--- 
--- Presents a window to the user in response to a user interaction. The
--- timestamp should be gathered when the window was requested to be shown
--- (when clicking a link for example), rather than once the window is
--- ready to be shown.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param timestamp integer # the timestamp of the user interaction (typically a button or key press event) which triggered this call
---@return nil
function Gtk.Window:present_with_time(timestamp) end

--- # method Gtk.Window:propagate_key_event()
---
--- Propagate a key press or release event to the focus widget and
--- up the focus container chain until a widget handles `event`.
--- This is normally called by the default ::key_press_event and
--- ::key_release_event handlers for toplevel windows,
--- however in some cases it may be useful to call this directly when
--- overriding the standard key handling for a toplevel window.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param event Gdk.EventKey # a `GdkEventKey`
---@return (boolean|nil) # `true` if a widget in the focus chain handled the event.
function Gtk.Window:propagate_key_event(event) end

--- # method Gtk.Window:remove_accel_group()
---
--- Reverses the effects of `gtk_window_add_accel_group()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param accel_group Gtk.AccelGroup # a `GtkAccelGroup`
---@return nil
function Gtk.Window:remove_accel_group(accel_group) end

--- # method Gtk.Window:remove_mnemonic()
---
--- Removes a mnemonic from this window.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param keyval integer # the mnemonic
---@param target Gtk.Widget # the widget that gets activated by the mnemonic
---@return nil
function Gtk.Window:remove_mnemonic(keyval, target) end

--- # method Gtk.Window:reshow_with_initial_size()
---
--- Hides `window`, then reshows it, resetting the
--- default size and position of the window. Used
--- by GUI builders only.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return nil
function Gtk.Window:reshow_with_initial_size() end

--- # method Gtk.Window:resize()
---
--- Resizes the window as if the user had done so, obeying geometry
--- constraints. The default geometry constraint is that windows may
--- not be smaller than their size request; to override this
--- constraint, call `gtk_widget_set_size_request()` to set the window's
--- request to a smaller value.
--- 
--- If `gtk_window_resize()` is called before showing a window for the
--- first time, it overrides any default size set with
--- `gtk_window_set_default_size()`.
--- 
--- Windows may not be resized smaller than 1 by 1 pixels.
--- 
--- When using client side decorations, GTK+ will do its best to adjust
--- the given size so that the resulting window size matches the
--- requested size without the title bar, borders and shadows added for
--- the client side decorations, but there is no guarantee that the
--- result will be totally accurate because these widgets added for
--- client side decorations depend on the theme and may not be realized
--- or visible at the time `gtk_window_resize()` is issued.
--- 
--- If the GtkWindow has a titlebar widget (see `gtk_window_set_titlebar()`), then
--- typically, `gtk_window_resize()` will compensate for the height of the titlebar
--- widget only if the height is known when the resulting GtkWindow configuration
--- is issued.
--- For example, if new widgets are added after the GtkWindow configuration
--- and cause the titlebar widget to grow in height, this will result in a
--- window content smaller that specified by `gtk_window_resize()` and not
--- a larger window.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param width integer # width in pixels to resize the window to
---@param height integer # height in pixels to resize the window to
---@return nil
function Gtk.Window:resize(width, height) end

--- # method Gtk.Window:resize_grip_is_visible()
---
--- Determines whether a resize grip is visible for the specified window.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return (boolean|nil) # `true` if a resize grip exists and is visible
function Gtk.Window:resize_grip_is_visible() end

--- # method Gtk.Window:resize_to_geometry()
---
--- Like `gtk_window_resize()`, but `width` and `height` are interpreted
--- in terms of the base size and increment set with
--- gtk_window_set_geometry_hints.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param width integer # width in resize increments to resize the window to
---@param height integer # height in resize increments to resize the window to
---@return nil
function Gtk.Window:resize_to_geometry(width, height) end

--- # method Gtk.Window:set_accept_focus()
---
--- Windows may set a hint asking the desktop environment not to receive
--- the input focus. This function sets this hint.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param setting (boolean|nil) # `true` to let this window receive input focus
---@return nil
function Gtk.Window:set_accept_focus(setting) end

--- # method Gtk.Window:set_application()
---
--- Sets or unsets the `GtkApplication` associated with the window.
--- 
--- The application will be kept alive for at least as long as it has any windows
--- associated with it (see `g_application_hold()` for a way to keep it alive
--- without windows).
--- 
--- Normally, the connection between the application and the window will remain
--- until the window is destroyed, but you can explicitly remove it by setting
--- the `application` to `nil`.
--- 
--- This is equivalent to calling `gtk_application_remove_window()` and/or
--- `gtk_application_add_window()` on the old/new applications as relevant.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param application? Gtk.Application # a `GtkApplication`, or `nil` to unset
---@return nil
function Gtk.Window:set_application(application) end

--- # method Gtk.Window:set_attached_to()
---
--- Marks `window` as attached to `attach_widget`. This creates a logical binding
--- between the window and the widget it belongs to, which is used by GTK+ to
--- propagate information such as styling or accessibility to `window` as if it
--- was a children of `attach_widget`.
--- 
--- Examples of places where specifying this relation is useful are for instance
--- a `GtkMenu` created by a `GtkComboBox`, a completion popup window
--- created by `GtkEntry` or a typeahead search entry created by `GtkTreeView`.
--- 
--- Note that this function should not be confused with
--- `gtk_window_set_transient_for()`, which specifies a window manager relation
--- between two toplevels instead.
--- 
--- Passing `nil` for `attach_widget` detaches the window.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param attach_widget? Gtk.Widget # a `GtkWidget`, or `nil`
---@return nil
function Gtk.Window:set_attached_to(attach_widget) end

--- # method Gtk.Window:set_decorated()
---
--- By default, windows are decorated with a title bar, resize
--- controls, etc.  Some [window managers][gtk-X11-arch]
--- allow GTK+ to disable these decorations, creating a
--- borderless window. If you set the decorated property to `false`
--- using this function, GTK+ will do its best to convince the window
--- manager not to decorate the window. Depending on the system, this
--- function may not have any effect when called on a window that is
--- already visible, so you should call it before calling `gtk_widget_show()`.
--- 
--- On Windows, this function always works, since there’s no window manager
--- policy involved.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param setting (boolean|nil) # `true` to decorate the window
---@return nil
function Gtk.Window:set_decorated(setting) end

--- # method Gtk.Window:set_default()
---
--- The default widget is the widget that’s activated when the user
--- presses Enter in a dialog (for example). This function sets or
--- unsets the default widget for a `GtkWindow`. When setting (rather
--- than unsetting) the default widget it’s generally easier to call
--- `gtk_widget_grab_default()` on the widget. Before making a widget
--- the default widget, you must call `gtk_widget_set_can_default()` on
--- the widget you’d like to make the default.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param default_widget? Gtk.Widget # widget to be the default, or `nil` to unset the default widget for the toplevel
---@return nil
function Gtk.Window:set_default(default_widget) end

--- # method Gtk.Window:set_default_geometry()
---
--- Like `gtk_window_set_default_size()`, but `width` and `height` are interpreted
--- in terms of the base size and increment set with
--- gtk_window_set_geometry_hints.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param width integer # width in resize increments, or -1 to unset the default width
---@param height integer # height in resize increments, or -1 to unset the default height
---@return nil
function Gtk.Window:set_default_geometry(width, height) end

--- # method Gtk.Window:set_default_size()
---
--- Sets the default size of a window. If the window’s “natural” size
--- (its size request) is larger than the default, the default will be
--- ignored. More generally, if the default size does not obey the
--- geometry hints for the window (`gtk_window_set_geometry_hints()` can
--- be used to set these explicitly), the default size will be clamped
--- to the nearest permitted size.
--- 
--- Unlike `gtk_widget_set_size_request()`, which sets a size request for
--- a widget and thus would keep users from shrinking the window, this
--- function only sets the initial size, just as if the user had
--- resized the window themselves. Users can still shrink the window
--- again as they normally would. Setting a default size of -1 means to
--- use the “natural” default size (the size request of the window).
--- 
--- For more control over a window’s initial size and how resizing works,
--- investigate `gtk_window_set_geometry_hints()`.
--- 
--- For some uses, `gtk_window_resize()` is a more appropriate function.
--- `gtk_window_resize()` changes the current size of the window, rather
--- than the size to be used on initial display. `gtk_window_resize()` always
--- affects the window itself, not the geometry widget.
--- 
--- The default size of a window only affects the first time a window is
--- shown; if a window is hidden and re-shown, it will remember the size
--- it had prior to hiding, rather than using the default size.
--- 
--- Windows can’t actually be 0x0 in size, they must be at least 1x1, but
--- passing 0 for `width` and `height` is OK, resulting in a 1x1 default size.
--- 
--- If you use this function to reestablish a previously saved window size,
--- note that the appropriate size to save is the one returned by
--- `gtk_window_get_size()`. Using the window allocation directly will not
--- work in all circumstances and can lead to growing or shrinking windows.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param width integer # width in pixels, or -1 to unset the default width
---@param height integer # height in pixels, or -1 to unset the default height
---@return nil
function Gtk.Window:set_default_size(width, height) end

--- # method Gtk.Window:set_deletable()
---
--- By default, windows have a close button in the window frame. Some
--- [window managers][gtk-X11-arch] allow GTK+ to
--- disable this button. If you set the deletable property to `false`
--- using this function, GTK+ will do its best to convince the window
--- manager not to show a close button. Depending on the system, this
--- function may not have any effect when called on a window that is
--- already visible, so you should call it before calling `gtk_widget_show()`.
--- 
--- On Windows, this function always works, since there’s no window manager
--- policy involved.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param setting (boolean|nil) # `true` to decorate the window as deletable
---@return nil
function Gtk.Window:set_deletable(setting) end

--- # method Gtk.Window:set_destroy_with_parent()
---
--- If `setting` is `true`, then destroying the transient parent of `window`
--- will also destroy `window` itself. This is useful for dialogs that
--- shouldn’t persist beyond the lifetime of the main window they're
--- associated with, for example.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param setting (boolean|nil) # whether to destroy `window` with its transient parent
---@return nil
function Gtk.Window:set_destroy_with_parent(setting) end

--- # method Gtk.Window:set_focus()
---
--- If `focus` is not the current focus widget, and is focusable, sets
--- it as the focus widget for the window. If `focus` is `nil`, unsets
--- the focus widget for this window. To set the focus to a particular
--- widget in the toplevel, it is usually more convenient to use
--- `gtk_widget_grab_focus()` instead of this function.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param focus? Gtk.Widget # widget to be the new focus widget, or `nil` to unset any focus widget for the toplevel window.
---@return nil
function Gtk.Window:set_focus(focus) end

--- # method Gtk.Window:set_focus_on_map()
---
--- Windows may set a hint asking the desktop environment not to receive
--- the input focus when the window is mapped.  This function sets this
--- hint.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param setting (boolean|nil) # `true` to let this window receive input focus on map
---@return nil
function Gtk.Window:set_focus_on_map(setting) end

--- # method Gtk.Window:set_focus_visible()
---
--- Sets the `GtkWindow`:focus-visible property.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param setting (boolean|nil) # the new value
---@return nil
function Gtk.Window:set_focus_visible(setting) end

--- # method Gtk.Window:set_geometry_hints()
---
--- This function sets up hints about how a window can be resized by
--- the user.  You can set a minimum and maximum size; allowed resize
--- increments (e.g. for xterm, you can only resize by the size of a
--- character); aspect ratios; and more. See the `GdkGeometry` struct.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param geometry_widget? Gtk.Widget # widget the geometry hints used to be applied to or `nil`. Since 3.20 this argument is ignored and GTK behaves as if `nil` was set.
---@param geometry? Gdk.Geometry # struct containing geometry information or `nil`
---@param geom_mask Gdk.WindowHints # mask indicating which struct fields should be paid attention to
---@return nil
function Gtk.Window:set_geometry_hints(geometry_widget, geometry, geom_mask) end

--- # method Gtk.Window:set_gravity()
---
--- Window gravity defines the meaning of coordinates passed to
--- `gtk_window_move()`. See `gtk_window_move()` and `GdkGravity` for
--- more details.
--- 
--- The default window gravity is `GDK_GRAVITY_NORTH_WEST` which will
--- typically “do what you mean.”
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param gravity Gdk.Gravity # window gravity
---@return nil
function Gtk.Window:set_gravity(gravity) end

--- # method Gtk.Window:set_has_resize_grip()
---
--- Sets whether `window` has a corner resize grip.
--- 
--- Note that the resize grip is only shown if the window
--- is actually resizable and not maximized. Use
--- `gtk_window_resize_grip_is_visible()` to find out if the
--- resize grip is currently shown.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param value (boolean|nil) # `true` to allow a resize grip
---@return nil
function Gtk.Window:set_has_resize_grip(value) end

--- # method Gtk.Window:set_has_user_ref_count()
---
--- Tells GTK+ whether to drop its extra reference to the window
--- when `gtk_widget_destroy()` is called.
--- 
--- This function is only exported for the benefit of language
--- bindings which may need to keep the window alive until their
--- wrapper object is garbage collected. There is no justification
--- for ever calling this function in an application.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param setting (boolean|nil) # the new value
---@return nil
function Gtk.Window:set_has_user_ref_count(setting) end

--- # method Gtk.Window:set_hide_titlebar_when_maximized()
---
--- If `setting` is `true`, then `window` will request that it’s titlebar
--- should be hidden when maximized.
--- This is useful for windows that don’t convey any information other
--- than the application name in the titlebar, to put the available
--- screen space to better use. If the underlying window system does not
--- support the request, the setting will not have any effect.
--- 
--- Note that custom titlebars set with `gtk_window_set_titlebar()` are
--- not affected by this. The application is in full control of their
--- content and visibility anyway.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param setting (boolean|nil) # whether to hide the titlebar when `window` is maximized
---@return nil
function Gtk.Window:set_hide_titlebar_when_maximized(setting) end

--- # method Gtk.Window:set_icon()
---
--- Sets up the icon representing a `GtkWindow`. This icon is used when
--- the window is minimized (also known as iconified).  Some window
--- managers or desktop environments may also place it in the window
--- frame, or display it in other contexts. On others, the icon is not
--- used at all, so your mileage may vary.
--- 
--- The icon should be provided in whatever size it was naturally
--- drawn; that is, don’t scale the image before passing it to
--- GTK+. Scaling is postponed until the last minute, when the desired
--- final size is known, to allow best quality.
--- 
--- If you have your icon hand-drawn in multiple sizes, use
--- `gtk_window_set_icon_list()`. Then the best size will be used.
--- 
--- This function is equivalent to calling `gtk_window_set_icon_list()`
--- with a 1-element list.
--- 
--- See also `gtk_window_set_default_icon_list()` to set the icon
--- for all windows in your application in one go.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param icon? GdkPixbuf.Pixbuf # icon image, or `nil`
---@return nil
function Gtk.Window:set_icon(icon) end

--- # method Gtk.Window:set_icon_from_file()
---
--- Sets the icon for `window`.
--- Warns on failure if `err` is `nil`.
--- 
--- This function is equivalent to calling `gtk_window_set_icon()`
--- with a pixbuf created by loading the image from `filename`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param filename string # location of icon file
---@return (boolean|nil) # `true` if setting the icon succeeded.
function Gtk.Window:set_icon_from_file(filename) end

--- # method Gtk.Window:set_icon_list()
---
--- Sets up the icon representing a `GtkWindow`. The icon is used when
--- the window is minimized (also known as iconified).  Some window
--- managers or desktop environments may also place it in the window
--- frame, or display it in other contexts. On others, the icon is not
--- used at all, so your mileage may vary.
--- 
--- `gtk_window_set_icon_list()` allows you to pass in the same icon in
--- several hand-drawn sizes. The list should contain the natural sizes
--- your icon is available in; that is, don’t scale the image before
--- passing it to GTK+. Scaling is postponed until the last minute,
--- when the desired final size is known, to allow best quality.
--- 
--- By passing several sizes, you may improve the final image quality
--- of the icon, by reducing or eliminating automatic image scaling.
--- 
--- Recommended sizes to provide: 16x16, 32x32, 48x48 at minimum, and
--- larger images (64x64, 128x128) if you have them.
--- 
--- See also `gtk_window_set_default_icon_list()` to set the icon
--- for all windows in your application in one go.
--- 
--- Note that transient windows (those who have been set transient for another
--- window using `gtk_window_set_transient_for()`) will inherit their
--- icon from their transient parent. So there’s no need to explicitly
--- set the icon on transient windows.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param list GdkPixbuf.Pixbuf[] # list of `GdkPixbuf`
---@return nil
function Gtk.Window:set_icon_list(list) end

--- # method Gtk.Window:set_icon_name()
---
--- Sets the icon for the window from a named themed icon.
--- See the docs for `GtkIconTheme` for more details.
--- On some platforms, the window icon is not used at all.
--- 
--- Note that this has nothing to do with the WM_ICON_NAME
--- property which is mentioned in the ICCCM.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param name? string # the name of the themed icon
---@return nil
function Gtk.Window:set_icon_name(name) end

--- # method Gtk.Window:set_keep_above()
---
--- Asks to keep `window` above, so that it stays on top. Note that
--- you shouldn’t assume the window is definitely above afterward,
--- because other entities (e.g. the user or
--- [window manager][gtk-X11-arch]) could not keep it above,
--- and not all window managers support keeping windows above. But
--- normally the window will end kept above. Just don’t write code
--- that crashes if not.
--- 
--- It’s permitted to call this function before showing a window,
--- in which case the window will be kept above when it appears onscreen
--- initially.
--- 
--- You can track the above state via the “window-state-event” signal
--- on `GtkWidget`.
--- 
--- Note that, according to the
--- [Extended Window Manager Hints Specification](http://www.freedesktop.org/Standards/wm-spec),
--- the above state is mainly meant for user preferences and should not
--- be used by applications e.g. for drawing attention to their
--- dialogs.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param setting (boolean|nil) # whether to keep `window` above other windows
---@return nil
function Gtk.Window:set_keep_above(setting) end

--- # method Gtk.Window:set_keep_below()
---
--- Asks to keep `window` below, so that it stays in bottom. Note that
--- you shouldn’t assume the window is definitely below afterward,
--- because other entities (e.g. the user or
--- [window manager][gtk-X11-arch]) could not keep it below,
--- and not all window managers support putting windows below. But
--- normally the window will be kept below. Just don’t write code
--- that crashes if not.
--- 
--- It’s permitted to call this function before showing a window,
--- in which case the window will be kept below when it appears onscreen
--- initially.
--- 
--- You can track the below state via the “window-state-event” signal
--- on `GtkWidget`.
--- 
--- Note that, according to the
--- [Extended Window Manager Hints Specification](http://www.freedesktop.org/Standards/wm-spec),
--- the above state is mainly meant for user preferences and should not
--- be used by applications e.g. for drawing attention to their
--- dialogs.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param setting (boolean|nil) # whether to keep `window` below other windows
---@return nil
function Gtk.Window:set_keep_below(setting) end

--- # method Gtk.Window:set_mnemonic_modifier()
---
--- Sets the mnemonic modifier for this window.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param modifier Gdk.ModifierType # the modifier mask used to activate mnemonics on this window.
---@return nil
function Gtk.Window:set_mnemonic_modifier(modifier) end

--- # method Gtk.Window:set_mnemonics_visible()
---
--- Sets the `GtkWindow`:mnemonics-visible property.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param setting (boolean|nil) # the new value
---@return nil
function Gtk.Window:set_mnemonics_visible(setting) end

--- # method Gtk.Window:set_modal()
---
--- Sets a window modal or non-modal. Modal windows prevent interaction
--- with other windows in the same application. To keep modal dialogs
--- on top of main application windows, use
--- `gtk_window_set_transient_for()` to make the dialog transient for the
--- parent; most [window managers][gtk-X11-arch]
--- will then disallow lowering the dialog below the parent.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param modal (boolean|nil) # whether the window is modal
---@return nil
function Gtk.Window:set_modal(modal) end

--- # method Gtk.Window:set_opacity()
---
--- Request the windowing system to make `window` partially transparent,
--- with opacity 0 being fully transparent and 1 fully opaque. (Values
--- of the opacity parameter are clamped to the [0,1] range.) On X11
--- this has any effect only on X screens with a compositing manager
--- running. See `gtk_widget_is_composited()`. On Windows it should work
--- always.
--- 
--- Note that setting a window’s opacity after the window has been
--- shown causes it to flicker once on Windows.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param opacity number # desired opacity, between 0 and 1
---@return nil
function Gtk.Window:set_opacity(opacity) end

--- # method Gtk.Window:set_position()
---
--- Sets a position constraint for this window. If the old or new
--- constraint is %GTK_WIN_POS_CENTER_ALWAYS, this will also cause
--- the window to be repositioned to satisfy the new constraint.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`.
---@param position Gtk.WindowPosition # a position constraint.
---@return nil
function Gtk.Window:set_position(position) end

--- # method Gtk.Window:set_resizable()
---
--- Sets whether the user can resize a window. Windows are user resizable
--- by default.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param resizable (boolean|nil) # `true` if the user can resize this window
---@return nil
function Gtk.Window:set_resizable(resizable) end

--- # method Gtk.Window:set_role()
---
--- This function is only useful on X11, not with other GTK+ targets.
--- 
--- In combination with the window title, the window role allows a
--- [window manager][gtk-X11-arch] to identify "the
--- same" window when an application is restarted. So for example you
--- might set the “toolbox” role on your app’s toolbox window, so that
--- when the user restarts their session, the window manager can put
--- the toolbox back in the same place.
--- 
--- If a window already has a unique title, you don’t need to set the
--- role, since the WM can use the title to identify the window when
--- restoring the session.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param role string # unique identifier for the window to be used when restoring a session
---@return nil
function Gtk.Window:set_role(role) end

--- # method Gtk.Window:set_screen()
---
--- Sets the `GdkScreen` where the `window` is displayed; if
--- the window is already mapped, it will be unmapped, and
--- then remapped on the new screen.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`.
---@param screen Gdk.Screen # a `GdkScreen`.
---@return nil
function Gtk.Window:set_screen(screen) end

--- # method Gtk.Window:set_skip_pager_hint()
---
--- Windows may set a hint asking the desktop environment not to display
--- the window in the pager. This function sets this hint.
--- (A "pager" is any desktop navigation tool such as a workspace
--- switcher that displays a thumbnail representation of the windows
--- on the screen.)
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param setting (boolean|nil) # `true` to keep this window from appearing in the pager
---@return nil
function Gtk.Window:set_skip_pager_hint(setting) end

--- # method Gtk.Window:set_skip_taskbar_hint()
---
--- Windows may set a hint asking the desktop environment not to display
--- the window in the task bar. This function sets this hint.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param setting (boolean|nil) # `true` to keep this window from appearing in the task bar
---@return nil
function Gtk.Window:set_skip_taskbar_hint(setting) end

--- # method Gtk.Window:set_startup_id()
---
--- Startup notification identifiers are used by desktop environment to
--- track application startup, to provide user feedback and other
--- features. This function changes the corresponding property on the
--- underlying GdkWindow. Normally, startup identifier is managed
--- automatically and you should only use this function in special cases
--- like transferring focus from other processes. You should use this
--- function before calling `gtk_window_present()` or any equivalent
--- function generating a window map event.
--- 
--- This function is only useful on X11, not with other GTK+ targets.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param startup_id string # a string with startup-notification identifier
---@return nil
function Gtk.Window:set_startup_id(startup_id) end

--- # method Gtk.Window:set_title()
---
--- Sets the title of the `GtkWindow`. The title of a window will be
--- displayed in its title bar; on the X Window System, the title bar
--- is rendered by the [window manager][gtk-X11-arch],
--- so exactly how the title appears to users may vary
--- according to a user’s exact configuration. The title should help a
--- user distinguish this window from other windows they may have
--- open. A good title might include the application name and current
--- document filename, for example.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param title string # title of the window
---@return nil
function Gtk.Window:set_title(title) end

--- # method Gtk.Window:set_titlebar()
---
--- Sets a custom titlebar for `window`.
--- 
--- A typical widget used here is `GtkHeaderBar`, as it provides various features
--- expected of a titlebar while allowing the addition of child widgets to it.
--- 
--- If you set a custom titlebar, GTK+ will do its best to convince
--- the window manager not to put its own titlebar on the window.
--- Depending on the system, this function may not work for a window
--- that is already visible, so you set the titlebar before calling
--- `gtk_widget_show()`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param titlebar? Gtk.Widget # the widget to use as titlebar
---@return nil
function Gtk.Window:set_titlebar(titlebar) end

--- # method Gtk.Window:set_transient_for()
---
--- Dialog windows should be set transient for the main application
--- window they were spawned from. This allows
--- [window managers][gtk-X11-arch] to e.g. keep the
--- dialog on top of the main window, or center the dialog over the
--- main window. `gtk_dialog_new_with_buttons()` and other convenience
--- functions in GTK+ will sometimes call
--- `gtk_window_set_transient_for()` on your behalf.
--- 
--- Passing `nil` for `parent` unsets the current transient window.
--- 
--- On Wayland, this function can also be used to attach a new
--- `GTK_WINDOW_POPUP` to a `GTK_WINDOW_TOPLEVEL` parent already mapped
--- on screen so that the `GTK_WINDOW_POPUP` will be created as a
--- subsurface-based window `GDK_WINDOW_SUBSURFACE` which can be
--- positioned at will relatively to the `GTK_WINDOW_TOPLEVEL` surface.
--- 
--- On Windows, this function puts the child window on top of the parent,
--- much as the window manager would have done on X.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param parent? Gtk.Window # parent window, or `nil`
---@return nil
function Gtk.Window:set_transient_for(parent) end

--- # method Gtk.Window:set_type_hint()
---
--- By setting the type hint for the window, you allow the window
--- manager to decorate and handle the window in a way which is
--- suitable to the function of the window in your application.
--- 
--- This function should be called before the window becomes visible.
--- 
--- `gtk_dialog_new_with_buttons()` and other convenience functions in GTK+
--- will sometimes call `gtk_window_set_type_hint()` on your behalf.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param hint Gdk.WindowTypeHint # the window type
---@return nil
function Gtk.Window:set_type_hint(hint) end

--- # method Gtk.Window:set_urgency_hint()
---
--- Windows may set a hint asking the desktop environment to draw
--- the users attention to the window. This function sets this hint.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param setting (boolean|nil) # `true` to mark this window as urgent
---@return nil
function Gtk.Window:set_urgency_hint(setting) end

--- # method Gtk.Window:set_wmclass()
---
--- Don’t use this function. It sets the X Window System “class” and
--- “name” hints for a window.  According to the ICCCM, you should
--- always set these to the same value for all windows in an
--- application, and GTK+ sets them to that value by default, so calling
--- this function is sort of pointless. However, you may want to call
--- `gtk_window_set_role()` on each window in your application, for the
--- benefit of the session manager. Setting the role allows the window
--- manager to restore window positions when loading a saved session.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@param wmclass_name string # window name hint
---@param wmclass_class string # window class hint
---@return nil
function Gtk.Window:set_wmclass(wmclass_name, wmclass_class) end

--- # method Gtk.Window:stick()
---
--- Asks to stick `window`, which means that it will appear on all user
--- desktops. Note that you shouldn’t assume the window is definitely
--- stuck afterward, because other entities (e.g. the user or
--- [window manager][gtk-X11-arch] could unstick it
--- again, and some window managers do not support sticking
--- windows. But normally the window will end up stuck. Just don't
--- write code that crashes if not.
--- 
--- It’s permitted to call this function before showing a window.
--- 
--- You can track stickiness via the “window-state-event” signal
--- on `GtkWidget`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return nil
function Gtk.Window:stick() end

--- # method Gtk.Window:unfullscreen()
---
--- Asks to toggle off the fullscreen state for `window`. Note that you
--- shouldn’t assume the window is definitely not full screen
--- afterward, because other entities (e.g. the user or
--- [window manager][gtk-X11-arch]) could fullscreen it
--- again, and not all window managers honor requests to unfullscreen
--- windows. But normally the window will end up restored to its normal
--- state. Just don’t write code that crashes if not.
--- 
--- You can track the fullscreen state via the “window-state-event” signal
--- on `GtkWidget`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return nil
function Gtk.Window:unfullscreen() end

--- # method Gtk.Window:unmaximize()
---
--- Asks to unmaximize `window`. Note that you shouldn’t assume the
--- window is definitely unmaximized afterward, because other entities
--- (e.g. the user or [window manager][gtk-X11-arch])
--- could maximize it again, and not all window
--- managers honor requests to unmaximize. But normally the window will
--- end up unmaximized. Just don’t write code that crashes if not.
--- 
--- You can track maximization via the “window-state-event” signal
--- on `GtkWidget`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return nil
function Gtk.Window:unmaximize() end

--- # method Gtk.Window:unstick()
---
--- Asks to unstick `window`, which means that it will appear on only
--- one of the user’s desktops. Note that you shouldn’t assume the
--- window is definitely unstuck afterward, because other entities
--- (e.g. the user or [window manager][gtk-X11-arch]) could
--- stick it again. But normally the window will
--- end up unstuck. Just don’t write code that crashes if not.
--- 
--- You can track stickiness via the “window-state-event” signal
--- on `GtkWidget`.
---
--- ---
---
---@param self Gtk.Window # a `GtkWindow`
---@return nil
function Gtk.Window:unstick() end

--- # function Gtk.Window.get_default_icon_list()
---
--- Gets the value set by `gtk_window_set_default_icon_list()`.
--- The list is a copy and should be freed with `g_list_free()`,
--- but the pixbufs in the list have not had their reference count
--- incremented.
---
--- ---
---
---@return GdkPixbuf.Pixbuf[] # copy of default icon list
function Gtk.Window.get_default_icon_list() end

--- # function Gtk.Window.get_default_icon_name()
---
--- Returns the fallback icon name for windows that has been set
--- with `gtk_window_set_default_icon_name()`. The returned
--- string is owned by GTK+ and should not be modified. It
--- is only valid until the next call to
--- `gtk_window_set_default_icon_name()`.
---
--- ---
---
---@return string # the fallback icon name for windows
function Gtk.Window.get_default_icon_name() end

--- # function Gtk.Window.list_toplevels()
---
--- Returns a list of all existing toplevel windows. The widgets
--- in the list are not individually referenced. If you want
--- to iterate through the list and perform actions involving
--- callbacks that might destroy the widgets, you must call
--- `g_list_foreach (result, (GFunc)g_object_ref, NULL)` first, and
--- then unref all the widgets afterwards.
---
--- ---
---
---@return Gtk.Widget[] # list of toplevel widgets
function Gtk.Window.list_toplevels() end

--- # function Gtk.Window.set_auto_startup_notification()
---
--- By default, after showing the first `GtkWindow`, GTK+ calls
--- `gdk_notify_startup_complete()`.  Call this function to disable
--- the automatic startup notification. You might do this if your
--- first window is a splash screen, and you want to delay notification
--- until after your real main window has been shown, for example.
--- 
--- In that example, you would disable startup notification
--- temporarily, show your splash screen, then re-enable it so that
--- showing the main window would automatically result in notification.
---
--- ---
---
---@param setting (boolean|nil) # `true` to automatically do startup notification
---@return nil
function Gtk.Window.set_auto_startup_notification(setting) end

--- # function Gtk.Window.set_default_icon()
---
--- Sets an icon to be used as fallback for windows that haven't
--- had `gtk_window_set_icon()` called on them from a pixbuf.
---
--- ---
---
---@param icon GdkPixbuf.Pixbuf # the icon
---@return nil
function Gtk.Window.set_default_icon(icon) end

--- # function Gtk.Window.set_default_icon_from_file()
---
--- Sets an icon to be used as fallback for windows that haven't
--- had `gtk_window_set_icon_list()` called on them from a file
--- on disk. Warns on failure if `err` is `nil`.
---
--- ---
---
---@param filename string # location of icon file
---@return (boolean|nil) # `true` if setting the icon succeeded.
function Gtk.Window.set_default_icon_from_file(filename) end

--- # function Gtk.Window.set_default_icon_list()
---
--- Sets an icon list to be used as fallback for windows that haven't
--- had `gtk_window_set_icon_list()` called on them to set up a
--- window-specific icon list. This function allows you to set up the
--- icon for all windows in your app at once.
--- 
--- See `gtk_window_set_icon_list()` for more details.
---
--- ---
---
---@param list GdkPixbuf.Pixbuf[] # a list of `GdkPixbuf`
---@return nil
function Gtk.Window.set_default_icon_list(list) end

--- # function Gtk.Window.set_default_icon_name()
---
--- Sets an icon to be used as fallback for windows that haven't
--- had `gtk_window_set_icon_list()` called on them from a named
--- themed icon, see `gtk_window_set_icon_name()`.
---
--- ---
---
---@param name string # the name of the themed icon
---@return nil
function Gtk.Window.set_default_icon_name(name) end

--- # function Gtk.Window.set_interactive_debugging()
---
--- Opens or closes the [interactive debugger][interactive-debugging],
--- which offers access to the widget hierarchy of the application
--- and to useful debugging tools.
---
--- ---
---
---@param enable (boolean|nil) # `true` to enable interactive debugging
---@return nil
function Gtk.Window.set_interactive_debugging(enable) end

--- # function Gtk.Window.new()
---
--- Creates a new `GtkWindow`, which is a toplevel window that can
--- contain other widgets. Nearly always, the type of the window should
--- be `GTK_WINDOW_TOPLEVEL`. If you’re implementing something like a
--- popup menu from scratch (which is a bad idea, just use `GtkMenu`),
--- you might use `GTK_WINDOW_POPUP`. `GTK_WINDOW_POPUP` is not for
--- dialogs, though in some other toolkits dialogs are called “popups”.
--- In GTK+, `GTK_WINDOW_POPUP` means a pop-up menu or pop-up tooltip.
--- On X11, popup windows are not controlled by the
--- [window manager][gtk-X11-arch].
--- 
--- If you simply want an undecorated window (no window borders), use
--- `gtk_window_set_decorated()`, don’t use `GTK_WINDOW_POPUP`.
--- 
--- All top-level windows created by `gtk_window_new()` are stored in
--- an internal top-level window list.  This list can be obtained from
--- `gtk_window_list_toplevels()`.  Due to Gtk+ keeping a reference to
--- the window internally, `gtk_window_new()` does not return a reference
--- to the caller.
--- 
--- To delete a `GtkWindow`, call `gtk_widget_destroy()`.
---
--- ---
---
---@param type Gtk.WindowType # type of window
---@return Gtk.Widget # a new `GtkWindow`.
function Gtk.Window.new(type) end

--- # class Gtk.WindowAccessible
---
---@class Gtk.WindowAccessible : Gtk.ContainerAccessible, Gtk.Atk.Component, Gtk.Atk.Window
---@field parent Gtk.ContainerAccessible
---@field priv Gtk.WindowAccessiblePrivate
Gtk.WindowAccessible = {}

--- # record Gtk.WindowAccessibleClass
---
---@class Gtk.WindowAccessibleClass
---@field parent_class Gtk.ContainerAccessibleClass
Gtk.WindowAccessibleClass = {}

--- # record Gtk.WindowAccessiblePrivate
---
---@class Gtk.WindowAccessiblePrivate
Gtk.WindowAccessiblePrivate = {}

--- # record Gtk.WindowClass
---
---@class Gtk.WindowClass
---@field parent_class Gtk.BinClass # The parent class.
---@field set_focus fun(window: Gtk.Window, focus: Gtk.Widget): nil
---@field activate_focus fun(window: Gtk.Window): nil
---@field activate_default fun(window: Gtk.Window): nil
---@field keys_changed fun(window: Gtk.Window): nil
---@field enable_debugging fun(window: Gtk.Window, toggle: (boolean|nil)): (boolean|nil)
Gtk.WindowClass = {}

--- # record Gtk.WindowGeometryInfo
---
---@class Gtk.WindowGeometryInfo
Gtk.WindowGeometryInfo = {}

--- # class Gtk.WindowGroup
---
--- A `GtkWindowGroup` restricts the effect of grabs to windows
--- in the same group, thereby making window groups almost behave
--- like separate applications.
--- 
--- A window can be a member in at most one window group at a time.
--- Windows that have not been explicitly assigned to a group are
--- implicitly treated like windows of the default window group.
--- 
--- GtkWindowGroup objects are referenced by each window in the group,
--- so once you have added all windows to a GtkWindowGroup, you can drop
--- the initial reference to the window group with `g_object_unref()`. If the
--- windows in the window group are subsequently destroyed, then they will
--- be removed from the window group and drop their references on the window
--- group; when all window have been removed, the window group will be
--- freed.
---
--- ---
---
---@class Gtk.WindowGroup : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gtk.WindowGroupPrivate
---@operator call: Gtk.WindowGroup
Gtk.WindowGroup = {}

--- # method Gtk.WindowGroup:add_window()
---
--- Adds a window to a `GtkWindowGroup`.
---
--- ---
---
---@param self Gtk.WindowGroup # a `GtkWindowGroup`
---@param window Gtk.Window # the `GtkWindow` to add
---@return nil
function Gtk.WindowGroup:add_window(window) end

--- # method Gtk.WindowGroup:get_current_device_grab()
---
--- Returns the current grab widget for `device`, or `nil` if none.
---
--- ---
---
---@param self Gtk.WindowGroup # a `GtkWindowGroup`
---@param device Gdk.Device # a `GdkDevice`
---@return Gtk.Widget # The grab widget, or `nil`
function Gtk.WindowGroup:get_current_device_grab(device) end

--- # method Gtk.WindowGroup:get_current_grab()
---
--- Gets the current grab widget of the given group,
--- see `gtk_grab_add()`.
---
--- ---
---
---@param self Gtk.WindowGroup # a `GtkWindowGroup`
---@return Gtk.Widget # the current grab widget of the group
function Gtk.WindowGroup:get_current_grab() end

--- # method Gtk.WindowGroup:list_windows()
---
--- Returns a list of the `GtkWindows` that belong to `window_group`.
---
--- ---
---
---@param self Gtk.WindowGroup # a `GtkWindowGroup`
---@return Gtk.Window[] # A newly-allocated list of windows inside the group.
function Gtk.WindowGroup:list_windows() end

--- # method Gtk.WindowGroup:remove_window()
---
--- Removes a window from a `GtkWindowGroup`.
---
--- ---
---
---@param self Gtk.WindowGroup # a `GtkWindowGroup`
---@param window Gtk.Window # the `GtkWindow` to remove
---@return nil
function Gtk.WindowGroup:remove_window(window) end

--- # function Gtk.WindowGroup.new()
---
--- Creates a new `GtkWindowGroup` object. Grabs added with
--- `gtk_grab_add()` only affect windows within the same `GtkWindowGroup`.
---
--- ---
---
---@return Gtk.WindowGroup # a new `GtkWindowGroup`.
function Gtk.WindowGroup.new() end

--- # record Gtk.WindowGroupClass
---
---@class Gtk.WindowGroupClass
---@field parent_class GObject.ObjectClass
Gtk.WindowGroupClass = {}

--- # record Gtk.WindowGroupPrivate
---
---@class Gtk.WindowGroupPrivate
Gtk.WindowGroupPrivate = {}

---@enum Gtk.WindowPosition
Gtk.WindowPosition = {}

--- # record Gtk.WindowPrivate
---
---@class Gtk.WindowPrivate
Gtk.WindowPrivate = {}

---@enum Gtk.WindowType
Gtk.WindowType = {}

---@enum Gtk.WrapMode
Gtk.WrapMode = {}

--- # record Gtk._MountOperationHandler
---
--- Abstract interface type for the D-Bus interface <link linkend="gdbus-interface-org-Gtk-MountOperationHandler.top_of_page">org.Gtk.MountOperationHandler</link>.
---
--- ---
---
---@class Gtk._MountOperationHandler
Gtk._MountOperationHandler = {}

--- # record Gtk._MountOperationHandlerIface
---
--- Virtual table for the D-Bus interface <link linkend="gdbus-interface-org-Gtk-MountOperationHandler.top_of_page">org.Gtk.MountOperationHandler</link>.
---
--- ---
---
---@class Gtk._MountOperationHandlerIface
---@field parent_iface GObject.TypeInterface # The parent interface.
Gtk._MountOperationHandlerIface = {}

--- # record Gtk._MountOperationHandlerProxy
---
--- The `_GtkMountOperationHandlerProxy` structure contains only private data and should only be accessed using the provided API.
---
--- ---
---
---@class Gtk._MountOperationHandlerProxy
---@field parent_instance Gio.DBusProxy
Gtk._MountOperationHandlerProxy = {}

--- # record Gtk._MountOperationHandlerProxyClass
---
--- Class structure for `_GtkMountOperationHandlerProxy`.
---
--- ---
---
---@class Gtk._MountOperationHandlerProxyClass
---@field parent_class Gio.DBusProxyClass # The parent class.
Gtk._MountOperationHandlerProxyClass = {}

--- # record Gtk._MountOperationHandlerProxyPrivate
---
---@class Gtk._MountOperationHandlerProxyPrivate
Gtk._MountOperationHandlerProxyPrivate = {}

--- # record Gtk._MountOperationHandlerSkeleton
---
--- The `_GtkMountOperationHandlerSkeleton` structure contains only private data and should only be accessed using the provided API.
---
--- ---
---
---@class Gtk._MountOperationHandlerSkeleton
---@field parent_instance Gio.DBusInterfaceSkeleton
Gtk._MountOperationHandlerSkeleton = {}

--- # record Gtk._MountOperationHandlerSkeletonClass
---
--- Class structure for `_GtkMountOperationHandlerSkeleton`.
---
--- ---
---
---@class Gtk._MountOperationHandlerSkeletonClass
---@field parent_class Gio.DBusInterfaceSkeletonClass # The parent class.
Gtk._MountOperationHandlerSkeletonClass = {}

--- # record Gtk._MountOperationHandlerSkeletonPrivate
---
---@class Gtk._MountOperationHandlerSkeletonPrivate
Gtk._MountOperationHandlerSkeletonPrivate = {}

--- # function Gtk.accel_groups_activate()
---
--- Finds the first accelerator in any `GtkAccelGroup` attached
--- to `object` that matches `accel_key` and `accel_mods`, and
--- activates that accelerator.
---
--- ---
---
---@param object GObject.Object # the `GObject`, usually a `GtkWindow`, on which to activate the accelerator
---@param accel_key integer # accelerator keyval from a key event
---@param accel_mods Gdk.ModifierType # keyboard state mask from a key event
---@return (boolean|nil) # `true` if an accelerator was activated and handled this keypress
function Gtk.accel_groups_activate(object, accel_key, accel_mods) end

--- # function Gtk.accel_groups_from_object()
---
--- Gets a list of all accel groups which are attached to `object`.
---
--- ---
---
---@param object GObject.Object # a `GObject`, usually a `GtkWindow`
---@return Gtk.AccelGroup[] # a list of all accel groups which are attached to `object`
function Gtk.accel_groups_from_object(object) end

--- # function Gtk.accelerator_get_default_mod_mask()
---
--- Gets the modifier mask.
--- 
--- The modifier mask determines which modifiers are considered significant
--- for keyboard accelerators. See `gtk_accelerator_set_default_mod_mask()`.
---
--- ---
---
---@return Gdk.ModifierType # the default accelerator modifier mask
function Gtk.accelerator_get_default_mod_mask() end

--- # function Gtk.accelerator_get_label()
---
--- Converts an accelerator keyval and modifier mask into a string
--- which can be used to represent the accelerator to the user.
---
--- ---
---
---@param accelerator_key integer # accelerator keyval
---@param accelerator_mods Gdk.ModifierType # accelerator modifier mask
---@return string # a newly-allocated string representing the accelerator.
function Gtk.accelerator_get_label(accelerator_key, accelerator_mods) end

--- # function Gtk.accelerator_get_label_with_keycode()
---
--- Converts an accelerator keyval and modifier mask
--- into a (possibly translated) string that can be displayed to
--- a user, similarly to `gtk_accelerator_get_label()`, but handling
--- keycodes.
--- 
--- This is only useful for system-level components, applications
--- should use `gtk_accelerator_parse()` instead.
---
--- ---
---
---@param display? Gdk.Display # a `GdkDisplay` or `nil` to use the default display
---@param accelerator_key integer # accelerator keyval
---@param keycode integer # accelerator keycode
---@param accelerator_mods Gdk.ModifierType # accelerator modifier mask
---@return string # a newly-allocated string representing the accelerator.
function Gtk.accelerator_get_label_with_keycode(display, accelerator_key, keycode, accelerator_mods) end

--- # function Gtk.accelerator_name()
---
--- Converts an accelerator keyval and modifier mask into a string
--- parseable by `gtk_accelerator_parse()`. For example, if you pass in
--- `GDK_KEY_q` and `GDK_CONTROL_MASK`, this function returns “<Control>q”.
--- 
--- If you need to display accelerators in the user interface,
--- see `gtk_accelerator_get_label()`.
---
--- ---
---
---@param accelerator_key integer # accelerator keyval
---@param accelerator_mods Gdk.ModifierType # accelerator modifier mask
---@return string # a newly-allocated accelerator name
function Gtk.accelerator_name(accelerator_key, accelerator_mods) end

--- # function Gtk.accelerator_name_with_keycode()
---
--- Converts an accelerator keyval and modifier mask
--- into a string parseable by `gtk_accelerator_parse_with_keycode()`,
--- similarly to `gtk_accelerator_name()` but handling keycodes.
--- This is only useful for system-level components, applications
--- should use `gtk_accelerator_parse()` instead.
---
--- ---
---
---@param display? Gdk.Display # a `GdkDisplay` or `nil` to use the default display
---@param accelerator_key integer # accelerator keyval
---@param keycode integer # accelerator keycode
---@param accelerator_mods Gdk.ModifierType # accelerator modifier mask
---@return string # a newly allocated accelerator name.
function Gtk.accelerator_name_with_keycode(display, accelerator_key, keycode, accelerator_mods) end

--- # function Gtk.accelerator_parse()
---
--- Parses a string representing an accelerator. The format looks like
--- “<Control>a” or “<Shift><Alt>F1” or “<Release>z” (the last one is
--- for key release).
--- 
--- The parser is fairly liberal and allows lower or upper case, and also
--- abbreviations such as “<Ctl>” and “<Ctrl>”. Key names are parsed using
--- `gdk_keyval_from_name()`. For character keys the name is not the symbol,
--- but the lowercase name, e.g. one would use “<Ctrl>minus” instead of
--- “<Ctrl>-”.
--- 
--- If the parse fails, `accelerator_key` and `accelerator_mods` will
--- be set to 0 (zero).
---
--- ---
---
---@param accelerator string # string representing an accelerator
---@param accelerator_key? integer # return location for accelerator keyval, or `nil`
---@param accelerator_mods? Gdk.ModifierType # return location for accelerator modifier mask, `nil`
---@return nil
function Gtk.accelerator_parse(accelerator, accelerator_key, accelerator_mods) end

--- # function Gtk.accelerator_parse_with_keycode()
---
--- Parses a string representing an accelerator, similarly to
--- `gtk_accelerator_parse()` but handles keycodes as well. This is only
--- useful for system-level components, applications should use
--- `gtk_accelerator_parse()` instead.
--- 
--- If `accelerator_codes` is given and the result stored in it is non-`nil`,
--- the result must be freed with `g_free()`.
--- 
--- If a keycode is present in the accelerator and no `accelerator_codes`
--- is given, the parse will fail.
--- 
--- If the parse fails, `accelerator_key`, `accelerator_mods` and
--- `accelerator_codes` will be set to 0 (zero).
---
--- ---
---
---@param accelerator string # string representing an accelerator
---@param accelerator_key? integer # return location for accelerator keyval, or `nil`
---@param accelerator_codes? unknown[] # return location for accelerator keycodes, or `nil`
---@param accelerator_mods? Gdk.ModifierType # return location for accelerator modifier mask, `nil`
---@return nil
function Gtk.accelerator_parse_with_keycode(accelerator, accelerator_key, accelerator_codes, accelerator_mods) end

--- # function Gtk.accelerator_set_default_mod_mask()
---
--- Sets the modifiers that will be considered significant for keyboard
--- accelerators. The default mod mask depends on the GDK backend in use,
--- but will typically include `GDK_CONTROL_MASK` | `GDK_SHIFT_MASK` |
--- `GDK_MOD1_MASK` | `GDK_SUPER_MASK` | `GDK_HYPER_MASK` | `GDK_META_MASK`.
--- In other words, Control, Shift, Alt, Super, Hyper and Meta. Other
--- modifiers will by default be ignored by `GtkAccelGroup`.
--- 
--- You must include at least the three modifiers Control, Shift
--- and Alt in any value you pass to this function.
--- 
--- The default mod mask should be changed on application startup,
--- before using any accelerator groups.
---
--- ---
---
---@param default_mod_mask Gdk.ModifierType # accelerator modifier mask
---@return nil
function Gtk.accelerator_set_default_mod_mask(default_mod_mask) end

--- # function Gtk.accelerator_valid()
---
--- Determines whether a given keyval and modifier mask constitute
--- a valid keyboard accelerator. For example, the `GDK_KEY_a` keyval
--- plus `GDK_CONTROL_MASK` is valid - this is a “Ctrl+a” accelerator.
--- But, you can't, for instance, use the `GDK_KEY_Control_L` keyval
--- as an accelerator.
---
--- ---
---
---@param keyval integer # a GDK keyval
---@param modifiers Gdk.ModifierType # modifier mask
---@return (boolean|nil) # `true` if the accelerator is valid
function Gtk.accelerator_valid(keyval, modifiers) end

--- # function Gtk.alternative_dialog_button_order()
---
--- Returns `true` if dialogs are expected to use an alternative
--- button order on the screen `screen`. See
--- `gtk_dialog_set_alternative_button_order()` for more details
--- about alternative button order.
--- 
--- If you need to use this function, you should probably connect
--- to the ::notify:gtk-alternative-button-order signal on the
--- `GtkSettings` object associated to `screen`, in order to be
--- notified if the button order setting changes.
---
--- ---
---
---@param screen? Gdk.Screen # a `GdkScreen`, or `nil` to use the default screen
---@return (boolean|nil) # Whether the alternative button order should be used
function Gtk.alternative_dialog_button_order(screen) end

--- # function Gtk.binding_entry_add_signal_from_string()
---
--- Parses a signal description from `signal_desc` and incorporates
--- it into `binding_set`.
--- 
--- Signal descriptions may either bind a key combination to
--- one or more signals:
--- ```c
---   bind "key" {
---     "signalname" (param, ...)
---     ...
---   }
--- ```
--- 
--- Or they may also unbind a key combination:
--- ```c
---   unbind "key"
--- ```
--- 
--- Key combinations must be in a format that can be parsed by
--- `gtk_accelerator_parse()`.
---
--- ---
---
---@param binding_set Gtk.BindingSet # a `GtkBindingSet`
---@param signal_desc string # a signal description
---@return GLib.TokenType # %G_TOKEN_NONE if the signal was successfully parsed and added, the expected token otherwise
function Gtk.binding_entry_add_signal_from_string(binding_set, signal_desc) end

--- # function Gtk.binding_entry_add_signall()
---
--- Override or install a new key binding for `keyval` with `modifiers` on
--- `binding_set`.
---
--- ---
---
---@param binding_set Gtk.BindingSet # a `GtkBindingSet` to add a signal to
---@param keyval integer # key value
---@param modifiers Gdk.ModifierType # key modifier
---@param signal_name string # signal name to be bound
---@param binding_args Gtk.BindingArg[] # list of `GtkBindingArg` signal arguments
---@return nil
function Gtk.binding_entry_add_signall(binding_set, keyval, modifiers, signal_name, binding_args) end

--- # function Gtk.binding_entry_remove()
---
--- Remove a binding previously installed via
--- `gtk_binding_entry_add_signal()` on `binding_set`.
---
--- ---
---
---@param binding_set Gtk.BindingSet # a `GtkBindingSet` to remove an entry of
---@param keyval integer # key value of binding to remove
---@param modifiers Gdk.ModifierType # key modifier of binding to remove
---@return nil
function Gtk.binding_entry_remove(binding_set, keyval, modifiers) end

--- # function Gtk.binding_entry_skip()
---
--- Install a binding on `binding_set` which causes key lookups
--- to be aborted, to prevent bindings from lower priority sets
--- to be activated.
---
--- ---
---
---@param binding_set Gtk.BindingSet # a `GtkBindingSet` to skip an entry of
---@param keyval integer # key value of binding to skip
---@param modifiers Gdk.ModifierType # key modifier of binding to skip
---@return nil
function Gtk.binding_entry_skip(binding_set, keyval, modifiers) end

--- # function Gtk.binding_set_find()
---
--- Find a binding set by its globally unique name.
--- 
--- The `set_name` can either be a name used for `gtk_binding_set_new()`
--- or the type name of a class used in `gtk_binding_set_by_class()`.
---
--- ---
---
---@param set_name string # unique binding set name
---@return Gtk.BindingSet # `nil` or the specified binding set
function Gtk.binding_set_find(set_name) end

--- # function Gtk.bindings_activate()
---
--- Find a key binding matching `keyval` and `modifiers` and activate the
--- binding on `object`.
---
--- ---
---
---@param object GObject.Object # object to activate when binding found
---@param keyval integer # key value of the binding
---@param modifiers Gdk.ModifierType # key modifier of the binding
---@return (boolean|nil) # `true` if a binding was found and activated
function Gtk.bindings_activate(object, keyval, modifiers) end

--- # function Gtk.bindings_activate_event()
---
--- Looks up key bindings for `object` to find one matching
--- `event`, and if one was found, activate it.
---
--- ---
---
---@param object GObject.Object # a `GObject` (generally must be a widget)
---@param event Gdk.EventKey # a `GdkEventKey`
---@return (boolean|nil) # `true` if a matching key binding was found
function Gtk.bindings_activate_event(object, event) end

--- # function Gtk.builder_error_quark()
---
---@return GLib.Quark
function Gtk.builder_error_quark() end

--- # function Gtk.cairo_should_draw_window()
---
--- This function is supposed to be called in `GtkWidget`::draw
--- implementations for widgets that support multiple windows.
--- `cr` must be untransformed from invoking of the draw function.
--- This function will return `true` if the contents of the given
--- `window` are supposed to be drawn and `false` otherwise. Note
--- that when the drawing was not initiated by the windowing
--- system this function will return `true` for all windows, so
--- you need to draw the bottommost window first. Also, do not
--- use “else if” statements to check which window should be drawn.
---
--- ---
---
---@param cr cairo.Context # a cairo context
---@param window Gdk.Window # the window to check. `window` may not be an input-only window.
---@return (boolean|nil) # `true` if `window` should be drawn
function Gtk.cairo_should_draw_window(cr, window) end

--- # function Gtk.cairo_transform_to_window()
---
--- Transforms the given cairo context `cr` that from `widget`-relative
--- coordinates to `window`-relative coordinates.
--- If the `widget`’s window is not an ancestor of `window`, no
--- modification will be applied.
--- 
--- This is the inverse to the transformation GTK applies when
--- preparing an expose event to be emitted with the `GtkWidget`::draw
--- signal. It is intended to help porting multiwindow widgets from
--- GTK+ 2 to the rendering architecture of GTK+ 3.
---
--- ---
---
---@param cr cairo.Context # the cairo context to transform
---@param widget Gtk.Widget # the widget the context is currently centered for
---@param window Gdk.Window # the window to transform the context to
---@return nil
function Gtk.cairo_transform_to_window(cr, widget, window) end

--- # function Gtk.check_version()
---
--- Checks that the GTK+ library in use is compatible with the
--- given version. Generally you would pass in the constants
--- `GTK_MAJOR_VERSION`, `GTK_MINOR_VERSION`, `GTK_MICRO_VERSION`
--- as the three arguments to this function; that produces
--- a check that the library in use is compatible with
--- the version of GTK+ the application or module was compiled
--- against.
--- 
--- Compatibility is defined by two things: first the version
--- of the running library is newer than the version
--- `required_major`.required_minor.`required_micro`. Second
--- the running library must be binary compatible with the
--- version `required_major`.required_minor.`required_micro`
--- (same major version.)
--- 
--- This function is primarily for GTK+ modules; the module
--- can call this function to check that it wasn’t loaded
--- into an incompatible version of GTK+. However, such a
--- check isn’t completely reliable, since the module may be
--- linked against an old version of GTK+ and calling the
--- old version of `gtk_check_version()`, but still get loaded
--- into an application using a newer version of GTK+.
---
--- ---
---
---@param required_major integer # the required major version
---@param required_minor integer # the required minor version
---@param required_micro integer # the required micro version
---@return string # `nil` if the GTK+ library is compatible with the given version, or a string describing the version mismatch. The returned string is owned by GTK+ and should not be modified or freed.
function Gtk.check_version(required_major, required_minor, required_micro) end

--- # function Gtk.css_provider_error_quark()
---
---@return GLib.Quark
function Gtk.css_provider_error_quark() end

--- # function Gtk.device_grab_add()
---
--- Adds a GTK+ grab on `device`, so all the events on `device` and its
--- associated pointer or keyboard (if any) are delivered to `widget`.
--- If the `block_others` parameter is `true`, any other devices will be
--- unable to interact with `widget` during the grab.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@param device Gdk.Device # a `GdkDevice` to grab on.
---@param block_others (boolean|nil) # `true` to prevent other devices to interact with `widget`.
---@return nil
function Gtk.device_grab_add(widget, device, block_others) end

--- # function Gtk.device_grab_remove()
---
--- Removes a device grab from the given widget.
--- 
--- You have to pair calls to `gtk_device_grab_add()` and
--- `gtk_device_grab_remove()`.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@param device Gdk.Device # a `GdkDevice`
---@return nil
function Gtk.device_grab_remove(widget, device) end

--- # function Gtk.disable_setlocale()
---
--- Prevents `gtk_init()`, `gtk_init_check()`, `gtk_init_with_args()` and
--- `gtk_parse_args()` from automatically
--- calling `setlocale (LC_ALL, "")`. You would
--- want to use this function if you wanted to set the locale for
--- your program to something other than the user’s locale, or if
--- you wanted to set different values for different locale categories.
--- 
--- Most programs should not need to call this function.
---
--- ---
---
---@return nil
function Gtk.disable_setlocale() end

--- # function Gtk.distribute_natural_allocation()
---
--- Distributes `extra_space` to child `sizes` by bringing smaller
--- children up to natural size first.
--- 
--- The remaining space will be added to the `minimum_size` member of the
--- GtkRequestedSize struct. If all sizes reach their natural size then
--- the remaining space is returned.
---
--- ---
---
---@param extra_space integer # Extra space to redistribute among children after subtracting minimum sizes and any child padding from the overall allocation
---@param n_requested_sizes integer # Number of requests to fit into the allocation
---@param sizes Gtk.RequestedSize # An array of structs with a client pointer and a minimum/natural size in the orientation of the allocation.
---@return integer # The remainder of `extra_space` after redistributing space to `sizes`.
function Gtk.distribute_natural_allocation(extra_space, n_requested_sizes, sizes) end

--- # function Gtk.drag_cancel()
---
--- Cancels an ongoing drag operation on the source side.
--- 
--- If you want to be able to cancel a drag operation in this way,
--- you need to keep a pointer to the drag context, either from an
--- explicit call to `gtk_drag_begin_with_coordinates()`, or by
--- connecting to `GtkWidget`::drag-begin.
--- 
--- If `context` does not refer to an ongoing drag operation, this
--- function does nothing.
--- 
--- If a drag is cancelled in this way, the `result` argument of
--- `GtkWidget`::drag-failed is set to `GTK_DRAG_RESULT_ERROR`.
---
--- ---
---
---@param context Gdk.DragContext # a `GdkDragContext`, as e.g. returned by `gtk_drag_begin_with_coordinates()`
---@return nil
function Gtk.drag_cancel(context) end

--- # function Gtk.drag_finish()
---
--- Informs the drag source that the drop is finished, and
--- that the data of the drag will no longer be required.
---
--- ---
---
---@param context Gdk.DragContext # the drag context
---@param success (boolean|nil) # a flag indicating whether the drop was successful
---@param del (boolean|nil) # a flag indicating whether the source should delete the original data. (This should be `true` for a move)
---@param time_ integer # the timestamp from the `GtkWidget`::drag-drop signal
---@return nil
function Gtk.drag_finish(context, success, del, time_) end

--- # function Gtk.drag_get_source_widget()
---
--- Determines the source widget for a drag.
---
--- ---
---
---@param context Gdk.DragContext # a (destination side) drag context
---@return Gtk.Widget # if the drag is occurring within a single application, a pointer to the source widget. Otherwise, `nil`.
function Gtk.drag_get_source_widget(context) end

--- # function Gtk.drag_set_icon_default()
---
--- Sets the icon for a particular drag to the default
--- icon.
---
--- ---
---
---@param context Gdk.DragContext # the context for a drag (This must be called with a context for the source side of a drag)
---@return nil
function Gtk.drag_set_icon_default(context) end

--- # function Gtk.drag_set_icon_gicon()
---
--- Sets the icon for a given drag from the given `icon`.
--- See the documentation for `gtk_drag_set_icon_name()`
--- for more details about using icons in drag and drop.
---
--- ---
---
---@param context Gdk.DragContext # the context for a drag (This must be called with a context for the source side of a drag)
---@param icon Gio.Icon # a `GIcon`
---@param hot_x integer # the X offset of the hotspot within the icon
---@param hot_y integer # the Y offset of the hotspot within the icon
---@return nil
function Gtk.drag_set_icon_gicon(context, icon, hot_x, hot_y) end

--- # function Gtk.drag_set_icon_name()
---
--- Sets the icon for a given drag from a named themed icon. See
--- the docs for `GtkIconTheme` for more details. Note that the
--- size of the icon depends on the icon theme (the icon is
--- loaded at the symbolic size `GTK_ICON_SIZE_DND`), thus
--- `hot_x` and `hot_y` have to be used with care.
---
--- ---
---
---@param context Gdk.DragContext # the context for a drag (This must be called with a context for the source side of a drag)
---@param icon_name string # name of icon to use
---@param hot_x integer # the X offset of the hotspot within the icon
---@param hot_y integer # the Y offset of the hotspot within the icon
---@return nil
function Gtk.drag_set_icon_name(context, icon_name, hot_x, hot_y) end

--- # function Gtk.drag_set_icon_pixbuf()
---
--- Sets `pixbuf` as the icon for a given drag.
---
--- ---
---
---@param context Gdk.DragContext # the context for a drag (This must be called with a context for the source side of a drag)
---@param pixbuf GdkPixbuf.Pixbuf # the `GdkPixbuf` to use as the drag icon
---@param hot_x integer # the X offset within `widget` of the hotspot
---@param hot_y integer # the Y offset within `widget` of the hotspot
---@return nil
function Gtk.drag_set_icon_pixbuf(context, pixbuf, hot_x, hot_y) end

--- # function Gtk.drag_set_icon_stock()
---
--- Sets the icon for a given drag from a stock ID.
---
--- ---
---
---@param context Gdk.DragContext # the context for a drag (This must be called with a context for the source side of a drag)
---@param stock_id string # the ID of the stock icon to use for the drag
---@param hot_x integer # the X offset within the icon of the hotspot
---@param hot_y integer # the Y offset within the icon of the hotspot
---@return nil
function Gtk.drag_set_icon_stock(context, stock_id, hot_x, hot_y) end

--- # function Gtk.drag_set_icon_surface()
---
--- Sets `surface` as the icon for a given drag. GTK+ retains
--- references for the arguments, and will release them when
--- they are no longer needed.
--- 
--- To position the surface relative to the mouse, use
--- `cairo_surface_set_device_offset()` on `surface`. The mouse
--- cursor will be positioned at the (0,0) coordinate of the
--- surface.
---
--- ---
---
---@param context Gdk.DragContext # the context for a drag (This must be called with a context for the source side of a drag)
---@param surface cairo.Surface # the surface to use as icon
---@return nil
function Gtk.drag_set_icon_surface(context, surface) end

--- # function Gtk.drag_set_icon_widget()
---
--- Changes the icon for drag operation to a given widget.
--- GTK+ will not destroy the widget, so if you don’t want
--- it to persist, you should connect to the “drag-end”
--- signal and destroy it yourself.
---
--- ---
---
---@param context Gdk.DragContext # the context for a drag. (This must be called with a context for the source side of a drag)
---@param widget Gtk.Widget # a widget to use as an icon
---@param hot_x integer # the X offset within `widget` of the hotspot
---@param hot_y integer # the Y offset within `widget` of the hotspot
---@return nil
function Gtk.drag_set_icon_widget(context, widget, hot_x, hot_y) end

--- # function Gtk.draw_insertion_cursor()
---
--- Draws a text caret on `cr` at `location`. This is not a style function
--- but merely a convenience function for drawing the standard cursor shape.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@param cr cairo.Context # cairo context to draw to
---@param location Gdk.Rectangle # location where to draw the cursor (`location`->width is ignored)
---@param is_primary (boolean|nil) # if the cursor should be the primary cursor color.
---@param direction Gtk.TextDirection # whether the cursor is left-to-right or right-to-left. Should never be `GTK_TEXT_DIR_NONE`
---@param draw_arrow (boolean|nil) # `true` to draw a directional arrow on the cursor. Should be `false` unless the cursor is split.
---@return nil
function Gtk.draw_insertion_cursor(widget, cr, location, is_primary, direction, draw_arrow) end

--- # function Gtk.events_pending()
---
--- Checks if any events are pending.
--- 
--- This can be used to update the UI and invoke timeouts etc.
--- while doing some time intensive computation.
--- 
--- ## Updating the UI during a long computation
--- 
--- ```c
---  // computation going on...
--- 
---  while (gtk_events_pending ())
---    gtk_main_iteration ();
--- 
---  // ...computation continued
--- ```
---
--- ---
---
---@return (boolean|nil) # `true` if any events are pending, `false` otherwise
function Gtk.events_pending() end

--- # function Gtk.false()
---
--- Analogical to `gtk_true()`, this function does nothing
--- but always returns `false`.
---
--- ---
---
---@return (boolean|nil) # `false`
function Gtk.false__() end

--- # function Gtk.file_chooser_error_quark()
---
--- Registers an error quark for `GtkFileChooser` if necessary.
---
--- ---
---
---@return GLib.Quark # The error quark used for `GtkFileChooser` errors.
function Gtk.file_chooser_error_quark() end

--- # function Gtk.get_binary_age()
---
--- Returns the binary age as passed to `libtool`
--- when building the GTK+ library the process is running against.
--- If `libtool` means nothing to you, don't
--- worry about it.
---
--- ---
---
---@return integer # the binary age of the GTK+ library
function Gtk.get_binary_age() end

--- # function Gtk.get_current_event()
---
--- Obtains a copy of the event currently being processed by GTK+.
--- 
--- For example, if you are handling a `GtkButton`::clicked signal,
--- the current event will be the `GdkEventButton` that triggered
--- the ::clicked signal.
---
--- ---
---
---@return Gdk.Event # a copy of the current event, or `nil` if there is no current event. The returned event must be freed with `gdk_event_free()`.
function Gtk.get_current_event() end

--- # function Gtk.get_current_event_device()
---
--- If there is a current event and it has a device, return that
--- device, otherwise return `nil`.
---
--- ---
---
---@return Gdk.Device # a `GdkDevice`, or `nil`
function Gtk.get_current_event_device() end

--- # function Gtk.get_current_event_state()
---
--- If there is a current event and it has a state field, place
--- that state field in `state` and return `true`, otherwise return
--- `false`.
---
--- ---
---
---@param state Gdk.ModifierType # a location to store the state of the current event
---@return (boolean|nil) # `true` if there was a current event and it had a state field
function Gtk.get_current_event_state(state) end

--- # function Gtk.get_current_event_time()
---
--- If there is a current event and it has a timestamp,
--- return that timestamp, otherwise return %GDK_CURRENT_TIME.
---
--- ---
---
---@return integer # the timestamp from the current event, or %GDK_CURRENT_TIME.
function Gtk.get_current_event_time() end

--- # function Gtk.get_debug_flags()
---
--- Returns the GTK+ debug flags.
--- 
--- This function is intended for GTK+ modules that want
--- to adjust their debug output based on GTK+ debug flags.
---
--- ---
---
---@return integer # the GTK+ debug flags.
function Gtk.get_debug_flags() end

--- # function Gtk.get_default_language()
---
--- Returns the `PangoLanguage` for the default language currently in
--- effect. (Note that this can change over the life of an
--- application.) The default language is derived from the current
--- locale. It determines, for example, whether GTK+ uses the
--- right-to-left or left-to-right text direction.
--- 
--- This function is equivalent to `pango_language_get_default()`.
--- See that function for details.
---
--- ---
---
---@return Pango.Language # the default language as a `PangoLanguage`, must not be freed
function Gtk.get_default_language() end

--- # function Gtk.get_event_widget()
---
--- If `event` is `nil` or the event was not associated with any widget,
--- returns `nil`, otherwise returns the widget that received the event
--- originally.
---
--- ---
---
---@param event Gdk.Event # a `GdkEvent`
---@return Gtk.Widget # the widget that originally received `event`, or `nil`
function Gtk.get_event_widget(event) end

--- # function Gtk.get_interface_age()
---
--- Returns the interface age as passed to `libtool`
--- when building the GTK+ library the process is running against.
--- If `libtool` means nothing to you, don't
--- worry about it.
---
--- ---
---
---@return integer # the interface age of the GTK+ library
function Gtk.get_interface_age() end

--- # function Gtk.get_locale_direction()
---
--- Get the direction of the current locale. This is the expected
--- reading direction for text and UI.
--- 
--- This function depends on the current locale being set with
--- `setlocale()` and will default to setting the %GTK_TEXT_DIR_LTR
--- direction otherwise. %GTK_TEXT_DIR_NONE will never be returned.
--- 
--- GTK+ sets the default text direction according to the locale
--- during `gtk_init()`, and you should normally use
--- `gtk_widget_get_direction()` or `gtk_widget_get_default_direction()`
--- to obtain the current direcion.
--- 
--- This function is only needed rare cases when the locale is
--- changed after GTK+ has already been initialized. In this case,
--- you can use it to update the default text direction as follows:
--- 
--- ```c
--- setlocale (LC_ALL, new_locale);
--- direction = gtk_get_locale_direction ();
--- gtk_widget_set_default_direction (direction);
--- ```
---
--- ---
---
---@return Gtk.TextDirection # the `GtkTextDirection` of the current locale
function Gtk.get_locale_direction() end

--- # function Gtk.get_major_version()
---
--- Returns the major version number of the GTK+ library.
--- (e.g. in GTK+ version 3.1.5 this is 3.)
--- 
--- This function is in the library, so it represents the GTK+ library
--- your code is running against. Contrast with the `GTK_MAJOR_VERSION`
--- macro, which represents the major version of the GTK+ headers you
--- have included when compiling your code.
---
--- ---
---
---@return integer # the major version number of the GTK+ library
function Gtk.get_major_version() end

--- # function Gtk.get_micro_version()
---
--- Returns the micro version number of the GTK+ library.
--- (e.g. in GTK+ version 3.1.5 this is 5.)
--- 
--- This function is in the library, so it represents the GTK+ library
--- your code is are running against. Contrast with the
--- `GTK_MICRO_VERSION` macro, which represents the micro version of the
--- GTK+ headers you have included when compiling your code.
---
--- ---
---
---@return integer # the micro version number of the GTK+ library
function Gtk.get_micro_version() end

--- # function Gtk.get_minor_version()
---
--- Returns the minor version number of the GTK+ library.
--- (e.g. in GTK+ version 3.1.5 this is 1.)
--- 
--- This function is in the library, so it represents the GTK+ library
--- your code is are running against. Contrast with the
--- `GTK_MINOR_VERSION` macro, which represents the minor version of the
--- GTK+ headers you have included when compiling your code.
---
--- ---
---
---@return integer # the minor version number of the GTK+ library
function Gtk.get_minor_version() end

--- # function Gtk.get_option_group()
---
--- Returns a `GOptionGroup` for the commandline arguments recognized
--- by GTK+ and GDK.
--- 
--- You should add this group to your `GOptionContext`
--- with `g_option_context_add_group()`, if you are using
--- `g_option_context_parse()` to parse your commandline arguments.
---
--- ---
---
---@param open_default_display (boolean|nil) # whether to open the default display when parsing the commandline arguments
---@return GLib.OptionGroup # a `GOptionGroup` for the commandline arguments recognized by GTK+
function Gtk.get_option_group(open_default_display) end

--- # function Gtk.grab_get_current()
---
--- Queries the current grab of the default window group.
---
--- ---
---
---@return Gtk.Widget # The widget which currently has the grab or `nil` if no grab is active
function Gtk.grab_get_current() end

--- # function Gtk.icon_size_from_name()
---
--- Looks up the icon size associated with `name`.
---
--- ---
---
---@param name string # the name to look up.
---@return integer # the icon size (`GtkIconSize`)
function Gtk.icon_size_from_name(name) end

--- # function Gtk.icon_size_get_name()
---
--- Gets the canonical name of the given icon size. The returned string
--- is statically allocated and should not be freed.
---
--- ---
---
---@param size integer # a `GtkIconSize`.
---@return string # the name of the given icon size.
function Gtk.icon_size_get_name(size) end

--- # function Gtk.icon_size_lookup()
---
--- Obtains the pixel size of a semantic icon size `size`:
--- `GTK_ICON_SIZE_MENU`, `GTK_ICON_SIZE_BUTTON`, etc.  This function
--- isn’t normally needed, `gtk_icon_theme_load_icon()` is the usual
--- way to get an icon for rendering, then just look at the size of
--- the rendered pixbuf. The rendered pixbuf may not even correspond to
--- the width/height returned by `gtk_icon_size_lookup()`, because themes
--- are free to render the pixbuf however they like, including changing
--- the usual size.
---
--- ---
---
---@param size integer # an icon size (`GtkIconSize`)
---@param width? integer # location to store icon width
---@param height? integer # location to store icon height
---@return (boolean|nil) # `true` if `size` was a valid size
function Gtk.icon_size_lookup(size, width, height) end

--- # function Gtk.icon_size_lookup_for_settings()
---
--- Obtains the pixel size of a semantic icon size, possibly
--- modified by user preferences for a particular
--- `GtkSettings`. Normally `size` would be
--- `GTK_ICON_SIZE_MENU`, `GTK_ICON_SIZE_BUTTON`, etc.  This function
--- isn’t normally needed, `gtk_widget_render_icon_pixbuf()` is the usual
--- way to get an icon for rendering, then just look at the size of
--- the rendered pixbuf. The rendered pixbuf may not even correspond to
--- the width/height returned by `gtk_icon_size_lookup()`, because themes
--- are free to render the pixbuf however they like, including changing
--- the usual size.
---
--- ---
---
---@param settings Gtk.Settings # a `GtkSettings` object, used to determine which set of user preferences to used.
---@param size integer # an icon size (`GtkIconSize`)
---@param width? integer # location to store icon width
---@param height? integer # location to store icon height
---@return (boolean|nil) # `true` if `size` was a valid size
function Gtk.icon_size_lookup_for_settings(settings, size, width, height) end

--- # function Gtk.icon_size_register()
---
--- Registers a new icon size, along the same lines as `GTK_ICON_SIZE_MENU`,
--- etc. Returns the integer value for the size.
---
--- ---
---
---@param name string # name of the icon size
---@param width integer # the icon width
---@param height integer # the icon height
---@return integer # integer value representing the size (`GtkIconSize`)
function Gtk.icon_size_register(name, width, height) end

--- # function Gtk.icon_size_register_alias()
---
--- Registers `alias` as another name for `target`.
--- So calling `gtk_icon_size_from_name()` with `alias` as argument
--- will return `target`.
---
--- ---
---
---@param alias string # an alias for `target`
---@param target integer # an existing icon size (`GtkIconSize`)
---@return nil
function Gtk.icon_size_register_alias(alias, target) end

--- # function Gtk.icon_theme_error_quark()
---
---@return GLib.Quark
function Gtk.icon_theme_error_quark() end

--- # function Gtk.init()
---
--- Call this function before using any other GTK+ functions in your GUI
--- applications.  It will initialize everything needed to operate the
--- toolkit and parses some standard command line options.
--- 
--- Although you are expected to pass the `argc`, `argv` parameters from `main()` to
--- this function, it is possible to pass `nil` if `argv` is not available or
--- commandline handling is not required.
--- 
--- `argc` and `argv` are adjusted accordingly so your own code will
--- never see those standard arguments.
--- 
--- Note that there are some alternative ways to initialize GTK+:
--- if you are calling `gtk_parse_args()`, `gtk_init_check()`,
--- `gtk_init_with_args()` or `g_option_context_parse()` with
--- the option group returned by `gtk_get_option_group()`,
--- you don’t have to call `gtk_init()`.
--- 
--- And if you are using `GtkApplication`, you don't have to call any of the
--- initialization functions either; the `GtkApplication`::startup handler
--- does it for you.
--- 
--- This function will terminate your program if it was unable to
--- initialize the windowing system for some reason. If you want
--- your program to fall back to a textual interface you want to
--- call `gtk_init_check()` instead.
--- 
--- Since 2.18, GTK+ calls `signal (SIGPIPE, SIG_IGN)`
--- during initialization, to ignore SIGPIPE signals, since these are
--- almost never wanted in graphical applications. If you do need to
--- handle SIGPIPE for some reason, reset the handler after `gtk_init()`,
--- but notice that other libraries (e.g. libdbus or gvfs) might do
--- similar things.
---
--- ---
---
---@param argc integer # Address of the `argc` parameter of your `main()` function (or 0 if `argv` is `nil`). This will be changed if any arguments were handled.
---@param argv? unknown[] # Address of the `argv` parameter of `main()`, or `nil`. Any options understood by GTK+ are stripped before return.
---@return nil
function Gtk.init(argc, argv) end

--- # function Gtk.init_check()
---
--- This function does the same work as `gtk_init()` with only a single
--- change: It does not terminate the program if the commandline
--- arguments couldn’t be parsed or the windowing system can’t be
--- initialized. Instead it returns `false` on failure.
--- 
--- This way the application can fall back to some other means of
--- communication with the user - for example a curses or command line
--- interface.
--- 
--- Note that calling any GTK function or instantiating any GTK type after
--- this function returns `false` results in undefined behavior.
---
--- ---
---
---@param argc integer # Address of the `argc` parameter of your `main()` function (or 0 if `argv` is `nil`). This will be changed if any arguments were handled.
---@param argv? unknown[] # Address of the `argv` parameter of `main()`, or `nil`. Any options understood by GTK+ are stripped before return.
---@return (boolean|nil) # `true` if the commandline arguments (if any) were valid and the windowing system has been successfully initialized, `false` otherwise
function Gtk.init_check(argc, argv) end

--- # function Gtk.init_with_args()
---
--- This function does the same work as `gtk_init_check()`.
--- Additionally, it allows you to add your own commandline options,
--- and it automatically generates nicely formatted
--- `--help` output. Note that your program will
--- be terminated after writing out the help output.
---
--- ---
---
---@param argc integer # Address of the `argc` parameter of your `main()` function (or 0 if `argv` is `nil`). This will be changed if any arguments were handled.
---@param argv? unknown[] # Address of the `argv` parameter of `main()`, or `nil`. Any options understood by GTK+ are stripped before return.
---@param parameter_string? string # a string which is displayed in the first line of `--help` output, after `programname [OPTION...]`
---@param entries unknown[] # a `nil`-terminated array of `GOptionEntrys` describing the options of your program
---@param translation_domain? string # a translation domain to use for translating the `--help` output for the options in `entries` and the `parameter_string` with `gettext()`, or `nil`
---@return (boolean|nil) # `true` if the commandline arguments (if any) were valid and if the windowing system has been successfully initialized, `false` otherwise
function Gtk.init_with_args(argc, argv, parameter_string, entries, translation_domain) end

--- # function Gtk.key_snooper_remove()
---
--- Removes the key snooper function with the given id.
---
--- ---
---
---@param snooper_handler_id integer # Identifies the key snooper to remove
---@return nil
function Gtk.key_snooper_remove(snooper_handler_id) end

--- # function Gtk.main()
---
--- Runs the main loop until `gtk_main_quit()` is called.
--- 
--- You can nest calls to `gtk_main()`. In that case `gtk_main_quit()`
--- will make the innermost invocation of the main loop return.
---
--- ---
---
---@return nil
function Gtk.main() end

--- # function Gtk.main_do_event()
---
--- Processes a single GDK event.
--- 
--- This is public only to allow filtering of events between GDK and GTK+.
--- You will not usually need to call this function directly.
--- 
--- While you should not call this function directly, you might want to
--- know how exactly events are handled. So here is what this function
--- does with the event:
--- 
--- 1. Compress enter/leave notify events. If the event passed build an
---    enter/leave pair together with the next event (peeked from GDK), both
---    events are thrown away. This is to avoid a backlog of (de-)highlighting
---    widgets crossed by the pointer.
--- 
--- 2. Find the widget which got the event. If the widget can’t be determined
---    the event is thrown away unless it belongs to a INCR transaction.
--- 
--- 3. Then the event is pushed onto a stack so you can query the currently
---    handled event with `gtk_get_current_event()`.
--- 
--- 4. The event is sent to a widget. If a grab is active all events for widgets
---    that are not in the contained in the grab widget are sent to the latter
---    with a few exceptions:
---    - Deletion and destruction events are still sent to the event widget for
---      obvious reasons.
---    - Events which directly relate to the visual representation of the event
---      widget.
---    - Leave events are delivered to the event widget if there was an enter
---      event delivered to it before without the paired leave event.
---    - Drag events are not redirected because it is unclear what the semantics
---      of that would be.
---    Another point of interest might be that all key events are first passed
---    through the key snooper functions if there are any. Read the description
---    of `gtk_key_snooper_install()` if you need this feature.
--- 
--- 5. After finishing the delivery the event is popped from the event stack.
---
--- ---
---
---@param event Gdk.Event # An event to process (normally passed by GDK)
---@return nil
function Gtk.main_do_event(event) end

--- # function Gtk.main_iteration()
---
--- Runs a single iteration of the mainloop.
--- 
--- If no events are waiting to be processed GTK+ will block
--- until the next event is noticed. If you don’t want to block
--- look at `gtk_main_iteration_do()` or check if any events are
--- pending with `gtk_events_pending()` first.
---
--- ---
---
---@return (boolean|nil) # `true` if `gtk_main_quit()` has been called for the innermost mainloop
function Gtk.main_iteration() end

--- # function Gtk.main_iteration_do()
---
--- Runs a single iteration of the mainloop.
--- If no events are available either return or block depending on
--- the value of `blocking`.
---
--- ---
---
---@param blocking (boolean|nil) # `true` if you want GTK+ to block if no events are pending
---@return (boolean|nil) # `true` if `gtk_main_quit()` has been called for the innermost mainloop
function Gtk.main_iteration_do(blocking) end

--- # function Gtk.main_level()
---
--- Asks for the current nesting level of the main loop.
---
--- ---
---
---@return integer # the nesting level of the current invocation of the main loop
function Gtk.main_level() end

--- # function Gtk.main_quit()
---
--- Makes the innermost invocation of the main loop return
--- when it regains control.
---
--- ---
---
---@return nil
function Gtk.main_quit() end

--- # function Gtk.paint_arrow()
---
--- Draws an arrow in the given rectangle on `cr` using the given
--- parameters. `arrow_type` determines the direction of the arrow.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param shadow_type Gtk.ShadowType # the type of shadow to draw
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param arrow_type Gtk.ArrowType # the type of arrow to draw
---@param fill (boolean|nil) # `true` if the arrow tip should be filled
---@param x integer # x origin of the rectangle to draw the arrow in
---@param y integer # y origin of the rectangle to draw the arrow in
---@param width integer # width of the rectangle to draw the arrow in
---@param height integer # height of the rectangle to draw the arrow in
---@return nil
function Gtk.paint_arrow(style, cr, state_type, shadow_type, widget, detail, arrow_type, fill, x, y, width, height) end

--- # function Gtk.paint_box()
---
--- Draws a box on `cr` with the given parameters.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param shadow_type Gtk.ShadowType # the type of shadow to draw
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param x integer # x origin of the box
---@param y integer # y origin of the box
---@param width integer # the width of the box
---@param height integer # the height of the box
---@return nil
function Gtk.paint_box(style, cr, state_type, shadow_type, widget, detail, x, y, width, height) end

--- # function Gtk.paint_box_gap()
---
--- Draws a box in `cr` using the given style and state and shadow type,
--- leaving a gap in one side.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param shadow_type Gtk.ShadowType # type of shadow to draw
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param x integer # x origin of the rectangle
---@param y integer # y origin of the rectangle
---@param width integer # width of the rectangle
---@param height integer # width of the rectangle
---@param gap_side Gtk.PositionType # side in which to leave the gap
---@param gap_x integer # starting position of the gap
---@param gap_width integer # width of the gap
---@return nil
function Gtk.paint_box_gap(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side, gap_x, gap_width) end

--- # function Gtk.paint_check()
---
--- Draws a check button indicator in the given rectangle on `cr` with
--- the given parameters.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param shadow_type Gtk.ShadowType # the type of shadow to draw
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param x integer # x origin of the rectangle to draw the check in
---@param y integer # y origin of the rectangle to draw the check in
---@param width integer # the width of the rectangle to draw the check in
---@param height integer # the height of the rectangle to draw the check in
---@return nil
function Gtk.paint_check(style, cr, state_type, shadow_type, widget, detail, x, y, width, height) end

--- # function Gtk.paint_diamond()
---
--- Draws a diamond in the given rectangle on `window` using the given
--- parameters.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param shadow_type Gtk.ShadowType # the type of shadow to draw
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param x integer # x origin of the rectangle to draw the diamond in
---@param y integer # y origin of the rectangle to draw the diamond in
---@param width integer # width of the rectangle to draw the diamond in
---@param height integer # height of the rectangle to draw the diamond in
---@return nil
function Gtk.paint_diamond(style, cr, state_type, shadow_type, widget, detail, x, y, width, height) end

--- # function Gtk.paint_expander()
---
--- Draws an expander as used in `GtkTreeView`. `x` and `y` specify the
--- center the expander. The size of the expander is determined by the
--- “expander-size” style property of `widget`.  (If widget is not
--- specified or doesn’t have an “expander-size” property, an
--- unspecified default size will be used, since the caller doesn't
--- have sufficient information to position the expander, this is
--- likely not useful.) The expander is expander_size pixels tall
--- in the collapsed position and expander_size pixels wide in the
--- expanded position.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param x integer # the x position to draw the expander at
---@param y integer # the y position to draw the expander at
---@param expander_style Gtk.ExpanderStyle # the style to draw the expander in; determines whether the expander is collapsed, expanded, or in an intermediate state.
---@return nil
function Gtk.paint_expander(style, cr, state_type, widget, detail, x, y, expander_style) end

--- # function Gtk.paint_extension()
---
--- Draws an extension, i.e. a notebook tab.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param shadow_type Gtk.ShadowType # type of shadow to draw
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param x integer # x origin of the extension
---@param y integer # y origin of the extension
---@param width integer # width of the extension
---@param height integer # width of the extension
---@param gap_side Gtk.PositionType # the side on to which the extension is attached
---@return nil
function Gtk.paint_extension(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side) end

--- # function Gtk.paint_flat_box()
---
--- Draws a flat box on `cr` with the given parameters.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param shadow_type Gtk.ShadowType # the type of shadow to draw
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param x integer # x origin of the box
---@param y integer # y origin of the box
---@param width integer # the width of the box
---@param height integer # the height of the box
---@return nil
function Gtk.paint_flat_box(style, cr, state_type, shadow_type, widget, detail, x, y, width, height) end

--- # function Gtk.paint_focus()
---
--- Draws a focus indicator around the given rectangle on `cr` using the
--- given style.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param x integer # the x origin of the rectangle around which to draw a focus indicator
---@param y integer # the y origin of the rectangle around which to draw a focus indicator
---@param width integer # the width of the rectangle around which to draw a focus indicator
---@param height integer # the height of the rectangle around which to draw a focus indicator
---@return nil
function Gtk.paint_focus(style, cr, state_type, widget, detail, x, y, width, height) end

--- # function Gtk.paint_handle()
---
--- Draws a handle as used in `GtkHandleBox` and `GtkPaned`.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param shadow_type Gtk.ShadowType # type of shadow to draw
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param x integer # x origin of the handle
---@param y integer # y origin of the handle
---@param width integer # with of the handle
---@param height integer # height of the handle
---@param orientation Gtk.Orientation # the orientation of the handle
---@return nil
function Gtk.paint_handle(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, orientation) end

--- # function Gtk.paint_hline()
---
--- Draws a horizontal line from (`x1`, `y`) to (`x2`, `y`) in `cr`
--- using the given style and state.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `caio_t`
---@param state_type Gtk.StateType # a state
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param x1 integer # the starting x coordinate
---@param x2 integer # the ending x coordinate
---@param y integer # the y coordinate
---@return nil
function Gtk.paint_hline(style, cr, state_type, widget, detail, x1, x2, y) end

--- # function Gtk.paint_layout()
---
--- Draws a layout on `cr` using the given parameters.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param use_text (boolean|nil) # whether to use the text or foreground graphics context of `style`
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param x integer # x origin
---@param y integer # y origin
---@param layout Pango.Layout # the layout to draw
---@return nil
function Gtk.paint_layout(style, cr, state_type, use_text, widget, detail, x, y, layout) end

--- # function Gtk.paint_option()
---
--- Draws a radio button indicator in the given rectangle on `cr` with
--- the given parameters.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param shadow_type Gtk.ShadowType # the type of shadow to draw
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param x integer # x origin of the rectangle to draw the option in
---@param y integer # y origin of the rectangle to draw the option in
---@param width integer # the width of the rectangle to draw the option in
---@param height integer # the height of the rectangle to draw the option in
---@return nil
function Gtk.paint_option(style, cr, state_type, shadow_type, widget, detail, x, y, width, height) end

--- # function Gtk.paint_resize_grip()
---
--- Draws a resize grip in the given rectangle on `cr` using the given
--- parameters.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param edge Gdk.WindowEdge # the edge in which to draw the resize grip
---@param x integer # the x origin of the rectangle in which to draw the resize grip
---@param y integer # the y origin of the rectangle in which to draw the resize grip
---@param width integer # the width of the rectangle in which to draw the resize grip
---@param height integer # the height of the rectangle in which to draw the resize grip
---@return nil
function Gtk.paint_resize_grip(style, cr, state_type, widget, detail, edge, x, y, width, height) end

--- # function Gtk.paint_shadow()
---
--- Draws a shadow around the given rectangle in `cr`
--- using the given style and state and shadow type.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param shadow_type Gtk.ShadowType # type of shadow to draw
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param x integer # x origin of the rectangle
---@param y integer # y origin of the rectangle
---@param width integer # width of the rectangle
---@param height integer # width of the rectangle
---@return nil
function Gtk.paint_shadow(style, cr, state_type, shadow_type, widget, detail, x, y, width, height) end

--- # function Gtk.paint_shadow_gap()
---
--- Draws a shadow around the given rectangle in `cr`
--- using the given style and state and shadow type, leaving a
--- gap in one side.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param shadow_type Gtk.ShadowType # type of shadow to draw
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param x integer # x origin of the rectangle
---@param y integer # y origin of the rectangle
---@param width integer # width of the rectangle
---@param height integer # width of the rectangle
---@param gap_side Gtk.PositionType # side in which to leave the gap
---@param gap_x integer # starting position of the gap
---@param gap_width integer # width of the gap
---@return nil
function Gtk.paint_shadow_gap(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side, gap_x, gap_width) end

--- # function Gtk.paint_slider()
---
--- Draws a slider in the given rectangle on `cr` using the
--- given style and orientation.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param shadow_type Gtk.ShadowType # a shadow
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param x integer # the x origin of the rectangle in which to draw a slider
---@param y integer # the y origin of the rectangle in which to draw a slider
---@param width integer # the width of the rectangle in which to draw a slider
---@param height integer # the height of the rectangle in which to draw a slider
---@param orientation Gtk.Orientation # the orientation to be used
---@return nil
function Gtk.paint_slider(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, orientation) end

--- # function Gtk.paint_spinner()
---
--- Draws a spinner on `window` using the given parameters.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param widget? Gtk.Widget # the widget (may be `nil`)
---@param detail? string # a style detail (may be `nil`)
---@param step integer # the nth step
---@param x integer # the x origin of the rectangle in which to draw the spinner
---@param y integer # the y origin of the rectangle in which to draw the spinner
---@param width integer # the width of the rectangle in which to draw the spinner
---@param height integer # the height of the rectangle in which to draw the spinner
---@return nil
function Gtk.paint_spinner(style, cr, state_type, widget, detail, step, x, y, width, height) end

--- # function Gtk.paint_tab()
---
--- Draws an option menu tab (i.e. the up and down pointing arrows)
--- in the given rectangle on `cr` using the given parameters.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param shadow_type Gtk.ShadowType # the type of shadow to draw
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param x integer # x origin of the rectangle to draw the tab in
---@param y integer # y origin of the rectangle to draw the tab in
---@param width integer # the width of the rectangle to draw the tab in
---@param height integer # the height of the rectangle to draw the tab in
---@return nil
function Gtk.paint_tab(style, cr, state_type, shadow_type, widget, detail, x, y, width, height) end

--- # function Gtk.paint_vline()
---
--- Draws a vertical line from (`x`, `y1_`) to (`x`, `y2_`) in `cr`
--- using the given style and state.
---
--- ---
---
---@param style Gtk.Style # a `GtkStyle`
---@param cr cairo.Context # a `cairo_t`
---@param state_type Gtk.StateType # a state
---@param widget? Gtk.Widget # the widget
---@param detail? string # a style detail
---@param y1_ integer # the starting y coordinate
---@param y2_ integer # the ending y coordinate
---@param x integer # the x coordinate
---@return nil
function Gtk.paint_vline(style, cr, state_type, widget, detail, y1_, y2_, x) end

--- # function Gtk.paper_size_get_default()
---
--- Returns the name of the default paper size, which
--- depends on the current locale.
---
--- ---
---
---@return string # the name of the default paper size. The string is owned by GTK+ and should not be modified.
function Gtk.paper_size_get_default() end

--- # function Gtk.paper_size_get_paper_sizes()
---
--- Creates a list of known paper sizes.
---
--- ---
---
---@param include_custom (boolean|nil) # whether to include custom paper sizes as defined in the page setup dialog
---@return Gtk.PaperSize[] # a newly allocated list of newly allocated `GtkPaperSize` objects
function Gtk.paper_size_get_paper_sizes(include_custom) end

--- # function Gtk.parse_args()
---
--- Parses command line arguments, and initializes global
--- attributes of GTK+, but does not actually open a connection
--- to a display. (See `gdk_display_open()`, `gdk_get_display_arg_name()`)
--- 
--- Any arguments used by GTK+ or GDK are removed from the array and
--- `argc` and `argv` are updated accordingly.
--- 
--- There is no need to call this function explicitly if you are using
--- `gtk_init()`, or `gtk_init_check()`.
--- 
--- Note that many aspects of GTK+ require a display connection to
--- function, so this way of initializing GTK+ is really only useful
--- for specialized use cases.
---
--- ---
---
---@param argc integer # a pointer to the number of command line arguments
---@param argv unknown[] # a pointer to the array of command line arguments
---@return (boolean|nil) # `true` if initialization succeeded, otherwise `false`
function Gtk.parse_args(argc, argv) end

--- # function Gtk.print_error_quark()
---
--- Registers an error quark for `GtkPrintOperation` if necessary.
---
--- ---
---
---@return GLib.Quark # The error quark used for `GtkPrintOperation` errors.
function Gtk.print_error_quark() end

--- # function Gtk.print_run_page_setup_dialog()
---
--- Runs a page setup dialog, letting the user modify the values from
--- `page_setup`. If the user cancels the dialog, the returned `GtkPageSetup`
--- is identical to the passed in `page_setup`, otherwise it contains the
--- modifications done in the dialog.
--- 
--- Note that this function may use a recursive mainloop to show the page
--- setup dialog. See `gtk_print_run_page_setup_dialog_async()` if this is
--- a problem.
---
--- ---
---
---@param parent? Gtk.Window # transient parent
---@param page_setup? Gtk.PageSetup # an existing `GtkPageSetup`
---@param settings Gtk.PrintSettings # a `GtkPrintSettings`
---@return Gtk.PageSetup # a new `GtkPageSetup`
function Gtk.print_run_page_setup_dialog(parent, page_setup, settings) end

--- # function Gtk.print_run_page_setup_dialog_async()
---
--- Runs a page setup dialog, letting the user modify the values from `page_setup`.
--- 
--- In contrast to `gtk_print_run_page_setup_dialog()`, this function  returns after
--- showing the page setup dialog on platforms that support this, and calls `done_cb`
--- from a signal handler for the ::response signal of the dialog.
---
--- ---
---
---@param parent? Gtk.Window # transient parent, or `nil`
---@param page_setup? Gtk.PageSetup # an existing `GtkPageSetup`, or `nil`
---@param settings Gtk.PrintSettings # a `GtkPrintSettings`
---@param done_cb Gtk.PageSetupDoneFunc # a function to call when the user saves the modified page setup
---@param data? userdata # user data to pass to `done_cb`
---@return nil
function Gtk.print_run_page_setup_dialog_async(parent, page_setup, settings, done_cb, data) end

--- # function Gtk.propagate_event()
---
--- Sends an event to a widget, propagating the event to parent widgets
--- if the event remains unhandled.
--- 
--- Events received by GTK+ from GDK normally begin in `gtk_main_do_event()`.
--- Depending on the type of event, existence of modal dialogs, grabs, etc.,
--- the event may be propagated; if so, this function is used.
--- 
--- `gtk_propagate_event()` calls `gtk_widget_event()` on each widget it
--- decides to send the event to. So `gtk_widget_event()` is the lowest-level
--- function; it simply emits the `GtkWidget`::event and possibly an
--- event-specific signal on a widget. `gtk_propagate_event()` is a bit
--- higher-level, and `gtk_main_do_event()` is the highest level.
--- 
--- All that said, you most likely don’t want to use any of these
--- functions; synthesizing events is rarely needed. There are almost
--- certainly better ways to achieve your goals. For example, use
--- `gdk_window_invalidate_rect()` or `gtk_widget_queue_draw()` instead
--- of making up expose events.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@param event Gdk.Event # an event
---@return nil
function Gtk.propagate_event(widget, event) end

--- # function Gtk.rc_add_default_file()
---
--- Adds a file to the list of files to be parsed at the
--- end of `gtk_init()`.
---
--- ---
---
---@param filename string # the pathname to the file. If `filename` is not absolute, it is searched in the current directory.
---@return nil
function Gtk.rc_add_default_file(filename) end

--- # function Gtk.rc_find_module_in_path()
---
--- Searches for a theme engine in the GTK+ search path. This function
--- is not useful for applications and should not be used.
---
--- ---
---
---@param module_file string # name of a theme engine
---@return string # The filename, if found (must be freed with `g_free()`), otherwise `nil`.
function Gtk.rc_find_module_in_path(module_file) end

--- # function Gtk.rc_find_pixmap_in_path()
---
--- Looks up a file in pixmap path for the specified `GtkSettings`.
--- If the file is not found, it outputs a warning message using
--- `g_warning()` and returns `nil`.
---
--- ---
---
---@param settings Gtk.Settings # a `GtkSettings`
---@param scanner GLib.Scanner # Scanner used to get line number information for the warning message, or `nil`
---@param pixmap_file string # name of the pixmap file to locate.
---@return string # the filename.
function Gtk.rc_find_pixmap_in_path(settings, scanner, pixmap_file) end

--- # function Gtk.rc_get_default_files()
---
--- Retrieves the current list of RC files that will be parsed
--- at the end of `gtk_init()`.
---
--- ---
---
---@return unknown[] # A `nil`-terminated array of filenames. This memory is owned by GTK+ and must not be freed by the application. If you want to store this information, you should make a copy.
function Gtk.rc_get_default_files() end

--- # function Gtk.rc_get_im_module_file()
---
--- Obtains the path to the IM modules file. See the documentation
--- of the `GTK_IM_MODULE_FILE`
--- environment variable for more details.
---
--- ---
---
---@return string # a newly-allocated string containing the name of the file listing the IM modules available for loading
function Gtk.rc_get_im_module_file() end

--- # function Gtk.rc_get_im_module_path()
---
--- Obtains the path in which to look for IM modules. See the documentation
--- of the `GTK_PATH`
--- environment variable for more details about looking up modules. This
--- function is useful solely for utilities supplied with GTK+ and should
--- not be used by applications under normal circumstances.
---
--- ---
---
---@return string # a newly-allocated string containing the path in which to look for IM modules.
function Gtk.rc_get_im_module_path() end

--- # function Gtk.rc_get_module_dir()
---
--- Returns a directory in which GTK+ looks for theme engines.
--- For full information about the search for theme engines,
--- see the docs for `GTK_PATH` in [Running GTK+ Applications][gtk-running].
---
--- ---
---
---@return string # the directory. (Must be freed with `g_free()`)
function Gtk.rc_get_module_dir() end

--- # function Gtk.rc_get_style()
---
--- Finds all matching RC styles for a given widget,
--- composites them together, and then creates a
--- `GtkStyle` representing the composite appearance.
--- (GTK+ actually keeps a cache of previously
--- created styles, so a new style may not be
--- created.)
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@return Gtk.Style # the resulting style. No refcount is added to the returned style, so if you want to save this style around, you should add a reference yourself.
function Gtk.rc_get_style(widget) end

--- # function Gtk.rc_get_style_by_paths()
---
--- Creates up a `GtkStyle` from styles defined in a RC file by providing
--- the raw components used in matching. This function may be useful
--- when creating pseudo-widgets that should be themed like widgets but
--- don’t actually have corresponding GTK+ widgets. An example of this
--- would be items inside a GNOME canvas widget.
--- 
--- The action of `gtk_rc_get_style()` is similar to:
--- ```c
---  gtk_widget_path (widget, NULL, &path, NULL);
---  gtk_widget_class_path (widget, NULL, &class_path, NULL);
---  gtk_rc_get_style_by_paths (gtk_widget_get_settings (widget),
---                             path, class_path,
---                             G_OBJECT_TYPE (widget));
--- ```
---
--- ---
---
---@param settings Gtk.Settings # a `GtkSettings` object
---@param widget_path? string # the widget path to use when looking up the style, or `nil` if no matching against the widget path should be done
---@param class_path? string # the class path to use when looking up the style, or `nil` if no matching against the class path should be done.
---@param type Gtk.GType # a type that will be used along with parent types of this type when matching against class styles, or `G_TYPE_NONE`
---@return Gtk.Style # A style created by matching with the supplied paths, or `nil` if nothing matching was specified and the default style should be used. The returned value is owned by GTK+ as part of an internal cache, so you must call `g_object_ref()` on the returned value if you want to keep a reference to it.
function Gtk.rc_get_style_by_paths(settings, widget_path, class_path, type) end

--- # function Gtk.rc_get_theme_dir()
---
--- Returns the standard directory in which themes should
--- be installed. (GTK+ does not actually use this directory
--- itself.)
---
--- ---
---
---@return string # The directory (must be freed with `g_free()`).
function Gtk.rc_get_theme_dir() end

--- # function Gtk.rc_parse()
---
--- Parses a given resource file.
---
--- ---
---
---@param filename string # the filename of a file to parse. If `filename` is not absolute, it is searched in the current directory.
---@return nil
function Gtk.rc_parse(filename) end

--- # function Gtk.rc_parse_color()
---
--- Parses a color in the format expected
--- in a RC file.
--- 
--- Note that theme engines should use `gtk_rc_parse_color_full()` in
--- order to support symbolic colors.
---
--- ---
---
---@param scanner GLib.Scanner # a `GScanner`
---@param color Gdk.Color # a pointer to a `GdkColor` in which to store the result
---@return integer # %G_TOKEN_NONE if parsing succeeded, otherwise the token that was expected but not found
function Gtk.rc_parse_color(scanner, color) end

--- # function Gtk.rc_parse_color_full()
---
--- Parses a color in the format expected
--- in a RC file. If `style` is not `nil`, it will be consulted to resolve
--- references to symbolic colors.
---
--- ---
---
---@param scanner GLib.Scanner # a `GScanner`
---@param style? Gtk.RcStyle # a `GtkRcStyle`, or `nil`
---@param color Gdk.Color # a pointer to a `GdkColor` in which to store the result
---@return integer # %G_TOKEN_NONE if parsing succeeded, otherwise the token that was expected but not found
function Gtk.rc_parse_color_full(scanner, style, color) end

--- # function Gtk.rc_parse_priority()
---
--- Parses a `GtkPathPriorityType` variable from the format expected
--- in a RC file.
---
--- ---
---
---@param scanner GLib.Scanner # a `GScanner` (must be initialized for parsing an RC file)
---@param priority Gtk.PathPriorityType # A pointer to `GtkPathPriorityType` variable in which to store the result.
---@return integer # %G_TOKEN_NONE if parsing succeeded, otherwise the token that was expected but not found.
function Gtk.rc_parse_priority(scanner, priority) end

--- # function Gtk.rc_parse_state()
---
--- Parses a `GtkStateType` variable from the format expected
--- in a RC file.
---
--- ---
---
---@param scanner GLib.Scanner # a `GScanner` (must be initialized for parsing an RC file)
---@param state Gtk.StateType # A pointer to a `GtkStateType` variable in which to store the result.
---@return integer # %G_TOKEN_NONE if parsing succeeded, otherwise the token that was expected but not found.
function Gtk.rc_parse_state(scanner, state) end

--- # function Gtk.rc_parse_string()
---
--- Parses resource information directly from a string.
---
--- ---
---
---@param rc_string string # a string to parse.
---@return nil
function Gtk.rc_parse_string(rc_string) end

--- # function Gtk.rc_property_parse_border()
---
--- A `GtkRcPropertyParser` for use with `gtk_settings_install_property_parser()`
--- or `gtk_widget_class_install_style_property_parser()` which parses
--- borders in the form
--- `"{ left, right, top, bottom }"` for integers
--- left, right, top and bottom.
---
--- ---
---
---@param pspec GObject.ParamSpec # a `GParamSpec`
---@param gstring GLib.String # the `GString` to be parsed
---@param property_value GObject.Value # a `GValue` which must hold boxed values.
---@return (boolean|nil) # `true` if `gstring` could be parsed and `property_value` has been set to the resulting `GtkBorder`.
function Gtk.rc_property_parse_border(pspec, gstring, property_value) end

--- # function Gtk.rc_property_parse_color()
---
--- A `GtkRcPropertyParser` for use with `gtk_settings_install_property_parser()`
--- or `gtk_widget_class_install_style_property_parser()` which parses a
--- color given either by its name or in the form
--- `{ red, green, blue }` where red, green and
--- blue are integers between 0 and 65535 or floating-point numbers
--- between 0 and 1.
---
--- ---
---
---@param pspec GObject.ParamSpec # a `GParamSpec`
---@param gstring GLib.String # the `GString` to be parsed
---@param property_value GObject.Value # a `GValue` which must hold `GdkColor` values.
---@return (boolean|nil) # `true` if `gstring` could be parsed and `property_value` has been set to the resulting `GdkColor`.
function Gtk.rc_property_parse_color(pspec, gstring, property_value) end

--- # function Gtk.rc_property_parse_enum()
---
--- A `GtkRcPropertyParser` for use with `gtk_settings_install_property_parser()`
--- or `gtk_widget_class_install_style_property_parser()` which parses a single
--- enumeration value.
--- 
--- The enumeration value can be specified by its name, its nickname or
--- its numeric value. For consistency with flags parsing, the value
--- may be surrounded by parentheses.
---
--- ---
---
---@param pspec GObject.ParamSpec # a `GParamSpec`
---@param gstring GLib.String # the `GString` to be parsed
---@param property_value GObject.Value # a `GValue` which must hold enum values.
---@return (boolean|nil) # `true` if `gstring` could be parsed and `property_value` has been set to the resulting `GEnumValue`.
function Gtk.rc_property_parse_enum(pspec, gstring, property_value) end

--- # function Gtk.rc_property_parse_flags()
---
--- A `GtkRcPropertyParser` for use with `gtk_settings_install_property_parser()`
--- or `gtk_widget_class_install_style_property_parser()` which parses flags.
--- 
--- Flags can be specified by their name, their nickname or
--- numerically. Multiple flags can be specified in the form
--- `"( flag1 | flag2 | ... )"`.
---
--- ---
---
---@param pspec GObject.ParamSpec # a `GParamSpec`
---@param gstring GLib.String # the `GString` to be parsed
---@param property_value GObject.Value # a `GValue` which must hold flags values.
---@return (boolean|nil) # `true` if `gstring` could be parsed and `property_value` has been set to the resulting flags value.
function Gtk.rc_property_parse_flags(pspec, gstring, property_value) end

--- # function Gtk.rc_property_parse_requisition()
---
--- A `GtkRcPropertyParser` for use with `gtk_settings_install_property_parser()`
--- or `gtk_widget_class_install_style_property_parser()` which parses a
--- requisition in the form
--- `"{ width, height }"` for integers %width and %height.
---
--- ---
---
---@param pspec GObject.ParamSpec # a `GParamSpec`
---@param gstring GLib.String # the `GString` to be parsed
---@param property_value GObject.Value # a `GValue` which must hold boxed values.
---@return (boolean|nil) # `true` if `gstring` could be parsed and `property_value` has been set to the resulting `GtkRequisition`.
function Gtk.rc_property_parse_requisition(pspec, gstring, property_value) end

--- # function Gtk.rc_reparse_all()
---
--- If the modification time on any previously read file for the
--- default `GtkSettings` has changed, discard all style information
--- and then reread all previously read RC files.
---
--- ---
---
---@return (boolean|nil) # `true` if the files were reread.
function Gtk.rc_reparse_all() end

--- # function Gtk.rc_reparse_all_for_settings()
---
--- If the modification time on any previously read file
--- for the given `GtkSettings` has changed, discard all style information
--- and then reread all previously read RC files.
---
--- ---
---
---@param settings Gtk.Settings # a `GtkSettings`
---@param force_load (boolean|nil) # load whether or not anything changed
---@return (boolean|nil) # `true` if the files were reread.
function Gtk.rc_reparse_all_for_settings(settings, force_load) end

--- # function Gtk.rc_reset_styles()
---
--- This function recomputes the styles for all widgets that use a
--- particular `GtkSettings` object. (There is one `GtkSettings` object
--- per `GdkScreen`, see `gtk_settings_get_for_screen()`); It is useful
--- when some global parameter has changed that affects the appearance
--- of all widgets, because when a widget gets a new style, it will
--- both redraw and recompute any cached information about its
--- appearance. As an example, it is used when the default font size
--- set by the operating system changes. Note that this function
--- doesn’t affect widgets that have a style set explicitly on them
--- with `gtk_widget_set_style()`.
---
--- ---
---
---@param settings Gtk.Settings # a `GtkSettings`
---@return nil
function Gtk.rc_reset_styles(settings) end

--- # function Gtk.rc_set_default_files()
---
--- Sets the list of files that GTK+ will read at the
--- end of `gtk_init()`.
---
--- ---
---
---@param filenames unknown[] # A `nil`-terminated list of filenames.
---@return nil
function Gtk.rc_set_default_files(filenames) end

--- # function Gtk.recent_chooser_error_quark()
---
---@return GLib.Quark
function Gtk.recent_chooser_error_quark() end

--- # function Gtk.recent_manager_error_quark()
---
---@return GLib.Quark
function Gtk.recent_manager_error_quark() end

--- # function Gtk.render_activity()
---
--- Renders an activity indicator (such as in `GtkSpinner`).
--- The state %GTK_STATE_FLAG_CHECKED determines whether there is
--- activity going on.
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param x number # X origin of the rectangle
---@param y number # Y origin of the rectangle
---@param width number # rectangle width
---@param height number # rectangle height
---@return nil
function Gtk.render_activity(context, cr, x, y, width, height) end

--- # function Gtk.render_arrow()
---
--- Renders an arrow pointing to `angle`.
--- 
--- Typical arrow rendering at 0, 1⁄2 π;, π; and 3⁄2 π:
--- 
--- ![](arrows.png)
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param angle number # arrow angle from 0 to 2 * %G_PI, being 0 the arrow pointing to the north
---@param x number # X origin of the render area
---@param y number # Y origin of the render area
---@param size number # square side for render area
---@return nil
function Gtk.render_arrow(context, cr, angle, x, y, size) end

--- # function Gtk.render_background()
---
--- Renders the background of an element.
--- 
--- Typical background rendering, showing the effect of
--- `background-image`, `border-width` and `border-radius`:
--- 
--- ![](background.png)
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param x number # X origin of the rectangle
---@param y number # Y origin of the rectangle
---@param width number # rectangle width
---@param height number # rectangle height
---@return nil
function Gtk.render_background(context, cr, x, y, width, height) end

--- # function Gtk.render_background_get_clip()
---
--- Returns the area that will be affected (i.e. drawn to) when
--- calling `gtk_render_background()` for the given `context` and
--- rectangle.
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param x number # X origin of the rectangle
---@param y number # Y origin of the rectangle
---@param width number # rectangle width
---@param height number # rectangle height
---@param out_clip Gdk.Rectangle # return location for the clip
---@return nil
function Gtk.render_background_get_clip(context, x, y, width, height, out_clip) end

--- # function Gtk.render_check()
---
--- Renders a checkmark (as in a `GtkCheckButton`).
--- 
--- The %GTK_STATE_FLAG_CHECKED state determines whether the check is
--- on or off, and %GTK_STATE_FLAG_INCONSISTENT determines whether it
--- should be marked as undefined.
--- 
--- Typical checkmark rendering:
--- 
--- ![](checks.png)
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param x number # X origin of the rectangle
---@param y number # Y origin of the rectangle
---@param width number # rectangle width
---@param height number # rectangle height
---@return nil
function Gtk.render_check(context, cr, x, y, width, height) end

--- # function Gtk.render_expander()
---
--- Renders an expander (as used in `GtkTreeView` and `GtkExpander`) in the area
--- defined by `x`, `y`, `width`, `height`. The state %GTK_STATE_FLAG_CHECKED
--- determines whether the expander is collapsed or expanded.
--- 
--- Typical expander rendering:
--- 
--- ![](expanders.png)
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param x number # X origin of the rectangle
---@param y number # Y origin of the rectangle
---@param width number # rectangle width
---@param height number # rectangle height
---@return nil
function Gtk.render_expander(context, cr, x, y, width, height) end

--- # function Gtk.render_extension()
---
--- Renders a extension (as in a `GtkNotebook` tab) in the rectangle
--- defined by `x`, `y`, `width`, `height`. The side where the extension
--- connects to is defined by `gap_side`.
--- 
--- Typical extension rendering:
--- 
--- ![](extensions.png)
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param x number # X origin of the rectangle
---@param y number # Y origin of the rectangle
---@param width number # rectangle width
---@param height number # rectangle height
---@param gap_side Gtk.PositionType # side where the gap is
---@return nil
function Gtk.render_extension(context, cr, x, y, width, height, gap_side) end

--- # function Gtk.render_focus()
---
--- Renders a focus indicator on the rectangle determined by `x`, `y`, `width`, `height`.
--- 
--- Typical focus rendering:
--- 
--- ![](focus.png)
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param x number # X origin of the rectangle
---@param y number # Y origin of the rectangle
---@param width number # rectangle width
---@param height number # rectangle height
---@return nil
function Gtk.render_focus(context, cr, x, y, width, height) end

--- # function Gtk.render_frame()
---
--- Renders a frame around the rectangle defined by `x`, `y`, `width`, `height`.
--- 
--- Examples of frame rendering, showing the effect of `border-image`,
--- `border-color`, `border-width`, `border-radius` and junctions:
--- 
--- ![](frames.png)
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param x number # X origin of the rectangle
---@param y number # Y origin of the rectangle
---@param width number # rectangle width
---@param height number # rectangle height
---@return nil
function Gtk.render_frame(context, cr, x, y, width, height) end

--- # function Gtk.render_frame_gap()
---
--- Renders a frame around the rectangle defined by (`x`, `y`, `width`, `height`),
--- leaving a gap on one side. `xy0_gap` and `xy1_gap` will mean X coordinates
--- for %GTK_POS_TOP and %GTK_POS_BOTTOM gap sides, and Y coordinates for
--- %GTK_POS_LEFT and %GTK_POS_RIGHT.
--- 
--- Typical rendering of a frame with a gap:
--- 
--- ![](frame-gap.png)
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param x number # X origin of the rectangle
---@param y number # Y origin of the rectangle
---@param width number # rectangle width
---@param height number # rectangle height
---@param gap_side Gtk.PositionType # side where the gap is
---@param xy0_gap number # initial coordinate (X or Y depending on `gap_side`) for the gap
---@param xy1_gap number # end coordinate (X or Y depending on `gap_side`) for the gap
---@return nil
function Gtk.render_frame_gap(context, cr, x, y, width, height, gap_side, xy0_gap, xy1_gap) end

--- # function Gtk.render_handle()
---
--- Renders a handle (as in `GtkHandleBox`, `GtkPaned` and
--- `GtkWindow`’s resize grip), in the rectangle
--- determined by `x`, `y`, `width`, `height`.
--- 
--- Handles rendered for the paned and grip classes:
--- 
--- ![](handles.png)
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param x number # X origin of the rectangle
---@param y number # Y origin of the rectangle
---@param width number # rectangle width
---@param height number # rectangle height
---@return nil
function Gtk.render_handle(context, cr, x, y, width, height) end

--- # function Gtk.render_icon()
---
--- Renders the icon in `pixbuf` at the specified `x` and `y` coordinates.
--- 
--- This function will render the icon in `pixbuf` at exactly its size,
--- regardless of scaling factors, which may not be appropriate when
--- drawing on displays with high pixel densities.
--- 
--- You probably want to use `gtk_render_icon_surface()` instead, if you
--- already have a Cairo surface.
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param pixbuf GdkPixbuf.Pixbuf # a `GdkPixbuf` containing the icon to draw
---@param x number # X position for the `pixbuf`
---@param y number # Y position for the `pixbuf`
---@return nil
function Gtk.render_icon(context, cr, pixbuf, x, y) end

--- # function Gtk.render_icon_pixbuf()
---
--- Renders the icon specified by `source` at the given `size`, returning the result
--- in a pixbuf.
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param source Gtk.IconSource # the `GtkIconSource` specifying the icon to render
---@param size integer # the size (`GtkIconSize`) to render the icon at. A size of `(GtkIconSize) -1` means render at the size of the source and don’t scale.
---@return GdkPixbuf.Pixbuf # a newly-created `GdkPixbuf` containing the rendered icon
function Gtk.render_icon_pixbuf(context, source, size) end

--- # function Gtk.render_icon_surface()
---
--- Renders the icon in `surface` at the specified `x` and `y` coordinates.
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param surface cairo.Surface # a `cairo_surface_t` containing the icon to draw
---@param x number # X position for the `icon`
---@param y number # Y position for the `incon`
---@return nil
function Gtk.render_icon_surface(context, cr, surface, x, y) end

--- # function Gtk.render_insertion_cursor()
---
--- Draws a text caret on `cr` at the specified index of `layout`.
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param x number # X origin
---@param y number # Y origin
---@param layout Pango.Layout # the `PangoLayout` of the text
---@param index integer # the index in the `PangoLayout`
---@param direction Pango.Direction # the `PangoDirection` of the text
---@return nil
function Gtk.render_insertion_cursor(context, cr, x, y, layout, index, direction) end

--- # function Gtk.render_layout()
---
--- Renders `layout` on the coordinates `x`, `y`
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param x number # X origin
---@param y number # Y origin
---@param layout Pango.Layout # the `PangoLayout` to render
---@return nil
function Gtk.render_layout(context, cr, x, y, layout) end

--- # function Gtk.render_line()
---
--- Renders a line from (x0, y0) to (x1, y1).
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param x0 number # X coordinate for the origin of the line
---@param y0 number # Y coordinate for the origin of the line
---@param x1 number # X coordinate for the end of the line
---@param y1 number # Y coordinate for the end of the line
---@return nil
function Gtk.render_line(context, cr, x0, y0, x1, y1) end

--- # function Gtk.render_option()
---
--- Renders an option mark (as in a `GtkRadioButton`), the %GTK_STATE_FLAG_CHECKED
--- state will determine whether the option is on or off, and
--- %GTK_STATE_FLAG_INCONSISTENT whether it should be marked as undefined.
--- 
--- Typical option mark rendering:
--- 
--- ![](options.png)
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param x number # X origin of the rectangle
---@param y number # Y origin of the rectangle
---@param width number # rectangle width
---@param height number # rectangle height
---@return nil
function Gtk.render_option(context, cr, x, y, width, height) end

--- # function Gtk.render_slider()
---
--- Renders a slider (as in `GtkScale`) in the rectangle defined by `x`, `y`,
--- `width`, `height`. `orientation` defines whether the slider is vertical
--- or horizontal.
--- 
--- Typical slider rendering:
--- 
--- ![](sliders.png)
---
--- ---
---
---@param context Gtk.StyleContext # a `GtkStyleContext`
---@param cr cairo.Context # a `cairo_t`
---@param x number # X origin of the rectangle
---@param y number # Y origin of the rectangle
---@param width number # rectangle width
---@param height number # rectangle height
---@param orientation Gtk.Orientation # orientation of the slider
---@return nil
function Gtk.render_slider(context, cr, x, y, width, height, orientation) end

--- # function Gtk.rgb_to_hsv()
---
--- Converts a color from RGB space to HSV.
--- 
--- Input values must be in the [0.0, 1.0] range;
--- output values will be in the same range.
---
--- ---
---
---@param r number # Red
---@param g number # Green
---@param b number # Blue
---@param h number # Return value for the hue component
---@param s number # Return value for the saturation component
---@param v number # Return value for the value component
---@return nil
function Gtk.rgb_to_hsv(r, g, b, h, s, v) end

--- # function Gtk.selection_add_target()
---
--- Appends a specified target to the list of supported targets for a
--- given widget and selection.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@param selection Gdk.Atom # the selection
---@param target Gdk.Atom # target to add.
---@param info integer # A unsigned integer which will be passed back to the application.
---@return nil
function Gtk.selection_add_target(widget, selection, target, info) end

--- # function Gtk.selection_add_targets()
---
--- Prepends a table of targets to the list of supported targets
--- for a given widget and selection.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@param selection Gdk.Atom # the selection
---@param targets unknown[] # a table of targets to add
---@param ntargets integer # number of entries in `targets`
---@return nil
function Gtk.selection_add_targets(widget, selection, targets, ntargets) end

--- # function Gtk.selection_clear_targets()
---
--- Remove all targets registered for the given selection for the
--- widget.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@param selection Gdk.Atom # an atom representing a selection
---@return nil
function Gtk.selection_clear_targets(widget, selection) end

--- # function Gtk.selection_convert()
---
--- Requests the contents of a selection. When received,
--- a “selection-received” signal will be generated.
---
--- ---
---
---@param widget Gtk.Widget # The widget which acts as requestor
---@param selection Gdk.Atom # Which selection to get
---@param target Gdk.Atom # Form of information desired (e.g., STRING)
---@param time_ integer # Time of request (usually of triggering event) In emergency, you could use `GDK_CURRENT_TIME`
---@return (boolean|nil) # `true` if requested succeeded. `false` if we could not process request. (e.g., there was already a request in process for this widget).
function Gtk.selection_convert(widget, selection, target, time_) end

--- # function Gtk.selection_owner_set()
---
--- Claims ownership of a given selection for a particular widget,
--- or, if `widget` is `nil`, release ownership of the selection.
---
--- ---
---
---@param widget? Gtk.Widget # a `GtkWidget`, or `nil`.
---@param selection Gdk.Atom # an interned atom representing the selection to claim
---@param time_ integer # timestamp with which to claim the selection
---@return (boolean|nil) # `true` if the operation succeeded
function Gtk.selection_owner_set(widget, selection, time_) end

--- # function Gtk.selection_owner_set_for_display()
---
--- Claim ownership of a given selection for a particular widget, or,
--- if `widget` is `nil`, release ownership of the selection.
---
--- ---
---
---@param display Gdk.Display # the `GdkDisplay` where the selection is set
---@param widget? Gtk.Widget # new selection owner (a `GtkWidget`), or `nil`.
---@param selection Gdk.Atom # an interned atom representing the selection to claim.
---@param time_ integer # timestamp with which to claim the selection
---@return (boolean|nil) # TRUE if the operation succeeded
function Gtk.selection_owner_set_for_display(display, widget, selection, time_) end

--- # function Gtk.selection_remove_all()
---
--- Removes all handlers and unsets ownership of all
--- selections for a widget. Called when widget is being
--- destroyed. This function will not generally be
--- called by applications.
---
--- ---
---
---@param widget Gtk.Widget # a `GtkWidget`
---@return nil
function Gtk.selection_remove_all(widget) end

--- # function Gtk.set_debug_flags()
---
--- Sets the GTK+ debug flags.
---
--- ---
---
---@param flags integer
---@return nil
function Gtk.set_debug_flags(flags) end

--- # function Gtk.show_uri()
---
--- A convenience function for launching the default application
--- to show the uri. Like `gtk_show_uri_on_window()`, but takes a screen
--- as transient parent instead of a window.
--- 
--- Note that this function is deprecated as it does not pass the necessary
--- information for helpers to parent their dialog properly, when run from
--- sandboxed applications for example.
---
--- ---
---
---@param screen? Gdk.Screen # screen to show the uri on or `nil` for the default screen
---@param uri string # the uri to show
---@param timestamp integer # a timestamp to prevent focus stealing
---@return (boolean|nil) # `true` on success, `false` on error
function Gtk.show_uri(screen, uri, timestamp) end

--- # function Gtk.show_uri_on_window()
---
--- This is a convenience function for launching the default application
--- to show the uri. The uri must be of a form understood by GIO (i.e. you
--- need to install gvfs to get support for uri schemes such as http://
--- or ftp://, as only local files are handled by GIO itself).
--- Typical examples are
--- - `file:///home/gnome/pict.jpg`
--- - `http://www.gnome.org`
--- - `mailto:me`gnome`.org`
--- 
--- Ideally the timestamp is taken from the event triggering
--- the `gtk_show_uri()` call. If timestamp is not known you can take
--- %GDK_CURRENT_TIME.
--- 
--- This is the recommended call to be used as it passes information
--- necessary for sandbox helpers to parent their dialogs properly.
---
--- ---
---
---@param parent? Gtk.Window # parent window
---@param uri string # the uri to show
---@param timestamp integer # a timestamp to prevent focus stealing
---@return (boolean|nil) # `true` on success, `false` on error
function Gtk.show_uri_on_window(parent, uri, timestamp) end

--- # function Gtk.stock_add()
---
--- Registers each of the stock items in `items`. If an item already
--- exists with the same stock ID as one of the `items`, the old item
--- gets replaced. The stock items are copied, so GTK+ does not hold
--- any pointer into `items` and `items` can be freed. Use
--- `gtk_stock_add_static()` if `items` is persistent and GTK+ need not
--- copy the array.
---
--- ---
---
---@param items unknown[] # a `GtkStockItem` or array of items
---@param n_items integer # number of `GtkStockItem` in `items`
---@return nil
function Gtk.stock_add(items, n_items) end

--- # function Gtk.stock_add_static()
---
--- Same as `gtk_stock_add()`, but doesn’t copy `items`, so
--- `items` must persist until application exit.
---
--- ---
---
---@param items unknown[] # a `GtkStockItem` or array of `GtkStockItem`
---@param n_items integer # number of items
---@return nil
function Gtk.stock_add_static(items, n_items) end

--- # function Gtk.stock_list_ids()
---
--- Retrieves a list of all known stock IDs added to a `GtkIconFactory`
--- or registered with `gtk_stock_add()`. The list must be freed with `g_slist_free()`,
--- and each string in the list must be freed with `g_free()`.
---
--- ---
---
---@return string[] # a list of known stock IDs
function Gtk.stock_list_ids() end

--- # function Gtk.stock_lookup()
---
--- Fills `item` with the registered values for `stock_id`, returning `true`
--- if `stock_id` was known.
---
--- ---
---
---@param stock_id string # a stock item name
---@param item Gtk.StockItem # stock item to initialize with values
---@return (boolean|nil) # `true` if `item` was initialized
function Gtk.stock_lookup(stock_id, item) end

--- # function Gtk.stock_set_translate_func()
---
--- Sets a function to be used for translating the `label` of
--- a stock item.
--- 
--- If no function is registered for a translation domain,
--- `g_dgettext()` is used.
--- 
--- The function is used for all stock items whose
--- `translation_domain` matches `domain`. Note that it is possible
--- to use strings different from the actual gettext translation domain
--- of your application for this, as long as your `GtkTranslateFunc` uses
--- the correct domain when calling `dgettext()`. This can be useful, e.g.
--- when dealing with message contexts:
--- 
--- ```c
--- GtkStockItem items[] = {
---  { MY_ITEM1, NC_("odd items", "Item 1"), 0, 0, "odd-item-domain" },
---  { MY_ITEM2, NC_("even items", "Item 2"), 0, 0, "even-item-domain" },
--- };
--- 
--- gchar *
--- my_translate_func (const gchar *msgid,
---                    gpointer     data)
--- {
---   gchar *msgctxt = data;
--- 
---   return (gchar*)g_dpgettext2 (GETTEXT_PACKAGE, msgctxt, msgid);
--- }
--- 
--- ...
--- 
--- gtk_stock_add (items, G_N_ELEMENTS (items));
--- gtk_stock_set_translate_func ("odd-item-domain", my_translate_func, "odd items");
--- gtk_stock_set_translate_func ("even-item-domain", my_translate_func, "even items");
--- ```
---
--- ---
---
---@param domain string # the translation domain for which `func` shall be used
---@param func Gtk.TranslateFunc # a `GtkTranslateFunc`
---@param data? userdata # data to pass to `func`
---@param notify GLib.DestroyNotify # a `GDestroyNotify` that is called when `data` is no longer needed
---@return nil
function Gtk.stock_set_translate_func(domain, func, data, notify) end

--- # function Gtk.target_table_free()
---
--- This function frees a target table as returned by
--- `gtk_target_table_new_from_list()`
---
--- ---
---
---@param targets unknown[] # a `GtkTargetEntry` array
---@param n_targets integer # the number of entries in the array
---@return nil
function Gtk.target_table_free(targets, n_targets) end

--- # function Gtk.target_table_new_from_list()
---
--- This function creates an `GtkTargetEntry` array that contains the
--- same targets as the passed %list. The returned table is newly
--- allocated and should be freed using `gtk_target_table_free()` when no
--- longer needed.
---
--- ---
---
---@param list Gtk.TargetList # a `GtkTargetList`
---@param n_targets integer # return location for the number ot targets in the table
---@return unknown[] # the new table.
function Gtk.target_table_new_from_list(list, n_targets) end

--- # function Gtk.targets_include_image()
---
--- Determines if any of the targets in `targets` can be used to
--- provide a `GdkPixbuf`.
---
--- ---
---
---@param targets unknown[] # an array of `GdkAtoms`
---@param n_targets integer # the length of `targets`
---@param writable (boolean|nil) # whether to accept only targets for which GTK+ knows how to convert a pixbuf into the format
---@return (boolean|nil) # `true` if `targets` include a suitable target for images, otherwise `false`.
function Gtk.targets_include_image(targets, n_targets, writable) end

--- # function Gtk.targets_include_rich_text()
---
--- Determines if any of the targets in `targets` can be used to
--- provide rich text.
---
--- ---
---
---@param targets unknown[] # an array of `GdkAtoms`
---@param n_targets integer # the length of `targets`
---@param buffer Gtk.TextBuffer # a `GtkTextBuffer`
---@return (boolean|nil) # `true` if `targets` include a suitable target for rich text, otherwise `false`.
function Gtk.targets_include_rich_text(targets, n_targets, buffer) end

--- # function Gtk.targets_include_text()
---
--- Determines if any of the targets in `targets` can be used to
--- provide text.
---
--- ---
---
---@param targets unknown[] # an array of `GdkAtoms`
---@param n_targets integer # the length of `targets`
---@return (boolean|nil) # `true` if `targets` include a suitable target for text, otherwise `false`.
function Gtk.targets_include_text(targets, n_targets) end

--- # function Gtk.targets_include_uri()
---
--- Determines if any of the targets in `targets` can be used to
--- provide an uri list.
---
--- ---
---
---@param targets unknown[] # an array of `GdkAtoms`
---@param n_targets integer # the length of `targets`
---@return (boolean|nil) # `true` if `targets` include a suitable target for uri lists, otherwise `false`.
function Gtk.targets_include_uri(targets, n_targets) end

--- # function Gtk.test_create_simple_window()
---
--- Create a simple window with window title `window_title` and
--- text contents `dialog_text`.
--- The window will quit any running `gtk_main()`-loop when destroyed, and it
--- will automatically be destroyed upon test function teardown.
---
--- ---
---
---@param window_title string # Title of the window to be displayed.
---@param dialog_text string # Text inside the window to be displayed.
---@return Gtk.Widget # a widget pointer to the newly created GtkWindow.
function Gtk.test_create_simple_window(window_title, dialog_text) end

--- # function Gtk.test_find_label()
---
--- This function will search `widget` and all its descendants for a GtkLabel
--- widget with a text string matching `label_pattern`.
--- The `label_pattern` may contain asterisks “*” and question marks “?” as
--- placeholders, `g_pattern_match()` is used for the matching.
--- Note that locales other than "C“ tend to alter (translate” label strings,
--- so this function is genrally only useful in test programs with
--- predetermined locales, see `gtk_test_init()` for more details.
---
--- ---
---
---@param widget Gtk.Widget # Valid label or container widget.
---@param label_pattern string # Shell-glob pattern to match a label string.
---@return Gtk.Widget # a GtkLabel widget if any is found.
function Gtk.test_find_label(widget, label_pattern) end

--- # function Gtk.test_find_sibling()
---
--- This function will search siblings of `base_widget` and siblings of its
--- ancestors for all widgets matching `widget_type`.
--- Of the matching widgets, the one that is geometrically closest to
--- `base_widget` will be returned.
--- The general purpose of this function is to find the most likely “action”
--- widget, relative to another labeling widget. Such as finding a
--- button or text entry widget, given its corresponding label widget.
---
--- ---
---
---@param base_widget Gtk.Widget # Valid widget, part of a widget hierarchy
---@param widget_type Gtk.GType # Type of a aearched for sibling widget
---@return Gtk.Widget # a widget of type `widget_type` if any is found.
function Gtk.test_find_sibling(base_widget, widget_type) end

--- # function Gtk.test_find_widget()
---
--- This function will search the descendants of `widget` for a widget
--- of type `widget_type` that has a label matching `label_pattern` next
--- to it. This is most useful for automated GUI testing, e.g. to find
--- the “OK” button in a dialog and synthesize clicks on it.
--- However see `gtk_test_find_label()`, `gtk_test_find_sibling()` and
--- `gtk_test_widget_click()` for possible caveats involving the search of
--- such widgets and synthesizing widget events.
---
--- ---
---
---@param widget Gtk.Widget # Container widget, usually a GtkWindow.
---@param label_pattern string # Shell-glob pattern to match a label string.
---@param widget_type Gtk.GType # Type of a aearched for label sibling widget.
---@return Gtk.Widget # a valid widget if any is found or `nil`.
function Gtk.test_find_widget(widget, label_pattern, widget_type) end

--- # function Gtk.test_list_all_types()
---
--- Return the type ids that have been registered after
--- calling `gtk_test_register_all_types()`.
---
--- ---
---
---@param n_types integer # location to store number of types
---@return unknown[] # 0-terminated array of type ids
function Gtk.test_list_all_types(n_types) end

--- # function Gtk.test_register_all_types()
---
--- Force registration of all core Gtk+ and Gdk object types.
--- This allowes to refer to any of those object types via
--- `g_type_from_name()` after calling this function.
---
--- ---
---
---@return nil
function Gtk.test_register_all_types() end

--- # function Gtk.test_slider_get_value()
---
--- Retrive the literal adjustment value for GtkRange based
--- widgets and spin buttons. Note that the value returned by
--- this function is anything between the lower and upper bounds
--- of the adjustment belonging to `widget`, and is not a percentage
--- as passed in to `gtk_test_slider_set_perc()`.
---
--- ---
---
---@param widget Gtk.Widget # valid widget pointer.
---@return number # gtk_adjustment_get_value (adjustment) for an adjustment belonging to `widget`.
function Gtk.test_slider_get_value(widget) end

--- # function Gtk.test_slider_set_perc()
---
--- This function will adjust the slider position of all GtkRange
--- based widgets, such as scrollbars or scales, it’ll also adjust
--- spin buttons. The adjustment value of these widgets is set to
--- a value between the lower and upper limits, according to the
--- `percentage` argument.
---
--- ---
---
---@param widget Gtk.Widget # valid widget pointer.
---@param percentage number # value between 0 and 100.
---@return nil
function Gtk.test_slider_set_perc(widget, percentage) end

--- # function Gtk.test_spin_button_click()
---
--- This function will generate a `button` click in the upwards or downwards
--- spin button arrow areas, usually leading to an increase or decrease of
--- spin button’s value.
---
--- ---
---
---@param spinner Gtk.SpinButton # valid GtkSpinButton widget.
---@param button integer # Number of the pointer button for the event, usually 1, 2 or 3.
---@param upwards (boolean|nil) # `true` for upwards arrow click, `false` for downwards arrow click.
---@return (boolean|nil) # whether all actions neccessary for the button click simulation were carried out successfully.
function Gtk.test_spin_button_click(spinner, button, upwards) end

--- # function Gtk.test_text_get()
---
--- Retrive the text string of `widget` if it is a GtkLabel,
--- GtkEditable (entry and text widgets) or GtkTextView.
---
--- ---
---
---@param widget Gtk.Widget # valid widget pointer.
---@return string # new 0-terminated C string, needs to be released with `g_free()`.
function Gtk.test_text_get(widget) end

--- # function Gtk.test_text_set()
---
--- Set the text string of `widget` to `string` if it is a GtkLabel,
--- GtkEditable (entry and text widgets) or GtkTextView.
---
--- ---
---
---@param widget Gtk.Widget # valid widget pointer.
---@param string string # a 0-terminated C string
---@return nil
function Gtk.test_text_set(widget, string) end

--- # function Gtk.test_widget_click()
---
--- This function will generate a `button` click (button press and button
--- release event) in the middle of the first GdkWindow found that belongs
--- to `widget`.
--- For windowless widgets like `GtkButton` (which returns `false` from
--- `gtk_widget_get_has_window()`), this will often be an
--- input-only event window. For other widgets, this is usually widget->window.
--- Certain caveats should be considered when using this function, in
--- particular because the mouse pointer is warped to the button click
--- location, see `gdk_test_simulate_button()` for details.
---
--- ---
---
---@param widget Gtk.Widget # Widget to generate a button click on.
---@param button integer # Number of the pointer button for the event, usually 1, 2 or 3.
---@param modifiers Gdk.ModifierType # Keyboard modifiers the event is setup with.
---@return (boolean|nil) # whether all actions neccessary for the button click simulation were carried out successfully.
function Gtk.test_widget_click(widget, button, modifiers) end

--- # function Gtk.test_widget_send_key()
---
--- This function will generate keyboard press and release events in
--- the middle of the first GdkWindow found that belongs to `widget`.
--- For windowless widgets like `GtkButton` (which returns `false` from
--- `gtk_widget_get_has_window()`), this will often be an
--- input-only event window. For other widgets, this is usually widget->window.
--- Certain caveats should be considered when using this function, in
--- particular because the mouse pointer is warped to the key press
--- location, see `gdk_test_simulate_key()` for details.
---
--- ---
---
---@param widget Gtk.Widget # Widget to generate a key press and release on.
---@param keyval integer # A Gdk keyboard value.
---@param modifiers Gdk.ModifierType # Keyboard modifiers the event is setup with.
---@return (boolean|nil) # whether all actions neccessary for the key event simulation were carried out successfully.
function Gtk.test_widget_send_key(widget, keyval, modifiers) end

--- # function Gtk.test_widget_wait_for_draw()
---
--- Enters the main loop and waits for `widget` to be “drawn”. In this
--- context that means it waits for the frame clock of `widget` to have
--- run a full styling, layout and drawing cycle.
--- 
--- This function is intended to be used for syncing with actions that
--- depend on `widget` relayouting or on interaction with the display
--- server.
---
--- ---
---
---@param widget Gtk.Widget # the widget to wait for
---@return nil
function Gtk.test_widget_wait_for_draw(widget) end

--- # function Gtk.tree_get_row_drag_data()
---
--- Obtains a `tree_model` and `path` from selection data of target type
--- %GTK_TREE_MODEL_ROW. Normally called from a drag_data_received handler.
--- This function can only be used if `selection_data` originates from the same
--- process that’s calling this function, because a pointer to the tree model
--- is being passed around. If you aren’t in the same process, then you'll
--- get memory corruption. In the `GtkTreeDragDest` drag_data_received handler,
--- you can assume that selection data of type %GTK_TREE_MODEL_ROW is
--- in from the current process. The returned path must be freed with
--- `gtk_tree_path_free()`.
---
--- ---
---
---@param selection_data Gtk.SelectionData # a `GtkSelectionData`
---@param tree_model? Gtk.TreeModel # a `GtkTreeModel`
---@param path? Gtk.TreePath # row in `tree_model`
---@return (boolean|nil) # `true` if `selection_data` had target type %GTK_TREE_MODEL_ROW and is otherwise valid
function Gtk.tree_get_row_drag_data(selection_data, tree_model, path) end

--- # function Gtk.tree_row_reference_deleted()
---
--- Lets a set of row reference created by
--- `gtk_tree_row_reference_new_proxy()` know that the
--- model emitted the `GtkTreeModel`::row-deleted signal.
---
--- ---
---
---@param proxy GObject.Object # a `GObject`
---@param path Gtk.TreePath # the path position that was deleted
---@return nil
function Gtk.tree_row_reference_deleted(proxy, path) end

--- # function Gtk.tree_row_reference_inserted()
---
--- Lets a set of row reference created by
--- `gtk_tree_row_reference_new_proxy()` know that the
--- model emitted the `GtkTreeModel`::row-inserted signal.
---
--- ---
---
---@param proxy GObject.Object # a `GObject`
---@param path Gtk.TreePath # the row position that was inserted
---@return nil
function Gtk.tree_row_reference_inserted(proxy, path) end

--- # function Gtk.tree_set_row_drag_data()
---
--- Sets selection data of target type %GTK_TREE_MODEL_ROW. Normally used
--- in a drag_data_get handler.
---
--- ---
---
---@param selection_data Gtk.SelectionData # some `GtkSelectionData`
---@param tree_model Gtk.TreeModel # a `GtkTreeModel`
---@param path Gtk.TreePath # a row in `tree_model`
---@return (boolean|nil) # `true` if the `GtkSelectionData` had the proper target type to allow us to set a tree row
function Gtk.tree_set_row_drag_data(selection_data, tree_model, path) end

--- # function Gtk.true()
---
--- All this function does it to return `true`.
--- 
--- This can be useful for example if you want to inhibit the deletion
--- of a window. Of course you should not do this as the user expects
--- a reaction from clicking the close icon of the window...
--- 
--- ## A persistent window
--- 
--- ```c
--- `include` <gtk/gtk.h>
--- 
--- int
--- main (int argc, char **argv)
--- {
---   GtkWidget *win, *but;
---   const char *text = "Close yourself. I mean it!";
--- 
---   gtk_init (&argc, &argv);
--- 
---   win = gtk_window_new (GTK_WINDOW_TOPLEVEL);
---   g_signal_connect (win,
---                     "delete-event",
---                     G_CALLBACK (gtk_true),
---                     NULL);
---   g_signal_connect (win, "destroy",
---                     G_CALLBACK (gtk_main_quit),
---                     NULL);
--- 
---   but = gtk_button_new_with_label (text);
---   g_signal_connect_swapped (but, "clicked",
---                             G_CALLBACK (gtk_object_destroy),
---                             win);
---   gtk_container_add (GTK_CONTAINER (win), but);
--- 
---   gtk_widget_show_all (win);
--- 
---   gtk_main ();
--- 
---   return 0;
--- }
--- ```
---
--- ---
---
---@return (boolean|nil) # `true`
function Gtk.true__() end

return Gtk

