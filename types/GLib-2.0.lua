---@meta GLib

---@class GLib
local GLib = {}

---@alias GLib.DateDay integer

---@alias GLib.DateYear integer

---@alias GLib.MainContextPusher nil

---@alias GLib.MutexLocker nil

---@alias GLib.Pid integer

---@alias GLib.Quark integer

---@alias GLib.RWLockReaderLocker nil

---@alias GLib.RWLockWriterLocker nil

---@alias GLib.RecMutexLocker nil

---@alias GLib.RefString integer

---@alias GLib.Strv string

---@alias GLib.Time integer

---@alias GLib.TimeSpan integer

---@alias GLib.Type integer

--- # record GLib.Array
---
--- Contains the public fields of a GArray.
---
--- ---
---
---@class GLib.Array
---@field data string # a pointer to the element data. The data may be moved as elements are added to the `GArray`.
---@field len integer # the number of elements in the `GArray` not including the possible terminating zero element.
GLib.Array = {}

---@enum GLib.AsciiType
GLib.AsciiType = {}

--- # record GLib.AsyncQueue
---
--- An opaque data structure which represents an asynchronous queue.
--- 
--- It should only be accessed through the `g_async_queue_*` functions.
---
--- ---
---
---@class GLib.AsyncQueue
GLib.AsyncQueue = {}

--- # method GLib.AsyncQueue:length()
---
--- Returns the length of the queue.
--- 
--- Actually this function returns the number of data items in
--- the queue minus the number of waiting threads, so a negative
--- value means waiting threads, and a positive value means available
--- entries in the `queue`. A return value of 0 could mean n entries
--- in the queue and n threads waiting. This can happen due to locking
--- of the queue or due to scheduling.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`.
---@return integer # the length of the `queue`
function GLib.AsyncQueue:length() end

--- # method GLib.AsyncQueue:length_unlocked()
---
--- Returns the length of the queue.
--- 
--- Actually this function returns the number of data items in
--- the queue minus the number of waiting threads, so a negative
--- value means waiting threads, and a positive value means available
--- entries in the `queue`. A return value of 0 could mean n entries
--- in the queue and n threads waiting. This can happen due to locking
--- of the queue or due to scheduling.
--- 
--- This function must be called while holding the `queue`'s lock.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@return integer # the length of the `queue`.
function GLib.AsyncQueue:length_unlocked() end

--- # method GLib.AsyncQueue:lock()
---
--- Acquires the `queue`'s lock. If another thread is already
--- holding the lock, this call will block until the lock
--- becomes available.
--- 
--- Call `g_async_queue_unlock()` to drop the lock again.
--- 
--- While holding the lock, you can only call the
--- g_async_queue_*`_unlocked()` functions on `queue`. Otherwise,
--- deadlock may occur.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@return nil
function GLib.AsyncQueue:lock() end

--- # method GLib.AsyncQueue:pop()
---
--- Pops data from the `queue`. If `queue` is empty, this function
--- blocks until data becomes available.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@return userdata # data from the queue
function GLib.AsyncQueue:pop() end

--- # method GLib.AsyncQueue:pop_unlocked()
---
--- Pops data from the `queue`. If `queue` is empty, this function
--- blocks until data becomes available.
--- 
--- This function must be called while holding the `queue`'s lock.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@return userdata # data from the queue.
function GLib.AsyncQueue:pop_unlocked() end

--- # method GLib.AsyncQueue:push()
---
--- Pushes the `data` into the `queue`.
--- 
--- The `data` parameter must not be `nil`.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@param data userdata # data to push onto the `queue`
---@return nil
function GLib.AsyncQueue:push(data) end

--- # method GLib.AsyncQueue:push_front()
---
--- Pushes the `item` into the `queue`. `item` must not be `nil`.
--- In contrast to `g_async_queue_push()`, this function
--- pushes the new item ahead of the items already in the queue,
--- so that it will be the next one to be popped off the queue.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@param item userdata # data to push into the `queue`
---@return nil
function GLib.AsyncQueue:push_front(item) end

--- # method GLib.AsyncQueue:push_front_unlocked()
---
--- Pushes the `item` into the `queue`. `item` must not be `nil`.
--- In contrast to `g_async_queue_push_unlocked()`, this function
--- pushes the new item ahead of the items already in the queue,
--- so that it will be the next one to be popped off the queue.
--- 
--- This function must be called while holding the `queue`'s lock.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@param item userdata # data to push into the `queue`
---@return nil
function GLib.AsyncQueue:push_front_unlocked(item) end

--- # method GLib.AsyncQueue:push_unlocked()
---
--- Pushes the `data` into the `queue`.
--- 
--- The `data` parameter must not be `nil`.
--- 
--- This function must be called while holding the `queue`'s lock.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@param data userdata # data to push onto the `queue`
---@return nil
function GLib.AsyncQueue:push_unlocked(data) end

--- # method GLib.AsyncQueue:ref_unlocked()
---
--- Increases the reference count of the asynchronous `queue` by 1.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@return nil
function GLib.AsyncQueue:ref_unlocked() end

--- # method GLib.AsyncQueue:remove()
---
--- Remove an item from the queue.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@param item userdata # the data to remove from the `queue`
---@return (boolean|nil) # `true` if the item was removed
function GLib.AsyncQueue:remove(item) end

--- # method GLib.AsyncQueue:remove_unlocked()
---
--- Remove an item from the queue.
--- 
--- This function must be called while holding the `queue`'s lock.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@param item? userdata # the data to remove from the `queue`
---@return (boolean|nil) # `true` if the item was removed
function GLib.AsyncQueue:remove_unlocked(item) end

--- # method GLib.AsyncQueue:timed_pop()
---
--- Pops data from the `queue`. If the queue is empty, blocks until
--- `end_time` or until data becomes available.
--- 
--- If no data is received before `end_time`, `nil` is returned.
--- 
--- To easily calculate `end_time`, a combination of `g_get_real_time()`
--- and `g_time_val_add()` can be used.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@param end_time GLib.TimeVal # a `GTimeVal`, determining the final time
---@return userdata # data from the queue or `nil`, when no data is received before `end_time`.
function GLib.AsyncQueue:timed_pop(end_time) end

--- # method GLib.AsyncQueue:timed_pop_unlocked()
---
--- Pops data from the `queue`. If the queue is empty, blocks until
--- `end_time` or until data becomes available.
--- 
--- If no data is received before `end_time`, `nil` is returned.
--- 
--- To easily calculate `end_time`, a combination of `g_get_real_time()`
--- and `g_time_val_add()` can be used.
--- 
--- This function must be called while holding the `queue`'s lock.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@param end_time GLib.TimeVal # a `GTimeVal`, determining the final time
---@return userdata # data from the queue or `nil`, when no data is received before `end_time`.
function GLib.AsyncQueue:timed_pop_unlocked(end_time) end

--- # method GLib.AsyncQueue:timeout_pop()
---
--- Pops data from the `queue`. If the queue is empty, blocks for
--- `timeout` microseconds, or until data becomes available.
--- 
--- If no data is received before the timeout, `nil` is returned.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@param timeout integer # the number of microseconds to wait
---@return userdata # data from the queue or `nil`, when no data is received before the timeout.
function GLib.AsyncQueue:timeout_pop(timeout) end

--- # method GLib.AsyncQueue:timeout_pop_unlocked()
---
--- Pops data from the `queue`. If the queue is empty, blocks for
--- `timeout` microseconds, or until data becomes available.
--- 
--- If no data is received before the timeout, `nil` is returned.
--- 
--- This function must be called while holding the `queue`'s lock.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@param timeout integer # the number of microseconds to wait
---@return userdata # data from the queue or `nil`, when no data is received before the timeout.
function GLib.AsyncQueue:timeout_pop_unlocked(timeout) end

--- # method GLib.AsyncQueue:try_pop()
---
--- Tries to pop data from the `queue`. If no data is available,
--- `nil` is returned.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@return userdata # data from the queue or `nil`, when no data is available immediately.
function GLib.AsyncQueue:try_pop() end

--- # method GLib.AsyncQueue:try_pop_unlocked()
---
--- Tries to pop data from the `queue`. If no data is available,
--- `nil` is returned.
--- 
--- This function must be called while holding the `queue`'s lock.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@return userdata # data from the queue or `nil`, when no data is available immediately.
function GLib.AsyncQueue:try_pop_unlocked() end

--- # method GLib.AsyncQueue:unlock()
---
--- Releases the queue's lock.
--- 
--- Calling this function when you have not acquired
--- the with `g_async_queue_lock()` leads to undefined
--- behaviour.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@return nil
function GLib.AsyncQueue:unlock() end

--- # method GLib.AsyncQueue:unref()
---
--- Decreases the reference count of the asynchronous `queue` by 1.
--- 
--- If the reference count went to 0, the `queue` will be destroyed
--- and the memory allocated will be freed. So you are not allowed
--- to use the `queue` afterwards, as it might have disappeared.
--- You do not need to hold the lock to call this function.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`.
---@return nil
function GLib.AsyncQueue:unref() end

--- # method GLib.AsyncQueue:unref_and_unlock()
---
--- Decreases the reference count of the asynchronous `queue` by 1
--- and releases the lock. This function must be called while holding
--- the `queue`'s lock. If the reference count went to 0, the `queue`
--- will be destroyed and the memory allocated will be freed.
---
--- ---
---
---@param self GLib.AsyncQueue # a `GAsyncQueue`
---@return nil
function GLib.AsyncQueue:unref_and_unlock() end

--- # record GLib.BookmarkFile
---
--- An opaque data structure representing a set of bookmarks.
---
--- ---
---
---@class GLib.BookmarkFile
---@operator call: GLib.BookmarkFile
GLib.BookmarkFile = {}

--- # method GLib.BookmarkFile:add_application()
---
--- Adds the application with `name` and `exec` to the list of
--- applications that have registered a bookmark for `uri` into
--- `bookmark`.
--- 
--- Every bookmark inside a `GBookmarkFile` must have at least an
--- application registered.  Each application must provide a name, a
--- command line useful for launching the bookmark, the number of times
--- the bookmark has been registered by the application and the last
--- time the application registered this bookmark.
--- 
--- If `name` is `nil`, the name of the application will be the
--- same returned by `g_get_application_name()`; if `exec` is `nil`, the
--- command line will be a composition of the program name as
--- returned by `g_get_prgname()` and the "\%u" modifier, which will be
--- expanded to the bookmark's URI.
--- 
--- This function will automatically take care of updating the
--- registrations count and timestamping in case an application
--- with the same `name` had already registered a bookmark for
--- `uri` inside `bookmark`.
--- 
--- If no bookmark for `uri` is found, one is created.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param name? string # the name of the application registering the bookmark or `nil`
---@param exec? string # command line to be used to launch the bookmark or `nil`
---@return nil
function GLib.BookmarkFile:add_application(uri, name, exec) end

--- # method GLib.BookmarkFile:add_group()
---
--- Adds `group` to the list of groups to which the bookmark for `uri`
--- belongs to.
--- 
--- If no bookmark for `uri` is found then it is created.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param group string # the group name to be added
---@return nil
function GLib.BookmarkFile:add_group(uri, group) end

--- # method GLib.BookmarkFile:copy()
---
--- Deeply copies a `bookmark` `GBookmarkFile` object to a new one.
---
--- ---
---
---@param self GLib.BookmarkFile # A `GBookmarkFile`
---@return GLib.BookmarkFile # the copy of `bookmark`. Use `g_bookmark_free()` when finished using it.
function GLib.BookmarkFile:copy() end

--- # method GLib.BookmarkFile:free()
---
--- Frees a `GBookmarkFile`.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@return nil
function GLib.BookmarkFile:free() end

--- # method GLib.BookmarkFile:get_added()
---
--- Gets the time the bookmark for `uri` was added to `bookmark`
--- 
--- In the event the URI cannot be found, -1 is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@return integer # a timestamp
function GLib.BookmarkFile:get_added(uri) end

--- # method GLib.BookmarkFile:get_added_date_time()
---
--- Gets the time the bookmark for `uri` was added to `bookmark`
--- 
--- In the event the URI cannot be found, `nil` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@return GLib.DateTime # a `GDateTime`
function GLib.BookmarkFile:get_added_date_time(uri) end

--- # method GLib.BookmarkFile:get_app_info()
---
--- Gets the registration information of `app_name` for the bookmark for
--- `uri`.  See `g_bookmark_file_set_application_info()` for more information about
--- the returned data.
--- 
--- The string returned in `app_exec` must be freed.
--- 
--- In the event the URI cannot be found, `false` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.  In the
--- event that no application with name `app_name` has registered a bookmark
--- for `uri`,  `false` is returned and error is set to
--- %G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED. In the event that unquoting
--- the command line fails, an error of the %G_SHELL_ERROR domain is
--- set and `false` is returned.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param name string # an application's name
---@param exec? string # return location for the command line of the application, or `nil`
---@param count? integer # return location for the registration count, or `nil`
---@param stamp? integer # return location for the last registration time, or `nil`
---@return (boolean|nil) # `true` on success.
function GLib.BookmarkFile:get_app_info(uri, name, exec, count, stamp) end

--- # method GLib.BookmarkFile:get_application_info()
---
--- Gets the registration information of `app_name` for the bookmark for
--- `uri`.  See `g_bookmark_file_set_application_info()` for more information about
--- the returned data.
--- 
--- The string returned in `app_exec` must be freed.
--- 
--- In the event the URI cannot be found, `false` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.  In the
--- event that no application with name `app_name` has registered a bookmark
--- for `uri`,  `false` is returned and error is set to
--- %G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED. In the event that unquoting
--- the command line fails, an error of the %G_SHELL_ERROR domain is
--- set and `false` is returned.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param name string # an application's name
---@param exec? string # return location for the command line of the application, or `nil`
---@param count? integer # return location for the registration count, or `nil`
---@param stamp? GLib.DateTime # return location for the last registration time, or `nil`
---@return (boolean|nil) # `true` on success.
function GLib.BookmarkFile:get_application_info(uri, name, exec, count, stamp) end

--- # method GLib.BookmarkFile:get_applications()
---
--- Retrieves the names of the applications that have registered the
--- bookmark for `uri`.
--- 
--- In the event the URI cannot be found, `nil` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param length? integer # return location of the length of the returned list, or `nil`
---@return unknown[] # a newly allocated `nil`-terminated array of strings. Use `g_strfreev()` to free it.
function GLib.BookmarkFile:get_applications(uri, length) end

--- # method GLib.BookmarkFile:get_description()
---
--- Retrieves the description of the bookmark for `uri`.
--- 
--- In the event the URI cannot be found, `nil` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@return string # a newly allocated string or `nil` if the specified URI cannot be found.
function GLib.BookmarkFile:get_description(uri) end

--- # method GLib.BookmarkFile:get_groups()
---
--- Retrieves the list of group names of the bookmark for `uri`.
--- 
--- In the event the URI cannot be found, `nil` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
--- 
--- The returned array is `nil` terminated, so `length` may optionally
--- be `nil`.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param length? integer # return location for the length of the returned string, or `nil`
---@return unknown[] # a newly allocated `nil`-terminated array of group names. Use `g_strfreev()` to free it.
function GLib.BookmarkFile:get_groups(uri, length) end

--- # method GLib.BookmarkFile:get_icon()
---
--- Gets the icon of the bookmark for `uri`.
--- 
--- In the event the URI cannot be found, `false` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param href? string # return location for the icon's location or `nil`
---@param mime_type? string # return location for the icon's MIME type or `nil`
---@return (boolean|nil) # `true` if the icon for the bookmark for the URI was found. You should free the returned strings.
function GLib.BookmarkFile:get_icon(uri, href, mime_type) end

--- # method GLib.BookmarkFile:get_is_private()
---
--- Gets whether the private flag of the bookmark for `uri` is set.
--- 
--- In the event the URI cannot be found, `false` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.  In the
--- event that the private flag cannot be found, `false` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_INVALID_VALUE.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@return (boolean|nil) # `true` if the private flag is set, `false` otherwise.
function GLib.BookmarkFile:get_is_private(uri) end

--- # method GLib.BookmarkFile:get_mime_type()
---
--- Retrieves the MIME type of the resource pointed by `uri`.
--- 
--- In the event the URI cannot be found, `nil` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.  In the
--- event that the MIME type cannot be found, `nil` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_INVALID_VALUE.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@return string # a newly allocated string or `nil` if the specified URI cannot be found.
function GLib.BookmarkFile:get_mime_type(uri) end

--- # method GLib.BookmarkFile:get_modified()
---
--- Gets the time when the bookmark for `uri` was last modified.
--- 
--- In the event the URI cannot be found, -1 is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@return integer # a timestamp
function GLib.BookmarkFile:get_modified(uri) end

--- # method GLib.BookmarkFile:get_modified_date_time()
---
--- Gets the time when the bookmark for `uri` was last modified.
--- 
--- In the event the URI cannot be found, `nil` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@return GLib.DateTime # a `GDateTime`
function GLib.BookmarkFile:get_modified_date_time(uri) end

--- # method GLib.BookmarkFile:get_size()
---
--- Gets the number of bookmarks inside `bookmark`.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@return integer # the number of bookmarks
function GLib.BookmarkFile:get_size() end

--- # method GLib.BookmarkFile:get_title()
---
--- Returns the title of the bookmark for `uri`.
--- 
--- If `uri` is `nil`, the title of `bookmark` is returned.
--- 
--- In the event the URI cannot be found, `nil` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri? string # a valid URI or `nil`
---@return string # a newly allocated string or `nil` if the specified URI cannot be found.
function GLib.BookmarkFile:get_title(uri) end

--- # method GLib.BookmarkFile:get_uris()
---
--- Returns all URIs of the bookmarks in the bookmark file `bookmark`.
--- The array of returned URIs will be `nil`-terminated, so `length` may
--- optionally be `nil`.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param length? integer # return location for the number of returned URIs, or `nil`
---@return unknown[] # a newly allocated `nil`-terminated array of strings. Use `g_strfreev()` to free it.
function GLib.BookmarkFile:get_uris(length) end

--- # method GLib.BookmarkFile:get_visited()
---
--- Gets the time the bookmark for `uri` was last visited.
--- 
--- In the event the URI cannot be found, -1 is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@return integer # a timestamp.
function GLib.BookmarkFile:get_visited(uri) end

--- # method GLib.BookmarkFile:get_visited_date_time()
---
--- Gets the time the bookmark for `uri` was last visited.
--- 
--- In the event the URI cannot be found, `nil` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@return GLib.DateTime # a `GDateTime`
function GLib.BookmarkFile:get_visited_date_time(uri) end

--- # method GLib.BookmarkFile:has_application()
---
--- Checks whether the bookmark for `uri` inside `bookmark` has been
--- registered by application `name`.
--- 
--- In the event the URI cannot be found, `false` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param name string # the name of the application
---@return (boolean|nil) # `true` if the application `name` was found
function GLib.BookmarkFile:has_application(uri, name) end

--- # method GLib.BookmarkFile:has_group()
---
--- Checks whether `group` appears in the list of groups to which
--- the bookmark for `uri` belongs to.
--- 
--- In the event the URI cannot be found, `false` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param group string # the group name to be searched
---@return (boolean|nil) # `true` if `group` was found.
function GLib.BookmarkFile:has_group(uri, group) end

--- # method GLib.BookmarkFile:has_item()
---
--- Looks whether the desktop bookmark has an item with its URI set to `uri`.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@return (boolean|nil) # `true` if `uri` is inside `bookmark`, `false` otherwise
function GLib.BookmarkFile:has_item(uri) end

--- # method GLib.BookmarkFile:load_from_data()
---
--- Loads a bookmark file from memory into an empty `GBookmarkFile`
--- structure.  If the object cannot be created then `error` is set to a
--- `GBookmarkFileError`.
---
--- ---
---
---@param self GLib.BookmarkFile # an empty `GBookmarkFile` struct
---@param data unknown[] # desktop bookmarks loaded in memory
---@param length integer # the length of `data` in bytes
---@return (boolean|nil) # `true` if a desktop bookmark could be loaded.
function GLib.BookmarkFile:load_from_data(data, length) end

--- # method GLib.BookmarkFile:load_from_data_dirs()
---
--- This function looks for a desktop bookmark file named `file` in the
--- paths returned from `g_get_user_data_dir()` and `g_get_system_data_dirs()`,
--- loads the file into `bookmark` and returns the file's full path in
--- `full_path`.  If the file could not be loaded then `error` is
--- set to either a `GFileError` or `GBookmarkFileError`.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param file string # a relative path to a filename to open and parse
---@param full_path? string # return location for a string containing the full path of the file, or `nil`
---@return (boolean|nil) # `true` if a key file could be loaded, `false` otherwise
function GLib.BookmarkFile:load_from_data_dirs(file, full_path) end

--- # method GLib.BookmarkFile:load_from_file()
---
--- Loads a desktop bookmark file into an empty `GBookmarkFile` structure.
--- If the file could not be loaded then `error` is set to either a `GFileError`
--- or `GBookmarkFileError`.
---
--- ---
---
---@param self GLib.BookmarkFile # an empty `GBookmarkFile` struct
---@param filename string # the path of a filename to load, in the GLib file name encoding
---@return (boolean|nil) # `true` if a desktop bookmark file could be loaded
function GLib.BookmarkFile:load_from_file(filename) end

--- # method GLib.BookmarkFile:move_item()
---
--- Changes the URI of a bookmark item from `old_uri` to `new_uri`.  Any
--- existing bookmark for `new_uri` will be overwritten.  If `new_uri` is
--- `nil`, then the bookmark is removed.
--- 
--- In the event the URI cannot be found, `false` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param old_uri string # a valid URI
---@param new_uri? string # a valid URI, or `nil`
---@return (boolean|nil) # `true` if the URI was successfully changed
function GLib.BookmarkFile:move_item(old_uri, new_uri) end

--- # method GLib.BookmarkFile:remove_application()
---
--- Removes application registered with `name` from the list of applications
--- that have registered a bookmark for `uri` inside `bookmark`.
--- 
--- In the event the URI cannot be found, `false` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
--- In the event that no application with name `app_name` has registered
--- a bookmark for `uri`,  `false` is returned and error is set to
--- %G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param name string # the name of the application
---@return (boolean|nil) # `true` if the application was successfully removed.
function GLib.BookmarkFile:remove_application(uri, name) end

--- # method GLib.BookmarkFile:remove_group()
---
--- Removes `group` from the list of groups to which the bookmark
--- for `uri` belongs to.
--- 
--- In the event the URI cannot be found, `false` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
--- In the event no group was defined, `false` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_INVALID_VALUE.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param group string # the group name to be removed
---@return (boolean|nil) # `true` if `group` was successfully removed.
function GLib.BookmarkFile:remove_group(uri, group) end

--- # method GLib.BookmarkFile:remove_item()
---
--- Removes the bookmark for `uri` from the bookmark file `bookmark`.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@return (boolean|nil) # `true` if the bookmark was removed successfully.
function GLib.BookmarkFile:remove_item(uri) end

--- # method GLib.BookmarkFile:set_added()
---
--- Sets the time the bookmark for `uri` was added into `bookmark`.
--- 
--- If no bookmark for `uri` is found then it is created.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param added integer # a timestamp or -1 to use the current time
---@return nil
function GLib.BookmarkFile:set_added(uri, added) end

--- # method GLib.BookmarkFile:set_added_date_time()
---
--- Sets the time the bookmark for `uri` was added into `bookmark`.
--- 
--- If no bookmark for `uri` is found then it is created.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param added GLib.DateTime # a `GDateTime`
---@return nil
function GLib.BookmarkFile:set_added_date_time(uri, added) end

--- # method GLib.BookmarkFile:set_app_info()
---
--- Sets the meta-data of application `name` inside the list of
--- applications that have registered a bookmark for `uri` inside
--- `bookmark`.
--- 
--- You should rarely use this function; use `g_bookmark_file_add_application()`
--- and `g_bookmark_file_remove_application()` instead.
--- 
--- `name` can be any UTF-8 encoded string used to identify an
--- application.
--- `exec` can have one of these two modifiers: "\%f", which will
--- be expanded as the local file name retrieved from the bookmark's
--- URI; "\%u", which will be expanded as the bookmark's URI.
--- The expansion is done automatically when retrieving the stored
--- command line using the `g_bookmark_file_get_application_info()` function.
--- `count` is the number of times the application has registered the
--- bookmark; if is < 0, the current registration count will be increased
--- by one, if is 0, the application with `name` will be removed from
--- the list of registered applications.
--- `stamp` is the Unix time of the last registration; if it is -1, the
--- current time will be used.
--- 
--- If you try to remove an application by setting its registration count to
--- zero, and no bookmark for `uri` is found, `false` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND; similarly,
--- in the event that no application `name` has registered a bookmark
--- for `uri`,  `false` is returned and error is set to
--- %G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED.  Otherwise, if no bookmark
--- for `uri` is found, one is created.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param name string # an application's name
---@param exec string # an application's command line
---@param count integer # the number of registrations done for this application
---@param stamp integer # the time of the last registration for this application
---@return (boolean|nil) # `true` if the application's meta-data was successfully changed.
function GLib.BookmarkFile:set_app_info(uri, name, exec, count, stamp) end

--- # method GLib.BookmarkFile:set_application_info()
---
--- Sets the meta-data of application `name` inside the list of
--- applications that have registered a bookmark for `uri` inside
--- `bookmark`.
--- 
--- You should rarely use this function; use `g_bookmark_file_add_application()`
--- and `g_bookmark_file_remove_application()` instead.
--- 
--- `name` can be any UTF-8 encoded string used to identify an
--- application.
--- `exec` can have one of these two modifiers: "\%f", which will
--- be expanded as the local file name retrieved from the bookmark's
--- URI; "\%u", which will be expanded as the bookmark's URI.
--- The expansion is done automatically when retrieving the stored
--- command line using the `g_bookmark_file_get_application_info()` function.
--- `count` is the number of times the application has registered the
--- bookmark; if is < 0, the current registration count will be increased
--- by one, if is 0, the application with `name` will be removed from
--- the list of registered applications.
--- `stamp` is the Unix time of the last registration.
--- 
--- If you try to remove an application by setting its registration count to
--- zero, and no bookmark for `uri` is found, `false` is returned and
--- `error` is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND; similarly,
--- in the event that no application `name` has registered a bookmark
--- for `uri`,  `false` is returned and error is set to
--- %G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED.  Otherwise, if no bookmark
--- for `uri` is found, one is created.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param name string # an application's name
---@param exec string # an application's command line
---@param count integer # the number of registrations done for this application
---@param stamp? GLib.DateTime # the time of the last registration for this application, which may be `nil` if `count` is 0
---@return (boolean|nil) # `true` if the application's meta-data was successfully changed.
function GLib.BookmarkFile:set_application_info(uri, name, exec, count, stamp) end

--- # method GLib.BookmarkFile:set_description()
---
--- Sets `description` as the description of the bookmark for `uri`.
--- 
--- If `uri` is `nil`, the description of `bookmark` is set.
--- 
--- If a bookmark for `uri` cannot be found then it is created.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri? string # a valid URI or `nil`
---@param description string # a string
---@return nil
function GLib.BookmarkFile:set_description(uri, description) end

--- # method GLib.BookmarkFile:set_groups()
---
--- Sets a list of group names for the item with URI `uri`.  Each previously
--- set group name list is removed.
--- 
--- If `uri` cannot be found then an item for it is created.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # an item's URI
---@param groups? unknown[] # an array of group names, or `nil` to remove all groups
---@param length integer # number of group name values in `groups`
---@return nil
function GLib.BookmarkFile:set_groups(uri, groups, length) end

--- # method GLib.BookmarkFile:set_icon()
---
--- Sets the icon for the bookmark for `uri`. If `href` is `nil`, unsets
--- the currently set icon. `href` can either be a full URL for the icon
--- file or the icon name following the Icon Naming specification.
--- 
--- If no bookmark for `uri` is found one is created.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param href? string # the URI of the icon for the bookmark, or `nil`
---@param mime_type string # the MIME type of the icon for the bookmark
---@return nil
function GLib.BookmarkFile:set_icon(uri, href, mime_type) end

--- # method GLib.BookmarkFile:set_is_private()
---
--- Sets the private flag of the bookmark for `uri`.
--- 
--- If a bookmark for `uri` cannot be found then it is created.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param is_private (boolean|nil) # `true` if the bookmark should be marked as private
---@return nil
function GLib.BookmarkFile:set_is_private(uri, is_private) end

--- # method GLib.BookmarkFile:set_mime_type()
---
--- Sets `mime_type` as the MIME type of the bookmark for `uri`.
--- 
--- If a bookmark for `uri` cannot be found then it is created.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param mime_type string # a MIME type
---@return nil
function GLib.BookmarkFile:set_mime_type(uri, mime_type) end

--- # method GLib.BookmarkFile:set_modified()
---
--- Sets the last time the bookmark for `uri` was last modified.
--- 
--- If no bookmark for `uri` is found then it is created.
--- 
--- The "modified" time should only be set when the bookmark's meta-data
--- was actually changed.  Every function of `GBookmarkFile` that
--- modifies a bookmark also changes the modification time, except for
--- `g_bookmark_file_set_visited_date_time()`.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param modified integer # a timestamp or -1 to use the current time
---@return nil
function GLib.BookmarkFile:set_modified(uri, modified) end

--- # method GLib.BookmarkFile:set_modified_date_time()
---
--- Sets the last time the bookmark for `uri` was last modified.
--- 
--- If no bookmark for `uri` is found then it is created.
--- 
--- The "modified" time should only be set when the bookmark's meta-data
--- was actually changed.  Every function of `GBookmarkFile` that
--- modifies a bookmark also changes the modification time, except for
--- `g_bookmark_file_set_visited_date_time()`.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param modified GLib.DateTime # a `GDateTime`
---@return nil
function GLib.BookmarkFile:set_modified_date_time(uri, modified) end

--- # method GLib.BookmarkFile:set_title()
---
--- Sets `title` as the title of the bookmark for `uri` inside the
--- bookmark file `bookmark`.
--- 
--- If `uri` is `nil`, the title of `bookmark` is set.
--- 
--- If a bookmark for `uri` cannot be found then it is created.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri? string # a valid URI or `nil`
---@param title string # a UTF-8 encoded string
---@return nil
function GLib.BookmarkFile:set_title(uri, title) end

--- # method GLib.BookmarkFile:set_visited()
---
--- Sets the time the bookmark for `uri` was last visited.
--- 
--- If no bookmark for `uri` is found then it is created.
--- 
--- The "visited" time should only be set if the bookmark was launched,
--- either using the command line retrieved by `g_bookmark_file_get_application_info()`
--- or by the default application for the bookmark's MIME type, retrieved
--- using `g_bookmark_file_get_mime_type()`.  Changing the "visited" time
--- does not affect the "modified" time.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param visited integer # a timestamp or -1 to use the current time
---@return nil
function GLib.BookmarkFile:set_visited(uri, visited) end

--- # method GLib.BookmarkFile:set_visited_date_time()
---
--- Sets the time the bookmark for `uri` was last visited.
--- 
--- If no bookmark for `uri` is found then it is created.
--- 
--- The "visited" time should only be set if the bookmark was launched,
--- either using the command line retrieved by `g_bookmark_file_get_application_info()`
--- or by the default application for the bookmark's MIME type, retrieved
--- using `g_bookmark_file_get_mime_type()`.  Changing the "visited" time
--- does not affect the "modified" time.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param uri string # a valid URI
---@param visited GLib.DateTime # a `GDateTime`
---@return nil
function GLib.BookmarkFile:set_visited_date_time(uri, visited) end

--- # method GLib.BookmarkFile:to_data()
---
--- This function outputs `bookmark` as a string.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param length? integer # return location for the length of the returned string, or `nil`
---@return unknown[] # a newly allocated string holding the contents of the `GBookmarkFile`
function GLib.BookmarkFile:to_data(length) end

--- # method GLib.BookmarkFile:to_file()
---
--- This function outputs `bookmark` into a file.  The write process is
--- guaranteed to be atomic by using `g_file_set_contents()` internally.
---
--- ---
---
---@param self GLib.BookmarkFile # a `GBookmarkFile`
---@param filename string # path of the output file
---@return (boolean|nil) # `true` if the file was successfully written.
function GLib.BookmarkFile:to_file(filename) end

--- # function GLib.BookmarkFile.error_quark()
---
---@return GLib.Quark
function GLib.BookmarkFile.error_quark() end

--- # function GLib.BookmarkFile.new()
---
--- Creates a new empty `GBookmarkFile` object.
--- 
--- Use `g_bookmark_file_load_from_file()`, `g_bookmark_file_load_from_data()`
--- or `g_bookmark_file_load_from_data_dirs()` to read an existing bookmark
--- file.
---
--- ---
---
---@return GLib.BookmarkFile # an empty `GBookmarkFile`
function GLib.BookmarkFile.new() end

---@enum GLib.BookmarkFileError
GLib.BookmarkFileError = {}

--- # record GLib.ByteArray
---
--- Contains the public fields of a GByteArray.
---
--- ---
---
---@class GLib.ByteArray
---@field data integer # a pointer to the element data. The data may be moved as elements are added to the `GByteArray`
---@field len integer # the number of elements in the `GByteArray`
---@operator call: GLib.ByteArray
GLib.ByteArray = {}

--- # function GLib.ByteArray.free()
---
--- Frees the memory allocated by the `GByteArray`. If `free_segment` is
--- `true` it frees the actual byte data. If the reference count of
--- `array` is greater than one, the `GByteArray` wrapper is preserved but
--- the size of `array` will be set to zero.
---
--- ---
---
---@param array unknown[] # a `GByteArray`
---@param free_segment (boolean|nil) # if `true` the actual byte data is freed as well
---@return integer # the element data if `free_segment` is `false`, otherwise `nil`. The element data should be freed using `g_free()`.
function GLib.ByteArray.free(array, free_segment) end

--- # function GLib.ByteArray.free_to_bytes()
---
--- Transfers the data from the `GByteArray` into a new immutable `GBytes`.
--- 
--- The `GByteArray` is freed unless the reference count of `array` is greater
--- than one, the `GByteArray` wrapper is preserved but the size of `array`
--- will be set to zero.
--- 
--- This is identical to using `g_bytes_new_take()` and `g_byte_array_free()`
--- together.
---
--- ---
---
---@param array unknown[] # a `GByteArray`
---@return GLib.Bytes # a new immutable `GBytes` representing same byte data that was in the array
function GLib.ByteArray.free_to_bytes(array) end

--- # function GLib.ByteArray.new()
---
--- Creates a new `GByteArray` with a reference count of 1.
---
--- ---
---
---@return unknown[] # the new `GByteArray`
function GLib.ByteArray.new() end

--- # function GLib.ByteArray.new_take()
---
--- Create byte array containing the data. The data will be owned by the array
--- and will be freed with `g_free()`, i.e. it could be allocated using `g_strdup()`.
--- 
--- Do not use it if `len` is greater than %G_MAXUINT. `GByteArray`
--- stores the length of its data in `guint`, which may be shorter than
--- `gsize`.
---
--- ---
---
---@param data unknown[] # byte data for the array
---@param len integer # length of `data`
---@return unknown[] # a new `GByteArray`
function GLib.ByteArray.new_take(data, len) end

--- # function GLib.ByteArray.steal()
---
--- Frees the data in the array and resets the size to zero, while
--- the underlying array is preserved for use elsewhere and returned
--- to the caller.
---
--- ---
---
---@param array unknown[] # a `GByteArray`.
---@param len? integer # pointer to retrieve the number of elements of the original array
---@return integer # the element data, which should be freed using `g_free()`.
function GLib.ByteArray.steal(array, len) end

--- # function GLib.ByteArray.unref()
---
--- Atomically decrements the reference count of `array` by one. If the
--- reference count drops to 0, all memory allocated by the array is
--- released. This function is thread-safe and may be called from any
--- thread.
---
--- ---
---
---@param array unknown[] # A `GByteArray`
---@return nil
function GLib.ByteArray.unref(array) end

--- # record GLib.Bytes
---
--- A simple refcounted data type representing an immutable sequence of zero or
--- more bytes from an unspecified origin.
--- 
--- The purpose of a `GBytes` is to keep the memory region that it holds
--- alive for as long as anyone holds a reference to the bytes.  When
--- the last reference count is dropped, the memory is released. Multiple
--- unrelated callers can use byte data in the `GBytes` without coordinating
--- their activities, resting assured that the byte data will not change or
--- move while they hold a reference.
--- 
--- A `GBytes` can come from many different origins that may have
--- different procedures for freeing the memory region.  Examples are
--- memory from `g_malloc()`, from memory slices, from a `GMappedFile` or
--- memory from other allocators.
--- 
--- `GBytes` work well as keys in `GHashTable`. Use `g_bytes_equal()` and
--- `g_bytes_hash()` as parameters to `g_hash_table_new()` or `g_hash_table_new_full()`.
--- `GBytes` can also be used as keys in a `GTree` by passing the `g_bytes_compare()`
--- function to `g_tree_new()`.
--- 
--- The data pointed to by this bytes must not be modified. For a mutable
--- array of bytes see `GByteArray`. Use `g_bytes_unref_to_array()` to create a
--- mutable array for a `GBytes` sequence. To create an immutable `GBytes` from
--- a mutable `GByteArray`, use the `g_byte_array_free_to_bytes()` function.
---
--- ---
---
---@class GLib.Bytes
---@operator call: GLib.Bytes
GLib.Bytes = {}

--- # method GLib.Bytes:compare()
---
--- Compares the two `GBytes` values.
--- 
--- This function can be used to sort GBytes instances in lexicographical order.
--- 
--- If `bytes1` and `bytes2` have different length but the shorter one is a
--- prefix of the longer one then the shorter one is considered to be less than
--- the longer one. Otherwise the first byte where both differ is used for
--- comparison. If `bytes1` has a smaller value at that position it is
--- considered less, otherwise greater than `bytes2`.
---
--- ---
---
---@param self GLib.Bytes # a pointer to a `GBytes`
---@param bytes2 GLib.Bytes # a pointer to a `GBytes` to compare with `bytes1`
---@return integer # a negative value if `bytes1` is less than `bytes2`, a positive value if `bytes1` is greater than `bytes2`, and zero if `bytes1` is equal to `bytes2`
function GLib.Bytes:compare(bytes2) end

--- # method GLib.Bytes:equal()
---
--- Compares the two `GBytes` values being pointed to and returns
--- `true` if they are equal.
--- 
--- This function can be passed to `g_hash_table_new()` as the `key_equal_func`
--- parameter, when using non-`nil` `GBytes` pointers as keys in a `GHashTable`.
---
--- ---
---
---@param self GLib.Bytes # a pointer to a `GBytes`
---@param bytes2 GLib.Bytes # a pointer to a `GBytes` to compare with `bytes1`
---@return (boolean|nil) # `true` if the two keys match.
function GLib.Bytes:equal(bytes2) end

--- # method GLib.Bytes:get_data()
---
--- Get the byte data in the `GBytes`. This data should not be modified.
--- 
--- This function will always return the same pointer for a given `GBytes`.
--- 
--- `nil` may be returned if `size` is 0. This is not guaranteed, as the `GBytes`
--- may represent an empty string with `data` non-`nil` and `size` as 0. `nil` will
--- not be returned if `size` is non-zero.
---
--- ---
---
---@param self GLib.Bytes # a `GBytes`
---@param size? integer # location to return size of byte data
---@return unknown[] # a pointer to the byte data, or `nil`
function GLib.Bytes:get_data(size) end

--- # method GLib.Bytes:get_region()
---
--- Gets a pointer to a region in `bytes`.
--- 
--- The region starts at `offset` many bytes from the start of the data
--- and contains `n_elements` many elements of `element_size` size.
--- 
--- `n_elements` may be zero, but `element_size` must always be non-zero.
--- Ideally, `element_size` is a static constant (eg: sizeof a struct).
--- 
--- This function does careful bounds checking (including checking for
--- arithmetic overflows) and returns a non-`nil` pointer if the
--- specified region lies entirely within the `bytes`. If the region is
--- in some way out of range, or if an overflow has occurred, then `nil`
--- is returned.
--- 
--- Note: it is possible to have a valid zero-size region. In this case,
--- the returned pointer will be equal to the base pointer of the data of
--- `bytes`, plus `offset`.  This will be non-`nil` except for the case
--- where `bytes` itself was a zero-sized region.  Since it is unlikely
--- that you will be using this function to check for a zero-sized region
--- in a zero-sized `bytes`, `nil` effectively always means "error".
---
--- ---
---
---@param self GLib.Bytes # a `GBytes`
---@param element_size integer # a non-zero element size
---@param offset integer # an offset to the start of the region within the `bytes`
---@param n_elements integer # the number of elements in the region
---@return userdata # the requested region, or `nil` in case of an error
function GLib.Bytes:get_region(element_size, offset, n_elements) end

--- # method GLib.Bytes:get_size()
---
--- Get the size of the byte data in the `GBytes`.
--- 
--- This function will always return the same value for a given `GBytes`.
---
--- ---
---
---@param self GLib.Bytes # a `GBytes`
---@return integer # the size
function GLib.Bytes:get_size() end

--- # method GLib.Bytes:hash()
---
--- Creates an integer hash code for the byte data in the `GBytes`.
--- 
--- This function can be passed to `g_hash_table_new()` as the `key_hash_func`
--- parameter, when using non-`nil` `GBytes` pointers as keys in a `GHashTable`.
---
--- ---
---
---@param self GLib.Bytes # a pointer to a `GBytes` key
---@return integer # a hash value corresponding to the key.
function GLib.Bytes:hash() end

--- # method GLib.Bytes:new_from_bytes()
---
--- Creates a `GBytes` which is a subsection of another `GBytes`. The `offset` +
--- `length` may not be longer than the size of `bytes`.
--- 
--- A reference to `bytes` will be held by the newly created `GBytes` until
--- the byte data is no longer needed.
--- 
--- Since 2.56, if `offset` is 0 and `length` matches the size of `bytes`, then
--- `bytes` will be returned with the reference count incremented by 1. If `bytes`
--- is a slice of another `GBytes`, then the resulting `GBytes` will reference
--- the same `GBytes` instead of `bytes`. This allows consumers to simplify the
--- usage of `GBytes` when asynchronously writing to streams.
---
--- ---
---
---@param self GLib.Bytes # a `GBytes`
---@param offset integer # offset which subsection starts at
---@param length integer # length of subsection
---@return GLib.Bytes # a new `GBytes`
function GLib.Bytes:new_from_bytes(offset, length) end

--- # method GLib.Bytes:ref()
---
--- Increase the reference count on `bytes`.
---
--- ---
---
---@param self GLib.Bytes # a `GBytes`
---@return GLib.Bytes # the `GBytes`
function GLib.Bytes:ref() end

--- # method GLib.Bytes:unref()
---
--- Releases a reference on `bytes`.  This may result in the bytes being
--- freed. If `bytes` is `nil`, it will return immediately.
---
--- ---
---
---@param self? GLib.Bytes # a `GBytes`
---@return nil
function GLib.Bytes:unref() end

--- # method GLib.Bytes:unref_to_array()
---
--- Unreferences the bytes, and returns a new mutable `GByteArray` containing
--- the same byte data.
--- 
--- As an optimization, the byte data is transferred to the array without copying
--- if this was the last reference to bytes and bytes was created with
--- `g_bytes_new()`, `g_bytes_new_take()` or `g_byte_array_free_to_bytes()`. In all
--- other cases the data is copied.
--- 
--- Do not use it if `bytes` contains more than %G_MAXUINT
--- bytes. `GByteArray` stores the length of its data in `guint`, which
--- may be shorter than `gsize`, that `bytes` is using.
---
--- ---
---
---@param self GLib.Bytes # a `GBytes`
---@return unknown[] # a new mutable `GByteArray` containing the same byte data
function GLib.Bytes:unref_to_array() end

--- # method GLib.Bytes:unref_to_data()
---
--- Unreferences the bytes, and returns a pointer the same byte data
--- contents.
--- 
--- As an optimization, the byte data is returned without copying if this was
--- the last reference to bytes and bytes was created with `g_bytes_new()`,
--- `g_bytes_new_take()` or `g_byte_array_free_to_bytes()`. In all other cases the
--- data is copied.
---
--- ---
---
---@param self GLib.Bytes # a `GBytes`
---@param size integer # location to place the length of the returned data
---@return unknown[] # a pointer to the same byte data, which should be freed with `g_free()`
function GLib.Bytes:unref_to_data(size) end

--- # function GLib.Bytes.new()
---
--- Creates a new `GBytes` from `data`.
--- 
--- `data` is copied. If `size` is 0, `data` may be `nil`.
---
--- ---
---
---@param data? unknown[] # the data to be used for the bytes
---@param size integer # the size of `data`
---@return GLib.Bytes # a new `GBytes`
function GLib.Bytes.new(data, size) end

--- # function GLib.Bytes.new_take()
---
--- Creates a new `GBytes` from `data`.
--- 
--- After this call, `data` belongs to the bytes and may no longer be
--- modified by the caller.  `g_free()` will be called on `data` when the
--- bytes is no longer in use. Because of this `data` must have been created by
--- a call to `g_malloc()`, g_malloc0() or `g_realloc()` or by one of the many
--- functions that wrap these calls (such as `g_new()`, `g_strdup()`, etc).
--- 
--- For creating `GBytes` with memory from other allocators, see
--- `g_bytes_new_with_free_func()`.
--- 
--- `data` may be `nil` if `size` is 0.
---
--- ---
---
---@param data? unknown[] # the data to be used for the bytes
---@param size integer # the size of `data`
---@return GLib.Bytes # a new `GBytes`
function GLib.Bytes.new_take(data, size) end

--- # record GLib.Checksum
---
--- An opaque structure representing a checksumming operation.
--- 
--- To create a new GChecksum, use `g_checksum_new()`. To free
--- a GChecksum, use `g_checksum_free()`.
---
--- ---
---
---@class GLib.Checksum
---@operator call: GLib.Checksum
GLib.Checksum = {}

--- # method GLib.Checksum:copy()
---
--- Copies a `GChecksum`. If `checksum` has been closed, by calling
--- `g_checksum_get_string()` or `g_checksum_get_digest()`, the copied
--- checksum will be closed as well.
---
--- ---
---
---@param self GLib.Checksum # the `GChecksum` to copy
---@return GLib.Checksum # the copy of the passed `GChecksum`. Use `g_checksum_free()` when finished using it.
function GLib.Checksum:copy() end

--- # method GLib.Checksum:free()
---
--- Frees the memory allocated for `checksum`.
---
--- ---
---
---@param self GLib.Checksum # a `GChecksum`
---@return nil
function GLib.Checksum:free() end

--- # method GLib.Checksum:get_string()
---
--- Gets the digest as a hexadecimal string.
--- 
--- Once this function has been called the `GChecksum` can no longer be
--- updated with `g_checksum_update()`.
--- 
--- The hexadecimal characters will be lower case.
---
--- ---
---
---@param self GLib.Checksum # a `GChecksum`
---@return string # the hexadecimal representation of the checksum. The returned string is owned by the checksum and should not be modified or freed.
function GLib.Checksum:get_string() end

--- # method GLib.Checksum:reset()
---
--- Resets the state of the `checksum` back to its initial state.
---
--- ---
---
---@param self GLib.Checksum # the `GChecksum` to reset
---@return nil
function GLib.Checksum:reset() end

--- # method GLib.Checksum:update()
---
--- Feeds `data` into an existing `GChecksum`. The checksum must still be
--- open, that is `g_checksum_get_string()` or `g_checksum_get_digest()` must
--- not have been called on `checksum`.
---
--- ---
---
---@param self GLib.Checksum # a `GChecksum`
---@param data unknown[] # buffer used to compute the checksum
---@param length integer # size of the buffer, or -1 if it is a null-terminated string.
---@return nil
function GLib.Checksum:update(data, length) end

--- # function GLib.Checksum.type_get_length()
---
--- Gets the length in bytes of digests of type `checksum_type`
---
--- ---
---
---@param checksum_type GLib.ChecksumType # a `GChecksumType`
---@return integer # the checksum length, or -1 if `checksum_type` is not supported.
function GLib.Checksum.type_get_length(checksum_type) end

--- # function GLib.Checksum.new()
---
--- Creates a new `GChecksum`, using the checksum algorithm `checksum_type`.
--- If the `checksum_type` is not known, `nil` is returned.
--- A `GChecksum` can be used to compute the checksum, or digest, of an
--- arbitrary binary blob, using different hashing algorithms.
--- 
--- A `GChecksum` works by feeding a binary blob through `g_checksum_update()`
--- until there is data to be checked; the digest can then be extracted
--- using `g_checksum_get_string()`, which will return the checksum as a
--- hexadecimal string; or `g_checksum_get_digest()`, which will return a
--- vector of raw bytes. Once either `g_checksum_get_string()` or
--- `g_checksum_get_digest()` have been called on a `GChecksum`, the checksum
--- will be closed and it won't be possible to call `g_checksum_update()`
--- on it anymore.
---
--- ---
---
---@param checksum_type GLib.ChecksumType # the desired type of checksum
---@return GLib.Checksum # the newly created `GChecksum`, or `nil`. Use `g_checksum_free()` to free the memory allocated by it.
function GLib.Checksum.new(checksum_type) end

---@enum GLib.ChecksumType
GLib.ChecksumType = {}

---@alias GLib.ChildWatchFunc fun(pid: GLib.Pid, wait_status: integer, user_data: userdata): nil

---@alias GLib.ClearHandleFunc fun(handle_id: integer): nil

---@alias GLib.CompareDataFunc fun(a: userdata, b: userdata, user_data: userdata): integer

---@alias GLib.CompareFunc fun(a: userdata, b: userdata): integer

--- # record GLib.Cond
---
--- The `GCond` struct is an opaque data structure that represents a
--- condition. Threads can block on a `GCond` if they find a certain
--- condition to be false. If other threads change the state of this
--- condition they signal the `GCond`, and that causes the waiting
--- threads to be woken up.
--- 
--- Consider the following example of a shared variable.  One or more
--- threads can wait for data to be published to the variable and when
--- another thread publishes the data, it can signal one of the waiting
--- threads to wake up to collect the data.
--- 
--- Here is an example for using GCond to block a thread until a condition
--- is satisfied:
--- ```c
---   gpointer current_data = NULL;
---   GMutex data_mutex;
---   GCond data_cond;
--- 
---   void
---   push_data (gpointer data)
---   {
---     g_mutex_lock (&data_mutex);
---     current_data = data;
---     g_cond_signal (&data_cond);
---     g_mutex_unlock (&data_mutex);
---   }
--- 
---   gpointer
---   pop_data (void)
---   {
---     gpointer data;
--- 
---     g_mutex_lock (&data_mutex);
---     while (!current_data)
---       g_cond_wait (&data_cond, &data_mutex);
---     data = current_data;
---     current_data = NULL;
---     g_mutex_unlock (&data_mutex);
--- 
---     return data;
---   }
--- ```
--- Whenever a thread calls `pop_data()` now, it will wait until
--- current_data is non-`nil`, i.e. until some other thread
--- has called `push_data()`.
--- 
--- The example shows that use of a condition variable must always be
--- paired with a mutex.  Without the use of a mutex, there would be a
--- race between the check of `current_data` by the while loop in
--- `pop_data()` and waiting. Specifically, another thread could set
--- `current_data` after the check, and signal the cond (with nobody
--- waiting on it) before the first thread goes to sleep. `GCond` is
--- specifically useful for its ability to release the mutex and go
--- to sleep atomically.
--- 
--- It is also important to use the `g_cond_wait()` and `g_cond_wait_until()`
--- functions only inside a loop which checks for the condition to be
--- true.  See `g_cond_wait()` for an explanation of why the condition may
--- not be true even after it returns.
--- 
--- If a `GCond` is allocated in static storage then it can be used
--- without initialisation.  Otherwise, you should call `g_cond_init()`
--- on it and `g_cond_clear()` when done.
--- 
--- A `GCond` should only be accessed via the g_cond_ functions.
---
--- ---
---
---@class GLib.Cond
---@field p userdata
---@field i unknown[]
GLib.Cond = {}

--- # method GLib.Cond:broadcast()
---
--- If threads are waiting for `cond`, all of them are unblocked.
--- If no threads are waiting for `cond`, this function has no effect.
--- It is good practice to lock the same mutex as the waiting threads
--- while calling this function, though not required.
---
--- ---
---
---@param self GLib.Cond # a `GCond`
---@return nil
function GLib.Cond:broadcast() end

--- # method GLib.Cond:clear()
---
--- Frees the resources allocated to a `GCond` with `g_cond_init()`.
--- 
--- This function should not be used with a `GCond` that has been
--- statically allocated.
--- 
--- Calling `g_cond_clear()` for a `GCond` on which threads are
--- blocking leads to undefined behaviour.
---
--- ---
---
---@param self GLib.Cond # an initialised `GCond`
---@return nil
function GLib.Cond:clear() end

--- # method GLib.Cond:init()
---
--- Initialises a `GCond` so that it can be used.
--- 
--- This function is useful to initialise a `GCond` that has been
--- allocated as part of a larger structure.  It is not necessary to
--- initialise a `GCond` that has been statically allocated.
--- 
--- To undo the effect of `g_cond_init()` when a `GCond` is no longer
--- needed, use `g_cond_clear()`.
--- 
--- Calling `g_cond_init()` on an already-initialised `GCond` leads
--- to undefined behaviour.
---
--- ---
---
---@param self GLib.Cond # an uninitialized `GCond`
---@return nil
function GLib.Cond:init() end

--- # method GLib.Cond:signal()
---
--- If threads are waiting for `cond`, at least one of them is unblocked.
--- If no threads are waiting for `cond`, this function has no effect.
--- It is good practice to hold the same lock as the waiting thread
--- while calling this function, though not required.
---
--- ---
---
---@param self GLib.Cond # a `GCond`
---@return nil
function GLib.Cond:signal() end

--- # method GLib.Cond:wait()
---
--- Atomically releases `mutex` and waits until `cond` is signalled.
--- When this function returns, `mutex` is locked again and owned by the
--- calling thread.
--- 
--- When using condition variables, it is possible that a spurious wakeup
--- may occur (ie: `g_cond_wait()` returns even though `g_cond_signal()` was
--- not called).  It's also possible that a stolen wakeup may occur.
--- This is when `g_cond_signal()` is called, but another thread acquires
--- `mutex` before this thread and modifies the state of the program in
--- such a way that when `g_cond_wait()` is able to return, the expected
--- condition is no longer met.
--- 
--- For this reason, `g_cond_wait()` must always be used in a loop.  See
--- the documentation for `GCond` for a complete example.
---
--- ---
---
---@param self GLib.Cond # a `GCond`
---@param mutex GLib.Mutex # a `GMutex` that is currently locked
---@return nil
function GLib.Cond:wait(mutex) end

--- # method GLib.Cond:wait_until()
---
--- Waits until either `cond` is signalled or `end_time` has passed.
--- 
--- As with `g_cond_wait()` it is possible that a spurious or stolen wakeup
--- could occur.  For that reason, waiting on a condition variable should
--- always be in a loop, based on an explicitly-checked predicate.
--- 
--- `true` is returned if the condition variable was signalled (or in the
--- case of a spurious wakeup).  `false` is returned if `end_time` has
--- passed.
--- 
--- The following code shows how to correctly perform a timed wait on a
--- condition variable (extending the example presented in the
--- documentation for `GCond`):
--- 
--- ```c
--- gpointer
--- pop_data_timed (void)
--- {
---   gint64 end_time;
---   gpointer data;
--- 
---   g_mutex_lock (&data_mutex);
--- 
---   end_time = g_get_monotonic_time () + 5 * G_TIME_SPAN_SECOND;
---   while (!current_data)
---     if (!g_cond_wait_until (&data_cond, &data_mutex, end_time))
---       {
---         // timeout has passed.
---         g_mutex_unlock (&data_mutex);
---         return NULL;
---       }
--- 
---   // there is data for us
---   data = current_data;
---   current_data = NULL;
--- 
---   g_mutex_unlock (&data_mutex);
--- 
---   return data;
--- }
--- ```
--- 
--- Notice that the end time is calculated once, before entering the
--- loop and reused.  This is the motivation behind the use of absolute
--- time on this API -- if a relative time of 5 seconds were passed
--- directly to the call and a spurious wakeup occurred, the program would
--- have to start over waiting again (which would lead to a total wait
--- time of more than 5 seconds).
---
--- ---
---
---@param self GLib.Cond # a `GCond`
---@param mutex GLib.Mutex # a `GMutex` that is currently locked
---@param end_time integer # the monotonic time to wait until
---@return (boolean|nil) # `true` on a signal, `false` on a timeout
function GLib.Cond:wait_until(mutex, end_time) end

---@enum GLib.ConvertError
GLib.ConvertError = {}

---@alias GLib.CopyFunc fun(src: userdata, data: userdata): userdata

--- # record GLib.Data
---
--- An opaque data structure that represents a keyed data list.
--- 
--- See also: [Keyed data lists][glib-Keyed-Data-Lists].
---
--- ---
---
---@class GLib.Data
GLib.Data = {}

---@alias GLib.DataForeachFunc fun(key_id: GLib.Quark, data: userdata, user_data: userdata): nil

--- # record GLib.Date
---
--- Represents a day between January 1, Year 1 and a few thousand years in
--- the future. None of its members should be accessed directly.
--- 
--- If the `GDate` is obtained from `g_date_new()`, it will be safe
--- to mutate but invalid and thus not safe for calendrical computations.
--- 
--- If it's declared on the stack, it will contain garbage so must be
--- initialized with `g_date_clear()`. `g_date_clear()` makes the date invalid
--- but safe. An invalid date doesn't represent a day, it's "empty." A date
--- becomes valid after you set it to a Julian day or you set a day, month,
--- and year.
---
--- ---
---
---@class GLib.Date
---@field julian_days integer # the Julian representation of the date
---@field julian integer # this bit is set if `julian_days` is valid
---@field dmy integer # this is set if `day`, `month` and `year` are valid
---@field day integer # the day of the day-month-year representation of the date, as a number between 1 and 31
---@field month integer # the day of the day-month-year representation of the date, as a number between 1 and 12
---@field year integer # the day of the day-month-year representation of the date
---@operator call: GLib.Date
GLib.Date = {}

--- # method GLib.Date:add_days()
---
--- Increments a date some number of days.
--- To move forward by weeks, add weeks*7 days.
--- The date must be valid.
---
--- ---
---
---@param self GLib.Date # a `GDate` to increment
---@param n_days integer # number of days to move the date forward
---@return nil
function GLib.Date:add_days(n_days) end

--- # method GLib.Date:add_months()
---
--- Increments a date by some number of months.
--- If the day of the month is greater than 28,
--- this routine may change the day of the month
--- (because the destination month may not have
--- the current day in it). The date must be valid.
---
--- ---
---
---@param self GLib.Date # a `GDate` to increment
---@param n_months integer # number of months to move forward
---@return nil
function GLib.Date:add_months(n_months) end

--- # method GLib.Date:add_years()
---
--- Increments a date by some number of years.
--- If the date is February 29, and the destination
--- year is not a leap year, the date will be changed
--- to February 28. The date must be valid.
---
--- ---
---
---@param self GLib.Date # a `GDate` to increment
---@param n_years integer # number of years to move forward
---@return nil
function GLib.Date:add_years(n_years) end

--- # method GLib.Date:clamp()
---
--- If `date` is prior to `min_date`, sets `date` equal to `min_date`.
--- If `date` falls after `max_date`, sets `date` equal to `max_date`.
--- Otherwise, `date` is unchanged.
--- Either of `min_date` and `max_date` may be `nil`.
--- All non-`nil` dates must be valid.
---
--- ---
---
---@param self GLib.Date # a `GDate` to clamp
---@param min_date GLib.Date # minimum accepted value for `date`
---@param max_date GLib.Date # maximum accepted value for `date`
---@return nil
function GLib.Date:clamp(min_date, max_date) end

--- # method GLib.Date:clear()
---
--- Initializes one or more `GDate` structs to a safe but invalid
--- state. The cleared dates will not represent an existing date, but will
--- not contain garbage. Useful to init a date declared on the stack.
--- Validity can be tested with `g_date_valid()`.
---
--- ---
---
---@param self GLib.Date # pointer to one or more dates to clear
---@param n_dates integer # number of dates to clear
---@return nil
function GLib.Date:clear(n_dates) end

--- # method GLib.Date:compare()
---
--- `qsort()`-style comparison function for dates.
--- Both dates must be valid.
---
--- ---
---
---@param self GLib.Date # first date to compare
---@param rhs GLib.Date # second date to compare
---@return integer # 0 for equal, less than zero if `lhs` is less than `rhs`, greater than zero if `lhs` is greater than `rhs`
function GLib.Date:compare(rhs) end

--- # method GLib.Date:copy()
---
--- Copies a GDate to a newly-allocated GDate. If the input was invalid
--- (as determined by `g_date_valid()`), the invalid state will be copied
--- as is into the new object.
---
--- ---
---
---@param self GLib.Date # a `GDate` to copy
---@return GLib.Date # a newly-allocated `GDate` initialized from `date`
function GLib.Date:copy() end

--- # method GLib.Date:days_between()
---
--- Computes the number of days between two dates.
--- If `date2` is prior to `date1`, the returned value is negative.
--- Both dates must be valid.
---
--- ---
---
---@param self GLib.Date # the first date
---@param date2 GLib.Date # the second date
---@return integer # the number of days between `date1` and `date2`
function GLib.Date:days_between(date2) end

--- # method GLib.Date:free()
---
--- Frees a `GDate` returned from `g_date_new()`.
---
--- ---
---
---@param self GLib.Date # a `GDate` to free
---@return nil
function GLib.Date:free() end

--- # method GLib.Date:get_day()
---
--- Returns the day of the month. The date must be valid.
---
--- ---
---
---@param self GLib.Date # a `GDate` to extract the day of the month from
---@return GLib.DateDay # day of the month
function GLib.Date:get_day() end

--- # method GLib.Date:get_day_of_year()
---
--- Returns the day of the year, where Jan 1 is the first day of the
--- year. The date must be valid.
---
--- ---
---
---@param self GLib.Date # a `GDate` to extract day of year from
---@return integer # day of the year
function GLib.Date:get_day_of_year() end

--- # method GLib.Date:get_iso8601_week_of_year()
---
--- Returns the week of the year, where weeks are interpreted according
--- to ISO 8601.
---
--- ---
---
---@param self GLib.Date # a valid `GDate`
---@return integer # ISO 8601 week number of the year.
function GLib.Date:get_iso8601_week_of_year() end

--- # method GLib.Date:get_julian()
---
--- Returns the Julian day or "serial number" of the `GDate`. The
--- Julian day is simply the number of days since January 1, Year 1; i.e.,
--- January 1, Year 1 is Julian day 1; January 2, Year 1 is Julian day 2,
--- etc. The date must be valid.
---
--- ---
---
---@param self GLib.Date # a `GDate` to extract the Julian day from
---@return integer # Julian day
function GLib.Date:get_julian() end

--- # method GLib.Date:get_monday_week_of_year()
---
--- Returns the week of the year, where weeks are understood to start on
--- Monday. If the date is before the first Monday of the year, return 0.
--- The date must be valid.
---
--- ---
---
---@param self GLib.Date # a `GDate`
---@return integer # week of the year
function GLib.Date:get_monday_week_of_year() end

--- # method GLib.Date:get_month()
---
--- Returns the month of the year. The date must be valid.
---
--- ---
---
---@param self GLib.Date # a `GDate` to get the month from
---@return GLib.DateMonth # month of the year as a `GDateMonth`
function GLib.Date:get_month() end

--- # method GLib.Date:get_sunday_week_of_year()
---
--- Returns the week of the year during which this date falls, if
--- weeks are understood to begin on Sunday. The date must be valid.
--- Can return 0 if the day is before the first Sunday of the year.
---
--- ---
---
---@param self GLib.Date # a `GDate`
---@return integer # week number
function GLib.Date:get_sunday_week_of_year() end

--- # method GLib.Date:get_weekday()
---
--- Returns the day of the week for a `GDate`. The date must be valid.
---
--- ---
---
---@param self GLib.Date # a `GDate`
---@return GLib.DateWeekday # day of the week as a `GDateWeekday`.
function GLib.Date:get_weekday() end

--- # method GLib.Date:get_year()
---
--- Returns the year of a `GDate`. The date must be valid.
---
--- ---
---
---@param self GLib.Date # a `GDate`
---@return GLib.DateYear # year in which the date falls
function GLib.Date:get_year() end

--- # method GLib.Date:is_first_of_month()
---
--- Returns `true` if the date is on the first of a month.
--- The date must be valid.
---
--- ---
---
---@param self GLib.Date # a `GDate` to check
---@return (boolean|nil) # `true` if the date is the first of the month
function GLib.Date:is_first_of_month() end

--- # method GLib.Date:is_last_of_month()
---
--- Returns `true` if the date is the last day of the month.
--- The date must be valid.
---
--- ---
---
---@param self GLib.Date # a `GDate` to check
---@return (boolean|nil) # `true` if the date is the last day of the month
function GLib.Date:is_last_of_month() end

--- # method GLib.Date:order()
---
--- Checks if `date1` is less than or equal to `date2`,
--- and swap the values if this is not the case.
---
--- ---
---
---@param self GLib.Date # the first date
---@param date2 GLib.Date # the second date
---@return nil
function GLib.Date:order(date2) end

--- # method GLib.Date:set_day()
---
--- Sets the day of the month for a `GDate`. If the resulting
--- day-month-year triplet is invalid, the date will be invalid.
---
--- ---
---
---@param self GLib.Date # a `GDate`
---@param day GLib.DateDay # day to set
---@return nil
function GLib.Date:set_day(day) end

--- # method GLib.Date:set_dmy()
---
--- Sets the value of a `GDate` from a day, month, and year.
--- The day-month-year triplet must be valid; if you aren't
--- sure it is, call `g_date_valid_dmy()` to check before you
--- set it.
---
--- ---
---
---@param self GLib.Date # a `GDate`
---@param day GLib.DateDay # day
---@param month GLib.DateMonth # month
---@param y GLib.DateYear # year
---@return nil
function GLib.Date:set_dmy(day, month, y) end

--- # method GLib.Date:set_julian()
---
--- Sets the value of a `GDate` from a Julian day number.
---
--- ---
---
---@param self GLib.Date # a `GDate`
---@param julian_date integer # Julian day number (days since January 1, Year 1)
---@return nil
function GLib.Date:set_julian(julian_date) end

--- # method GLib.Date:set_month()
---
--- Sets the month of the year for a `GDate`.  If the resulting
--- day-month-year triplet is invalid, the date will be invalid.
---
--- ---
---
---@param self GLib.Date # a `GDate`
---@param month GLib.DateMonth # month to set
---@return nil
function GLib.Date:set_month(month) end

--- # method GLib.Date:set_parse()
---
--- Parses a user-inputted string `str`, and try to figure out what date it
--- represents, taking the [current locale][setlocale] into account. If the
--- string is successfully parsed, the date will be valid after the call.
--- Otherwise, it will be invalid. You should check using `g_date_valid()`
--- to see whether the parsing succeeded.
--- 
--- This function is not appropriate for file formats and the like; it
--- isn't very precise, and its exact behavior varies with the locale.
--- It's intended to be a heuristic routine that guesses what the user
--- means by a given string (and it does work pretty well in that
--- capacity).
---
--- ---
---
---@param self GLib.Date # a `GDate` to fill in
---@param str string # string to parse
---@return nil
function GLib.Date:set_parse(str) end

--- # method GLib.Date:set_time()
---
--- Sets the value of a date from a `GTime` value.
--- The time to date conversion is done using the user's current timezone.
---
--- ---
---
---@param self GLib.Date # a `GDate`.
---@param time_ GLib.Time # `GTime` value to set.
---@return nil
function GLib.Date:set_time(time_) end

--- # method GLib.Date:set_time_t()
---
--- Sets the value of a date to the date corresponding to a time
--- specified as a time_t. The time to date conversion is done using
--- the user's current timezone.
--- 
--- To set the value of a date to the current day, you could write:
--- ```c
---  time_t now = time (NULL);
---  if (now == (time_t) -1)
---    // handle the error
---  g_date_set_time_t (date, now);
--- ```
---
--- ---
---
---@param self GLib.Date # a `GDate`
---@param timet integer # time_t value to set
---@return nil
function GLib.Date:set_time_t(timet) end

--- # method GLib.Date:set_time_val()
---
--- Sets the value of a date from a `GTimeVal` value.  Note that the
--- `tv_usec` member is ignored, because `GDate` can't make use of the
--- additional precision.
--- 
--- The time to date conversion is done using the user's current timezone.
---
--- ---
---
---@param self GLib.Date # a `GDate`
---@param timeval GLib.TimeVal # `GTimeVal` value to set
---@return nil
function GLib.Date:set_time_val(timeval) end

--- # method GLib.Date:set_year()
---
--- Sets the year for a `GDate`. If the resulting day-month-year
--- triplet is invalid, the date will be invalid.
---
--- ---
---
---@param self GLib.Date # a `GDate`
---@param year GLib.DateYear # year to set
---@return nil
function GLib.Date:set_year(year) end

--- # method GLib.Date:subtract_days()
---
--- Moves a date some number of days into the past.
--- To move by weeks, just move by weeks*7 days.
--- The date must be valid.
---
--- ---
---
---@param self GLib.Date # a `GDate` to decrement
---@param n_days integer # number of days to move
---@return nil
function GLib.Date:subtract_days(n_days) end

--- # method GLib.Date:subtract_months()
---
--- Moves a date some number of months into the past.
--- If the current day of the month doesn't exist in
--- the destination month, the day of the month
--- may change. The date must be valid.
---
--- ---
---
---@param self GLib.Date # a `GDate` to decrement
---@param n_months integer # number of months to move
---@return nil
function GLib.Date:subtract_months(n_months) end

--- # method GLib.Date:subtract_years()
---
--- Moves a date some number of years into the past.
--- If the current day doesn't exist in the destination
--- year (i.e. it's February 29 and you move to a non-leap-year)
--- then the day is changed to February 29. The date
--- must be valid.
---
--- ---
---
---@param self GLib.Date # a `GDate` to decrement
---@param n_years integer # number of years to move
---@return nil
function GLib.Date:subtract_years(n_years) end

--- # method GLib.Date:to_struct_tm()
---
--- Fills in the date-related bits of a struct tm using the `date` value.
--- Initializes the non-date parts with something safe but meaningless.
---
--- ---
---
---@param self GLib.Date # a `GDate` to set the struct tm from
---@param tm userdata # struct tm to fill
---@return nil
function GLib.Date:to_struct_tm(tm) end

--- # method GLib.Date:valid()
---
--- Returns `true` if the `GDate` represents an existing day. The date must not
--- contain garbage; it should have been initialized with `g_date_clear()`
--- if it wasn't allocated by one of the `g_date_new()` variants.
---
--- ---
---
---@param self GLib.Date # a `GDate` to check
---@return (boolean|nil) # Whether the date is valid
function GLib.Date:valid() end

--- # function GLib.Date.get_days_in_month()
---
--- Returns the number of days in a month, taking leap
--- years into account.
---
--- ---
---
---@param month GLib.DateMonth # month
---@param year GLib.DateYear # year
---@return integer # number of days in `month` during the `year`
function GLib.Date.get_days_in_month(month, year) end

--- # function GLib.Date.get_monday_weeks_in_year()
---
--- Returns the number of weeks in the year, where weeks
--- are taken to start on Monday. Will be 52 or 53. The
--- date must be valid. (Years always have 52 7-day periods,
--- plus 1 or 2 extra days depending on whether it's a leap
--- year. This function is basically telling you how many
--- Mondays are in the year, i.e. there are 53 Mondays if
--- one of the extra days happens to be a Monday.)
---
--- ---
---
---@param year GLib.DateYear # a year
---@return integer # number of Mondays in the year
function GLib.Date.get_monday_weeks_in_year(year) end

--- # function GLib.Date.get_sunday_weeks_in_year()
---
--- Returns the number of weeks in the year, where weeks
--- are taken to start on Sunday. Will be 52 or 53. The
--- date must be valid. (Years always have 52 7-day periods,
--- plus 1 or 2 extra days depending on whether it's a leap
--- year. This function is basically telling you how many
--- Sundays are in the year, i.e. there are 53 Sundays if
--- one of the extra days happens to be a Sunday.)
---
--- ---
---
---@param year GLib.DateYear # year to count weeks in
---@return integer # the number of weeks in `year`
function GLib.Date.get_sunday_weeks_in_year(year) end

--- # function GLib.Date.is_leap_year()
---
--- Returns `true` if the year is a leap year.
--- 
--- For the purposes of this function, leap year is every year
--- divisible by 4 unless that year is divisible by 100. If it
--- is divisible by 100 it would be a leap year only if that year
--- is also divisible by 400.
---
--- ---
---
---@param year GLib.DateYear # year to check
---@return (boolean|nil) # `true` if the year is a leap year
function GLib.Date.is_leap_year(year) end

--- # function GLib.Date.strftime()
---
--- Generates a printed representation of the date, in a
--- [locale][setlocale]-specific way.
--- Works just like the platform's C library `strftime()` function,
--- but only accepts date-related formats; time-related formats
--- give undefined results. Date must be valid. Unlike `strftime()`
--- (which uses the locale encoding), works on a UTF-8 format
--- string and stores a UTF-8 result.
--- 
--- This function does not provide any conversion specifiers in
--- addition to those implemented by the platform's C library.
--- For example, don't expect that using `g_date_strftime()` would
--- make the \%F provided by the C99 `strftime()` work on Windows
--- where the C library only complies to C89.
---
--- ---
---
---@param s string # destination buffer
---@param slen integer # buffer size
---@param format string # format string
---@param date GLib.Date # valid `GDate`
---@return integer # number of characters written to the buffer, or 0 the buffer was too small
function GLib.Date.strftime(s, slen, format, date) end

--- # function GLib.Date.valid_day()
---
--- Returns `true` if the day of the month is valid (a day is valid if it's
--- between 1 and 31 inclusive).
---
--- ---
---
---@param day GLib.DateDay # day to check
---@return (boolean|nil) # `true` if the day is valid
function GLib.Date.valid_day(day) end

--- # function GLib.Date.valid_dmy()
---
--- Returns `true` if the day-month-year triplet forms a valid, existing day
--- in the range of days `GDate` understands (Year 1 or later, no more than
--- a few thousand years in the future).
---
--- ---
---
---@param day GLib.DateDay # day
---@param month GLib.DateMonth # month
---@param year GLib.DateYear # year
---@return (boolean|nil) # `true` if the date is a valid one
function GLib.Date.valid_dmy(day, month, year) end

--- # function GLib.Date.valid_julian()
---
--- Returns `true` if the Julian day is valid. Anything greater than zero
--- is basically a valid Julian, though there is a 32-bit limit.
---
--- ---
---
---@param julian_date integer # Julian day to check
---@return (boolean|nil) # `true` if the Julian day is valid
function GLib.Date.valid_julian(julian_date) end

--- # function GLib.Date.valid_month()
---
--- Returns `true` if the month value is valid. The 12 `GDateMonth`
--- enumeration values are the only valid months.
---
--- ---
---
---@param month GLib.DateMonth # month
---@return (boolean|nil) # `true` if the month is valid
function GLib.Date.valid_month(month) end

--- # function GLib.Date.valid_weekday()
---
--- Returns `true` if the weekday is valid. The seven `GDateWeekday` enumeration
--- values are the only valid weekdays.
---
--- ---
---
---@param weekday GLib.DateWeekday # weekday
---@return (boolean|nil) # `true` if the weekday is valid
function GLib.Date.valid_weekday(weekday) end

--- # function GLib.Date.valid_year()
---
--- Returns `true` if the year is valid. Any year greater than 0 is valid,
--- though there is a 16-bit limit to what `GDate` will understand.
---
--- ---
---
---@param year GLib.DateYear # year
---@return (boolean|nil) # `true` if the year is valid
function GLib.Date.valid_year(year) end

--- # function GLib.Date.new()
---
--- Allocates a `GDate` and initializes
--- it to a safe state. The new date will
--- be cleared (as if you'd called `g_date_clear()`) but invalid (it won't
--- represent an existing day). Free the return value with `g_date_free()`.
---
--- ---
---
---@return GLib.Date # a newly-allocated `GDate`
function GLib.Date.new() end

--- # function GLib.Date.new_dmy()
---
--- Create a new `GDate` representing the given day-month-year triplet.
--- 
--- The triplet you pass in must represent a valid date. Use `g_date_valid_dmy()`
--- if needed to validate it. The returned `GDate` is guaranteed to be non-`nil`
--- and valid.
---
--- ---
---
---@param day GLib.DateDay # day of the month
---@param month GLib.DateMonth # month of the year
---@param year GLib.DateYear # year
---@return GLib.Date # a newly-allocated `GDate` initialized with `day`, `month`, and `year`
function GLib.Date.new_dmy(day, month, year) end

--- # function GLib.Date.new_julian()
---
--- Create a new `GDate` representing the given Julian date.
--- 
--- The `julian_day` you pass in must be valid. Use `g_date_valid_julian()` if
--- needed to validate it. The returned `GDate` is guaranteed to be non-`nil` and
--- valid.
---
--- ---
---
---@param julian_day integer # days since January 1, Year 1
---@return GLib.Date # a newly-allocated `GDate` initialized with `julian_day`
function GLib.Date.new_julian(julian_day) end

---@enum GLib.DateDMY
GLib.DateDMY = {}

---@enum GLib.DateMonth
GLib.DateMonth = {}

--- # record GLib.DateTime
---
--- An opaque structure that represents a date and time, including a time zone.
---
--- ---
---
---@class GLib.DateTime
---@operator call: GLib.DateTime
GLib.DateTime = {}

--- # method GLib.DateTime:add()
---
--- Creates a copy of `datetime` and adds the specified timespan to the copy.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@param timespan GLib.TimeSpan # a `GTimeSpan`
---@return GLib.DateTime # the newly created `GDateTime` which should be freed with `g_date_time_unref()`, or `nil`
function GLib.DateTime:add(timespan) end

--- # method GLib.DateTime:add_days()
---
--- Creates a copy of `datetime` and adds the specified number of days to the
--- copy. Add negative values to subtract days.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@param days integer # the number of days
---@return GLib.DateTime # the newly created `GDateTime` which should be freed with `g_date_time_unref()`, or `nil`
function GLib.DateTime:add_days(days) end

--- # method GLib.DateTime:add_full()
---
--- Creates a new `GDateTime` adding the specified values to the current date and
--- time in `datetime`. Add negative values to subtract.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@param years integer # the number of years to add
---@param months integer # the number of months to add
---@param days integer # the number of days to add
---@param hours integer # the number of hours to add
---@param minutes integer # the number of minutes to add
---@param seconds number # the number of seconds to add
---@return GLib.DateTime # the newly created `GDateTime` which should be freed with `g_date_time_unref()`, or `nil`
function GLib.DateTime:add_full(years, months, days, hours, minutes, seconds) end

--- # method GLib.DateTime:add_hours()
---
--- Creates a copy of `datetime` and adds the specified number of hours.
--- Add negative values to subtract hours.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@param hours integer # the number of hours to add
---@return GLib.DateTime # the newly created `GDateTime` which should be freed with `g_date_time_unref()`, or `nil`
function GLib.DateTime:add_hours(hours) end

--- # method GLib.DateTime:add_minutes()
---
--- Creates a copy of `datetime` adding the specified number of minutes.
--- Add negative values to subtract minutes.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@param minutes integer # the number of minutes to add
---@return GLib.DateTime # the newly created `GDateTime` which should be freed with `g_date_time_unref()`, or `nil`
function GLib.DateTime:add_minutes(minutes) end

--- # method GLib.DateTime:add_months()
---
--- Creates a copy of `datetime` and adds the specified number of months to the
--- copy. Add negative values to subtract months.
--- 
--- The day of the month of the resulting `GDateTime` is clamped to the number
--- of days in the updated calendar month. For example, if adding 1 month to
--- 31st January 2018, the result would be 28th February 2018. In 2020 (a leap
--- year), the result would be 29th February.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@param months integer # the number of months
---@return GLib.DateTime # the newly created `GDateTime` which should be freed with `g_date_time_unref()`, or `nil`
function GLib.DateTime:add_months(months) end

--- # method GLib.DateTime:add_seconds()
---
--- Creates a copy of `datetime` and adds the specified number of seconds.
--- Add negative values to subtract seconds.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@param seconds number # the number of seconds to add
---@return GLib.DateTime # the newly created `GDateTime` which should be freed with `g_date_time_unref()`, or `nil`
function GLib.DateTime:add_seconds(seconds) end

--- # method GLib.DateTime:add_weeks()
---
--- Creates a copy of `datetime` and adds the specified number of weeks to the
--- copy. Add negative values to subtract weeks.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@param weeks integer # the number of weeks
---@return GLib.DateTime # the newly created `GDateTime` which should be freed with `g_date_time_unref()`, or `nil`
function GLib.DateTime:add_weeks(weeks) end

--- # method GLib.DateTime:add_years()
---
--- Creates a copy of `datetime` and adds the specified number of years to the
--- copy. Add negative values to subtract years.
--- 
--- As with `g_date_time_add_months()`, if the resulting date would be 29th
--- February on a non-leap year, the day will be clamped to 28th February.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@param years integer # the number of years
---@return GLib.DateTime # the newly created `GDateTime` which should be freed with `g_date_time_unref()`, or `nil`
function GLib.DateTime:add_years(years) end

--- # method GLib.DateTime:compare()
---
--- A comparison function for `GDateTimes` that is suitable
--- as a `GCompareFunc`. Both `GDateTimes` must be non-`nil`.
---
--- ---
---
---@param self GLib.DateTime # first `GDateTime` to compare
---@param dt2 GLib.DateTime # second `GDateTime` to compare
---@return integer # -1, 0 or 1 if `dt1` is less than, equal to or greater than `dt2`.
function GLib.DateTime:compare(dt2) end

--- # method GLib.DateTime:difference()
---
--- Calculates the difference in time between `end` and `begin`.  The
--- `GTimeSpan` that is returned is effectively `end` - `begin` (ie:
--- positive if the first parameter is larger).
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@param begin GLib.DateTime # a `GDateTime`
---@return GLib.TimeSpan # the difference between the two `GDateTime`, as a time span expressed in microseconds.
function GLib.DateTime:difference(begin) end

--- # method GLib.DateTime:equal()
---
--- Checks to see if `dt1` and `dt2` are equal.
--- 
--- Equal here means that they represent the same moment after converting
--- them to the same time zone.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@param dt2 GLib.DateTime # a `GDateTime`
---@return (boolean|nil) # `true` if `dt1` and `dt2` are equal
function GLib.DateTime:equal(dt2) end

--- # method GLib.DateTime:format()
---
--- Creates a newly allocated string representing the requested `format`.
--- 
--- The format strings understood by this function are a subset of the
--- `strftime()` format language as specified by C99.  The \%D, \%U and \%W
--- conversions are not supported, nor is the 'E' modifier.  The GNU
--- extensions \%k, \%l, \%s and \%P are supported, however, as are the
--- '0', '_' and '-' modifiers. The Python extension \%f is also supported.
--- 
--- In contrast to `strftime()`, this function always produces a UTF-8
--- string, regardless of the current locale.  Note that the rendering of
--- many formats is locale-dependent and may not match the `strftime()`
--- output exactly.
--- 
--- The following format specifiers are supported:
--- 
--- - \%a: the abbreviated weekday name according to the current locale
--- - \%A: the full weekday name according to the current locale
--- - \%b: the abbreviated month name according to the current locale
--- - \%B: the full month name according to the current locale
--- - \%c: the preferred date and time representation for the current locale
--- - \%C: the century number (year/100) as a 2-digit integer (00-99)
--- - \%d: the day of the month as a decimal number (range 01 to 31)
--- - \%e: the day of the month as a decimal number (range 1 to 31);
---   single digits are preceded by a figure space
--- - \%F: equivalent to `%Y-%m-%d` (the ISO 8601 date format)
--- - \%g: the last two digits of the ISO 8601 week-based year as a
---   decimal number (00-99). This works well with \%V and \%u.
--- - \%G: the ISO 8601 week-based year as a decimal number. This works
---   well with \%V and \%u.
--- - \%h: equivalent to \%b
--- - \%H: the hour as a decimal number using a 24-hour clock (range 00 to 23)
--- - \%I: the hour as a decimal number using a 12-hour clock (range 01 to 12)
--- - \%j: the day of the year as a decimal number (range 001 to 366)
--- - \%k: the hour (24-hour clock) as a decimal number (range 0 to 23);
---   single digits are preceded by a figure space
--- - \%l: the hour (12-hour clock) as a decimal number (range 1 to 12);
---   single digits are preceded by a figure space
--- - \%m: the month as a decimal number (range 01 to 12)
--- - \%M: the minute as a decimal number (range 00 to 59)
--- - \%f: the microsecond as a decimal number (range 000000 to 999999)
--- - \%p: either "AM" or "PM" according to the given time value, or the
---   corresponding  strings for the current locale.  Noon is treated as
---   "PM" and midnight as "AM". Use of this format specifier is discouraged, as
---   many locales have no concept of AM/PM formatting. Use \%c or \%X instead.
--- - \%P: like \%p but lowercase: "am" or "pm" or a corresponding string for
---   the current locale. Use of this format specifier is discouraged, as
---   many locales have no concept of AM/PM formatting. Use \%c or \%X instead.
--- - \%r: the time in a.m. or p.m. notation. Use of this format specifier is
---   discouraged, as many locales have no concept of AM/PM formatting. Use \%c
---   or \%X instead.
--- - \%R: the time in 24-hour notation (\%H:\%M)
--- - \%s: the number of seconds since the Epoch, that is, since 1970-01-01
---   00:00:00 UTC
--- - \%S: the second as a decimal number (range 00 to 60)
--- - \%t: a tab character
--- - \%T: the time in 24-hour notation with seconds (\%H:\%M:\%S)
--- - \%u: the ISO 8601 standard day of the week as a decimal, range 1 to 7,
---    Monday being 1. This works well with \%G and \%V.
--- - \%V: the ISO 8601 standard week number of the current year as a decimal
---   number, range 01 to 53, where week 1 is the first week that has at
---   least 4 days in the new year. See `g_date_time_get_week_of_year()`.
---   This works well with \%G and \%u.
--- - \%w: the day of the week as a decimal, range 0 to 6, Sunday being 0.
---   This is not the ISO 8601 standard format -- use \%u instead.
--- - \%x: the preferred date representation for the current locale without
---   the time
--- - \%X: the preferred time representation for the current locale without
---   the date
--- - \%y: the year as a decimal number without the century
--- - \%Y: the year as a decimal number including the century
--- - \%z: the time zone as an offset from UTC (+hhmm)
--- - \%:z: the time zone as an offset from UTC (+hh:mm).
---   This is a gnulib `strftime()` extension. Since: 2.38
--- - \%::z: the time zone as an offset from UTC (+hh:mm:ss). This is a
---   gnulib `strftime()` extension. Since: 2.38
--- - \%:::z: the time zone as an offset from UTC, with : to necessary
---   precision (e.g., -04, +05:30). This is a gnulib `strftime()` extension. Since: 2.38
--- - \%Z: the time zone or name or abbreviation
--- - \%\%: a literal \% character
--- 
--- Some conversion specifications can be modified by preceding the
--- conversion specifier by one or more modifier characters. The
--- following modifiers are supported for many of the numeric
--- conversions:
--- 
--- - O: Use alternative numeric symbols, if the current locale supports those.
--- - _: Pad a numeric result with spaces. This overrides the default padding
---   for the specifier.
--- - -: Do not pad a numeric result. This overrides the default padding
---   for the specifier.
--- - 0: Pad a numeric result with zeros. This overrides the default padding
---   for the specifier.
--- 
--- Additionally, when O is used with B, b, or h, it produces the alternative
--- form of a month name. The alternative form should be used when the month
--- name is used without a day number (e.g., standalone). It is required in
--- some languages (Baltic, Slavic, Greek, and more) due to their grammatical
--- rules. For other languages there is no difference. \%OB is a GNU and BSD
--- `strftime()` extension expected to be added to the future POSIX specification,
--- \%Ob and \%Oh are GNU `strftime()` extensions. Since: 2.56
---
--- ---
---
---@param self GLib.DateTime # A `GDateTime`
---@param format string # a valid UTF-8 string, containing the format for the `GDateTime`
---@return string # a newly allocated string formatted to the requested format or `nil` in the case that there was an error (such as a format specifier not being supported in the current locale). The string should be freed with `g_free()`.
function GLib.DateTime:format(format) end

--- # method GLib.DateTime:format_iso8601()
---
--- Format `datetime` in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601),
--- including the date, time and time zone, and return that as a UTF-8 encoded
--- string.
--- 
--- Since GLib 2.66, this will output to sub-second precision if needed.
---
--- ---
---
---@param self GLib.DateTime # A `GDateTime`
---@return string # a newly allocated string formatted in ISO 8601 format or `nil` in the case that there was an error. The string should be freed with `g_free()`.
function GLib.DateTime:format_iso8601() end

--- # method GLib.DateTime:get_day_of_month()
---
--- Retrieves the day of the month represented by `datetime` in the gregorian
--- calendar.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return integer # the day of the month
function GLib.DateTime:get_day_of_month() end

--- # method GLib.DateTime:get_day_of_week()
---
--- Retrieves the ISO 8601 day of the week on which `datetime` falls (1 is
--- Monday, 2 is Tuesday... 7 is Sunday).
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return integer # the day of the week
function GLib.DateTime:get_day_of_week() end

--- # method GLib.DateTime:get_day_of_year()
---
--- Retrieves the day of the year represented by `datetime` in the Gregorian
--- calendar.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return integer # the day of the year
function GLib.DateTime:get_day_of_year() end

--- # method GLib.DateTime:get_hour()
---
--- Retrieves the hour of the day represented by `datetime`
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return integer # the hour of the day
function GLib.DateTime:get_hour() end

--- # method GLib.DateTime:get_microsecond()
---
--- Retrieves the microsecond of the date represented by `datetime`
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return integer # the microsecond of the second
function GLib.DateTime:get_microsecond() end

--- # method GLib.DateTime:get_minute()
---
--- Retrieves the minute of the hour represented by `datetime`
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return integer # the minute of the hour
function GLib.DateTime:get_minute() end

--- # method GLib.DateTime:get_month()
---
--- Retrieves the month of the year represented by `datetime` in the Gregorian
--- calendar.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return integer # the month represented by `datetime`
function GLib.DateTime:get_month() end

--- # method GLib.DateTime:get_second()
---
--- Retrieves the second of the minute represented by `datetime`
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return integer # the second represented by `datetime`
function GLib.DateTime:get_second() end

--- # method GLib.DateTime:get_seconds()
---
--- Retrieves the number of seconds since the start of the last minute,
--- including the fractional part.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return number # the number of seconds
function GLib.DateTime:get_seconds() end

--- # method GLib.DateTime:get_timezone()
---
--- Get the time zone for this `datetime`.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return GLib.TimeZone # the time zone
function GLib.DateTime:get_timezone() end

--- # method GLib.DateTime:get_timezone_abbreviation()
---
--- Determines the time zone abbreviation to be used at the time and in
--- the time zone of `datetime`.
--- 
--- For example, in Toronto this is currently "EST" during the winter
--- months and "EDT" during the summer months when daylight savings
--- time is in effect.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return string # the time zone abbreviation. The returned string is owned by the `GDateTime` and it should not be modified or freed
function GLib.DateTime:get_timezone_abbreviation() end

--- # method GLib.DateTime:get_utc_offset()
---
--- Determines the offset to UTC in effect at the time and in the time
--- zone of `datetime`.
--- 
--- The offset is the number of microseconds that you add to UTC time to
--- arrive at local time for the time zone (ie: negative numbers for time
--- zones west of GMT, positive numbers for east).
--- 
--- If `datetime` represents UTC time, then the offset is always zero.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return GLib.TimeSpan # the number of microseconds that should be added to UTC to get the local time
function GLib.DateTime:get_utc_offset() end

--- # method GLib.DateTime:get_week_numbering_year()
---
--- Returns the ISO 8601 week-numbering year in which the week containing
--- `datetime` falls.
--- 
--- This function, taken together with `g_date_time_get_week_of_year()` and
--- `g_date_time_get_day_of_week()` can be used to determine the full ISO
--- week date on which `datetime` falls.
--- 
--- This is usually equal to the normal Gregorian year (as returned by
--- `g_date_time_get_year()`), except as detailed below:
--- 
--- For Thursday, the week-numbering year is always equal to the usual
--- calendar year.  For other days, the number is such that every day
--- within a complete week (Monday to Sunday) is contained within the
--- same week-numbering year.
--- 
--- For Monday, Tuesday and Wednesday occurring near the end of the year,
--- this may mean that the week-numbering year is one greater than the
--- calendar year (so that these days have the same week-numbering year
--- as the Thursday occurring early in the next year).
--- 
--- For Friday, Saturday and Sunday occurring near the start of the year,
--- this may mean that the week-numbering year is one less than the
--- calendar year (so that these days have the same week-numbering year
--- as the Thursday occurring late in the previous year).
--- 
--- An equivalent description is that the week-numbering year is equal to
--- the calendar year containing the majority of the days in the current
--- week (Monday to Sunday).
--- 
--- Note that January 1 0001 in the proleptic Gregorian calendar is a
--- Monday, so this function never returns 0.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return integer # the ISO 8601 week-numbering year for `datetime`
function GLib.DateTime:get_week_numbering_year() end

--- # method GLib.DateTime:get_week_of_year()
---
--- Returns the ISO 8601 week number for the week containing `datetime`.
--- The ISO 8601 week number is the same for every day of the week (from
--- Moday through Sunday).  That can produce some unusual results
--- (described below).
--- 
--- The first week of the year is week 1.  This is the week that contains
--- the first Thursday of the year.  Equivalently, this is the first week
--- that has more than 4 of its days falling within the calendar year.
--- 
--- The value 0 is never returned by this function.  Days contained
--- within a year but occurring before the first ISO 8601 week of that
--- year are considered as being contained in the last week of the
--- previous year.  Similarly, the final days of a calendar year may be
--- considered as being part of the first ISO 8601 week of the next year
--- if 4 or more days of that week are contained within the new year.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return integer # the ISO 8601 week number for `datetime`.
function GLib.DateTime:get_week_of_year() end

--- # method GLib.DateTime:get_year()
---
--- Retrieves the year represented by `datetime` in the Gregorian calendar.
---
--- ---
---
---@param self GLib.DateTime # A `GDateTime`
---@return integer # the year represented by `datetime`
function GLib.DateTime:get_year() end

--- # method GLib.DateTime:get_ymd()
---
--- Retrieves the Gregorian day, month, and year of a given `GDateTime`.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`.
---@param year? integer # the return location for the gregorian year, or `nil`.
---@param month? integer # the return location for the month of the year, or `nil`.
---@param day? integer # the return location for the day of the month, or `nil`.
---@return nil
function GLib.DateTime:get_ymd(year, month, day) end

--- # method GLib.DateTime:hash()
---
--- Hashes `datetime` into a `guint`, suitable for use within `GHashTable`.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return integer # a `guint` containing the hash
function GLib.DateTime:hash() end

--- # method GLib.DateTime:is_daylight_savings()
---
--- Determines if daylight savings time is in effect at the time and in
--- the time zone of `datetime`.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return (boolean|nil) # `true` if daylight savings time is in effect
function GLib.DateTime:is_daylight_savings() end

--- # method GLib.DateTime:ref()
---
--- Atomically increments the reference count of `datetime` by one.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return GLib.DateTime # the `GDateTime` with the reference count increased
function GLib.DateTime:ref() end

--- # method GLib.DateTime:to_local()
---
--- Creates a new `GDateTime` corresponding to the same instant in time as
--- `datetime`, but in the local time zone.
--- 
--- This call is equivalent to calling `g_date_time_to_timezone()` with the
--- time zone returned by `g_time_zone_new_local()`.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return GLib.DateTime # the newly created `GDateTime` which should be freed with `g_date_time_unref()`, or `nil`
function GLib.DateTime:to_local() end

--- # method GLib.DateTime:to_timeval()
---
--- Stores the instant in time that `datetime` represents into `tv`.
--- 
--- The time contained in a `GTimeVal` is always stored in the form of
--- seconds elapsed since 1970-01-01 00:00:00 UTC, regardless of the time
--- zone associated with `datetime`.
--- 
--- On systems where 'long' is 32bit (ie: all 32bit systems and all
--- Windows systems), a `GTimeVal` is incapable of storing the entire
--- range of values that `GDateTime` is capable of expressing.  On those
--- systems, this function returns `false` to indicate that the time is
--- out of range.
--- 
--- On systems where 'long' is 64bit, this function never fails.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@param tv GLib.TimeVal # a `GTimeVal` to modify
---@return (boolean|nil) # `true` if successful, else `false`
function GLib.DateTime:to_timeval(tv) end

--- # method GLib.DateTime:to_timezone()
---
--- Create a new `GDateTime` corresponding to the same instant in time as
--- `datetime`, but in the time zone `tz`.
--- 
--- This call can fail in the case that the time goes out of bounds.  For
--- example, converting 0001-01-01 00:00:00 UTC to a time zone west of
--- Greenwich will fail (due to the year 0 being out of range).
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@param tz GLib.TimeZone # the new `GTimeZone`
---@return GLib.DateTime # the newly created `GDateTime` which should be freed with `g_date_time_unref()`, or `nil`
function GLib.DateTime:to_timezone(tz) end

--- # method GLib.DateTime:to_unix()
---
--- Gives the Unix time corresponding to `datetime`, rounding down to the
--- nearest second.
--- 
--- Unix time is the number of seconds that have elapsed since 1970-01-01
--- 00:00:00 UTC, regardless of the time zone associated with `datetime`.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return integer # the Unix time corresponding to `datetime`
function GLib.DateTime:to_unix() end

--- # method GLib.DateTime:to_utc()
---
--- Creates a new `GDateTime` corresponding to the same instant in time as
--- `datetime`, but in UTC.
--- 
--- This call is equivalent to calling `g_date_time_to_timezone()` with the
--- time zone returned by `g_time_zone_new_utc()`.
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return GLib.DateTime # the newly created `GDateTime` which should be freed with `g_date_time_unref()`, or `nil`
function GLib.DateTime:to_utc() end

--- # method GLib.DateTime:unref()
---
--- Atomically decrements the reference count of `datetime` by one.
--- 
--- When the reference count reaches zero, the resources allocated by
--- `datetime` are freed
---
--- ---
---
---@param self GLib.DateTime # a `GDateTime`
---@return nil
function GLib.DateTime:unref() end

--- # function GLib.DateTime.new()
---
--- Creates a new `GDateTime` corresponding to the given date and time in
--- the time zone `tz`.
--- 
--- The `year` must be between 1 and 9999, `month` between 1 and 12 and `day`
--- between 1 and 28, 29, 30 or 31 depending on the month and the year.
--- 
--- `hour` must be between 0 and 23 and `minute` must be between 0 and 59.
--- 
--- `seconds` must be at least 0.0 and must be strictly less than 60.0.
--- It will be rounded down to the nearest microsecond.
--- 
--- If the given time is not representable in the given time zone (for
--- example, 02:30 on March 14th 2010 in Toronto, due to daylight savings
--- time) then the time will be rounded up to the nearest existing time
--- (in this case, 03:00).  If this matters to you then you should verify
--- the return value for containing the same as the numbers you gave.
--- 
--- In the case that the given time is ambiguous in the given time zone
--- (for example, 01:30 on November 7th 2010 in Toronto, due to daylight
--- savings time) then the time falling within standard (ie:
--- non-daylight) time is taken.
--- 
--- It not considered a programmer error for the values to this function
--- to be out of range, but in the case that they are, the function will
--- return `nil`.
--- 
--- You should release the return value by calling `g_date_time_unref()`
--- when you are done with it.
---
--- ---
---
---@param tz GLib.TimeZone # a `GTimeZone`
---@param year integer # the year component of the date
---@param month integer # the month component of the date
---@param day integer # the day component of the date
---@param hour integer # the hour component of the date
---@param minute integer # the minute component of the date
---@param seconds number # the number of seconds past the minute
---@return GLib.DateTime # a new `GDateTime`, or `nil`
function GLib.DateTime.new(tz, year, month, day, hour, minute, seconds) end

--- # function GLib.DateTime.new_from_iso8601()
---
--- Creates a `GDateTime` corresponding to the given
--- [ISO 8601 formatted string](https://en.wikipedia.org/wiki/ISO_8601)
--- `text`. ISO 8601 strings of the form <date><sep><time><tz> are supported, with
--- some extensions from [RFC 3339](https://tools.ietf.org/html/rfc3339) as
--- mentioned below.
--- 
--- Note that as `GDateTime` "is oblivious to leap seconds", leap seconds information
--- in an ISO-8601 string will be ignored, so a `23:59:60` time would be parsed as
--- `23:59:59`.
--- 
--- <sep> is the separator and can be either 'T', 't' or ' '. The latter two
--- separators are an extension from
--- [RFC 3339](https://tools.ietf.org/html/rfc3339`section`-5.6).
--- 
--- <date> is in the form:
--- 
--- - `YYYY-MM-DD` - Year/month/day, e.g. 2016-08-24.
--- - `YYYYMMDD` - Same as above without dividers.
--- - `YYYY-DDD` - Ordinal day where DDD is from 001 to 366, e.g. 2016-237.
--- - `YYYYDDD` - Same as above without dividers.
--- - `YYYY-Www-D` - Week day where ww is from 01 to 52 and D from 1-7,
---   e.g. 2016-W34-3.
--- - `YYYYWwwD` - Same as above without dividers.
--- 
--- <time> is in the form:
--- 
--- - `hh:mm:ss(.sss)` - Hours, minutes, seconds (subseconds), e.g. 22:10:42.123.
--- - `hhmmss(.sss)` - Same as above without dividers.
--- 
--- <tz> is an optional timezone suffix of the form:
--- 
--- - `Z` - UTC.
--- - `+hh:mm` or `-hh:mm` - Offset from UTC in hours and minutes, e.g. +12:00.
--- - `+hh` or `-hh` - Offset from UTC in hours, e.g. +12.
--- 
--- If the timezone is not provided in `text` it must be provided in `default_tz`
--- (this field is otherwise ignored).
--- 
--- This call can fail (returning `nil`) if `text` is not a valid ISO 8601
--- formatted string.
--- 
--- You should release the return value by calling `g_date_time_unref()`
--- when you are done with it.
---
--- ---
---
---@param text string # an ISO 8601 formatted time string.
---@param default_tz? GLib.TimeZone # a `GTimeZone` to use if the text doesn't contain a timezone, or `nil`.
---@return GLib.DateTime # a new `GDateTime`, or `nil`
function GLib.DateTime.new_from_iso8601(text, default_tz) end

--- # function GLib.DateTime.new_from_timeval_local()
---
--- Creates a `GDateTime` corresponding to the given `GTimeVal` `tv` in the
--- local time zone.
--- 
--- The time contained in a `GTimeVal` is always stored in the form of
--- seconds elapsed since 1970-01-01 00:00:00 UTC, regardless of the
--- local time offset.
--- 
--- This call can fail (returning `nil`) if `tv` represents a time outside
--- of the supported range of `GDateTime`.
--- 
--- You should release the return value by calling `g_date_time_unref()`
--- when you are done with it.
---
--- ---
---
---@param tv GLib.TimeVal # a `GTimeVal`
---@return GLib.DateTime # a new `GDateTime`, or `nil`
function GLib.DateTime.new_from_timeval_local(tv) end

--- # function GLib.DateTime.new_from_timeval_utc()
---
--- Creates a `GDateTime` corresponding to the given `GTimeVal` `tv` in UTC.
--- 
--- The time contained in a `GTimeVal` is always stored in the form of
--- seconds elapsed since 1970-01-01 00:00:00 UTC.
--- 
--- This call can fail (returning `nil`) if `tv` represents a time outside
--- of the supported range of `GDateTime`.
--- 
--- You should release the return value by calling `g_date_time_unref()`
--- when you are done with it.
---
--- ---
---
---@param tv GLib.TimeVal # a `GTimeVal`
---@return GLib.DateTime # a new `GDateTime`, or `nil`
function GLib.DateTime.new_from_timeval_utc(tv) end

--- # function GLib.DateTime.new_from_unix_local()
---
--- Creates a `GDateTime` corresponding to the given Unix time `t` in the
--- local time zone.
--- 
--- Unix time is the number of seconds that have elapsed since 1970-01-01
--- 00:00:00 UTC, regardless of the local time offset.
--- 
--- This call can fail (returning `nil`) if `t` represents a time outside
--- of the supported range of `GDateTime`.
--- 
--- You should release the return value by calling `g_date_time_unref()`
--- when you are done with it.
---
--- ---
---
---@param t integer # the Unix time
---@return GLib.DateTime # a new `GDateTime`, or `nil`
function GLib.DateTime.new_from_unix_local(t) end

--- # function GLib.DateTime.new_from_unix_utc()
---
--- Creates a `GDateTime` corresponding to the given Unix time `t` in UTC.
--- 
--- Unix time is the number of seconds that have elapsed since 1970-01-01
--- 00:00:00 UTC.
--- 
--- This call can fail (returning `nil`) if `t` represents a time outside
--- of the supported range of `GDateTime`.
--- 
--- You should release the return value by calling `g_date_time_unref()`
--- when you are done with it.
---
--- ---
---
---@param t integer # the Unix time
---@return GLib.DateTime # a new `GDateTime`, or `nil`
function GLib.DateTime.new_from_unix_utc(t) end

--- # function GLib.DateTime.new_local()
---
--- Creates a new `GDateTime` corresponding to the given date and time in
--- the local time zone.
--- 
--- This call is equivalent to calling `g_date_time_new()` with the time
--- zone returned by `g_time_zone_new_local()`.
---
--- ---
---
---@param year integer # the year component of the date
---@param month integer # the month component of the date
---@param day integer # the day component of the date
---@param hour integer # the hour component of the date
---@param minute integer # the minute component of the date
---@param seconds number # the number of seconds past the minute
---@return GLib.DateTime # a `GDateTime`, or `nil`
function GLib.DateTime.new_local(year, month, day, hour, minute, seconds) end

--- # function GLib.DateTime.new_now()
---
--- Creates a `GDateTime` corresponding to this exact instant in the given
--- time zone `tz`.  The time is as accurate as the system allows, to a
--- maximum accuracy of 1 microsecond.
--- 
--- This function will always succeed unless GLib is still being used after the
--- year 9999.
--- 
--- You should release the return value by calling `g_date_time_unref()`
--- when you are done with it.
---
--- ---
---
---@param tz GLib.TimeZone # a `GTimeZone`
---@return GLib.DateTime # a new `GDateTime`, or `nil`
function GLib.DateTime.new_now(tz) end

--- # function GLib.DateTime.new_now_local()
---
--- Creates a `GDateTime` corresponding to this exact instant in the local
--- time zone.
--- 
--- This is equivalent to calling `g_date_time_new_now()` with the time
--- zone returned by `g_time_zone_new_local()`.
---
--- ---
---
---@return GLib.DateTime # a new `GDateTime`, or `nil`
function GLib.DateTime.new_now_local() end

--- # function GLib.DateTime.new_now_utc()
---
--- Creates a `GDateTime` corresponding to this exact instant in UTC.
--- 
--- This is equivalent to calling `g_date_time_new_now()` with the time
--- zone returned by `g_time_zone_new_utc()`.
---
--- ---
---
---@return GLib.DateTime # a new `GDateTime`, or `nil`
function GLib.DateTime.new_now_utc() end

--- # function GLib.DateTime.new_utc()
---
--- Creates a new `GDateTime` corresponding to the given date and time in
--- UTC.
--- 
--- This call is equivalent to calling `g_date_time_new()` with the time
--- zone returned by `g_time_zone_new_utc()`.
---
--- ---
---
---@param year integer # the year component of the date
---@param month integer # the month component of the date
---@param day integer # the day component of the date
---@param hour integer # the hour component of the date
---@param minute integer # the minute component of the date
---@param seconds number # the number of seconds past the minute
---@return GLib.DateTime # a `GDateTime`, or `nil`
function GLib.DateTime.new_utc(year, month, day, hour, minute, seconds) end

---@enum GLib.DateWeekday
GLib.DateWeekday = {}

--- # record GLib.DebugKey
---
--- Associates a string with a bit flag.
--- Used in `g_parse_debug_string()`.
---
--- ---
---
---@class GLib.DebugKey
---@field key string # the string
---@field value integer # the flag
GLib.DebugKey = {}

---@alias GLib.DestroyNotify fun(data: userdata): nil

--- # record GLib.Dir
---
--- An opaque structure representing an opened directory.
---
--- ---
---
---@class GLib.Dir
GLib.Dir = {}

--- # method GLib.Dir:close()
---
--- Closes the directory and deallocates all related resources.
---
--- ---
---
---@param self GLib.Dir # a `GDir`* created by `g_dir_open()`
---@return nil
function GLib.Dir:close() end

--- # method GLib.Dir:read_name()
---
--- Retrieves the name of another entry in the directory, or `nil`.
--- The order of entries returned from this function is not defined,
--- and may vary by file system or other operating-system dependent
--- factors.
--- 
--- `nil` may also be returned in case of errors. On Unix, you can
--- check `errno` to find out if `nil` was returned because of an error.
--- 
--- On Unix, the '.' and '..' entries are omitted, and the returned
--- name is in the on-disk encoding.
--- 
--- On Windows, as is true of all GLib functions which operate on
--- filenames, the returned name is in UTF-8.
---
--- ---
---
---@param self GLib.Dir # a `GDir`* created by `g_dir_open()`
---@return string # The entry's name or `nil` if there are no more entries. The return value is owned by GLib and must not be modified or freed.
function GLib.Dir:read_name() end

--- # method GLib.Dir:rewind()
---
--- Resets the given directory. The next call to `g_dir_read_name()`
--- will return the first entry again.
---
--- ---
---
---@param self GLib.Dir # a `GDir`* created by `g_dir_open()`
---@return nil
function GLib.Dir:rewind() end

--- # function GLib.Dir.make_tmp()
---
--- Creates a subdirectory in the preferred directory for temporary
--- files (as returned by `g_get_tmp_dir()`).
--- 
--- `tmpl` should be a string in the GLib file name encoding containing
--- a sequence of six 'X' characters, as the parameter to `g_mkstemp()`.
--- However, unlike these functions, the template should only be a
--- basename, no directory components are allowed. If template is
--- `nil`, a default template is used.
--- 
--- Note that in contrast to `g_mkdtemp()` (and `mkdtemp()`) `tmpl` is not
--- modified, and might thus be a read-only literal string.
---
--- ---
---
---@param tmpl? string # Template for directory name, as in `g_mkdtemp()`, basename only, or `nil` for a default template
---@return string # The actual name used. This string should be freed with `g_free()` when not needed any longer and is is in the GLib file name encoding. In case of errors, `nil` is returned and `error` will be set.
function GLib.Dir.make_tmp(tmpl) end

--- # union GLib.DoubleIEEE754
---
--- The `GFloatIEEE754` and `GDoubleIEEE754` unions are used to access the sign,
--- mantissa and exponent of IEEE floats and doubles. These unions are defined
--- as appropriate for a given platform. IEEE floats and doubles are supported
--- (used for storage) by at least Intel, PPC and Sparc.
---
--- ---
---
---@class GLib.DoubleIEEE754
---@field v_double number # the double value
GLib.DoubleIEEE754 = {}

---@alias GLib.DuplicateFunc fun(data: userdata, user_data: userdata): userdata

---@alias GLib.EqualFunc fun(a: userdata, b: userdata): (boolean|nil)

---@alias GLib.EqualFuncFull fun(a: userdata, b: userdata, user_data: userdata): (boolean|nil)

--- # record GLib.Error
---
--- The `GError` structure contains information about
--- an error that has occurred.
---
--- ---
---
---@class GLib.Error
---@field domain GLib.Quark # error domain, e.g. %G_FILE_ERROR
---@field code integer # error code, e.g. %G_FILE_ERROR_NOENT
---@field message string # human-readable informative error message
GLib.Error = {}

--- # method GLib.Error:copy()
---
--- Makes a copy of `error`.
---
--- ---
---
---@param self GLib.Error # a `GError`
---@return GLib.Error # a new `GError`
function GLib.Error:copy() end

--- # method GLib.Error:free()
---
--- Frees a `GError` and associated resources.
---
--- ---
---
---@param self GLib.Error # a `GError`
---@return nil
function GLib.Error:free() end

--- # method GLib.Error:matches()
---
--- Returns `true` if `error` matches `domain` and `code`, `false`
--- otherwise. In particular, when `error` is `nil`, `false` will
--- be returned.
--- 
--- If `domain` contains a `FAILED` (or otherwise generic) error code,
--- you should generally not check for it explicitly, but should
--- instead treat any not-explicitly-recognized error code as being
--- equivalent to the `FAILED` code. This way, if the domain is
--- extended in the future to provide a more specific error code for
--- a certain case, your code will still work.
---
--- ---
---
---@param self? GLib.Error # a `GError`
---@param domain GLib.Quark # an error domain
---@param code integer # an error code
---@return (boolean|nil) # whether `error` has `domain` and `code`
function GLib.Error:matches(domain, code) end

--- # function GLib.Error.new_literal()
---
--- Creates a new `GError`; unlike `g_error_new()`, `message` is
--- not a `printf()`-style format string. Use this function if
--- `message` contains text you don't have control over,
--- that could include `printf()` escape sequences.
---
--- ---
---
---@param domain GLib.Quark # error domain
---@param code integer # error code
---@param message string # error message
---@return GLib.Error # a new `GError`
function GLib.Error.new_literal(domain, code, message) end

---@alias GLib.ErrorClearFunc fun(error: GLib.Error): nil

---@alias GLib.ErrorCopyFunc fun(src_error: GLib.Error, dest_error: GLib.Error): nil

---@alias GLib.ErrorInitFunc fun(error: GLib.Error): nil

---@enum GLib.ErrorType
GLib.ErrorType = {}

---@enum GLib.FileError
GLib.FileError = {}

---@enum GLib.FileSetContentsFlags
GLib.FileSetContentsFlags = {}

---@enum GLib.FileTest
GLib.FileTest = {}

--- # union GLib.FloatIEEE754
---
--- The `GFloatIEEE754` and `GDoubleIEEE754` unions are used to access the sign,
--- mantissa and exponent of IEEE floats and doubles. These unions are defined
--- as appropriate for a given platform. IEEE floats and doubles are supported
--- (used for storage) by at least Intel, PPC and Sparc.
---
--- ---
---
---@class GLib.FloatIEEE754
---@field v_float number # the double value
GLib.FloatIEEE754 = {}

---@enum GLib.FormatSizeFlags
GLib.FormatSizeFlags = {}

---@alias GLib.FreeFunc fun(data: userdata): nil

---@alias GLib.Func fun(data: userdata, user_data: userdata): nil

---@alias GLib.HFunc fun(key: userdata, value: userdata, user_data: userdata): nil

---@alias GLib.HRFunc fun(key: userdata, value: userdata, user_data: userdata): (boolean|nil)

---@alias GLib.HashFunc fun(key: userdata): integer

--- # record GLib.HashTable
---
--- The `GHashTable` struct is an opaque data structure to represent a
--- [Hash Table][glib-Hash-Tables]. It should only be accessed via the
--- following functions.
---
--- ---
---
---@class GLib.HashTable
GLib.HashTable = {}

--- # function GLib.HashTable.add()
---
--- This is a convenience function for using a `GHashTable` as a set.  It
--- is equivalent to calling `g_hash_table_replace()` with `key` as both the
--- key and the value.
--- 
--- In particular, this means that if `key` already exists in the hash table, then
--- the old copy of `key` in the hash table is freed and `key` replaces it in the
--- table.
--- 
--- When a hash table only ever contains keys that have themselves as the
--- corresponding value it is able to be stored more efficiently.  See
--- the discussion in the section description.
--- 
--- Starting from GLib 2.40, this function returns a boolean value to
--- indicate whether the newly added value was already in the hash table
--- or not.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param key? userdata # a key to insert
---@return (boolean|nil) # `true` if the key did not exist yet
function GLib.HashTable.add(hash_table, key) end

--- # function GLib.HashTable.contains()
---
--- Checks if `key` is in `hash_table`.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param key? userdata # a key to check
---@return (boolean|nil) # `true` if `key` is in `hash_table`, `false` otherwise.
function GLib.HashTable.contains(hash_table, key) end

--- # function GLib.HashTable.destroy()
---
--- Destroys all keys and values in the `GHashTable` and decrements its
--- reference count by 1. If keys and/or values are dynamically allocated,
--- you should either free them first or create the `GHashTable` with destroy
--- notifiers using `g_hash_table_new_full()`. In the latter case the destroy
--- functions you supplied will be called on all keys and values during the
--- destruction phase.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@return nil
function GLib.HashTable.destroy(hash_table) end

--- # function GLib.HashTable.insert()
---
--- Inserts a new key and value into a `GHashTable`.
--- 
--- If the key already exists in the `GHashTable` its current
--- value is replaced with the new value. If you supplied a
--- `value_destroy_func` when creating the `GHashTable`, the old
--- value is freed using that function. If you supplied a
--- `key_destroy_func` when creating the `GHashTable`, the passed
--- key is freed using that function.
--- 
--- Starting from GLib 2.40, this function returns a boolean value to
--- indicate whether the newly added value was already in the hash table
--- or not.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param key? userdata # a key to insert
---@param value? userdata # the value to associate with the key
---@return (boolean|nil) # `true` if the key did not exist yet
function GLib.HashTable.insert(hash_table, key, value) end

--- # function GLib.HashTable.lookup()
---
--- Looks up a key in a `GHashTable`. Note that this function cannot
--- distinguish between a key that is not present and one which is present
--- and has the value `nil`. If you need this distinction, use
--- `g_hash_table_lookup_extended()`.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param key? userdata # the key to look up
---@return userdata # the associated value, or `nil` if the key is not found
function GLib.HashTable.lookup(hash_table, key) end

--- # function GLib.HashTable.lookup_extended()
---
--- Looks up a key in the `GHashTable`, returning the original key and the
--- associated value and a `gboolean` which is `true` if the key was found. This
--- is useful if you need to free the memory allocated for the original key,
--- for example before calling `g_hash_table_remove()`.
--- 
--- You can actually pass `nil` for `lookup_key` to test
--- whether the `nil` key exists, provided the hash and equal functions
--- of `hash_table` are `nil`-safe.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param lookup_key? userdata # the key to look up
---@param orig_key? userdata # return location for the original key
---@param value? userdata # return location for the value associated with the key
---@return (boolean|nil) # `true` if the key was found in the `GHashTable`
function GLib.HashTable.lookup_extended(hash_table, lookup_key, orig_key, value) end

--- # function GLib.HashTable.new_similar()
---
--- Creates a new `GHashTable` like `g_hash_table_new_full()` with a reference
--- count of 1.
--- 
--- It inherits the hash function, the key equal function, the key destroy function,
--- as well as the value destroy function, from `other_hash_table`.
--- 
--- The returned hash table will be empty; it will not contain the keys
--- or values from `other_hash_table`.
---
--- ---
---
---@param other_hash_table table<userdata, userdata> # Another `GHashTable`
---@return table<userdata, userdata> # a new `GHashTable`
function GLib.HashTable.new_similar(other_hash_table) end

--- # function GLib.HashTable.remove()
---
--- Removes a key and its associated value from a `GHashTable`.
--- 
--- If the `GHashTable` was created using `g_hash_table_new_full()`, the
--- key and value are freed using the supplied destroy functions, otherwise
--- you have to make sure that any dynamically allocated values are freed
--- yourself.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param key? userdata # the key to remove
---@return (boolean|nil) # `true` if the key was found and removed from the `GHashTable`
function GLib.HashTable.remove(hash_table, key) end

--- # function GLib.HashTable.remove_all()
---
--- Removes all keys and their associated values from a `GHashTable`.
--- 
--- If the `GHashTable` was created using `g_hash_table_new_full()`,
--- the keys and values are freed using the supplied destroy functions,
--- otherwise you have to make sure that any dynamically allocated
--- values are freed yourself.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@return nil
function GLib.HashTable.remove_all(hash_table) end

--- # function GLib.HashTable.replace()
---
--- Inserts a new key and value into a `GHashTable` similar to
--- `g_hash_table_insert()`. The difference is that if the key
--- already exists in the `GHashTable`, it gets replaced by the
--- new key. If you supplied a `value_destroy_func` when creating
--- the `GHashTable`, the old value is freed using that function.
--- If you supplied a `key_destroy_func` when creating the
--- `GHashTable`, the old key is freed using that function.
--- 
--- Starting from GLib 2.40, this function returns a boolean value to
--- indicate whether the newly added value was already in the hash table
--- or not.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param key? userdata # a key to insert
---@param value? userdata # the value to associate with the key
---@return (boolean|nil) # `true` if the key did not exist yet
function GLib.HashTable.replace(hash_table, key, value) end

--- # function GLib.HashTable.size()
---
--- Returns the number of elements contained in the `GHashTable`.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@return integer # the number of key/value pairs in the `GHashTable`.
function GLib.HashTable.size(hash_table) end

--- # function GLib.HashTable.steal()
---
--- Removes a key and its associated value from a `GHashTable` without
--- calling the key and value destroy functions.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param key? userdata # the key to remove
---@return (boolean|nil) # `true` if the key was found and removed from the `GHashTable`
function GLib.HashTable.steal(hash_table, key) end

--- # function GLib.HashTable.steal_all()
---
--- Removes all keys and their associated values from a `GHashTable`
--- without calling the key and value destroy functions.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@return nil
function GLib.HashTable.steal_all(hash_table) end

--- # function GLib.HashTable.steal_extended()
---
--- Looks up a key in the `GHashTable`, stealing the original key and the
--- associated value and returning `true` if the key was found. If the key was
--- not found, `false` is returned.
--- 
--- If found, the stolen key and value are removed from the hash table without
--- calling the key and value destroy functions, and ownership is transferred to
--- the caller of this method, as with `g_hash_table_steal()`. That is the case
--- regardless whether `stolen_key` or `stolen_value` output parameters are
--- requested.
--- 
--- You can pass `nil` for `lookup_key`, provided the hash and equal functions
--- of `hash_table` are `nil`-safe.
--- 
--- The dictionary implementation optimizes for having all values identical to
--- their keys, for example by using `g_hash_table_add()`. When stealing both the
--- key and the value from such a dictionary, the value will be `nil`.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param lookup_key? userdata # the key to look up
---@param stolen_key? userdata # return location for the original key
---@param stolen_value? userdata # return location for the value associated with the key
---@return (boolean|nil) # `true` if the key was found in the `GHashTable`
function GLib.HashTable.steal_extended(hash_table, lookup_key, stolen_key, stolen_value) end

--- # function GLib.HashTable.unref()
---
--- Atomically decrements the reference count of `hash_table` by one.
--- If the reference count drops to 0, all keys and values will be
--- destroyed, and all memory allocated by the hash table is released.
--- This function is MT-safe and may be called from any thread.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a valid `GHashTable`
---@return nil
function GLib.HashTable.unref(hash_table) end

--- # record GLib.HashTableIter
---
--- A GHashTableIter structure represents an iterator that can be used
--- to iterate over the elements of a `GHashTable`. GHashTableIter
--- structures are typically allocated on the stack and then initialized
--- with `g_hash_table_iter_init()`.
--- 
--- The iteration order of a `GHashTableIter` over the keys/values in a hash
--- table is not defined.
---
--- ---
---
---@class GLib.HashTableIter
---@field dummy1 userdata
---@field dummy2 userdata
---@field dummy3 userdata
---@field dummy4 integer
---@field dummy5 (boolean|nil)
---@field dummy6 userdata
GLib.HashTableIter = {}

--- # method GLib.HashTableIter:init()
---
--- Initializes a key/value pair iterator and associates it with
--- `hash_table`. Modifying the hash table after calling this function
--- invalidates the returned iterator.
--- 
--- The iteration order of a `GHashTableIter` over the keys/values in a hash
--- table is not defined.
--- 
--- ```c
--- GHashTableIter iter;
--- gpointer key, value;
--- 
--- g_hash_table_iter_init (&iter, hash_table);
--- while (g_hash_table_iter_next (&iter, &key, &value))
---   {
---     // do something with key and value
---   }
--- ```
---
--- ---
---
---@param self GLib.HashTableIter # an uninitialized `GHashTableIter`
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@return nil
function GLib.HashTableIter:init(hash_table) end

--- # method GLib.HashTableIter:next()
---
--- Advances `iter` and retrieves the key and/or value that are now
--- pointed to as a result of this advancement. If `false` is returned,
--- `key` and `value` are not set, and the iterator becomes invalid.
---
--- ---
---
---@param self GLib.HashTableIter # an initialized `GHashTableIter`
---@param key? userdata # a location to store the key
---@param value? userdata # a location to store the value
---@return (boolean|nil) # `false` if the end of the `GHashTable` has been reached.
function GLib.HashTableIter:next(key, value) end

--- # method GLib.HashTableIter:remove()
---
--- Removes the key/value pair currently pointed to by the iterator
--- from its associated `GHashTable`. Can only be called after
--- `g_hash_table_iter_next()` returned `true`, and cannot be called
--- more than once for the same key/value pair.
--- 
--- If the `GHashTable` was created using `g_hash_table_new_full()`,
--- the key and value are freed using the supplied destroy functions,
--- otherwise you have to make sure that any dynamically allocated
--- values are freed yourself.
--- 
--- It is safe to continue iterating the `GHashTable` afterward:
--- ```c
--- while (g_hash_table_iter_next (&iter, &key, &value))
---   {
---     if (condition)
---       g_hash_table_iter_remove (&iter);
---   }
--- ```
---
--- ---
---
---@param self GLib.HashTableIter # an initialized `GHashTableIter`
---@return nil
function GLib.HashTableIter:remove() end

--- # method GLib.HashTableIter:replace()
---
--- Replaces the value currently pointed to by the iterator
--- from its associated `GHashTable`. Can only be called after
--- `g_hash_table_iter_next()` returned `true`.
--- 
--- If you supplied a `value_destroy_func` when creating the
--- `GHashTable`, the old value is freed using that function.
---
--- ---
---
---@param self GLib.HashTableIter # an initialized `GHashTableIter`
---@param value? userdata # the value to replace with
---@return nil
function GLib.HashTableIter:replace(value) end

--- # method GLib.HashTableIter:steal()
---
--- Removes the key/value pair currently pointed to by the
--- iterator from its associated `GHashTable`, without calling
--- the key and value destroy functions. Can only be called
--- after `g_hash_table_iter_next()` returned `true`, and cannot
--- be called more than once for the same key/value pair.
---
--- ---
---
---@param self GLib.HashTableIter # an initialized `GHashTableIter`
---@return nil
function GLib.HashTableIter:steal() end

--- # record GLib.Hmac
---
--- An opaque structure representing a HMAC operation.
--- To create a new GHmac, use `g_hmac_new()`. To free
--- a GHmac, use `g_hmac_unref()`.
---
--- ---
---
---@class GLib.Hmac
GLib.Hmac = {}

--- # method GLib.Hmac:get_digest()
---
--- Gets the digest from `checksum` as a raw binary array and places it
--- into `buffer`. The size of the digest depends on the type of checksum.
--- 
--- Once this function has been called, the `GHmac` is closed and can
--- no longer be updated with `g_checksum_update()`.
---
--- ---
---
---@param self GLib.Hmac # a `GHmac`
---@param buffer unknown[] # output buffer
---@param digest_len integer # an inout parameter. The caller initializes it to the size of `buffer`. After the call it contains the length of the digest
---@return nil
function GLib.Hmac:get_digest(buffer, digest_len) end

--- # method GLib.Hmac:get_string()
---
--- Gets the HMAC as a hexadecimal string.
--- 
--- Once this function has been called the `GHmac` can no longer be
--- updated with `g_hmac_update()`.
--- 
--- The hexadecimal characters will be lower case.
---
--- ---
---
---@param self GLib.Hmac # a `GHmac`
---@return string # the hexadecimal representation of the HMAC. The returned string is owned by the HMAC and should not be modified or freed.
function GLib.Hmac:get_string() end

--- # method GLib.Hmac:unref()
---
--- Atomically decrements the reference count of `hmac` by one.
--- 
--- If the reference count drops to 0, all keys and values will be
--- destroyed, and all memory allocated by the hash table is released.
--- This function is MT-safe and may be called from any thread.
--- Frees the memory allocated for `hmac`.
---
--- ---
---
---@param self GLib.Hmac # a `GHmac`
---@return nil
function GLib.Hmac:unref() end

--- # method GLib.Hmac:update()
---
--- Feeds `data` into an existing `GHmac`.
--- 
--- The HMAC must still be open, that is `g_hmac_get_string()` or
--- `g_hmac_get_digest()` must not have been called on `hmac`.
---
--- ---
---
---@param self GLib.Hmac # a `GHmac`
---@param data unknown[] # buffer used to compute the checksum
---@param length integer # size of the buffer, or -1 if it is a nul-terminated string
---@return nil
function GLib.Hmac:update(data, length) end

--- # record GLib.Hook
---
--- The `GHook` struct represents a single hook function in a `GHookList`.
---
--- ---
---
---@class GLib.Hook
---@field data userdata # data which is passed to func when this hook is invoked
---@field next GLib.Hook # pointer to the next hook in the list
---@field prev GLib.Hook # pointer to the previous hook in the list
---@field ref_count integer # the reference count of this hook
---@field hook_id integer # the id of this hook, which is unique within its list
---@field flags integer # flags which are set for this hook. See `GHookFlagMask` for predefined flags
---@field func userdata # the function to call when this hook is invoked. The possible signatures for this function are `GHookFunc` and `GHookCheckFunc`
---@field destroy GLib.DestroyNotify # the default `finalize_hook` function of a `GHookList` calls this member of the hook that is being finalized
GLib.Hook = {}

--- # method GLib.Hook:compare_ids()
---
--- Compares the ids of two `GHook` elements, returning a negative value
--- if the second id is greater than the first.
---
--- ---
---
---@param self GLib.Hook # a `GHook`
---@param sibling GLib.Hook # a `GHook` to compare with `new_hook`
---@return integer # a value <= 0 if the id of `sibling` is >= the id of `new_hook`
function GLib.Hook:compare_ids(sibling) end

--- # function GLib.Hook.destroy()
---
--- Destroys a `GHook`, given its ID.
---
--- ---
---
---@param hook_list GLib.HookList # a `GHookList`
---@param hook_id integer # a hook ID
---@return (boolean|nil) # `true` if the `GHook` was found in the `GHookList` and destroyed
function GLib.Hook.destroy(hook_list, hook_id) end

--- # function GLib.Hook.destroy_link()
---
--- Removes one `GHook` from a `GHookList`, marking it
--- inactive and calling `g_hook_unref()` on it.
---
--- ---
---
---@param hook_list GLib.HookList # a `GHookList`
---@param hook GLib.Hook # the `GHook` to remove
---@return nil
function GLib.Hook.destroy_link(hook_list, hook) end

--- # function GLib.Hook.free()
---
--- Calls the `GHookList` `finalize_hook` function if it exists,
--- and frees the memory allocated for the `GHook`.
---
--- ---
---
---@param hook_list GLib.HookList # a `GHookList`
---@param hook GLib.Hook # the `GHook` to free
---@return nil
function GLib.Hook.free(hook_list, hook) end

--- # function GLib.Hook.insert_before()
---
--- Inserts a `GHook` into a `GHookList`, before a given `GHook`.
---
--- ---
---
---@param hook_list GLib.HookList # a `GHookList`
---@param sibling? GLib.Hook # the `GHook` to insert the new `GHook` before
---@param hook GLib.Hook # the `GHook` to insert
---@return nil
function GLib.Hook.insert_before(hook_list, sibling, hook) end

--- # function GLib.Hook.prepend()
---
--- Prepends a `GHook` on the start of a `GHookList`.
---
--- ---
---
---@param hook_list GLib.HookList # a `GHookList`
---@param hook GLib.Hook # the `GHook` to add to the start of `hook_list`
---@return nil
function GLib.Hook.prepend(hook_list, hook) end

--- # function GLib.Hook.unref()
---
--- Decrements the reference count of a `GHook`.
--- If the reference count falls to 0, the `GHook` is removed
--- from the `GHookList` and `g_hook_free()` is called to free it.
---
--- ---
---
---@param hook_list GLib.HookList # a `GHookList`
---@param hook GLib.Hook # the `GHook` to unref
---@return nil
function GLib.Hook.unref(hook_list, hook) end

---@alias GLib.HookCheckFunc fun(data: userdata): (boolean|nil)

---@alias GLib.HookCheckMarshaller fun(hook: GLib.Hook, marshal_data: userdata): (boolean|nil)

---@alias GLib.HookCompareFunc fun(new_hook: GLib.Hook, sibling: GLib.Hook): integer

---@alias GLib.HookFinalizeFunc fun(hook_list: GLib.HookList, hook: GLib.Hook): nil

---@alias GLib.HookFindFunc fun(hook: GLib.Hook, data: userdata): (boolean|nil)

---@enum GLib.HookFlagMask
GLib.HookFlagMask = {}

---@alias GLib.HookFunc fun(data: userdata): nil

--- # record GLib.HookList
---
--- The `GHookList` struct represents a list of hook functions.
---
--- ---
---
---@class GLib.HookList
---@field seq_id integer # the next free `GHook` id
---@field hook_size integer # the size of the `GHookList` elements, in bytes
---@field is_setup integer # 1 if the `GHookList` has been initialized
---@field hooks GLib.Hook # the first `GHook` element in the list
---@field dummy3 userdata # unused
---@field finalize_hook GLib.HookFinalizeFunc # the function to call to finalize a `GHook` element. The default behaviour is to call the hooks `destroy` function
---@field dummy unknown[] # unused
GLib.HookList = {}

--- # method GLib.HookList:clear()
---
--- Removes all the `GHook` elements from a `GHookList`.
---
--- ---
---
---@param self GLib.HookList # a `GHookList`
---@return nil
function GLib.HookList:clear() end

--- # method GLib.HookList:init()
---
--- Initializes a `GHookList`.
--- This must be called before the `GHookList` is used.
---
--- ---
---
---@param self GLib.HookList # a `GHookList`
---@param hook_size integer # the size of each element in the `GHookList`, typically `sizeof (GHook)`.
---@return nil
function GLib.HookList:init(hook_size) end

--- # method GLib.HookList:invoke()
---
--- Calls all of the `GHook` functions in a `GHookList`.
---
--- ---
---
---@param self GLib.HookList # a `GHookList`
---@param may_recurse (boolean|nil) # `true` if functions which are already running (e.g. in another thread) can be called. If set to `false`, these are skipped
---@return nil
function GLib.HookList:invoke(may_recurse) end

--- # method GLib.HookList:invoke_check()
---
--- Calls all of the `GHook` functions in a `GHookList`.
--- Any function which returns `false` is removed from the `GHookList`.
---
--- ---
---
---@param self GLib.HookList # a `GHookList`
---@param may_recurse (boolean|nil) # `true` if functions which are already running (e.g. in another thread) can be called. If set to `false`, these are skipped
---@return nil
function GLib.HookList:invoke_check(may_recurse) end

---@alias GLib.HookMarshaller fun(hook: GLib.Hook, marshal_data: userdata): nil

--- # record GLib.IOChannel
---
--- A data structure representing an IO Channel. The fields should be
--- considered private and should only be accessed with the following
--- functions.
---
--- ---
---
---@class GLib.IOChannel
---@field ref_count integer
---@field funcs GLib.IOFuncs
---@field encoding string
---@field line_term string
---@field line_term_len integer
---@field buf_size integer
---@field read_buf GLib.String
---@field encoded_read_buf GLib.String
---@field write_buf GLib.String
---@field partial_write_buf unknown[]
---@field use_buffer integer
---@field do_encode integer
---@field close_on_unref integer
---@field is_readable integer
---@field is_writeable integer
---@field is_seekable integer
---@field reserved1 userdata
---@field reserved2 userdata
GLib.IOChannel = {}

--- # method GLib.IOChannel:close()
---
--- Close an IO channel. Any pending data to be written will be
--- flushed, ignoring errors. The channel will not be freed until the
--- last reference is dropped using `g_io_channel_unref()`.
---
--- ---
---
---@param self GLib.IOChannel # A `GIOChannel`
---@return nil
function GLib.IOChannel:close() end

--- # method GLib.IOChannel:flush()
---
--- Flushes the write buffer for the GIOChannel.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@return GLib.IOStatus # the status of the operation: One of %G_IO_STATUS_NORMAL, %G_IO_STATUS_AGAIN, or %G_IO_STATUS_ERROR.
function GLib.IOChannel:flush() end

--- # method GLib.IOChannel:get_buffer_condition()
---
--- This function returns a `GIOCondition` depending on whether there
--- is data to be read/space to write data in the internal buffers in
--- the `GIOChannel`. Only the flags %G_IO_IN and %G_IO_OUT may be set.
---
--- ---
---
---@param self GLib.IOChannel # A `GIOChannel`
---@return GLib.IOCondition # A `GIOCondition`
function GLib.IOChannel:get_buffer_condition() end

--- # method GLib.IOChannel:get_buffer_size()
---
--- Gets the buffer size.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@return integer # the size of the buffer.
function GLib.IOChannel:get_buffer_size() end

--- # method GLib.IOChannel:get_buffered()
---
--- Returns whether `channel` is buffered.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@return (boolean|nil) # `true` if the `channel` is buffered.
function GLib.IOChannel:get_buffered() end

--- # method GLib.IOChannel:get_close_on_unref()
---
--- Returns whether the file/socket/whatever associated with `channel`
--- will be closed when `channel` receives its final unref and is
--- destroyed. The default value of this is `true` for channels created
--- by g_io_channel_new_file (), and `false` for all other channels.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`.
---@return (boolean|nil) # `true` if the channel will be closed, `false` otherwise.
function GLib.IOChannel:get_close_on_unref() end

--- # method GLib.IOChannel:get_encoding()
---
--- Gets the encoding for the input/output of the channel.
--- The internal encoding is always UTF-8. The encoding `nil`
--- makes the channel safe for binary data.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@return string # A string containing the encoding, this string is owned by GLib and must not be freed.
function GLib.IOChannel:get_encoding() end

--- # method GLib.IOChannel:get_flags()
---
--- Gets the current flags for a `GIOChannel`, including read-only
--- flags such as %G_IO_FLAG_IS_READABLE.
--- 
--- The values of the flags %G_IO_FLAG_IS_READABLE and %G_IO_FLAG_IS_WRITABLE
--- are cached for internal use by the channel when it is created.
--- If they should change at some later point (e.g. partial shutdown
--- of a socket with the UNIX `shutdown()` function), the user
--- should immediately call `g_io_channel_get_flags()` to update
--- the internal values of these flags.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@return GLib.IOFlags # the flags which are set on the channel
function GLib.IOChannel:get_flags() end

--- # method GLib.IOChannel:get_line_term()
---
--- This returns the string that `GIOChannel` uses to determine
--- where in the file a line break occurs. A value of `nil`
--- indicates autodetection.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param length? integer # a location to return the length of the line terminator
---@return string # The line termination string. This value is owned by GLib and must not be freed.
function GLib.IOChannel:get_line_term(length) end

--- # method GLib.IOChannel:init()
---
--- Initializes a `GIOChannel` struct.
--- 
--- This is called by each of the above functions when creating a
--- `GIOChannel`, and so is not often needed by the application
--- programmer (unless you are creating a new type of `GIOChannel`).
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@return nil
function GLib.IOChannel:init() end

--- # method GLib.IOChannel:read()
---
--- Reads data from a `GIOChannel`.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param buf string # a buffer to read the data into (which should be at least count bytes long)
---@param count integer # the number of bytes to read from the `GIOChannel`
---@param bytes_read integer # returns the number of bytes actually read
---@return GLib.IOError # %G_IO_ERROR_NONE if the operation was successful.
function GLib.IOChannel:read(buf, count, bytes_read) end

--- # method GLib.IOChannel:read_chars()
---
--- Replacement for `g_io_channel_read()` with the new API.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param buf unknown[] # a buffer to read data into
---@param count integer # the size of the buffer. Note that the buffer may not be completely filled even if there is data in the buffer if the remaining data is not a complete character.
---@param bytes_read? integer # The number of bytes read. This may be zero even on success if count < 6 and the channel's encoding is non-`nil`. This indicates that the next UTF-8 character is too wide for the buffer.
---@return GLib.IOStatus # the status of the operation.
function GLib.IOChannel:read_chars(buf, count, bytes_read) end

--- # method GLib.IOChannel:read_line()
---
--- Reads a line, including the terminating character(s),
--- from a `GIOChannel` into a newly-allocated string.
--- `str_return` will contain allocated memory if the return
--- is %G_IO_STATUS_NORMAL.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param str_return string # The line read from the `GIOChannel`, including the line terminator. This data should be freed with `g_free()` when no longer needed. This is a nul-terminated string. If a `length` of zero is returned, this will be `nil` instead.
---@param length? integer # location to store length of the read data, or `nil`
---@param terminator_pos? integer # location to store position of line terminator, or `nil`
---@return GLib.IOStatus # the status of the operation.
function GLib.IOChannel:read_line(str_return, length, terminator_pos) end

--- # method GLib.IOChannel:read_line_string()
---
--- Reads a line from a `GIOChannel`, using a `GString` as a buffer.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param buffer GLib.String # a `GString` into which the line will be written. If `buffer` already contains data, the old data will be overwritten.
---@param terminator_pos? integer # location to store position of line terminator, or `nil`
---@return GLib.IOStatus # the status of the operation.
function GLib.IOChannel:read_line_string(buffer, terminator_pos) end

--- # method GLib.IOChannel:read_to_end()
---
--- Reads all the remaining data from the file.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param str_return unknown[] # Location to store a pointer to a string holding the remaining data in the `GIOChannel`. This data should be freed with `g_free()` when no longer needed. This data is terminated by an extra nul character, but there may be other nuls in the intervening data.
---@param length integer # location to store length of the data
---@return GLib.IOStatus # %G_IO_STATUS_NORMAL on success. This function never returns %G_IO_STATUS_EOF.
function GLib.IOChannel:read_to_end(str_return, length) end

--- # method GLib.IOChannel:read_unichar()
---
--- Reads a Unicode character from `channel`.
--- This function cannot be called on a channel with `nil` encoding.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param thechar integer # a location to return a character
---@return GLib.IOStatus # a `GIOStatus`
function GLib.IOChannel:read_unichar(thechar) end

--- # method GLib.IOChannel:ref()
---
--- Increments the reference count of a `GIOChannel`.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@return GLib.IOChannel # the `channel` that was passed in (since 2.6)
function GLib.IOChannel:ref() end

--- # method GLib.IOChannel:seek()
---
--- Sets the current position in the `GIOChannel`, similar to the standard
--- library function `fseek()`.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param offset integer # an offset, in bytes, which is added to the position specified by `type`
---@param type GLib.SeekType # the position in the file, which can be %G_SEEK_CUR (the current position), %G_SEEK_SET (the start of the file), or %G_SEEK_END (the end of the file)
---@return GLib.IOError # %G_IO_ERROR_NONE if the operation was successful.
function GLib.IOChannel:seek(offset, type) end

--- # method GLib.IOChannel:seek_position()
---
--- Replacement for `g_io_channel_seek()` with the new API.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param offset integer # The offset in bytes from the position specified by `type`
---@param type GLib.SeekType # a `GSeekType`. The type %G_SEEK_CUR is only allowed in those cases where a call to g_io_channel_set_encoding () is allowed. See the documentation for g_io_channel_set_encoding () for details.
---@return GLib.IOStatus # the status of the operation.
function GLib.IOChannel:seek_position(offset, type) end

--- # method GLib.IOChannel:set_buffer_size()
---
--- Sets the buffer size.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param size integer # the size of the buffer, or 0 to let GLib pick a good size
---@return nil
function GLib.IOChannel:set_buffer_size(size) end

--- # method GLib.IOChannel:set_buffered()
---
--- The buffering state can only be set if the channel's encoding
--- is `nil`. For any other encoding, the channel must be buffered.
--- 
--- A buffered channel can only be set unbuffered if the channel's
--- internal buffers have been flushed. Newly created channels or
--- channels which have returned %G_IO_STATUS_EOF
--- not require such a flush. For write-only channels, a call to
--- g_io_channel_flush () is sufficient. For all other channels,
--- the buffers may be flushed by a call to g_io_channel_seek_position ().
--- This includes the possibility of seeking with seek type %G_SEEK_CUR
--- and an offset of zero. Note that this means that socket-based
--- channels cannot be set unbuffered once they have had data
--- read from them.
--- 
--- On unbuffered channels, it is safe to mix read and write
--- calls from the new and old APIs, if this is necessary for
--- maintaining old code.
--- 
--- The default state of the channel is buffered.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param buffered (boolean|nil) # whether to set the channel buffered or unbuffered
---@return nil
function GLib.IOChannel:set_buffered(buffered) end

--- # method GLib.IOChannel:set_close_on_unref()
---
--- Whether to close the channel on the final unref of the `GIOChannel`
--- data structure. The default value of this is `true` for channels
--- created by g_io_channel_new_file (), and `false` for all other channels.
--- 
--- Setting this flag to `true` for a channel you have already closed
--- can cause problems when the final reference to the `GIOChannel` is dropped.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param do_close (boolean|nil) # Whether to close the channel on the final unref of the GIOChannel data structure.
---@return nil
function GLib.IOChannel:set_close_on_unref(do_close) end

--- # method GLib.IOChannel:set_encoding()
---
--- Sets the encoding for the input/output of the channel.
--- The internal encoding is always UTF-8. The default encoding
--- for the external file is UTF-8.
--- 
--- The encoding `nil` is safe to use with binary data.
--- 
--- The encoding can only be set if one of the following conditions
--- is true:
--- 
--- - The channel was just created, and has not been written to or read from yet.
--- 
--- - The channel is write-only.
--- 
--- - The channel is a file, and the file pointer was just repositioned
---   by a call to `g_io_channel_seek_position()`. (This flushes all the
---   internal buffers.)
--- 
--- - The current encoding is `nil` or UTF-8.
--- 
--- - One of the (new API) read functions has just returned %G_IO_STATUS_EOF
---   (or, in the case of `g_io_channel_read_to_end()`, %G_IO_STATUS_NORMAL).
--- 
--- -  One of the functions `g_io_channel_read_chars()` or
---    `g_io_channel_read_unichar()` has returned %G_IO_STATUS_AGAIN or
---    %G_IO_STATUS_ERROR. This may be useful in the case of
---    %G_CONVERT_ERROR_ILLEGAL_SEQUENCE.
---    Returning one of these statuses from `g_io_channel_read_line()`,
---    `g_io_channel_read_line_string()`, or `g_io_channel_read_to_end()`
---    does not guarantee that the encoding can be changed.
--- 
--- Channels which do not meet one of the above conditions cannot call
--- `g_io_channel_seek_position()` with an offset of %G_SEEK_CUR, and, if
--- they are "seekable", cannot call `g_io_channel_write_chars()` after
--- calling one of the API "read" functions.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param encoding? string # the encoding type
---@return GLib.IOStatus # %G_IO_STATUS_NORMAL if the encoding was successfully set
function GLib.IOChannel:set_encoding(encoding) end

--- # method GLib.IOChannel:set_flags()
---
--- Sets the (writeable) flags in `channel` to (`flags` & %G_IO_FLAG_SET_MASK).
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param flags GLib.IOFlags # the flags to set on the IO channel
---@return GLib.IOStatus # the status of the operation.
function GLib.IOChannel:set_flags(flags) end

--- # method GLib.IOChannel:set_line_term()
---
--- This sets the string that `GIOChannel` uses to determine
--- where in the file a line break occurs.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param line_term? string # The line termination string. Use `nil` for autodetect. Autodetection breaks on "\n", "\r\n", "\r", "\0", and the Unicode paragraph separator. Autodetection should not be used for anything other than file-based channels.
---@param length integer # The length of the termination string. If -1 is passed, the string is assumed to be nul-terminated. This option allows termination strings with embedded nuls.
---@return nil
function GLib.IOChannel:set_line_term(line_term, length) end

--- # method GLib.IOChannel:shutdown()
---
--- Close an IO channel. Any pending data to be written will be
--- flushed if `flush` is `true`. The channel will not be freed until the
--- last reference is dropped using `g_io_channel_unref()`.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param flush (boolean|nil) # if `true`, flush pending
---@return GLib.IOStatus # the status of the operation.
function GLib.IOChannel:shutdown(flush) end

--- # method GLib.IOChannel:unix_get_fd()
---
--- Returns the file descriptor of the `GIOChannel`.
--- 
--- On Windows this function returns the file descriptor or socket of
--- the `GIOChannel`.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`, created with `g_io_channel_unix_new()`.
---@return integer # the file descriptor of the `GIOChannel`.
function GLib.IOChannel:unix_get_fd() end

--- # method GLib.IOChannel:unref()
---
--- Decrements the reference count of a `GIOChannel`.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@return nil
function GLib.IOChannel:unref() end

--- # method GLib.IOChannel:write()
---
--- Writes data to a `GIOChannel`.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param buf string # the buffer containing the data to write
---@param count integer # the number of bytes to write
---@param bytes_written integer # the number of bytes actually written
---@return GLib.IOError # %G_IO_ERROR_NONE if the operation was successful.
function GLib.IOChannel:write(buf, count, bytes_written) end

--- # method GLib.IOChannel:write_chars()
---
--- Replacement for `g_io_channel_write()` with the new API.
--- 
--- On seekable channels with encodings other than `nil` or UTF-8, generic
--- mixing of reading and writing is not allowed. A call to g_io_channel_write_chars ()
--- may only be made on a channel from which data has been read in the
--- cases described in the documentation for g_io_channel_set_encoding ().
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param buf unknown[] # a buffer to write data from
---@param count integer # the size of the buffer. If -1, the buffer is taken to be a nul-terminated string.
---@param bytes_written integer # The number of bytes written. This can be nonzero even if the return value is not %G_IO_STATUS_NORMAL. If the return value is %G_IO_STATUS_NORMAL and the channel is blocking, this will always be equal to `count` if `count` >= 0.
---@return GLib.IOStatus # the status of the operation.
function GLib.IOChannel:write_chars(buf, count, bytes_written) end

--- # method GLib.IOChannel:write_unichar()
---
--- Writes a Unicode character to `channel`.
--- This function cannot be called on a channel with `nil` encoding.
---
--- ---
---
---@param self GLib.IOChannel # a `GIOChannel`
---@param thechar integer # a character
---@return GLib.IOStatus # a `GIOStatus`
function GLib.IOChannel:write_unichar(thechar) end

--- # function GLib.IOChannel.error_from_errno()
---
--- Converts an `errno` error number to a `GIOChannelError`.
---
--- ---
---
---@param en integer # an `errno` error number, e.g. `EINVAL`
---@return GLib.IOChannelError # a `GIOChannelError` error number, e.g. %G_IO_CHANNEL_ERROR_INVAL.
function GLib.IOChannel.error_from_errno(en) end

--- # function GLib.IOChannel.error_quark()
---
---@return GLib.Quark
function GLib.IOChannel.error_quark() end

--- # function GLib.IOChannel.new_file()
---
--- Open a file `filename` as a `GIOChannel` using mode `mode`. This
--- channel will be closed when the last reference to it is dropped,
--- so there is no need to call `g_io_channel_close()` (though doing
--- so will not cause problems, as long as no attempt is made to
--- access the channel after it is closed).
---
--- ---
---
---@param filename string # A string containing the name of a file
---@param mode string # One of "r", "w", "a", "r+", "w+", "a+". These have the same meaning as in `fopen()`
---@return GLib.IOChannel # A `GIOChannel` on success, `nil` on failure.
function GLib.IOChannel.new_file(filename, mode) end

--- # function GLib.IOChannel.unix_new()
---
--- Creates a new `GIOChannel` given a file descriptor. On UNIX systems
--- this works for plain files, pipes, and sockets.
--- 
--- The returned `GIOChannel` has a reference count of 1.
--- 
--- The default encoding for `GIOChannel` is UTF-8. If your application
--- is reading output from a command using via pipe, you may need to set
--- the encoding to the encoding of the current locale (see
--- `g_get_charset()`) with the `g_io_channel_set_encoding()` function.
--- By default, the fd passed will not be closed when the final reference
--- to the `GIOChannel` data structure is dropped.
--- 
--- If you want to read raw binary data without interpretation, then
--- call the `g_io_channel_set_encoding()` function with `nil` for the
--- encoding argument.
--- 
--- This function is available in GLib on Windows, too, but you should
--- avoid using it on Windows. The domain of file descriptors and
--- sockets overlap. There is no way for GLib to know which one you mean
--- in case the argument you pass to this function happens to be both a
--- valid file descriptor and socket. If that happens a warning is
--- issued, and GLib assumes that it is the file descriptor you mean.
---
--- ---
---
---@param fd integer # a file descriptor.
---@return GLib.IOChannel # a new `GIOChannel`.
function GLib.IOChannel.unix_new(fd) end

---@enum GLib.IOChannelError
GLib.IOChannelError = {}

---@enum GLib.IOCondition
GLib.IOCondition = {}

---@enum GLib.IOError
GLib.IOError = {}

---@enum GLib.IOFlags
GLib.IOFlags = {}

---@alias GLib.IOFunc fun(source: GLib.IOChannel, condition: GLib.IOCondition, data: userdata): (boolean|nil)

--- # record GLib.IOFuncs
---
--- A table of functions used to handle different types of `GIOChannel`
--- in a generic way.
---
--- ---
---
---@class GLib.IOFuncs
---@field io_read fun(channel: GLib.IOChannel, buf: string, count: integer, bytes_read: integer): GLib.IOStatus
---@field io_write fun(channel: GLib.IOChannel, buf: string, count: integer, bytes_written: integer): GLib.IOStatus
---@field io_seek fun(channel: GLib.IOChannel, offset: integer, type: GLib.SeekType): GLib.IOStatus
---@field io_close fun(channel: GLib.IOChannel): GLib.IOStatus
---@field io_create_watch fun(channel: GLib.IOChannel, condition: GLib.IOCondition): GLib.Source
---@field io_free fun(channel: GLib.IOChannel): nil
---@field io_set_flags fun(channel: GLib.IOChannel, flags: GLib.IOFlags): GLib.IOStatus
---@field io_get_flags fun(channel: GLib.IOChannel): GLib.IOFlags
GLib.IOFuncs = {}

---@enum GLib.IOStatus
GLib.IOStatus = {}

--- # record GLib.KeyFile
---
--- The GKeyFile struct contains only private data
--- and should not be accessed directly.
---
--- ---
---
---@class GLib.KeyFile
---@operator call: GLib.KeyFile
GLib.KeyFile = {}

--- # method GLib.KeyFile:get_boolean()
---
--- Returns the value associated with `key` under `group_name` as a
--- boolean.
--- 
--- If `key` cannot be found then `false` is returned and `error` is set
--- to %G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value
--- associated with `key` cannot be interpreted as a boolean then `false`
--- is returned and `error` is set to %G_KEY_FILE_ERROR_INVALID_VALUE.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@return (boolean|nil) # the value associated with the key as a boolean, or `false` if the key was not found or could not be parsed.
function GLib.KeyFile:get_boolean(group_name, key) end

--- # method GLib.KeyFile:get_boolean_list()
---
--- Returns the values associated with `key` under `group_name` as
--- booleans.
--- 
--- If `key` cannot be found then `nil` is returned and `error` is set to
--- %G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
--- with `key` cannot be interpreted as booleans then `nil` is returned
--- and `error` is set to %G_KEY_FILE_ERROR_INVALID_VALUE.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param length integer # the number of booleans returned
---@return unknown[] # the values associated with the key as a list of booleans, or `nil` if the key was not found or could not be parsed. The returned list of booleans should be freed with `g_free()` when no longer needed.
function GLib.KeyFile:get_boolean_list(group_name, key, length) end

--- # method GLib.KeyFile:get_comment()
---
--- Retrieves a comment above `key` from `group_name`.
--- If `key` is `nil` then `comment` will be read from above
--- `group_name`. If both `key` and `group_name` are `nil`, then
--- `comment` will be read from above the first group in the file.
--- 
--- Note that the returned string does not include the '#' comment markers,
--- but does include any whitespace after them (on each line). It includes
--- the line breaks between lines, but does not include the final line break.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name? string # a group name, or `nil`
---@param key? string # a key
---@return string # a comment that should be freed with `g_free()`
function GLib.KeyFile:get_comment(group_name, key) end

--- # method GLib.KeyFile:get_double()
---
--- Returns the value associated with `key` under `group_name` as a
--- double. If `group_name` is `nil`, the start_group is used.
--- 
--- If `key` cannot be found then 0.0 is returned and `error` is set to
--- %G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated
--- with `key` cannot be interpreted as a double then 0.0 is returned
--- and `error` is set to %G_KEY_FILE_ERROR_INVALID_VALUE.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@return number # the value associated with the key as a double, or 0.0 if the key was not found or could not be parsed.
function GLib.KeyFile:get_double(group_name, key) end

--- # method GLib.KeyFile:get_double_list()
---
--- Returns the values associated with `key` under `group_name` as
--- doubles.
--- 
--- If `key` cannot be found then `nil` is returned and `error` is set to
--- %G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
--- with `key` cannot be interpreted as doubles then `nil` is returned
--- and `error` is set to %G_KEY_FILE_ERROR_INVALID_VALUE.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param length integer # the number of doubles returned
---@return unknown[] # the values associated with the key as a list of doubles, or `nil` if the key was not found or could not be parsed. The returned list of doubles should be freed with `g_free()` when no longer needed.
function GLib.KeyFile:get_double_list(group_name, key, length) end

--- # method GLib.KeyFile:get_groups()
---
--- Returns all groups in the key file loaded with `key_file`.
--- The array of returned groups will be `nil`-terminated, so
--- `length` may optionally be `nil`.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param length? integer # return location for the number of returned groups, or `nil`
---@return unknown[] # a newly-allocated `nil`-terminated array of strings. Use `g_strfreev()` to free it.
function GLib.KeyFile:get_groups(length) end

--- # method GLib.KeyFile:get_int64()
---
--- Returns the value associated with `key` under `group_name` as a signed
--- 64-bit integer. This is similar to `g_key_file_get_integer()` but can return
--- 64-bit results without truncation.
---
--- ---
---
---@param self GLib.KeyFile # a non-`nil` `GKeyFile`
---@param group_name string # a non-`nil` group name
---@param key string # a non-`nil` key
---@return integer # the value associated with the key as a signed 64-bit integer, or 0 if the key was not found or could not be parsed.
function GLib.KeyFile:get_int64(group_name, key) end

--- # method GLib.KeyFile:get_integer()
---
--- Returns the value associated with `key` under `group_name` as an
--- integer.
--- 
--- If `key` cannot be found then 0 is returned and `error` is set to
--- %G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated
--- with `key` cannot be interpreted as an integer, or is out of range
--- for a `gint`, then 0 is returned
--- and `error` is set to %G_KEY_FILE_ERROR_INVALID_VALUE.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@return integer # the value associated with the key as an integer, or 0 if the key was not found or could not be parsed.
function GLib.KeyFile:get_integer(group_name, key) end

--- # method GLib.KeyFile:get_integer_list()
---
--- Returns the values associated with `key` under `group_name` as
--- integers.
--- 
--- If `key` cannot be found then `nil` is returned and `error` is set to
--- %G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
--- with `key` cannot be interpreted as integers, or are out of range for
--- `gint`, then `nil` is returned
--- and `error` is set to %G_KEY_FILE_ERROR_INVALID_VALUE.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param length integer # the number of integers returned
---@return unknown[] # the values associated with the key as a list of integers, or `nil` if the key was not found or could not be parsed. The returned list of integers should be freed with `g_free()` when no longer needed.
function GLib.KeyFile:get_integer_list(group_name, key, length) end

--- # method GLib.KeyFile:get_keys()
---
--- Returns all keys for the group name `group_name`.  The array of
--- returned keys will be `nil`-terminated, so `length` may
--- optionally be `nil`. In the event that the `group_name` cannot
--- be found, `nil` is returned and `error` is set to
--- %G_KEY_FILE_ERROR_GROUP_NOT_FOUND.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param length? integer # return location for the number of keys returned, or `nil`
---@return unknown[] # a newly-allocated `nil`-terminated array of strings. Use `g_strfreev()` to free it.
function GLib.KeyFile:get_keys(group_name, length) end

--- # method GLib.KeyFile:get_locale_for_key()
---
--- Returns the actual locale which the result of
--- `g_key_file_get_locale_string()` or `g_key_file_get_locale_string_list()`
--- came from.
--- 
--- If calling `g_key_file_get_locale_string()` or
--- `g_key_file_get_locale_string_list()` with exactly the same `key_file`,
--- `group_name`, `key` and `locale`, the result of those functions will
--- have originally been tagged with the locale that is the result of
--- this function.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param locale? string # a locale identifier or `nil`
---@return string # the locale from the file, or `nil` if the key was not found or the entry in the file was was untranslated
function GLib.KeyFile:get_locale_for_key(group_name, key, locale) end

--- # method GLib.KeyFile:get_locale_string()
---
--- Returns the value associated with `key` under `group_name`
--- translated in the given `locale` if available.  If `locale` is
--- `nil` then the current locale is assumed.
--- 
--- If `locale` is to be non-`nil`, or if the current locale will change over
--- the lifetime of the `GKeyFile`, it must be loaded with
--- %G_KEY_FILE_KEEP_TRANSLATIONS in order to load strings for all locales.
--- 
--- If `key` cannot be found then `nil` is returned and `error` is set
--- to %G_KEY_FILE_ERROR_KEY_NOT_FOUND. If the value associated
--- with `key` cannot be interpreted or no suitable translation can
--- be found then the untranslated value is returned.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param locale? string # a locale identifier or `nil`
---@return string # a newly allocated string or `nil` if the specified key cannot be found.
function GLib.KeyFile:get_locale_string(group_name, key, locale) end

--- # method GLib.KeyFile:get_locale_string_list()
---
--- Returns the values associated with `key` under `group_name`
--- translated in the given `locale` if available.  If `locale` is
--- `nil` then the current locale is assumed.
--- 
--- If `locale` is to be non-`nil`, or if the current locale will change over
--- the lifetime of the `GKeyFile`, it must be loaded with
--- %G_KEY_FILE_KEEP_TRANSLATIONS in order to load strings for all locales.
--- 
--- If `key` cannot be found then `nil` is returned and `error` is set
--- to %G_KEY_FILE_ERROR_KEY_NOT_FOUND. If the values associated
--- with `key` cannot be interpreted or no suitable translations
--- can be found then the untranslated values are returned. The
--- returned array is `nil`-terminated, so `length` may optionally
--- be `nil`.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param locale? string # a locale identifier or `nil`
---@param length? integer # return location for the number of returned strings or `nil`
---@return unknown[] # a newly allocated `nil`-terminated string array or `nil` if the key isn't found. The string array should be freed with `g_strfreev()`.
function GLib.KeyFile:get_locale_string_list(group_name, key, locale, length) end

--- # method GLib.KeyFile:get_start_group()
---
--- Returns the name of the start group of the file.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@return string # The start group of the key file.
function GLib.KeyFile:get_start_group() end

--- # method GLib.KeyFile:get_string()
---
--- Returns the string value associated with `key` under `group_name`.
--- Unlike `g_key_file_get_value()`, this function handles escape sequences
--- like \s.
--- 
--- In the event the key cannot be found, `nil` is returned and
--- `error` is set to %G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the
--- event that the `group_name` cannot be found, `nil` is returned
--- and `error` is set to %G_KEY_FILE_ERROR_GROUP_NOT_FOUND.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@return string # a newly allocated string or `nil` if the specified key cannot be found.
function GLib.KeyFile:get_string(group_name, key) end

--- # method GLib.KeyFile:get_string_list()
---
--- Returns the values associated with `key` under `group_name`.
--- 
--- In the event the key cannot be found, `nil` is returned and
--- `error` is set to %G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the
--- event that the `group_name` cannot be found, `nil` is returned
--- and `error` is set to %G_KEY_FILE_ERROR_GROUP_NOT_FOUND.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param length? integer # return location for the number of returned strings, or `nil`
---@return unknown[] # a `nil`-terminated string array or `nil` if the specified key cannot be found. The array should be freed with `g_strfreev()`.
function GLib.KeyFile:get_string_list(group_name, key, length) end

--- # method GLib.KeyFile:get_uint64()
---
--- Returns the value associated with `key` under `group_name` as an unsigned
--- 64-bit integer. This is similar to `g_key_file_get_integer()` but can return
--- large positive results without truncation.
---
--- ---
---
---@param self GLib.KeyFile # a non-`nil` `GKeyFile`
---@param group_name string # a non-`nil` group name
---@param key string # a non-`nil` key
---@return integer # the value associated with the key as an unsigned 64-bit integer, or 0 if the key was not found or could not be parsed.
function GLib.KeyFile:get_uint64(group_name, key) end

--- # method GLib.KeyFile:get_value()
---
--- Returns the raw value associated with `key` under `group_name`.
--- Use `g_key_file_get_string()` to retrieve an unescaped UTF-8 string.
--- 
--- In the event the key cannot be found, `nil` is returned and
--- `error` is set to %G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the
--- event that the `group_name` cannot be found, `nil` is returned
--- and `error` is set to %G_KEY_FILE_ERROR_GROUP_NOT_FOUND.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@return string # a newly allocated string or `nil` if the specified key cannot be found.
function GLib.KeyFile:get_value(group_name, key) end

--- # method GLib.KeyFile:has_group()
---
--- Looks whether the key file has the group `group_name`.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@return (boolean|nil) # `true` if `group_name` is a part of `key_file`, `false` otherwise.
function GLib.KeyFile:has_group(group_name) end

--- # method GLib.KeyFile:load_from_bytes()
---
--- Loads a key file from the data in `bytes` into an empty `GKeyFile` structure.
--- If the object cannot be created then %error is set to a `GKeyFileError`.
---
--- ---
---
---@param self GLib.KeyFile # an empty `GKeyFile` struct
---@param bytes GLib.Bytes # a `GBytes`
---@param flags GLib.KeyFileFlags # flags from `GKeyFileFlags`
---@return (boolean|nil) # `true` if a key file could be loaded, `false` otherwise
function GLib.KeyFile:load_from_bytes(bytes, flags) end

--- # method GLib.KeyFile:load_from_data()
---
--- Loads a key file from memory into an empty `GKeyFile` structure.
--- If the object cannot be created then %error is set to a `GKeyFileError`.
---
--- ---
---
---@param self GLib.KeyFile # an empty `GKeyFile` struct
---@param data string # key file loaded in memory
---@param length integer # the length of `data` in bytes (or (gsize)-1 if data is nul-terminated)
---@param flags GLib.KeyFileFlags # flags from `GKeyFileFlags`
---@return (boolean|nil) # `true` if a key file could be loaded, `false` otherwise
function GLib.KeyFile:load_from_data(data, length, flags) end

--- # method GLib.KeyFile:load_from_data_dirs()
---
--- This function looks for a key file named `file` in the paths
--- returned from `g_get_user_data_dir()` and `g_get_system_data_dirs()`,
--- loads the file into `key_file` and returns the file's full path in
--- `full_path`.  If the file could not be loaded then an %error is
--- set to either a `GFileError` or `GKeyFileError`.
---
--- ---
---
---@param self GLib.KeyFile # an empty `GKeyFile` struct
---@param file string # a relative path to a filename to open and parse
---@param full_path? string # return location for a string containing the full path of the file, or `nil`
---@param flags GLib.KeyFileFlags # flags from `GKeyFileFlags`
---@return (boolean|nil) # `true` if a key file could be loaded, `false` otherwise
function GLib.KeyFile:load_from_data_dirs(file, full_path, flags) end

--- # method GLib.KeyFile:load_from_dirs()
---
--- This function looks for a key file named `file` in the paths
--- specified in `search_dirs`, loads the file into `key_file` and
--- returns the file's full path in `full_path`.
--- 
--- If the file could not be found in any of the `search_dirs`,
--- %G_KEY_FILE_ERROR_NOT_FOUND is returned. If
--- the file is found but the OS returns an error when opening or reading the
--- file, a %G_FILE_ERROR is returned. If there is a problem parsing the file, a
--- %G_KEY_FILE_ERROR is returned.
---
--- ---
---
---@param self GLib.KeyFile # an empty `GKeyFile` struct
---@param file string # a relative path to a filename to open and parse
---@param search_dirs unknown[] # `nil`-terminated array of directories to search
---@param full_path? string # return location for a string containing the full path of the file, or `nil`
---@param flags GLib.KeyFileFlags # flags from `GKeyFileFlags`
---@return (boolean|nil) # `true` if a key file could be loaded, `false` otherwise
function GLib.KeyFile:load_from_dirs(file, search_dirs, full_path, flags) end

--- # method GLib.KeyFile:load_from_file()
---
--- Loads a key file into an empty `GKeyFile` structure.
--- 
--- If the OS returns an error when opening or reading the file, a
--- %G_FILE_ERROR is returned. If there is a problem parsing the file, a
--- %G_KEY_FILE_ERROR is returned.
--- 
--- This function will never return a %G_KEY_FILE_ERROR_NOT_FOUND error. If the
--- `file` is not found, %G_FILE_ERROR_NOENT is returned.
---
--- ---
---
---@param self GLib.KeyFile # an empty `GKeyFile` struct
---@param file string # the path of a filename to load, in the GLib filename encoding
---@param flags GLib.KeyFileFlags # flags from `GKeyFileFlags`
---@return (boolean|nil) # `true` if a key file could be loaded, `false` otherwise
function GLib.KeyFile:load_from_file(file, flags) end

--- # method GLib.KeyFile:remove_comment()
---
--- Removes a comment above `key` from `group_name`.
--- If `key` is `nil` then `comment` will be removed above `group_name`.
--- If both `key` and `group_name` are `nil`, then `comment` will
--- be removed above the first group in the file.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name? string # a group name, or `nil`
---@param key? string # a key
---@return (boolean|nil) # `true` if the comment was removed, `false` otherwise
function GLib.KeyFile:remove_comment(group_name, key) end

--- # method GLib.KeyFile:remove_group()
---
--- Removes the specified group, `group_name`,
--- from the key file.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@return (boolean|nil) # `true` if the group was removed, `false` otherwise
function GLib.KeyFile:remove_group(group_name) end

--- # method GLib.KeyFile:remove_key()
---
--- Removes `key` in `group_name` from the key file.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key name to remove
---@return (boolean|nil) # `true` if the key was removed, `false` otherwise
function GLib.KeyFile:remove_key(group_name, key) end

--- # method GLib.KeyFile:save_to_file()
---
--- Writes the contents of `key_file` to `filename` using
--- `g_file_set_contents()`. If you need stricter guarantees about durability of
--- the written file than are provided by `g_file_set_contents()`, use
--- `g_file_set_contents_full()` with the return value of `g_key_file_to_data()`.
--- 
--- This function can fail for any of the reasons that
--- `g_file_set_contents()` may fail.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param filename string # the name of the file to write to
---@return (boolean|nil) # `true` if successful, else `false` with `error` set
function GLib.KeyFile:save_to_file(filename) end

--- # method GLib.KeyFile:set_boolean()
---
--- Associates a new boolean value with `key` under `group_name`.
--- If `key` cannot be found then it is created.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param value (boolean|nil) # `true` or `false`
---@return nil
function GLib.KeyFile:set_boolean(group_name, key, value) end

--- # method GLib.KeyFile:set_boolean_list()
---
--- Associates a list of boolean values with `key` under `group_name`.
--- If `key` cannot be found then it is created.
--- If `group_name` is `nil`, the start_group is used.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param list unknown[] # an array of boolean values
---@param length integer # length of `list`
---@return nil
function GLib.KeyFile:set_boolean_list(group_name, key, list, length) end

--- # method GLib.KeyFile:set_comment()
---
--- Places a comment above `key` from `group_name`.
--- 
--- If `key` is `nil` then `comment` will be written above `group_name`.
--- If both `key` and `group_name`  are `nil`, then `comment` will be
--- written above the first group in the file.
--- 
--- Note that this function prepends a '#' comment marker to
--- each line of `comment`.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name? string # a group name, or `nil`
---@param key? string # a key
---@param comment string # a comment
---@return (boolean|nil) # `true` if the comment was written, `false` otherwise
function GLib.KeyFile:set_comment(group_name, key, comment) end

--- # method GLib.KeyFile:set_double()
---
--- Associates a new double value with `key` under `group_name`.
--- If `key` cannot be found then it is created.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param value number # a double value
---@return nil
function GLib.KeyFile:set_double(group_name, key, value) end

--- # method GLib.KeyFile:set_double_list()
---
--- Associates a list of double values with `key` under
--- `group_name`.  If `key` cannot be found then it is created.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param list unknown[] # an array of double values
---@param length integer # number of double values in `list`
---@return nil
function GLib.KeyFile:set_double_list(group_name, key, list, length) end

--- # method GLib.KeyFile:set_int64()
---
--- Associates a new integer value with `key` under `group_name`.
--- If `key` cannot be found then it is created.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param value integer # an integer value
---@return nil
function GLib.KeyFile:set_int64(group_name, key, value) end

--- # method GLib.KeyFile:set_integer()
---
--- Associates a new integer value with `key` under `group_name`.
--- If `key` cannot be found then it is created.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param value integer # an integer value
---@return nil
function GLib.KeyFile:set_integer(group_name, key, value) end

--- # method GLib.KeyFile:set_integer_list()
---
--- Associates a list of integer values with `key` under `group_name`.
--- If `key` cannot be found then it is created.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param list unknown[] # an array of integer values
---@param length integer # number of integer values in `list`
---@return nil
function GLib.KeyFile:set_integer_list(group_name, key, list, length) end

--- # method GLib.KeyFile:set_list_separator()
---
--- Sets the character which is used to separate
--- values in lists. Typically ';' or ',' are used
--- as separators. The default list separator is ';'.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param separator integer # the separator
---@return nil
function GLib.KeyFile:set_list_separator(separator) end

--- # method GLib.KeyFile:set_locale_string()
---
--- Associates a string value for `key` and `locale` under `group_name`.
--- If the translation for `key` cannot be found then it is created.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param locale string # a locale identifier
---@param string string # a string
---@return nil
function GLib.KeyFile:set_locale_string(group_name, key, locale, string) end

--- # method GLib.KeyFile:set_locale_string_list()
---
--- Associates a list of string values for `key` and `locale` under
--- `group_name`.  If the translation for `key` cannot be found then
--- it is created.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param locale string # a locale identifier
---@param list unknown[] # a `nil`-terminated array of locale string values
---@param length integer # the length of `list`
---@return nil
function GLib.KeyFile:set_locale_string_list(group_name, key, locale, list, length) end

--- # method GLib.KeyFile:set_string()
---
--- Associates a new string value with `key` under `group_name`.
--- If `key` cannot be found then it is created.
--- If `group_name` cannot be found then it is created.
--- Unlike `g_key_file_set_value()`, this function handles characters
--- that need escaping, such as newlines.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param string string # a string
---@return nil
function GLib.KeyFile:set_string(group_name, key, string) end

--- # method GLib.KeyFile:set_string_list()
---
--- Associates a list of string values for `key` under `group_name`.
--- If `key` cannot be found then it is created.
--- If `group_name` cannot be found then it is created.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param list unknown[] # an array of string values
---@param length integer # number of string values in `list`
---@return nil
function GLib.KeyFile:set_string_list(group_name, key, list, length) end

--- # method GLib.KeyFile:set_uint64()
---
--- Associates a new integer value with `key` under `group_name`.
--- If `key` cannot be found then it is created.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param value integer # an integer value
---@return nil
function GLib.KeyFile:set_uint64(group_name, key, value) end

--- # method GLib.KeyFile:set_value()
---
--- Associates a new value with `key` under `group_name`.
--- 
--- If `key` cannot be found then it is created. If `group_name` cannot
--- be found then it is created. To set an UTF-8 string which may contain
--- characters that need escaping (such as newlines or spaces), use
--- `g_key_file_set_string()`.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param group_name string # a group name
---@param key string # a key
---@param value string # a string
---@return nil
function GLib.KeyFile:set_value(group_name, key, value) end

--- # method GLib.KeyFile:to_data()
---
--- This function outputs `key_file` as a string.
--- 
--- Note that this function never reports an error,
--- so it is safe to pass `nil` as `error`.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@param length? integer # return location for the length of the returned string, or `nil`
---@return string # a newly allocated string holding the contents of the `GKeyFile`
function GLib.KeyFile:to_data(length) end

--- # method GLib.KeyFile:unref()
---
--- Decreases the reference count of `key_file` by 1. If the reference count
--- reaches zero, frees the key file and all its allocated memory.
---
--- ---
---
---@param self GLib.KeyFile # a `GKeyFile`
---@return nil
function GLib.KeyFile:unref() end

--- # function GLib.KeyFile.error_quark()
---
---@return GLib.Quark
function GLib.KeyFile.error_quark() end

--- # function GLib.KeyFile.new()
---
--- Creates a new empty `GKeyFile` object. Use
--- `g_key_file_load_from_file()`, `g_key_file_load_from_data()`,
--- `g_key_file_load_from_dirs()` or `g_key_file_load_from_data_dirs()` to
--- read an existing key file.
---
--- ---
---
---@return GLib.KeyFile # an empty `GKeyFile`.
function GLib.KeyFile.new() end

---@enum GLib.KeyFileError
GLib.KeyFileError = {}

---@enum GLib.KeyFileFlags
GLib.KeyFileFlags = {}

--- # record GLib.List
---
--- The `GList` struct is used for each element in a doubly-linked list.
---
--- ---
---
---@class GLib.List
---@field data userdata # holds the element's data, which can be a pointer to any kind of data, or any integer value using the [Type Conversion Macros][glib-Type-Conversion-Macros]
---@field next userdata[] # contains the link to the next element in the list
---@field prev userdata[] # contains the link to the previous element in the list
GLib.List = {}

--- # record GLib.LogField
---
--- Structure representing a single field in a structured log entry. See
--- `g_log_structured()` for details.
--- 
--- Log fields may contain arbitrary values, including binary with embedded nul
--- bytes. If the field contains a string, the string must be UTF-8 encoded and
--- have a trailing nul byte. Otherwise, `length` must be set to a non-negative
--- value.
---
--- ---
---
---@class GLib.LogField
---@field key string # field name (UTF-8 string)
---@field value userdata # field value (arbitrary bytes)
---@field length integer # length of `value`, in bytes, or -1 if it is nul-terminated
GLib.LogField = {}

---@alias GLib.LogFunc fun(log_domain: string, log_level: GLib.LogLevelFlags, message: string, user_data: userdata): nil

---@enum GLib.LogLevelFlags
GLib.LogLevelFlags = {}

---@alias GLib.LogWriterFunc fun(log_level: GLib.LogLevelFlags, fields: unknown[], n_fields: integer, user_data: userdata): GLib.LogWriterOutput

---@enum GLib.LogWriterOutput
GLib.LogWriterOutput = {}

--- # record GLib.MainContext
---
--- The `GMainContext` struct is an opaque data
--- type representing a set of sources to be handled in a main loop.
---
--- ---
---
---@class GLib.MainContext
---@operator call: GLib.MainContext
GLib.MainContext = {}

--- # method GLib.MainContext:acquire()
---
--- Tries to become the owner of the specified context.
--- If some other thread is the owner of the context,
--- returns `false` immediately. Ownership is properly
--- recursive: the owner can require ownership again
--- and will release ownership when `g_main_context_release()`
--- is called as many times as `g_main_context_acquire()`.
--- 
--- You must be the owner of a context before you
--- can call `g_main_context_prepare()`, `g_main_context_query()`,
--- `g_main_context_check()`, `g_main_context_dispatch()`.
--- 
--- Since 2.76 `context` can be `nil` to use the global-default
--- main context.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used)
---@return (boolean|nil) # `true` if the operation succeeded, and this thread is now the owner of `context`.
function GLib.MainContext:acquire() end

--- # method GLib.MainContext:add_poll()
---
--- Adds a file descriptor to the set of file descriptors polled for
--- this context. This will very seldom be used directly. Instead
--- a typical event source will use `g_source_add_unix_fd()` instead.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext` (or `nil` for the global-default main context)
---@param fd GLib.PollFD # a `GPollFD` structure holding information about a file descriptor to watch.
---@param priority integer # the priority for this file descriptor which should be the same as the priority used for `g_source_attach()` to ensure that the file descriptor is polled whenever the results may be needed.
---@return nil
function GLib.MainContext:add_poll(fd, priority) end

--- # method GLib.MainContext:check()
---
--- Passes the results of polling back to the main loop. You should be
--- careful to pass `fds` and its length `n_fds` as received from
--- `g_main_context_query()`, as this functions relies on assumptions
--- on how `fds` is filled.
--- 
--- You must have successfully acquired the context with
--- `g_main_context_acquire()` before you may call this function.
--- 
--- Since 2.76 `context` can be `nil` to use the global-default
--- main context.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used)
---@param max_priority integer # the maximum numerical priority of sources to check
---@param fds unknown[] # array of `GPollFD`'s that was passed to the last call to `g_main_context_query()`
---@param n_fds integer # return value of `g_main_context_query()`
---@return (boolean|nil) # `true` if some sources are ready to be dispatched.
function GLib.MainContext:check(max_priority, fds, n_fds) end

--- # method GLib.MainContext:dispatch()
---
--- Dispatches all pending sources.
--- 
--- You must have successfully acquired the context with
--- `g_main_context_acquire()` before you may call this function.
--- 
--- Since 2.76 `context` can be `nil` to use the global-default
--- main context.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used)
---@return nil
function GLib.MainContext:dispatch() end

--- # method GLib.MainContext:find_source_by_funcs_user_data()
---
--- Finds a source with the given source functions and user data.  If
--- multiple sources exist with the same source function and user data,
--- the first one found will be returned.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used).
---@param funcs GLib.SourceFuncs # the `source_funcs` passed to `g_source_new()`.
---@param user_data? userdata # the user data from the callback.
---@return GLib.Source # the source, if one was found, otherwise `nil`
function GLib.MainContext:find_source_by_funcs_user_data(funcs, user_data) end

--- # method GLib.MainContext:find_source_by_id()
---
--- Finds a `GSource` given a pair of context and ID.
--- 
--- It is a programmer error to attempt to look up a non-existent source.
--- 
--- More specifically: source IDs can be reissued after a source has been
--- destroyed and therefore it is never valid to use this function with a
--- source ID which may have already been removed.  An example is when
--- scheduling an idle to run in another thread with `g_idle_add()`: the
--- idle may already have run and been removed by the time this function
--- is called on its (now invalid) source ID.  This source ID may have
--- been reissued, leading to the operation being performed against the
--- wrong source.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used)
---@param source_id integer # the source ID, as returned by `g_source_get_id()`.
---@return GLib.Source # the `GSource`
function GLib.MainContext:find_source_by_id(source_id) end

--- # method GLib.MainContext:find_source_by_user_data()
---
--- Finds a source with the given user data for the callback.  If
--- multiple sources exist with the same user data, the first
--- one found will be returned.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used)
---@param user_data? userdata # the user_data for the callback.
---@return GLib.Source # the source, if one was found, otherwise `nil`
function GLib.MainContext:find_source_by_user_data(user_data) end

--- # method GLib.MainContext:invoke_full()
---
--- Invokes a function in such a way that `context` is owned during the
--- invocation of `function`.
--- 
--- This function is the same as `g_main_context_invoke()` except that it
--- lets you specify the priority in case `function` ends up being
--- scheduled as an idle and also lets you give a `GDestroyNotify` for `data`.
--- 
--- `notify` should not assume that it is called from any particular
--- thread or with any particular context acquired.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext`, or `nil` for the global-default main context
---@param priority integer # the priority at which to run `function`
---@param function__ GLib.SourceFunc # function to call
---@param data? userdata # data to pass to `function`
---@param notify? GLib.DestroyNotify # a function to call when `data` is no longer in use, or `nil`.
---@return nil
function GLib.MainContext:invoke_full(priority, function__, data, notify) end

--- # method GLib.MainContext:is_owner()
---
--- Determines whether this thread holds the (recursive)
--- ownership of this `GMainContext`. This is useful to
--- know before waiting on another thread that may be
--- blocking to get ownership of `context`.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used)
---@return (boolean|nil) # `true` if current thread is owner of `context`.
function GLib.MainContext:is_owner() end

--- # method GLib.MainContext:iteration()
---
--- Runs a single iteration for the given main loop. This involves
--- checking to see if any event sources are ready to be processed,
--- then if no events sources are ready and `may_block` is `true`, waiting
--- for a source to become ready, then dispatching the highest priority
--- events sources that are ready. Otherwise, if `may_block` is `false`
--- sources are not waited to become ready, only those highest priority
--- events sources will be dispatched (if any), that are ready at this
--- given moment without further waiting.
--- 
--- Note that even when `may_block` is `true`, it is still possible for
--- `g_main_context_iteration()` to return `false`, since the wait may
--- be interrupted for other reasons than an event source becoming ready.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used)
---@param may_block (boolean|nil) # whether the call may block.
---@return (boolean|nil) # `true` if events were dispatched.
function GLib.MainContext:iteration(may_block) end

--- # method GLib.MainContext:pending()
---
--- Checks if any sources have pending events for the given context.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used)
---@return (boolean|nil) # `true` if events are pending.
function GLib.MainContext:pending() end

--- # method GLib.MainContext:pop_thread_default()
---
--- Pops `context` off the thread-default context stack (verifying that
--- it was on the top of the stack).
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext`, or `nil` for the global-default main context
---@return nil
function GLib.MainContext:pop_thread_default() end

--- # method GLib.MainContext:prepare()
---
--- Prepares to poll sources within a main loop. The resulting information
--- for polling is determined by calling g_main_context_query ().
--- 
--- You must have successfully acquired the context with
--- `g_main_context_acquire()` before you may call this function.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used)
---@param priority? integer # location to store priority of highest priority source already ready.
---@return (boolean|nil) # `true` if some source is ready to be dispatched prior to polling.
function GLib.MainContext:prepare(priority) end

--- # method GLib.MainContext:push_thread_default()
---
--- Acquires `context` and sets it as the thread-default context for the
--- current thread. This will cause certain asynchronous operations
--- (such as most [gio][gio]-based I/O) which are
--- started in this thread to run under `context` and deliver their
--- results to its main loop, rather than running under the global
--- default main context in the main thread. Note that calling this function
--- changes the context returned by `g_main_context_get_thread_default()`,
--- not the one returned by `g_main_context_default()`, so it does not affect
--- the context used by functions like `g_idle_add()`.
--- 
--- Normally you would call this function shortly after creating a new
--- thread, passing it a `GMainContext` which will be run by a
--- `GMainLoop` in that thread, to set a new default context for all
--- async operations in that thread. In this case you may not need to
--- ever call `g_main_context_pop_thread_default()`, assuming you want the
--- new `GMainContext` to be the default for the whole lifecycle of the
--- thread.
--- 
--- If you don't have control over how the new thread was created (e.g.
--- in the new thread isn't newly created, or if the thread life
--- cycle is managed by a `GThreadPool`), it is always suggested to wrap
--- the logic that needs to use the new `GMainContext` inside a
--- `g_main_context_push_thread_default()` / `g_main_context_pop_thread_default()`
--- pair, otherwise threads that are re-used will end up never explicitly
--- releasing the `GMainContext` reference they hold.
--- 
--- In some cases you may want to schedule a single operation in a
--- non-default context, or temporarily use a non-default context in
--- the main thread. In that case, you can wrap the call to the
--- asynchronous operation inside a
--- `g_main_context_push_thread_default()` /
--- `g_main_context_pop_thread_default()` pair, but it is up to you to
--- ensure that no other asynchronous operations accidentally get
--- started while the non-default context is active.
--- 
--- Beware that libraries that predate this function may not correctly
--- handle being used from a thread with a thread-default context. Eg,
--- see `g_file_supports_thread_contexts()`.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext`, or `nil` for the global-default main context
---@return nil
function GLib.MainContext:push_thread_default() end

--- # method GLib.MainContext:query()
---
--- Determines information necessary to poll this main loop. You should
--- be careful to pass the resulting `fds` array and its length `n_fds`
--- as is when calling `g_main_context_check()`, as this function relies
--- on assumptions made when the array is filled.
--- 
--- You must have successfully acquired the context with
--- `g_main_context_acquire()` before you may call this function.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used)
---@param max_priority integer # maximum priority source to check
---@param timeout_ integer # location to store timeout to be used in polling
---@param fds unknown[] # location to store `GPollFD` records that need to be polled.
---@param n_fds integer # length of `fds`.
---@return integer # the number of records actually stored in `fds`, or, if more than `n_fds` records need to be stored, the number of records that need to be stored.
function GLib.MainContext:query(max_priority, timeout_, fds, n_fds) end

--- # method GLib.MainContext:ref()
---
--- Increases the reference count on a `GMainContext` object by one.
---
--- ---
---
---@param self GLib.MainContext # a `GMainContext`
---@return GLib.MainContext # the `context` that was passed in (since 2.6)
function GLib.MainContext:ref() end

--- # method GLib.MainContext:release()
---
--- Releases ownership of a context previously acquired by this thread
--- with `g_main_context_acquire()`. If the context was acquired multiple
--- times, the ownership will be released only when `g_main_context_release()`
--- is called as many times as it was acquired.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used)
---@return nil
function GLib.MainContext:release() end

--- # method GLib.MainContext:remove_poll()
---
--- Removes file descriptor from the set of file descriptors to be
--- polled for a particular context.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used)
---@param fd GLib.PollFD # a `GPollFD` descriptor previously added with `g_main_context_add_poll()`
---@return nil
function GLib.MainContext:remove_poll(fd) end

--- # method GLib.MainContext:unref()
---
--- Decreases the reference count on a `GMainContext` object by one. If
--- the result is zero, free the context and free all associated memory.
---
--- ---
---
---@param self GLib.MainContext # a `GMainContext`
---@return nil
function GLib.MainContext:unref() end

--- # method GLib.MainContext:wait()
---
--- Tries to become the owner of the specified context,
--- as with `g_main_context_acquire()`. But if another thread
--- is the owner, atomically drop `mutex` and wait on `cond` until
--- that owner releases ownership or until `cond` is signaled, then
--- try again (once) to become the owner.
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used)
---@param cond GLib.Cond # a condition variable
---@param mutex GLib.Mutex # a mutex, currently held
---@return (boolean|nil) # `true` if the operation succeeded, and this thread is now the owner of `context`.
function GLib.MainContext:wait(cond, mutex) end

--- # method GLib.MainContext:wakeup()
---
--- If `context` is currently blocking in `g_main_context_iteration()`
--- waiting for a source to become ready, cause it to stop blocking
--- and return.  Otherwise, cause the next invocation of
--- `g_main_context_iteration()` to return without blocking.
--- 
--- This API is useful for low-level control over `GMainContext`; for
--- example, integrating it with main loop implementations such as
--- `GMainLoop`.
--- 
--- Another related use for this function is when implementing a main
--- loop with a termination condition, computed from multiple threads:
--- 
--- ```c
---   `define` NUM_TASKS 10
---   static gint tasks_remaining = NUM_TASKS;  // (atomic)
---   ...
---  
---   while (g_atomic_int_get (&tasks_remaining) != 0)
---     g_main_context_iteration (NULL, TRUE);
--- ```
---  
--- Then in a thread:
--- ```c
---   `perform_work()`;
--- 
---   if (g_atomic_int_dec_and_test (&tasks_remaining))
---     g_main_context_wakeup (NULL);
--- ```
---
--- ---
---
---@param self? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used)
---@return nil
function GLib.MainContext:wakeup() end

--- # function GLib.MainContext.default()
---
--- Returns the global-default main context. This is the main context
--- used for main loop functions when a main loop is not explicitly
--- specified, and corresponds to the "main" main loop. See also
--- `g_main_context_get_thread_default()`.
---
--- ---
---
---@return GLib.MainContext # the global-default main context.
function GLib.MainContext.default() end

--- # function GLib.MainContext.get_thread_default()
---
--- Gets the thread-default `GMainContext` for this thread. Asynchronous
--- operations that want to be able to be run in contexts other than
--- the default one should call this method or
--- `g_main_context_ref_thread_default()` to get a `GMainContext` to add
--- their `GSources` to. (Note that even in single-threaded
--- programs applications may sometimes want to temporarily push a
--- non-default context, so it is not safe to assume that this will
--- always return `nil` if you are running in the default thread.)
--- 
--- If you need to hold a reference on the context, use
--- `g_main_context_ref_thread_default()` instead.
---
--- ---
---
---@return GLib.MainContext # the thread-default `GMainContext`, or `nil` if the thread-default context is the global-default main context.
function GLib.MainContext.get_thread_default() end

--- # function GLib.MainContext.ref_thread_default()
---
--- Gets the thread-default `GMainContext` for this thread, as with
--- `g_main_context_get_thread_default()`, but also adds a reference to
--- it with `g_main_context_ref()`. In addition, unlike
--- `g_main_context_get_thread_default()`, if the thread-default context
--- is the global-default context, this will return that `GMainContext`
--- (with a ref added to it) rather than returning `nil`.
---
--- ---
---
---@return GLib.MainContext # the thread-default `GMainContext`. Unref with `g_main_context_unref()` when you are done with it.
function GLib.MainContext.ref_thread_default() end

--- # function GLib.MainContext.new()
---
--- Creates a new `GMainContext` structure.
---
--- ---
---
---@return GLib.MainContext # the new `GMainContext`
function GLib.MainContext.new() end

--- # function GLib.MainContext.new_with_flags()
---
--- Creates a new `GMainContext` structure.
---
--- ---
---
---@param flags GLib.MainContextFlags # a bitwise-OR combination of `GMainContextFlags` flags that can only be set at creation time.
---@return GLib.MainContext # the new `GMainContext`
function GLib.MainContext.new_with_flags(flags) end

---@enum GLib.MainContextFlags
GLib.MainContextFlags = {}

--- # record GLib.MainLoop
---
--- The `GMainLoop` struct is an opaque data type
--- representing the main event loop of a GLib or GTK+ application.
---
--- ---
---
---@class GLib.MainLoop
---@operator call: GLib.MainLoop
GLib.MainLoop = {}

--- # method GLib.MainLoop:get_context()
---
--- Returns the `GMainContext` of `loop`.
---
--- ---
---
---@param self GLib.MainLoop # a `GMainLoop`.
---@return GLib.MainContext # the `GMainContext` of `loop`
function GLib.MainLoop:get_context() end

--- # method GLib.MainLoop:is_running()
---
--- Checks to see if the main loop is currently being run via `g_main_loop_run()`.
---
--- ---
---
---@param self GLib.MainLoop # a `GMainLoop`.
---@return (boolean|nil) # `true` if the mainloop is currently being run.
function GLib.MainLoop:is_running() end

--- # method GLib.MainLoop:quit()
---
--- Stops a `GMainLoop` from running. Any calls to `g_main_loop_run()`
--- for the loop will return.
--- 
--- Note that sources that have already been dispatched when
--- `g_main_loop_quit()` is called will still be executed.
---
--- ---
---
---@param self GLib.MainLoop # a `GMainLoop`
---@return nil
function GLib.MainLoop:quit() end

--- # method GLib.MainLoop:ref()
---
--- Increases the reference count on a `GMainLoop` object by one.
---
--- ---
---
---@param self GLib.MainLoop # a `GMainLoop`
---@return GLib.MainLoop # `loop`
function GLib.MainLoop:ref() end

--- # method GLib.MainLoop:run()
---
--- Runs a main loop until `g_main_loop_quit()` is called on the loop.
--- If this is called for the thread of the loop's `GMainContext`,
--- it will process events from the loop, otherwise it will
--- simply wait.
---
--- ---
---
---@param self GLib.MainLoop # a `GMainLoop`
---@return nil
function GLib.MainLoop:run() end

--- # method GLib.MainLoop:unref()
---
--- Decreases the reference count on a `GMainLoop` object by one. If
--- the result is zero, free the loop and free all associated memory.
---
--- ---
---
---@param self GLib.MainLoop # a `GMainLoop`
---@return nil
function GLib.MainLoop:unref() end

--- # function GLib.MainLoop.new()
---
--- Creates a new `GMainLoop` structure.
---
--- ---
---
---@param context? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used).
---@param is_running (boolean|nil) # set to `true` to indicate that the loop is running. This is not very important since calling `g_main_loop_run()` will set this to `true` anyway.
---@return GLib.MainLoop # a new `GMainLoop`.
function GLib.MainLoop.new(context, is_running) end

--- # record GLib.MappedFile
---
--- The `GMappedFile` represents a file mapping created with
--- `g_mapped_file_new()`. It has only private members and should
--- not be accessed directly.
---
--- ---
---
---@class GLib.MappedFile
---@operator call: GLib.MappedFile
GLib.MappedFile = {}

--- # method GLib.MappedFile:free()
---
--- This call existed before `GMappedFile` had refcounting and is currently
--- exactly the same as `g_mapped_file_unref()`.
---
--- ---
---
---@param self GLib.MappedFile # a `GMappedFile`
---@return nil
function GLib.MappedFile:free() end

--- # method GLib.MappedFile:get_bytes()
---
--- Creates a new `GBytes` which references the data mapped from `file`.
--- The mapped contents of the file must not be modified after creating this
--- bytes object, because a `GBytes` should be immutable.
---
--- ---
---
---@param self GLib.MappedFile # a `GMappedFile`
---@return GLib.Bytes # A newly allocated `GBytes` referencing data from `file`
function GLib.MappedFile:get_bytes() end

--- # method GLib.MappedFile:get_contents()
---
--- Returns the contents of a `GMappedFile`.
--- 
--- Note that the contents may not be zero-terminated,
--- even if the `GMappedFile` is backed by a text file.
--- 
--- If the file is empty then `nil` is returned.
---
--- ---
---
---@param self GLib.MappedFile # a `GMappedFile`
---@return string # the contents of `file`, or `nil`.
function GLib.MappedFile:get_contents() end

--- # method GLib.MappedFile:get_length()
---
--- Returns the length of the contents of a `GMappedFile`.
---
--- ---
---
---@param self GLib.MappedFile # a `GMappedFile`
---@return integer # the length of the contents of `file`.
function GLib.MappedFile:get_length() end

--- # method GLib.MappedFile:ref()
---
--- Increments the reference count of `file` by one.  It is safe to call
--- this function from any thread.
---
--- ---
---
---@param self GLib.MappedFile # a `GMappedFile`
---@return GLib.MappedFile # the passed in `GMappedFile`.
function GLib.MappedFile:ref() end

--- # method GLib.MappedFile:unref()
---
--- Decrements the reference count of `file` by one.  If the reference count
--- drops to 0, unmaps the buffer of `file` and frees it.
--- 
--- It is safe to call this function from any thread.
--- 
--- Since 2.22
---
--- ---
---
---@param self GLib.MappedFile # a `GMappedFile`
---@return nil
function GLib.MappedFile:unref() end

--- # function GLib.MappedFile.new()
---
--- Maps a file into memory. On UNIX, this is using the `mmap()` function.
--- 
--- If `writable` is `true`, the mapped buffer may be modified, otherwise
--- it is an error to modify the mapped buffer. Modifications to the buffer
--- are not visible to other processes mapping the same file, and are not
--- written back to the file.
--- 
--- Note that modifications of the underlying file might affect the contents
--- of the `GMappedFile`. Therefore, mapping should only be used if the file
--- will not be modified, or if all modifications of the file are done
--- atomically (e.g. using `g_file_set_contents()`).
--- 
--- If `filename` is the name of an empty, regular file, the function
--- will successfully return an empty `GMappedFile`. In other cases of
--- size 0 (e.g. device files such as /dev/null), `error` will be set
--- to the `GFileError` value %G_FILE_ERROR_INVAL.
---
--- ---
---
---@param filename string # The path of the file to load, in the GLib filename encoding
---@param writable (boolean|nil) # whether the mapping should be writable
---@return GLib.MappedFile # a newly allocated `GMappedFile` which must be unref'd with `g_mapped_file_unref()`, or `nil` if the mapping failed.
function GLib.MappedFile.new(filename, writable) end

--- # function GLib.MappedFile.new_from_fd()
---
--- Maps a file into memory. On UNIX, this is using the `mmap()` function.
--- 
--- If `writable` is `true`, the mapped buffer may be modified, otherwise
--- it is an error to modify the mapped buffer. Modifications to the buffer
--- are not visible to other processes mapping the same file, and are not
--- written back to the file.
--- 
--- Note that modifications of the underlying file might affect the contents
--- of the `GMappedFile`. Therefore, mapping should only be used if the file
--- will not be modified, or if all modifications of the file are done
--- atomically (e.g. using `g_file_set_contents()`).
---
--- ---
---
---@param fd integer # The file descriptor of the file to load
---@param writable (boolean|nil) # whether the mapping should be writable
---@return GLib.MappedFile # a newly allocated `GMappedFile` which must be unref'd with `g_mapped_file_unref()`, or `nil` if the mapping failed.
function GLib.MappedFile.new_from_fd(fd, writable) end

---@enum GLib.MarkupCollectType
GLib.MarkupCollectType = {}

---@enum GLib.MarkupError
GLib.MarkupError = {}

--- # record GLib.MarkupParseContext
---
--- A parse context is used to parse a stream of bytes that
--- you expect to contain marked-up text.
--- 
--- See `g_markup_parse_context_new()`, `GMarkupParser`, and so
--- on for more details.
---
--- ---
---
---@class GLib.MarkupParseContext
---@operator call: GLib.MarkupParseContext
GLib.MarkupParseContext = {}

--- # method GLib.MarkupParseContext:end_parse()
---
--- Signals to the `GMarkupParseContext` that all data has been
--- fed into the parse context with `g_markup_parse_context_parse()`.
--- 
--- This function reports an error if the document isn't complete,
--- for example if elements are still open.
---
--- ---
---
---@param self GLib.MarkupParseContext # a `GMarkupParseContext`
---@return (boolean|nil) # `true` on success, `false` if an error was set
function GLib.MarkupParseContext:end_parse() end

--- # method GLib.MarkupParseContext:free()
---
--- Frees a `GMarkupParseContext`.
--- 
--- This function can't be called from inside one of the
--- `GMarkupParser` functions or while a subparser is pushed.
---
--- ---
---
---@param self GLib.MarkupParseContext # a `GMarkupParseContext`
---@return nil
function GLib.MarkupParseContext:free() end

--- # method GLib.MarkupParseContext:get_element()
---
--- Retrieves the name of the currently open element.
--- 
--- If called from the start_element or end_element handlers this will
--- give the element_name as passed to those functions. For the parent
--- elements, see `g_markup_parse_context_get_element_stack()`.
---
--- ---
---
---@param self GLib.MarkupParseContext # a `GMarkupParseContext`
---@return string # the name of the currently open element, or `nil`
function GLib.MarkupParseContext:get_element() end

--- # method GLib.MarkupParseContext:get_position()
---
--- Retrieves the current line number and the number of the character on
--- that line. Intended for use in error messages; there are no strict
--- semantics for what constitutes the "current" line number other than
--- "the best number we could come up with for error messages."
---
--- ---
---
---@param self GLib.MarkupParseContext # a `GMarkupParseContext`
---@param line_number? integer # return location for a line number, or `nil`
---@param char_number? integer # return location for a char-on-line number, or `nil`
---@return nil
function GLib.MarkupParseContext:get_position(line_number, char_number) end

--- # method GLib.MarkupParseContext:get_user_data()
---
--- Returns the user_data associated with `context`.
--- 
--- This will either be the user_data that was provided to
--- `g_markup_parse_context_new()` or to the most recent call
--- of `g_markup_parse_context_push()`.
---
--- ---
---
---@param self GLib.MarkupParseContext # a `GMarkupParseContext`
---@return userdata # the provided user_data. The returned data belongs to the markup context and will be freed when `g_markup_parse_context_free()` is called.
function GLib.MarkupParseContext:get_user_data() end

--- # method GLib.MarkupParseContext:parse()
---
--- Feed some data to the `GMarkupParseContext`.
--- 
--- The data need not be valid UTF-8; an error will be signaled if
--- it's invalid. The data need not be an entire document; you can
--- feed a document into the parser incrementally, via multiple calls
--- to this function. Typically, as you receive data from a network
--- connection or file, you feed each received chunk of data into this
--- function, aborting the process if an error occurs. Once an error
--- is reported, no further data may be fed to the `GMarkupParseContext`;
--- all errors are fatal.
---
--- ---
---
---@param self GLib.MarkupParseContext # a `GMarkupParseContext`
---@param text string # chunk of text to parse
---@param text_len integer # length of `text` in bytes
---@return (boolean|nil) # `false` if an error occurred, `true` on success
function GLib.MarkupParseContext:parse(text, text_len) end

--- # method GLib.MarkupParseContext:pop()
---
--- Completes the process of a temporary sub-parser redirection.
--- 
--- This function exists to collect the user_data allocated by a
--- matching call to `g_markup_parse_context_push()`. It must be called
--- in the end_element handler corresponding to the start_element
--- handler during which `g_markup_parse_context_push()` was called.
--- You must not call this function from the error callback -- the
--- `user_data` is provided directly to the callback in that case.
--- 
--- This function is not intended to be directly called by users
--- interested in invoking subparsers. Instead, it is intended to
--- be used by the subparsers themselves to implement a higher-level
--- interface.
---
--- ---
---
---@param self GLib.MarkupParseContext # a `GMarkupParseContext`
---@return userdata # the user data passed to `g_markup_parse_context_push()`
function GLib.MarkupParseContext:pop() end

--- # method GLib.MarkupParseContext:push()
---
--- Temporarily redirects markup data to a sub-parser.
--- 
--- This function may only be called from the start_element handler of
--- a `GMarkupParser`. It must be matched with a corresponding call to
--- `g_markup_parse_context_pop()` in the matching end_element handler
--- (except in the case that the parser aborts due to an error).
--- 
--- All tags, text and other data between the matching tags is
--- redirected to the subparser given by `parser`. `user_data` is used
--- as the user_data for that parser. `user_data` is also passed to the
--- error callback in the event that an error occurs. This includes
--- errors that occur in subparsers of the subparser.
--- 
--- The end tag matching the start tag for which this call was made is
--- handled by the previous parser (which is given its own user_data)
--- which is why `g_markup_parse_context_pop()` is provided to allow "one
--- last access" to the `user_data` provided to this function. In the
--- case of error, the `user_data` provided here is passed directly to
--- the error callback of the subparser and `g_markup_parse_context_pop()`
--- should not be called. In either case, if `user_data` was allocated
--- then it ought to be freed from both of these locations.
--- 
--- This function is not intended to be directly called by users
--- interested in invoking subparsers. Instead, it is intended to be
--- used by the subparsers themselves to implement a higher-level
--- interface.
--- 
--- As an example, see the following implementation of a simple
--- parser that counts the number of tags encountered.
--- 
--- ```c
--- typedef struct
--- {
---   gint tag_count;
--- } CounterData;
--- 
--- static void
--- counter_start_element (GMarkupParseContext  *context,
---                        const gchar          *element_name,
---                        const gchar         **attribute_names,
---                        const gchar         **attribute_values,
---                        gpointer              user_data,
---                        GError              **error)
--- {
---   CounterData *data = user_data;
--- 
---   data->tag_count++;
--- }
--- 
--- static void
--- counter_error (GMarkupParseContext *context,
---                GError              *error,
---                gpointer             user_data)
--- {
---   CounterData *data = user_data;
--- 
---   g_slice_free (CounterData, data);
--- }
--- 
--- static GMarkupParser counter_subparser =
--- {
---   counter_start_element,
---   NULL,
---   NULL,
---   NULL,
---   counter_error
--- };
--- ```
--- 
--- In order to allow this parser to be easily used as a subparser, the
--- following interface is provided:
--- 
--- ```c
--- void
--- start_counting (GMarkupParseContext *context)
--- {
---   CounterData *data = g_slice_new (CounterData);
--- 
---   data->tag_count = 0;
---   g_markup_parse_context_push (context, &counter_subparser, data);
--- }
--- 
--- gint
--- end_counting (GMarkupParseContext *context)
--- {
---   CounterData *data = g_markup_parse_context_pop (context);
---   int result;
--- 
---   result = data->tag_count;
---   g_slice_free (CounterData, data);
--- 
---   return result;
--- }
--- ```
--- 
--- The subparser would then be used as follows:
--- 
--- ```c
--- static void start_element (context, element_name, ...)
--- {
---   if (strcmp (element_name, "count-these") == 0)
---     start_counting (context);
--- 
---   // else, handle other tags...
--- }
--- 
--- static void end_element (context, element_name, ...)
--- {
---   if (strcmp (element_name, "count-these") == 0)
---     g_print ("Counted %d tags\n", end_counting (context));
--- 
---   // else, handle other tags...
--- }
--- ```
---
--- ---
---
---@param self GLib.MarkupParseContext # a `GMarkupParseContext`
---@param parser GLib.MarkupParser # a `GMarkupParser`
---@param user_data? userdata # user data to pass to `GMarkupParser` functions
---@return nil
function GLib.MarkupParseContext:push(parser, user_data) end

--- # method GLib.MarkupParseContext:ref()
---
--- Increases the reference count of `context`.
---
--- ---
---
---@param self GLib.MarkupParseContext # a `GMarkupParseContext`
---@return GLib.MarkupParseContext # the same `context`
function GLib.MarkupParseContext:ref() end

--- # method GLib.MarkupParseContext:unref()
---
--- Decreases the reference count of `context`.  When its reference count
--- drops to 0, it is freed.
---
--- ---
---
---@param self GLib.MarkupParseContext # a `GMarkupParseContext`
---@return nil
function GLib.MarkupParseContext:unref() end

--- # function GLib.MarkupParseContext.new()
---
--- Creates a new parse context. A parse context is used to parse
--- marked-up documents. You can feed any number of documents into
--- a context, as long as no errors occur; once an error occurs,
--- the parse context can't continue to parse text (you have to
--- free it and create a new parse context).
---
--- ---
---
---@param parser GLib.MarkupParser # a `GMarkupParser`
---@param flags GLib.MarkupParseFlags # one or more `GMarkupParseFlags`
---@param user_data? userdata # user data to pass to `GMarkupParser` functions
---@param user_data_dnotify GLib.DestroyNotify # user data destroy notifier called when the parse context is freed
---@return GLib.MarkupParseContext # a new `GMarkupParseContext`
function GLib.MarkupParseContext.new(parser, flags, user_data, user_data_dnotify) end

---@enum GLib.MarkupParseFlags
GLib.MarkupParseFlags = {}

--- # record GLib.MarkupParser
---
--- Any of the fields in `GMarkupParser` can be `nil`, in which case they
--- will be ignored. Except for the `error` function, any of these callbacks
--- can set an error; in particular the %G_MARKUP_ERROR_UNKNOWN_ELEMENT,
--- %G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE, and %G_MARKUP_ERROR_INVALID_CONTENT
--- errors are intended to be set from these callbacks. If you set an error
--- from a callback, `g_markup_parse_context_parse()` will report that error
--- back to its caller.
---
--- ---
---
---@class GLib.MarkupParser
---@field start_element fun(context: GLib.MarkupParseContext, element_name: string, attribute_names: string, attribute_values: string, user_data: userdata): nil
---@field end_element fun(context: GLib.MarkupParseContext, element_name: string, user_data: userdata): nil
---@field text fun(context: GLib.MarkupParseContext, text: string, text_len: integer, user_data: userdata): nil
---@field passthrough fun(context: GLib.MarkupParseContext, passthrough_text: string, text_len: integer, user_data: userdata): nil
---@field error fun(context: GLib.MarkupParseContext, error: GLib.Error, user_data: userdata): nil
GLib.MarkupParser = {}

--- # record GLib.MatchInfo
---
--- A GMatchInfo is an opaque struct used to return information about
--- matches.
---
--- ---
---
---@class GLib.MatchInfo
GLib.MatchInfo = {}

--- # method GLib.MatchInfo:expand_references()
---
--- Returns a new string containing the text in `string_to_expand` with
--- references and escape sequences expanded. References refer to the last
--- match done with `string` against `regex` and have the same syntax used by
--- `g_regex_replace()`.
--- 
--- The `string_to_expand` must be UTF-8 encoded even if %G_REGEX_RAW was
--- passed to `g_regex_new()`.
--- 
--- The backreferences are extracted from the string passed to the match
--- function, so you cannot call this function after freeing the string.
--- 
--- `match_info` may be `nil` in which case `string_to_expand` must not
--- contain references. For instance "foo\n" does not refer to an actual
--- pattern and '\n' merely will be replaced with \n character,
--- while to expand "\0" (whole match) one needs the result of a match.
--- Use `g_regex_check_replacement()` to find out whether `string_to_expand`
--- contains references.
---
--- ---
---
---@param self? GLib.MatchInfo # a `GMatchInfo` or `nil`
---@param string_to_expand string # the string to expand
---@return string # the expanded string, or `nil` if an error occurred
function GLib.MatchInfo:expand_references(string_to_expand) end

--- # method GLib.MatchInfo:fetch()
---
--- Retrieves the text matching the `match_num`'th capturing
--- parentheses. 0 is the full text of the match, 1 is the first paren
--- set, 2 the second, and so on.
--- 
--- If `match_num` is a valid sub pattern but it didn't match anything
--- (e.g. sub pattern 1, matching "b" against "(a)?b") then an empty
--- string is returned.
--- 
--- If the match was obtained using the DFA algorithm, that is using
--- `g_regex_match_all()` or `g_regex_match_all_full()`, the retrieved
--- string is not that of a set of parentheses but that of a matched
--- substring. Substrings are matched in reverse order of length, so
--- 0 is the longest match.
--- 
--- The string is fetched from the string passed to the match function,
--- so you cannot call this function after freeing the string.
---
--- ---
---
---@param self GLib.MatchInfo # `GMatchInfo` structure
---@param match_num integer # number of the sub expression
---@return string # The matched substring, or `nil` if an error occurred. You have to free the string yourself
function GLib.MatchInfo:fetch(match_num) end

--- # method GLib.MatchInfo:fetch_all()
---
--- Bundles up pointers to each of the matching substrings from a match
--- and stores them in an array of gchar pointers. The first element in
--- the returned array is the match number 0, i.e. the entire matched
--- text.
--- 
--- If a sub pattern didn't match anything (e.g. sub pattern 1, matching
--- "b" against "(a)?b") then an empty string is inserted.
--- 
--- If the last match was obtained using the DFA algorithm, that is using
--- `g_regex_match_all()` or `g_regex_match_all_full()`, the retrieved
--- strings are not that matched by sets of parentheses but that of the
--- matched substring. Substrings are matched in reverse order of length,
--- so the first one is the longest match.
--- 
--- The strings are fetched from the string passed to the match function,
--- so you cannot call this function after freeing the string.
---
--- ---
---
---@param self GLib.MatchInfo # a `GMatchInfo` structure
---@return unknown[] # a `nil`-terminated array of gchar * pointers. It must be freed using `g_strfreev()`. If the previous match failed `nil` is returned
function GLib.MatchInfo:fetch_all() end

--- # method GLib.MatchInfo:fetch_named()
---
--- Retrieves the text matching the capturing parentheses named `name`.
--- 
--- If `name` is a valid sub pattern name but it didn't match anything
--- (e.g. sub pattern "X", matching "b" against "(?P<X>a)?b")
--- then an empty string is returned.
--- 
--- The string is fetched from the string passed to the match function,
--- so you cannot call this function after freeing the string.
---
--- ---
---
---@param self GLib.MatchInfo # `GMatchInfo` structure
---@param name string # name of the subexpression
---@return string # The matched substring, or `nil` if an error occurred. You have to free the string yourself
function GLib.MatchInfo:fetch_named(name) end

--- # method GLib.MatchInfo:fetch_named_pos()
---
--- Retrieves the position in bytes of the capturing parentheses named `name`.
--- 
--- If `name` is a valid sub pattern name but it didn't match anything
--- (e.g. sub pattern "X", matching "b" against "(?P<X>a)?b")
--- then `start_pos` and `end_pos` are set to -1 and `true` is returned.
---
--- ---
---
---@param self GLib.MatchInfo # `GMatchInfo` structure
---@param name string # name of the subexpression
---@param start_pos? integer # pointer to location where to store the start position, or `nil`
---@param end_pos? integer # pointer to location where to store the end position, or `nil`
---@return (boolean|nil) # `true` if the position was fetched, `false` otherwise. If the position cannot be fetched, `start_pos` and `end_pos` are left unchanged.
function GLib.MatchInfo:fetch_named_pos(name, start_pos, end_pos) end

--- # method GLib.MatchInfo:fetch_pos()
---
--- Retrieves the position in bytes of the `match_num`'th capturing
--- parentheses. 0 is the full text of the match, 1 is the first
--- paren set, 2 the second, and so on.
--- 
--- If `match_num` is a valid sub pattern but it didn't match anything
--- (e.g. sub pattern 1, matching "b" against "(a)?b") then `start_pos`
--- and `end_pos` are set to -1 and `true` is returned.
--- 
--- If the match was obtained using the DFA algorithm, that is using
--- `g_regex_match_all()` or `g_regex_match_all_full()`, the retrieved
--- position is not that of a set of parentheses but that of a matched
--- substring. Substrings are matched in reverse order of length, so
--- 0 is the longest match.
---
--- ---
---
---@param self GLib.MatchInfo # `GMatchInfo` structure
---@param match_num integer # number of the sub expression
---@param start_pos? integer # pointer to location where to store the start position, or `nil`
---@param end_pos? integer # pointer to location where to store the end position, or `nil`
---@return (boolean|nil) # `true` if the position was fetched, `false` otherwise. If the position cannot be fetched, `start_pos` and `end_pos` are left unchanged
function GLib.MatchInfo:fetch_pos(match_num, start_pos, end_pos) end

--- # method GLib.MatchInfo:free()
---
--- If `match_info` is not `nil`, calls `g_match_info_unref()`; otherwise does
--- nothing.
---
--- ---
---
---@param self? GLib.MatchInfo # a `GMatchInfo`, or `nil`
---@return nil
function GLib.MatchInfo:free() end

--- # method GLib.MatchInfo:get_match_count()
---
--- Retrieves the number of matched substrings (including substring 0,
--- that is the whole matched text), so 1 is returned if the pattern
--- has no substrings in it and 0 is returned if the match failed.
--- 
--- If the last match was obtained using the DFA algorithm, that is
--- using `g_regex_match_all()` or `g_regex_match_all_full()`, the retrieved
--- count is not that of the number of capturing parentheses but that of
--- the number of matched substrings.
---
--- ---
---
---@param self GLib.MatchInfo # a `GMatchInfo` structure
---@return integer # Number of matched substrings, or -1 if an error occurred
function GLib.MatchInfo:get_match_count() end

--- # method GLib.MatchInfo:get_regex()
---
--- Returns `GRegex` object used in `match_info`. It belongs to Glib
--- and must not be freed. Use `g_regex_ref()` if you need to keep it
--- after you free `match_info` object.
---
--- ---
---
---@param self GLib.MatchInfo # a `GMatchInfo`
---@return GLib.Regex # `GRegex` object used in `match_info`
function GLib.MatchInfo:get_regex() end

--- # method GLib.MatchInfo:get_string()
---
--- Returns the string searched with `match_info`. This is the
--- string passed to `g_regex_match()` or `g_regex_replace()` so
--- you may not free it before calling this function.
---
--- ---
---
---@param self GLib.MatchInfo # a `GMatchInfo`
---@return string # the string searched with `match_info`
function GLib.MatchInfo:get_string() end

--- # method GLib.MatchInfo:is_partial_match()
---
--- Usually if the string passed to g_regex_match*() matches as far as
--- it goes, but is too short to match the entire pattern, `false` is
--- returned. There are circumstances where it might be helpful to
--- distinguish this case from other cases in which there is no match.
--- 
--- Consider, for example, an application where a human is required to
--- type in data for a field with specific formatting requirements. An
--- example might be a date in the form ddmmmyy, defined by the pattern
--- "^\d?\d(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\d\d$".
--- If the application sees the user’s keystrokes one by one, and can
--- check that what has been typed so far is potentially valid, it is
--- able to raise an error as soon as a mistake is made.
--- 
--- GRegex supports the concept of partial matching by means of the
--- %G_REGEX_MATCH_PARTIAL_SOFT and %G_REGEX_MATCH_PARTIAL_HARD flags.
--- When they are used, the return code for
--- `g_regex_match()` or `g_regex_match_full()` is, as usual, `true`
--- for a complete match, `false` otherwise. But, when these functions
--- return `false`, you can check if the match was partial calling
--- `g_match_info_is_partial_match()`.
--- 
--- The difference between %G_REGEX_MATCH_PARTIAL_SOFT and
--- %G_REGEX_MATCH_PARTIAL_HARD is that when a partial match is encountered
--- with %G_REGEX_MATCH_PARTIAL_SOFT, matching continues to search for a
--- possible complete match, while with %G_REGEX_MATCH_PARTIAL_HARD matching
--- stops at the partial match.
--- When both %G_REGEX_MATCH_PARTIAL_SOFT and %G_REGEX_MATCH_PARTIAL_HARD
--- are set, the latter takes precedence.
--- 
--- There were formerly some restrictions on the pattern for partial matching.
--- The restrictions no longer apply.
--- 
--- See pcrepartial(3) for more information on partial matching.
---
--- ---
---
---@param self GLib.MatchInfo # a `GMatchInfo` structure
---@return (boolean|nil) # `true` if the match was partial, `false` otherwise
function GLib.MatchInfo:is_partial_match() end

--- # method GLib.MatchInfo:matches()
---
--- Returns whether the previous match operation succeeded.
---
--- ---
---
---@param self GLib.MatchInfo # a `GMatchInfo` structure
---@return (boolean|nil) # `true` if the previous match operation succeeded, `false` otherwise
function GLib.MatchInfo:matches() end

--- # method GLib.MatchInfo:next()
---
--- Scans for the next match using the same parameters of the previous
--- call to `g_regex_match_full()` or `g_regex_match()` that returned
--- `match_info`.
--- 
--- The match is done on the string passed to the match function, so you
--- cannot free it before calling this function.
---
--- ---
---
---@param self GLib.MatchInfo # a `GMatchInfo` structure
---@return (boolean|nil) # `true` is the string matched, `false` otherwise
function GLib.MatchInfo:next() end

--- # method GLib.MatchInfo:ref()
---
--- Increases reference count of `match_info` by 1.
---
--- ---
---
---@param self GLib.MatchInfo # a `GMatchInfo`
---@return GLib.MatchInfo # `match_info`
function GLib.MatchInfo:ref() end

--- # method GLib.MatchInfo:unref()
---
--- Decreases reference count of `match_info` by 1. When reference count drops
--- to zero, it frees all the memory associated with the match_info structure.
---
--- ---
---
---@param self GLib.MatchInfo # a `GMatchInfo`
---@return nil
function GLib.MatchInfo:unref() end

--- # record GLib.MemVTable
---
--- A set of functions used to perform memory allocation. The same `GMemVTable` must
--- be used for all allocations in the same program; a call to `g_mem_set_vtable()`,
--- if it exists, should be prior to any use of GLib.
--- 
--- This functions related to this has been deprecated in 2.46, and no longer work.
---
--- ---
---
---@class GLib.MemVTable
---@field malloc fun(n_bytes: integer): userdata
---@field realloc fun(mem: userdata, n_bytes: integer): userdata
---@field free fun(mem: userdata): nil
---@field calloc fun(n_blocks: integer, n_block_bytes: integer): userdata
---@field try_malloc fun(n_bytes: integer): userdata
---@field try_realloc fun(mem: userdata, n_bytes: integer): userdata
GLib.MemVTable = {}

--- # union GLib.Mutex
---
--- The `GMutex` struct is an opaque data structure to represent a mutex
--- (mutual exclusion). It can be used to protect data against shared
--- access.
--- 
--- Take for example the following function:
--- ```c
---   int
---   give_me_next_number (void)
---   {
---     static int current_number = 0;
--- 
---     // now do a very complicated calculation to calculate the new
---     // number, this might for example be a random number generator
---     current_number = calc_next_number (current_number);
--- 
---     return current_number;
---   }
--- ```
--- It is easy to see that this won't work in a multi-threaded
--- application. There current_number must be protected against shared
--- access. A `GMutex` can be used as a solution to this problem:
--- ```c
---   int
---   give_me_next_number (void)
---   {
---     static GMutex mutex;
---     static int current_number = 0;
---     int ret_val;
--- 
---     g_mutex_lock (&mutex);
---     ret_val = current_number = calc_next_number (current_number);
---     g_mutex_unlock (&mutex);
--- 
---     return ret_val;
---   }
--- ```
--- Notice that the `GMutex` is not initialised to any particular value.
--- Its placement in static storage ensures that it will be initialised
--- to all-zeros, which is appropriate.
--- 
--- If a `GMutex` is placed in other contexts (eg: embedded in a struct)
--- then it must be explicitly initialised using `g_mutex_init()`.
--- 
--- A `GMutex` should only be accessed via g_mutex_ functions.
---
--- ---
---
---@class GLib.Mutex
---@field p userdata
---@field i unknown[]
GLib.Mutex = {}

--- # method GLib.Mutex:clear()
---
--- Frees the resources allocated to a mutex with `g_mutex_init()`.
--- 
--- This function should not be used with a `GMutex` that has been
--- statically allocated.
--- 
--- Calling `g_mutex_clear()` on a locked mutex leads to undefined
--- behaviour.
---
--- ---
---
---@param self GLib.Mutex # an initialized `GMutex`
---@return nil
function GLib.Mutex:clear() end

--- # method GLib.Mutex:init()
---
--- Initializes a `GMutex` so that it can be used.
--- 
--- This function is useful to initialize a mutex that has been
--- allocated on the stack, or as part of a larger structure.
--- It is not necessary to initialize a mutex that has been
--- statically allocated.
--- 
--- ```c
---   typedef struct {
---     GMutex m;
---     ...
---   } Blob;
--- 
--- Blob *b;
--- 
--- b = g_new (Blob, 1);
--- g_mutex_init (&b->m);
--- ```
--- 
--- To undo the effect of `g_mutex_init()` when a mutex is no longer
--- needed, use `g_mutex_clear()`.
--- 
--- Calling `g_mutex_init()` on an already initialized `GMutex` leads
--- to undefined behaviour.
---
--- ---
---
---@param self GLib.Mutex # an uninitialized `GMutex`
---@return nil
function GLib.Mutex:init() end

--- # method GLib.Mutex:lock()
---
--- Locks `mutex`. If `mutex` is already locked by another thread, the
--- current thread will block until `mutex` is unlocked by the other
--- thread.
--- 
--- `GMutex` is neither guaranteed to be recursive nor to be
--- non-recursive.  As such, calling `g_mutex_lock()` on a `GMutex` that has
--- already been locked by the same thread results in undefined behaviour
--- (including but not limited to deadlocks).
---
--- ---
---
---@param self GLib.Mutex # a `GMutex`
---@return nil
function GLib.Mutex:lock() end

--- # method GLib.Mutex:trylock()
---
--- Tries to lock `mutex`. If `mutex` is already locked by another thread,
--- it immediately returns `false`. Otherwise it locks `mutex` and returns
--- `true`.
--- 
--- `GMutex` is neither guaranteed to be recursive nor to be
--- non-recursive.  As such, calling `g_mutex_lock()` on a `GMutex` that has
--- already been locked by the same thread results in undefined behaviour
--- (including but not limited to deadlocks or arbitrary return values).
---
--- ---
---
---@param self GLib.Mutex # a `GMutex`
---@return (boolean|nil) # `true` if `mutex` could be locked
function GLib.Mutex:trylock() end

--- # method GLib.Mutex:unlock()
---
--- Unlocks `mutex`. If another thread is blocked in a `g_mutex_lock()`
--- call for `mutex`, it will become unblocked and can lock `mutex` itself.
--- 
--- Calling `g_mutex_unlock()` on a mutex that is not locked by the
--- current thread leads to undefined behaviour.
---
--- ---
---
---@param self GLib.Mutex # a `GMutex`
---@return nil
function GLib.Mutex:unlock() end

--- # record GLib.Node
---
--- The `GNode` struct represents one node in a [n-ary tree][glib-N-ary-Trees].
---
--- ---
---
---@class GLib.Node
---@field data userdata # contains the actual data of the node.
---@field next GLib.Node # points to the node's next sibling (a sibling is another `GNode` with the same parent).
---@field prev GLib.Node # points to the node's previous sibling.
---@field parent GLib.Node # points to the parent of the `GNode`, or is `nil` if the `GNode` is the root of the tree.
---@field children GLib.Node # points to the first child of the `GNode`. The other children are accessed by using the `next` pointer of each child.
GLib.Node = {}

--- # method GLib.Node:child_index()
---
--- Gets the position of the first child of a `GNode`
--- which contains the given data.
---
--- ---
---
---@param self GLib.Node # a `GNode`
---@param data? userdata # the data to find
---@return integer # the index of the child of `node` which contains `data`, or -1 if the data is not found
function GLib.Node:child_index(data) end

--- # method GLib.Node:child_position()
---
--- Gets the position of a `GNode` with respect to its siblings.
--- `child` must be a child of `node`. The first child is numbered 0,
--- the second 1, and so on.
---
--- ---
---
---@param self GLib.Node # a `GNode`
---@param child GLib.Node # a child of `node`
---@return integer # the position of `child` with respect to its siblings
function GLib.Node:child_position(child) end

--- # method GLib.Node:depth()
---
--- Gets the depth of a `GNode`.
--- 
--- If `node` is `nil` the depth is 0. The root node has a depth of 1.
--- For the children of the root node the depth is 2. And so on.
---
--- ---
---
---@param self GLib.Node # a `GNode`
---@return integer # the depth of the `GNode`
function GLib.Node:depth() end

--- # method GLib.Node:destroy()
---
--- Removes `root` and its children from the tree, freeing any memory
--- allocated.
---
--- ---
---
---@param self GLib.Node # the root of the tree/subtree to destroy
---@return nil
function GLib.Node:destroy() end

--- # method GLib.Node:is_ancestor()
---
--- Returns `true` if `node` is an ancestor of `descendant`.
--- This is true if node is the parent of `descendant`,
--- or if node is the grandparent of `descendant` etc.
---
--- ---
---
---@param self GLib.Node # a `GNode`
---@param descendant GLib.Node # a `GNode`
---@return (boolean|nil) # `true` if `node` is an ancestor of `descendant`
function GLib.Node:is_ancestor(descendant) end

--- # method GLib.Node:max_height()
---
--- Gets the maximum height of all branches beneath a `GNode`.
--- This is the maximum distance from the `GNode` to all leaf nodes.
--- 
--- If `root` is `nil`, 0 is returned. If `root` has no children,
--- 1 is returned. If `root` has children, 2 is returned. And so on.
---
--- ---
---
---@param self GLib.Node # a `GNode`
---@return integer # the maximum height of the tree beneath `root`
function GLib.Node:max_height() end

--- # method GLib.Node:n_children()
---
--- Gets the number of children of a `GNode`.
---
--- ---
---
---@param self GLib.Node # a `GNode`
---@return integer # the number of children of `node`
function GLib.Node:n_children() end

--- # method GLib.Node:n_nodes()
---
--- Gets the number of nodes in a tree.
---
--- ---
---
---@param self GLib.Node # a `GNode`
---@param flags GLib.TraverseFlags # which types of children are to be counted, one of %G_TRAVERSE_ALL, %G_TRAVERSE_LEAVES and %G_TRAVERSE_NON_LEAVES
---@return integer # the number of nodes in the tree
function GLib.Node:n_nodes(flags) end

--- # method GLib.Node:reverse_children()
---
--- Reverses the order of the children of a `GNode`.
--- (It doesn't change the order of the grandchildren.)
---
--- ---
---
---@param self GLib.Node # a `GNode`.
---@return nil
function GLib.Node:reverse_children() end

--- # method GLib.Node:unlink()
---
--- Unlinks a `GNode` from a tree, resulting in two separate trees.
---
--- ---
---
---@param self GLib.Node # the `GNode` to unlink, which becomes the root of a new tree
---@return nil
function GLib.Node:unlink() end

---@alias GLib.NodeForeachFunc fun(node: GLib.Node, data: userdata): nil

---@alias GLib.NodeTraverseFunc fun(node: GLib.Node, data: userdata): (boolean|nil)

---@enum GLib.NormalizeMode
GLib.NormalizeMode = {}

---@enum GLib.NumberParserError
GLib.NumberParserError = {}

--- # record GLib.Once
---
--- A `GOnce` struct controls a one-time initialization function. Any
--- one-time initialization function must have its own unique `GOnce`
--- struct.
---
--- ---
---
---@class GLib.Once
---@field status GLib.OnceStatus # the status of the `GOnce`
---@field retval userdata # the value returned by the call to the function, if `status` is %G_ONCE_STATUS_READY
GLib.Once = {}

--- # function GLib.Once.init_enter()
---
--- Function to be called when starting a critical initialization
--- section. The argument `location` must point to a static
--- 0-initialized variable that will be set to a value other than 0 at
--- the end of the initialization section. In combination with
--- `g_once_init_leave()` and the unique address `value_location`, it can
--- be ensured that an initialization section will be executed only once
--- during a program's life time, and that concurrent threads are
--- blocked until initialization completed. To be used in constructs
--- like this:
--- 
--- ```c
---   static gsize initialization_value = 0;
--- 
---   if (g_once_init_enter (&initialization_value))
---     {
---       gsize setup_value = 42; // initialization code here
--- 
---       g_once_init_leave (&initialization_value, setup_value);
---     }
--- 
---   // use initialization_value here
--- ```
--- 
--- While `location` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param location userdata # location of a static initializable variable containing 0
---@return (boolean|nil) # `true` if the initialization section should be entered, `false` and blocks otherwise
function GLib.Once.init_enter(location) end

--- # function GLib.Once.init_leave()
---
--- Counterpart to `g_once_init_enter()`. Expects a location of a static
--- 0-initialized initialization variable, and an initialization value
--- other than 0. Sets the variable to the initialization value, and
--- releases concurrent threads blocking in `g_once_init_enter()` on this
--- initialization variable.
--- 
--- While `location` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param location userdata # location of a static initializable variable containing 0
---@param result integer # new non-0 value for *`value_location`
---@return nil
function GLib.Once.init_leave(location, result) end

---@enum GLib.OnceStatus
GLib.OnceStatus = {}

---@enum GLib.OptionArg
GLib.OptionArg = {}

---@alias GLib.OptionArgFunc fun(option_name: string, value: string, data: userdata): (boolean|nil)

--- # record GLib.OptionContext
---
--- The GOption commandline parser is intended to be a simpler replacement
--- for the popt library. It supports short and long commandline options,
--- as shown in the following example:
--- 
--- `testtreemodel -r 1 --max-size 20 --rand --display=:1.0 -vb -- file1 file2`
--- 
--- The example demonstrates a number of features of the GOption
--- commandline parser:
--- 
--- - Options can be single letters, prefixed by a single dash.
--- 
--- - Multiple short options can be grouped behind a single dash.
--- 
--- - Long options are prefixed by two consecutive dashes.
--- 
--- - Options can have an extra argument, which can be a number, a string or
---   a filename. For long options, the extra argument can be appended with
---   an equals sign after the option name, which is useful if the extra
---   argument starts with a dash, which would otherwise cause it to be
---   interpreted as another option.
--- 
--- - Non-option arguments are returned to the application as rest arguments.
--- 
--- - An argument consisting solely of two dashes turns off further parsing,
---   any remaining arguments (even those starting with a dash) are returned
---   to the application as rest arguments.
--- 
--- Another important feature of GOption is that it can automatically
--- generate nicely formatted help output. Unless it is explicitly turned
--- off with `g_option_context_set_help_enabled()`, GOption will recognize
--- the `--help`, `-?`, `--help-all` and `--help-groupname` options
--- (where `groupname` is the name of a `GOptionGroup`) and write a text
--- similar to the one shown in the following example to stdout.
--- 
--- ```c
--- Usage:
---   testtreemodel [OPTION...] - test tree model performance
---  
--- Help Options:
---   -h, --help               Show help options
---   --help-all               Show all help options
---   --help-gtk               Show GTK+ Options
---  
--- Application Options:
---   -r, --repeats=N          Average over N repetitions
---   -m, --max-size=M         Test up to 2^M items
---   --display=DISPLAY        X display to use
---   -v, --verbose            Be verbose
---   -b, --beep               Beep when done
---   --rand                   Randomize the data
--- ```
--- 
--- GOption groups options in `GOptionGroups`, which makes it easy to
--- incorporate options from multiple sources. The intended use for this is
--- to let applications collect option groups from the libraries it uses,
--- add them to their `GOptionContext`, and parse all options by a single call
--- to `g_option_context_parse()`. See `gtk_get_option_group()` for an example.
--- 
--- If an option is declared to be of type string or filename, GOption takes
--- care of converting it to the right encoding; strings are returned in
--- UTF-8, filenames are returned in the GLib filename encoding. Note that
--- this only works if `setlocale()` has been called before
--- `g_option_context_parse()`.
--- 
--- Here is a complete example of setting up GOption to parse the example
--- commandline above and produce the example help output.
--- ```c
--- static gint repeats = 2;
--- static gint max_size = 8;
--- static gboolean verbose = FALSE;
--- static gboolean beep = FALSE;
--- static gboolean randomize = FALSE;
--- 
--- static GOptionEntry entries[] =
--- {
---   { "repeats", 'r', 0, G_OPTION_ARG_INT, &repeats, "Average over N repetitions", "N" },
---   { "max-size", 'm', 0, G_OPTION_ARG_INT, &max_size, "Test up to 2^M items", "M" },
---   { "verbose", 'v', 0, G_OPTION_ARG_NONE, &verbose, "Be verbose", NULL },
---   { "beep", 'b', 0, G_OPTION_ARG_NONE, &beep, "Beep when done", NULL },
---   { "rand", 0, 0, G_OPTION_ARG_NONE, &randomize, "Randomize the data", NULL },
---   G_OPTION_ENTRY_NULL
--- };
--- 
--- int
--- main (int argc, char *argv[])
--- {
---   GError *error = NULL;
---   GOptionContext *context;
--- 
---   context = g_option_context_new ("- test tree model performance");
---   g_option_context_add_main_entries (context, entries, GETTEXT_PACKAGE);
---   g_option_context_add_group (context, gtk_get_option_group (TRUE));
---   if (!g_option_context_parse (context, &argc, &argv, &error))
---     {
---       g_print ("option parsing failed: %s\n", error->message);
---       exit (1);
---     }
--- 
---   ...
--- 
--- }
--- ```
--- 
--- On UNIX systems, the argv that is passed to `main()` has no particular
--- encoding, even to the extent that different parts of it may have
--- different encodings.  In general, normal arguments and flags will be
--- in the current locale and filenames should be considered to be opaque
--- byte strings.  Proper use of %G_OPTION_ARG_FILENAME vs
--- %G_OPTION_ARG_STRING is therefore important.
--- 
--- Note that on Windows, filenames do have an encoding, but using
--- `GOptionContext` with the argv as passed to `main()` will result in a
--- program that can only accept commandline arguments with characters
--- from the system codepage.  This can cause problems when attempting to
--- deal with filenames containing Unicode characters that fall outside
--- of the codepage.
--- 
--- A solution to this is to use g_win32`_get_command_line()` and
--- `g_option_context_parse_strv()` which will properly handle full Unicode
--- filenames.  If you are using `GApplication`, this is done
--- automatically for you.
--- 
--- The following example shows how you can use `GOptionContext` directly
--- in order to correctly deal with Unicode filenames on Windows:
--- 
--- ```c
--- int
--- main (int argc, char **argv)
--- {
---   GError *error = NULL;
---   GOptionContext *context;
---   gchar **args;
--- 
--- `ifdef` G_OS_WIN32
---   args = g_win32_get_command_line ();
--- `else`
---   args = g_strdupv (argv);
--- `endif`
--- 
---   // set up context
--- 
---   if (!g_option_context_parse_strv (context, &args, &error))
---     {
---       // error happened
---     }
--- 
---   ...
--- 
---   g_strfreev (args);
--- 
---   ...
--- }
--- ```
---
--- ---
---
---@class GLib.OptionContext
GLib.OptionContext = {}

--- # method GLib.OptionContext:add_group()
---
--- Adds a `GOptionGroup` to the `context`, so that parsing with `context`
--- will recognize the options in the group. Note that this will take
--- ownership of the `group` and thus the `group` should not be freed.
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@param group GLib.OptionGroup # the group to add
---@return nil
function GLib.OptionContext:add_group(group) end

--- # method GLib.OptionContext:add_main_entries()
---
--- A convenience function which creates a main group if it doesn't
--- exist, adds the `entries` to it and sets the translation domain.
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@param entries unknown[] # a `nil`-terminated array of `GOptionEntrys`
---@param translation_domain? string # a translation domain to use for translating the `--help` output for the options in `entries` with `gettext()`, or `nil`
---@return nil
function GLib.OptionContext:add_main_entries(entries, translation_domain) end

--- # method GLib.OptionContext:free()
---
--- Frees context and all the groups which have been
--- added to it.
--- 
--- Please note that parsed arguments need to be freed separately (see
--- `GOptionEntry`).
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@return nil
function GLib.OptionContext:free() end

--- # method GLib.OptionContext:get_description()
---
--- Returns the description. See `g_option_context_set_description()`.
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@return string # the description
function GLib.OptionContext:get_description() end

--- # method GLib.OptionContext:get_help()
---
--- Returns a formatted, translated help text for the given context.
--- To obtain the text produced by `--help`, call
--- `g_option_context_get_help (context, TRUE, NULL)`.
--- To obtain the text produced by `--help-all`, call
--- `g_option_context_get_help (context, FALSE, NULL)`.
--- To obtain the help text for an option group, call
--- `g_option_context_get_help (context, FALSE, group)`.
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@param main_help (boolean|nil) # if `true`, only include the main group
---@param group? GLib.OptionGroup # the `GOptionGroup` to create help for, or `nil`
---@return string # A newly allocated string containing the help text
function GLib.OptionContext:get_help(main_help, group) end

--- # method GLib.OptionContext:get_help_enabled()
---
--- Returns whether automatic `--help` generation
--- is turned on for `context`. See `g_option_context_set_help_enabled()`.
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@return (boolean|nil) # `true` if automatic help generation is turned on.
function GLib.OptionContext:get_help_enabled() end

--- # method GLib.OptionContext:get_ignore_unknown_options()
---
--- Returns whether unknown options are ignored or not. See
--- `g_option_context_set_ignore_unknown_options()`.
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@return (boolean|nil) # `true` if unknown options are ignored.
function GLib.OptionContext:get_ignore_unknown_options() end

--- # method GLib.OptionContext:get_main_group()
---
--- Returns a pointer to the main group of `context`.
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@return GLib.OptionGroup # the main group of `context`, or `nil` if `context` doesn't have a main group. Note that group belongs to `context` and should not be modified or freed.
function GLib.OptionContext:get_main_group() end

--- # method GLib.OptionContext:get_strict_posix()
---
--- Returns whether strict POSIX code is enabled.
--- 
--- See `g_option_context_set_strict_posix()` for more information.
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@return (boolean|nil) # `true` if strict POSIX is enabled, `false` otherwise.
function GLib.OptionContext:get_strict_posix() end

--- # method GLib.OptionContext:get_summary()
---
--- Returns the summary. See `g_option_context_set_summary()`.
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@return string # the summary
function GLib.OptionContext:get_summary() end

--- # method GLib.OptionContext:parse()
---
--- Parses the command line arguments, recognizing options
--- which have been added to `context`. A side-effect of
--- calling this function is that `g_set_prgname()` will be
--- called.
--- 
--- If the parsing is successful, any parsed arguments are
--- removed from the array and `argc` and `argv` are updated
--- accordingly. A '--' option is stripped from `argv`
--- unless there are unparsed options before and after it,
--- or some of the options after it start with '-'. In case
--- of an error, `argc` and `argv` are left unmodified.
--- 
--- If automatic `--help` support is enabled
--- (see `g_option_context_set_help_enabled()`), and the
--- `argv` array contains one of the recognized help options,
--- this function will produce help output to stdout and
--- call `exit (0)`.
--- 
--- Note that function depends on the [current locale][setlocale] for
--- automatic character set conversion of string and filename
--- arguments.
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@param argc integer # a pointer to the number of command line arguments
---@param argv unknown[] # a pointer to the array of command line arguments
---@return (boolean|nil) # `true` if the parsing was successful, `false` if an error occurred
function GLib.OptionContext:parse(argc, argv) end

--- # method GLib.OptionContext:parse_strv()
---
--- Parses the command line arguments.
--- 
--- This function is similar to `g_option_context_parse()` except that it
--- respects the normal memory rules when dealing with a strv instead of
--- assuming that the passed-in array is the argv of the main function.
--- 
--- In particular, strings that are removed from the arguments list will
--- be freed using `g_free()`.
--- 
--- On Windows, the strings are expected to be in UTF-8.  This is in
--- contrast to `g_option_context_parse()` which expects them to be in the
--- system codepage, which is how they are passed as `argv` to `main()`.
--- See g_win32`_get_command_line()` for a solution.
--- 
--- This function is useful if you are trying to use `GOptionContext` with
--- `GApplication`.
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@param arguments unknown[] # a pointer to the command line arguments (which must be in UTF-8 on Windows). Starting with GLib 2.62, `arguments` can be `nil`, which matches `g_option_context_parse()`.
---@return (boolean|nil) # `true` if the parsing was successful, `false` if an error occurred
function GLib.OptionContext:parse_strv(arguments) end

--- # method GLib.OptionContext:set_description()
---
--- Adds a string to be displayed in `--help` output after the list
--- of options. This text often includes a bug reporting address.
--- 
--- Note that the summary is translated (see
--- `g_option_context_set_translate_func()`).
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@param description? string # a string to be shown in `--help` output after the list of options, or `nil`
---@return nil
function GLib.OptionContext:set_description(description) end

--- # method GLib.OptionContext:set_help_enabled()
---
--- Enables or disables automatic generation of `--help` output.
--- By default, `g_option_context_parse()` recognizes `--help`, `-h`,
--- `-?`, `--help-all` and `--help-groupname` and creates suitable
--- output to stdout.
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@param help_enabled (boolean|nil) # `true` to enable `--help`, `false` to disable it
---@return nil
function GLib.OptionContext:set_help_enabled(help_enabled) end

--- # method GLib.OptionContext:set_ignore_unknown_options()
---
--- Sets whether to ignore unknown options or not. If an argument is
--- ignored, it is left in the `argv` array after parsing. By default,
--- `g_option_context_parse()` treats unknown options as error.
--- 
--- This setting does not affect non-option arguments (i.e. arguments
--- which don't start with a dash). But note that GOption cannot reliably
--- determine whether a non-option belongs to a preceding unknown option.
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@param ignore_unknown (boolean|nil) # `true` to ignore unknown options, `false` to produce an error when unknown options are met
---@return nil
function GLib.OptionContext:set_ignore_unknown_options(ignore_unknown) end

--- # method GLib.OptionContext:set_main_group()
---
--- Sets a `GOptionGroup` as main group of the `context`.
--- This has the same effect as calling `g_option_context_add_group()`,
--- the only difference is that the options in the main group are
--- treated differently when generating `--help` output.
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@param group GLib.OptionGroup # the group to set as main group
---@return nil
function GLib.OptionContext:set_main_group(group) end

--- # method GLib.OptionContext:set_strict_posix()
---
--- Sets strict POSIX mode.
--- 
--- By default, this mode is disabled.
--- 
--- In strict POSIX mode, the first non-argument parameter encountered
--- (eg: filename) terminates argument processing.  Remaining arguments
--- are treated as non-options and are not attempted to be parsed.
--- 
--- If strict POSIX mode is disabled then parsing is done in the GNU way
--- where option arguments can be freely mixed with non-options.
--- 
--- As an example, consider "ls foo -l".  With GNU style parsing, this
--- will list "foo" in long mode.  In strict POSIX style, this will list
--- the files named "foo" and "-l".
--- 
--- It may be useful to force strict POSIX mode when creating "verb
--- style" command line tools.  For example, the "gsettings" command line
--- tool supports the global option "--schemadir" as well as many
--- subcommands ("get", "set", etc.) which each have their own set of
--- arguments.  Using strict POSIX mode will allow parsing the global
--- options up to the verb name while leaving the remaining options to be
--- parsed by the relevant subcommand (which can be determined by
--- examining the verb name, which should be present in argv[1] after
--- parsing).
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@param strict_posix (boolean|nil) # the new value
---@return nil
function GLib.OptionContext:set_strict_posix(strict_posix) end

--- # method GLib.OptionContext:set_summary()
---
--- Adds a string to be displayed in `--help` output before the list
--- of options. This is typically a summary of the program functionality.
--- 
--- Note that the summary is translated (see
--- `g_option_context_set_translate_func()` and
--- `g_option_context_set_translation_domain()`).
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@param summary? string # a string to be shown in `--help` output before the list of options, or `nil`
---@return nil
function GLib.OptionContext:set_summary(summary) end

--- # method GLib.OptionContext:set_translate_func()
---
--- Sets the function which is used to translate the contexts
--- user-visible strings, for `--help` output. If `func` is `nil`,
--- strings are not translated.
--- 
--- Note that option groups have their own translation functions,
--- this function only affects the `parameter_string` (see `g_option_context_new()`),
--- the summary (see `g_option_context_set_summary()`) and the description
--- (see `g_option_context_set_description()`).
--- 
--- If you are using `gettext()`, you only need to set the translation
--- domain, see `g_option_context_set_translation_domain()`.
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@param func? GLib.TranslateFunc # the `GTranslateFunc`, or `nil`
---@param data? userdata # user data to pass to `func`, or `nil`
---@param destroy_notify? GLib.DestroyNotify # a function which gets called to free `data`, or `nil`
---@return nil
function GLib.OptionContext:set_translate_func(func, data, destroy_notify) end

--- # method GLib.OptionContext:set_translation_domain()
---
--- A convenience function to use `gettext()` for translating
--- user-visible strings.
---
--- ---
---
---@param self GLib.OptionContext # a `GOptionContext`
---@param domain string # the domain to use
---@return nil
function GLib.OptionContext:set_translation_domain(domain) end

--- # record GLib.OptionEntry
---
--- A GOptionEntry struct defines a single option. To have an effect, they
--- must be added to a `GOptionGroup` with `g_option_context_add_main_entries()`
--- or `g_option_group_add_entries()`.
---
--- ---
---
---@class GLib.OptionEntry
---@field long_name string # The long name of an option can be used to specify it in a commandline as `--long_name`. Every option must have a long name. To resolve conflicts if multiple option groups contain the same long name, it is also possible to specify the option as `--groupname-long_name`.
---@field short_name integer # If an option has a short name, it can be specified `-short_name` in a commandline. `short_name` must be a printable ASCII character different from '-', or zero if the option has no short name.
---@field flags integer # Flags from `GOptionFlags`
---@field arg GLib.OptionArg # The type of the option, as a `GOptionArg`
---@field arg_data userdata # If the `arg` type is %G_OPTION_ARG_CALLBACK, then `arg_data` must point to a `GOptionArgFunc` callback function, which will be called to handle the extra argument. Otherwise, `arg_data` is a pointer to a location to store the value, the required type of the location depends on the `arg` type: - %G_OPTION_ARG_NONE: %gboolean - %G_OPTION_ARG_STRING: %gchar* - %G_OPTION_ARG_INT: %gint - %G_OPTION_ARG_FILENAME: %gchar* - %G_OPTION_ARG_STRING_ARRAY: %gchar** - %G_OPTION_ARG_FILENAME_ARRAY: %gchar** - %G_OPTION_ARG_DOUBLE: %gdouble If `arg` type is %G_OPTION_ARG_STRING or %G_OPTION_ARG_FILENAME, the location will contain a newly allocated string if the option was given. That string needs to be freed by the callee using `g_free()`. Likewise if `arg` type is %G_OPTION_ARG_STRING_ARRAY or %G_OPTION_ARG_FILENAME_ARRAY, the data should be freed using `g_strfreev()`.
---@field description string # the description for the option in `--help` output. The `description` is translated using the `translate_func` of the group, see `g_option_group_set_translation_domain()`.
---@field arg_description string # The placeholder to use for the extra argument parsed by the option in `--help` output. The `arg_description` is translated using the `translate_func` of the group, see `g_option_group_set_translation_domain()`.
GLib.OptionEntry = {}

---@enum GLib.OptionError
GLib.OptionError = {}

---@alias GLib.OptionErrorFunc fun(context: GLib.OptionContext, group: GLib.OptionGroup, data: userdata): nil

---@enum GLib.OptionFlags
GLib.OptionFlags = {}

--- # record GLib.OptionGroup
---
--- A `GOptionGroup` struct defines the options in a single
--- group. The struct has only private fields and should not be directly accessed.
--- 
--- All options in a group share the same translation function. Libraries which
--- need to parse commandline options are expected to provide a function for
--- getting a `GOptionGroup` holding their options, which
--- the application can then add to its `GOptionContext`.
---
--- ---
---
---@class GLib.OptionGroup
---@operator call: GLib.OptionGroup
GLib.OptionGroup = {}

--- # method GLib.OptionGroup:add_entries()
---
--- Adds the options specified in `entries` to `group`.
---
--- ---
---
---@param self GLib.OptionGroup # a `GOptionGroup`
---@param entries unknown[] # a `nil`-terminated array of `GOptionEntrys`
---@return nil
function GLib.OptionGroup:add_entries(entries) end

--- # method GLib.OptionGroup:free()
---
--- Frees a `GOptionGroup`. Note that you must not free groups
--- which have been added to a `GOptionContext`.
---
--- ---
---
---@param self GLib.OptionGroup # a `GOptionGroup`
---@return nil
function GLib.OptionGroup:free() end

--- # method GLib.OptionGroup:ref()
---
--- Increments the reference count of `group` by one.
---
--- ---
---
---@param self GLib.OptionGroup # a `GOptionGroup`
---@return GLib.OptionGroup # a `GOptionGroup`
function GLib.OptionGroup:ref() end

--- # method GLib.OptionGroup:set_translate_func()
---
--- Sets the function which is used to translate user-visible strings,
--- for `--help` output. Different groups can use different
--- `GTranslateFuncs`. If `func` is `nil`, strings are not translated.
--- 
--- If you are using `gettext()`, you only need to set the translation
--- domain, see `g_option_group_set_translation_domain()`.
---
--- ---
---
---@param self GLib.OptionGroup # a `GOptionGroup`
---@param func? GLib.TranslateFunc # the `GTranslateFunc`, or `nil`
---@param data? userdata # user data to pass to `func`, or `nil`
---@param destroy_notify? GLib.DestroyNotify # a function which gets called to free `data`, or `nil`
---@return nil
function GLib.OptionGroup:set_translate_func(func, data, destroy_notify) end

--- # method GLib.OptionGroup:set_translation_domain()
---
--- A convenience function to use `gettext()` for translating
--- user-visible strings.
---
--- ---
---
---@param self GLib.OptionGroup # a `GOptionGroup`
---@param domain string # the domain to use
---@return nil
function GLib.OptionGroup:set_translation_domain(domain) end

--- # method GLib.OptionGroup:unref()
---
--- Decrements the reference count of `group` by one.
--- If the reference count drops to 0, the `group` will be freed.
--- and all memory allocated by the `group` is released.
---
--- ---
---
---@param self GLib.OptionGroup # a `GOptionGroup`
---@return nil
function GLib.OptionGroup:unref() end

--- # function GLib.OptionGroup.new()
---
--- Creates a new `GOptionGroup`.
---
--- ---
---
---@param name string # the name for the option group, this is used to provide help for the options in this group with `--help-``name`
---@param description string # a description for this group to be shown in `--help`. This string is translated using the translation domain or translation function of the group
---@param help_description string # a description for the `--help-``name` option. This string is translated using the translation domain or translation function of the group
---@param user_data? userdata # user data that will be passed to the pre- and post-parse hooks, the error hook and to callbacks of %G_OPTION_ARG_CALLBACK options, or `nil`
---@param destroy? GLib.DestroyNotify # a function that will be called to free `user_data`, or `nil`
---@return GLib.OptionGroup # a newly created option group. It should be added to a `GOptionContext` or freed with `g_option_group_unref()`.
function GLib.OptionGroup.new(name, description, help_description, user_data, destroy) end

---@alias GLib.OptionParseFunc fun(context: GLib.OptionContext, group: GLib.OptionGroup, data: userdata): (boolean|nil)

--- # record GLib.PathBuf
---
--- `GPathBuf` is a helper type that allows you to easily build paths from
--- individual elements, using the platform specific conventions for path
--- separators.
--- 
--- ```c
--- g_auto (GPathBuf) path;
--- 
--- g_path_buf_init (&path);
--- 
--- g_path_buf_push (&path, "usr");
--- g_path_buf_push (&path, "bin");
--- g_path_buf_push (&path, "echo");
--- 
--- g_autofree char *echo = g_path_buf_to_path (&path);
--- g_assert_cmpstr (echo, ==, "/usr/bin/echo");
--- ```
--- 
--- You can also load a full path and then operate on its components:
--- 
--- ```c
--- g_auto (GPathBuf) path;
--- 
--- g_path_buf_init_from_path (&path, "/usr/bin/echo");
--- 
--- g_path_buf_pop (&path);
--- g_path_buf_push (&path, "sh");
--- 
--- g_autofree char *sh = g_path_buf_to_path (&path);
--- g_assert_cmpstr (sh, ==, "/usr/bin/sh");
--- ```
--- 
--- `GPathBuf` is available since GLib 2.76.
---
--- ---
---
---@class GLib.PathBuf
---@field dummy unknown[]
GLib.PathBuf = {}

--- # method GLib.PathBuf:clear()
---
--- Clears the contents of the path buffer.
--- 
--- This function should be use to free the resources in a stack-allocated
--- `GPathBuf` initialized using `g_path_buf_init()` or
--- `g_path_buf_init_from_path()`.
---
--- ---
---
---@param self GLib.PathBuf # a path buffer
---@return nil
function GLib.PathBuf:clear() end

--- # method GLib.PathBuf:clear_to_path()
---
--- Clears the contents of the path buffer and returns the built path.
--- 
--- This function returns `NULL` if the `GPathBuf` is empty.
--- 
--- See also: `g_path_buf_to_path()`
---
--- ---
---
---@param self GLib.PathBuf # a path buffer
---@return string # the built path
function GLib.PathBuf:clear_to_path() end

--- # method GLib.PathBuf:free()
---
--- Frees a `GPathBuf` allocated by `g_path_buf_new()`.
---
--- ---
---
---@param self GLib.PathBuf # a path buffer
---@return nil
function GLib.PathBuf:free() end

--- # method GLib.PathBuf:free_to_path()
---
--- Frees a `GPathBuf` allocated by `g_path_buf_new()`, and
--- returns the path inside the buffer.
--- 
--- This function returns `NULL` if the `GPathBuf` is empty.
--- 
--- See also: `g_path_buf_to_path()`
---
--- ---
---
---@param self GLib.PathBuf # a path buffer
---@return string # the path
function GLib.PathBuf:free_to_path() end

--- # method GLib.PathBuf:init()
---
--- Initializes a `GPathBuf` instance.
---
--- ---
---
---@param self GLib.PathBuf # a path buffer
---@return GLib.PathBuf # the initialized path builder
function GLib.PathBuf:init() end

--- # method GLib.PathBuf:init_from_path()
---
--- Initializes a `GPathBuf` instance with the given path.
---
--- ---
---
---@param self GLib.PathBuf # a path buffer
---@param path? string # a file system path
---@return GLib.PathBuf # the initialized path builder
function GLib.PathBuf:init_from_path(path) end

--- # method GLib.PathBuf:pop()
---
--- Removes the last element of the path buffer.
--- 
--- If there is only one element in the path buffer (for example, `/` on
--- Unix-like operating systems or the drive on Windows systems), it will
--- not be removed and `false` will be returned instead.
--- 
--- ```c
--- GPathBuf buf, cmp;
--- 
--- g_path_buf_init_from_path (&buf, "/bin/sh");
--- 
--- g_path_buf_pop (&buf);
--- g_path_buf_init_from_path (&cmp, "/bin");
--- g_assert_true (g_path_buf_equal (&buf, &cmp));
--- g_path_buf_clear (&cmp);
--- 
--- g_path_buf_pop (&buf);
--- g_path_buf_init_from_path (&cmp, "/");
--- g_assert_true (g_path_buf_equal (&buf, &cmp));
--- g_path_buf_clear (&cmp);
--- 
--- g_path_buf_clear (&buf);
--- ```
---
--- ---
---
---@param self GLib.PathBuf # a path buffer
---@return (boolean|nil) # `TRUE` if the buffer was modified and `FALSE` otherwise
function GLib.PathBuf:pop() end

--- # method GLib.PathBuf:push()
---
--- Extends the given path buffer with `path`.
--- 
--- If `path` is absolute, it replaces the current path.
--- 
--- If `path` contains a directory separator, the buffer is extended by
--- as many elements the path provides.
--- 
--- On Windows, both forward slashes and backslashes are treated as
--- directory separators. On other platforms, %G_DIR_SEPARATOR_S is the
--- only directory separator.
--- 
--- ```c
--- GPathBuf buf, cmp;
--- 
--- g_path_buf_init_from_path (&buf, "/tmp");
--- g_path_buf_push (&buf, ".X11-unix/X0");
--- g_path_buf_init_from_path (&cmp, "/tmp/.X11-unix/X0");
--- g_assert_true (g_path_buf_equal (&buf, &cmp));
--- g_path_buf_clear (&cmp);
--- 
--- g_path_buf_push (&buf, "/etc/locale.conf");
--- g_path_buf_init_from_path (&cmp, "/etc/locale.conf");
--- g_assert_true (g_path_buf_equal (&buf, &cmp));
--- g_path_buf_clear (&cmp);
--- 
--- g_path_buf_clear (&buf);
--- ```
---
--- ---
---
---@param self GLib.PathBuf # a path buffer
---@param path string # a path
---@return GLib.PathBuf # the same pointer to `buf`, for convenience
function GLib.PathBuf:push(path) end

--- # method GLib.PathBuf:set_extension()
---
--- Adds an extension to the file name in the path buffer.
--- 
--- If `extension` is `NULL`, the extension will be unset.
--- 
--- If the path buffer does not have a file name set, this function returns
--- `FALSE` and leaves the path buffer unmodified.
---
--- ---
---
---@param self GLib.PathBuf # a path buffer
---@param extension? string # the file extension
---@return (boolean|nil) # `TRUE` if the extension was replaced, and `FALSE` otherwise
function GLib.PathBuf:set_extension(extension) end

--- # method GLib.PathBuf:set_filename()
---
--- Sets the file name of the path.
--- 
--- If the path buffer is empty, the filename is left unset and this
--- function returns `FALSE`.
--- 
--- If the path buffer only contains the root element (on Unix-like operating
--- systems) or the drive (on Windows), this is the equivalent of pushing
--- the new `file_name`.
--- 
--- If the path buffer contains a path, this is the equivalent of
--- popping the path buffer and pushing `file_name`, creating a
--- sibling of the original path.
--- 
--- ```c
--- GPathBuf buf, cmp;
--- 
--- g_path_buf_init_from_path (&buf, "/");
--- 
--- g_path_buf_set_filename (&buf, "bar");
--- g_path_buf_init_from_path (&cmp, "/bar");
--- g_assert_true (g_path_buf_equal (&buf, &cmp));
--- g_path_buf_clear (&cmp);
--- 
--- g_path_buf_set_filename (&buf, "baz.txt");
--- g_path_buf_init_from_path (&cmp, "/baz.txt");
--- g_assert_true (g_path_buf_equal (&buf, &cmp);
--- g_path_buf_clear (&cmp);
--- 
--- g_path_buf_clear (&buf);
--- ```
---
--- ---
---
---@param self GLib.PathBuf # a path buffer
---@param file_name string # the file name in the path
---@return (boolean|nil) # `TRUE` if the file name was replaced, and `FALSE` otherwise
function GLib.PathBuf:set_filename(file_name) end

--- # method GLib.PathBuf:to_path()
---
--- Retrieves the built path from the path buffer.
--- 
--- On Windows, the result contains backslashes as directory separators,
--- even if forward slashes were used in input.
--- 
--- If the path buffer is empty, this function returns `NULL`.
---
--- ---
---
---@param self GLib.PathBuf # a path buffer
---@return string # the path
function GLib.PathBuf:to_path() end

--- # function GLib.PathBuf.equal()
---
--- Compares two path buffers for equality and returns `TRUE`
--- if they are equal.
--- 
--- The path inside the paths buffers are not going to be normalized,
--- so `X/Y/Z/A/..`, `X/./Y/Z` and `X/Y/Z` are not going to be considered
--- equal.
--- 
--- This function can be passed to `g_hash_table_new()` as the
--- `key_equal_func` parameter.
---
--- ---
---
---@param v1 userdata # a path buffer to compare
---@param v2 userdata # a path buffer to compare
---@return (boolean|nil) # `TRUE` if the two path buffers are equal, and `FALSE` otherwise
function GLib.PathBuf.equal(v1, v2) end

--- # record GLib.PatternSpec
---
--- A GPatternSpec struct is the 'compiled' form of a pattern. This
--- structure is opaque and its fields cannot be accessed directly.
---
--- ---
---
---@class GLib.PatternSpec
---@operator call: GLib.PatternSpec
GLib.PatternSpec = {}

--- # method GLib.PatternSpec:copy()
---
--- Copies `pspec` in a new `GPatternSpec`.
---
--- ---
---
---@param self GLib.PatternSpec # a `GPatternSpec`
---@return GLib.PatternSpec # a copy of `pspec`.
function GLib.PatternSpec:copy() end

--- # method GLib.PatternSpec:equal()
---
--- Compares two compiled pattern specs and returns whether they will
--- match the same set of strings.
---
--- ---
---
---@param self GLib.PatternSpec # a `GPatternSpec`
---@param pspec2 GLib.PatternSpec # another `GPatternSpec`
---@return (boolean|nil) # Whether the compiled patterns are equal
function GLib.PatternSpec:equal(pspec2) end

--- # method GLib.PatternSpec:free()
---
--- Frees the memory allocated for the `GPatternSpec`.
---
--- ---
---
---@param self GLib.PatternSpec # a `GPatternSpec`
---@return nil
function GLib.PatternSpec:free() end

--- # method GLib.PatternSpec:match()
---
--- Matches a string against a compiled pattern. Passing the correct
--- length of the string given is mandatory. The reversed string can be
--- omitted by passing `nil`, this is more efficient if the reversed
--- version of the string to be matched is not at hand, as
--- `g_pattern_match()` will only construct it if the compiled pattern
--- requires reverse matches.
--- 
--- Note that, if the user code will (possibly) match a string against a
--- multitude of patterns containing wildcards, chances are high that
--- some patterns will require a reversed string. In this case, it's
--- more efficient to provide the reversed string to avoid multiple
--- constructions thereof in the various calls to `g_pattern_match()`.
--- 
--- Note also that the reverse of a UTF-8 encoded string can in general
--- not be obtained by `g_strreverse()`. This works only if the string
--- does not contain any multibyte characters. GLib offers the
--- g_utf8`_strreverse()` function to reverse UTF-8 encoded strings.
---
--- ---
---
---@param self GLib.PatternSpec # a `GPatternSpec`
---@param string_length integer # the length of `string` (in bytes, i.e. `strlen()`, not g_utf8`_strlen()`)
---@param string string # the UTF-8 encoded string to match
---@param string_reversed? string # the reverse of `string` or `nil`
---@return (boolean|nil) # `true` if `string` matches `pspec`
function GLib.PatternSpec:match(string_length, string, string_reversed) end

--- # method GLib.PatternSpec:match_string()
---
--- Matches a string against a compiled pattern. If the string is to be
--- matched against more than one pattern, consider using
--- `g_pattern_match()` instead while supplying the reversed string.
---
--- ---
---
---@param self GLib.PatternSpec # a `GPatternSpec`
---@param string string # the UTF-8 encoded string to match
---@return (boolean|nil) # `true` if `string` matches `pspec`
function GLib.PatternSpec:match_string(string) end

--- # function GLib.PatternSpec.new()
---
--- Compiles a pattern to a `GPatternSpec`.
---
--- ---
---
---@param pattern string # a zero-terminated UTF-8 encoded string
---@return GLib.PatternSpec # a newly-allocated `GPatternSpec`
function GLib.PatternSpec.new(pattern) end

--- # record GLib.PollFD
---
--- Represents a file descriptor, which events to poll for, and which events
--- occurred.
---
--- ---
---
---@class GLib.PollFD
---@field fd integer # the file descriptor to poll (or a HANDLE on Win32)
---@field events integer # a bitwise combination from `GIOCondition`, specifying which events should be polled for. Typically for reading from a file descriptor you would use %G_IO_IN | %G_IO_HUP | %G_IO_ERR, and for writing you would use %G_IO_OUT | %G_IO_ERR.
---@field revents integer # a bitwise combination of flags from `GIOCondition`, returned from the `poll()` function to indicate which events occurred.
GLib.PollFD = {}

---@alias GLib.PollFunc fun(ufds: GLib.PollFD, nfsd: integer, timeout_: integer): integer

---@alias GLib.PrintFunc fun(string: string): nil

--- # record GLib.Private
---
--- The `GPrivate` struct is an opaque data structure to represent a
--- thread-local data key. It is approximately equivalent to the
--- `pthread_setspecific()`/`pthread_getspecific()` APIs on POSIX and to
--- TlsSetV`alue()`/TlsGetV`alue()` on Windows.
--- 
--- If you don't already know why you might want this functionality,
--- then you probably don't need it.
--- 
--- `GPrivate` is a very limited resource (as far as 128 per program,
--- shared between all libraries). It is also not possible to destroy a
--- `GPrivate` after it has been used. As such, it is only ever acceptable
--- to use `GPrivate` in static scope, and even then sparingly so.
--- 
--- See G_PRIVATE_INIT() for a couple of examples.
--- 
--- The `GPrivate` structure should be considered opaque.  It should only
--- be accessed via the g_private_ functions.
---
--- ---
---
---@class GLib.Private
---@field p userdata
---@field notify GLib.DestroyNotify
---@field future unknown[]
GLib.Private = {}

--- # method GLib.Private:get()
---
--- Returns the current value of the thread local variable `key`.
--- 
--- If the value has not yet been set in this thread, `nil` is returned.
--- Values are never copied between threads (when a new thread is
--- created, for example).
---
--- ---
---
---@param self GLib.Private # a `GPrivate`
---@return userdata # the thread-local value
function GLib.Private:get() end

--- # method GLib.Private:replace()
---
--- Sets the thread local variable `key` to have the value `value` in the
--- current thread.
--- 
--- This function differs from `g_private_set()` in the following way: if
--- the previous value was non-`nil` then the `GDestroyNotify` handler for
--- `key` is run on it.
---
--- ---
---
---@param self GLib.Private # a `GPrivate`
---@param value? userdata # the new value
---@return nil
function GLib.Private:replace(value) end

--- # method GLib.Private:set()
---
--- Sets the thread local variable `key` to have the value `value` in the
--- current thread.
--- 
--- This function differs from `g_private_replace()` in the following way:
--- the `GDestroyNotify` for `key` is not called on the old value.
---
--- ---
---
---@param self GLib.Private # a `GPrivate`
---@param value? userdata # the new value
---@return nil
function GLib.Private:set(value) end

--- # record GLib.PtrArray
---
--- Contains the public fields of a pointer array.
---
--- ---
---
---@class GLib.PtrArray
---@field pdata userdata # points to the array of pointers, which may be moved when the array grows
---@field len integer # number of pointers in the array
GLib.PtrArray = {}

--- # record GLib.Queue
---
--- Contains the public fields of a
--- [Queue][glib-Double-ended-Queues].
---
--- ---
---
---@class GLib.Queue
---@field head userdata[] # a pointer to the first element of the queue
---@field tail userdata[] # a pointer to the last element of the queue
---@field length integer # the number of elements in the queue
GLib.Queue = {}

--- # method GLib.Queue:clear()
---
--- Removes all the elements in `queue`. If queue elements contain
--- dynamically-allocated memory, they should be freed first.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`
---@return nil
function GLib.Queue:clear() end

--- # method GLib.Queue:clear_full()
---
--- Convenience method, which frees all the memory used by a `GQueue`,
--- and calls the provided `free_func` on each item in the `GQueue`.
---
--- ---
---
---@param self GLib.Queue # a pointer to a `GQueue`
---@param free_func? GLib.DestroyNotify # the function to be called to free memory allocated
---@return nil
function GLib.Queue:clear_full(free_func) end

--- # method GLib.Queue:free()
---
--- Frees the memory allocated for the `GQueue`. Only call this function
--- if `queue` was created with `g_queue_new()`. If queue elements contain
--- dynamically-allocated memory, they should be freed first.
--- 
--- If queue elements contain dynamically-allocated memory, you should
--- either use `g_queue_free_full()` or free them manually first.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`
---@return nil
function GLib.Queue:free() end

--- # method GLib.Queue:free_full()
---
--- Convenience method, which frees all the memory used by a `GQueue`,
--- and calls the specified destroy function on every element's data.
--- 
--- `free_func` should not modify the queue (eg, by removing the freed
--- element from it).
---
--- ---
---
---@param self GLib.Queue # a pointer to a `GQueue`
---@param free_func GLib.DestroyNotify # the function to be called to free each element's data
---@return nil
function GLib.Queue:free_full(free_func) end

--- # method GLib.Queue:get_length()
---
--- Returns the number of items in `queue`.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`
---@return integer # the number of items in `queue`
function GLib.Queue:get_length() end

--- # method GLib.Queue:index()
---
--- Returns the position of the first element in `queue` which contains `data`.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`
---@param data? userdata # the data to find
---@return integer # the position of the first element in `queue` which contains `data`, or -1 if no element in `queue` contains `data`
function GLib.Queue:index(data) end

--- # method GLib.Queue:init()
---
--- A statically-allocated `GQueue` must be initialized with this function
--- before it can be used. Alternatively you can initialize it with
--- %G_QUEUE_INIT. It is not necessary to initialize queues created with
--- `g_queue_new()`.
---
--- ---
---
---@param self GLib.Queue # an uninitialized `GQueue`
---@return nil
function GLib.Queue:init() end

--- # method GLib.Queue:is_empty()
---
--- Returns `true` if the queue is empty.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`.
---@return (boolean|nil) # `true` if the queue is empty
function GLib.Queue:is_empty() end

--- # method GLib.Queue:peek_head()
---
--- Returns the first element of the queue.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`
---@return userdata # the data of the first element in the queue, or `nil` if the queue is empty
function GLib.Queue:peek_head() end

--- # method GLib.Queue:peek_nth()
---
--- Returns the `n`'th element of `queue`.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`
---@param n integer # the position of the element
---@return userdata # the data for the `n`'th element of `queue`, or `nil` if `n` is off the end of `queue`
function GLib.Queue:peek_nth(n) end

--- # method GLib.Queue:peek_tail()
---
--- Returns the last element of the queue.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`
---@return userdata # the data of the last element in the queue, or `nil` if the queue is empty
function GLib.Queue:peek_tail() end

--- # method GLib.Queue:pop_head()
---
--- Removes the first element of the queue and returns its data.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`
---@return userdata # the data of the first element in the queue, or `nil` if the queue is empty
function GLib.Queue:pop_head() end

--- # method GLib.Queue:pop_nth()
---
--- Removes the `n`'th element of `queue` and returns its data.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`
---@param n integer # the position of the element
---@return userdata # the element's data, or `nil` if `n` is off the end of `queue`
function GLib.Queue:pop_nth(n) end

--- # method GLib.Queue:pop_tail()
---
--- Removes the last element of the queue and returns its data.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`
---@return userdata # the data of the last element in the queue, or `nil` if the queue is empty
function GLib.Queue:pop_tail() end

--- # method GLib.Queue:push_head()
---
--- Adds a new element at the head of the queue.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`.
---@param data? userdata # the data for the new element.
---@return nil
function GLib.Queue:push_head(data) end

--- # method GLib.Queue:push_nth()
---
--- Inserts a new element into `queue` at the given position.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`
---@param data? userdata # the data for the new element
---@param n integer # the position to insert the new element. If `n` is negative or larger than the number of elements in the `queue`, the element is added to the end of the queue.
---@return nil
function GLib.Queue:push_nth(data, n) end

--- # method GLib.Queue:push_tail()
---
--- Adds a new element at the tail of the queue.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`
---@param data? userdata # the data for the new element
---@return nil
function GLib.Queue:push_tail(data) end

--- # method GLib.Queue:remove()
---
--- Removes the first element in `queue` that contains `data`.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`
---@param data? userdata # the data to remove
---@return (boolean|nil) # `true` if `data` was found and removed from `queue`
function GLib.Queue:remove(data) end

--- # method GLib.Queue:remove_all()
---
--- Remove all elements whose data equals `data` from `queue`.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`
---@param data? userdata # the data to remove
---@return integer # the number of elements removed from `queue`
function GLib.Queue:remove_all(data) end

--- # method GLib.Queue:reverse()
---
--- Reverses the order of the items in `queue`.
---
--- ---
---
---@param self GLib.Queue # a `GQueue`
---@return nil
function GLib.Queue:reverse() end

--- # record GLib.RWLock
---
--- The GRWLock struct is an opaque data structure to represent a
--- reader-writer lock. It is similar to a `GMutex` in that it allows
--- multiple threads to coordinate access to a shared resource.
--- 
--- The difference to a mutex is that a reader-writer lock discriminates
--- between read-only ('reader') and full ('writer') access. While only
--- one thread at a time is allowed write access (by holding the 'writer'
--- lock via `g_rw_lock_writer_lock()`), multiple threads can gain
--- simultaneous read-only access (by holding the 'reader' lock via
--- `g_rw_lock_reader_lock()`).
--- 
--- It is unspecified whether readers or writers have priority in acquiring the
--- lock when a reader already holds the lock and a writer is queued to acquire
--- it.
--- 
--- Here is an example for an array with access functions:
--- ```c
---   GRWLock lock;
---   GPtrArray *array;
--- 
---   gpointer
---   my_array_get (guint index)
---   {
---     gpointer retval = NULL;
--- 
---     if (!array)
---       return NULL;
--- 
---     g_rw_lock_reader_lock (&lock);
---     if (index < array->len)
---       retval = g_ptr_array_index (array, index);
---     g_rw_lock_reader_unlock (&lock);
--- 
---     return retval;
---   }
--- 
---   void
---   my_array_set (guint index, gpointer data)
---   {
---     g_rw_lock_writer_lock (&lock);
--- 
---     if (!array)
---       array = g_ptr_array_new ();
--- 
---     if (index >= array->len)
---       g_ptr_array_set_size (array, index+1);
---     g_ptr_array_index (array, index) = data;
--- 
---     g_rw_lock_writer_unlock (&lock);
---   }
---  ```
--- This example shows an array which can be accessed by many readers
--- (the `my_array_get()` function) simultaneously, whereas the writers
--- (the `my_array_set()` function) will only be allowed one at a time
--- and only if no readers currently access the array. This is because
--- of the potentially dangerous resizing of the array. Using these
--- functions is fully multi-thread safe now.
--- 
--- If a `GRWLock` is allocated in static storage then it can be used
--- without initialisation.  Otherwise, you should call
--- `g_rw_lock_init()` on it and `g_rw_lock_clear()` when done.
--- 
--- A GRWLock should only be accessed with the g_rw_lock_ functions.
---
--- ---
---
---@class GLib.RWLock
---@field p userdata
---@field i unknown[]
GLib.RWLock = {}

--- # method GLib.RWLock:clear()
---
--- Frees the resources allocated to a lock with `g_rw_lock_init()`.
--- 
--- This function should not be used with a `GRWLock` that has been
--- statically allocated.
--- 
--- Calling `g_rw_lock_clear()` when any thread holds the lock
--- leads to undefined behaviour.
---
--- ---
---
---@param self GLib.RWLock # an initialized `GRWLock`
---@return nil
function GLib.RWLock:clear() end

--- # method GLib.RWLock:init()
---
--- Initializes a `GRWLock` so that it can be used.
--- 
--- This function is useful to initialize a lock that has been
--- allocated on the stack, or as part of a larger structure.  It is not
--- necessary to initialise a reader-writer lock that has been statically
--- allocated.
--- 
--- ```c
---   typedef struct {
---     GRWLock l;
---     ...
---   } Blob;
--- 
--- Blob *b;
--- 
--- b = g_new (Blob, 1);
--- g_rw_lock_init (&b->l);
--- ```
--- 
--- To undo the effect of `g_rw_lock_init()` when a lock is no longer
--- needed, use `g_rw_lock_clear()`.
--- 
--- Calling `g_rw_lock_init()` on an already initialized `GRWLock` leads
--- to undefined behaviour.
---
--- ---
---
---@param self GLib.RWLock # an uninitialized `GRWLock`
---@return nil
function GLib.RWLock:init() end

--- # method GLib.RWLock:reader_lock()
---
--- Obtain a read lock on `rw_lock`. If another thread currently holds
--- the write lock on `rw_lock`, the current thread will block until the
--- write lock was (held and) released. If another thread does not hold
--- the write lock, but is waiting for it, it is implementation defined
--- whether the reader or writer will block. Read locks can be taken
--- recursively.
--- 
--- Calling `g_rw_lock_reader_lock()` while the current thread already
--- owns a write lock leads to undefined behaviour. Read locks however
--- can be taken recursively, in which case you need to make sure to
--- call `g_rw_lock_reader_unlock()` the same amount of times.
--- 
--- It is implementation-defined how many read locks are allowed to be
--- held on the same lock simultaneously. If the limit is hit,
--- or if a deadlock is detected, a critical warning will be emitted.
---
--- ---
---
---@param self GLib.RWLock # a `GRWLock`
---@return nil
function GLib.RWLock:reader_lock() end

--- # method GLib.RWLock:reader_trylock()
---
--- Tries to obtain a read lock on `rw_lock` and returns `true` if
--- the read lock was successfully obtained. Otherwise it
--- returns `false`.
---
--- ---
---
---@param self GLib.RWLock # a `GRWLock`
---@return (boolean|nil) # `true` if `rw_lock` could be locked
function GLib.RWLock:reader_trylock() end

--- # method GLib.RWLock:reader_unlock()
---
--- Release a read lock on `rw_lock`.
--- 
--- Calling `g_rw_lock_reader_unlock()` on a lock that is not held
--- by the current thread leads to undefined behaviour.
---
--- ---
---
---@param self GLib.RWLock # a `GRWLock`
---@return nil
function GLib.RWLock:reader_unlock() end

--- # method GLib.RWLock:writer_lock()
---
--- Obtain a write lock on `rw_lock`. If another thread currently holds
--- a read or write lock on `rw_lock`, the current thread will block
--- until all other threads have dropped their locks on `rw_lock`.
--- 
--- Calling `g_rw_lock_writer_lock()` while the current thread already
--- owns a read or write lock on `rw_lock` leads to undefined behaviour.
---
--- ---
---
---@param self GLib.RWLock # a `GRWLock`
---@return nil
function GLib.RWLock:writer_lock() end

--- # method GLib.RWLock:writer_trylock()
---
--- Tries to obtain a write lock on `rw_lock`. If another thread
--- currently holds a read or write lock on `rw_lock`, it immediately
--- returns `false`.
--- Otherwise it locks `rw_lock` and returns `true`.
---
--- ---
---
---@param self GLib.RWLock # a `GRWLock`
---@return (boolean|nil) # `true` if `rw_lock` could be locked
function GLib.RWLock:writer_trylock() end

--- # method GLib.RWLock:writer_unlock()
---
--- Release a write lock on `rw_lock`.
--- 
--- Calling `g_rw_lock_writer_unlock()` on a lock that is not held
--- by the current thread leads to undefined behaviour.
---
--- ---
---
---@param self GLib.RWLock # a `GRWLock`
---@return nil
function GLib.RWLock:writer_unlock() end

--- # record GLib.Rand
---
--- The GRand struct is an opaque data structure. It should only be
--- accessed through the g_rand_* functions.
---
--- ---
---
---@class GLib.Rand
GLib.Rand = {}

--- # method GLib.Rand:double()
---
--- Returns the next random `gdouble` from `rand_` equally distributed over
--- the range [0..1).
---
--- ---
---
---@param self GLib.Rand # a `GRand`
---@return number # a random number
function GLib.Rand:double() end

--- # method GLib.Rand:double_range()
---
--- Returns the next random `gdouble` from `rand_` equally distributed over
--- the range [`begin`..`end`).
---
--- ---
---
---@param self GLib.Rand # a `GRand`
---@param begin number # lower closed bound of the interval
---@param end__ number # upper open bound of the interval
---@return number # a random number
function GLib.Rand:double_range(begin, end__) end

--- # method GLib.Rand:free()
---
--- Frees the memory allocated for the `GRand`.
---
--- ---
---
---@param self GLib.Rand # a `GRand`
---@return nil
function GLib.Rand:free() end

--- # method GLib.Rand:int()
---
--- Returns the next random `guint32` from `rand_` equally distributed over
--- the range [0..2^32-1].
---
--- ---
---
---@param self GLib.Rand # a `GRand`
---@return integer # a random number
function GLib.Rand:int() end

--- # method GLib.Rand:int_range()
---
--- Returns the next random `gint32` from `rand_` equally distributed over
--- the range [`begin`..`end`-1].
---
--- ---
---
---@param self GLib.Rand # a `GRand`
---@param begin integer # lower closed bound of the interval
---@param end__ integer # upper open bound of the interval
---@return integer # a random number
function GLib.Rand:int_range(begin, end__) end

--- # method GLib.Rand:set_seed()
---
--- Sets the seed for the random number generator `GRand` to `seed`.
---
--- ---
---
---@param self GLib.Rand # a `GRand`
---@param seed integer # a value to reinitialize the random number generator
---@return nil
function GLib.Rand:set_seed(seed) end

--- # method GLib.Rand:set_seed_array()
---
--- Initializes the random number generator by an array of longs.
--- Array can be of arbitrary size, though only the first 624 values
--- are taken.  This function is useful if you have many low entropy
--- seeds, or if you require more then 32 bits of actual entropy for
--- your application.
---
--- ---
---
---@param self GLib.Rand # a `GRand`
---@param seed integer # array to initialize with
---@param seed_length integer # length of array
---@return nil
function GLib.Rand:set_seed_array(seed, seed_length) end

--- # record GLib.RecMutex
---
--- The GRecMutex struct is an opaque data structure to represent a
--- recursive mutex. It is similar to a `GMutex` with the difference
--- that it is possible to lock a GRecMutex multiple times in the same
--- thread without deadlock. When doing so, care has to be taken to
--- unlock the recursive mutex as often as it has been locked.
--- 
--- If a `GRecMutex` is allocated in static storage then it can be used
--- without initialisation.  Otherwise, you should call
--- `g_rec_mutex_init()` on it and `g_rec_mutex_clear()` when done.
--- 
--- A GRecMutex should only be accessed with the
--- g_rec_mutex_ functions.
---
--- ---
---
---@class GLib.RecMutex
---@field p userdata
---@field i unknown[]
GLib.RecMutex = {}

--- # method GLib.RecMutex:clear()
---
--- Frees the resources allocated to a recursive mutex with
--- `g_rec_mutex_init()`.
--- 
--- This function should not be used with a `GRecMutex` that has been
--- statically allocated.
--- 
--- Calling `g_rec_mutex_clear()` on a locked recursive mutex leads
--- to undefined behaviour.
---
--- ---
---
---@param self GLib.RecMutex # an initialized `GRecMutex`
---@return nil
function GLib.RecMutex:clear() end

--- # method GLib.RecMutex:init()
---
--- Initializes a `GRecMutex` so that it can be used.
--- 
--- This function is useful to initialize a recursive mutex
--- that has been allocated on the stack, or as part of a larger
--- structure.
--- 
--- It is not necessary to initialise a recursive mutex that has been
--- statically allocated.
--- 
--- ```c
---   typedef struct {
---     GRecMutex m;
---     ...
---   } Blob;
--- 
--- Blob *b;
--- 
--- b = g_new (Blob, 1);
--- g_rec_mutex_init (&b->m);
--- ```
--- 
--- Calling `g_rec_mutex_init()` on an already initialized `GRecMutex`
--- leads to undefined behaviour.
--- 
--- To undo the effect of `g_rec_mutex_init()` when a recursive mutex
--- is no longer needed, use `g_rec_mutex_clear()`.
---
--- ---
---
---@param self GLib.RecMutex # an uninitialized `GRecMutex`
---@return nil
function GLib.RecMutex:init() end

--- # method GLib.RecMutex:lock()
---
--- Locks `rec_mutex`. If `rec_mutex` is already locked by another
--- thread, the current thread will block until `rec_mutex` is
--- unlocked by the other thread. If `rec_mutex` is already locked
--- by the current thread, the 'lock count' of `rec_mutex` is increased.
--- The mutex will only become available again when it is unlocked
--- as many times as it has been locked.
---
--- ---
---
---@param self GLib.RecMutex # a `GRecMutex`
---@return nil
function GLib.RecMutex:lock() end

--- # method GLib.RecMutex:trylock()
---
--- Tries to lock `rec_mutex`. If `rec_mutex` is already locked
--- by another thread, it immediately returns `false`. Otherwise
--- it locks `rec_mutex` and returns `true`.
---
--- ---
---
---@param self GLib.RecMutex # a `GRecMutex`
---@return (boolean|nil) # `true` if `rec_mutex` could be locked
function GLib.RecMutex:trylock() end

--- # method GLib.RecMutex:unlock()
---
--- Unlocks `rec_mutex`. If another thread is blocked in a
--- `g_rec_mutex_lock()` call for `rec_mutex`, it will become unblocked
--- and can lock `rec_mutex` itself.
--- 
--- Calling `g_rec_mutex_unlock()` on a recursive mutex that is not
--- locked by the current thread leads to undefined behaviour.
---
--- ---
---
---@param self GLib.RecMutex # a `GRecMutex`
---@return nil
function GLib.RecMutex:unlock() end

--- # record GLib.Regex
---
--- The g_regex_*() functions implement regular
--- expression pattern matching using syntax and semantics similar to
--- Perl regular expression.
--- 
--- Some functions accept a `start_position` argument, setting it differs
--- from just passing over a shortened string and setting %G_REGEX_MATCH_NOTBOL
--- in the case of a pattern that begins with any kind of lookbehind assertion.
--- For example, consider the pattern "\Biss\B" which finds occurrences of "iss"
--- in the middle of words. ("\B" matches only if the current position in the
--- subject is not a word boundary.) When applied to the string "Mississipi"
--- from the fourth byte, namely "issipi", it does not match, because "\B" is
--- always false at the start of the subject, which is deemed to be a word
--- boundary. However, if the entire string is passed , but with
--- `start_position` set to 4, it finds the second occurrence of "iss" because
--- it is able to look behind the starting point to discover that it is
--- preceded by a letter.
--- 
--- Note that, unless you set the %G_REGEX_RAW flag, all the strings passed
--- to these functions must be encoded in UTF-8. The lengths and the positions
--- inside the strings are in bytes and not in characters, so, for instance,
--- "\xc3\xa0" (i.e. "à") is two bytes long but it is treated as a
--- single character. If you set %G_REGEX_RAW the strings can be non-valid
--- UTF-8 strings and a byte is treated as a character, so "\xc3\xa0" is two
--- bytes and two characters long.
--- 
--- When matching a pattern, "\n" matches only against a "\n" character in
--- the string, and "\r" matches only a "\r" character. To match any newline
--- sequence use "\R". This particular group matches either the two-character
--- sequence CR + LF ("\r\n"), or one of the single characters LF (linefeed,
--- U+000A, "\n"), VT vertical tab, U+000B, "\v"), FF (formfeed, U+000C, "\f"),
--- CR (carriage return, U+000D, "\r"), NEL (next line, U+0085), LS (line
--- separator, U+2028), or PS (paragraph separator, U+2029).
--- 
--- The behaviour of the dot, circumflex, and dollar metacharacters are
--- affected by newline characters, the default is to recognize any newline
--- character (the same characters recognized by "\R"). This can be changed
--- with %G_REGEX_NEWLINE_CR, %G_REGEX_NEWLINE_LF and %G_REGEX_NEWLINE_CRLF
--- compile options, and with %G_REGEX_MATCH_NEWLINE_ANY,
--- %G_REGEX_MATCH_NEWLINE_CR, %G_REGEX_MATCH_NEWLINE_LF and
--- %G_REGEX_MATCH_NEWLINE_CRLF match options. These settings are also
--- relevant when compiling a pattern if %G_REGEX_EXTENDED is set, and an
--- unescaped "#" outside a character class is encountered. This indicates
--- a comment that lasts until after the next newline.
--- 
--- Creating and manipulating the same `GRegex` structure from different
--- threads is not a problem as `GRegex` does not modify its internal
--- state between creation and destruction, on the other hand `GMatchInfo`
--- is not threadsafe.
--- 
--- The regular expressions low-level functionalities are obtained through
--- the excellent
--- [PCRE](http://www.pcre.org/)
--- library written by Philip Hazel.
---
--- ---
---
---@class GLib.Regex
---@operator call: GLib.Regex
GLib.Regex = {}

--- # method GLib.Regex:get_capture_count()
---
--- Returns the number of capturing subpatterns in the pattern.
---
--- ---
---
---@param self GLib.Regex # a `GRegex`
---@return integer # the number of capturing subpatterns
function GLib.Regex:get_capture_count() end

--- # method GLib.Regex:get_compile_flags()
---
--- Returns the compile options that `regex` was created with.
--- 
--- Depending on the version of PCRE that is used, this may or may not
--- include flags set by option expressions such as `(?i)` found at the
--- top-level within the compiled pattern.
---
--- ---
---
---@param self GLib.Regex # a `GRegex`
---@return GLib.RegexCompileFlags # flags from `GRegexCompileFlags`
function GLib.Regex:get_compile_flags() end

--- # method GLib.Regex:get_has_cr_or_lf()
---
--- Checks whether the pattern contains explicit CR or LF references.
---
--- ---
---
---@param self GLib.Regex # a `GRegex` structure
---@return (boolean|nil) # `true` if the pattern contains explicit CR or LF references
function GLib.Regex:get_has_cr_or_lf() end

--- # method GLib.Regex:get_match_flags()
---
--- Returns the match options that `regex` was created with.
---
--- ---
---
---@param self GLib.Regex # a `GRegex`
---@return GLib.RegexMatchFlags # flags from `GRegexMatchFlags`
function GLib.Regex:get_match_flags() end

--- # method GLib.Regex:get_max_backref()
---
--- Returns the number of the highest back reference
--- in the pattern, or 0 if the pattern does not contain
--- back references.
---
--- ---
---
---@param self GLib.Regex # a `GRegex`
---@return integer # the number of the highest back reference
function GLib.Regex:get_max_backref() end

--- # method GLib.Regex:get_max_lookbehind()
---
--- Gets the number of characters in the longest lookbehind assertion in the
--- pattern. This information is useful when doing multi-segment matching using
--- the partial matching facilities.
---
--- ---
---
---@param self GLib.Regex # a `GRegex` structure
---@return integer # the number of characters in the longest lookbehind assertion.
function GLib.Regex:get_max_lookbehind() end

--- # method GLib.Regex:get_pattern()
---
--- Gets the pattern string associated with `regex`, i.e. a copy of
--- the string passed to `g_regex_new()`.
---
--- ---
---
---@param self GLib.Regex # a `GRegex` structure
---@return string # the pattern of `regex`
function GLib.Regex:get_pattern() end

--- # method GLib.Regex:get_string_number()
---
--- Retrieves the number of the subexpression named `name`.
---
--- ---
---
---@param self GLib.Regex # `GRegex` structure
---@param name string # name of the subexpression
---@return integer # The number of the subexpression or -1 if `name` does not exists
function GLib.Regex:get_string_number(name) end

--- # method GLib.Regex:match()
---
--- Scans for a match in `string` for the pattern in `regex`.
--- The `match_options` are combined with the match options specified
--- when the `regex` structure was created, letting you have more
--- flexibility in reusing `GRegex` structures.
--- 
--- Unless %G_REGEX_RAW is specified in the options, `string` must be valid UTF-8.
--- 
--- A `GMatchInfo` structure, used to get information on the match,
--- is stored in `match_info` if not `nil`. Note that if `match_info`
--- is not `nil` then it is created even if the function returns `false`,
--- i.e. you must free it regardless if regular expression actually matched.
--- 
--- To retrieve all the non-overlapping matches of the pattern in
--- string you can use `g_match_info_next()`.
--- 
--- ```c
--- static void
--- print_uppercase_words (const gchar *string)
--- {
---   // Print all uppercase-only words.
---   GRegex *regex;
---   GMatchInfo *match_info;
---  
---   regex = g_regex_new ("[A-Z]+", G_REGEX_DEFAULT, G_REGEX_MATCH_DEFAULT, NULL);
---   g_regex_match (regex, string, 0, &match_info);
---   while (g_match_info_matches (match_info))
---     {
---       gchar *word = g_match_info_fetch (match_info, 0);
---       g_print ("Found: %s\n", word);
---       g_free (word);
---       g_match_info_next (match_info, NULL);
---     }
---   g_match_info_free (match_info);
---   g_regex_unref (regex);
--- }
--- ```
--- 
--- `string` is not copied and is used in `GMatchInfo` internally. If
--- you use any `GMatchInfo` method (except `g_match_info_free()`) after
--- freeing or modifying `string` then the behaviour is undefined.
---
--- ---
---
---@param self GLib.Regex # a `GRegex` structure from `g_regex_new()`
---@param string string # the string to scan for matches
---@param match_options GLib.RegexMatchFlags # match options
---@param match_info? GLib.MatchInfo # pointer to location where to store the `GMatchInfo`, or `nil` if you do not need it
---@return (boolean|nil) # `true` is the string matched, `false` otherwise
function GLib.Regex:match(string, match_options, match_info) end

--- # method GLib.Regex:match_all()
---
--- Using the standard algorithm for regular expression matching only
--- the longest match in the string is retrieved. This function uses
--- a different algorithm so it can retrieve all the possible matches.
--- For more documentation see `g_regex_match_all_full()`.
--- 
--- A `GMatchInfo` structure, used to get information on the match, is
--- stored in `match_info` if not `nil`. Note that if `match_info` is
--- not `nil` then it is created even if the function returns `false`,
--- i.e. you must free it regardless if regular expression actually
--- matched.
--- 
--- `string` is not copied and is used in `GMatchInfo` internally. If
--- you use any `GMatchInfo` method (except `g_match_info_free()`) after
--- freeing or modifying `string` then the behaviour is undefined.
---
--- ---
---
---@param self GLib.Regex # a `GRegex` structure from `g_regex_new()`
---@param string string # the string to scan for matches
---@param match_options GLib.RegexMatchFlags # match options
---@param match_info? GLib.MatchInfo # pointer to location where to store the `GMatchInfo`, or `nil` if you do not need it
---@return (boolean|nil) # `true` is the string matched, `false` otherwise
function GLib.Regex:match_all(string, match_options, match_info) end

--- # method GLib.Regex:match_all_full()
---
--- Using the standard algorithm for regular expression matching only
--- the longest match in the `string` is retrieved, it is not possible
--- to obtain all the available matches. For instance matching
--- "<a> <b> <c>" against the pattern "<.*>"
--- you get "<a> <b> <c>".
--- 
--- This function uses a different algorithm (called DFA, i.e. deterministic
--- finite automaton), so it can retrieve all the possible matches, all
--- starting at the same point in the string. For instance matching
--- "<a> <b> <c>" against the pattern "<.*>;"
--- you would obtain three matches: "<a> <b> <c>",
--- "<a> <b>" and "<a>".
--- 
--- The number of matched strings is retrieved using
--- `g_match_info_get_match_count()`. To obtain the matched strings and
--- their position you can use, respectively, `g_match_info_fetch()` and
--- `g_match_info_fetch_pos()`. Note that the strings are returned in
--- reverse order of length; that is, the longest matching string is
--- given first.
--- 
--- Note that the DFA algorithm is slower than the standard one and it
--- is not able to capture substrings, so backreferences do not work.
--- 
--- Setting `start_position` differs from just passing over a shortened
--- string and setting %G_REGEX_MATCH_NOTBOL in the case of a pattern
--- that begins with any kind of lookbehind assertion, such as "\b".
--- 
--- Unless %G_REGEX_RAW is specified in the options, `string` must be valid UTF-8.
--- 
--- A `GMatchInfo` structure, used to get information on the match, is
--- stored in `match_info` if not `nil`. Note that if `match_info` is
--- not `nil` then it is created even if the function returns `false`,
--- i.e. you must free it regardless if regular expression actually
--- matched.
--- 
--- `string` is not copied and is used in `GMatchInfo` internally. If
--- you use any `GMatchInfo` method (except `g_match_info_free()`) after
--- freeing or modifying `string` then the behaviour is undefined.
---
--- ---
---
---@param self GLib.Regex # a `GRegex` structure from `g_regex_new()`
---@param string unknown[] # the string to scan for matches
---@param string_len integer # the length of `string`, in bytes, or -1 if `string` is nul-terminated
---@param start_position integer # starting index of the string to match, in bytes
---@param match_options GLib.RegexMatchFlags # match options
---@param match_info? GLib.MatchInfo # pointer to location where to store the `GMatchInfo`, or `nil` if you do not need it
---@return (boolean|nil) # `true` is the string matched, `false` otherwise
function GLib.Regex:match_all_full(string, string_len, start_position, match_options, match_info) end

--- # method GLib.Regex:match_full()
---
--- Scans for a match in `string` for the pattern in `regex`.
--- The `match_options` are combined with the match options specified
--- when the `regex` structure was created, letting you have more
--- flexibility in reusing `GRegex` structures.
--- 
--- Setting `start_position` differs from just passing over a shortened
--- string and setting %G_REGEX_MATCH_NOTBOL in the case of a pattern
--- that begins with any kind of lookbehind assertion, such as "\b".
--- 
--- Unless %G_REGEX_RAW is specified in the options, `string` must be valid UTF-8.
--- 
--- A `GMatchInfo` structure, used to get information on the match, is
--- stored in `match_info` if not `nil`. Note that if `match_info` is
--- not `nil` then it is created even if the function returns `false`,
--- i.e. you must free it regardless if regular expression actually
--- matched.
--- 
--- `string` is not copied and is used in `GMatchInfo` internally. If
--- you use any `GMatchInfo` method (except `g_match_info_free()`) after
--- freeing or modifying `string` then the behaviour is undefined.
--- 
--- To retrieve all the non-overlapping matches of the pattern in
--- string you can use `g_match_info_next()`.
--- 
--- ```c
--- static void
--- print_uppercase_words (const gchar *string)
--- {
---   // Print all uppercase-only words.
---   GRegex *regex;
---   GMatchInfo *match_info;
---   GError *error = NULL;
---   
---   regex = g_regex_new ("[A-Z]+", G_REGEX_DEFAULT, G_REGEX_MATCH_DEFAULT, NULL);
---   g_regex_match_full (regex, string, -1, 0, 0, &match_info, &error);
---   while (g_match_info_matches (match_info))
---     {
---       gchar *word = g_match_info_fetch (match_info, 0);
---       g_print ("Found: %s\n", word);
---       g_free (word);
---       g_match_info_next (match_info, &error);
---     }
---   g_match_info_free (match_info);
---   g_regex_unref (regex);
---   if (error != NULL)
---     {
---       g_printerr ("Error while matching: %s\n", error->message);
---       g_error_free (error);
---     }
--- }
--- ```
---
--- ---
---
---@param self GLib.Regex # a `GRegex` structure from `g_regex_new()`
---@param string unknown[] # the string to scan for matches
---@param string_len integer # the length of `string`, in bytes, or -1 if `string` is nul-terminated
---@param start_position integer # starting index of the string to match, in bytes
---@param match_options GLib.RegexMatchFlags # match options
---@param match_info? GLib.MatchInfo # pointer to location where to store the `GMatchInfo`, or `nil` if you do not need it
---@return (boolean|nil) # `true` is the string matched, `false` otherwise
function GLib.Regex:match_full(string, string_len, start_position, match_options, match_info) end

--- # method GLib.Regex:ref()
---
--- Increases reference count of `regex` by 1.
---
--- ---
---
---@param self GLib.Regex # a `GRegex`
---@return GLib.Regex # `regex`
function GLib.Regex:ref() end

--- # method GLib.Regex:replace()
---
--- Replaces all occurrences of the pattern in `regex` with the
--- replacement text. Backreferences of the form '\number' or
--- '\g<number>' in the replacement text are interpolated by the
--- number-th captured subexpression of the match, '\g<name>' refers
--- to the captured subexpression with the given name. '\0' refers
--- to the complete match, but '\0' followed by a number is the octal
--- representation of a character. To include a literal '\' in the
--- replacement, write '\\\\'.
--- 
--- There are also escapes that changes the case of the following text:
--- 
--- - \l: Convert to lower case the next character
--- - \u: Convert to upper case the next character
--- - \L: Convert to lower case till \E
--- - \U: Convert to upper case till \E
--- - \E: End case modification
--- 
--- If you do not need to use backreferences use `g_regex_replace_literal()`.
--- 
--- The `replacement` string must be UTF-8 encoded even if %G_REGEX_RAW was
--- passed to `g_regex_new()`. If you want to use not UTF-8 encoded strings
--- you can use `g_regex_replace_literal()`.
--- 
--- Setting `start_position` differs from just passing over a shortened
--- string and setting %G_REGEX_MATCH_NOTBOL in the case of a pattern that
--- begins with any kind of lookbehind assertion, such as "\b".
---
--- ---
---
---@param self GLib.Regex # a `GRegex` structure
---@param string unknown[] # the string to perform matches against
---@param string_len integer # the length of `string`, in bytes, or -1 if `string` is nul-terminated
---@param start_position integer # starting index of the string to match, in bytes
---@param replacement string # text to replace each match with
---@param match_options GLib.RegexMatchFlags # options for the match
---@return string # a newly allocated string containing the replacements
function GLib.Regex:replace(string, string_len, start_position, replacement, match_options) end

--- # method GLib.Regex:replace_literal()
---
--- Replaces all occurrences of the pattern in `regex` with the
--- replacement text. `replacement` is replaced literally, to
--- include backreferences use `g_regex_replace()`.
--- 
--- Setting `start_position` differs from just passing over a
--- shortened string and setting %G_REGEX_MATCH_NOTBOL in the
--- case of a pattern that begins with any kind of lookbehind
--- assertion, such as "\b".
---
--- ---
---
---@param self GLib.Regex # a `GRegex` structure
---@param string unknown[] # the string to perform matches against
---@param string_len integer # the length of `string`, in bytes, or -1 if `string` is nul-terminated
---@param start_position integer # starting index of the string to match, in bytes
---@param replacement string # text to replace each match with
---@param match_options GLib.RegexMatchFlags # options for the match
---@return string # a newly allocated string containing the replacements
function GLib.Regex:replace_literal(string, string_len, start_position, replacement, match_options) end

--- # method GLib.Regex:split()
---
--- Breaks the string on the pattern, and returns an array of the tokens.
--- If the pattern contains capturing parentheses, then the text for each
--- of the substrings will also be returned. If the pattern does not match
--- anywhere in the string, then the whole string is returned as the first
--- token.
--- 
--- As a special case, the result of splitting the empty string "" is an
--- empty vector, not a vector containing a single string. The reason for
--- this special case is that being able to represent an empty vector is
--- typically more useful than consistent handling of empty elements. If
--- you do need to represent empty elements, you'll need to check for the
--- empty string before calling this function.
--- 
--- A pattern that can match empty strings splits `string` into separate
--- characters wherever it matches the empty string between characters.
--- For example splitting "ab c" using as a separator "\s*", you will get
--- "a", "b" and "c".
---
--- ---
---
---@param self GLib.Regex # a `GRegex` structure
---@param string string # the string to split with the pattern
---@param match_options GLib.RegexMatchFlags # match time option flags
---@return unknown[] # a `nil`-terminated gchar ** array. Free it using `g_strfreev()`
function GLib.Regex:split(string, match_options) end

--- # method GLib.Regex:split_full()
---
--- Breaks the string on the pattern, and returns an array of the tokens.
--- If the pattern contains capturing parentheses, then the text for each
--- of the substrings will also be returned. If the pattern does not match
--- anywhere in the string, then the whole string is returned as the first
--- token.
--- 
--- As a special case, the result of splitting the empty string "" is an
--- empty vector, not a vector containing a single string. The reason for
--- this special case is that being able to represent an empty vector is
--- typically more useful than consistent handling of empty elements. If
--- you do need to represent empty elements, you'll need to check for the
--- empty string before calling this function.
--- 
--- A pattern that can match empty strings splits `string` into separate
--- characters wherever it matches the empty string between characters.
--- For example splitting "ab c" using as a separator "\s*", you will get
--- "a", "b" and "c".
--- 
--- Setting `start_position` differs from just passing over a shortened
--- string and setting %G_REGEX_MATCH_NOTBOL in the case of a pattern
--- that begins with any kind of lookbehind assertion, such as "\b".
---
--- ---
---
---@param self GLib.Regex # a `GRegex` structure
---@param string unknown[] # the string to split with the pattern
---@param string_len integer # the length of `string`, in bytes, or -1 if `string` is nul-terminated
---@param start_position integer # starting index of the string to match, in bytes
---@param match_options GLib.RegexMatchFlags # match time option flags
---@param max_tokens integer # the maximum number of tokens to split `string` into. If this is less than 1, the string is split completely
---@return unknown[] # a `nil`-terminated gchar ** array. Free it using `g_strfreev()`
function GLib.Regex:split_full(string, string_len, start_position, match_options, max_tokens) end

--- # method GLib.Regex:unref()
---
--- Decreases reference count of `regex` by 1. When reference count drops
--- to zero, it frees all the memory associated with the regex structure.
---
--- ---
---
---@param self GLib.Regex # a `GRegex`
---@return nil
function GLib.Regex:unref() end

--- # function GLib.Regex.check_replacement()
---
--- Checks whether `replacement` is a valid replacement string
--- (see `g_regex_replace()`), i.e. that all escape sequences in
--- it are valid.
--- 
--- If `has_references` is not `nil` then `replacement` is checked
--- for pattern references. For instance, replacement text 'foo\n'
--- does not contain references and may be evaluated without information
--- about actual match, but '\0\1' (whole match followed by first
--- subpattern) requires valid `GMatchInfo` object.
---
--- ---
---
---@param replacement string # the replacement string
---@param has_references? (boolean|nil) # location to store information about references in `replacement` or `nil`
---@return (boolean|nil) # whether `replacement` is a valid replacement string
function GLib.Regex.check_replacement(replacement, has_references) end

--- # function GLib.Regex.error_quark()
---
---@return GLib.Quark
function GLib.Regex.error_quark() end

--- # function GLib.Regex.escape_nul()
---
--- Escapes the nul characters in `string` to "\x00".  It can be used
--- to compile a regex with embedded nul characters.
--- 
--- For completeness, `length` can be -1 for a nul-terminated string.
--- In this case the output string will be of course equal to `string`.
---
--- ---
---
---@param string string # the string to escape
---@param length integer # the length of `string`
---@return string # a newly-allocated escaped string
function GLib.Regex.escape_nul(string, length) end

--- # function GLib.Regex.escape_string()
---
--- Escapes the special characters used for regular expressions
--- in `string`, for instance "a.b*c" becomes "a\.b\*c". This
--- function is useful to dynamically generate regular expressions.
--- 
--- `string` can contain nul characters that are replaced with "\0",
--- in this case remember to specify the correct length of `string`
--- in `length`.
---
--- ---
---
---@param string string # the string to escape
---@param length integer # the length of `string`, in bytes, or -1 if `string` is nul-terminated
---@return string # a newly-allocated escaped string
function GLib.Regex.escape_string(string, length) end

--- # function GLib.Regex.match_simple()
---
--- Scans for a match in `string` for `pattern`.
--- 
--- This function is equivalent to `g_regex_match()` but it does not
--- require to compile the pattern with `g_regex_new()`, avoiding some
--- lines of code when you need just to do a match without extracting
--- substrings, capture counts, and so on.
--- 
--- If this function is to be called on the same `pattern` more than
--- once, it's more efficient to compile the pattern once with
--- `g_regex_new()` and then use `g_regex_match()`.
---
--- ---
---
---@param pattern string # the regular expression
---@param string string # the string to scan for matches
---@param compile_options GLib.RegexCompileFlags # compile options for the regular expression, or 0
---@param match_options GLib.RegexMatchFlags # match options, or 0
---@return (boolean|nil) # `true` if the string matched, `false` otherwise
function GLib.Regex.match_simple(pattern, string, compile_options, match_options) end

--- # function GLib.Regex.split_simple()
---
--- Breaks the string on the pattern, and returns an array of
--- the tokens. If the pattern contains capturing parentheses,
--- then the text for each of the substrings will also be returned.
--- If the pattern does not match anywhere in the string, then the
--- whole string is returned as the first token.
--- 
--- This function is equivalent to `g_regex_split()` but it does
--- not require to compile the pattern with `g_regex_new()`, avoiding
--- some lines of code when you need just to do a split without
--- extracting substrings, capture counts, and so on.
--- 
--- If this function is to be called on the same `pattern` more than
--- once, it's more efficient to compile the pattern once with
--- `g_regex_new()` and then use `g_regex_split()`.
--- 
--- As a special case, the result of splitting the empty string ""
--- is an empty vector, not a vector containing a single string.
--- The reason for this special case is that being able to represent
--- an empty vector is typically more useful than consistent handling
--- of empty elements. If you do need to represent empty elements,
--- you'll need to check for the empty string before calling this
--- function.
--- 
--- A pattern that can match empty strings splits `string` into
--- separate characters wherever it matches the empty string between
--- characters. For example splitting "ab c" using as a separator
--- "\s*", you will get "a", "b" and "c".
---
--- ---
---
---@param pattern string # the regular expression
---@param string string # the string to scan for matches
---@param compile_options GLib.RegexCompileFlags # compile options for the regular expression, or 0
---@param match_options GLib.RegexMatchFlags # match options, or 0
---@return unknown[] # a `nil`-terminated array of strings. Free it using `g_strfreev()`
function GLib.Regex.split_simple(pattern, string, compile_options, match_options) end

--- # function GLib.Regex.new()
---
--- Compiles the regular expression to an internal form, and does
--- the initial setup of the `GRegex` structure.
---
--- ---
---
---@param pattern string # the regular expression
---@param compile_options GLib.RegexCompileFlags # compile options for the regular expression, or 0
---@param match_options GLib.RegexMatchFlags # match options for the regular expression, or 0
---@return GLib.Regex # a `GRegex` structure or `nil` if an error occurred. Call `g_regex_unref()` when you are done with it
function GLib.Regex.new(pattern, compile_options, match_options) end

---@enum GLib.RegexCompileFlags
GLib.RegexCompileFlags = {}

---@enum GLib.RegexError
GLib.RegexError = {}

---@alias GLib.RegexEvalCallback fun(match_info: GLib.MatchInfo, result: GLib.String, user_data: userdata): (boolean|nil)

---@enum GLib.RegexMatchFlags
GLib.RegexMatchFlags = {}

--- # record GLib.SList
---
--- The `GSList` struct is used for each element in the singly-linked
--- list.
---
--- ---
---
---@class GLib.SList
---@field data userdata # holds the element's data, which can be a pointer to any kind of data, or any integer value using the [Type Conversion Macros][glib-Type-Conversion-Macros]
---@field next userdata[] # contains the link to the next element in the list.
GLib.SList = {}

--- # record GLib.Scanner
---
--- The data structure representing a lexical scanner.
--- 
--- You should set `input_name` after creating the scanner, since
--- it is used by the default message handler when displaying
--- warnings and errors. If you are scanning a file, the filename
--- would be a good choice.
--- 
--- The `user_data` and `max_parse_errors` fields are not used.
--- If you need to associate extra data with the scanner you
--- can place them here.
--- 
--- If you want to use your own message handler you can set the
--- `msg_handler` field. The type of the message handler function
--- is declared by `GScannerMsgFunc`.
---
--- ---
---
---@class GLib.Scanner
---@field user_data userdata # unused
---@field max_parse_errors integer # unused
---@field parse_errors integer # `g_scanner_error()` increments this field
---@field input_name string # name of input stream, featured by the default message handler
---@field qdata GLib.Data # quarked data
---@field config GLib.ScannerConfig # link into the scanner configuration
---@field token GLib.TokenType # token parsed by the last `g_scanner_get_next_token()`
---@field value GLib.TokenValue # value of the last token from `g_scanner_get_next_token()`
---@field line integer # line number of the last token from `g_scanner_get_next_token()`
---@field position integer # char number of the last token from `g_scanner_get_next_token()`
---@field next_token GLib.TokenType # token parsed by the last `g_scanner_peek_next_token()`
---@field next_value GLib.TokenValue # value of the last token from `g_scanner_peek_next_token()`
---@field next_line integer # line number of the last token from `g_scanner_peek_next_token()`
---@field next_position integer # char number of the last token from `g_scanner_peek_next_token()`
---@field symbol_table table<userdata, userdata>
---@field input_fd integer
---@field text string
---@field text_end string
---@field buffer string
---@field scope_id integer
---@field msg_handler GLib.ScannerMsgFunc # handler function for _warn and _error
GLib.Scanner = {}

--- # method GLib.Scanner:cur_line()
---
--- Returns the current line in the input stream (counting
--- from 1). This is the line of the last token parsed via
--- `g_scanner_get_next_token()`.
---
--- ---
---
---@param self GLib.Scanner # a `GScanner`
---@return integer # the current line
function GLib.Scanner:cur_line() end

--- # method GLib.Scanner:cur_position()
---
--- Returns the current position in the current line (counting
--- from 0). This is the position of the last token parsed via
--- `g_scanner_get_next_token()`.
---
--- ---
---
---@param self GLib.Scanner # a `GScanner`
---@return integer # the current position on the line
function GLib.Scanner:cur_position() end

--- # method GLib.Scanner:cur_token()
---
--- Gets the current token type. This is simply the `token`
--- field in the `GScanner` structure.
---
--- ---
---
---@param self GLib.Scanner # a `GScanner`
---@return GLib.TokenType # the current token type
function GLib.Scanner:cur_token() end

--- # method GLib.Scanner:destroy()
---
--- Frees all memory used by the `GScanner`.
---
--- ---
---
---@param self GLib.Scanner # a `GScanner`
---@return nil
function GLib.Scanner:destroy() end

--- # method GLib.Scanner:eof()
---
--- Returns `true` if the scanner has reached the end of
--- the file or text buffer.
---
--- ---
---
---@param self GLib.Scanner # a `GScanner`
---@return (boolean|nil) # `true` if the scanner has reached the end of the file or text buffer
function GLib.Scanner:eof() end

--- # method GLib.Scanner:get_next_token()
---
--- Parses the next token just like `g_scanner_peek_next_token()`
--- and also removes it from the input stream. The token data is
--- placed in the `token`, `value`, `line`, and `position` fields of
--- the `GScanner` structure.
---
--- ---
---
---@param self GLib.Scanner # a `GScanner`
---@return GLib.TokenType # the type of the token
function GLib.Scanner:get_next_token() end

--- # method GLib.Scanner:input_file()
---
--- Prepares to scan a file.
---
--- ---
---
---@param self GLib.Scanner # a `GScanner`
---@param input_fd integer # a file descriptor
---@return nil
function GLib.Scanner:input_file(input_fd) end

--- # method GLib.Scanner:input_text()
---
--- Prepares to scan a text buffer.
---
--- ---
---
---@param self GLib.Scanner # a `GScanner`
---@param text string # the text buffer to scan
---@param text_len integer # the length of the text buffer
---@return nil
function GLib.Scanner:input_text(text, text_len) end

--- # method GLib.Scanner:lookup_symbol()
---
--- Looks up a symbol in the current scope and return its value.
--- If the symbol is not bound in the current scope, `nil` is
--- returned.
---
--- ---
---
---@param self GLib.Scanner # a `GScanner`
---@param symbol string # the symbol to look up
---@return userdata # the value of `symbol` in the current scope, or `nil` if `symbol` is not bound in the current scope
function GLib.Scanner:lookup_symbol(symbol) end

--- # method GLib.Scanner:peek_next_token()
---
--- Parses the next token, without removing it from the input stream.
--- The token data is placed in the `next_token`, `next_value`, `next_line`,
--- and `next_position` fields of the `GScanner` structure.
--- 
--- Note that, while the token is not removed from the input stream
--- (i.e. the next call to `g_scanner_get_next_token()` will return the
--- same token), it will not be reevaluated. This can lead to surprising
--- results when changing scope or the scanner configuration after peeking
--- the next token. Getting the next token after switching the scope or
--- configuration will return whatever was peeked before, regardless of
--- any symbols that may have been added or removed in the new scope.
---
--- ---
---
---@param self GLib.Scanner # a `GScanner`
---@return GLib.TokenType # the type of the token
function GLib.Scanner:peek_next_token() end

--- # method GLib.Scanner:scope_add_symbol()
---
--- Adds a symbol to the given scope.
---
--- ---
---
---@param self GLib.Scanner # a `GScanner`
---@param scope_id integer # the scope id
---@param symbol string # the symbol to add
---@param value? userdata # the value of the symbol
---@return nil
function GLib.Scanner:scope_add_symbol(scope_id, symbol, value) end

--- # method GLib.Scanner:scope_lookup_symbol()
---
--- Looks up a symbol in a scope and return its value. If the
--- symbol is not bound in the scope, `nil` is returned.
---
--- ---
---
---@param self GLib.Scanner # a `GScanner`
---@param scope_id integer # the scope id
---@param symbol string # the symbol to look up
---@return userdata # the value of `symbol` in the given scope, or `nil` if `symbol` is not bound in the given scope.
function GLib.Scanner:scope_lookup_symbol(scope_id, symbol) end

--- # method GLib.Scanner:scope_remove_symbol()
---
--- Removes a symbol from a scope.
---
--- ---
---
---@param self GLib.Scanner # a `GScanner`
---@param scope_id integer # the scope id
---@param symbol string # the symbol to remove
---@return nil
function GLib.Scanner:scope_remove_symbol(scope_id, symbol) end

--- # method GLib.Scanner:set_scope()
---
--- Sets the current scope.
---
--- ---
---
---@param self GLib.Scanner # a `GScanner`
---@param scope_id integer # the new scope id
---@return integer # the old scope id
function GLib.Scanner:set_scope(scope_id) end

--- # method GLib.Scanner:sync_file_offset()
---
--- Rewinds the filedescriptor to the current buffer position
--- and blows the file read ahead buffer. This is useful for
--- third party uses of the scanners filedescriptor, which hooks
--- onto the current scanning position.
---
--- ---
---
---@param self GLib.Scanner # a `GScanner`
---@return nil
function GLib.Scanner:sync_file_offset() end

--- # method GLib.Scanner:unexp_token()
---
--- Outputs a message through the scanner's msg_handler,
--- resulting from an unexpected token in the input stream.
--- Note that you should not call `g_scanner_peek_next_token()`
--- followed by `g_scanner_unexp_token()` without an intermediate
--- call to `g_scanner_get_next_token()`, as `g_scanner_unexp_token()`
--- evaluates the scanner's current token (not the peeked token)
--- to construct part of the message.
---
--- ---
---
---@param self GLib.Scanner # a `GScanner`
---@param expected_token GLib.TokenType # the expected token
---@param identifier_spec string # a string describing how the scanner's user refers to identifiers (`nil` defaults to "identifier"). This is used if `expected_token` is %G_TOKEN_IDENTIFIER or %G_TOKEN_IDENTIFIER_NULL.
---@param symbol_spec string # a string describing how the scanner's user refers to symbols (`nil` defaults to "symbol"). This is used if `expected_token` is %G_TOKEN_SYMBOL or any token value greater than %G_TOKEN_LAST.
---@param symbol_name string # the name of the symbol, if the scanner's current token is a symbol.
---@param message string # a message string to output at the end of the warning/error, or `nil`.
---@param is_error integer # if `true` it is output as an error. If `false` it is output as a warning.
---@return nil
function GLib.Scanner:unexp_token(expected_token, identifier_spec, symbol_spec, symbol_name, message, is_error) end

--- # record GLib.ScannerConfig
---
--- Specifies the `GScanner` parser configuration. Most settings can
--- be changed during the parsing phase and will affect the lexical
--- parsing of the next unpeeked token.
---
--- ---
---
---@class GLib.ScannerConfig
---@field cset_skip_characters string # specifies which characters should be skipped by the scanner (the default is the whitespace characters: space, tab, carriage-return and line-feed).
---@field cset_identifier_first string # specifies the characters which can start identifiers (the default is %G_CSET_a_2_z, "_", and %G_CSET_A_2_Z).
---@field cset_identifier_nth string # specifies the characters which can be used in identifiers, after the first character (the default is %G_CSET_a_2_z, "_0123456789", %G_CSET_A_2_Z, %G_CSET_LATINS, %G_CSET_LATINC).
---@field cpair_comment_single string # specifies the characters at the start and end of single-line comments. The default is "#\n" which means that single-line comments start with a '#' and continue until a '\n' (end of line).
---@field case_sensitive integer # specifies if symbols are case sensitive (the default is `false`).
---@field skip_comment_multi integer # specifies if multi-line comments are skipped and not returned as tokens (the default is `true`).
---@field skip_comment_single integer # specifies if single-line comments are skipped and not returned as tokens (the default is `true`).
---@field scan_comment_multi integer # specifies if multi-line comments are recognized (the default is `true`).
---@field scan_identifier integer # specifies if identifiers are recognized (the default is `true`).
---@field scan_identifier_1char integer # specifies if single-character identifiers are recognized (the default is `false`).
---@field scan_identifier_NULL integer # specifies if `nil` is reported as %G_TOKEN_IDENTIFIER_NULL (the default is `false`).
---@field scan_symbols integer # specifies if symbols are recognized (the default is `true`).
---@field scan_binary integer # specifies if binary numbers are recognized (the default is `false`).
---@field scan_octal integer # specifies if octal numbers are recognized (the default is `true`).
---@field scan_float integer # specifies if floating point numbers are recognized (the default is `true`).
---@field scan_hex integer # specifies if hexadecimal numbers are recognized (the default is `true`).
---@field scan_hex_dollar integer # specifies if '$' is recognized as a prefix for hexadecimal numbers (the default is `false`).
---@field scan_string_sq integer # specifies if strings can be enclosed in single quotes (the default is `true`).
---@field scan_string_dq integer # specifies if strings can be enclosed in double quotes (the default is `true`).
---@field numbers_2_int integer # specifies if binary, octal and hexadecimal numbers are reported as %G_TOKEN_INT (the default is `true`).
---@field int_2_float integer # specifies if all numbers are reported as %G_TOKEN_FLOAT (the default is `false`).
---@field identifier_2_string integer # specifies if identifiers are reported as strings (the default is `false`).
---@field char_2_token integer # specifies if characters are reported by setting `token = ch` or as %G_TOKEN_CHAR (the default is `true`).
---@field symbol_2_token integer # specifies if symbols are reported by setting `token = v_symbol` or as %G_TOKEN_SYMBOL (the default is `false`).
---@field scope_0_fallback integer # specifies if a symbol is searched for in the default scope in addition to the current scope (the default is `false`).
---@field store_int64 integer # use value.v_int64 rather than v_int
---@field padding_dummy integer
GLib.ScannerConfig = {}

---@alias GLib.ScannerMsgFunc fun(scanner: GLib.Scanner, message: string, error: (boolean|nil)): nil

---@enum GLib.SeekType
GLib.SeekType = {}

--- # record GLib.Sequence
---
--- The `GSequence` struct is an opaque data type representing a
--- [sequence][glib-Sequences] data type.
---
--- ---
---
---@class GLib.Sequence
GLib.Sequence = {}

--- # method GLib.Sequence:append()
---
--- Adds a new item to the end of `seq`.
---
--- ---
---
---@param self GLib.Sequence # a `GSequence`
---@param data? userdata # the data for the new item
---@return GLib.SequenceIter # an iterator pointing to the new item
function GLib.Sequence:append(data) end

--- # method GLib.Sequence:free()
---
--- Frees the memory allocated for `seq`. If `seq` has a data destroy
--- function associated with it, that function is called on all items
--- in `seq`.
---
--- ---
---
---@param self GLib.Sequence # a `GSequence`
---@return nil
function GLib.Sequence:free() end

--- # method GLib.Sequence:get_begin_iter()
---
--- Returns the begin iterator for `seq`.
---
--- ---
---
---@param self GLib.Sequence # a `GSequence`
---@return GLib.SequenceIter # the begin iterator for `seq`.
function GLib.Sequence:get_begin_iter() end

--- # method GLib.Sequence:get_end_iter()
---
--- Returns the end iterator for `seg`
---
--- ---
---
---@param self GLib.Sequence # a `GSequence`
---@return GLib.SequenceIter # the end iterator for `seq`
function GLib.Sequence:get_end_iter() end

--- # method GLib.Sequence:get_iter_at_pos()
---
--- Returns the iterator at position `pos`. If `pos` is negative or larger
--- than the number of items in `seq`, the end iterator is returned.
---
--- ---
---
---@param self GLib.Sequence # a `GSequence`
---@param pos integer # a position in `seq`, or -1 for the end
---@return GLib.SequenceIter # The `GSequenceIter` at position `pos`
function GLib.Sequence:get_iter_at_pos(pos) end

--- # method GLib.Sequence:get_length()
---
--- Returns the positive length (>= 0) of `seq`. Note that this method is
--- O(h) where `h' is the height of the tree. It is thus more efficient
--- to use `g_sequence_is_empty()` when comparing the length to zero.
---
--- ---
---
---@param self GLib.Sequence # a `GSequence`
---@return integer # the length of `seq`
function GLib.Sequence:get_length() end

--- # method GLib.Sequence:is_empty()
---
--- Returns `true` if the sequence contains zero items.
--- 
--- This function is functionally identical to checking the result of
--- `g_sequence_get_length()` being equal to zero. However this function is
--- implemented in O(1) running time.
---
--- ---
---
---@param self GLib.Sequence # a `GSequence`
---@return (boolean|nil) # `true` if the sequence is empty, otherwise `false`.
function GLib.Sequence:is_empty() end

--- # method GLib.Sequence:prepend()
---
--- Adds a new item to the front of `seq`
---
--- ---
---
---@param self GLib.Sequence # a `GSequence`
---@param data? userdata # the data for the new item
---@return GLib.SequenceIter # an iterator pointing to the new item
function GLib.Sequence:prepend(data) end

--- # function GLib.Sequence.get()
---
--- Returns the data that `iter` points to.
---
--- ---
---
---@param iter GLib.SequenceIter # a `GSequenceIter`
---@return userdata # the data that `iter` points to
function GLib.Sequence.get(iter) end

--- # function GLib.Sequence.insert_before()
---
--- Inserts a new item just before the item pointed to by `iter`.
---
--- ---
---
---@param iter GLib.SequenceIter # a `GSequenceIter`
---@param data? userdata # the data for the new item
---@return GLib.SequenceIter # an iterator pointing to the new item
function GLib.Sequence.insert_before(iter, data) end

--- # function GLib.Sequence.move()
---
--- Moves the item pointed to by `src` to the position indicated by `dest`.
--- After calling this function `dest` will point to the position immediately
--- after `src`. It is allowed for `src` and `dest` to point into different
--- sequences.
---
--- ---
---
---@param src GLib.SequenceIter # a `GSequenceIter` pointing to the item to move
---@param dest GLib.SequenceIter # a `GSequenceIter` pointing to the position to which the item is moved
---@return nil
function GLib.Sequence.move(src, dest) end

--- # function GLib.Sequence.move_range()
---
--- Inserts the (`begin`, `end`) range at the destination pointed to by `dest`.
--- The `begin` and `end` iters must point into the same sequence. It is
--- allowed for `dest` to point to a different sequence than the one pointed
--- into by `begin` and `end`.
--- 
--- If `dest` is `nil`, the range indicated by `begin` and `end` is
--- removed from the sequence. If `dest` points to a place within
--- the (`begin`, `end`) range, the range does not move.
---
--- ---
---
---@param dest GLib.SequenceIter # a `GSequenceIter`
---@param begin GLib.SequenceIter # a `GSequenceIter`
---@param end__ GLib.SequenceIter # a `GSequenceIter`
---@return nil
function GLib.Sequence.move_range(dest, begin, end__) end

--- # function GLib.Sequence.range_get_midpoint()
---
--- Finds an iterator somewhere in the range (`begin`, `end`). This
--- iterator will be close to the middle of the range, but is not
--- guaranteed to be exactly in the middle.
--- 
--- The `begin` and `end` iterators must both point to the same sequence
--- and `begin` must come before or be equal to `end` in the sequence.
---
--- ---
---
---@param begin GLib.SequenceIter # a `GSequenceIter`
---@param end__ GLib.SequenceIter # a `GSequenceIter`
---@return GLib.SequenceIter # a `GSequenceIter` pointing somewhere in the (`begin`, `end`) range
function GLib.Sequence.range_get_midpoint(begin, end__) end

--- # function GLib.Sequence.remove()
---
--- Removes the item pointed to by `iter`. It is an error to pass the
--- end iterator to this function.
--- 
--- If the sequence has a data destroy function associated with it, this
--- function is called on the data for the removed item.
---
--- ---
---
---@param iter GLib.SequenceIter # a `GSequenceIter`
---@return nil
function GLib.Sequence.remove(iter) end

--- # function GLib.Sequence.remove_range()
---
--- Removes all items in the (`begin`, `end`) range.
--- 
--- If the sequence has a data destroy function associated with it, this
--- function is called on the data for the removed items.
---
--- ---
---
---@param begin GLib.SequenceIter # a `GSequenceIter`
---@param end__ GLib.SequenceIter # a `GSequenceIter`
---@return nil
function GLib.Sequence.remove_range(begin, end__) end

--- # function GLib.Sequence.set()
---
--- Changes the data for the item pointed to by `iter` to be `data`. If
--- the sequence has a data destroy function associated with it, that
--- function is called on the existing data that `iter` pointed to.
---
--- ---
---
---@param iter GLib.SequenceIter # a `GSequenceIter`
---@param data? userdata # new data for the item
---@return nil
function GLib.Sequence.set(iter, data) end

--- # function GLib.Sequence.swap()
---
--- Swaps the items pointed to by `a` and `b`. It is allowed for `a` and `b`
--- to point into difference sequences.
---
--- ---
---
---@param a GLib.SequenceIter # a `GSequenceIter`
---@param b GLib.SequenceIter # a `GSequenceIter`
---@return nil
function GLib.Sequence.swap(a, b) end

--- # record GLib.SequenceIter
---
--- The `GSequenceIter` struct is an opaque data type representing an
--- iterator pointing into a `GSequence`.
---
--- ---
---
---@class GLib.SequenceIter
GLib.SequenceIter = {}

--- # method GLib.SequenceIter:compare()
---
--- Returns a negative number if `a` comes before `b`, 0 if they are equal,
--- and a positive number if `a` comes after `b`.
--- 
--- The `a` and `b` iterators must point into the same sequence.
---
--- ---
---
---@param self GLib.SequenceIter # a `GSequenceIter`
---@param b GLib.SequenceIter # a `GSequenceIter`
---@return integer # a negative number if `a` comes before `b`, 0 if they are equal, and a positive number if `a` comes after `b`
function GLib.SequenceIter:compare(b) end

--- # method GLib.SequenceIter:get_position()
---
--- Returns the position of `iter`
---
--- ---
---
---@param self GLib.SequenceIter # a `GSequenceIter`
---@return integer # the position of `iter`
function GLib.SequenceIter:get_position() end

--- # method GLib.SequenceIter:get_sequence()
---
--- Returns the `GSequence` that `iter` points into.
---
--- ---
---
---@param self GLib.SequenceIter # a `GSequenceIter`
---@return GLib.Sequence # the `GSequence` that `iter` points into
function GLib.SequenceIter:get_sequence() end

--- # method GLib.SequenceIter:is_begin()
---
--- Returns whether `iter` is the begin iterator
---
--- ---
---
---@param self GLib.SequenceIter # a `GSequenceIter`
---@return (boolean|nil) # whether `iter` is the begin iterator
function GLib.SequenceIter:is_begin() end

--- # method GLib.SequenceIter:is_end()
---
--- Returns whether `iter` is the end iterator
---
--- ---
---
---@param self GLib.SequenceIter # a `GSequenceIter`
---@return (boolean|nil) # Whether `iter` is the end iterator
function GLib.SequenceIter:is_end() end

--- # method GLib.SequenceIter:move()
---
--- Returns the `GSequenceIter` which is `delta` positions away from `iter`.
--- If `iter` is closer than -`delta` positions to the beginning of the sequence,
--- the begin iterator is returned. If `iter` is closer than `delta` positions
--- to the end of the sequence, the end iterator is returned.
---
--- ---
---
---@param self GLib.SequenceIter # a `GSequenceIter`
---@param delta integer # A positive or negative number indicating how many positions away from `iter` the returned `GSequenceIter` will be
---@return GLib.SequenceIter # a `GSequenceIter` which is `delta` positions away from `iter`
function GLib.SequenceIter:move(delta) end

--- # method GLib.SequenceIter:next()
---
--- Returns an iterator pointing to the next position after `iter`.
--- If `iter` is the end iterator, the end iterator is returned.
---
--- ---
---
---@param self GLib.SequenceIter # a `GSequenceIter`
---@return GLib.SequenceIter # a `GSequenceIter` pointing to the next position after `iter`
function GLib.SequenceIter:next() end

--- # method GLib.SequenceIter:prev()
---
--- Returns an iterator pointing to the previous position before `iter`.
--- If `iter` is the begin iterator, the begin iterator is returned.
---
--- ---
---
---@param self GLib.SequenceIter # a `GSequenceIter`
---@return GLib.SequenceIter # a `GSequenceIter` pointing to the previous position before `iter`
function GLib.SequenceIter:prev() end

---@alias GLib.SequenceIterCompareFunc fun(a: GLib.SequenceIter, b: GLib.SequenceIter, data: userdata): integer

---@enum GLib.ShellError
GLib.ShellError = {}

---@enum GLib.SliceConfig
GLib.SliceConfig = {}

--- # record GLib.Source
---
--- The `GSource` struct is an opaque data type
--- representing an event source.
---
--- ---
---
---@class GLib.Source
---@field callback_data userdata
---@field callback_funcs GLib.SourceCallbackFuncs
---@field source_funcs GLib.SourceFuncs
---@field ref_count integer
---@field context GLib.MainContext
---@field priority integer
---@field flags integer
---@field source_id integer
---@field poll_fds userdata[]
---@field prev GLib.Source
---@field next GLib.Source
---@field name string
---@field priv GLib.SourcePrivate
---@operator call: GLib.Source
GLib.Source = {}

--- # method GLib.Source:add_child_source()
---
--- Adds `child_source` to `source` as a "polled" source; when `source` is
--- added to a `GMainContext`, `child_source` will be automatically added
--- with the same priority, when `child_source` is triggered, it will
--- cause `source` to dispatch (in addition to calling its own
--- callback), and when `source` is destroyed, it will destroy
--- `child_source` as well. (`source` will also still be dispatched if
--- its own prepare/check functions indicate that it is ready.)
--- 
--- If you don't need `child_source` to do anything on its own when it
--- triggers, you can call `g_source_set_dummy_callback()` on it to set a
--- callback that does nothing (except return `true` if appropriate).
--- 
--- `source` will hold a reference on `child_source` while `child_source`
--- is attached to it.
--- 
--- This API is only intended to be used by implementations of `GSource`.
--- Do not call this API on a `GSource` that you did not create.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@param child_source GLib.Source # a second `GSource` that `source` should "poll"
---@return nil
function GLib.Source:add_child_source(child_source) end

--- # method GLib.Source:add_poll()
---
--- Adds a file descriptor to the set of file descriptors polled for
--- this source. This is usually combined with `g_source_new()` to add an
--- event source. The event source's check function will typically test
--- the `revents` field in the `GPollFD` struct and return `true` if events need
--- to be processed.
--- 
--- This API is only intended to be used by implementations of `GSource`.
--- Do not call this API on a `GSource` that you did not create.
--- 
--- Using this API forces the linear scanning of event sources on each
--- main loop iteration.  Newly-written event sources should try to use
--- `g_source_add_unix_fd()` instead of this API.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@param fd GLib.PollFD # a `GPollFD` structure holding information about a file descriptor to watch.
---@return nil
function GLib.Source:add_poll(fd) end

--- # method GLib.Source:add_unix_fd()
---
--- Monitors `fd` for the IO events in `events`.
--- 
--- The tag returned by this function can be used to remove or modify the
--- monitoring of the fd using `g_source_remove_unix_fd()` or
--- `g_source_modify_unix_fd()`.
--- 
--- It is not necessary to remove the fd before destroying the source; it
--- will be cleaned up automatically.
--- 
--- This API is only intended to be used by implementations of `GSource`.
--- Do not call this API on a `GSource` that you did not create.
--- 
--- As the name suggests, this function is not available on Windows.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@param fd integer # the fd to monitor
---@param events GLib.IOCondition # an event mask
---@return userdata # an opaque tag
function GLib.Source:add_unix_fd(fd, events) end

--- # method GLib.Source:attach()
---
--- Adds a `GSource` to a `context` so that it will be executed within
--- that context. Remove it by calling `g_source_destroy()`.
--- 
--- This function is safe to call from any thread, regardless of which thread
--- the `context` is running in.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@param context? GLib.MainContext # a `GMainContext` (if `nil`, the global-default main context will be used)
---@return integer # the ID (greater than 0) for the source within the `GMainContext`.
function GLib.Source:attach(context) end

--- # method GLib.Source:destroy()
---
--- Removes a source from its `GMainContext`, if any, and mark it as
--- destroyed.  The source cannot be subsequently added to another
--- context. It is safe to call this on sources which have already been
--- removed from their context.
--- 
--- This does not unref the `GSource`: if you still hold a reference, use
--- `g_source_unref()` to drop it.
--- 
--- This function is safe to call from any thread, regardless of which thread
--- the `GMainContext` is running in.
--- 
--- If the source is currently attached to a `GMainContext`, destroying it
--- will effectively unset the callback similar to calling `g_source_set_callback()`.
--- This can mean, that the data's `GDestroyNotify` gets called right away.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@return nil
function GLib.Source:destroy() end

--- # method GLib.Source:get_can_recurse()
---
--- Checks whether a source is allowed to be called recursively.
--- see `g_source_set_can_recurse()`.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@return (boolean|nil) # whether recursion is allowed.
function GLib.Source:get_can_recurse() end

--- # method GLib.Source:get_context()
---
--- Gets the `GMainContext` with which the source is associated.
--- 
--- You can call this on a source that has been destroyed, provided
--- that the `GMainContext` it was attached to still exists (in which
--- case it will return that `GMainContext`). In particular, you can
--- always call this function on the source returned from
--- `g_main_current_source()`. But calling this function on a source
--- whose `GMainContext` has been destroyed is an error.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@return GLib.MainContext # the `GMainContext` with which the source is associated, or `nil` if the context has not yet been added to a source.
function GLib.Source:get_context() end

--- # method GLib.Source:get_current_time()
---
--- This function ignores `source` and is otherwise the same as
--- `g_get_current_time()`.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@param timeval GLib.TimeVal # `GTimeVal` structure in which to store current time.
---@return nil
function GLib.Source:get_current_time(timeval) end

--- # method GLib.Source:get_id()
---
--- Returns the numeric ID for a particular source. The ID of a source
--- is a positive integer which is unique within a particular main loop
--- context. The reverse
--- mapping from ID to source is done by `g_main_context_find_source_by_id()`.
--- 
--- You can only call this function while the source is associated to a
--- `GMainContext` instance; calling this function before `g_source_attach()`
--- or after `g_source_destroy()` yields undefined behavior. The ID returned
--- is unique within the `GMainContext` instance passed to `g_source_attach()`.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@return integer # the ID (greater than 0) for the source
function GLib.Source:get_id() end

--- # method GLib.Source:get_name()
---
--- Gets a name for the source, used in debugging and profiling.  The
--- name may be `NULL` if it has never been set with `g_source_set_name()`.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@return string # the name of the source
function GLib.Source:get_name() end

--- # method GLib.Source:get_priority()
---
--- Gets the priority of a source.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@return integer # the priority of the source
function GLib.Source:get_priority() end

--- # method GLib.Source:get_ready_time()
---
--- Gets the "ready time" of `source`, as set by
--- `g_source_set_ready_time()`.
--- 
--- Any time before the current monotonic time (including 0) is an
--- indication that the source will fire immediately.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@return integer # the monotonic ready time, -1 for "never"
function GLib.Source:get_ready_time() end

--- # method GLib.Source:get_time()
---
--- Gets the time to be used when checking this source. The advantage of
--- calling this function over calling `g_get_monotonic_time()` directly is
--- that when checking multiple sources, GLib can cache a single value
--- instead of having to repeatedly get the system monotonic time.
--- 
--- The time here is the system monotonic time, if available, or some
--- other reasonable alternative otherwise.  See `g_get_monotonic_time()`.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@return integer # the monotonic time in microseconds
function GLib.Source:get_time() end

--- # method GLib.Source:is_destroyed()
---
--- Returns whether `source` has been destroyed.
--- 
--- This is important when you operate upon your objects
--- from within idle handlers, but may have freed the object
--- before the dispatch of your idle handler.
--- 
--- ```c
--- static gboolean
--- idle_callback (gpointer data)
--- {
---   SomeWidget *self = data;
---    
---   g_mutex_lock (&self->idle_id_mutex);
---   // do stuff with self
---   self->idle_id = 0;
---   g_mutex_unlock (&self->idle_id_mutex);
---    
---   return G_SOURCE_REMOVE;
--- }
---  
--- static void
--- some_widget_do_stuff_later (SomeWidget *self)
--- {
---   g_mutex_lock (&self->idle_id_mutex);
---   self->idle_id = g_idle_add (idle_callback, self);
---   g_mutex_unlock (&self->idle_id_mutex);
--- }
---  
--- static void
--- some_widget_init (SomeWidget *self)
--- {
---   g_mutex_init (&self->idle_id_mutex);
--- 
---   // ...
--- }
--- 
--- static void
--- some_widget_finalize (GObject *object)
--- {
---   SomeWidget *self = SOME_WIDGET (object);
---    
---   if (self->idle_id)
---     g_source_remove (self->idle_id);
---    
---   g_mutex_clear (&self->idle_id_mutex);
--- 
---   G_OBJECT_CLASS (parent_class)->finalize (object);
--- }
--- ```
--- 
--- This will fail in a multi-threaded application if the
--- widget is destroyed before the idle handler fires due
--- to the use after free in the callback. A solution, to
--- this particular problem, is to check to if the source
--- has already been destroy within the callback.
--- 
--- ```c
--- static gboolean
--- idle_callback (gpointer data)
--- {
---   SomeWidget *self = data;
---   
---   g_mutex_lock (&self->idle_id_mutex);
---   if (!g_source_is_destroyed (g_main_current_source ()))
---     {
---       // do stuff with self
---     }
---   g_mutex_unlock (&self->idle_id_mutex);
---   
---   return FALSE;
--- }
--- ```
--- 
--- Calls to this function from a thread other than the one acquired by the
--- `GMainContext` the `GSource` is attached to are typically redundant, as the
--- source could be destroyed immediately after this function returns. However,
--- once a source is destroyed it cannot be un-destroyed, so this function can be
--- used for opportunistic checks from any thread.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@return (boolean|nil) # `true` if the source has been destroyed
function GLib.Source:is_destroyed() end

--- # method GLib.Source:modify_unix_fd()
---
--- Updates the event mask to watch for the fd identified by `tag`.
--- 
--- `tag` is the tag returned from `g_source_add_unix_fd()`.
--- 
--- If you want to remove a fd, don't set its event mask to zero.
--- Instead, call `g_source_remove_unix_fd()`.
--- 
--- This API is only intended to be used by implementations of `GSource`.
--- Do not call this API on a `GSource` that you did not create.
--- 
--- As the name suggests, this function is not available on Windows.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@param tag userdata # the tag from `g_source_add_unix_fd()`
---@param new_events GLib.IOCondition # the new event mask to watch
---@return nil
function GLib.Source:modify_unix_fd(tag, new_events) end

--- # method GLib.Source:query_unix_fd()
---
--- Queries the events reported for the fd corresponding to `tag` on
--- `source` during the last poll.
--- 
--- The return value of this function is only defined when the function
--- is called from the check or dispatch functions for `source`.
--- 
--- This API is only intended to be used by implementations of `GSource`.
--- Do not call this API on a `GSource` that you did not create.
--- 
--- As the name suggests, this function is not available on Windows.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@param tag userdata # the tag from `g_source_add_unix_fd()`
---@return GLib.IOCondition # the conditions reported on the fd
function GLib.Source:query_unix_fd(tag) end

--- # method GLib.Source:ref()
---
--- Increases the reference count on a source by one.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@return GLib.Source # `source`
function GLib.Source:ref() end

--- # method GLib.Source:remove_child_source()
---
--- Detaches `child_source` from `source` and destroys it.
--- 
--- This API is only intended to be used by implementations of `GSource`.
--- Do not call this API on a `GSource` that you did not create.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@param child_source GLib.Source # a `GSource` previously passed to `g_source_add_child_source()`.
---@return nil
function GLib.Source:remove_child_source(child_source) end

--- # method GLib.Source:remove_poll()
---
--- Removes a file descriptor from the set of file descriptors polled for
--- this source.
--- 
--- This API is only intended to be used by implementations of `GSource`.
--- Do not call this API on a `GSource` that you did not create.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@param fd GLib.PollFD # a `GPollFD` structure previously passed to `g_source_add_poll()`.
---@return nil
function GLib.Source:remove_poll(fd) end

--- # method GLib.Source:remove_unix_fd()
---
--- Reverses the effect of a previous call to `g_source_add_unix_fd()`.
--- 
--- You only need to call this if you want to remove an fd from being
--- watched while keeping the same source around.  In the normal case you
--- will just want to destroy the source.
--- 
--- This API is only intended to be used by implementations of `GSource`.
--- Do not call this API on a `GSource` that you did not create.
--- 
--- As the name suggests, this function is not available on Windows.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@param tag userdata # the tag from `g_source_add_unix_fd()`
---@return nil
function GLib.Source:remove_unix_fd(tag) end

--- # method GLib.Source:set_callback()
---
--- Sets the callback function for a source. The callback for a source is
--- called from the source's dispatch function.
--- 
--- The exact type of `func` depends on the type of source; ie. you
--- should not count on `func` being called with `data` as its first
--- parameter. Cast `func` with G_SOURCE_FUNC() to avoid warnings about
--- incompatible function types.
--- 
--- See [memory management of sources][mainloop-memory-management] for details
--- on how to handle memory management of `data`.
--- 
--- Typically, you won't use this function. Instead use functions specific
--- to the type of source you are using, such as `g_idle_add()` or `g_timeout_add()`.
--- 
--- It is safe to call this function multiple times on a source which has already
--- been attached to a context. The changes will take effect for the next time
--- the source is dispatched after this call returns.
--- 
--- Note that `g_source_destroy()` for a currently attached source has the effect
--- of also unsetting the callback.
---
--- ---
---
---@param self GLib.Source # the source
---@param func GLib.SourceFunc # a callback function
---@param data? userdata # the data to pass to callback function
---@param notify? GLib.DestroyNotify # a function to call when `data` is no longer in use, or `nil`.
---@return nil
function GLib.Source:set_callback(func, data, notify) end

--- # method GLib.Source:set_callback_indirect()
---
--- Sets the callback function storing the data as a refcounted callback
--- "object". This is used internally. Note that calling
--- `g_source_set_callback_indirect()` assumes
--- an initial reference count on `callback_data`, and thus
--- `callback_funcs`->unref will eventually be called once more
--- than `callback_funcs`->ref.
--- 
--- It is safe to call this function multiple times on a source which has already
--- been attached to a context. The changes will take effect for the next time
--- the source is dispatched after this call returns.
---
--- ---
---
---@param self GLib.Source # the source
---@param callback_data? userdata # pointer to callback data "object"
---@param callback_funcs GLib.SourceCallbackFuncs # functions for reference counting `callback_data` and getting the callback and data
---@return nil
function GLib.Source:set_callback_indirect(callback_data, callback_funcs) end

--- # method GLib.Source:set_can_recurse()
---
--- Sets whether a source can be called recursively. If `can_recurse` is
--- `true`, then while the source is being dispatched then this source
--- will be processed normally. Otherwise, all processing of this
--- source is blocked until the dispatch function returns.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@param can_recurse (boolean|nil) # whether recursion is allowed for this source
---@return nil
function GLib.Source:set_can_recurse(can_recurse) end

--- # method GLib.Source:set_funcs()
---
--- Sets the source functions (can be used to override
--- default implementations) of an unattached source.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@param funcs GLib.SourceFuncs # the new `GSourceFuncs`
---@return nil
function GLib.Source:set_funcs(funcs) end

--- # method GLib.Source:set_name()
---
--- Sets a name for the source, used in debugging and profiling.
--- The name defaults to `NULL`.
--- 
--- The source name should describe in a human-readable way
--- what the source does. For example, "X11 event queue"
--- or "GTK+ repaint idle handler" or whatever it is.
--- 
--- It is permitted to call this function multiple times, but is not
--- recommended due to the potential performance impact.  For example,
--- one could change the name in the "check" function of a `GSourceFuncs`
--- to include details like the event type in the source name.
--- 
--- Use caution if changing the name while another thread may be
--- accessing it with `g_source_get_name()`; that function does not copy
--- the value, and changing the value will free it while the other thread
--- may be attempting to use it.
--- 
--- Also see `g_source_set_static_name()`.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@param name string # debug name for the source
---@return nil
function GLib.Source:set_name(name) end

--- # method GLib.Source:set_priority()
---
--- Sets the priority of a source. While the main loop is being run, a
--- source will be dispatched if it is ready to be dispatched and no
--- sources at a higher (numerically smaller) priority are ready to be
--- dispatched.
--- 
--- A child source always has the same priority as its parent.  It is not
--- permitted to change the priority of a source once it has been added
--- as a child of another source.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@param priority integer # the new priority.
---@return nil
function GLib.Source:set_priority(priority) end

--- # method GLib.Source:set_ready_time()
---
--- Sets a `GSource` to be dispatched when the given monotonic time is
--- reached (or passed).  If the monotonic time is in the past (as it
--- always will be if `ready_time` is 0) then the source will be
--- dispatched immediately.
--- 
--- If `ready_time` is -1 then the source is never woken up on the basis
--- of the passage of time.
--- 
--- Dispatching the source does not reset the ready time.  You should do
--- so yourself, from the source dispatch function.
--- 
--- Note that if you have a pair of sources where the ready time of one
--- suggests that it will be delivered first but the priority for the
--- other suggests that it would be delivered first, and the ready time
--- for both sources is reached during the same main context iteration,
--- then the order of dispatch is undefined.
--- 
--- It is a no-op to call this function on a `GSource` which has already been
--- destroyed with `g_source_destroy()`.
--- 
--- This API is only intended to be used by implementations of `GSource`.
--- Do not call this API on a `GSource` that you did not create.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@param ready_time integer # the monotonic time at which the source will be ready, 0 for "immediately", -1 for "never"
---@return nil
function GLib.Source:set_ready_time(ready_time) end

--- # method GLib.Source:set_static_name()
---
--- A variant of `g_source_set_name()` that does not
--- duplicate the `name`, and can only be used with
--- string literals.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@param name string # debug name for the source
---@return nil
function GLib.Source:set_static_name(name) end

--- # method GLib.Source:unref()
---
--- Decreases the reference count of a source by one. If the
--- resulting reference count is zero the source and associated
--- memory will be destroyed.
---
--- ---
---
---@param self GLib.Source # a `GSource`
---@return nil
function GLib.Source:unref() end

--- # function GLib.Source.remove()
---
--- Removes the source with the given ID from the default main context. You must
--- use `g_source_destroy()` for sources added to a non-default main context.
--- 
--- The ID of a `GSource` is given by `g_source_get_id()`, or will be
--- returned by the functions `g_source_attach()`, `g_idle_add()`,
--- `g_idle_add_full()`, `g_timeout_add()`, `g_timeout_add_full()`,
--- `g_child_watch_add()`, `g_child_watch_add_full()`, `g_io_add_watch()`, and
--- `g_io_add_watch_full()`.
--- 
--- It is a programmer error to attempt to remove a non-existent source.
--- 
--- More specifically: source IDs can be reissued after a source has been
--- destroyed and therefore it is never valid to use this function with a
--- source ID which may have already been removed.  An example is when
--- scheduling an idle to run in another thread with `g_idle_add()`: the
--- idle may already have run and been removed by the time this function
--- is called on its (now invalid) source ID.  This source ID may have
--- been reissued, leading to the operation being performed against the
--- wrong source.
---
--- ---
---
---@param tag integer # the ID of the source to remove.
---@return (boolean|nil) # `true` if the source was found and removed.
function GLib.Source.remove(tag) end

--- # function GLib.Source.remove_by_funcs_user_data()
---
--- Removes a source from the default main loop context given the
--- source functions and user data. If multiple sources exist with the
--- same source functions and user data, only one will be destroyed.
---
--- ---
---
---@param funcs GLib.SourceFuncs # The `source_funcs` passed to `g_source_new()`
---@param user_data? userdata # the user data for the callback
---@return (boolean|nil) # `true` if a source was found and removed.
function GLib.Source.remove_by_funcs_user_data(funcs, user_data) end

--- # function GLib.Source.remove_by_user_data()
---
--- Removes a source from the default main loop context given the user
--- data for the callback. If multiple sources exist with the same user
--- data, only one will be destroyed.
---
--- ---
---
---@param user_data? userdata # the user_data for the callback.
---@return (boolean|nil) # `true` if a source was found and removed.
function GLib.Source.remove_by_user_data(user_data) end

--- # function GLib.Source.set_name_by_id()
---
--- Sets the name of a source using its ID.
--- 
--- This is a convenience utility to set source names from the return
--- value of `g_idle_add()`, `g_timeout_add()`, etc.
--- 
--- It is a programmer error to attempt to set the name of a non-existent
--- source.
--- 
--- More specifically: source IDs can be reissued after a source has been
--- destroyed and therefore it is never valid to use this function with a
--- source ID which may have already been removed.  An example is when
--- scheduling an idle to run in another thread with `g_idle_add()`: the
--- idle may already have run and been removed by the time this function
--- is called on its (now invalid) source ID.  This source ID may have
--- been reissued, leading to the operation being performed against the
--- wrong source.
---
--- ---
---
---@param tag integer # a `GSource` ID
---@param name string # debug name for the source
---@return nil
function GLib.Source.set_name_by_id(tag, name) end

--- # function GLib.Source.new()
---
--- Creates a new `GSource` structure. The size is specified to
--- allow creating structures derived from `GSource` that contain
--- additional data. The size passed in must be at least
--- `sizeof (GSource)`.
--- 
--- The source will not initially be associated with any `GMainContext`
--- and must be added to one with `g_source_attach()` before it will be
--- executed.
---
--- ---
---
---@param source_funcs GLib.SourceFuncs # structure containing functions that implement the sources behavior.
---@param struct_size integer # size of the `GSource` structure to create.
---@return GLib.Source # the newly-created `GSource`.
function GLib.Source.new(source_funcs, struct_size) end

--- # record GLib.SourceCallbackFuncs
---
--- The `GSourceCallbackFuncs` struct contains
--- functions for managing callback objects.
---
--- ---
---
---@class GLib.SourceCallbackFuncs
---@field ref fun(cb_data: userdata): nil
---@field unref fun(cb_data: userdata): nil
GLib.SourceCallbackFuncs = {}

---@alias GLib.SourceDisposeFunc fun(source: GLib.Source): nil

---@alias GLib.SourceDummyMarshal fun(): nil

---@alias GLib.SourceFunc fun(user_data: userdata): (boolean|nil)

--- # record GLib.SourceFuncs
---
--- The `GSourceFuncs` struct contains a table of
--- functions used to handle event sources in a generic manner.
--- 
--- For idle sources, the prepare and check functions always return `true`
--- to indicate that the source is always ready to be processed. The prepare
--- function also returns a timeout value of 0 to ensure that the `poll()` call
--- doesn't block (since that would be time wasted which could have been spent
--- running the idle function).
--- 
--- For timeout sources, the prepare and check functions both return `true`
--- if the timeout interval has expired. The prepare function also returns
--- a timeout value to ensure that the `poll()` call doesn't block too long
--- and miss the next timeout.
--- 
--- For file descriptor sources, the prepare function typically returns `false`,
--- since it must wait until `poll()` has been called before it knows whether
--- any events need to be processed. It sets the returned timeout to -1 to
--- indicate that it doesn't mind how long the `poll()` call blocks. In the
--- check function, it tests the results of the `poll()` call to see if the
--- required condition has been met, and returns `true` if so.
---
--- ---
---
---@class GLib.SourceFuncs
---@field prepare fun(source: GLib.Source, timeout_: integer): (boolean|nil)
---@field check fun(source: GLib.Source): (boolean|nil)
---@field finalize fun(source: GLib.Source): nil
---@field closure_callback GLib.SourceFunc
---@field closure_marshal GLib.SourceDummyMarshal
GLib.SourceFuncs = {}

---@alias GLib.SourceOnceFunc fun(user_data: userdata): nil

--- # record GLib.SourcePrivate
---
---@class GLib.SourcePrivate
GLib.SourcePrivate = {}

---@alias GLib.SpawnChildSetupFunc fun(data: userdata): nil

---@enum GLib.SpawnError
GLib.SpawnError = {}

---@enum GLib.SpawnFlags
GLib.SpawnFlags = {}

--- # record GLib.StatBuf
---
--- A type corresponding to the appropriate struct type for the `stat()`
--- system call, depending on the platform and/or compiler being used.
--- 
--- See `g_stat()` for more information.
---
--- ---
---
---@class GLib.StatBuf
GLib.StatBuf = {}

--- # record GLib.String
---
--- The GString struct contains the public fields of a GString.
---
--- ---
---
---@class GLib.String
---@field str string # points to the character data. It may move as text is added. The `str` field is null-terminated and so can be used as an ordinary C string.
---@field len integer # contains the length of the string, not including the terminating nul byte.
---@field allocated_len integer # the number of bytes that can be stored in the string before it needs to be reallocated. May be larger than `len`.
---@operator call: GLib.String
GLib.String = {}

--- # method GLib.String:append()
---
--- Adds a string onto the end of a `GString`, expanding
--- it if necessary.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param val string # the string to append onto the end of `string`
---@return GLib.String # `string`
function GLib.String:append(val) end

--- # method GLib.String:append_c()
---
--- Adds a byte onto the end of a `GString`, expanding
--- it if necessary.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param c integer # the byte to append onto the end of `string`
---@return GLib.String # `string`
function GLib.String:append_c(c) end

--- # method GLib.String:append_len()
---
--- Appends `len` bytes of `val` to `string`.
--- 
--- If `len` is positive, `val` may contain embedded nuls and need
--- not be nul-terminated. It is the caller's responsibility to
--- ensure that `val` has at least `len` addressable bytes.
--- 
--- If `len` is negative, `val` must be nul-terminated and `len`
--- is considered to request the entire string length. This
--- makes `g_string_append_len()` equivalent to `g_string_append()`.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param val string # bytes to append
---@param len integer # number of bytes of `val` to use, or -1 for all of `val`
---@return GLib.String # `string`
function GLib.String:append_len(val, len) end

--- # method GLib.String:append_unichar()
---
--- Converts a Unicode character into UTF-8, and appends it
--- to the string.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param wc integer # a Unicode character
---@return GLib.String # `string`
function GLib.String:append_unichar(wc) end

--- # method GLib.String:append_uri_escaped()
---
--- Appends `unescaped` to `string`, escaping any characters that
--- are reserved in URIs using URI-style escape sequences.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param unescaped string # a string
---@param reserved_chars_allowed string # a string of reserved characters allowed to be used, or `nil`
---@param allow_utf8 (boolean|nil) # set `true` if the escaped string may include UTF8 characters
---@return GLib.String # `string`
function GLib.String:append_uri_escaped(unescaped, reserved_chars_allowed, allow_utf8) end

--- # method GLib.String:ascii_down()
---
--- Converts all uppercase ASCII letters to lowercase ASCII letters.
---
--- ---
---
---@param self GLib.String # a GString
---@return GLib.String # passed-in `string` pointer, with all the uppercase characters converted to lowercase in place, with semantics that exactly match `g_ascii_tolower()`.
function GLib.String:ascii_down() end

--- # method GLib.String:ascii_up()
---
--- Converts all lowercase ASCII letters to uppercase ASCII letters.
---
--- ---
---
---@param self GLib.String # a GString
---@return GLib.String # passed-in `string` pointer, with all the lowercase characters converted to uppercase in place, with semantics that exactly match `g_ascii_toupper()`.
function GLib.String:ascii_up() end

--- # method GLib.String:assign()
---
--- Copies the bytes from a string into a `GString`,
--- destroying any previous contents. It is rather like
--- the standard `strcpy()` function, except that you do not
--- have to worry about having enough space to copy the string.
---
--- ---
---
---@param self GLib.String # the destination `GString`. Its current contents are destroyed.
---@param rval string # the string to copy into `string`
---@return GLib.String # `string`
function GLib.String:assign(rval) end

--- # method GLib.String:down()
---
--- Converts a `GString` to lowercase.
---
--- ---
---
---@param self GLib.String # a `GString`
---@return GLib.String # the `GString`
function GLib.String:down() end

--- # method GLib.String:equal()
---
--- Compares two strings for equality, returning `true` if they are equal.
--- For use with `GHashTable`.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param v2 GLib.String # another `GString`
---@return (boolean|nil) # `true` if the strings are the same length and contain the same bytes
function GLib.String:equal(v2) end

--- # method GLib.String:erase()
---
--- Removes `len` bytes from a `GString`, starting at position `pos`.
--- The rest of the `GString` is shifted down to fill the gap.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param pos integer # the position of the content to remove
---@param len integer # the number of bytes to remove, or -1 to remove all following bytes
---@return GLib.String # `string`
function GLib.String:erase(pos, len) end

--- # method GLib.String:free()
---
--- Frees the memory allocated for the `GString`.
--- If `free_segment` is `true` it also frees the character data.  If
--- it's `false`, the caller gains ownership of the buffer and must
--- free it after use with `g_free()`.
--- 
--- Instead of passing `false` to this function, consider using
--- `g_string_free_and_steal()`.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param free_segment (boolean|nil) # if `true`, the actual character data is freed as well
---@return string # the character data of `string` (i.e. `nil` if `free_segment` is `true`)
function GLib.String:free(free_segment) end

--- # method GLib.String:free_and_steal()
---
--- Frees the memory allocated for the `GString`.
--- 
--- The caller gains ownership of the buffer and
--- must free it after use with `g_free()`.
---
--- ---
---
---@param self GLib.String # a `GString`
---@return string # the character data of `string`
function GLib.String:free_and_steal() end

--- # method GLib.String:free_to_bytes()
---
--- Transfers ownership of the contents of `string` to a newly allocated
--- `GBytes`.  The `GString` structure itself is deallocated, and it is
--- therefore invalid to use `string` after invoking this function.
--- 
--- Note that while `GString` ensures that its buffer always has a
--- trailing nul character (not reflected in its "len"), the returned
--- `GBytes` does not include this extra nul; i.e. it has length exactly
--- equal to the "len" member.
---
--- ---
---
---@param self GLib.String # a `GString`
---@return GLib.Bytes # A newly allocated `GBytes` containing contents of `string`; `string` itself is freed
function GLib.String:free_to_bytes() end

--- # method GLib.String:hash()
---
--- Creates a hash code for `str`; for use with `GHashTable`.
---
--- ---
---
---@param self GLib.String # a string to hash
---@return integer # hash code for `str`
function GLib.String:hash() end

--- # method GLib.String:insert()
---
--- Inserts a copy of a string into a `GString`,
--- expanding it if necessary.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param pos integer # the position to insert the copy of the string
---@param val string # the string to insert
---@return GLib.String # `string`
function GLib.String:insert(pos, val) end

--- # method GLib.String:insert_c()
---
--- Inserts a byte into a `GString`, expanding it if necessary.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param pos integer # the position to insert the byte
---@param c integer # the byte to insert
---@return GLib.String # `string`
function GLib.String:insert_c(pos, c) end

--- # method GLib.String:insert_len()
---
--- Inserts `len` bytes of `val` into `string` at `pos`.
--- 
--- If `len` is positive, `val` may contain embedded nuls and need
--- not be nul-terminated. It is the caller's responsibility to
--- ensure that `val` has at least `len` addressable bytes.
--- 
--- If `len` is negative, `val` must be nul-terminated and `len`
--- is considered to request the entire string length.
--- 
--- If `pos` is -1, bytes are inserted at the end of the string.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param pos integer # position in `string` where insertion should happen, or -1 for at the end
---@param val string # bytes to insert
---@param len integer # number of bytes of `val` to insert, or -1 for all of `val`
---@return GLib.String # `string`
function GLib.String:insert_len(pos, val, len) end

--- # method GLib.String:insert_unichar()
---
--- Converts a Unicode character into UTF-8, and insert it
--- into the string at the given position.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param pos integer # the position at which to insert character, or -1 to append at the end of the string
---@param wc integer # a Unicode character
---@return GLib.String # `string`
function GLib.String:insert_unichar(pos, wc) end

--- # method GLib.String:overwrite()
---
--- Overwrites part of a string, lengthening it if necessary.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param pos integer # the position at which to start overwriting
---@param val string # the string that will overwrite the `string` starting at `pos`
---@return GLib.String # `string`
function GLib.String:overwrite(pos, val) end

--- # method GLib.String:overwrite_len()
---
--- Overwrites part of a string, lengthening it if necessary.
--- This function will work with embedded nuls.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param pos integer # the position at which to start overwriting
---@param val string # the string that will overwrite the `string` starting at `pos`
---@param len integer # the number of bytes to write from `val`
---@return GLib.String # `string`
function GLib.String:overwrite_len(pos, val, len) end

--- # method GLib.String:prepend()
---
--- Adds a string on to the start of a `GString`,
--- expanding it if necessary.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param val string # the string to prepend on the start of `string`
---@return GLib.String # `string`
function GLib.String:prepend(val) end

--- # method GLib.String:prepend_c()
---
--- Adds a byte onto the start of a `GString`,
--- expanding it if necessary.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param c integer # the byte to prepend on the start of the `GString`
---@return GLib.String # `string`
function GLib.String:prepend_c(c) end

--- # method GLib.String:prepend_len()
---
--- Prepends `len` bytes of `val` to `string`.
--- 
--- If `len` is positive, `val` may contain embedded nuls and need
--- not be nul-terminated. It is the caller's responsibility to
--- ensure that `val` has at least `len` addressable bytes.
--- 
--- If `len` is negative, `val` must be nul-terminated and `len`
--- is considered to request the entire string length. This
--- makes `g_string_prepend_len()` equivalent to `g_string_prepend()`.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param val string # bytes to prepend
---@param len integer # number of bytes in `val` to prepend, or -1 for all of `val`
---@return GLib.String # `string`
function GLib.String:prepend_len(val, len) end

--- # method GLib.String:prepend_unichar()
---
--- Converts a Unicode character into UTF-8, and prepends it
--- to the string.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param wc integer # a Unicode character
---@return GLib.String # `string`
function GLib.String:prepend_unichar(wc) end

--- # method GLib.String:replace()
---
--- Replaces the string `find` with the string `replace` in a `GString` up to
--- `limit` times. If the number of instances of `find` in the `GString` is
--- less than `limit`, all instances are replaced. If `limit` is `0`,
--- all instances of `find` are replaced.
--- 
--- If `find` is the empty string, since versions 2.69.1 and 2.68.4 the
--- replacement will be inserted no more than once per possible position
--- (beginning of string, end of string and between characters). This did
--- not work correctly in earlier versions.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param find string # the string to find in `string`
---@param replace string # the string to insert in place of `find`
---@param limit integer # the maximum instances of `find` to replace with `replace`, or `0` for no limit
---@return integer # the number of find and replace operations performed.
function GLib.String:replace(find, replace, limit) end

--- # method GLib.String:set_size()
---
--- Sets the length of a `GString`. If the length is less than
--- the current length, the string will be truncated. If the
--- length is greater than the current length, the contents
--- of the newly added area are undefined. (However, as
--- always, string->str[string->len] will be a nul byte.)
---
--- ---
---
---@param self GLib.String # a `GString`
---@param len integer # the new length
---@return GLib.String # `string`
function GLib.String:set_size(len) end

--- # method GLib.String:truncate()
---
--- Cuts off the end of the GString, leaving the first `len` bytes.
---
--- ---
---
---@param self GLib.String # a `GString`
---@param len integer # the new size of `string`
---@return GLib.String # `string`
function GLib.String:truncate(len) end

--- # method GLib.String:up()
---
--- Converts a `GString` to uppercase.
---
--- ---
---
---@param self GLib.String # a `GString`
---@return GLib.String # `string`
function GLib.String:up() end

--- # function GLib.String.new()
---
--- Creates a new `GString`, initialized with the given string.
---
--- ---
---
---@param init? string # the initial text to copy into the string, or `nil` to start with an empty string
---@return GLib.String # the new `GString`
function GLib.String.new(init) end

--- # function GLib.String.new_len()
---
--- Creates a new `GString` with `len` bytes of the `init` buffer.
--- Because a length is provided, `init` need not be nul-terminated,
--- and can contain embedded nul bytes.
--- 
--- Since this function does not stop at nul bytes, it is the caller's
--- responsibility to ensure that `init` has at least `len` addressable
--- bytes.
---
--- ---
---
---@param init string # initial contents of the string
---@param len integer # length of `init` to use
---@return GLib.String # a new `GString`
function GLib.String.new_len(init, len) end

--- # function GLib.String.sized_new()
---
--- Creates a new `GString`, with enough space for `dfl_size`
--- bytes. This is useful if you are going to add a lot of
--- text to the string and don't want it to be reallocated
--- too often.
---
--- ---
---
---@param dfl_size integer # the default size of the space allocated to hold the string
---@return GLib.String # the new `GString`
function GLib.String.sized_new(dfl_size) end

--- # record GLib.StringChunk
---
--- An opaque data structure representing String Chunks.
--- It should only be accessed by using the following functions.
---
--- ---
---
---@class GLib.StringChunk
GLib.StringChunk = {}

--- # method GLib.StringChunk:clear()
---
--- Frees all strings contained within the `GStringChunk`.
--- After calling `g_string_chunk_clear()` it is not safe to
--- access any of the strings which were contained within it.
---
--- ---
---
---@param self GLib.StringChunk # a `GStringChunk`
---@return nil
function GLib.StringChunk:clear() end

--- # method GLib.StringChunk:free()
---
--- Frees all memory allocated by the `GStringChunk`.
--- After calling `g_string_chunk_free()` it is not safe to
--- access any of the strings which were contained within it.
---
--- ---
---
---@param self GLib.StringChunk # a `GStringChunk`
---@return nil
function GLib.StringChunk:free() end

--- # method GLib.StringChunk:insert()
---
--- Adds a copy of `string` to the `GStringChunk`.
--- It returns a pointer to the new copy of the string
--- in the `GStringChunk`. The characters in the string
--- can be changed, if necessary, though you should not
--- change anything after the end of the string.
--- 
--- Unlike `g_string_chunk_insert_const()`, this function
--- does not check for duplicates. Also strings added
--- with `g_string_chunk_insert()` will not be searched
--- by `g_string_chunk_insert_const()` when looking for
--- duplicates.
---
--- ---
---
---@param self GLib.StringChunk # a `GStringChunk`
---@param string string # the string to add
---@return string # a pointer to the copy of `string` within the `GStringChunk`
function GLib.StringChunk:insert(string) end

--- # method GLib.StringChunk:insert_const()
---
--- Adds a copy of `string` to the `GStringChunk`, unless the same
--- string has already been added to the `GStringChunk` with
--- `g_string_chunk_insert_const()`.
--- 
--- This function is useful if you need to copy a large number
--- of strings but do not want to waste space storing duplicates.
--- But you must remember that there may be several pointers to
--- the same string, and so any changes made to the strings
--- should be done very carefully.
--- 
--- Note that `g_string_chunk_insert_const()` will not return a
--- pointer to a string added with `g_string_chunk_insert()`, even
--- if they do match.
---
--- ---
---
---@param self GLib.StringChunk # a `GStringChunk`
---@param string string # the string to add
---@return string # a pointer to the new or existing copy of `string` within the `GStringChunk`
function GLib.StringChunk:insert_const(string) end

--- # method GLib.StringChunk:insert_len()
---
--- Adds a copy of the first `len` bytes of `string` to the `GStringChunk`.
--- The copy is nul-terminated.
--- 
--- Since this function does not stop at nul bytes, it is the caller's
--- responsibility to ensure that `string` has at least `len` addressable
--- bytes.
--- 
--- The characters in the returned string can be changed, if necessary,
--- though you should not change anything after the end of the string.
---
--- ---
---
---@param self GLib.StringChunk # a `GStringChunk`
---@param string string # bytes to insert
---@param len integer # number of bytes of `string` to insert, or -1 to insert a nul-terminated string
---@return string # a pointer to the copy of `string` within the `GStringChunk`
function GLib.StringChunk:insert_len(string, len) end

--- # record GLib.StrvBuilder
---
--- `GStrvBuilder` is a method of easily building dynamically sized
--- NULL-terminated string arrays.
--- 
--- The following example shows how to build a two element array:
--- 
--- ```c
---   g_autoptr(GStrvBuilder) builder = g_strv_builder_new ();
---   g_strv_builder_add (builder, "hello");
---   g_strv_builder_add (builder, "world");
---   g_auto(GStrv) array = g_strv_builder_end (builder);
--- ```
---
--- ---
---
---@class GLib.StrvBuilder
GLib.StrvBuilder = {}

--- # method GLib.StrvBuilder:add()
---
--- Add a string to the end of the array.
--- 
--- Since 2.68
---
--- ---
---
---@param self GLib.StrvBuilder # a `GStrvBuilder`
---@param value string # a string.
---@return nil
function GLib.StrvBuilder:add(value) end

--- # method GLib.StrvBuilder:addv()
---
--- Appends all the strings in the given vector to the builder.
--- 
--- Since 2.70
---
--- ---
---
---@param self GLib.StrvBuilder # a `GStrvBuilder`
---@param value unknown[] # the vector of strings to add
---@return nil
function GLib.StrvBuilder:addv(value) end

--- # method GLib.StrvBuilder:end__()
---
--- Ends the builder process and returns the constructed NULL-terminated string
--- array. The returned value should be freed with `g_strfreev()` when no longer
--- needed.
---
--- ---
---
---@param self GLib.StrvBuilder # a `GStrvBuilder`
---@return unknown[] # the constructed string array. Since 2.68
function GLib.StrvBuilder:end__() end

--- # method GLib.StrvBuilder:unref()
---
--- Decreases the reference count on `builder`.
--- 
--- In the event that there are no more references, releases all memory
--- associated with the `GStrvBuilder`.
---
--- ---
---
---@param self GLib.StrvBuilder # a `GStrvBuilder` allocated by `g_strv_builder_new()`
---@return nil
function GLib.StrvBuilder:unref() end

--- # record GLib.TestCase
---
--- An opaque structure representing a test case.
---
--- ---
---
---@class GLib.TestCase
GLib.TestCase = {}

--- # method GLib.TestCase:free()
---
--- Free the `test_case`.
---
--- ---
---
---@param self GLib.TestCase # a `GTestCase`
---@return nil
function GLib.TestCase:free() end

--- # record GLib.TestConfig
---
---@class GLib.TestConfig
---@field test_initialized (boolean|nil)
---@field test_quick (boolean|nil)
---@field test_perf (boolean|nil)
---@field test_verbose (boolean|nil)
---@field test_quiet (boolean|nil)
---@field test_undefined (boolean|nil)
GLib.TestConfig = {}

---@alias GLib.TestDataFunc fun(user_data: userdata): nil

---@enum GLib.TestFileType
GLib.TestFileType = {}

---@alias GLib.TestFixtureFunc fun(fixture: userdata, user_data: userdata): nil

---@alias GLib.TestFunc fun(): nil

--- # record GLib.TestLogBuffer
---
---@class GLib.TestLogBuffer
---@field data GLib.String
---@field msgs userdata[]
GLib.TestLogBuffer = {}

--- # method GLib.TestLogBuffer:free()
---
--- Internal function for gtester to free test log messages, no ABI guarantees provided.
---
--- ---
---
---@param self GLib.TestLogBuffer
---@return nil
function GLib.TestLogBuffer:free() end

--- # method GLib.TestLogBuffer:push()
---
--- Internal function for gtester to decode test log messages, no ABI guarantees provided.
---
--- ---
---
---@param self GLib.TestLogBuffer
---@param n_bytes integer
---@param bytes integer
---@return nil
function GLib.TestLogBuffer:push(n_bytes, bytes) end

---@alias GLib.TestLogFatalFunc fun(log_domain: string, log_level: GLib.LogLevelFlags, message: string, user_data: userdata): (boolean|nil)

--- # record GLib.TestLogMsg
---
---@class GLib.TestLogMsg
---@field log_type GLib.TestLogType
---@field n_strings integer
---@field strings string
---@field n_nums integer
GLib.TestLogMsg = {}

--- # method GLib.TestLogMsg:free()
---
--- Internal function for gtester to free test log messages, no ABI guarantees provided.
---
--- ---
---
---@param self GLib.TestLogMsg
---@return nil
function GLib.TestLogMsg:free() end

---@enum GLib.TestLogType
GLib.TestLogType = {}

---@enum GLib.TestResult
GLib.TestResult = {}

---@enum GLib.TestSubprocessFlags
GLib.TestSubprocessFlags = {}

--- # record GLib.TestSuite
---
--- An opaque structure representing a test suite.
---
--- ---
---
---@class GLib.TestSuite
GLib.TestSuite = {}

--- # method GLib.TestSuite:add()
---
--- Adds `test_case` to `suite`.
---
--- ---
---
---@param self GLib.TestSuite # a `GTestSuite`
---@param test_case GLib.TestCase # a `GTestCase`
---@return nil
function GLib.TestSuite:add(test_case) end

--- # method GLib.TestSuite:add_suite()
---
--- Adds `nestedsuite` to `suite`.
---
--- ---
---
---@param self GLib.TestSuite # a `GTestSuite`
---@param nestedsuite GLib.TestSuite # another `GTestSuite`
---@return nil
function GLib.TestSuite:add_suite(nestedsuite) end

--- # method GLib.TestSuite:free()
---
--- Free the `suite` and all nested `GTestSuites`.
---
--- ---
---
---@param self GLib.TestSuite # a `GTestSuite`
---@return nil
function GLib.TestSuite:free() end

---@enum GLib.TestTrapFlags
GLib.TestTrapFlags = {}

--- # record GLib.Thread
---
--- The `GThread` struct represents a running thread. This struct
--- is returned by `g_thread_new()` or `g_thread_try_new()`. You can
--- obtain the `GThread` struct representing the current thread by
--- calling `g_thread_self()`.
--- 
--- GThread is refcounted, see `g_thread_ref()` and `g_thread_unref()`.
--- The thread represented by it holds a reference while it is running,
--- and `g_thread_join()` consumes the reference that it is given, so
--- it is normally not necessary to manage GThread references
--- explicitly.
--- 
--- The structure is opaque -- none of its fields may be directly
--- accessed.
---
--- ---
---
---@class GLib.Thread
---@operator call: GLib.Thread
GLib.Thread = {}

--- # method GLib.Thread:join()
---
--- Waits until `thread` finishes, i.e. the function `func`, as
--- given to `g_thread_new()`, returns or `g_thread_exit()` is called.
--- If `thread` has already terminated, then `g_thread_join()`
--- returns immediately.
--- 
--- Any thread can wait for any other thread by calling `g_thread_join()`,
--- not just its 'creator'. Calling `g_thread_join()` from multiple threads
--- for the same `thread` leads to undefined behaviour.
--- 
--- The value returned by `func` or given to `g_thread_exit()` is
--- returned by this function.
--- 
--- `g_thread_join()` consumes the reference to the passed-in `thread`.
--- This will usually cause the `GThread` struct and associated resources
--- to be freed. Use `g_thread_ref()` to obtain an extra reference if you
--- want to keep the GThread alive beyond the `g_thread_join()` call.
---
--- ---
---
---@param self GLib.Thread # a `GThread`
---@return userdata # the return value of the thread
function GLib.Thread:join() end

--- # method GLib.Thread:ref()
---
--- Increase the reference count on `thread`.
---
--- ---
---
---@param self GLib.Thread # a `GThread`
---@return GLib.Thread # a new reference to `thread`
function GLib.Thread:ref() end

--- # method GLib.Thread:unref()
---
--- Decrease the reference count on `thread`, possibly freeing all
--- resources associated with it.
--- 
--- Note that each thread holds a reference to its `GThread` while
--- it is running, so it is safe to drop your own reference to it
--- if you don't need it anymore.
---
--- ---
---
---@param self GLib.Thread # a `GThread`
---@return nil
function GLib.Thread:unref() end

--- # function GLib.Thread.error_quark()
---
---@return GLib.Quark
function GLib.Thread.error_quark() end

--- # function GLib.Thread.exit()
---
--- Terminates the current thread.
--- 
--- If another thread is waiting for us using `g_thread_join()` then the
--- waiting thread will be woken up and get `retval` as the return value
--- of `g_thread_join()`.
--- 
--- Calling `g_thread_exit()` with a parameter `retval` is equivalent to
--- returning `retval` from the function `func`, as given to `g_thread_new()`.
--- 
--- You must only call `g_thread_exit()` from a thread that you created
--- yourself with `g_thread_new()` or related APIs. You must not call
--- this function from a thread created with another threading library
--- or or from within a `GThreadPool`.
---
--- ---
---
---@param retval? userdata # the return value of this thread
---@return nil
function GLib.Thread.exit(retval) end

--- # function GLib.Thread.self()
---
--- This function returns the `GThread` corresponding to the
--- current thread. Note that this function does not increase
--- the reference count of the returned struct.
--- 
--- This function will return a `GThread` even for threads that
--- were not created by GLib (i.e. those created by other threading
--- APIs). This may be useful for thread identification purposes
--- (i.e. comparisons) but you must not use GLib functions (such
--- as `g_thread_join()`) on these threads.
---
--- ---
---
---@return GLib.Thread # the `GThread` representing the current thread
function GLib.Thread.self() end

--- # function GLib.Thread.yield()
---
--- Causes the calling thread to voluntarily relinquish the CPU, so
--- that other threads can run.
--- 
--- This function is often used as a method to make busy wait less evil.
---
--- ---
---
---@return nil
function GLib.Thread.yield() end

--- # function GLib.Thread.new()
---
--- This function creates a new thread. The new thread starts by invoking
--- `func` with the argument data. The thread will run until `func` returns
--- or until `g_thread_exit()` is called from the new thread. The return value
--- of `func` becomes the return value of the thread, which can be obtained
--- with `g_thread_join()`.
--- 
--- The `name` can be useful for discriminating threads in a debugger.
--- It is not used for other purposes and does not have to be unique.
--- Some systems restrict the length of `name` to 16 bytes.
--- 
--- If the thread can not be created the program aborts. See
--- `g_thread_try_new()` if you want to attempt to deal with failures.
--- 
--- If you are using threads to offload (potentially many) short-lived tasks,
--- `GThreadPool` may be more appropriate than manually spawning and tracking
--- multiple `GThreads`.
--- 
--- To free the struct returned by this function, use `g_thread_unref()`.
--- Note that `g_thread_join()` implicitly unrefs the `GThread` as well.
--- 
--- New threads by default inherit their scheduler policy (POSIX) or thread
--- priority (Windows) of the thread creating the new thread.
--- 
--- This behaviour changed in GLib 2.64: before threads on Windows were not
--- inheriting the thread priority but were spawned with the default priority.
--- Starting with GLib 2.64 the behaviour is now consistent between Windows and
--- POSIX and all threads inherit their parent thread's priority.
---
--- ---
---
---@param name? string # an (optional) name for the new thread
---@param func GLib.ThreadFunc # a function to execute in the new thread
---@param data? userdata # an argument to supply to the new thread
---@return GLib.Thread # the new `GThread`
function GLib.Thread.new(name, func, data) end

--- # function GLib.Thread.try_new()
---
--- This function is the same as `g_thread_new()` except that
--- it allows for the possibility of failure.
--- 
--- If a thread can not be created (due to resource limits),
--- `error` is set and `nil` is returned.
---
--- ---
---
---@param name? string # an (optional) name for the new thread
---@param func GLib.ThreadFunc # a function to execute in the new thread
---@param data? userdata # an argument to supply to the new thread
---@return GLib.Thread # the new `GThread`, or `nil` if an error occurred
function GLib.Thread.try_new(name, func, data) end

---@enum GLib.ThreadError
GLib.ThreadError = {}

---@alias GLib.ThreadFunc fun(data: userdata): userdata

--- # record GLib.ThreadPool
---
--- The `GThreadPool` struct represents a thread pool. It has three
--- public read-only members, but the underlying struct is bigger,
--- so you must not copy this struct.
---
--- ---
---
---@class GLib.ThreadPool
---@field func GLib.Func # the function to execute in the threads of this pool
---@field user_data userdata # the user data for the threads of this pool
---@field exclusive (boolean|nil) # are all threads exclusive to this pool
GLib.ThreadPool = {}

--- # method GLib.ThreadPool:free()
---
--- Frees all resources allocated for `pool`.
--- 
--- If `immediate` is `true`, no new task is processed for `pool`.
--- Otherwise `pool` is not freed before the last task is processed.
--- Note however, that no thread of this pool is interrupted while
--- processing a task. Instead at least all still running threads
--- can finish their tasks before the `pool` is freed.
--- 
--- If `wait_` is `true`, this function does not return before all
--- tasks to be processed (dependent on `immediate`, whether all
--- or only the currently running) are ready.
--- Otherwise this function returns immediately.
--- 
--- After calling this function `pool` must not be used anymore.
---
--- ---
---
---@param self GLib.ThreadPool # a `GThreadPool`
---@param immediate (boolean|nil) # should `pool` shut down immediately?
---@param wait_ (boolean|nil) # should the function wait for all tasks to be finished?
---@return nil
function GLib.ThreadPool:free(immediate, wait_) end

--- # method GLib.ThreadPool:get_max_threads()
---
--- Returns the maximal number of threads for `pool`.
---
--- ---
---
---@param self GLib.ThreadPool # a `GThreadPool`
---@return integer # the maximal number of threads
function GLib.ThreadPool:get_max_threads() end

--- # method GLib.ThreadPool:get_num_threads()
---
--- Returns the number of threads currently running in `pool`.
---
--- ---
---
---@param self GLib.ThreadPool # a `GThreadPool`
---@return integer # the number of threads currently running
function GLib.ThreadPool:get_num_threads() end

--- # method GLib.ThreadPool:move_to_front()
---
--- Moves the item to the front of the queue of unprocessed
--- items, so that it will be processed next.
---
--- ---
---
---@param self GLib.ThreadPool # a `GThreadPool`
---@param data? userdata # an unprocessed item in the pool
---@return (boolean|nil) # `true` if the item was found and moved
function GLib.ThreadPool:move_to_front(data) end

--- # method GLib.ThreadPool:push()
---
--- Inserts `data` into the list of tasks to be executed by `pool`.
--- 
--- When the number of currently running threads is lower than the
--- maximal allowed number of threads, a new thread is started (or
--- reused) with the properties given to `g_thread_pool_new()`.
--- Otherwise, `data` stays in the queue until a thread in this pool
--- finishes its previous task and processes `data`.
--- 
--- `error` can be `nil` to ignore errors, or non-`nil` to report
--- errors. An error can only occur when a new thread couldn't be
--- created. In that case `data` is simply appended to the queue of
--- work to do.
--- 
--- Before version 2.32, this function did not return a success status.
---
--- ---
---
---@param self GLib.ThreadPool # a `GThreadPool`
---@param data? userdata # a new task for `pool`
---@return (boolean|nil) # `true` on success, `false` if an error occurred
function GLib.ThreadPool:push(data) end

--- # method GLib.ThreadPool:set_max_threads()
---
--- Sets the maximal allowed number of threads for `pool`.
--- A value of -1 means that the maximal number of threads
--- is unlimited. If `pool` is an exclusive thread pool, setting
--- the maximal number of threads to -1 is not allowed.
--- 
--- Setting `max_threads` to 0 means stopping all work for `pool`.
--- It is effectively frozen until `max_threads` is set to a non-zero
--- value again.
--- 
--- A thread is never terminated while calling `func`, as supplied by
--- `g_thread_pool_new()`. Instead the maximal number of threads only
--- has effect for the allocation of new threads in `g_thread_pool_push()`.
--- A new thread is allocated, whenever the number of currently
--- running threads in `pool` is smaller than the maximal number.
--- 
--- `error` can be `nil` to ignore errors, or non-`nil` to report
--- errors. An error can only occur when a new thread couldn't be
--- created.
--- 
--- Before version 2.32, this function did not return a success status.
---
--- ---
---
---@param self GLib.ThreadPool # a `GThreadPool`
---@param max_threads integer # a new maximal number of threads for `pool`, or -1 for unlimited
---@return (boolean|nil) # `true` on success, `false` if an error occurred
function GLib.ThreadPool:set_max_threads(max_threads) end

--- # method GLib.ThreadPool:unprocessed()
---
--- Returns the number of tasks still unprocessed in `pool`.
---
--- ---
---
---@param self GLib.ThreadPool # a `GThreadPool`
---@return integer # the number of unprocessed tasks
function GLib.ThreadPool:unprocessed() end

--- # function GLib.ThreadPool.get_max_idle_time()
---
--- This function will return the maximum `interval` that a
--- thread will wait in the thread pool for new tasks before
--- being stopped.
--- 
--- If this function returns 0, threads waiting in the thread
--- pool for new work are not stopped.
---
--- ---
---
---@return integer # the maximum `interval` (milliseconds) to wait for new tasks in the thread pool before stopping the thread
function GLib.ThreadPool.get_max_idle_time() end

--- # function GLib.ThreadPool.get_max_unused_threads()
---
--- Returns the maximal allowed number of unused threads.
---
--- ---
---
---@return integer # the maximal number of unused threads
function GLib.ThreadPool.get_max_unused_threads() end

--- # function GLib.ThreadPool.get_num_unused_threads()
---
--- Returns the number of currently unused threads.
---
--- ---
---
---@return integer # the number of currently unused threads
function GLib.ThreadPool.get_num_unused_threads() end

--- # function GLib.ThreadPool.set_max_idle_time()
---
--- This function will set the maximum `interval` that a thread
--- waiting in the pool for new tasks can be idle for before
--- being stopped. This function is similar to calling
--- `g_thread_pool_stop_unused_threads()` on a regular timeout,
--- except this is done on a per thread basis.
--- 
--- By setting `interval` to 0, idle threads will not be stopped.
--- 
--- The default value is 15000 (15 seconds).
---
--- ---
---
---@param interval integer # the maximum `interval` (in milliseconds) a thread can be idle
---@return nil
function GLib.ThreadPool.set_max_idle_time(interval) end

--- # function GLib.ThreadPool.set_max_unused_threads()
---
--- Sets the maximal number of unused threads to `max_threads`.
--- If `max_threads` is -1, no limit is imposed on the number
--- of unused threads.
--- 
--- The default value is 2.
---
--- ---
---
---@param max_threads integer # maximal number of unused threads
---@return nil
function GLib.ThreadPool.set_max_unused_threads(max_threads) end

--- # function GLib.ThreadPool.stop_unused_threads()
---
--- Stops all currently unused threads. This does not change the
--- maximal number of unused threads. This function can be used to
--- regularly stop all unused threads e.g. from `g_timeout_add()`.
---
--- ---
---
---@return nil
function GLib.ThreadPool.stop_unused_threads() end

---@enum GLib.TimeType
GLib.TimeType = {}

--- # record GLib.TimeVal
---
--- Represents a precise time, with seconds and microseconds.
--- 
--- Similar to the struct timeval returned by the ``gettimeofday()``
--- UNIX system call.
--- 
--- GLib is attempting to unify around the use of 64-bit integers to
--- represent microsecond-precision time. As such, this type will be
--- removed from a future version of GLib. A consequence of using `glong` for
--- `tv_sec` is that on 32-bit systems `GTimeVal` is subject to the year 2038
--- problem.
---
--- ---
---
---@class GLib.TimeVal
---@field tv_sec integer # seconds
---@field tv_usec integer # microseconds
GLib.TimeVal = {}

--- # method GLib.TimeVal:add()
---
--- Adds the given number of microseconds to `time_`. `microseconds` can
--- also be negative to decrease the value of `time_`.
---
--- ---
---
---@param self GLib.TimeVal # a `GTimeVal`
---@param microseconds integer # number of microseconds to add to `time`
---@return nil
function GLib.TimeVal:add(microseconds) end

--- # method GLib.TimeVal:to_iso8601()
---
--- Converts `time_` into an RFC 3339 encoded string, relative to the
--- Coordinated Universal Time (UTC). This is one of the many formats
--- allowed by ISO 8601.
--- 
--- ISO 8601 allows a large number of date/time formats, with or without
--- punctuation and optional elements. The format returned by this function
--- is a complete date and time, with optional punctuation included, the
--- UTC time zone represented as "Z", and the `tv_usec` part included if
--- and only if it is nonzero, i.e. either
--- "YYYY-MM-DDTHH:MM:SSZ" or "YYYY-MM-DDTHH:MM:SS.fffffZ".
--- 
--- This corresponds to the Internet date/time format defined by
--- [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt),
--- and to either of the two most-precise formats defined by
--- the W3C Note
--- [Date and Time Formats](http://www.w3.org/TR/NOTE-datetime-19980827).
--- Both of these documents are profiles of ISO 8601.
--- 
--- Use `g_date_time_format()` or `g_strdup_printf()` if a different
--- variation of ISO 8601 format is required.
--- 
--- If `time_` represents a date which is too large to fit into a `struct tm`,
--- `nil` will be returned. This is platform dependent. Note also that since
--- `GTimeVal` stores the number of seconds as a `glong`, on 32-bit systems it
--- is subject to the year 2038 problem. Accordingly, since GLib 2.62, this
--- function has been deprecated. Equivalent functionality is available using:
--- ```c
--- GDateTime *dt = g_date_time_new_from_unix_utc (time_val);
--- iso8601_string = g_date_time_format_iso8601 (dt);
--- g_date_time_unref (dt);
--- ```
--- 
--- The return value of g_time_val_to_iso8601() has been nullable since GLib
--- 2.54; before then, GLib would crash under the same conditions.
---
--- ---
---
---@param self GLib.TimeVal # a `GTimeVal`
---@return string # a newly allocated string containing an ISO 8601 date, or `nil` if `time_` was too large
function GLib.TimeVal:to_iso8601() end

--- # function GLib.TimeVal.from_iso8601()
---
--- Converts a string containing an ISO 8601 encoded date and time
--- to a `GTimeVal` and puts it into `time_`.
--- 
--- `iso_date` must include year, month, day, hours, minutes, and
--- seconds. It can optionally include fractions of a second and a time
--- zone indicator. (In the absence of any time zone indication, the
--- timestamp is assumed to be in local time.)
--- 
--- Any leading or trailing space in `iso_date` is ignored.
--- 
--- This function was deprecated, along with `GTimeVal` itself, in GLib 2.62.
--- Equivalent functionality is available using code like:
--- ```c
--- GDateTime *dt = g_date_time_new_from_iso8601 (iso8601_string, NULL);
--- gint64 time_val = g_date_time_to_unix (dt);
--- g_date_time_unref (dt);
--- ```
---
--- ---
---
---@param iso_date string # an ISO 8601 encoded date string
---@param time_ GLib.TimeVal # a `GTimeVal`
---@return (boolean|nil) # `true` if the conversion was successful.
function GLib.TimeVal.from_iso8601(iso_date, time_) end

--- # record GLib.TimeZone
---
--- `GTimeZone` is an opaque structure whose members cannot be accessed
--- directly.
---
--- ---
---
---@class GLib.TimeZone
---@operator call: GLib.TimeZone
GLib.TimeZone = {}

--- # method GLib.TimeZone:adjust_time()
---
--- Finds an interval within `tz` that corresponds to the given `time_`,
--- possibly adjusting `time_` if required to fit into an interval.
--- The meaning of `time_` depends on `type`.
--- 
--- This function is similar to `g_time_zone_find_interval()`, with the
--- difference that it always succeeds (by making the adjustments
--- described below).
--- 
--- In any of the cases where `g_time_zone_find_interval()` succeeds then
--- this function returns the same value, without modifying `time_`.
--- 
--- This function may, however, modify `time_` in order to deal with
--- non-existent times.  If the non-existent local `time_` of 02:30 were
--- requested on March 14th 2010 in Toronto then this function would
--- adjust `time_` to be 03:00 and return the interval containing the
--- adjusted time.
---
--- ---
---
---@param self GLib.TimeZone # a `GTimeZone`
---@param type GLib.TimeType # the `GTimeType` of `time_`
---@param time_ integer # a pointer to a number of seconds since January 1, 1970
---@return integer # the interval containing `time_`, never -1
function GLib.TimeZone:adjust_time(type, time_) end

--- # method GLib.TimeZone:find_interval()
---
--- Finds an interval within `tz` that corresponds to the given `time_`.
--- The meaning of `time_` depends on `type`.
--- 
--- If `type` is %G_TIME_TYPE_UNIVERSAL then this function will always
--- succeed (since universal time is monotonic and continuous).
--- 
--- Otherwise `time_` is treated as local time.  The distinction between
--- %G_TIME_TYPE_STANDARD and %G_TIME_TYPE_DAYLIGHT is ignored except in
--- the case that the given `time_` is ambiguous.  In Toronto, for example,
--- 01:30 on November 7th 2010 occurred twice (once inside of daylight
--- savings time and the next, an hour later, outside of daylight savings
--- time).  In this case, the different value of `type` would result in a
--- different interval being returned.
--- 
--- It is still possible for this function to fail.  In Toronto, for
--- example, 02:00 on March 14th 2010 does not exist (due to the leap
--- forward to begin daylight savings time).  -1 is returned in that
--- case.
---
--- ---
---
---@param self GLib.TimeZone # a `GTimeZone`
---@param type GLib.TimeType # the `GTimeType` of `time_`
---@param time_ integer # a number of seconds since January 1, 1970
---@return integer # the interval containing `time_`, or -1 in case of failure
function GLib.TimeZone:find_interval(type, time_) end

--- # method GLib.TimeZone:get_abbreviation()
---
--- Determines the time zone abbreviation to be used during a particular
--- `interval` of time in the time zone `tz`.
--- 
--- For example, in Toronto this is currently "EST" during the winter
--- months and "EDT" during the summer months when daylight savings time
--- is in effect.
---
--- ---
---
---@param self GLib.TimeZone # a `GTimeZone`
---@param interval integer # an interval within the timezone
---@return string # the time zone abbreviation, which belongs to `tz`
function GLib.TimeZone:get_abbreviation(interval) end

--- # method GLib.TimeZone:get_identifier()
---
--- Get the identifier of this `GTimeZone`, as passed to `g_time_zone_new()`.
--- If the identifier passed at construction time was not recognised, `UTC` will
--- be returned. If it was `nil`, the identifier of the local timezone at
--- construction time will be returned.
--- 
--- The identifier will be returned in the same format as provided at
--- construction time: if provided as a time offset, that will be returned by
--- this function.
---
--- ---
---
---@param self GLib.TimeZone # a `GTimeZone`
---@return string # identifier for this timezone
function GLib.TimeZone:get_identifier() end

--- # method GLib.TimeZone:get_offset()
---
--- Determines the offset to UTC in effect during a particular `interval`
--- of time in the time zone `tz`.
--- 
--- The offset is the number of seconds that you add to UTC time to
--- arrive at local time for `tz` (ie: negative numbers for time zones
--- west of GMT, positive numbers for east).
---
--- ---
---
---@param self GLib.TimeZone # a `GTimeZone`
---@param interval integer # an interval within the timezone
---@return integer # the number of seconds that should be added to UTC to get the local time in `tz`
function GLib.TimeZone:get_offset(interval) end

--- # method GLib.TimeZone:is_dst()
---
--- Determines if daylight savings time is in effect during a particular
--- `interval` of time in the time zone `tz`.
---
--- ---
---
---@param self GLib.TimeZone # a `GTimeZone`
---@param interval integer # an interval within the timezone
---@return (boolean|nil) # `true` if daylight savings time is in effect
function GLib.TimeZone:is_dst(interval) end

--- # method GLib.TimeZone:ref()
---
--- Increases the reference count on `tz`.
---
--- ---
---
---@param self GLib.TimeZone # a `GTimeZone`
---@return GLib.TimeZone # a new reference to `tz`.
function GLib.TimeZone:ref() end

--- # method GLib.TimeZone:unref()
---
--- Decreases the reference count on `tz`.
---
--- ---
---
---@param self GLib.TimeZone # a `GTimeZone`
---@return nil
function GLib.TimeZone:unref() end

--- # function GLib.TimeZone.new()
---
--- A version of `g_time_zone_new_identifier()` which returns the UTC time zone
--- if `identifier` could not be parsed or loaded.
--- 
--- If you need to check whether `identifier` was loaded successfully, use
--- `g_time_zone_new_identifier()`.
---
--- ---
---
---@param identifier? string # a timezone identifier
---@return GLib.TimeZone # the requested timezone
function GLib.TimeZone.new(identifier) end

--- # function GLib.TimeZone.new_identifier()
---
--- Creates a `GTimeZone` corresponding to `identifier`. If `identifier` cannot be
--- parsed or loaded, `nil` is returned.
--- 
--- `identifier` can either be an RFC3339/ISO 8601 time offset or
--- something that would pass as a valid value for the `TZ` environment
--- variable (including `nil`).
--- 
--- In Windows, `identifier` can also be the unlocalized name of a time
--- zone for standard time, for example "Pacific Standard Time".
--- 
--- Valid RFC3339 time offsets are `"Z"` (for UTC) or
--- `"±hh:mm"`.  ISO 8601 additionally specifies
--- `"±hhmm"` and `"±hh"`.  Offsets are
--- time values to be added to Coordinated Universal Time (UTC) to get
--- the local time.
--- 
--- In UNIX, the `TZ` environment variable typically corresponds
--- to the name of a file in the zoneinfo database, an absolute path to a file
--- somewhere else, or a string in
--- "std offset [dst [offset],start[/time],end[/time]]" (POSIX) format.
--- There  are  no spaces in the specification. The name of standard
--- and daylight savings time zone must be three or more alphabetic
--- characters. Offsets are time values to be added to local time to
--- get Coordinated Universal Time (UTC) and should be
--- `"[±]hh[[:]mm[:ss]]"`.  Dates are either
--- `"Jn"` (Julian day with n between 1 and 365, leap
--- years not counted), `"n"` (zero-based Julian day
--- with n between 0 and 365) or `"Mm.w.d"` (day d
--- (0 <= d <= 6) of week w (1 <= w <= 5) of month m (1 <= m <= 12), day
--- 0 is a Sunday).  Times are in local wall clock time, the default is
--- 02:00:00.
--- 
--- In Windows, the "tzn[+|–]hh[:mm[:ss]][dzn]" format is used, but also
--- accepts POSIX format.  The Windows format uses US rules for all time
--- zones; daylight savings time is 60 minutes behind the standard time
--- with date and time of change taken from Pacific Standard Time.
--- Offsets are time values to be added to the local time to get
--- Coordinated Universal Time (UTC).
--- 
--- `g_time_zone_new_local()` calls this function with the value of the
--- `TZ` environment variable. This function itself is independent of
--- the value of `TZ`, but if `identifier` is `nil` then `/etc/localtime`
--- will be consulted to discover the correct time zone on UNIX and the
--- registry will be consulted or GetTimeZoneI`nformation()` will be used
--- to get the local time zone on Windows.
--- 
--- If intervals are not available, only time zone rules from `TZ`
--- environment variable or other means, then they will be computed
--- from year 1900 to 2037.  If the maximum year for the rules is
--- available and it is greater than 2037, then it will followed
--- instead.
--- 
--- See
--- [RFC3339 §5.6](http://tools.ietf.org/html/rfc3339`section`-5.6)
--- for a precise definition of valid RFC3339 time offsets
--- (the `time-offset` expansion) and ISO 8601 for the
--- full list of valid time offsets.  See
--- [The GNU C Library manual](http://www.gnu.org/s/libc/manual/html_node/TZ-Variable.html)
--- for an explanation of the possible
--- values of the `TZ` environment variable. See
--- [Microsoft Time Zone Index Values](http://msdn.microsoft.com/en-us/library/ms912391%28v=winembedded.11%29.aspx)
--- for the list of time zones on Windows.
--- 
--- You should release the return value by calling `g_time_zone_unref()`
--- when you are done with it.
---
--- ---
---
---@param identifier? string # a timezone identifier
---@return GLib.TimeZone # the requested timezone, or `nil` on failure
function GLib.TimeZone.new_identifier(identifier) end

--- # function GLib.TimeZone.new_local()
---
--- Creates a `GTimeZone` corresponding to local time.  The local time
--- zone may change between invocations to this function; for example,
--- if the system administrator changes it.
--- 
--- This is equivalent to calling `g_time_zone_new()` with the value of
--- the `TZ` environment variable (including the possibility of `nil`).
--- 
--- You should release the return value by calling `g_time_zone_unref()`
--- when you are done with it.
---
--- ---
---
---@return GLib.TimeZone # the local timezone
function GLib.TimeZone.new_local() end

--- # function GLib.TimeZone.new_offset()
---
--- Creates a `GTimeZone` corresponding to the given constant offset from UTC,
--- in seconds.
--- 
--- This is equivalent to calling `g_time_zone_new()` with a string in the form
--- `[+|-]hh[:mm[:ss]]`.
--- 
--- It is possible for this function to fail if `seconds` is too big (greater than
--- 24 hours), in which case this function will return the UTC timezone for
--- backwards compatibility. To detect failures like this, use
--- `g_time_zone_new_identifier()` directly.
---
--- ---
---
---@param seconds integer # offset to UTC, in seconds
---@return GLib.TimeZone # a timezone at the given offset from UTC, or UTC on failure
function GLib.TimeZone.new_offset(seconds) end

--- # function GLib.TimeZone.new_utc()
---
--- Creates a `GTimeZone` corresponding to UTC.
--- 
--- This is equivalent to calling `g_time_zone_new()` with a value like
--- "Z", "UTC", "+00", etc.
--- 
--- You should release the return value by calling `g_time_zone_unref()`
--- when you are done with it.
---
--- ---
---
---@return GLib.TimeZone # the universal timezone
function GLib.TimeZone.new_utc() end

--- # record GLib.Timer
---
--- Opaque datatype that records a start time.
---
--- ---
---
---@class GLib.Timer
GLib.Timer = {}

--- # method GLib.Timer:continue()
---
--- Resumes a timer that has previously been stopped with
--- `g_timer_stop()`. `g_timer_stop()` must be called before using this
--- function.
---
--- ---
---
---@param self GLib.Timer # a `GTimer`.
---@return nil
function GLib.Timer:continue() end

--- # method GLib.Timer:destroy()
---
--- Destroys a timer, freeing associated resources.
---
--- ---
---
---@param self GLib.Timer # a `GTimer` to destroy.
---@return nil
function GLib.Timer:destroy() end

--- # method GLib.Timer:elapsed()
---
--- If `timer` has been started but not stopped, obtains the time since
--- the timer was started. If `timer` has been stopped, obtains the
--- elapsed time between the time it was started and the time it was
--- stopped. The return value is the number of seconds elapsed,
--- including any fractional part. The `microseconds` out parameter is
--- essentially useless.
---
--- ---
---
---@param self GLib.Timer # a `GTimer`.
---@param microseconds integer # return location for the fractional part of seconds elapsed, in microseconds (that is, the total number of microseconds elapsed, modulo 1000000), or `nil`
---@return number # seconds elapsed as a floating point value, including any fractional part.
function GLib.Timer:elapsed(microseconds) end

--- # method GLib.Timer:is_active()
---
--- Exposes whether the timer is currently active.
---
--- ---
---
---@param self GLib.Timer # a `GTimer`.
---@return (boolean|nil) # `true` if the timer is running, `false` otherwise
function GLib.Timer:is_active() end

--- # method GLib.Timer:reset()
---
--- This function is useless; it's fine to call `g_timer_start()` on an
--- already-started timer to reset the start time, so `g_timer_reset()`
--- serves no purpose.
---
--- ---
---
---@param self GLib.Timer # a `GTimer`.
---@return nil
function GLib.Timer:reset() end

--- # method GLib.Timer:start()
---
--- Marks a start time, so that future calls to `g_timer_elapsed()` will
--- report the time since `g_timer_start()` was called. `g_timer_new()`
--- automatically marks the start time, so no need to call
--- `g_timer_start()` immediately after creating the timer.
---
--- ---
---
---@param self GLib.Timer # a `GTimer`.
---@return nil
function GLib.Timer:start() end

--- # method GLib.Timer:stop()
---
--- Marks an end time, so calls to `g_timer_elapsed()` will return the
--- difference between this end time and the start time.
---
--- ---
---
---@param self GLib.Timer # a `GTimer`.
---@return nil
function GLib.Timer:stop() end

---@enum GLib.TokenType
GLib.TokenType = {}

--- # union GLib.TokenValue
---
--- A union holding the value of the token.
---
--- ---
---
---@class GLib.TokenValue
---@field v_symbol userdata # token symbol value
---@field v_identifier string # token identifier value
---@field v_binary integer # token binary integer value
---@field v_octal integer # octal integer value
---@field v_int integer # integer value
---@field v_int64 integer # 64-bit integer value
---@field v_float number # floating point value
---@field v_hex integer # hex integer value
---@field v_string string # string value
---@field v_comment string # comment value
---@field v_char integer # character value
---@field v_error integer # error value
GLib.TokenValue = {}

---@alias GLib.TranslateFunc fun(str: string, data: userdata): string

--- # record GLib.TrashStack
---
--- Each piece of memory that is pushed onto the stack
--- is cast to a GTrashStack*.
---
--- ---
---
---@class GLib.TrashStack
---@field next GLib.TrashStack # pointer to the previous element of the stack, gets stored in the first `sizeof (gpointer)` bytes of the element
GLib.TrashStack = {}

--- # function GLib.TrashStack.height()
---
--- Returns the height of a `GTrashStack`.
--- 
--- Note that execution of this function is of O(N) complexity
--- where N denotes the number of items on the stack.
---
--- ---
---
---@param stack_p GLib.TrashStack # a `GTrashStack`
---@return integer # the height of the stack
function GLib.TrashStack.height(stack_p) end

--- # function GLib.TrashStack.peek()
---
--- Returns the element at the top of a `GTrashStack`
--- which may be `nil`.
---
--- ---
---
---@param stack_p GLib.TrashStack # a `GTrashStack`
---@return userdata # the element at the top of the stack
function GLib.TrashStack.peek(stack_p) end

--- # function GLib.TrashStack.pop()
---
--- Pops a piece of memory off a `GTrashStack`.
---
--- ---
---
---@param stack_p GLib.TrashStack # a `GTrashStack`
---@return userdata # the element at the top of the stack
function GLib.TrashStack.pop(stack_p) end

--- # function GLib.TrashStack.push()
---
--- Pushes a piece of memory onto a `GTrashStack`.
---
--- ---
---
---@param stack_p GLib.TrashStack # a `GTrashStack`
---@param data_p userdata # the piece of memory to push on the stack
---@return nil
function GLib.TrashStack.push(stack_p, data_p) end

---@enum GLib.TraverseFlags
GLib.TraverseFlags = {}

---@alias GLib.TraverseFunc fun(key: userdata, value: userdata, data: userdata): (boolean|nil)

---@alias GLib.TraverseNodeFunc fun(node: GLib.TreeNode, data: userdata): (boolean|nil)

---@enum GLib.TraverseType
GLib.TraverseType = {}

--- # record GLib.Tree
---
--- The GTree struct is an opaque data structure representing a
--- [balanced binary tree][glib-Balanced-Binary-Trees]. It should be
--- accessed only by using the following functions.
---
--- ---
---
---@class GLib.Tree
GLib.Tree = {}

--- # method GLib.Tree:destroy()
---
--- Removes all keys and values from the `GTree` and decreases its
--- reference count by one. If keys and/or values are dynamically
--- allocated, you should either free them first or create the `GTree`
--- using `g_tree_new_full()`. In the latter case the destroy functions
--- you supplied will be called on all keys and values before destroying
--- the `GTree`.
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@return nil
function GLib.Tree:destroy() end

--- # method GLib.Tree:height()
---
--- Gets the height of a `GTree`.
--- 
--- If the `GTree` contains no nodes, the height is 0.
--- If the `GTree` contains only one root node the height is 1.
--- If the root node has children the height is 2, etc.
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@return integer # the height of `tree`
function GLib.Tree:height() end

--- # method GLib.Tree:insert()
---
--- Inserts a key/value pair into a `GTree`.
--- 
--- Inserts a new key and value into a `GTree` as `g_tree_insert_node()` does,
--- only this function does not return the inserted or set node.
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@param key? userdata # the key to insert
---@param value? userdata # the value corresponding to the key
---@return nil
function GLib.Tree:insert(key, value) end

--- # method GLib.Tree:insert_node()
---
--- Inserts a key/value pair into a `GTree`.
--- 
--- If the given key already exists in the `GTree` its corresponding value
--- is set to the new value. If you supplied a `value_destroy_func` when
--- creating the `GTree`, the old value is freed using that function. If
--- you supplied a `key_destroy_func` when creating the `GTree`, the passed
--- key is freed using that function.
--- 
--- The tree is automatically 'balanced' as new key/value pairs are added,
--- so that the distance from the root to every leaf is as small as possible.
--- The cost of maintaining a balanced tree while inserting new key/value
--- result in a O(n log(n)) operation where most of the other operations
--- are O(log(n)).
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@param key? userdata # the key to insert
---@param value? userdata # the value corresponding to the key
---@return GLib.TreeNode # the inserted (or set) node.
function GLib.Tree:insert_node(key, value) end

--- # method GLib.Tree:lookup()
---
--- Gets the value corresponding to the given key. Since a `GTree` is
--- automatically balanced as key/value pairs are added, key lookup
--- is O(log n) (where n is the number of key/value pairs in the tree).
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@param key? userdata # the key to look up
---@return userdata # the value corresponding to the key, or `nil` if the key was not found
function GLib.Tree:lookup(key) end

--- # method GLib.Tree:lookup_extended()
---
--- Looks up a key in the `GTree`, returning the original key and the
--- associated value. This is useful if you need to free the memory
--- allocated for the original key, for example before calling
--- `g_tree_remove()`.
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@param lookup_key? userdata # the key to look up
---@param orig_key? userdata # returns the original key
---@param value? userdata # returns the value associated with the key
---@return (boolean|nil) # `true` if the key was found in the `GTree`
function GLib.Tree:lookup_extended(lookup_key, orig_key, value) end

--- # method GLib.Tree:lookup_node()
---
--- Gets the tree node corresponding to the given key. Since a `GTree` is
--- automatically balanced as key/value pairs are added, key lookup
--- is O(log n) (where n is the number of key/value pairs in the tree).
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@param key? userdata # the key to look up
---@return GLib.TreeNode # the tree node corresponding to the key, or `nil` if the key was not found
function GLib.Tree:lookup_node(key) end

--- # method GLib.Tree:lower_bound()
---
--- Gets the lower bound node corresponding to the given key,
--- or `nil` if the tree is empty or all the nodes in the tree
--- have keys that are strictly lower than the searched key.
--- 
--- The lower bound is the first node that has its key greater
--- than or equal to the searched key.
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@param key? userdata # the key to calculate the lower bound for
---@return GLib.TreeNode # the tree node corresponding to the lower bound, or `nil` if the tree is empty or has only keys strictly lower than the searched key.
function GLib.Tree:lower_bound(key) end

--- # method GLib.Tree:nnodes()
---
--- Gets the number of nodes in a `GTree`.
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@return integer # the number of nodes in `tree`
function GLib.Tree:nnodes() end

--- # method GLib.Tree:node_first()
---
--- Returns the first in-order node of the tree, or `nil`
--- for an empty tree.
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@return GLib.TreeNode # the first node in the tree
function GLib.Tree:node_first() end

--- # method GLib.Tree:node_last()
---
--- Returns the last in-order node of the tree, or `nil`
--- for an empty tree.
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@return GLib.TreeNode # the last node in the tree
function GLib.Tree:node_last() end

--- # method GLib.Tree:ref()
---
--- Increments the reference count of `tree` by one.
--- 
--- It is safe to call this function from any thread.
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@return GLib.Tree # the passed in `GTree`
function GLib.Tree:ref() end

--- # method GLib.Tree:remove()
---
--- Removes a key/value pair from a `GTree`.
--- 
--- If the `GTree` was created using `g_tree_new_full()`, the key and value
--- are freed using the supplied destroy functions, otherwise you have to
--- make sure that any dynamically allocated values are freed yourself.
--- If the key does not exist in the `GTree`, the function does nothing.
--- 
--- The cost of maintaining a balanced tree while removing a key/value
--- result in a O(n log(n)) operation where most of the other operations
--- are O(log(n)).
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@param key? userdata # the key to remove
---@return (boolean|nil) # `true` if the key was found (prior to 2.8, this function returned nothing)
function GLib.Tree:remove(key) end

--- # method GLib.Tree:remove_all()
---
--- Removes all nodes from a `GTree` and destroys their keys and values,
--- then resets the `GTree`’s root to `nil`.
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@return nil
function GLib.Tree:remove_all() end

--- # method GLib.Tree:replace()
---
--- Inserts a new key and value into a `GTree` as `g_tree_replace_node()` does,
--- only this function does not return the inserted or set node.
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@param key? userdata # the key to insert
---@param value? userdata # the value corresponding to the key
---@return nil
function GLib.Tree:replace(key, value) end

--- # method GLib.Tree:replace_node()
---
--- Inserts a new key and value into a `GTree` similar to `g_tree_insert_node()`.
--- The difference is that if the key already exists in the `GTree`, it gets
--- replaced by the new key. If you supplied a `value_destroy_func` when
--- creating the `GTree`, the old value is freed using that function. If you
--- supplied a `key_destroy_func` when creating the `GTree`, the old key is
--- freed using that function.
--- 
--- The tree is automatically 'balanced' as new key/value pairs are added,
--- so that the distance from the root to every leaf is as small as possible.
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@param key? userdata # the key to insert
---@param value? userdata # the value corresponding to the key
---@return GLib.TreeNode # the inserted (or set) node.
function GLib.Tree:replace_node(key, value) end

--- # method GLib.Tree:steal()
---
--- Removes a key and its associated value from a `GTree` without calling
--- the key and value destroy functions.
--- 
--- If the key does not exist in the `GTree`, the function does nothing.
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@param key? userdata # the key to remove
---@return (boolean|nil) # `true` if the key was found (prior to 2.8, this function returned nothing)
function GLib.Tree:steal(key) end

--- # method GLib.Tree:unref()
---
--- Decrements the reference count of `tree` by one.
--- If the reference count drops to 0, all keys and values will
--- be destroyed (if destroy functions were specified) and all
--- memory allocated by `tree` will be released.
--- 
--- It is safe to call this function from any thread.
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@return nil
function GLib.Tree:unref() end

--- # method GLib.Tree:upper_bound()
---
--- Gets the upper bound node corresponding to the given key,
--- or `nil` if the tree is empty or all the nodes in the tree
--- have keys that are lower than or equal to the searched key.
--- 
--- The upper bound is the first node that has its key strictly greater
--- than the searched key.
---
--- ---
---
---@param self GLib.Tree # a `GTree`
---@param key? userdata # the key to calculate the upper bound for
---@return GLib.TreeNode # the tree node corresponding to the upper bound, or `nil` if the tree is empty or has only keys lower than or equal to the searched key.
function GLib.Tree:upper_bound(key) end

--- # function GLib.Tree.new_full()
---
--- Creates a new `GTree` like `g_tree_new()` and allows to specify functions
--- to free the memory allocated for the key and value that get called when
--- removing the entry from the `GTree`.
---
--- ---
---
---@param key_compare_func GLib.CompareDataFunc # `qsort()`-style comparison function
---@param key_compare_data? userdata # data to pass to comparison function
---@param key_destroy_func GLib.DestroyNotify # a function to free the memory allocated for the key used when removing the entry from the `GTree` or `nil` if you don't want to supply such a function
---@param value_destroy_func GLib.DestroyNotify # a function to free the memory allocated for the value used when removing the entry from the `GTree` or `nil` if you don't want to supply such a function
---@return GLib.Tree # a newly allocated `GTree`
function GLib.Tree.new_full(key_compare_func, key_compare_data, key_destroy_func, value_destroy_func) end

--- # record GLib.TreeNode
---
--- An opaque type which identifies a specific node in a `GTree`.
---
--- ---
---
---@class GLib.TreeNode
GLib.TreeNode = {}

--- # method GLib.TreeNode:key()
---
--- Gets the key stored at a particular tree node.
---
--- ---
---
---@param self GLib.TreeNode # a `GTree` node
---@return userdata # the key at the node.
function GLib.TreeNode:key() end

--- # method GLib.TreeNode:next()
---
--- Returns the next in-order node of the tree, or `nil`
--- if the passed node was already the last one.
---
--- ---
---
---@param self GLib.TreeNode # a `GTree` node
---@return GLib.TreeNode # the next node in the tree
function GLib.TreeNode:next() end

--- # method GLib.TreeNode:previous()
---
--- Returns the previous in-order node of the tree, or `nil`
--- if the passed node was already the first one.
---
--- ---
---
---@param self GLib.TreeNode # a `GTree` node
---@return GLib.TreeNode # the previous node in the tree
function GLib.TreeNode:previous() end

--- # method GLib.TreeNode:value()
---
--- Gets the value stored at a particular tree node.
---
--- ---
---
---@param self GLib.TreeNode # a `GTree` node
---@return userdata # the value at the node.
function GLib.TreeNode:value() end

---@enum GLib.UnicodeBreakType
GLib.UnicodeBreakType = {}

---@enum GLib.UnicodeScript
GLib.UnicodeScript = {}

---@enum GLib.UnicodeType
GLib.UnicodeType = {}

---@alias GLib.UnixFDSourceFunc fun(fd: integer, condition: GLib.IOCondition, user_data: userdata): (boolean|nil)

--- # record GLib.Uri
---
--- The `GUri` type and related functions can be used to parse URIs into
--- their components, and build valid URIs from individual components.
--- 
--- Note that `GUri` scope is to help manipulate URIs in various applications,
--- following [RFC 3986](https://tools.ietf.org/html/rfc3986). In particular,
--- it doesn't intend to cover web browser needs, and doesn't implement the
--- [WHATWG URL](https://url.spec.whatwg.org/) standard. No APIs are provided to
--- help prevent
--- [homograph attacks](https://en.wikipedia.org/wiki/IDN_homograph_attack), so
--- `GUri` is not suitable for formatting URIs for display to the user for making
--- security-sensitive decisions.
--- 
--- ## Relative and absolute URIs # {`relative`-absolute-uris}
--- 
--- As defined in [RFC 3986](https://tools.ietf.org/html/rfc3986`section`-4), the
--- hierarchical nature of URIs means that they can either be ‘relative
--- references’ (sometimes referred to as ‘relative URIs’) or ‘URIs’ (for
--- clarity, ‘URIs’ are referred to in this documentation as
--- ‘absolute URIs’ — although
--- [in constrast to RFC 3986](https://tools.ietf.org/html/rfc3986`section`-4.3),
--- fragment identifiers are always allowed).
--- 
--- Relative references have one or more components of the URI missing. In
--- particular, they have no scheme. Any other component, such as hostname,
--- query, etc. may be missing, apart from a path, which has to be specified (but
--- may be empty). The path may be relative, starting with `./` rather than `/`.
--- 
--- For example, a valid relative reference is `./path?query`,
--- `/?query`fragment`` or `//example.com`.
--- 
--- Absolute URIs have a scheme specified. Any other components of the URI which
--- are missing are specified as explicitly unset in the URI, rather than being
--- resolved relative to a base URI using `g_uri_parse_relative()`.
--- 
--- For example, a valid absolute URI is `file:///home/bob` or
--- `https://search.com?query=string`.
--- 
--- A `GUri` instance is always an absolute URI. A string may be an absolute URI
--- or a relative reference; see the documentation for individual functions as to
--- what forms they accept.
--- 
--- ## Parsing URIs
--- 
--- The most minimalist APIs for parsing URIs are `g_uri_split()` and
--- `g_uri_split_with_user()`. These split a URI into its component
--- parts, and return the parts; the difference between the two is that
--- `g_uri_split()` treats the ‘userinfo’ component of the URI as a
--- single element, while `g_uri_split_with_user()` can (depending on the
--- `GUriFlags` you pass) treat it as containing a username, password,
--- and authentication parameters. Alternatively, `g_uri_split_network()`
--- can be used when you are only interested in the components that are
--- needed to initiate a network connection to the service (scheme,
--- host, and port).
--- 
--- `g_uri_parse()` is similar to `g_uri_split()`, but instead of returning
--- individual strings, it returns a `GUri` structure (and it requires
--- that the URI be an absolute URI).
--- 
--- `g_uri_resolve_relative()` and `g_uri_parse_relative()` allow you to
--- resolve a relative URI relative to a base URI.
--- `g_uri_resolve_relative()` takes two strings and returns a string,
--- and `g_uri_parse_relative()` takes a `GUri` and a string and returns a
--- `GUri`.
--- 
--- All of the parsing functions take a `GUriFlags` argument describing
--- exactly how to parse the URI; see the documentation for that type
--- for more details on the specific flags that you can pass. If you
--- need to choose different flags based on the type of URI, you can
--- use `g_uri_peek_scheme()` on the URI string to check the scheme
--- first, and use that to decide what flags to parse it with.
--- 
--- For example, you might want to use %G_URI_PARAMS_WWW_FORM when parsing the
--- params for a web URI, so compare the result of `g_uri_peek_scheme()` against
--- `http` and `https`.
--- 
--- ## Building URIs
--- 
--- `g_uri_join()` and `g_uri_join_with_user()` can be used to construct
--- valid URI strings from a set of component strings. They are the
--- inverse of `g_uri_split()` and `g_uri_split_with_user()`.
--- 
--- Similarly, `g_uri_build()` and `g_uri_build_with_user()` can be used to
--- construct a `GUri` from a set of component strings.
--- 
--- As with the parsing functions, the building functions take a
--- `GUriFlags` argument. In particular, it is important to keep in mind
--- whether the URI components you are using are already `%`-encoded. If so,
--- you must pass the %G_URI_FLAGS_ENCODED flag.
--- 
--- ## `file://` URIs
--- 
--- Note that Windows and Unix both define special rules for parsing
--- `file://` URIs (involving non-UTF-8 character sets on Unix, and the
--- interpretation of path separators on Windows). `GUri` does not
--- implement these rules. Use `g_filename_from_uri()` and
--- `g_filename_to_uri()` if you want to properly convert between
--- `file://` URIs and local filenames.
--- 
--- ## URI Equality
--- 
--- Note that there is no `g_uri_equal ()` function, because comparing
--- URIs usefully requires scheme-specific knowledge that `GUri` does
--- not have. `GUri` can help with normalization if you use the various
--- encoded `GUriFlags` as well as %G_URI_FLAGS_SCHEME_NORMALIZE however
--- it is not comprehensive.
--- For example, `data:,foo` and `data:;base64,Zm9v` resolve to the same
--- thing according to the `data:` URI specification which GLib does not
--- handle.
---
--- ---
---
---@class GLib.Uri
GLib.Uri = {}

--- # method GLib.Uri:get_auth_params()
---
--- Gets `uri`'s authentication parameters, which may contain
--- `%`-encoding, depending on the flags with which `uri` was created.
--- (If `uri` was not created with %G_URI_FLAGS_HAS_AUTH_PARAMS then this will
--- be `nil`.)
--- 
--- Depending on the URI scheme, `g_uri_parse_params()` may be useful for
--- further parsing this information.
---
--- ---
---
---@param self GLib.Uri # a `GUri`
---@return string # `uri`'s authentication parameters.
function GLib.Uri:get_auth_params() end

--- # method GLib.Uri:get_flags()
---
--- Gets `uri`'s flags set upon construction.
---
--- ---
---
---@param self GLib.Uri # a `GUri`
---@return GLib.UriFlags # `uri`'s flags.
function GLib.Uri:get_flags() end

--- # method GLib.Uri:get_fragment()
---
--- Gets `uri`'s fragment, which may contain `%`-encoding, depending on
--- the flags with which `uri` was created.
---
--- ---
---
---@param self GLib.Uri # a `GUri`
---@return string # `uri`'s fragment.
function GLib.Uri:get_fragment() end

--- # method GLib.Uri:get_host()
---
--- Gets `uri`'s host. This will never have `%`-encoded characters,
--- unless it is non-UTF-8 (which can only be the case if `uri` was
--- created with %G_URI_FLAGS_NON_DNS).
--- 
--- If `uri` contained an IPv6 address literal, this value will be just
--- that address, without the brackets around it that are necessary in
--- the string form of the URI. Note that in this case there may also
--- be a scope ID attached to the address. Eg, `fe80::1234%``em1` (or
--- `fe80::1234%``25em1` if the string is still encoded).
---
--- ---
---
---@param self GLib.Uri # a `GUri`
---@return string # `uri`'s host.
function GLib.Uri:get_host() end

--- # method GLib.Uri:get_password()
---
--- Gets `uri`'s password, which may contain `%`-encoding, depending on
--- the flags with which `uri` was created. (If `uri` was not created
--- with %G_URI_FLAGS_HAS_PASSWORD then this will be `nil`.)
---
--- ---
---
---@param self GLib.Uri # a `GUri`
---@return string # `uri`'s password.
function GLib.Uri:get_password() end

--- # method GLib.Uri:get_path()
---
--- Gets `uri`'s path, which may contain `%`-encoding, depending on the
--- flags with which `uri` was created.
---
--- ---
---
---@param self GLib.Uri # a `GUri`
---@return string # `uri`'s path.
function GLib.Uri:get_path() end

--- # method GLib.Uri:get_port()
---
--- Gets `uri`'s port.
---
--- ---
---
---@param self GLib.Uri # a `GUri`
---@return integer # `uri`'s port, or `-1` if no port was specified.
function GLib.Uri:get_port() end

--- # method GLib.Uri:get_query()
---
--- Gets `uri`'s query, which may contain `%`-encoding, depending on the
--- flags with which `uri` was created.
--- 
--- For queries consisting of a series of `name=value` parameters,
--- `GUriParamsIter` or `g_uri_parse_params()` may be useful.
---
--- ---
---
---@param self GLib.Uri # a `GUri`
---@return string # `uri`'s query.
function GLib.Uri:get_query() end

--- # method GLib.Uri:get_scheme()
---
--- Gets `uri`'s scheme. Note that this will always be all-lowercase,
--- regardless of the string or strings that `uri` was created from.
---
--- ---
---
---@param self GLib.Uri # a `GUri`
---@return string # `uri`'s scheme.
function GLib.Uri:get_scheme() end

--- # method GLib.Uri:get_user()
---
--- Gets the ‘username’ component of `uri`'s userinfo, which may contain
--- `%`-encoding, depending on the flags with which `uri` was created.
--- If `uri` was not created with %G_URI_FLAGS_HAS_PASSWORD or
--- %G_URI_FLAGS_HAS_AUTH_PARAMS, this is the same as `g_uri_get_userinfo()`.
---
--- ---
---
---@param self GLib.Uri # a `GUri`
---@return string # `uri`'s user.
function GLib.Uri:get_user() end

--- # method GLib.Uri:get_userinfo()
---
--- Gets `uri`'s userinfo, which may contain `%`-encoding, depending on
--- the flags with which `uri` was created.
---
--- ---
---
---@param self GLib.Uri # a `GUri`
---@return string # `uri`'s userinfo.
function GLib.Uri:get_userinfo() end

--- # method GLib.Uri:parse_relative()
---
--- Parses `uri_ref` according to `flags` and, if it is a
--- [relative URI][relative-absolute-uris], resolves it relative to `base_uri`.
--- If the result is not a valid absolute URI, it will be discarded, and an error
--- returned.
---
--- ---
---
---@param self? GLib.Uri # a base absolute URI
---@param uri_ref string # a string representing a relative or absolute URI
---@param flags GLib.UriFlags # flags describing how to parse `uri_ref`
---@return GLib.Uri # a new `GUri`, or NULL on error.
function GLib.Uri:parse_relative(uri_ref, flags) end

--- # method GLib.Uri:to_string()
---
--- Returns a string representing `uri`.
--- 
--- This is not guaranteed to return a string which is identical to the
--- string that `uri` was parsed from. However, if the source URI was
--- syntactically correct (according to RFC 3986), and it was parsed
--- with %G_URI_FLAGS_ENCODED, then `g_uri_to_string()` is guaranteed to return
--- a string which is at least semantically equivalent to the source
--- URI (according to RFC 3986).
--- 
--- If `uri` might contain sensitive details, such as authentication parameters,
--- or private data in its query string, and the returned string is going to be
--- logged, then consider using `g_uri_to_string_partial()` to redact parts.
---
--- ---
---
---@param self GLib.Uri # a `GUri`
---@return string # a string representing `uri`, which the caller must free.
function GLib.Uri:to_string() end

--- # method GLib.Uri:to_string_partial()
---
--- Returns a string representing `uri`, subject to the options in
--- `flags`. See `g_uri_to_string()` and `GUriHideFlags` for more details.
---
--- ---
---
---@param self GLib.Uri # a `GUri`
---@param flags GLib.UriHideFlags # flags describing what parts of `uri` to hide
---@return string # a string representing `uri`, which the caller must free.
function GLib.Uri:to_string_partial(flags) end

--- # function GLib.Uri.build()
---
--- Creates a new `GUri` from the given components according to `flags`.
--- 
--- See also `g_uri_build_with_user()`, which allows specifying the
--- components of the "userinfo" separately.
---
--- ---
---
---@param flags GLib.UriFlags # flags describing how to build the `GUri`
---@param scheme string # the URI scheme
---@param userinfo? string # the userinfo component, or `nil`
---@param host? string # the host component, or `nil`
---@param port integer # the port, or `-1`
---@param path string # the path component
---@param query? string # the query component, or `nil`
---@param fragment? string # the fragment, or `nil`
---@return GLib.Uri # a new `GUri`
function GLib.Uri.build(flags, scheme, userinfo, host, port, path, query, fragment) end

--- # function GLib.Uri.build_with_user()
---
--- Creates a new `GUri` from the given components according to `flags`
--- (%G_URI_FLAGS_HAS_PASSWORD is added unconditionally). The `flags` must be
--- coherent with the passed values, in particular use `%`-encoded values with
--- %G_URI_FLAGS_ENCODED.
--- 
--- In contrast to `g_uri_build()`, this allows specifying the components
--- of the ‘userinfo’ field separately. Note that `user` must be non-`nil`
--- if either `password` or `auth_params` is non-`nil`.
---
--- ---
---
---@param flags GLib.UriFlags # flags describing how to build the `GUri`
---@param scheme string # the URI scheme
---@param user? string # the user component of the userinfo, or `nil`
---@param password? string # the password component of the userinfo, or `nil`
---@param auth_params? string # the auth params of the userinfo, or `nil`
---@param host? string # the host component, or `nil`
---@param port integer # the port, or `-1`
---@param path string # the path component
---@param query? string # the query component, or `nil`
---@param fragment? string # the fragment, or `nil`
---@return GLib.Uri # a new `GUri`
function GLib.Uri.build_with_user(flags, scheme, user, password, auth_params, host, port, path, query, fragment) end

--- # function GLib.Uri.error_quark()
---
---@return GLib.Quark
function GLib.Uri.error_quark() end

--- # function GLib.Uri.escape_bytes()
---
--- Escapes arbitrary data for use in a URI.
--- 
--- Normally all characters that are not ‘unreserved’ (i.e. ASCII
--- alphanumerical characters plus dash, dot, underscore and tilde) are
--- escaped. But if you specify characters in `reserved_chars_allowed`
--- they are not escaped. This is useful for the ‘reserved’ characters
--- in the URI specification, since those are allowed unescaped in some
--- portions of a URI.
--- 
--- Though technically incorrect, this will also allow escaping nul
--- bytes as `%``00`.
---
--- ---
---
---@param unescaped unknown[] # the unescaped input data.
---@param length integer # the length of `unescaped`
---@param reserved_chars_allowed? string # a string of reserved characters that are allowed to be used, or `nil`.
---@return string # an escaped version of `unescaped`. The returned string should be freed when no longer needed.
function GLib.Uri.escape_bytes(unescaped, length, reserved_chars_allowed) end

--- # function GLib.Uri.escape_string()
---
--- Escapes a string for use in a URI.
--- 
--- Normally all characters that are not "unreserved" (i.e. ASCII
--- alphanumerical characters plus dash, dot, underscore and tilde) are
--- escaped. But if you specify characters in `reserved_chars_allowed`
--- they are not escaped. This is useful for the "reserved" characters
--- in the URI specification, since those are allowed unescaped in some
--- portions of a URI.
---
--- ---
---
---@param unescaped string # the unescaped input string.
---@param reserved_chars_allowed? string # a string of reserved characters that are allowed to be used, or `nil`.
---@param allow_utf8 (boolean|nil) # `true` if the result can include UTF-8 characters.
---@return string # an escaped version of `unescaped`. The returned string should be freed when no longer needed.
function GLib.Uri.escape_string(unescaped, reserved_chars_allowed, allow_utf8) end

--- # function GLib.Uri.is_valid()
---
--- Parses `uri_string` according to `flags`, to determine whether it is a valid
--- [absolute URI][relative-absolute-uris], i.e. it does not need to be resolved
--- relative to another URI using `g_uri_parse_relative()`.
--- 
--- If it’s not a valid URI, an error is returned explaining how it’s invalid.
--- 
--- See `g_uri_split()`, and the definition of `GUriFlags`, for more
--- information on the effect of `flags`.
---
--- ---
---
---@param uri_string string # a string containing an absolute URI
---@param flags GLib.UriFlags # flags for parsing `uri_string`
---@return (boolean|nil) # `true` if `uri_string` is a valid absolute URI, `false` on error.
function GLib.Uri.is_valid(uri_string, flags) end

--- # function GLib.Uri.join()
---
--- Joins the given components together according to `flags` to create
--- an absolute URI string. `path` may not be `nil` (though it may be the empty
--- string).
--- 
--- When `host` is present, `path` must either be empty or begin with a slash (`/`)
--- character. When `host` is not present, `path` cannot begin with two slash
---    characters (`//`). See
--- [RFC 3986, section 3](https://tools.ietf.org/html/rfc3986`section`-3).
--- 
--- See also `g_uri_join_with_user()`, which allows specifying the
--- components of the ‘userinfo’ separately.
--- 
--- %G_URI_FLAGS_HAS_PASSWORD and %G_URI_FLAGS_HAS_AUTH_PARAMS are ignored if set
--- in `flags`.
---
--- ---
---
---@param flags GLib.UriFlags # flags describing how to build the URI string
---@param scheme? string # the URI scheme, or `nil`
---@param userinfo? string # the userinfo component, or `nil`
---@param host? string # the host component, or `nil`
---@param port integer # the port, or `-1`
---@param path string # the path component
---@param query? string # the query component, or `nil`
---@param fragment? string # the fragment, or `nil`
---@return string # an absolute URI string
function GLib.Uri.join(flags, scheme, userinfo, host, port, path, query, fragment) end

--- # function GLib.Uri.join_with_user()
---
--- Joins the given components together according to `flags` to create
--- an absolute URI string. `path` may not be `nil` (though it may be the empty
--- string).
--- 
--- In contrast to `g_uri_join()`, this allows specifying the components
--- of the ‘userinfo’ separately. It otherwise behaves the same.
--- 
--- %G_URI_FLAGS_HAS_PASSWORD and %G_URI_FLAGS_HAS_AUTH_PARAMS are ignored if set
--- in `flags`.
---
--- ---
---
---@param flags GLib.UriFlags # flags describing how to build the URI string
---@param scheme? string # the URI scheme, or `nil`
---@param user? string # the user component of the userinfo, or `nil`
---@param password? string # the password component of the userinfo, or `nil`
---@param auth_params? string # the auth params of the userinfo, or `nil`
---@param host? string # the host component, or `nil`
---@param port integer # the port, or `-1`
---@param path string # the path component
---@param query? string # the query component, or `nil`
---@param fragment? string # the fragment, or `nil`
---@return string # an absolute URI string
function GLib.Uri.join_with_user(flags, scheme, user, password, auth_params, host, port, path, query, fragment) end

--- # function GLib.Uri.list_extract_uris()
---
--- Splits an URI list conforming to the text/uri-list
--- mime type defined in RFC 2483 into individual URIs,
--- discarding any comments. The URIs are not validated.
---
--- ---
---
---@param uri_list string # an URI list
---@return unknown[] # a newly allocated `nil`-terminated list of strings holding the individual URIs. The array should be freed with `g_strfreev()`.
function GLib.Uri.list_extract_uris(uri_list) end

--- # function GLib.Uri.parse()
---
--- Parses `uri_string` according to `flags`. If the result is not a
--- valid [absolute URI][relative-absolute-uris], it will be discarded, and an
--- error returned.
---
--- ---
---
---@param uri_string string # a string representing an absolute URI
---@param flags GLib.UriFlags # flags describing how to parse `uri_string`
---@return GLib.Uri # a new `GUri`, or NULL on error.
function GLib.Uri.parse(uri_string, flags) end

--- # function GLib.Uri.parse_params()
---
--- Many URI schemes include one or more attribute/value pairs as part of the URI
--- value. This method can be used to parse them into a hash table. When an
--- attribute has multiple occurrences, the last value is the final returned
--- value. If you need to handle repeated attributes differently, use
--- `GUriParamsIter`.
--- 
--- The `params` string is assumed to still be `%`-encoded, but the returned
--- values will be fully decoded. (Thus it is possible that the returned values
--- may contain `=` or `separators`, if the value was encoded in the input.)
--- Invalid `%`-encoding is treated as with the %G_URI_FLAGS_PARSE_RELAXED
--- rules for `g_uri_parse()`. (However, if `params` is the path or query string
--- from a `GUri` that was parsed without %G_URI_FLAGS_PARSE_RELAXED and
--- %G_URI_FLAGS_ENCODED, then you already know that it does not contain any
--- invalid encoding.)
--- 
--- %G_URI_PARAMS_WWW_FORM is handled as documented for `g_uri_params_iter_init()`.
--- 
--- If %G_URI_PARAMS_CASE_INSENSITIVE is passed to `flags`, attributes will be
--- compared case-insensitively, so a params string `attr=123&Attr=456` will only
--- return a single attribute–value pair, `Attr=456`. Case will be preserved in
--- the returned attributes.
--- 
--- If `params` cannot be parsed (for example, it contains two `separators`
--- characters in a row), then `error` is set and `nil` is returned.
---
--- ---
---
---@param params string # a `%`-encoded string containing `attribute=value` parameters
---@param length integer # the length of `params`, or `-1` if it is nul-terminated
---@param separators string # the separator byte character set between parameters. (usually `&`, but sometimes `;` or both `&;`). Note that this function works on bytes not characters, so it can't be used to delimit UTF-8 strings for anything but ASCII characters. You may pass an empty set, in which case no splitting will occur.
---@param flags GLib.UriParamsFlags # flags to modify the way the parameters are handled.
---@return table<string, string> # A hash table of attribute/value pairs, with both names and values fully-decoded; or `nil` on error.
function GLib.Uri.parse_params(params, length, separators, flags) end

--- # function GLib.Uri.parse_scheme()
---
--- Gets the scheme portion of a URI string.
--- [RFC 3986](https://tools.ietf.org/html/rfc3986`section`-3) decodes the scheme
--- as:
--- ```c
--- URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
--- ```
--- Common schemes include `file`, `https`, `svn+ssh`, etc.
---
--- ---
---
---@param uri string # a valid URI.
---@return string # The ‘scheme’ component of the URI, or `nil` on error. The returned string should be freed when no longer needed.
function GLib.Uri.parse_scheme(uri) end

--- # function GLib.Uri.peek_scheme()
---
--- Gets the scheme portion of a URI string.
--- [RFC 3986](https://tools.ietf.org/html/rfc3986`section`-3) decodes the scheme
--- as:
--- ```c
--- URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
--- ```
--- Common schemes include `file`, `https`, `svn+ssh`, etc.
--- 
--- Unlike `g_uri_parse_scheme()`, the returned scheme is normalized to
--- all-lowercase and does not need to be freed.
---
--- ---
---
---@param uri string # a valid URI.
---@return string # The ‘scheme’ component of the URI, or `nil` on error. The returned string is normalized to all-lowercase, and interned via `g_intern_string()`, so it does not need to be freed.
function GLib.Uri.peek_scheme(uri) end

--- # function GLib.Uri.resolve_relative()
---
--- Parses `uri_ref` according to `flags` and, if it is a
--- [relative URI][relative-absolute-uris], resolves it relative to
--- `base_uri_string`. If the result is not a valid absolute URI, it will be
--- discarded, and an error returned.
--- 
--- (If `base_uri_string` is `nil`, this just returns `uri_ref`, or
--- `nil` if `uri_ref` is invalid or not absolute.)
---
--- ---
---
---@param base_uri_string? string # a string representing a base URI
---@param uri_ref string # a string representing a relative or absolute URI
---@param flags GLib.UriFlags # flags describing how to parse `uri_ref`
---@return string # the resolved URI string, or NULL on error.
function GLib.Uri.resolve_relative(base_uri_string, uri_ref, flags) end

--- # function GLib.Uri.split()
---
--- Parses `uri_ref` (which can be an
--- [absolute or relative URI][relative-absolute-uris]) according to `flags`, and
--- returns the pieces. Any component that doesn't appear in `uri_ref` will be
--- returned as `nil` (but note that all URIs always have a path component,
--- though it may be the empty string).
--- 
--- If `flags` contains %G_URI_FLAGS_ENCODED, then `%`-encoded characters in
--- `uri_ref` will remain encoded in the output strings. (If not,
--- then all such characters will be decoded.) Note that decoding will
--- only work if the URI components are ASCII or UTF-8, so you will
--- need to use %G_URI_FLAGS_ENCODED if they are not.
--- 
--- Note that the %G_URI_FLAGS_HAS_PASSWORD and
--- %G_URI_FLAGS_HAS_AUTH_PARAMS `flags` are ignored by `g_uri_split()`,
--- since it always returns only the full userinfo; use
--- `g_uri_split_with_user()` if you want it split up.
---
--- ---
---
---@param uri_ref string # a string containing a relative or absolute URI
---@param flags GLib.UriFlags # flags for parsing `uri_ref`
---@param scheme? string # on return, contains the scheme (converted to lowercase), or `nil`
---@param userinfo? string # on return, contains the userinfo, or `nil`
---@param host? string # on return, contains the host, or `nil`
---@param port? integer # on return, contains the port, or `-1`
---@param path? string # on return, contains the path
---@param query? string # on return, contains the query, or `nil`
---@param fragment? string # on return, contains the fragment, or `nil`
---@return (boolean|nil) # `true` if `uri_ref` parsed successfully, `false` on error.
function GLib.Uri.split(uri_ref, flags, scheme, userinfo, host, port, path, query, fragment) end

--- # function GLib.Uri.split_network()
---
--- Parses `uri_string` (which must be an [absolute URI][relative-absolute-uris])
--- according to `flags`, and returns the pieces relevant to connecting to a host.
--- See the documentation for `g_uri_split()` for more details; this is
--- mostly a wrapper around that function with simpler arguments.
--- However, it will return an error if `uri_string` is a relative URI,
--- or does not contain a hostname component.
---
--- ---
---
---@param uri_string string # a string containing an absolute URI
---@param flags GLib.UriFlags # flags for parsing `uri_string`
---@param scheme? string # on return, contains the scheme (converted to lowercase), or `nil`
---@param host? string # on return, contains the host, or `nil`
---@param port? integer # on return, contains the port, or `-1`
---@return (boolean|nil) # `true` if `uri_string` parsed successfully, `false` on error.
function GLib.Uri.split_network(uri_string, flags, scheme, host, port) end

--- # function GLib.Uri.split_with_user()
---
--- Parses `uri_ref` (which can be an
--- [absolute or relative URI][relative-absolute-uris]) according to `flags`, and
--- returns the pieces. Any component that doesn't appear in `uri_ref` will be
--- returned as `nil` (but note that all URIs always have a path component,
--- though it may be the empty string).
--- 
--- See `g_uri_split()`, and the definition of `GUriFlags`, for more
--- information on the effect of `flags`. Note that `password` will only
--- be parsed out if `flags` contains %G_URI_FLAGS_HAS_PASSWORD, and
--- `auth_params` will only be parsed out if `flags` contains
--- %G_URI_FLAGS_HAS_AUTH_PARAMS.
---
--- ---
---
---@param uri_ref string # a string containing a relative or absolute URI
---@param flags GLib.UriFlags # flags for parsing `uri_ref`
---@param scheme? string # on return, contains the scheme (converted to lowercase), or `nil`
---@param user? string # on return, contains the user, or `nil`
---@param password? string # on return, contains the password, or `nil`
---@param auth_params? string # on return, contains the auth_params, or `nil`
---@param host? string # on return, contains the host, or `nil`
---@param port? integer # on return, contains the port, or `-1`
---@param path? string # on return, contains the path
---@param query? string # on return, contains the query, or `nil`
---@param fragment? string # on return, contains the fragment, or `nil`
---@return (boolean|nil) # `true` if `uri_ref` parsed successfully, `false` on error.
function GLib.Uri.split_with_user(uri_ref, flags, scheme, user, password, auth_params, host, port, path, query, fragment) end

--- # function GLib.Uri.unescape_bytes()
---
--- Unescapes a segment of an escaped string as binary data.
--- 
--- Note that in contrast to `g_uri_unescape_string()`, this does allow
--- nul bytes to appear in the output.
--- 
--- If any of the characters in `illegal_characters` appears as an escaped
--- character in `escaped_string`, then that is an error and `nil` will be
--- returned. This is useful if you want to avoid for instance having a slash
--- being expanded in an escaped path element, which might confuse pathname
--- handling.
---
--- ---
---
---@param escaped_string string # A URI-escaped string
---@param length integer # the length (in bytes) of `escaped_string` to escape, or `-1` if it is nul-terminated.
---@param illegal_characters? string # a string of illegal characters not to be allowed, or `nil`.
---@return GLib.Bytes # an unescaped version of `escaped_string` or `nil` on error (if decoding failed, using %G_URI_ERROR_FAILED error code). The returned `GBytes` should be unreffed when no longer needed.
function GLib.Uri.unescape_bytes(escaped_string, length, illegal_characters) end

--- # function GLib.Uri.unescape_segment()
---
--- Unescapes a segment of an escaped string.
--- 
--- If any of the characters in `illegal_characters` or the NUL
--- character appears as an escaped character in `escaped_string`, then
--- that is an error and `nil` will be returned. This is useful if you
--- want to avoid for instance having a slash being expanded in an
--- escaped path element, which might confuse pathname handling.
--- 
--- Note: `NUL` byte is not accepted in the output, in contrast to
--- `g_uri_unescape_bytes()`.
---
--- ---
---
---@param escaped_string? string # A string, may be `nil`
---@param escaped_string_end? string # Pointer to end of `escaped_string`, may be `nil`
---@param illegal_characters? string # An optional string of illegal characters not to be allowed, may be `nil`
---@return string # an unescaped version of `escaped_string`, or `nil` on error. The returned string should be freed when no longer needed. As a special case if `nil` is given for `escaped_string`, this function will return `nil`.
function GLib.Uri.unescape_segment(escaped_string, escaped_string_end, illegal_characters) end

--- # function GLib.Uri.unescape_string()
---
--- Unescapes a whole escaped string.
--- 
--- If any of the characters in `illegal_characters` or the NUL
--- character appears as an escaped character in `escaped_string`, then
--- that is an error and `nil` will be returned. This is useful if you
--- want to avoid for instance having a slash being expanded in an
--- escaped path element, which might confuse pathname handling.
---
--- ---
---
---@param escaped_string string # an escaped string to be unescaped.
---@param illegal_characters? string # a string of illegal characters not to be allowed, or `nil`.
---@return string # an unescaped version of `escaped_string`. The returned string should be freed when no longer needed.
function GLib.Uri.unescape_string(escaped_string, illegal_characters) end

---@enum GLib.UriError
GLib.UriError = {}

---@enum GLib.UriFlags
GLib.UriFlags = {}

---@enum GLib.UriHideFlags
GLib.UriHideFlags = {}

---@enum GLib.UriParamsFlags
GLib.UriParamsFlags = {}

--- # record GLib.UriParamsIter
---
--- Many URI schemes include one or more attribute/value pairs as part of the URI
--- value. For example `scheme://server/path?query=string&is=there` has two
--- attributes – `query=string` and `is=there` – in its query part.
--- 
--- A `GUriParamsIter` structure represents an iterator that can be used to
--- iterate over the attribute/value pairs of a URI query string. `GUriParamsIter`
--- structures are typically allocated on the stack and then initialized with
--- `g_uri_params_iter_init()`. See the documentation for `g_uri_params_iter_init()`
--- for a usage example.
---
--- ---
---
---@class GLib.UriParamsIter
---@field dummy0 integer
---@field dummy1 userdata
---@field dummy2 userdata
---@field dummy3 unknown[]
GLib.UriParamsIter = {}

--- # method GLib.UriParamsIter:init()
---
--- Initializes an attribute/value pair iterator.
--- 
--- The iterator keeps pointers to the `params` and `separators` arguments, those
--- variables must thus outlive the iterator and not be modified during the
--- iteration.
--- 
--- If %G_URI_PARAMS_WWW_FORM is passed in `flags`, `+` characters in the param
--- string will be replaced with spaces in the output. For example, `foo=bar+baz`
--- will give attribute `foo` with value `bar baz`. This is commonly used on the
--- web (the `https` and `http` schemes only), but is deprecated in favour of
--- the equivalent of encoding spaces as `%20`.
--- 
--- Unlike with `g_uri_parse_params()`, %G_URI_PARAMS_CASE_INSENSITIVE has no
--- effect if passed to `flags` for `g_uri_params_iter_init()`. The caller is
--- responsible for doing their own case-insensitive comparisons.
--- 
--- ```c
--- GUriParamsIter iter;
--- GError *error = NULL;
--- gchar *unowned_attr, *unowned_value;
--- 
--- g_uri_params_iter_init (&iter, "foo=bar&baz=bar&Foo=frob&baz=bar2", -1, "&", G_URI_PARAMS_NONE);
--- while (g_uri_params_iter_next (&iter, &unowned_attr, &unowned_value, &error))
---   {
---     g_autofree gchar *attr = g_steal_pointer (&unowned_attr);
---     g_autofree gchar *value = g_steal_pointer (&unowned_value);
---     // do something with attr and value; this code will be called 4 times
---     // for the params string in this example: once with attr=foo and value=bar,
---     // then with baz/bar, then Foo/frob, then baz/bar2.
---   }
--- if (error)
---   // handle parsing error
--- ```
---
--- ---
---
---@param self GLib.UriParamsIter # an uninitialized `GUriParamsIter`
---@param params string # a `%`-encoded string containing `attribute=value` parameters
---@param length integer # the length of `params`, or `-1` if it is nul-terminated
---@param separators string # the separator byte character set between parameters. (usually `&`, but sometimes `;` or both `&;`). Note that this function works on bytes not characters, so it can't be used to delimit UTF-8 strings for anything but ASCII characters. You may pass an empty set, in which case no splitting will occur.
---@param flags GLib.UriParamsFlags # flags to modify the way the parameters are handled.
---@return nil
function GLib.UriParamsIter:init(params, length, separators, flags) end

--- # method GLib.UriParamsIter:next()
---
--- Advances `iter` and retrieves the next attribute/value. `false` is returned if
--- an error has occurred (in which case `error` is set), or if the end of the
--- iteration is reached (in which case `attribute` and `value` are set to `nil`
--- and the iterator becomes invalid). If `true` is returned,
--- `g_uri_params_iter_next()` may be called again to receive another
--- attribute/value pair.
--- 
--- Note that the same `attribute` may be returned multiple times, since URIs
--- allow repeated attributes.
---
--- ---
---
---@param self GLib.UriParamsIter # an initialized `GUriParamsIter`
---@param attribute? string # on return, contains the attribute, or `nil`.
---@param value? string # on return, contains the value, or `nil`.
---@return (boolean|nil) # `false` if the end of the parameters has been reached or an error was encountered. `true` otherwise.
function GLib.UriParamsIter:next(attribute, value) end

---@enum GLib.UserDirectory
GLib.UserDirectory = {}

--- # record GLib.Variant
---
--- `GVariant` is a variant datatype; it can contain one or more values
--- along with information about the type of the values.
--- 
--- A `GVariant` may contain simple types, like an integer, or a boolean value;
--- or complex types, like an array of two strings, or a dictionary of key
--- value pairs. A `GVariant` is also immutable: once it's been created neither
--- its type nor its content can be modified further.
--- 
--- GVariant is useful whenever data needs to be serialized, for example when
--- sending method parameters in D-Bus, or when saving settings using GSettings.
--- 
--- When creating a new `GVariant`, you pass the data you want to store in it
--- along with a string representing the type of data you wish to pass to it.
--- 
--- For instance, if you want to create a `GVariant` holding an integer value you
--- can use:
--- 
--- ```c
---   GVariant *v = g_variant_new ("u", 40);
--- ```
--- 
--- The string "u" in the first argument tells `GVariant` that the data passed to
--- the constructor (40) is going to be an unsigned integer.
--- 
--- More advanced examples of `GVariant` in use can be found in documentation for
--- [GVariant format strings][gvariant-format-strings-pointers].
--- 
--- The range of possible values is determined by the type.
--- 
--- The type system used by `GVariant` is `GVariantType`.
--- 
--- `GVariant` instances always have a type and a value (which are given
--- at construction time).  The type and value of a `GVariant` instance
--- can never change other than by the `GVariant` itself being
--- destroyed.  A `GVariant` cannot contain a pointer.
--- 
--- `GVariant` is reference counted using `g_variant_ref()` and
--- `g_variant_unref()`.  `GVariant` also has floating reference counts --
--- see `g_variant_ref_sink()`.
--- 
--- `GVariant` is completely threadsafe.  A `GVariant` instance can be
--- concurrently accessed in any way from any number of threads without
--- problems.
--- 
--- `GVariant` is heavily optimised for dealing with data in serialized
--- form.  It works particularly well with data located in memory-mapped
--- files.  It can perform nearly all deserialization operations in a
--- small constant time, usually touching only a single memory page.
--- Serialized `GVariant` data can also be sent over the network.
--- 
--- `GVariant` is largely compatible with D-Bus.  Almost all types of
--- `GVariant` instances can be sent over D-Bus.  See `GVariantType` for
--- exceptions.  (However, `GVariant`'s serialization format is not the same
--- as the serialization format of a D-Bus message body: use `GDBusMessage`,
--- in the gio library, for those.)
--- 
--- For space-efficiency, the `GVariant` serialization format does not
--- automatically include the variant's length, type or endianness,
--- which must either be implied from context (such as knowledge that a
--- particular file format always contains a little-endian
--- %G_VARIANT_TYPE_VARIANT which occupies the whole length of the file)
--- or supplied out-of-band (for instance, a length, type and/or endianness
--- indicator could be placed at the beginning of a file, network message
--- or network stream).
--- 
--- A `GVariant`'s size is limited mainly by any lower level operating
--- system constraints, such as the number of bits in `gsize`.  For
--- example, it is reasonable to have a 2GB file mapped into memory
--- with `GMappedFile`, and call `g_variant_new_from_data()` on it.
--- 
--- For convenience to C programmers, `GVariant` features powerful
--- varargs-based value construction and destruction.  This feature is
--- designed to be embedded in other libraries.
--- 
--- There is a Python-inspired text language for describing `GVariant`
--- values.  `GVariant` includes a printer for this language and a parser
--- with type inferencing.
--- 
--- ## Memory Use
--- 
--- `GVariant` tries to be quite efficient with respect to memory use.
--- This section gives a rough idea of how much memory is used by the
--- current implementation.  The information here is subject to change
--- in the future.
--- 
--- The memory allocated by `GVariant` can be grouped into 4 broad
--- purposes: memory for serialized data, memory for the type
--- information cache, buffer management memory and memory for the
--- `GVariant` structure itself.
--- 
--- ## Serialized Data Memory
--- 
--- This is the memory that is used for storing GVariant data in
--- serialized form.  This is what would be sent over the network or
--- what would end up on disk, not counting any indicator of the
--- endianness, or of the length or type of the top-level variant.
--- 
--- The amount of memory required to store a boolean is 1 byte. 16,
--- 32 and 64 bit integers and double precision floating point numbers
--- use their "natural" size.  Strings (including object path and
--- signature strings) are stored with a nul terminator, and as such
--- use the length of the string plus 1 byte.
--- 
--- Maybe types use no space at all to represent the null value and
--- use the same amount of space (sometimes plus one byte) as the
--- equivalent non-maybe-typed value to represent the non-null case.
--- 
--- Arrays use the amount of space required to store each of their
--- members, concatenated.  Additionally, if the items stored in an
--- array are not of a fixed-size (ie: strings, other arrays, etc)
--- then an additional framing offset is stored for each item.  The
--- size of this offset is either 1, 2 or 4 bytes depending on the
--- overall size of the container.  Additionally, extra padding bytes
--- are added as required for alignment of child values.
--- 
--- Tuples (including dictionary entries) use the amount of space
--- required to store each of their members, concatenated, plus one
--- framing offset (as per arrays) for each non-fixed-sized item in
--- the tuple, except for the last one.  Additionally, extra padding
--- bytes are added as required for alignment of child values.
--- 
--- Variants use the same amount of space as the item inside of the
--- variant, plus 1 byte, plus the length of the type string for the
--- item inside the variant.
--- 
--- As an example, consider a dictionary mapping strings to variants.
--- In the case that the dictionary is empty, 0 bytes are required for
--- the serialization.
--- 
--- If we add an item "width" that maps to the int32 value of 500 then
--- we will use 4 byte to store the int32 (so 6 for the variant
--- containing it) and 6 bytes for the string.  The variant must be
--- aligned to 8 after the 6 bytes of the string, so that's 2 extra
--- bytes.  6 (string) + 2 (padding) + 6 (variant) is 14 bytes used
--- for the dictionary entry.  An additional 1 byte is added to the
--- array as a framing offset making a total of 15 bytes.
--- 
--- If we add another entry, "title" that maps to a nullable string
--- that happens to have a value of null, then we use 0 bytes for the
--- null value (and 3 bytes for the variant to contain it along with
--- its type string) plus 6 bytes for the string.  Again, we need 2
--- padding bytes.  That makes a total of 6 + 2 + 3 = 11 bytes.
--- 
--- We now require extra padding between the two items in the array.
--- After the 14 bytes of the first item, that's 2 bytes required.
--- We now require 2 framing offsets for an extra two
--- bytes. 14 + 2 + 11 + 2 = 29 bytes to encode the entire two-item
--- dictionary.
--- 
--- ## Type Information Cache
--- 
--- For each GVariant type that currently exists in the program a type
--- information structure is kept in the type information cache.  The
--- type information structure is required for rapid deserialization.
--- 
--- Continuing with the above example, if a `GVariant` exists with the
--- type "a{sv}" then a type information struct will exist for
--- "a{sv}", "{sv}", "s", and "v".  Multiple uses of the same type
--- will share the same type information.  Additionally, all
--- single-digit types are stored in read-only static memory and do
--- not contribute to the writable memory footprint of a program using
--- `GVariant`.
--- 
--- Aside from the type information structures stored in read-only
--- memory, there are two forms of type information.  One is used for
--- container types where there is a single element type: arrays and
--- maybe types.  The other is used for container types where there
--- are multiple element types: tuples and dictionary entries.
--- 
--- Array type info structures are 6 * sizeof (void *), plus the
--- memory required to store the type string itself.  This means that
--- on 32-bit systems, the cache entry for "a{sv}" would require 30
--- bytes of memory (plus malloc overhead).
--- 
--- Tuple type info structures are 6 * sizeof (void *), plus 4 *
--- sizeof (void *) for each item in the tuple, plus the memory
--- required to store the type string itself.  A 2-item tuple, for
--- example, would have a type information structure that consumed
--- writable memory in the size of 14 * sizeof (void *) (plus type
--- string)  This means that on 32-bit systems, the cache entry for
--- "{sv}" would require 61 bytes of memory (plus malloc overhead).
--- 
--- This means that in total, for our "a{sv}" example, 91 bytes of
--- type information would be allocated.
--- 
--- The type information cache, additionally, uses a `GHashTable` to
--- store and look up the cached items and stores a pointer to this
--- hash table in static storage.  The hash table is freed when there
--- are zero items in the type cache.
--- 
--- Although these sizes may seem large it is important to remember
--- that a program will probably only have a very small number of
--- different types of values in it and that only one type information
--- structure is required for many different values of the same type.
--- 
--- ## Buffer Management Memory
--- 
--- `GVariant` uses an internal buffer management structure to deal
--- with the various different possible sources of serialized data
--- that it uses.  The buffer is responsible for ensuring that the
--- correct call is made when the data is no longer in use by
--- `GVariant`.  This may involve a `g_free()` or a `g_slice_free()` or
--- even `g_mapped_file_unref()`.
--- 
--- One buffer management structure is used for each chunk of
--- serialized data.  The size of the buffer management structure
--- is 4 * (void *).  On 32-bit systems, that's 16 bytes.
--- 
--- ## GVariant structure
--- 
--- The size of a `GVariant` structure is 6 * (void *).  On 32-bit
--- systems, that's 24 bytes.
--- 
--- `GVariant` structures only exist if they are explicitly created
--- with API calls.  For example, if a `GVariant` is constructed out of
--- serialized data for the example given above (with the dictionary)
--- then although there are 9 individual values that comprise the
--- entire dictionary (two keys, two values, two variants containing
--- the values, two dictionary entries, plus the dictionary itself),
--- only 1 `GVariant` instance exists -- the one referring to the
--- dictionary.
--- 
--- If calls are made to start accessing the other values then
--- `GVariant` instances will exist for those values only for as long
--- as they are in use (ie: until you call `g_variant_unref()`).  The
--- type information is shared.  The serialized data and the buffer
--- management structure for that serialized data is shared by the
--- child.
--- 
--- ## Summary
--- 
--- To put the entire example together, for our dictionary mapping
--- strings to variants (with two entries, as given above), we are
--- using 91 bytes of memory for type information, 29 bytes of memory
--- for the serialized data, 16 bytes for buffer management and 24
--- bytes for the `GVariant` instance, or a total of 160 bytes, plus
--- malloc overhead.  If we were to use `g_variant_get_child_value()` to
--- access the two dictionary entries, we would use an additional 48
--- bytes.  If we were to have other dictionaries of the same type, we
--- would use more memory for the serialized data and buffer
--- management for those dictionaries, but the type information would
--- be shared.
---
--- ---
---
---@class GLib.Variant
GLib.Variant = {}

--- # method GLib.Variant:byteswap()
---
--- Performs a byteswapping operation on the contents of `value`.  The
--- result is that all multi-byte numeric data contained in `value` is
--- byteswapped.  That includes 16, 32, and 64bit signed and unsigned
--- integers as well as file handles and double precision floating point
--- values.
--- 
--- This function is an identity mapping on any value that does not
--- contain multi-byte numeric data.  That include strings, booleans,
--- bytes and containers containing only these things (recursively).
--- 
--- While this function can safely handle untrusted, non-normal data, it is
--- recommended to check whether the input is in normal form beforehand, using
--- `g_variant_is_normal_form()`, and to reject non-normal inputs if your
--- application can be strict about what inputs it rejects.
--- 
--- The returned value is always in normal form and is marked as trusted.
--- A full, not floating, reference is returned.
---
--- ---
---
---@param self GLib.Variant # a `GVariant`
---@return GLib.Variant # the byteswapped form of `value`
function GLib.Variant:byteswap() end

--- # method GLib.Variant:check_format_string()
---
--- Checks if calling `g_variant_get()` with `format_string` on `value` would
--- be valid from a type-compatibility standpoint.  `format_string` is
--- assumed to be a valid format string (from a syntactic standpoint).
--- 
--- If `copy_only` is `true` then this function additionally checks that it
--- would be safe to call `g_variant_unref()` on `value` immediately after
--- the call to `g_variant_get()` without invalidating the result.  This is
--- only possible if deep copies are made (ie: there are no pointers to
--- the data inside of the soon-to-be-freed `GVariant` instance).  If this
--- check fails then a `g_critical()` is printed and `false` is returned.
--- 
--- This function is meant to be used by functions that wish to provide
--- varargs accessors to `GVariant` values of uncertain values (eg:
--- `g_variant_lookup()` or `g_menu_model_get_item_attribute()`).
---
--- ---
---
---@param self GLib.Variant # a `GVariant`
---@param format_string string # a valid `GVariant` format string
---@param copy_only (boolean|nil) # `true` to ensure the format string makes deep copies
---@return (boolean|nil) # `true` if `format_string` is safe to use
function GLib.Variant:check_format_string(format_string, copy_only) end

--- # method GLib.Variant:classify()
---
--- Classifies `value` according to its top-level type.
---
--- ---
---
---@param self GLib.Variant # a `GVariant`
---@return GLib.VariantClass # the `GVariantClass` of `value`
function GLib.Variant:classify() end

--- # method GLib.Variant:compare()
---
--- Compares `one` and `two`.
--- 
--- The types of `one` and `two` are `gconstpointer` only to allow use of
--- this function with `GTree`, `GPtrArray`, etc.  They must each be a
--- `GVariant`.
--- 
--- Comparison is only defined for basic types (ie: booleans, numbers,
--- strings).  For booleans, `false` is less than `true`.  Numbers are
--- ordered in the usual way.  Strings are in ASCII lexographical order.
--- 
--- It is a programmer error to attempt to compare container values or
--- two values that have types that are not exactly equal.  For example,
--- you cannot compare a 32-bit signed integer with a 32-bit unsigned
--- integer.  Also note that this function is not particularly
--- well-behaved when it comes to comparison of doubles; in particular,
--- the handling of incomparable values (ie: NaN) is undefined.
--- 
--- If you only require an equality comparison, `g_variant_equal()` is more
--- general.
---
--- ---
---
---@param self GLib.Variant # a basic-typed `GVariant` instance
---@param two GLib.Variant # a `GVariant` instance of the same type
---@return integer # negative value if a < b; zero if a = b; positive value if a > b.
function GLib.Variant:compare(two) end

--- # method GLib.Variant:dup_bytestring()
---
--- Similar to `g_variant_get_bytestring()` except that instead of
--- returning a constant string, the string is duplicated.
--- 
--- The return value must be freed using `g_free()`.
---
--- ---
---
---@param self GLib.Variant # an array-of-bytes `GVariant` instance
---@param length? integer # a pointer to a `gsize`, to store the length (not including the nul terminator)
---@return unknown[] # a newly allocated string
function GLib.Variant:dup_bytestring(length) end

--- # method GLib.Variant:dup_bytestring_array()
---
--- Gets the contents of an array of array of bytes `GVariant`.  This call
--- makes a deep copy; the return result should be released with
--- `g_strfreev()`.
--- 
--- If `length` is non-`nil` then the number of elements in the result is
--- stored there.  In any case, the resulting array will be
--- `nil`-terminated.
--- 
--- For an empty array, `length` will be set to 0 and a pointer to a
--- `nil` pointer will be returned.
---
--- ---
---
---@param self GLib.Variant # an array of array of bytes `GVariant` ('aay')
---@param length? integer # the length of the result, or `nil`
---@return unknown[] # an array of strings
function GLib.Variant:dup_bytestring_array(length) end

--- # method GLib.Variant:dup_objv()
---
--- Gets the contents of an array of object paths `GVariant`.  This call
--- makes a deep copy; the return result should be released with
--- `g_strfreev()`.
--- 
--- If `length` is non-`nil` then the number of elements in the result
--- is stored there.  In any case, the resulting array will be
--- `nil`-terminated.
--- 
--- For an empty array, `length` will be set to 0 and a pointer to a
--- `nil` pointer will be returned.
---
--- ---
---
---@param self GLib.Variant # an array of object paths `GVariant`
---@param length? integer # the length of the result, or `nil`
---@return unknown[] # an array of strings
function GLib.Variant:dup_objv(length) end

--- # method GLib.Variant:dup_string()
---
--- Similar to `g_variant_get_string()` except that instead of returning
--- a constant string, the string is duplicated.
--- 
--- The string will always be UTF-8 encoded.
--- 
--- The return value must be freed using `g_free()`.
---
--- ---
---
---@param self GLib.Variant # a string `GVariant` instance
---@param length integer # a pointer to a `gsize`, to store the length
---@return string # a newly allocated string, UTF-8 encoded
function GLib.Variant:dup_string(length) end

--- # method GLib.Variant:dup_strv()
---
--- Gets the contents of an array of strings `GVariant`.  This call
--- makes a deep copy; the return result should be released with
--- `g_strfreev()`.
--- 
--- If `length` is non-`nil` then the number of elements in the result
--- is stored there.  In any case, the resulting array will be
--- `nil`-terminated.
--- 
--- For an empty array, `length` will be set to 0 and a pointer to a
--- `nil` pointer will be returned.
---
--- ---
---
---@param self GLib.Variant # an array of strings `GVariant`
---@param length? integer # the length of the result, or `nil`
---@return unknown[] # an array of strings
function GLib.Variant:dup_strv(length) end

--- # method GLib.Variant:equal()
---
--- Checks if `one` and `two` have the same type and value.
--- 
--- The types of `one` and `two` are `gconstpointer` only to allow use of
--- this function with `GHashTable`.  They must each be a `GVariant`.
---
--- ---
---
---@param self GLib.Variant # a `GVariant` instance
---@param two GLib.Variant # a `GVariant` instance
---@return (boolean|nil) # `true` if `one` and `two` are equal
function GLib.Variant:equal(two) end

--- # method GLib.Variant:get_boolean()
---
--- Returns the boolean value of `value`.
--- 
--- It is an error to call this function with a `value` of any type
--- other than %G_VARIANT_TYPE_BOOLEAN.
---
--- ---
---
---@param self GLib.Variant # a boolean `GVariant` instance
---@return (boolean|nil) # `true` or `false`
function GLib.Variant:get_boolean() end

--- # method GLib.Variant:get_byte()
---
--- Returns the byte value of `value`.
--- 
--- It is an error to call this function with a `value` of any type
--- other than %G_VARIANT_TYPE_BYTE.
---
--- ---
---
---@param self GLib.Variant # a byte `GVariant` instance
---@return integer # a `guint8`
function GLib.Variant:get_byte() end

--- # method GLib.Variant:get_bytestring()
---
--- Returns the string value of a `GVariant` instance with an
--- array-of-bytes type.  The string has no particular encoding.
--- 
--- If the array does not end with a nul terminator character, the empty
--- string is returned.  For this reason, you can always trust that a
--- non-`nil` nul-terminated string will be returned by this function.
--- 
--- If the array contains a nul terminator character somewhere other than
--- the last byte then the returned string is the string, up to the first
--- such nul character.
--- 
--- `g_variant_get_fixed_array()` should be used instead if the array contains
--- arbitrary data that could not be nul-terminated or could contain nul bytes.
--- 
--- It is an error to call this function with a `value` that is not an
--- array of bytes.
--- 
--- The return value remains valid as long as `value` exists.
---
--- ---
---
---@param self GLib.Variant # an array-of-bytes `GVariant` instance
---@return unknown[] # the constant string
function GLib.Variant:get_bytestring() end

--- # method GLib.Variant:get_bytestring_array()
---
--- Gets the contents of an array of array of bytes `GVariant`.  This call
--- makes a shallow copy; the return result should be released with
--- `g_free()`, but the individual strings must not be modified.
--- 
--- If `length` is non-`nil` then the number of elements in the result is
--- stored there.  In any case, the resulting array will be
--- `nil`-terminated.
--- 
--- For an empty array, `length` will be set to 0 and a pointer to a
--- `nil` pointer will be returned.
---
--- ---
---
---@param self GLib.Variant # an array of array of bytes `GVariant` ('aay')
---@param length? integer # the length of the result, or `nil`
---@return unknown[] # an array of constant strings
function GLib.Variant:get_bytestring_array(length) end

--- # method GLib.Variant:get_child_value()
---
--- Reads a child item out of a container `GVariant` instance.  This
--- includes variants, maybes, arrays, tuples and dictionary
--- entries.  It is an error to call this function on any other type of
--- `GVariant`.
--- 
--- It is an error if `index_` is greater than the number of child items
--- in the container.  See `g_variant_n_children()`.
--- 
--- The returned value is never floating.  You should free it with
--- `g_variant_unref()` when you're done with it.
--- 
--- Note that values borrowed from the returned child are not guaranteed to
--- still be valid after the child is freed even if you still hold a reference
--- to `value`, if `value` has not been serialized at the time this function is
--- called. To avoid this, you can serialize `value` by calling
--- `g_variant_get_data()` and optionally ignoring the return value.
--- 
--- There may be implementation specific restrictions on deeply nested values,
--- which would result in the unit tuple being returned as the child value,
--- instead of further nested children. `GVariant` is guaranteed to handle
--- nesting up to at least 64 levels.
--- 
--- This function is O(1).
---
--- ---
---
---@param self GLib.Variant # a container `GVariant`
---@param index_ integer # the index of the child to fetch
---@return GLib.Variant # the child at the specified index
function GLib.Variant:get_child_value(index_) end

--- # method GLib.Variant:get_data()
---
--- Returns a pointer to the serialized form of a `GVariant` instance.
--- The returned data may not be in fully-normalised form if read from an
--- untrusted source.  The returned data must not be freed; it remains
--- valid for as long as `value` exists.
--- 
--- If `value` is a fixed-sized value that was deserialized from a
--- corrupted serialized container then `nil` may be returned.  In this
--- case, the proper thing to do is typically to use the appropriate
--- number of nul bytes in place of `value`.  If `value` is not fixed-sized
--- then `nil` is never returned.
--- 
--- In the case that `value` is already in serialized form, this function
--- is O(1).  If the value is not already in serialized form,
--- serialization occurs implicitly and is approximately O(n) in the size
--- of the result.
--- 
--- To deserialize the data returned by this function, in addition to the
--- serialized data, you must know the type of the `GVariant`, and (if the
--- machine might be different) the endianness of the machine that stored
--- it. As a result, file formats or network messages that incorporate
--- serialized `GVariants` must include this information either
--- implicitly (for instance "the file always contains a
--- %G_VARIANT_TYPE_VARIANT and it is always in little-endian order") or
--- explicitly (by storing the type and/or endianness in addition to the
--- serialized data).
---
--- ---
---
---@param self GLib.Variant # a `GVariant` instance
---@return userdata # the serialized form of `value`, or `nil`
function GLib.Variant:get_data() end

--- # method GLib.Variant:get_data_as_bytes()
---
--- Returns a pointer to the serialized form of a `GVariant` instance.
--- The semantics of this function are exactly the same as
--- `g_variant_get_data()`, except that the returned `GBytes` holds
--- a reference to the variant data.
---
--- ---
---
---@param self GLib.Variant # a `GVariant`
---@return GLib.Bytes # A new `GBytes` representing the variant data
function GLib.Variant:get_data_as_bytes() end

--- # method GLib.Variant:get_double()
---
--- Returns the double precision floating point value of `value`.
--- 
--- It is an error to call this function with a `value` of any type
--- other than %G_VARIANT_TYPE_DOUBLE.
---
--- ---
---
---@param self GLib.Variant # a double `GVariant` instance
---@return number # a `gdouble`
function GLib.Variant:get_double() end

--- # method GLib.Variant:get_handle()
---
--- Returns the 32-bit signed integer value of `value`.
--- 
--- It is an error to call this function with a `value` of any type other
--- than %G_VARIANT_TYPE_HANDLE.
--- 
--- By convention, handles are indexes into an array of file descriptors
--- that are sent alongside a D-Bus message.  If you're not interacting
--- with D-Bus, you probably don't need them.
---
--- ---
---
---@param self GLib.Variant # a handle `GVariant` instance
---@return integer # a `gint32`
function GLib.Variant:get_handle() end

--- # method GLib.Variant:get_int16()
---
--- Returns the 16-bit signed integer value of `value`.
--- 
--- It is an error to call this function with a `value` of any type
--- other than %G_VARIANT_TYPE_INT16.
---
--- ---
---
---@param self GLib.Variant # an int16 `GVariant` instance
---@return integer # a `gint16`
function GLib.Variant:get_int16() end

--- # method GLib.Variant:get_int32()
---
--- Returns the 32-bit signed integer value of `value`.
--- 
--- It is an error to call this function with a `value` of any type
--- other than %G_VARIANT_TYPE_INT32.
---
--- ---
---
---@param self GLib.Variant # an int32 `GVariant` instance
---@return integer # a `gint32`
function GLib.Variant:get_int32() end

--- # method GLib.Variant:get_int64()
---
--- Returns the 64-bit signed integer value of `value`.
--- 
--- It is an error to call this function with a `value` of any type
--- other than %G_VARIANT_TYPE_INT64.
---
--- ---
---
---@param self GLib.Variant # an int64 `GVariant` instance
---@return integer # a `gint64`
function GLib.Variant:get_int64() end

--- # method GLib.Variant:get_maybe()
---
--- Given a maybe-typed `GVariant` instance, extract its value.  If the
--- value is Nothing, then this function returns `nil`.
---
--- ---
---
---@param self GLib.Variant # a maybe-typed value
---@return GLib.Variant # the contents of `value`, or `nil`
function GLib.Variant:get_maybe() end

--- # method GLib.Variant:get_normal_form()
---
--- Gets a `GVariant` instance that has the same value as `value` and is
--- trusted to be in normal form.
--- 
--- If `value` is already trusted to be in normal form then a new
--- reference to `value` is returned.
--- 
--- If `value` is not already trusted, then it is scanned to check if it
--- is in normal form.  If it is found to be in normal form then it is
--- marked as trusted and a new reference to it is returned.
--- 
--- If `value` is found not to be in normal form then a new trusted
--- `GVariant` is created with the same value as `value`. The non-normal parts of
--- `value` will be replaced with default values which are guaranteed to be in
--- normal form.
--- 
--- It makes sense to call this function if you've received `GVariant`
--- data from untrusted sources and you want to ensure your serialized
--- output is definitely in normal form.
--- 
--- If `value` is already in normal form, a new reference will be returned
--- (which will be floating if `value` is floating). If it is not in normal form,
--- the newly created `GVariant` will be returned with a single non-floating
--- reference. Typically, `g_variant_take_ref()` should be called on the return
--- value from this function to guarantee ownership of a single non-floating
--- reference to it.
---
--- ---
---
---@param self GLib.Variant # a `GVariant`
---@return GLib.Variant # a trusted `GVariant`
function GLib.Variant:get_normal_form() end

--- # method GLib.Variant:get_objv()
---
--- Gets the contents of an array of object paths `GVariant`.  This call
--- makes a shallow copy; the return result should be released with
--- `g_free()`, but the individual strings must not be modified.
--- 
--- If `length` is non-`nil` then the number of elements in the result
--- is stored there.  In any case, the resulting array will be
--- `nil`-terminated.
--- 
--- For an empty array, `length` will be set to 0 and a pointer to a
--- `nil` pointer will be returned.
---
--- ---
---
---@param self GLib.Variant # an array of object paths `GVariant`
---@param length? integer # the length of the result, or `nil`
---@return unknown[] # an array of constant strings
function GLib.Variant:get_objv(length) end

--- # method GLib.Variant:get_size()
---
--- Determines the number of bytes that would be required to store `value`
--- with `g_variant_store()`.
--- 
--- If `value` has a fixed-sized type then this function always returned
--- that fixed size.
--- 
--- In the case that `value` is already in serialized form or the size has
--- already been calculated (ie: this function has been called before)
--- then this function is O(1).  Otherwise, the size is calculated, an
--- operation which is approximately O(n) in the number of values
--- involved.
---
--- ---
---
---@param self GLib.Variant # a `GVariant` instance
---@return integer # the serialized size of `value`
function GLib.Variant:get_size() end

--- # method GLib.Variant:get_string()
---
--- Returns the string value of a `GVariant` instance with a string
--- type.  This includes the types %G_VARIANT_TYPE_STRING,
--- %G_VARIANT_TYPE_OBJECT_PATH and %G_VARIANT_TYPE_SIGNATURE.
--- 
--- The string will always be UTF-8 encoded, will never be `nil`, and will never
--- contain nul bytes.
--- 
--- If `length` is non-`nil` then the length of the string (in bytes) is
--- returned there.  For trusted values, this information is already
--- known.  Untrusted values will be validated and, if valid, a `strlen()` will be
--- performed. If invalid, a default value will be returned — for
--- %G_VARIANT_TYPE_OBJECT_PATH, this is `"/"`, and for other types it is the
--- empty string.
--- 
--- It is an error to call this function with a `value` of any type
--- other than those three.
--- 
--- The return value remains valid as long as `value` exists.
---
--- ---
---
---@param self GLib.Variant # a string `GVariant` instance
---@param length? integer # a pointer to a `gsize`, to store the length
---@return string # the constant string, UTF-8 encoded
function GLib.Variant:get_string(length) end

--- # method GLib.Variant:get_strv()
---
--- Gets the contents of an array of strings `GVariant`.  This call
--- makes a shallow copy; the return result should be released with
--- `g_free()`, but the individual strings must not be modified.
--- 
--- If `length` is non-`nil` then the number of elements in the result
--- is stored there.  In any case, the resulting array will be
--- `nil`-terminated.
--- 
--- For an empty array, `length` will be set to 0 and a pointer to a
--- `nil` pointer will be returned.
---
--- ---
---
---@param self GLib.Variant # an array of strings `GVariant`
---@param length? integer # the length of the result, or `nil`
---@return unknown[] # an array of constant strings
function GLib.Variant:get_strv(length) end

--- # method GLib.Variant:get_type()
---
--- Determines the type of `value`.
--- 
--- The return value is valid for the lifetime of `value` and must not
--- be freed.
---
--- ---
---
---@param self GLib.Variant # a `GVariant`
---@return GLib.VariantType # a `GVariantType`
function GLib.Variant:get_type() end

--- # method GLib.Variant:get_type_string()
---
--- Returns the type string of `value`.  Unlike the result of calling
--- `g_variant_type_peek_string()`, this string is nul-terminated.  This
--- string belongs to `GVariant` and must not be freed.
---
--- ---
---
---@param self GLib.Variant # a `GVariant`
---@return string # the type string for the type of `value`
function GLib.Variant:get_type_string() end

--- # method GLib.Variant:get_uint16()
---
--- Returns the 16-bit unsigned integer value of `value`.
--- 
--- It is an error to call this function with a `value` of any type
--- other than %G_VARIANT_TYPE_UINT16.
---
--- ---
---
---@param self GLib.Variant # a uint16 `GVariant` instance
---@return integer # a `guint16`
function GLib.Variant:get_uint16() end

--- # method GLib.Variant:get_uint32()
---
--- Returns the 32-bit unsigned integer value of `value`.
--- 
--- It is an error to call this function with a `value` of any type
--- other than %G_VARIANT_TYPE_UINT32.
---
--- ---
---
---@param self GLib.Variant # a uint32 `GVariant` instance
---@return integer # a `guint32`
function GLib.Variant:get_uint32() end

--- # method GLib.Variant:get_uint64()
---
--- Returns the 64-bit unsigned integer value of `value`.
--- 
--- It is an error to call this function with a `value` of any type
--- other than %G_VARIANT_TYPE_UINT64.
---
--- ---
---
---@param self GLib.Variant # a uint64 `GVariant` instance
---@return integer # a `guint64`
function GLib.Variant:get_uint64() end

--- # method GLib.Variant:get_variant()
---
--- Unboxes `value`.  The result is the `GVariant` instance that was
--- contained in `value`.
---
--- ---
---
---@param self GLib.Variant # a variant `GVariant` instance
---@return GLib.Variant # the item contained in the variant
function GLib.Variant:get_variant() end

--- # method GLib.Variant:hash()
---
--- Generates a hash value for a `GVariant` instance.
--- 
--- The output of this function is guaranteed to be the same for a given
--- value only per-process.  It may change between different processor
--- architectures or even different versions of GLib.  Do not use this
--- function as a basis for building protocols or file formats.
--- 
--- The type of `value` is `gconstpointer` only to allow use of this
--- function with `GHashTable`.  `value` must be a `GVariant`.
---
--- ---
---
---@param self GLib.Variant # a basic `GVariant` value as a `gconstpointer`
---@return integer # a hash value corresponding to `value`
function GLib.Variant:hash() end

--- # method GLib.Variant:is_container()
---
--- Checks if `value` is a container.
---
--- ---
---
---@param self GLib.Variant # a `GVariant` instance
---@return (boolean|nil) # `true` if `value` is a container
function GLib.Variant:is_container() end

--- # method GLib.Variant:is_floating()
---
--- Checks whether `value` has a floating reference count.
--- 
--- This function should only ever be used to assert that a given variant
--- is or is not floating, or for debug purposes. To acquire a reference
--- to a variant that might be floating, always use `g_variant_ref_sink()`
--- or `g_variant_take_ref()`.
--- 
--- See `g_variant_ref_sink()` for more information about floating reference
--- counts.
---
--- ---
---
---@param self GLib.Variant # a `GVariant`
---@return (boolean|nil) # whether `value` is floating
function GLib.Variant:is_floating() end

--- # method GLib.Variant:is_normal_form()
---
--- Checks if `value` is in normal form.
--- 
--- The main reason to do this is to detect if a given chunk of
--- serialized data is in normal form: load the data into a `GVariant`
--- using `g_variant_new_from_data()` and then use this function to
--- check.
--- 
--- If `value` is found to be in normal form then it will be marked as
--- being trusted.  If the value was already marked as being trusted then
--- this function will immediately return `true`.
--- 
--- There may be implementation specific restrictions on deeply nested values.
--- GVariant is guaranteed to handle nesting up to at least 64 levels.
---
--- ---
---
---@param self GLib.Variant # a `GVariant` instance
---@return (boolean|nil) # `true` if `value` is in normal form
function GLib.Variant:is_normal_form() end

--- # method GLib.Variant:is_of_type()
---
--- Checks if a value has a type matching the provided type.
---
--- ---
---
---@param self GLib.Variant # a `GVariant` instance
---@param type GLib.VariantType # a `GVariantType`
---@return (boolean|nil) # `true` if the type of `value` matches `type`
function GLib.Variant:is_of_type(type) end

--- # method GLib.Variant:lookup_value()
---
--- Looks up a value in a dictionary `GVariant`.
--- 
--- This function works with dictionaries of the type a{s*} (and equally
--- well with type a{o*}, but we only further discuss the string case
--- for sake of clarity).
--- 
--- In the event that `dictionary` has the type a{sv}, the `expected_type`
--- string specifies what type of value is expected to be inside of the
--- variant. If the value inside the variant has a different type then
--- `nil` is returned. In the event that `dictionary` has a value type other
--- than v then `expected_type` must directly match the value type and it is
--- used to unpack the value directly or an error occurs.
--- 
--- In either case, if `key` is not found in `dictionary`, `nil` is returned.
--- 
--- If the key is found and the value has the correct type, it is
--- returned.  If `expected_type` was specified then any non-`nil` return
--- value will have this type.
--- 
--- This function is currently implemented with a linear scan.  If you
--- plan to do many lookups then `GVariantDict` may be more efficient.
---
--- ---
---
---@param self GLib.Variant # a dictionary `GVariant`
---@param key string # the key to look up in the dictionary
---@param expected_type? GLib.VariantType # a `GVariantType`, or `nil`
---@return GLib.Variant # the value of the dictionary key, or `nil`
function GLib.Variant:lookup_value(key, expected_type) end

--- # method GLib.Variant:n_children()
---
--- Determines the number of children in a container `GVariant` instance.
--- This includes variants, maybes, arrays, tuples and dictionary
--- entries.  It is an error to call this function on any other type of
--- `GVariant`.
--- 
--- For variants, the return value is always 1.  For values with maybe
--- types, it is always zero or one.  For arrays, it is the length of the
--- array.  For tuples it is the number of tuple items (which depends
--- only on the type).  For dictionary entries, it is always 2
--- 
--- This function is O(1).
---
--- ---
---
---@param self GLib.Variant # a container `GVariant`
---@return integer # the number of children in the container
function GLib.Variant:n_children() end

--- # method GLib.Variant:print()
---
--- Pretty-prints `value` in the format understood by `g_variant_parse()`.
--- 
--- The format is described [here][gvariant-text].
--- 
--- If `type_annotate` is `true`, then type information is included in
--- the output.
---
--- ---
---
---@param self GLib.Variant # a `GVariant`
---@param type_annotate (boolean|nil) # `true` if type information should be included in the output
---@return string # a newly-allocated string holding the result.
function GLib.Variant:print(type_annotate) end

--- # method GLib.Variant:ref()
---
--- Increases the reference count of `value`.
---
--- ---
---
---@param self GLib.Variant # a `GVariant`
---@return GLib.Variant # the same `value`
function GLib.Variant:ref() end

--- # method GLib.Variant:ref_sink()
---
--- `GVariant` uses a floating reference count system.  All functions with
--- names starting with `g_variant_new_` return floating
--- references.
--- 
--- Calling `g_variant_ref_sink()` on a `GVariant` with a floating reference
--- will convert the floating reference into a full reference.  Calling
--- `g_variant_ref_sink()` on a non-floating `GVariant` results in an
--- additional normal reference being added.
--- 
--- In other words, if the `value` is floating, then this call "assumes
--- ownership" of the floating reference, converting it to a normal
--- reference.  If the `value` is not floating, then this call adds a
--- new normal reference increasing the reference count by one.
--- 
--- All calls that result in a `GVariant` instance being inserted into a
--- container will call `g_variant_ref_sink()` on the instance.  This means
--- that if the value was just created (and has only its floating
--- reference) then the container will assume sole ownership of the value
--- at that point and the caller will not need to unreference it.  This
--- makes certain common styles of programming much easier while still
--- maintaining normal refcounting semantics in situations where values
--- are not floating.
---
--- ---
---
---@param self GLib.Variant # a `GVariant`
---@return GLib.Variant # the same `value`
function GLib.Variant:ref_sink() end

--- # method GLib.Variant:store()
---
--- Stores the serialized form of `value` at `data`.  `data` should be
--- large enough.  See `g_variant_get_size()`.
--- 
--- The stored data is in machine native byte order but may not be in
--- fully-normalised form if read from an untrusted source.  See
--- `g_variant_get_normal_form()` for a solution.
--- 
--- As with `g_variant_get_data()`, to be able to deserialize the
--- serialized variant successfully, its type and (if the destination
--- machine might be different) its endianness must also be available.
--- 
--- This function is approximately O(n) in the size of `data`.
---
--- ---
---
---@param self GLib.Variant # the `GVariant` to store
---@param data userdata # the location to store the serialized data at
---@return nil
function GLib.Variant:store(data) end

--- # method GLib.Variant:take_ref()
---
--- If `value` is floating, sink it.  Otherwise, do nothing.
--- 
--- Typically you want to use `g_variant_ref_sink()` in order to
--- automatically do the correct thing with respect to floating or
--- non-floating references, but there is one specific scenario where
--- this function is helpful.
--- 
--- The situation where this function is helpful is when creating an API
--- that allows the user to provide a callback function that returns a
--- `GVariant`.  We certainly want to allow the user the flexibility to
--- return a non-floating reference from this callback (for the case
--- where the value that is being returned already exists).
--- 
--- At the same time, the style of the `GVariant` API makes it likely that
--- for newly-created `GVariant` instances, the user can be saved some
--- typing if they are allowed to return a `GVariant` with a floating
--- reference.
--- 
--- Using this function on the return value of the user's callback allows
--- the user to do whichever is more convenient for them.  The caller
--- will always receives exactly one full reference to the value: either
--- the one that was returned in the first place, or a floating reference
--- that has been converted to a full reference.
--- 
--- This function has an odd interaction when combined with
--- `g_variant_ref_sink()` running at the same time in another thread on
--- the same `GVariant` instance.  If `g_variant_ref_sink()` runs first then
--- the result will be that the floating reference is converted to a hard
--- reference.  If `g_variant_take_ref()` runs first then the result will
--- be that the floating reference is converted to a hard reference and
--- an additional reference on top of that one is added.  It is best to
--- avoid this situation.
---
--- ---
---
---@param self GLib.Variant # a `GVariant`
---@return GLib.Variant # the same `value`
function GLib.Variant:take_ref() end

--- # method GLib.Variant:unref()
---
--- Decreases the reference count of `value`.  When its reference count
--- drops to 0, the memory used by the variant is freed.
---
--- ---
---
---@param self GLib.Variant # a `GVariant`
---@return nil
function GLib.Variant:unref() end

--- # function GLib.Variant.is_object_path()
---
--- Determines if a given string is a valid D-Bus object path.  You
--- should ensure that a string is a valid D-Bus object path before
--- passing it to `g_variant_new_object_path()`.
--- 
--- A valid object path starts with `/` followed by zero or more
--- sequences of characters separated by `/` characters.  Each sequence
--- must contain only the characters `[A-Z][a-z][0-9]_`.  No sequence
--- (including the one following the final `/` character) may be empty.
---
--- ---
---
---@param string string # a normal C nul-terminated string
---@return (boolean|nil) # `true` if `string` is a D-Bus object path
function GLib.Variant.is_object_path(string) end

--- # function GLib.Variant.is_signature()
---
--- Determines if a given string is a valid D-Bus type signature.  You
--- should ensure that a string is a valid D-Bus type signature before
--- passing it to `g_variant_new_signature()`.
--- 
--- D-Bus type signatures consist of zero or more definite `GVariantType`
--- strings in sequence.
---
--- ---
---
---@param string string # a normal C nul-terminated string
---@return (boolean|nil) # `true` if `string` is a D-Bus type signature
function GLib.Variant.is_signature(string) end

--- # function GLib.Variant.parse()
---
--- Parses a `GVariant` from a text representation.
--- 
--- A single `GVariant` is parsed from the content of `text`.
--- 
--- The format is described [here][gvariant-text].
--- 
--- The memory at `limit` will never be accessed and the parser behaves as
--- if the character at `limit` is the nul terminator.  This has the
--- effect of bounding `text`.
--- 
--- If `endptr` is non-`nil` then `text` is permitted to contain data
--- following the value that this function parses and `endptr` will be
--- updated to point to the first character past the end of the text
--- parsed by this function.  If `endptr` is `nil` and there is extra data
--- then an error is returned.
--- 
--- If `type` is non-`nil` then the value will be parsed to have that
--- type.  This may result in additional parse errors (in the case that
--- the parsed value doesn't fit the type) but may also result in fewer
--- errors (in the case that the type would have been ambiguous, such as
--- with empty arrays).
--- 
--- In the event that the parsing is successful, the resulting `GVariant`
--- is returned. It is never floating, and must be freed with
--- `g_variant_unref()`.
--- 
--- In case of any error, `nil` will be returned.  If `error` is non-`nil`
--- then it will be set to reflect the error that occurred.
--- 
--- Officially, the language understood by the parser is "any string
--- produced by `g_variant_print()`".
--- 
--- There may be implementation specific restrictions on deeply nested values,
--- which would result in a %G_VARIANT_PARSE_ERROR_RECURSION error. `GVariant` is
--- guaranteed to handle nesting up to at least 64 levels.
---
--- ---
---
---@param type? GLib.VariantType # a `GVariantType`, or `nil`
---@param text string # a string containing a GVariant in text form
---@param limit? string # a pointer to the end of `text`, or `nil`
---@param endptr? string # a location to store the end pointer, or `nil`
---@return GLib.Variant # a non-floating reference to a `GVariant`, or `nil`
function GLib.Variant.parse(type, text, limit, endptr) end

--- # function GLib.Variant.parse_error_print_context()
---
--- Pretty-prints a message showing the context of a `GVariant` parse
--- error within the string for which parsing was attempted.
--- 
--- The resulting string is suitable for output to the console or other
--- monospace media where newlines are treated in the usual way.
--- 
--- The message will typically look something like one of the following:
--- 
--- ```c
--- unterminated string constant:
---   (1, 2, 3, 'abc
---             ^^^^
--- ```
--- 
--- or
--- 
--- ```c
--- unable to find a common type:
---   [1, 2, 3, 'str']
---    ^        ^^^^^
--- ```
--- 
--- The format of the message may change in a future version.
--- 
--- `error` must have come from a failed attempt to `g_variant_parse()` and
--- `source_str` must be exactly the same string that caused the error.
--- If `source_str` was not nul-terminated when you passed it to
--- `g_variant_parse()` then you must add nul termination before using this
--- function.
---
--- ---
---
---@param error GLib.Error # a `GError` from the `GVariantParseError` domain
---@param source_str string # the string that was given to the parser
---@return string # the printed message
function GLib.Variant.parse_error_print_context(error, source_str) end

--- # function GLib.Variant.parse_error_quark()
---
---@return GLib.Quark
function GLib.Variant.parse_error_quark() end

--- # function GLib.Variant.parser_get_error_quark()
---
--- Same as `g_variant_error_quark()`.
---
--- ---
---
---@return GLib.Quark
function GLib.Variant.parser_get_error_quark() end

--- # function GLib.Variant.new_array()
---
--- Creates a new `GVariant` array from `children`.
--- 
--- `child_type` must be non-`nil` if `n_children` is zero.  Otherwise, the
--- child type is determined by inspecting the first element of the
--- `children` array.  If `child_type` is non-`nil` then it must be a
--- definite type.
--- 
--- The items of the array are taken from the `children` array.  No entry
--- in the `children` array may be `nil`.
--- 
--- All items in the array must have the same type, which must be the
--- same as `child_type`, if given.
--- 
--- If the `children` are floating references (see `g_variant_ref_sink()`), the
--- new instance takes ownership of them as if via `g_variant_ref_sink()`.
---
--- ---
---
---@param child_type? GLib.VariantType # the element type of the new array
---@param children? unknown[] # an array of `GVariant` pointers, the children
---@param n_children integer # the length of `children`
---@return GLib.Variant # a floating reference to a new `GVariant` array
function GLib.Variant.new_array(child_type, children, n_children) end

--- # function GLib.Variant.new_boolean()
---
--- Creates a new boolean `GVariant` instance -- either `true` or `false`.
---
--- ---
---
---@param value (boolean|nil) # a `gboolean` value
---@return GLib.Variant # a floating reference to a new boolean `GVariant` instance
function GLib.Variant.new_boolean(value) end

--- # function GLib.Variant.new_byte()
---
--- Creates a new byte `GVariant` instance.
---
--- ---
---
---@param value integer # a `guint8` value
---@return GLib.Variant # a floating reference to a new byte `GVariant` instance
function GLib.Variant.new_byte(value) end

--- # function GLib.Variant.new_bytestring()
---
--- Creates an array-of-bytes `GVariant` with the contents of `string`.
--- This function is just like `g_variant_new_string()` except that the
--- string need not be valid UTF-8.
--- 
--- The nul terminator character at the end of the string is stored in
--- the array.
---
--- ---
---
---@param string unknown[] # a normal nul-terminated string in no particular encoding
---@return GLib.Variant # a floating reference to a new bytestring `GVariant` instance
function GLib.Variant.new_bytestring(string) end

--- # function GLib.Variant.new_bytestring_array()
---
--- Constructs an array of bytestring `GVariant` from the given array of
--- strings.
--- 
--- If `length` is -1 then `strv` is `nil`-terminated.
---
--- ---
---
---@param strv unknown[] # an array of strings
---@param length integer # the length of `strv`, or -1
---@return GLib.Variant # a new floating `GVariant` instance
function GLib.Variant.new_bytestring_array(strv, length) end

--- # function GLib.Variant.new_dict_entry()
---
--- Creates a new dictionary entry `GVariant`. `key` and `value` must be
--- non-`nil`. `key` must be a value of a basic type (ie: not a container).
--- 
--- If the `key` or `value` are floating references (see `g_variant_ref_sink()`),
--- the new instance takes ownership of them as if via `g_variant_ref_sink()`.
---
--- ---
---
---@param key GLib.Variant # a basic `GVariant`, the key
---@param value GLib.Variant # a `GVariant`, the value
---@return GLib.Variant # a floating reference to a new dictionary entry `GVariant`
function GLib.Variant.new_dict_entry(key, value) end

--- # function GLib.Variant.new_double()
---
--- Creates a new double `GVariant` instance.
---
--- ---
---
---@param value number # a `gdouble` floating point value
---@return GLib.Variant # a floating reference to a new double `GVariant` instance
function GLib.Variant.new_double(value) end

--- # function GLib.Variant.new_fixed_array()
---
--- Constructs a new array `GVariant` instance, where the elements are
--- of `element_type` type.
--- 
--- `elements` must be an array with fixed-sized elements.  Numeric types are
--- fixed-size as are tuples containing only other fixed-sized types.
--- 
--- `element_size` must be the size of a single element in the array.
--- For example, if calling this function for an array of 32-bit integers,
--- you might say sizeof(gint32). This value isn't used except for the purpose
--- of a double-check that the form of the serialized data matches the caller's
--- expectation.
--- 
--- `n_elements` must be the length of the `elements` array.
---
--- ---
---
---@param element_type GLib.VariantType # the `GVariantType` of each element
---@param elements? userdata # a pointer to the fixed array of contiguous elements
---@param n_elements integer # the number of elements
---@param element_size integer # the size of each element
---@return GLib.Variant # a floating reference to a new array `GVariant` instance
function GLib.Variant.new_fixed_array(element_type, elements, n_elements, element_size) end

--- # function GLib.Variant.new_from_bytes()
---
--- Constructs a new serialized-mode `GVariant` instance.  This is the
--- inner interface for creation of new serialized values that gets
--- called from various functions in gvariant.c.
--- 
--- A reference is taken on `bytes`.
--- 
--- The data in `bytes` must be aligned appropriately for the `type` being loaded.
--- Otherwise this function will internally create a copy of the memory (since
--- GLib 2.60) or (in older versions) fail and exit the process.
---
--- ---
---
---@param type GLib.VariantType # a `GVariantType`
---@param bytes GLib.Bytes # a `GBytes`
---@param trusted (boolean|nil) # if the contents of `bytes` are trusted
---@return GLib.Variant # a new `GVariant` with a floating reference
function GLib.Variant.new_from_bytes(type, bytes, trusted) end

--- # function GLib.Variant.new_from_data()
---
--- Creates a new `GVariant` instance from serialized data.
--- 
--- `type` is the type of `GVariant` instance that will be constructed.
--- The interpretation of `data` depends on knowing the type.
--- 
--- `data` is not modified by this function and must remain valid with an
--- unchanging value until such a time as `notify` is called with
--- `user_data`.  If the contents of `data` change before that time then
--- the result is undefined.
--- 
--- If `data` is trusted to be serialized data in normal form then
--- `trusted` should be `true`.  This applies to serialized data created
--- within this process or read from a trusted location on the disk (such
--- as a file installed in /usr/lib alongside your application).  You
--- should set trusted to `false` if `data` is read from the network, a
--- file in the user's home directory, etc.
--- 
--- If `data` was not stored in this machine's native endianness, any multi-byte
--- numeric values in the returned variant will also be in non-native
--- endianness. `g_variant_byteswap()` can be used to recover the original values.
--- 
--- `notify` will be called with `user_data` when `data` is no longer
--- needed.  The exact time of this call is unspecified and might even be
--- before this function returns.
--- 
--- Note: `data` must be backed by memory that is aligned appropriately for the
--- `type` being loaded. Otherwise this function will internally create a copy of
--- the memory (since GLib 2.60) or (in older versions) fail and exit the
--- process.
---
--- ---
---
---@param type GLib.VariantType # a definite `GVariantType`
---@param data unknown[] # the serialized data
---@param size integer # the size of `data`
---@param trusted (boolean|nil) # `true` if `data` is definitely in normal form
---@param notify GLib.DestroyNotify # function to call when `data` is no longer needed
---@param user_data? userdata # data for `notify`
---@return GLib.Variant # a new floating `GVariant` of type `type`
function GLib.Variant.new_from_data(type, data, size, trusted, notify, user_data) end

--- # function GLib.Variant.new_handle()
---
--- Creates a new handle `GVariant` instance.
--- 
--- By convention, handles are indexes into an array of file descriptors
--- that are sent alongside a D-Bus message.  If you're not interacting
--- with D-Bus, you probably don't need them.
---
--- ---
---
---@param value integer # a `gint32` value
---@return GLib.Variant # a floating reference to a new handle `GVariant` instance
function GLib.Variant.new_handle(value) end

--- # function GLib.Variant.new_int16()
---
--- Creates a new int16 `GVariant` instance.
---
--- ---
---
---@param value integer # a `gint16` value
---@return GLib.Variant # a floating reference to a new int16 `GVariant` instance
function GLib.Variant.new_int16(value) end

--- # function GLib.Variant.new_int32()
---
--- Creates a new int32 `GVariant` instance.
---
--- ---
---
---@param value integer # a `gint32` value
---@return GLib.Variant # a floating reference to a new int32 `GVariant` instance
function GLib.Variant.new_int32(value) end

--- # function GLib.Variant.new_int64()
---
--- Creates a new int64 `GVariant` instance.
---
--- ---
---
---@param value integer # a `gint64` value
---@return GLib.Variant # a floating reference to a new int64 `GVariant` instance
function GLib.Variant.new_int64(value) end

--- # function GLib.Variant.new_maybe()
---
--- Depending on if `child` is `nil`, either wraps `child` inside of a
--- maybe container or creates a Nothing instance for the given `type`.
--- 
--- At least one of `child_type` and `child` must be non-`nil`.
--- If `child_type` is non-`nil` then it must be a definite type.
--- If they are both non-`nil` then `child_type` must be the type
--- of `child`.
--- 
--- If `child` is a floating reference (see `g_variant_ref_sink()`), the new
--- instance takes ownership of `child`.
---
--- ---
---
---@param child_type? GLib.VariantType # the `GVariantType` of the child, or `nil`
---@param child? GLib.Variant # the child value, or `nil`
---@return GLib.Variant # a floating reference to a new `GVariant` maybe instance
function GLib.Variant.new_maybe(child_type, child) end

--- # function GLib.Variant.new_object_path()
---
--- Creates a D-Bus object path `GVariant` with the contents of `string`.
--- `string` must be a valid D-Bus object path.  Use
--- `g_variant_is_object_path()` if you're not sure.
---
--- ---
---
---@param object_path string # a normal C nul-terminated string
---@return GLib.Variant # a floating reference to a new object path `GVariant` instance
function GLib.Variant.new_object_path(object_path) end

--- # function GLib.Variant.new_objv()
---
--- Constructs an array of object paths `GVariant` from the given array of
--- strings.
--- 
--- Each string must be a valid `GVariant` object path; see
--- `g_variant_is_object_path()`.
--- 
--- If `length` is -1 then `strv` is `nil`-terminated.
---
--- ---
---
---@param strv unknown[] # an array of strings
---@param length integer # the length of `strv`, or -1
---@return GLib.Variant # a new floating `GVariant` instance
function GLib.Variant.new_objv(strv, length) end

--- # function GLib.Variant.new_signature()
---
--- Creates a D-Bus type signature `GVariant` with the contents of
--- `string`.  `string` must be a valid D-Bus type signature.  Use
--- `g_variant_is_signature()` if you're not sure.
---
--- ---
---
---@param signature string # a normal C nul-terminated string
---@return GLib.Variant # a floating reference to a new signature `GVariant` instance
function GLib.Variant.new_signature(signature) end

--- # function GLib.Variant.new_string()
---
--- Creates a string `GVariant` with the contents of `string`.
--- 
--- `string` must be valid UTF-8, and must not be `nil`. To encode
--- potentially-`nil` strings, use `g_variant_new()` with `ms` as the
--- [format string][gvariant-format-strings-maybe-types].
---
--- ---
---
---@param string string # a normal UTF-8 nul-terminated string
---@return GLib.Variant # a floating reference to a new string `GVariant` instance
function GLib.Variant.new_string(string) end

--- # function GLib.Variant.new_strv()
---
--- Constructs an array of strings `GVariant` from the given array of
--- strings.
--- 
--- If `length` is -1 then `strv` is `nil`-terminated.
---
--- ---
---
---@param strv unknown[] # an array of strings
---@param length integer # the length of `strv`, or -1
---@return GLib.Variant # a new floating `GVariant` instance
function GLib.Variant.new_strv(strv, length) end

--- # function GLib.Variant.new_tuple()
---
--- Creates a new tuple `GVariant` out of the items in `children`.  The
--- type is determined from the types of `children`.  No entry in the
--- `children` array may be `nil`.
--- 
--- If `n_children` is 0 then the unit tuple is constructed.
--- 
--- If the `children` are floating references (see `g_variant_ref_sink()`), the
--- new instance takes ownership of them as if via `g_variant_ref_sink()`.
---
--- ---
---
---@param children unknown[] # the items to make the tuple out of
---@param n_children integer # the length of `children`
---@return GLib.Variant # a floating reference to a new `GVariant` tuple
function GLib.Variant.new_tuple(children, n_children) end

--- # function GLib.Variant.new_uint16()
---
--- Creates a new uint16 `GVariant` instance.
---
--- ---
---
---@param value integer # a `guint16` value
---@return GLib.Variant # a floating reference to a new uint16 `GVariant` instance
function GLib.Variant.new_uint16(value) end

--- # function GLib.Variant.new_uint32()
---
--- Creates a new uint32 `GVariant` instance.
---
--- ---
---
---@param value integer # a `guint32` value
---@return GLib.Variant # a floating reference to a new uint32 `GVariant` instance
function GLib.Variant.new_uint32(value) end

--- # function GLib.Variant.new_uint64()
---
--- Creates a new uint64 `GVariant` instance.
---
--- ---
---
---@param value integer # a `guint64` value
---@return GLib.Variant # a floating reference to a new uint64 `GVariant` instance
function GLib.Variant.new_uint64(value) end

--- # function GLib.Variant.new_variant()
---
--- Boxes `value`.  The result is a `GVariant` instance representing a
--- variant containing the original value.
--- 
--- If `child` is a floating reference (see `g_variant_ref_sink()`), the new
--- instance takes ownership of `child`.
---
--- ---
---
---@param value GLib.Variant # a `GVariant` instance
---@return GLib.Variant # a floating reference to a new variant `GVariant` instance
function GLib.Variant.new_variant(value) end

--- # record GLib.VariantBuilder
---
--- A utility type for constructing container-type `GVariant` instances.
--- 
--- This is an opaque structure and may only be accessed using the
--- following functions.
--- 
--- `GVariantBuilder` is not threadsafe in any way.  Do not attempt to
--- access it from more than one thread.
---
--- ---
---
---@class GLib.VariantBuilder
---@operator call: GLib.VariantBuilder
GLib.VariantBuilder = {}

--- # method GLib.VariantBuilder:add_value()
---
--- Adds `value` to `builder`.
--- 
--- It is an error to call this function in any way that would create an
--- inconsistent value to be constructed.  Some examples of this are
--- putting different types of items into an array, putting the wrong
--- types or number of items in a tuple, putting more than one value into
--- a variant, etc.
--- 
--- If `value` is a floating reference (see `g_variant_ref_sink()`),
--- the `builder` instance takes ownership of `value`.
---
--- ---
---
---@param self GLib.VariantBuilder # a `GVariantBuilder`
---@param value GLib.Variant # a `GVariant`
---@return nil
function GLib.VariantBuilder:add_value(value) end

--- # method GLib.VariantBuilder:close()
---
--- Closes the subcontainer inside the given `builder` that was opened by
--- the most recent call to `g_variant_builder_open()`.
--- 
--- It is an error to call this function in any way that would create an
--- inconsistent value to be constructed (ie: too few values added to the
--- subcontainer).
---
--- ---
---
---@param self GLib.VariantBuilder # a `GVariantBuilder`
---@return nil
function GLib.VariantBuilder:close() end

--- # method GLib.VariantBuilder:end__()
---
--- Ends the builder process and returns the constructed value.
--- 
--- It is not permissible to use `builder` in any way after this call
--- except for reference counting operations (in the case of a
--- heap-allocated `GVariantBuilder`) or by reinitialising it with
--- `g_variant_builder_init()` (in the case of stack-allocated). This
--- means that for the stack-allocated builders there is no need to
--- call `g_variant_builder_clear()` after the call to
--- `g_variant_builder_end()`.
--- 
--- It is an error to call this function in any way that would create an
--- inconsistent value to be constructed (ie: insufficient number of
--- items added to a container with a specific number of children
--- required).  It is also an error to call this function if the builder
--- was created with an indefinite array or maybe type and no children
--- have been added; in this case it is impossible to infer the type of
--- the empty array.
---
--- ---
---
---@param self GLib.VariantBuilder # a `GVariantBuilder`
---@return GLib.Variant # a new, floating, `GVariant`
function GLib.VariantBuilder:end__() end

--- # method GLib.VariantBuilder:open()
---
--- Opens a subcontainer inside the given `builder`.  When done adding
--- items to the subcontainer, `g_variant_builder_close()` must be called. `type`
--- is the type of the container: so to build a tuple of several values, `type`
--- must include the tuple itself.
--- 
--- It is an error to call this function in any way that would cause an
--- inconsistent value to be constructed (ie: adding too many values or
--- a value of an incorrect type).
--- 
--- Example of building a nested variant:
--- ```c
--- GVariantBuilder builder;
--- guint32 some_number = get_number ();
--- g_autoptr (GHashTable) some_dict = get_dict ();
--- GHashTableIter iter;
--- const gchar *key;
--- const GVariant *value;
--- g_autoptr (GVariant) output = NULL;
--- 
--- g_variant_builder_init (&builder, G_VARIANT_TYPE ("(ua{sv})"));
--- g_variant_builder_add (&builder, "u", some_number);
--- g_variant_builder_open (&builder, G_VARIANT_TYPE ("a{sv}"));
--- 
--- g_hash_table_iter_init (&iter, some_dict);
--- while (g_hash_table_iter_next (&iter, (gpointer *) &key, (gpointer *) &value))
---   {
---     g_variant_builder_open (&builder, G_VARIANT_TYPE ("{sv}"));
---     g_variant_builder_add (&builder, "s", key);
---     g_variant_builder_add (&builder, "v", value);
---     g_variant_builder_close (&builder);
---   }
--- 
--- g_variant_builder_close (&builder);
--- 
--- output = g_variant_builder_end (&builder);
--- ```
---
--- ---
---
---@param self GLib.VariantBuilder # a `GVariantBuilder`
---@param type GLib.VariantType # the `GVariantType` of the container
---@return nil
function GLib.VariantBuilder:open(type) end

--- # method GLib.VariantBuilder:ref()
---
--- Increases the reference count on `builder`.
--- 
--- Don't call this on stack-allocated `GVariantBuilder` instances or bad
--- things will happen.
---
--- ---
---
---@param self GLib.VariantBuilder # a `GVariantBuilder` allocated by `g_variant_builder_new()`
---@return GLib.VariantBuilder # a new reference to `builder`
function GLib.VariantBuilder:ref() end

--- # method GLib.VariantBuilder:unref()
---
--- Decreases the reference count on `builder`.
--- 
--- In the event that there are no more references, releases all memory
--- associated with the `GVariantBuilder`.
--- 
--- Don't call this on stack-allocated `GVariantBuilder` instances or bad
--- things will happen.
---
--- ---
---
---@param self GLib.VariantBuilder # a `GVariantBuilder` allocated by `g_variant_builder_new()`
---@return nil
function GLib.VariantBuilder:unref() end

--- # function GLib.VariantBuilder.new()
---
--- Allocates and initialises a new `GVariantBuilder`.
--- 
--- You should call `g_variant_builder_unref()` on the return value when it
--- is no longer needed.  The memory will not be automatically freed by
--- any other call.
--- 
--- In most cases it is easier to place a `GVariantBuilder` directly on
--- the stack of the calling function and initialise it with
--- `g_variant_builder_init()`.
---
--- ---
---
---@param type GLib.VariantType # a container type
---@return GLib.VariantBuilder # a `GVariantBuilder`
function GLib.VariantBuilder.new(type) end

---@enum GLib.VariantClass
GLib.VariantClass = {}

--- # record GLib.VariantDict
---
--- `GVariantDict` is a mutable interface to `GVariant` dictionaries.
--- 
--- It can be used for doing a sequence of dictionary lookups in an
--- efficient way on an existing `GVariant` dictionary or it can be used
--- to construct new dictionaries with a hashtable-like interface.  It
--- can also be used for taking existing dictionaries and modifying them
--- in order to create new ones.
--- 
--- `GVariantDict` can only be used with %G_VARIANT_TYPE_VARDICT
--- dictionaries.
--- 
--- It is possible to use `GVariantDict` allocated on the stack or on the
--- heap.  When using a stack-allocated `GVariantDict`, you begin with a
--- call to `g_variant_dict_init()` and free the resources with a call to
--- `g_variant_dict_clear()`.
--- 
--- Heap-allocated `GVariantDict` follows normal refcounting rules: you
--- allocate it with `g_variant_dict_new()` and use `g_variant_dict_ref()`
--- and `g_variant_dict_unref()`.
--- 
--- `g_variant_dict_end()` is used to convert the `GVariantDict` back into a
--- dictionary-type `GVariant`.  When used with stack-allocated instances,
--- this also implicitly frees all associated memory, but for
--- heap-allocated instances, you must still call `g_variant_dict_unref()`
--- afterwards.
--- 
--- You will typically want to use a heap-allocated `GVariantDict` when
--- you expose it as part of an API.  For most other uses, the
--- stack-allocated form will be more convenient.
--- 
--- Consider the following two examples that do the same thing in each
--- style: take an existing dictionary and look up the "count" uint32
--- key, adding 1 to it if it is found, or returning an error if the
--- key is not found.  Each returns the new dictionary as a floating
--- `GVariant`.
--- 
--- ## Using a stack-allocated GVariantDict
--- 
--- ```c
---   GVariant *
---   add_to_count (GVariant  *orig,
---                 GError   **error)
---   {
---     GVariantDict dict;
---     guint32 count;
--- 
---     g_variant_dict_init (&dict, orig);
---     if (!g_variant_dict_lookup (&dict, "count", "u", &count))
---       {
---         g_set_error (...);
---         g_variant_dict_clear (&dict);
---         return NULL;
---       }
--- 
---     g_variant_dict_insert (&dict, "count", "u", count + 1);
--- 
---     return g_variant_dict_end (&dict);
---   }
--- ```
--- 
--- ## Using heap-allocated GVariantDict
--- 
--- ```c
---   GVariant *
---   add_to_count (GVariant  *orig,
---                 GError   **error)
---   {
---     GVariantDict *dict;
---     GVariant *result;
---     guint32 count;
--- 
---     dict = g_variant_dict_new (orig);
--- 
---     if (g_variant_dict_lookup (dict, "count", "u", &count))
---       {
---         g_variant_dict_insert (dict, "count", "u", count + 1);
---         result = g_variant_dict_end (dict);
---       }
---     else
---       {
---         g_set_error (...);
---         result = NULL;
---       }
--- 
---     g_variant_dict_unref (dict);
--- 
---     return result;
---   }
--- ```
---
--- ---
---
---@class GLib.VariantDict
---@operator call: GLib.VariantDict
GLib.VariantDict = {}

--- # method GLib.VariantDict:clear()
---
--- Releases all memory associated with a `GVariantDict` without freeing
--- the `GVariantDict` structure itself.
--- 
--- It typically only makes sense to do this on a stack-allocated
--- `GVariantDict` if you want to abort building the value part-way
--- through.  This function need not be called if you call
--- `g_variant_dict_end()` and it also doesn't need to be called on dicts
--- allocated with g_variant_dict_new (see `g_variant_dict_unref()` for
--- that).
--- 
--- It is valid to call this function on either an initialised
--- `GVariantDict` or one that was previously cleared by an earlier call
--- to `g_variant_dict_clear()` but it is not valid to call this function
--- on uninitialised memory.
---
--- ---
---
---@param self GLib.VariantDict # a `GVariantDict`
---@return nil
function GLib.VariantDict:clear() end

--- # method GLib.VariantDict:contains()
---
--- Checks if `key` exists in `dict`.
---
--- ---
---
---@param self GLib.VariantDict # a `GVariantDict`
---@param key string # the key to look up in the dictionary
---@return (boolean|nil) # `true` if `key` is in `dict`
function GLib.VariantDict:contains(key) end

--- # method GLib.VariantDict:end__()
---
--- Returns the current value of `dict` as a `GVariant` of type
--- %G_VARIANT_TYPE_VARDICT, clearing it in the process.
--- 
--- It is not permissible to use `dict` in any way after this call except
--- for reference counting operations (in the case of a heap-allocated
--- `GVariantDict`) or by reinitialising it with `g_variant_dict_init()` (in
--- the case of stack-allocated).
---
--- ---
---
---@param self GLib.VariantDict # a `GVariantDict`
---@return GLib.Variant # a new, floating, `GVariant`
function GLib.VariantDict:end__() end

--- # method GLib.VariantDict:insert_value()
---
--- Inserts (or replaces) a key in a `GVariantDict`.
--- 
--- `value` is consumed if it is floating.
---
--- ---
---
---@param self GLib.VariantDict # a `GVariantDict`
---@param key string # the key to insert a value for
---@param value GLib.Variant # the value to insert
---@return nil
function GLib.VariantDict:insert_value(key, value) end

--- # method GLib.VariantDict:lookup_value()
---
--- Looks up a value in a `GVariantDict`.
--- 
--- If `key` is not found in `dictionary`, `nil` is returned.
--- 
--- The `expected_type` string specifies what type of value is expected.
--- If the value associated with `key` has a different type then `nil` is
--- returned.
--- 
--- If the key is found and the value has the correct type, it is
--- returned.  If `expected_type` was specified then any non-`nil` return
--- value will have this type.
---
--- ---
---
---@param self GLib.VariantDict # a `GVariantDict`
---@param key string # the key to look up in the dictionary
---@param expected_type? GLib.VariantType # a `GVariantType`, or `nil`
---@return GLib.Variant # the value of the dictionary key, or `nil`
function GLib.VariantDict:lookup_value(key, expected_type) end

--- # method GLib.VariantDict:ref()
---
--- Increases the reference count on `dict`.
--- 
--- Don't call this on stack-allocated `GVariantDict` instances or bad
--- things will happen.
---
--- ---
---
---@param self GLib.VariantDict # a heap-allocated `GVariantDict`
---@return GLib.VariantDict # a new reference to `dict`
function GLib.VariantDict:ref() end

--- # method GLib.VariantDict:remove()
---
--- Removes a key and its associated value from a `GVariantDict`.
---
--- ---
---
---@param self GLib.VariantDict # a `GVariantDict`
---@param key string # the key to remove
---@return (boolean|nil) # `true` if the key was found and removed
function GLib.VariantDict:remove(key) end

--- # method GLib.VariantDict:unref()
---
--- Decreases the reference count on `dict`.
--- 
--- In the event that there are no more references, releases all memory
--- associated with the `GVariantDict`.
--- 
--- Don't call this on stack-allocated `GVariantDict` instances or bad
--- things will happen.
---
--- ---
---
---@param self GLib.VariantDict # a heap-allocated `GVariantDict`
---@return nil
function GLib.VariantDict:unref() end

--- # function GLib.VariantDict.new()
---
--- Allocates and initialises a new `GVariantDict`.
--- 
--- You should call `g_variant_dict_unref()` on the return value when it
--- is no longer needed.  The memory will not be automatically freed by
--- any other call.
--- 
--- In some cases it may be easier to place a `GVariantDict` directly on
--- the stack of the calling function and initialise it with
--- `g_variant_dict_init()`.  This is particularly useful when you are
--- using `GVariantDict` to construct a `GVariant`.
---
--- ---
---
---@param from_asv? GLib.Variant # the `GVariant` with which to initialise the dictionary
---@return GLib.VariantDict # a `GVariantDict`
function GLib.VariantDict.new(from_asv) end

---@enum GLib.VariantParseError
GLib.VariantParseError = {}

--- # record GLib.VariantType
---
--- This section introduces the GVariant type system. It is based, in
--- large part, on the D-Bus type system, with two major changes and
--- some minor lifting of restrictions. The
--- [D-Bus specification](http://dbus.freedesktop.org/doc/dbus-specification.html),
--- therefore, provides a significant amount of
--- information that is useful when working with GVariant.
--- 
--- The first major change with respect to the D-Bus type system is the
--- introduction of maybe (or "nullable") types.  Any type in GVariant can be
--- converted to a maybe type, in which case, "nothing" (or "null") becomes a
--- valid value.  Maybe types have been added by introducing the
--- character "m" to type strings.
--- 
--- The second major change is that the GVariant type system supports the
--- concept of "indefinite types" -- types that are less specific than
--- the normal types found in D-Bus.  For example, it is possible to speak
--- of "an array of any type" in GVariant, where the D-Bus type system
--- would require you to speak of "an array of integers" or "an array of
--- strings".  Indefinite types have been added by introducing the
--- characters "*", "?" and "r" to type strings.
--- 
--- Finally, all arbitrary restrictions relating to the complexity of
--- types are lifted along with the restriction that dictionary entries
--- may only appear nested inside of arrays.
--- 
--- Just as in D-Bus, GVariant types are described with strings ("type
--- strings").  Subject to the differences mentioned above, these strings
--- are of the same form as those found in D-Bus.  Note, however: D-Bus
--- always works in terms of messages and therefore individual type
--- strings appear nowhere in its interface.  Instead, "signatures"
--- are a concatenation of the strings of the type of each argument in a
--- message.  GVariant deals with single values directly so GVariant type
--- strings always describe the type of exactly one value.  This means
--- that a D-Bus signature string is generally not a valid GVariant type
--- string -- except in the case that it is the signature of a message
--- containing exactly one argument.
--- 
--- An indefinite type is similar in spirit to what may be called an
--- abstract type in other type systems.  No value can exist that has an
--- indefinite type as its type, but values can exist that have types
--- that are subtypes of indefinite types.  That is to say,
--- `g_variant_get_type()` will never return an indefinite type, but
--- calling `g_variant_is_of_type()` with an indefinite type may return
--- `true`.  For example, you cannot have a value that represents "an
--- array of no particular type", but you can have an "array of integers"
--- which certainly matches the type of "an array of no particular type",
--- since "array of integers" is a subtype of "array of no particular
--- type".
--- 
--- This is similar to how instances of abstract classes may not
--- directly exist in other type systems, but instances of their
--- non-abstract subtypes may.  For example, in GTK, no object that has
--- the type of `GtkBin` can exist (since `GtkBin` is an abstract class),
--- but a `GtkWindow` can certainly be instantiated, and you would say
--- that the `GtkWindow` is a `GtkBin` (since `GtkWindow` is a subclass of
--- `GtkBin`).
--- 
--- ## GVariant Type Strings
--- 
--- A GVariant type string can be any of the following:
--- 
--- - any basic type string (listed below)
--- 
--- - "v", "r" or "*"
--- 
--- - one of the characters 'a' or 'm', followed by another type string
--- 
--- - the character '(', followed by a concatenation of zero or more other
---   type strings, followed by the character ')'
--- 
--- - the character '{', followed by a basic type string (see below),
---   followed by another type string, followed by the character '}'
--- 
--- A basic type string describes a basic type (as per
--- `g_variant_type_is_basic()`) and is always a single character in length.
--- The valid basic type strings are "b", "y", "n", "q", "i", "u", "x", "t",
--- "h", "d", "s", "o", "g" and "?".
--- 
--- The above definition is recursive to arbitrary depth. "aaaaai" and
--- "(ui(nq((y)))s)" are both valid type strings, as is
--- "a(aa(ui)(qna{ya(yd)}))". In order to not hit memory limits, `GVariant`
--- imposes a limit on recursion depth of 65 nested containers. This is the
--- limit in the D-Bus specification (64) plus one to allow a `GDBusMessage` to
--- be nested in a top-level tuple.
--- 
--- The meaning of each of the characters is as follows:
--- - `b`: the type string of %G_VARIANT_TYPE_BOOLEAN; a boolean value.
--- - `y`: the type string of %G_VARIANT_TYPE_BYTE; a byte.
--- - `n`: the type string of %G_VARIANT_TYPE_INT16; a signed 16 bit integer.
--- - `q`: the type string of %G_VARIANT_TYPE_UINT16; an unsigned 16 bit integer.
--- - `i`: the type string of %G_VARIANT_TYPE_INT32; a signed 32 bit integer.
--- - `u`: the type string of %G_VARIANT_TYPE_UINT32; an unsigned 32 bit integer.
--- - `x`: the type string of %G_VARIANT_TYPE_INT64; a signed 64 bit integer.
--- - `t`: the type string of %G_VARIANT_TYPE_UINT64; an unsigned 64 bit integer.
--- - `h`: the type string of %G_VARIANT_TYPE_HANDLE; a signed 32 bit value
---   that, by convention, is used as an index into an array of file
---   descriptors that are sent alongside a D-Bus message.
--- - `d`: the type string of %G_VARIANT_TYPE_DOUBLE; a double precision
---   floating point value.
--- - `s`: the type string of %G_VARIANT_TYPE_STRING; a string.
--- - `o`: the type string of %G_VARIANT_TYPE_OBJECT_PATH; a string in the form
---   of a D-Bus object path.
--- - `g`: the type string of %G_VARIANT_TYPE_SIGNATURE; a string in the form of
---   a D-Bus type signature.
--- - `?`: the type string of %G_VARIANT_TYPE_BASIC; an indefinite type that
---   is a supertype of any of the basic types.
--- - `v`: the type string of %G_VARIANT_TYPE_VARIANT; a container type that
---   contain any other type of value.
--- - `a`: used as a prefix on another type string to mean an array of that
---   type; the type string "ai", for example, is the type of an array of
---   signed 32-bit integers.
--- - `m`: used as a prefix on another type string to mean a "maybe", or
---   "nullable", version of that type; the type string "ms", for example,
---   is the type of a value that maybe contains a string, or maybe contains
---   nothing.
--- - `()`: used to enclose zero or more other concatenated type strings to
---   create a tuple type; the type string "(is)", for example, is the type of
---   a pair of an integer and a string.
--- - `r`: the type string of %G_VARIANT_TYPE_TUPLE; an indefinite type that is
---   a supertype of any tuple type, regardless of the number of items.
--- - `{}`: used to enclose a basic type string concatenated with another type
---   string to create a dictionary entry type, which usually appears inside of
---   an array to form a dictionary; the type string "a{sd}", for example, is
---   the type of a dictionary that maps strings to double precision floating
---   point values.
--- 
---   The first type (the basic type) is the key type and the second type is
---   the value type. The reason that the first type is restricted to being a
---   basic type is so that it can easily be hashed.
--- - `*`: the type string of %G_VARIANT_TYPE_ANY; the indefinite type that is
---   a supertype of all types.  Note that, as with all type strings, this
---   character represents exactly one type. It cannot be used inside of tuples
---   to mean "any number of items".
--- 
--- Any type string of a container that contains an indefinite type is,
--- itself, an indefinite type. For example, the type string "a*"
--- (corresponding to %G_VARIANT_TYPE_ARRAY) is an indefinite type
--- that is a supertype of every array type. "(*s)" is a supertype
--- of all tuples that contain exactly two items where the second
--- item is a string.
--- 
--- "a{?*}" is an indefinite type that is a supertype of all arrays
--- containing dictionary entries where the key is any basic type and
--- the value is any type at all.  This is, by definition, a dictionary,
--- so this type string corresponds to %G_VARIANT_TYPE_DICTIONARY. Note
--- that, due to the restriction that the key of a dictionary entry must
--- be a basic type, "{**}" is not a valid type string.
---
--- ---
---
---@class GLib.VariantType
---@operator call: GLib.VariantType
GLib.VariantType = {}

--- # method GLib.VariantType:copy()
---
--- Makes a copy of a `GVariantType`.  It is appropriate to call
--- `g_variant_type_free()` on the return value.  `type` may not be `nil`.
---
--- ---
---
---@param self GLib.VariantType # a `GVariantType`
---@return GLib.VariantType # a new `GVariantType` Since 2.24
function GLib.VariantType:copy() end

--- # method GLib.VariantType:dup_string()
---
--- Returns a newly-allocated copy of the type string corresponding to
--- `type`.  The returned string is nul-terminated.  It is appropriate to
--- call `g_free()` on the return value.
---
--- ---
---
---@param self GLib.VariantType # a `GVariantType`
---@return string # the corresponding type string Since 2.24
function GLib.VariantType:dup_string() end

--- # method GLib.VariantType:element()
---
--- Determines the element type of an array or maybe type.
--- 
--- This function may only be used with array or maybe types.
---
--- ---
---
---@param self GLib.VariantType # an array or maybe `GVariantType`
---@return GLib.VariantType # the element type of `type` Since 2.24
function GLib.VariantType:element() end

--- # method GLib.VariantType:equal()
---
--- Compares `type1` and `type2` for equality.
--- 
--- Only returns `true` if the types are exactly equal.  Even if one type
--- is an indefinite type and the other is a subtype of it, `false` will
--- be returned if they are not exactly equal.  If you want to check for
--- subtypes, use `g_variant_type_is_subtype_of()`.
--- 
--- The argument types of `type1` and `type2` are only `gconstpointer` to
--- allow use with `GHashTable` without function pointer casting.  For
--- both arguments, a valid `GVariantType` must be provided.
---
--- ---
---
---@param self GLib.VariantType # a `GVariantType`
---@param type2 GLib.VariantType # a `GVariantType`
---@return (boolean|nil) # `true` if `type1` and `type2` are exactly equal Since 2.24
function GLib.VariantType:equal(type2) end

--- # method GLib.VariantType:first()
---
--- Determines the first item type of a tuple or dictionary entry
--- type.
--- 
--- This function may only be used with tuple or dictionary entry types,
--- but must not be used with the generic tuple type
--- %G_VARIANT_TYPE_TUPLE.
--- 
--- In the case of a dictionary entry type, this returns the type of
--- the key.
--- 
--- `nil` is returned in case of `type` being %G_VARIANT_TYPE_UNIT.
--- 
--- This call, together with `g_variant_type_next()` provides an iterator
--- interface over tuple and dictionary entry types.
---
--- ---
---
---@param self GLib.VariantType # a tuple or dictionary entry `GVariantType`
---@return GLib.VariantType # the first item type of `type`, or `nil` Since 2.24
function GLib.VariantType:first() end

--- # method GLib.VariantType:free()
---
--- Frees a `GVariantType` that was allocated with
--- `g_variant_type_copy()`, `g_variant_type_new()` or one of the container
--- type constructor functions.
--- 
--- In the case that `type` is `nil`, this function does nothing.
--- 
--- Since 2.24
---
--- ---
---
---@param self? GLib.VariantType # a `GVariantType`, or `nil`
---@return nil
function GLib.VariantType:free() end

--- # method GLib.VariantType:get_string_length()
---
--- Returns the length of the type string corresponding to the given
--- `type`.  This function must be used to determine the valid extent of
--- the memory region returned by `g_variant_type_peek_string()`.
---
--- ---
---
---@param self GLib.VariantType # a `GVariantType`
---@return integer # the length of the corresponding type string Since 2.24
function GLib.VariantType:get_string_length() end

--- # method GLib.VariantType:hash()
---
--- Hashes `type`.
--- 
--- The argument type of `type` is only `gconstpointer` to allow use with
--- `GHashTable` without function pointer casting.  A valid
--- `GVariantType` must be provided.
---
--- ---
---
---@param self GLib.VariantType # a `GVariantType`
---@return integer # the hash value Since 2.24
function GLib.VariantType:hash() end

--- # method GLib.VariantType:is_array()
---
--- Determines if the given `type` is an array type.  This is true if the
--- type string for `type` starts with an 'a'.
--- 
--- This function returns `true` for any indefinite type for which every
--- definite subtype is an array type -- %G_VARIANT_TYPE_ARRAY, for
--- example.
---
--- ---
---
---@param self GLib.VariantType # a `GVariantType`
---@return (boolean|nil) # `true` if `type` is an array type Since 2.24
function GLib.VariantType:is_array() end

--- # method GLib.VariantType:is_basic()
---
--- Determines if the given `type` is a basic type.
--- 
--- Basic types are booleans, bytes, integers, doubles, strings, object
--- paths and signatures.
--- 
--- Only a basic type may be used as the key of a dictionary entry.
--- 
--- This function returns `false` for all indefinite types except
--- %G_VARIANT_TYPE_BASIC.
---
--- ---
---
---@param self GLib.VariantType # a `GVariantType`
---@return (boolean|nil) # `true` if `type` is a basic type Since 2.24
function GLib.VariantType:is_basic() end

--- # method GLib.VariantType:is_container()
---
--- Determines if the given `type` is a container type.
--- 
--- Container types are any array, maybe, tuple, or dictionary
--- entry types plus the variant type.
--- 
--- This function returns `true` for any indefinite type for which every
--- definite subtype is a container -- %G_VARIANT_TYPE_ARRAY, for
--- example.
---
--- ---
---
---@param self GLib.VariantType # a `GVariantType`
---@return (boolean|nil) # `true` if `type` is a container type Since 2.24
function GLib.VariantType:is_container() end

--- # method GLib.VariantType:is_definite()
---
--- Determines if the given `type` is definite (ie: not indefinite).
--- 
--- A type is definite if its type string does not contain any indefinite
--- type characters ('*', '?', or 'r').
--- 
--- A `GVariant` instance may not have an indefinite type, so calling
--- this function on the result of `g_variant_get_type()` will always
--- result in `true` being returned.  Calling this function on an
--- indefinite type like %G_VARIANT_TYPE_ARRAY, however, will result in
--- `false` being returned.
---
--- ---
---
---@param self GLib.VariantType # a `GVariantType`
---@return (boolean|nil) # `true` if `type` is definite Since 2.24
function GLib.VariantType:is_definite() end

--- # method GLib.VariantType:is_dict_entry()
---
--- Determines if the given `type` is a dictionary entry type.  This is
--- true if the type string for `type` starts with a '{'.
--- 
--- This function returns `true` for any indefinite type for which every
--- definite subtype is a dictionary entry type --
--- %G_VARIANT_TYPE_DICT_ENTRY, for example.
---
--- ---
---
---@param self GLib.VariantType # a `GVariantType`
---@return (boolean|nil) # `true` if `type` is a dictionary entry type Since 2.24
function GLib.VariantType:is_dict_entry() end

--- # method GLib.VariantType:is_maybe()
---
--- Determines if the given `type` is a maybe type.  This is true if the
--- type string for `type` starts with an 'm'.
--- 
--- This function returns `true` for any indefinite type for which every
--- definite subtype is a maybe type -- %G_VARIANT_TYPE_MAYBE, for
--- example.
---
--- ---
---
---@param self GLib.VariantType # a `GVariantType`
---@return (boolean|nil) # `true` if `type` is a maybe type Since 2.24
function GLib.VariantType:is_maybe() end

--- # method GLib.VariantType:is_subtype_of()
---
--- Checks if `type` is a subtype of `supertype`.
--- 
--- This function returns `true` if `type` is a subtype of `supertype`.  All
--- types are considered to be subtypes of themselves.  Aside from that,
--- only indefinite types can have subtypes.
---
--- ---
---
---@param self GLib.VariantType # a `GVariantType`
---@param supertype GLib.VariantType # a `GVariantType`
---@return (boolean|nil) # `true` if `type` is a subtype of `supertype` Since 2.24
function GLib.VariantType:is_subtype_of(supertype) end

--- # method GLib.VariantType:is_tuple()
---
--- Determines if the given `type` is a tuple type.  This is true if the
--- type string for `type` starts with a '(' or if `type` is
--- %G_VARIANT_TYPE_TUPLE.
--- 
--- This function returns `true` for any indefinite type for which every
--- definite subtype is a tuple type -- %G_VARIANT_TYPE_TUPLE, for
--- example.
---
--- ---
---
---@param self GLib.VariantType # a `GVariantType`
---@return (boolean|nil) # `true` if `type` is a tuple type Since 2.24
function GLib.VariantType:is_tuple() end

--- # method GLib.VariantType:is_variant()
---
--- Determines if the given `type` is the variant type.
---
--- ---
---
---@param self GLib.VariantType # a `GVariantType`
---@return (boolean|nil) # `true` if `type` is the variant type Since 2.24
function GLib.VariantType:is_variant() end

--- # method GLib.VariantType:key()
---
--- Determines the key type of a dictionary entry type.
--- 
--- This function may only be used with a dictionary entry type.  Other
--- than the additional restriction, this call is equivalent to
--- `g_variant_type_first()`.
---
--- ---
---
---@param self GLib.VariantType # a dictionary entry `GVariantType`
---@return GLib.VariantType # the key type of the dictionary entry Since 2.24
function GLib.VariantType:key() end

--- # method GLib.VariantType:n_items()
---
--- Determines the number of items contained in a tuple or
--- dictionary entry type.
--- 
--- This function may only be used with tuple or dictionary entry types,
--- but must not be used with the generic tuple type
--- %G_VARIANT_TYPE_TUPLE.
--- 
--- In the case of a dictionary entry type, this function will always
--- return 2.
---
--- ---
---
---@param self GLib.VariantType # a tuple or dictionary entry `GVariantType`
---@return integer # the number of items in `type` Since 2.24
function GLib.VariantType:n_items() end

--- # method GLib.VariantType:next()
---
--- Determines the next item type of a tuple or dictionary entry
--- type.
--- 
--- `type` must be the result of a previous call to
--- `g_variant_type_first()` or `g_variant_type_next()`.
--- 
--- If called on the key type of a dictionary entry then this call
--- returns the value type.  If called on the value type of a dictionary
--- entry then this call returns `nil`.
--- 
--- For tuples, `nil` is returned when `type` is the last item in a tuple.
---
--- ---
---
---@param self GLib.VariantType # a `GVariantType` from a previous call
---@return GLib.VariantType # the next `GVariantType` after `type`, or `nil` Since 2.24
function GLib.VariantType:next() end

--- # method GLib.VariantType:value()
---
--- Determines the value type of a dictionary entry type.
--- 
--- This function may only be used with a dictionary entry type.
---
--- ---
---
---@param self GLib.VariantType # a dictionary entry `GVariantType`
---@return GLib.VariantType # the value type of the dictionary entry Since 2.24
function GLib.VariantType:value() end

--- # function GLib.VariantType.checked_()
---
---@param arg0 string
---@return GLib.VariantType
function GLib.VariantType.checked_(arg0) end

--- # function GLib.VariantType.string_get_depth_()
---
---@param type_string string
---@return integer
function GLib.VariantType.string_get_depth_(type_string) end

--- # function GLib.VariantType.string_is_valid()
---
--- Checks if `type_string` is a valid GVariant type string.  This call is
--- equivalent to calling `g_variant_type_string_scan()` and confirming
--- that the following character is a nul terminator.
---
--- ---
---
---@param type_string string # a pointer to any string
---@return (boolean|nil) # `true` if `type_string` is exactly one valid type string Since 2.24
function GLib.VariantType.string_is_valid(type_string) end

--- # function GLib.VariantType.string_scan()
---
--- Scan for a single complete and valid GVariant type string in `string`.
--- The memory pointed to by `limit` (or bytes beyond it) is never
--- accessed.
--- 
--- If a valid type string is found, `endptr` is updated to point to the
--- first character past the end of the string that was found and `true`
--- is returned.
--- 
--- If there is no valid type string starting at `string`, or if the type
--- string does not end before `limit` then `false` is returned.
--- 
--- For the simple case of checking if a string is a valid type string,
--- see `g_variant_type_string_is_valid()`.
---
--- ---
---
---@param string string # a pointer to any string
---@param limit? string # the end of `string`, or `nil`
---@param endptr? string # location to store the end pointer, or `nil`
---@return (boolean|nil) # `true` if a valid type string was found
function GLib.VariantType.string_scan(string, limit, endptr) end

--- # function GLib.VariantType.new()
---
--- Creates a new `GVariantType` corresponding to the type string given
--- by `type_string`.  It is appropriate to call `g_variant_type_free()` on
--- the return value.
--- 
--- It is a programmer error to call this function with an invalid type
--- string.  Use `g_variant_type_string_is_valid()` if you are unsure.
---
--- ---
---
---@param type_string string # a valid GVariant type string
---@return GLib.VariantType # a new `GVariantType`
function GLib.VariantType.new(type_string) end

--- # function GLib.VariantType.new_array()
---
--- Constructs the type corresponding to an array of elements of the
--- type `type`.
--- 
--- It is appropriate to call `g_variant_type_free()` on the return value.
---
--- ---
---
---@param element GLib.VariantType # a `GVariantType`
---@return GLib.VariantType # a new array `GVariantType` Since 2.24
function GLib.VariantType.new_array(element) end

--- # function GLib.VariantType.new_dict_entry()
---
--- Constructs the type corresponding to a dictionary entry with a key
--- of type `key` and a value of type `value`.
--- 
--- It is appropriate to call `g_variant_type_free()` on the return value.
---
--- ---
---
---@param key GLib.VariantType # a basic `GVariantType`
---@param value GLib.VariantType # a `GVariantType`
---@return GLib.VariantType # a new dictionary entry `GVariantType` Since 2.24
function GLib.VariantType.new_dict_entry(key, value) end

--- # function GLib.VariantType.new_maybe()
---
--- Constructs the type corresponding to a maybe instance containing
--- type `type` or Nothing.
--- 
--- It is appropriate to call `g_variant_type_free()` on the return value.
---
--- ---
---
---@param element GLib.VariantType # a `GVariantType`
---@return GLib.VariantType # a new maybe `GVariantType` Since 2.24
function GLib.VariantType.new_maybe(element) end

--- # function GLib.VariantType.new_tuple()
---
--- Constructs a new tuple type, from `items`.
--- 
--- `length` is the number of items in `items`, or -1 to indicate that
--- `items` is `nil`-terminated.
--- 
--- It is appropriate to call `g_variant_type_free()` on the return value.
---
--- ---
---
---@param items unknown[] # an array of `GVariantTypes`, one for each item
---@param length integer # the length of `items`, or -1
---@return GLib.VariantType # a new tuple `GVariantType` Since 2.24
function GLib.VariantType.new_tuple(items, length) end

---@alias GLib.VoidFunc fun(): nil

--- # function GLib.access()
---
--- A wrapper for the POSIX `access()` function. This function is used to
--- test a pathname for one or several of read, write or execute
--- permissions, or just existence.
--- 
--- On Windows, the file protection mechanism is not at all POSIX-like,
--- and the underlying function in the C library only checks the
--- FAT-style READONLY attribute, and does not look at the ACL of a
--- file at all. This function is this in practise almost useless on
--- Windows. Software that needs to handle file permissions on Windows
--- more exactly should use the Win32 API.
--- 
--- See your C library manual for more details about `access()`.
---
--- ---
---
---@param filename string # a pathname in the GLib file name encoding (UTF-8 on Windows)
---@param mode integer # as in `access()`
---@return integer # zero if the pathname refers to an existing file system object that has all the tested permissions, or -1 otherwise or on error.
function GLib.access(filename, mode) end

--- # function GLib.aligned_alloc()
---
--- This function is similar to `g_malloc()`, allocating (`n_blocks` * `n_block_bytes`)
--- bytes, but care is taken to align the allocated memory to with the given
--- alignment value. Additionally, it will detect possible overflow during
--- multiplication.
--- 
--- If the allocation fails (because the system is out of memory),
--- the program is terminated.
--- 
--- Aligned memory allocations returned by this function can only be
--- freed using `g_aligned_free_sized()` or `g_aligned_free()`.
---
--- ---
---
---@param n_blocks integer # the number of blocks to allocate
---@param n_block_bytes integer # the size of each block in bytes
---@param alignment integer # the alignment to be enforced, which must be a positive power of 2 and a multiple of `sizeof(void*)`
---@return userdata # the allocated memory
function GLib.aligned_alloc(n_blocks, n_block_bytes, alignment) end

--- # function GLib.aligned_alloc0()
---
--- This function is similar to `g_aligned_alloc()`, but it will
--- also clear the allocated memory before returning it.
---
--- ---
---
---@param n_blocks integer # the number of blocks to allocate
---@param n_block_bytes integer # the size of each block in bytes
---@param alignment integer # the alignment to be enforced, which must be a positive power of 2 and a multiple of `sizeof(void*)`
---@return userdata # the allocated, cleared memory
function GLib.aligned_alloc0(n_blocks, n_block_bytes, alignment) end

--- # function GLib.aligned_free()
---
--- Frees the memory allocated by `g_aligned_alloc()`.
---
--- ---
---
---@param mem? userdata # the memory to deallocate
---@return nil
function GLib.aligned_free(mem) end

--- # function GLib.aligned_free_sized()
---
--- Frees the memory pointed to by `mem`, assuming it is has the given `size` and
--- `alignment`.
--- 
--- If `mem` is `nil` this is a no-op (and `size` is ignored).
--- 
--- It is an error if `size` doesn’t match the size, or `alignment` doesn’t match
--- the alignment, passed when `mem` was allocated. `size` and `alignment` are
--- passed to this function to allow optimizations in the allocator. If you
--- don’t know either of them, use `g_aligned_free()` instead.
---
--- ---
---
---@param mem? userdata # the memory to free
---@param alignment integer # alignment of `mem`
---@param size integer # size of `mem`, in bytes
---@return nil
function GLib.aligned_free_sized(mem, alignment, size) end

--- # function GLib.ascii_digit_value()
---
--- Determines the numeric value of a character as a decimal digit.
--- Differs from `g_unichar_digit_value()` because it takes a char, so
--- there's no worry about sign extension if characters are signed.
---
--- ---
---
---@param c integer # an ASCII character
---@return integer # If `c` is a decimal digit (according to `g_ascii_isdigit()`), its numeric value. Otherwise, -1.
function GLib.ascii_digit_value(c) end

--- # function GLib.ascii_dtostr()
---
--- Converts a `gdouble` to a string, using the '.' as
--- decimal point.
--- 
--- This function generates enough precision that converting
--- the string back using `g_ascii_strtod()` gives the same machine-number
--- (on machines with IEEE compatible 64bit doubles). It is
--- guaranteed that the size of the resulting string will never
--- be larger than %G_ASCII_DTOSTR_BUF_SIZE bytes, including the terminating
--- nul character, which is always added.
---
--- ---
---
---@param buffer string # A buffer to place the resulting string in
---@param buf_len integer # The length of the buffer.
---@param d number # The `gdouble` to convert
---@return string # The pointer to the buffer with the converted string.
function GLib.ascii_dtostr(buffer, buf_len, d) end

--- # function GLib.ascii_formatd()
---
--- Converts a `gdouble` to a string, using the '.' as
--- decimal point. To format the number you pass in
--- a `printf()`-style format string. Allowed conversion
--- specifiers are 'e', 'E', 'f', 'F', 'g' and 'G'.
--- 
--- The `format` must just be a single format specifier
--- starting with `%`, expecting a `gdouble` argument.
--- 
--- The returned buffer is guaranteed to be nul-terminated.
--- 
--- If you just want to want to serialize the value into a
--- string, use `g_ascii_dtostr()`.
---
--- ---
---
---@param buffer string # A buffer to place the resulting string in
---@param buf_len integer # The length of the buffer.
---@param format string # The `printf()`-style format to use for the code to use for converting
---@param d number # The `gdouble` to convert
---@return string # The pointer to the buffer with the converted string.
function GLib.ascii_formatd(buffer, buf_len, format, d) end

--- # function GLib.ascii_strcasecmp()
---
--- Compare two strings, ignoring the case of ASCII characters.
--- 
--- Unlike the BSD `strcasecmp()` function, this only recognizes standard
--- ASCII letters and ignores the locale, treating all non-ASCII
--- bytes as if they are not letters.
--- 
--- This function should be used only on strings that are known to be
--- in encodings where the bytes corresponding to ASCII letters always
--- represent themselves. This includes UTF-8 and the ISO-8859-*
--- charsets, but not for instance double-byte encodings like the
--- Windows Codepage 932, where the trailing bytes of double-byte
--- characters include all ASCII letters. If you compare two CP932
--- strings using this function, you will get false matches.
--- 
--- Both `s1` and `s2` must be non-`nil`.
---
--- ---
---
---@param s1 string # string to compare with `s2`
---@param s2 string # string to compare with `s1`
---@return integer # 0 if the strings match, a negative value if `s1` < `s2`, or a positive value if `s1` > `s2`.
function GLib.ascii_strcasecmp(s1, s2) end

--- # function GLib.ascii_strdown()
---
--- Converts all upper case ASCII letters to lower case ASCII letters.
---
--- ---
---
---@param str string # a string
---@param len integer # length of `str` in bytes, or -1 if `str` is nul-terminated
---@return string # a newly-allocated string, with all the upper case characters in `str` converted to lower case, with semantics that exactly match `g_ascii_tolower()`. (Note that this is unlike the old `g_strdown()`, which modified the string in place.)
function GLib.ascii_strdown(str, len) end

--- # function GLib.ascii_string_to_signed()
---
--- A convenience function for converting a string to a signed number.
--- 
--- This function assumes that `str` contains only a number of the given
--- `base` that is within inclusive bounds limited by `min` and `max`. If
--- this is true, then the converted number is stored in `out_num`. An
--- empty string is not a valid input. A string with leading or
--- trailing whitespace is also an invalid input.
--- 
--- `base` can be between 2 and 36 inclusive. Hexadecimal numbers must
--- not be prefixed with "0x" or "0X". Such a problem does not exist
--- for octal numbers, since they were usually prefixed with a zero
--- which does not change the value of the parsed number.
--- 
--- Parsing failures result in an error with the %G_NUMBER_PARSER_ERROR
--- domain. If the input is invalid, the error code will be
--- %G_NUMBER_PARSER_ERROR_INVALID. If the parsed number is out of
--- bounds - %G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS.
--- 
--- See `g_ascii_strtoll()` if you have more complex needs such as
--- parsing a string which starts with a number, but then has other
--- characters.
---
--- ---
---
---@param str string # a string
---@param base integer # base of a parsed number
---@param min integer # a lower bound (inclusive)
---@param max integer # an upper bound (inclusive)
---@param out_num? integer # a return location for a number
---@return (boolean|nil) # `true` if `str` was a number, otherwise `false`.
function GLib.ascii_string_to_signed(str, base, min, max, out_num) end

--- # function GLib.ascii_string_to_unsigned()
---
--- A convenience function for converting a string to an unsigned number.
--- 
--- This function assumes that `str` contains only a number of the given
--- `base` that is within inclusive bounds limited by `min` and `max`. If
--- this is true, then the converted number is stored in `out_num`. An
--- empty string is not a valid input. A string with leading or
--- trailing whitespace is also an invalid input. A string with a leading sign
--- (`-` or `+`) is not a valid input for the unsigned parser.
--- 
--- `base` can be between 2 and 36 inclusive. Hexadecimal numbers must
--- not be prefixed with "0x" or "0X". Such a problem does not exist
--- for octal numbers, since they were usually prefixed with a zero
--- which does not change the value of the parsed number.
--- 
--- Parsing failures result in an error with the %G_NUMBER_PARSER_ERROR
--- domain. If the input is invalid, the error code will be
--- %G_NUMBER_PARSER_ERROR_INVALID. If the parsed number is out of
--- bounds - %G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS.
--- 
--- See `g_ascii_strtoull()` if you have more complex needs such as
--- parsing a string which starts with a number, but then has other
--- characters.
---
--- ---
---
---@param str string # a string
---@param base integer # base of a parsed number
---@param min integer # a lower bound (inclusive)
---@param max integer # an upper bound (inclusive)
---@param out_num? integer # a return location for a number
---@return (boolean|nil) # `true` if `str` was a number, otherwise `false`.
function GLib.ascii_string_to_unsigned(str, base, min, max, out_num) end

--- # function GLib.ascii_strncasecmp()
---
--- Compare `s1` and `s2`, ignoring the case of ASCII characters and any
--- characters after the first `n` in each string. If either string is
--- less than `n` bytes long, comparison will stop at the first nul byte
--- encountered.
--- 
--- Unlike the BSD `strcasecmp()` function, this only recognizes standard
--- ASCII letters and ignores the locale, treating all non-ASCII
--- characters as if they are not letters.
--- 
--- The same warning as in `g_ascii_strcasecmp()` applies: Use this
--- function only on strings known to be in encodings where bytes
--- corresponding to ASCII letters always represent themselves.
---
--- ---
---
---@param s1 string # string to compare with `s2`
---@param s2 string # string to compare with `s1`
---@param n integer # number of characters to compare
---@return integer # 0 if the strings match, a negative value if `s1` < `s2`, or a positive value if `s1` > `s2`.
function GLib.ascii_strncasecmp(s1, s2, n) end

--- # function GLib.ascii_strtod()
---
--- Converts a string to a `gdouble` value.
--- 
--- This function behaves like the standard `strtod()` function
--- does in the C locale. It does this without actually changing
--- the current locale, since that would not be thread-safe.
--- A limitation of the implementation is that this function
--- will still accept localized versions of infinities and NANs.
--- 
--- This function is typically used when reading configuration
--- files or other non-user input that should be locale independent.
--- To handle input from the user you should normally use the
--- locale-sensitive system `strtod()` function.
--- 
--- To convert from a `gdouble` to a string in a locale-insensitive
--- way, use `g_ascii_dtostr()`.
--- 
--- If the correct value would cause overflow, plus or minus %HUGE_VAL
--- is returned (according to the sign of the value), and %ERANGE is
--- stored in %errno. If the correct value would cause underflow,
--- zero is returned and %ERANGE is stored in %errno.
--- 
--- This function resets %errno before calling `strtod()` so that
--- you can reliably detect overflow and underflow.
---
--- ---
---
---@param nptr string # the string to convert to a numeric value.
---@param endptr? string # if non-`nil`, it returns the character after the last character used in the conversion.
---@return number # the `gdouble` value.
function GLib.ascii_strtod(nptr, endptr) end

--- # function GLib.ascii_strtoll()
---
--- Converts a string to a `gint64` value.
--- This function behaves like the standard `strtoll()` function
--- does in the C locale. It does this without actually
--- changing the current locale, since that would not be
--- thread-safe.
--- 
--- This function is typically used when reading configuration
--- files or other non-user input that should be locale independent.
--- To handle input from the user you should normally use the
--- locale-sensitive system `strtoll()` function.
--- 
--- If the correct value would cause overflow, %G_MAXINT64 or %G_MININT64
--- is returned, and `ERANGE` is stored in `errno`.
--- If the base is outside the valid range, zero is returned, and
--- `EINVAL` is stored in `errno`. If the
--- string conversion fails, zero is returned, and `endptr` returns `nptr`
--- (if `endptr` is non-`nil`).
---
--- ---
---
---@param nptr string # the string to convert to a numeric value.
---@param endptr? string # if non-`nil`, it returns the character after the last character used in the conversion.
---@param base integer # to be used for the conversion, 2..36 or 0
---@return integer # the `gint64` value or zero on error.
function GLib.ascii_strtoll(nptr, endptr, base) end

--- # function GLib.ascii_strtoull()
---
--- Converts a string to a `guint64` value.
--- This function behaves like the standard `strtoull()` function
--- does in the C locale. It does this without actually
--- changing the current locale, since that would not be
--- thread-safe.
--- 
--- Note that input with a leading minus sign (`-`) is accepted, and will return
--- the negation of the parsed number, unless that would overflow a `guint64`.
--- Critically, this means you cannot assume that a short fixed length input will
--- never result in a low return value, as the input could have a leading `-`.
--- 
--- This function is typically used when reading configuration
--- files or other non-user input that should be locale independent.
--- To handle input from the user you should normally use the
--- locale-sensitive system `strtoull()` function.
--- 
--- If the correct value would cause overflow, %G_MAXUINT64
--- is returned, and `ERANGE` is stored in `errno`.
--- If the base is outside the valid range, zero is returned, and
--- `EINVAL` is stored in `errno`.
--- If the string conversion fails, zero is returned, and `endptr` returns
--- `nptr` (if `endptr` is non-`nil`).
---
--- ---
---
---@param nptr string # the string to convert to a numeric value.
---@param endptr? string # if non-`nil`, it returns the character after the last character used in the conversion.
---@param base integer # to be used for the conversion, 2..36 or 0
---@return integer # the `guint64` value or zero on error.
function GLib.ascii_strtoull(nptr, endptr, base) end

--- # function GLib.ascii_strup()
---
--- Converts all lower case ASCII letters to upper case ASCII letters.
---
--- ---
---
---@param str string # a string
---@param len integer # length of `str` in bytes, or -1 if `str` is nul-terminated
---@return string # a newly allocated string, with all the lower case characters in `str` converted to upper case, with semantics that exactly match `g_ascii_toupper()`. (Note that this is unlike the old `g_strup()`, which modified the string in place.)
function GLib.ascii_strup(str, len) end

--- # function GLib.ascii_tolower()
---
--- Convert a character to ASCII lower case.
--- 
--- Unlike the standard C library `tolower()` function, this only
--- recognizes standard ASCII letters and ignores the locale, returning
--- all non-ASCII characters unchanged, even if they are lower case
--- letters in a particular character set. Also unlike the standard
--- library function, this takes and returns a char, not an int, so
--- don't call it on %EOF but no need to worry about casting to `guchar`
--- before passing a possibly non-ASCII character in.
---
--- ---
---
---@param c integer # any character
---@return integer # the result of converting `c` to lower case. If `c` is not an ASCII upper case letter, `c` is returned unchanged.
function GLib.ascii_tolower(c) end

--- # function GLib.ascii_toupper()
---
--- Convert a character to ASCII upper case.
--- 
--- Unlike the standard C library `toupper()` function, this only
--- recognizes standard ASCII letters and ignores the locale, returning
--- all non-ASCII characters unchanged, even if they are upper case
--- letters in a particular character set. Also unlike the standard
--- library function, this takes and returns a char, not an int, so
--- don't call it on %EOF but no need to worry about casting to `guchar`
--- before passing a possibly non-ASCII character in.
---
--- ---
---
---@param c integer # any character
---@return integer # the result of converting `c` to upper case. If `c` is not an ASCII lower case letter, `c` is returned unchanged.
function GLib.ascii_toupper(c) end

--- # function GLib.ascii_xdigit_value()
---
--- Determines the numeric value of a character as a hexadecimal
--- digit. Differs from `g_unichar_xdigit_value()` because it takes
--- a char, so there's no worry about sign extension if characters
--- are signed.
---
--- ---
---
---@param c integer # an ASCII character.
---@return integer # If `c` is a hex digit (according to `g_ascii_isxdigit()`), its numeric value. Otherwise, -1.
function GLib.ascii_xdigit_value(c) end

--- # function GLib.assert_warning()
---
---@param log_domain string
---@param file string
---@param line integer
---@param pretty_function string
---@param expression string
---@return nil
function GLib.assert_warning(log_domain, file, line, pretty_function, expression) end

--- # function GLib.assertion_message()
---
---@param domain string
---@param file string
---@param line integer
---@param func string
---@param message string
---@return nil
function GLib.assertion_message(domain, file, line, func, message) end

--- # function GLib.assertion_message_cmpstr()
---
---@param domain string
---@param file string
---@param line integer
---@param func string
---@param expr string
---@param arg1 string
---@param cmp string
---@param arg2 string
---@return nil
function GLib.assertion_message_cmpstr(domain, file, line, func, expr, arg1, cmp, arg2) end

--- # function GLib.assertion_message_cmpstrv()
---
---@param domain string
---@param file string
---@param line integer
---@param func string
---@param expr string
---@param arg1 string
---@param arg2 string
---@param first_wrong_idx integer
---@return nil
function GLib.assertion_message_cmpstrv(domain, file, line, func, expr, arg1, arg2, first_wrong_idx) end

--- # function GLib.assertion_message_error()
---
---@param domain string
---@param file string
---@param line integer
---@param func string
---@param expr string
---@param error GLib.Error
---@param error_domain GLib.Quark
---@param error_code integer
---@return nil
function GLib.assertion_message_error(domain, file, line, func, expr, error, error_domain, error_code) end

--- # function GLib.atexit()
---
--- Specifies a function to be called at normal program termination.
--- 
--- Since GLib 2.8.2, on Windows `g_atexit()` actually is a preprocessor
--- macro that maps to a call to the `atexit()` function in the C
--- library. This means that in case the code that calls `g_atexit()`,
--- i.e. `atexit()`, is in a DLL, the function will be called when the
--- DLL is detached from the program. This typically makes more sense
--- than that the function is called when the GLib DLL is detached,
--- which happened earlier when `g_atexit()` was a function in the GLib
--- DLL.
--- 
--- The behaviour of `atexit()` in the context of dynamically loaded
--- modules is not formally specified and varies wildly.
--- 
--- On POSIX systems, calling `g_atexit()` (or `atexit()`) in a dynamically
--- loaded module which is unloaded before the program terminates might
--- well cause a crash at program exit.
--- 
--- Some POSIX systems implement `atexit()` like Windows, and have each
--- dynamically loaded module maintain an own atexit chain that is
--- called when the module is unloaded.
--- 
--- On other POSIX systems, before a dynamically loaded module is
--- unloaded, the registered atexit functions (if any) residing in that
--- module are called, regardless where the code that registered them
--- resided. This is presumably the most robust approach.
--- 
--- As can be seen from the above, for portability it's best to avoid
--- calling `g_atexit()` (or `atexit()`) except in the main executable of a
--- program.
---
--- ---
---
---@param func GLib.VoidFunc # the function to call on normal program termination.
---@return nil
function GLib.atexit(func) end

--- # function GLib.atomic_int_add()
---
--- Atomically adds `val` to the value of `atomic`.
--- 
--- Think of this operation as an atomic version of
--- `{ tmp = *atomic; *atomic += val; return tmp; }`.
--- 
--- This call acts as a full compiler and hardware memory barrier.
--- 
--- Before version 2.30, this function did not return a value
--- (but `g_atomic_int_exchange_and_add()` did, and had the same meaning).
--- 
--- While `atomic` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param atomic integer # a pointer to a `gint` or `guint`
---@param val integer # the value to add
---@return integer # the value of `atomic` before the add, signed
function GLib.atomic_int_add(atomic, val) end

--- # function GLib.atomic_int_and()
---
--- Performs an atomic bitwise 'and' of the value of `atomic` and `val`,
--- storing the result back in `atomic`.
--- 
--- This call acts as a full compiler and hardware memory barrier.
--- 
--- Think of this operation as an atomic version of
--- `{ tmp = *atomic; *atomic &= val; return tmp; }`.
--- 
--- While `atomic` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param atomic integer # a pointer to a `gint` or `guint`
---@param val integer # the value to 'and'
---@return integer # the value of `atomic` before the operation, unsigned
function GLib.atomic_int_and(atomic, val) end

--- # function GLib.atomic_int_compare_and_exchange()
---
--- Compares `atomic` to `oldval` and, if equal, sets it to `newval`.
--- If `atomic` was not equal to `oldval` then no change occurs.
--- 
--- This compare and exchange is done atomically.
--- 
--- Think of this operation as an atomic version of
--- `{ if (*atomic == oldval) { *atomic = newval; return TRUE; } else return FALSE; }`.
--- 
--- This call acts as a full compiler and hardware memory barrier.
--- 
--- While `atomic` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param atomic integer # a pointer to a `gint` or `guint`
---@param oldval integer # the value to compare with
---@param newval integer # the value to conditionally replace with
---@return (boolean|nil) # `true` if the exchange took place
function GLib.atomic_int_compare_and_exchange(atomic, oldval, newval) end

--- # function GLib.atomic_int_compare_and_exchange_full()
---
--- Compares `atomic` to `oldval` and, if equal, sets it to `newval`.
--- If `atomic` was not equal to `oldval` then no change occurs.
--- In any case the value of `atomic` before this operation is stored in `preval`.
--- 
--- This compare and exchange is done atomically.
--- 
--- Think of this operation as an atomic version of
--- `{ *preval = *atomic; if (*atomic == oldval) { *atomic = newval; return TRUE; } else return FALSE; }`.
--- 
--- This call acts as a full compiler and hardware memory barrier.
--- 
--- See also `g_atomic_int_compare_and_exchange()`
---
--- ---
---
---@param atomic integer # a pointer to a `gint` or `guint`
---@param oldval integer # the value to compare with
---@param newval integer # the value to conditionally replace with
---@param preval integer # the contents of `atomic` before this operation
---@return (boolean|nil) # `true` if the exchange took place
function GLib.atomic_int_compare_and_exchange_full(atomic, oldval, newval, preval) end

--- # function GLib.atomic_int_dec_and_test()
---
--- Decrements the value of `atomic` by 1.
--- 
--- Think of this operation as an atomic version of
--- `{ *atomic -= 1; return (*atomic == 0); }`.
--- 
--- This call acts as a full compiler and hardware memory barrier.
--- 
--- While `atomic` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param atomic integer # a pointer to a `gint` or `guint`
---@return (boolean|nil) # `true` if the resultant value is zero
function GLib.atomic_int_dec_and_test(atomic) end

--- # function GLib.atomic_int_exchange()
---
--- Sets the `atomic` to `newval` and returns the old value from `atomic`.
--- 
--- This exchange is done atomically.
--- 
--- Think of this operation as an atomic version of
--- `{ tmp = *atomic; *atomic = val; return tmp; }`.
--- 
--- This call acts as a full compiler and hardware memory barrier.
---
--- ---
---
---@param atomic integer # a pointer to a `gint` or `guint`
---@param newval integer # the value to replace with
---@return integer # the value of `atomic` before the exchange, signed
function GLib.atomic_int_exchange(atomic, newval) end

--- # function GLib.atomic_int_exchange_and_add()
---
--- This function existed before `g_atomic_int_add()` returned the prior
--- value of the integer (which it now does).  It is retained only for
--- compatibility reasons.  Don't use this function in new code.
---
--- ---
---
---@param atomic integer # a pointer to a `gint`
---@param val integer # the value to add
---@return integer # the value of `atomic` before the add, signed
function GLib.atomic_int_exchange_and_add(atomic, val) end

--- # function GLib.atomic_int_get()
---
--- Gets the current value of `atomic`.
--- 
--- This call acts as a full compiler and hardware
--- memory barrier (before the get).
--- 
--- While `atomic` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param atomic integer # a pointer to a `gint` or `guint`
---@return integer # the value of the integer
function GLib.atomic_int_get(atomic) end

--- # function GLib.atomic_int_inc()
---
--- Increments the value of `atomic` by 1.
--- 
--- Think of this operation as an atomic version of `{ *atomic += 1; }`.
--- 
--- This call acts as a full compiler and hardware memory barrier.
--- 
--- While `atomic` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param atomic integer # a pointer to a `gint` or `guint`
---@return nil
function GLib.atomic_int_inc(atomic) end

--- # function GLib.atomic_int_or()
---
--- Performs an atomic bitwise 'or' of the value of `atomic` and `val`,
--- storing the result back in `atomic`.
--- 
--- Think of this operation as an atomic version of
--- `{ tmp = *atomic; *atomic |= val; return tmp; }`.
--- 
--- This call acts as a full compiler and hardware memory barrier.
--- 
--- While `atomic` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param atomic integer # a pointer to a `gint` or `guint`
---@param val integer # the value to 'or'
---@return integer # the value of `atomic` before the operation, unsigned
function GLib.atomic_int_or(atomic, val) end

--- # function GLib.atomic_int_set()
---
--- Sets the value of `atomic` to `newval`.
--- 
--- This call acts as a full compiler and hardware
--- memory barrier (after the set).
--- 
--- While `atomic` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param atomic integer # a pointer to a `gint` or `guint`
---@param newval integer # a new value to store
---@return nil
function GLib.atomic_int_set(atomic, newval) end

--- # function GLib.atomic_int_xor()
---
--- Performs an atomic bitwise 'xor' of the value of `atomic` and `val`,
--- storing the result back in `atomic`.
--- 
--- Think of this operation as an atomic version of
--- `{ tmp = *atomic; *atomic ^= val; return tmp; }`.
--- 
--- This call acts as a full compiler and hardware memory barrier.
--- 
--- While `atomic` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param atomic integer # a pointer to a `gint` or `guint`
---@param val integer # the value to 'xor'
---@return integer # the value of `atomic` before the operation, unsigned
function GLib.atomic_int_xor(atomic, val) end

--- # function GLib.atomic_pointer_add()
---
--- Atomically adds `val` to the value of `atomic`.
--- 
--- Think of this operation as an atomic version of
--- `{ tmp = *atomic; *atomic += val; return tmp; }`.
--- 
--- This call acts as a full compiler and hardware memory barrier.
--- 
--- While `atomic` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param atomic userdata # a pointer to a `gpointer`-sized value
---@param val integer # the value to add
---@return integer # the value of `atomic` before the add, signed
function GLib.atomic_pointer_add(atomic, val) end

--- # function GLib.atomic_pointer_and()
---
--- Performs an atomic bitwise 'and' of the value of `atomic` and `val`,
--- storing the result back in `atomic`.
--- 
--- Think of this operation as an atomic version of
--- `{ tmp = *atomic; *atomic &= val; return tmp; }`.
--- 
--- This call acts as a full compiler and hardware memory barrier.
--- 
--- While `atomic` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param atomic userdata # a pointer to a `gpointer`-sized value
---@param val integer # the value to 'and'
---@return integer # the value of `atomic` before the operation, unsigned
function GLib.atomic_pointer_and(atomic, val) end

--- # function GLib.atomic_pointer_compare_and_exchange()
---
--- Compares `atomic` to `oldval` and, if equal, sets it to `newval`.
--- If `atomic` was not equal to `oldval` then no change occurs.
--- 
--- This compare and exchange is done atomically.
--- 
--- Think of this operation as an atomic version of
--- `{ if (*atomic == oldval) { *atomic = newval; return TRUE; } else return FALSE; }`.
--- 
--- This call acts as a full compiler and hardware memory barrier.
--- 
--- While `atomic` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param atomic userdata # a pointer to a `gpointer`-sized value
---@param oldval? userdata # the value to compare with
---@param newval? userdata # the value to conditionally replace with
---@return (boolean|nil) # `true` if the exchange took place
function GLib.atomic_pointer_compare_and_exchange(atomic, oldval, newval) end

--- # function GLib.atomic_pointer_compare_and_exchange_full()
---
--- Compares `atomic` to `oldval` and, if equal, sets it to `newval`.
--- If `atomic` was not equal to `oldval` then no change occurs.
--- In any case the value of `atomic` before this operation is stored in `preval`.
--- 
--- This compare and exchange is done atomically.
--- 
--- Think of this operation as an atomic version of
--- `{ *preval = *atomic; if (*atomic == oldval) { *atomic = newval; return TRUE; } else return FALSE; }`.
--- 
--- This call acts as a full compiler and hardware memory barrier.
--- 
--- See also `g_atomic_pointer_compare_and_exchange()`
---
--- ---
---
---@param atomic userdata # a pointer to a `gpointer`-sized value
---@param oldval? userdata # the value to compare with
---@param newval? userdata # the value to conditionally replace with
---@param preval userdata # the contents of `atomic` before this operation
---@return (boolean|nil) # `true` if the exchange took place
function GLib.atomic_pointer_compare_and_exchange_full(atomic, oldval, newval, preval) end

--- # function GLib.atomic_pointer_exchange()
---
--- Sets the `atomic` to `newval` and returns the old value from `atomic`.
--- 
--- This exchange is done atomically.
--- 
--- Think of this operation as an atomic version of
--- `{ tmp = *atomic; *atomic = val; return tmp; }`.
--- 
--- This call acts as a full compiler and hardware memory barrier.
---
--- ---
---
---@param atomic? userdata # a pointer to a `gpointer`-sized value
---@param newval? userdata # the value to replace with
---@return userdata # the value of `atomic` before the exchange
function GLib.atomic_pointer_exchange(atomic, newval) end

--- # function GLib.atomic_pointer_get()
---
--- Gets the current value of `atomic`.
--- 
--- This call acts as a full compiler and hardware
--- memory barrier (before the get).
--- 
--- While `atomic` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param atomic userdata # a pointer to a `gpointer`-sized value
---@return userdata # the value of the pointer
function GLib.atomic_pointer_get(atomic) end

--- # function GLib.atomic_pointer_or()
---
--- Performs an atomic bitwise 'or' of the value of `atomic` and `val`,
--- storing the result back in `atomic`.
--- 
--- Think of this operation as an atomic version of
--- `{ tmp = *atomic; *atomic |= val; return tmp; }`.
--- 
--- This call acts as a full compiler and hardware memory barrier.
--- 
--- While `atomic` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param atomic userdata # a pointer to a `gpointer`-sized value
---@param val integer # the value to 'or'
---@return integer # the value of `atomic` before the operation, unsigned
function GLib.atomic_pointer_or(atomic, val) end

--- # function GLib.atomic_pointer_set()
---
--- Sets the value of `atomic` to `newval`.
--- 
--- This call acts as a full compiler and hardware
--- memory barrier (after the set).
--- 
--- While `atomic` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param atomic userdata # a pointer to a `gpointer`-sized value
---@param newval? userdata # a new value to store
---@return nil
function GLib.atomic_pointer_set(atomic, newval) end

--- # function GLib.atomic_pointer_xor()
---
--- Performs an atomic bitwise 'xor' of the value of `atomic` and `val`,
--- storing the result back in `atomic`.
--- 
--- Think of this operation as an atomic version of
--- `{ tmp = *atomic; *atomic ^= val; return tmp; }`.
--- 
--- This call acts as a full compiler and hardware memory barrier.
--- 
--- While `atomic` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param atomic userdata # a pointer to a `gpointer`-sized value
---@param val integer # the value to 'xor'
---@return integer # the value of `atomic` before the operation, unsigned
function GLib.atomic_pointer_xor(atomic, val) end

--- # function GLib.atomic_rc_box_acquire()
---
--- Atomically acquires a reference on the data pointed by `mem_block`.
---
--- ---
---
---@param mem_block userdata # a pointer to reference counted data
---@return userdata # a pointer to the data, with its reference count increased
function GLib.atomic_rc_box_acquire(mem_block) end

--- # function GLib.atomic_rc_box_alloc()
---
--- Allocates `block_size` bytes of memory, and adds atomic
--- reference counting semantics to it.
--- 
--- The data will be freed when its reference count drops to
--- zero.
--- 
--- The allocated data is guaranteed to be suitably aligned for any
--- built-in type.
---
--- ---
---
---@param block_size integer # the size of the allocation, must be greater than 0
---@return userdata # a pointer to the allocated memory
function GLib.atomic_rc_box_alloc(block_size) end

--- # function GLib.atomic_rc_box_alloc0()
---
--- Allocates `block_size` bytes of memory, and adds atomic
--- reference counting semantics to it.
--- 
--- The contents of the returned data is set to zero.
--- 
--- The data will be freed when its reference count drops to
--- zero.
--- 
--- The allocated data is guaranteed to be suitably aligned for any
--- built-in type.
---
--- ---
---
---@param block_size integer # the size of the allocation, must be greater than 0
---@return userdata # a pointer to the allocated memory
function GLib.atomic_rc_box_alloc0(block_size) end

--- # function GLib.atomic_rc_box_dup()
---
--- Allocates a new block of data with atomic reference counting
--- semantics, and copies `block_size` bytes of `mem_block`
--- into it.
---
--- ---
---
---@param block_size integer # the number of bytes to copy, must be greater than 0
---@param mem_block userdata # the memory to copy
---@return userdata # a pointer to the allocated memory
function GLib.atomic_rc_box_dup(block_size, mem_block) end

--- # function GLib.atomic_rc_box_get_size()
---
--- Retrieves the size of the reference counted data pointed by `mem_block`.
---
--- ---
---
---@param mem_block userdata # a pointer to reference counted data
---@return integer # the size of the data, in bytes
function GLib.atomic_rc_box_get_size(mem_block) end

--- # function GLib.atomic_rc_box_release()
---
--- Atomically releases a reference on the data pointed by `mem_block`.
--- 
--- If the reference was the last one, it will free the
--- resources allocated for `mem_block`.
---
--- ---
---
---@param mem_block userdata # a pointer to reference counted data
---@return nil
function GLib.atomic_rc_box_release(mem_block) end

--- # function GLib.atomic_rc_box_release_full()
---
--- Atomically releases a reference on the data pointed by `mem_block`.
--- 
--- If the reference was the last one, it will call `clear_func`
--- to clear the contents of `mem_block`, and then will free the
--- resources allocated for `mem_block`.
---
--- ---
---
---@param mem_block userdata # a pointer to reference counted data
---@param clear_func GLib.DestroyNotify # a function to call when clearing the data
---@return nil
function GLib.atomic_rc_box_release_full(mem_block, clear_func) end

--- # function GLib.atomic_ref_count_compare()
---
--- Atomically compares the current value of `arc` with `val`.
---
--- ---
---
---@param arc integer # the address of an atomic reference count variable
---@param val integer # the value to compare
---@return (boolean|nil) # `true` if the reference count is the same as the given value
function GLib.atomic_ref_count_compare(arc, val) end

--- # function GLib.atomic_ref_count_dec()
---
--- Atomically decreases the reference count.
--- 
--- If `true` is returned, the reference count reached 0. After this point, `arc`
--- is an undefined state and must be reinitialized with
--- `g_atomic_ref_count_init()` to be used again.
---
--- ---
---
---@param arc integer # the address of an atomic reference count variable
---@return (boolean|nil) # `true` if the reference count reached 0, and `false` otherwise
function GLib.atomic_ref_count_dec(arc) end

--- # function GLib.atomic_ref_count_inc()
---
--- Atomically increases the reference count.
---
--- ---
---
---@param arc integer # the address of an atomic reference count variable
---@return nil
function GLib.atomic_ref_count_inc(arc) end

--- # function GLib.atomic_ref_count_init()
---
--- Initializes a reference count variable to 1.
---
--- ---
---
---@param arc integer # the address of an atomic reference count variable
---@return nil
function GLib.atomic_ref_count_init(arc) end

--- # function GLib.base64_decode()
---
--- Decode a sequence of Base-64 encoded text into binary data.  Note
--- that the returned binary data is not necessarily zero-terminated,
--- so it should not be used as a character string.
---
--- ---
---
---@param text string # zero-terminated string with base64 text to decode
---@param out_len integer # The length of the decoded data is written here
---@return unknown[] # newly allocated buffer containing the binary data that `text` represents. The returned buffer must be freed with `g_free()`.
function GLib.base64_decode(text, out_len) end

--- # function GLib.base64_decode_inplace()
---
--- Decode a sequence of Base-64 encoded text into binary data
--- by overwriting the input data.
---
--- ---
---
---@param text unknown[] # zero-terminated string with base64 text to decode
---@param out_len integer # The length of the decoded data is written here
---@return integer # The binary data that `text` responds. This pointer is the same as the input `text`.
function GLib.base64_decode_inplace(text, out_len) end

--- # function GLib.base64_encode()
---
--- Encode a sequence of binary data into its Base-64 stringified
--- representation.
---
--- ---
---
---@param data? unknown[] # the binary data to encode
---@param len integer # the length of `data`
---@return string # a newly allocated, zero-terminated Base-64 encoded string representing `data`. The returned string must be freed with `g_free()`.
function GLib.base64_encode(data, len) end

--- # function GLib.base64_encode_close()
---
--- Flush the status from a sequence of calls to g_base64`_encode_step()`.
--- 
--- The output buffer must be large enough to fit all the data that will
--- be written to it. It will need up to 4 bytes, or up to 5 bytes if
--- line-breaking is enabled.
--- 
--- The `out` array will not be automatically nul-terminated.
---
--- ---
---
---@param break_lines (boolean|nil) # whether to break long lines
---@param out unknown[] # pointer to destination buffer
---@param state integer # Saved state from g_base64`_encode_step()`
---@param save integer # Saved state from g_base64`_encode_step()`
---@return integer # The number of bytes of output that was written
function GLib.base64_encode_close(break_lines, out, state, save) end

--- # function GLib.base64_encode_step()
---
--- Incrementally encode a sequence of binary data into its Base-64 stringified
--- representation. By calling this function multiple times you can convert
--- data in chunks to avoid having to have the full encoded data in memory.
--- 
--- When all of the data has been converted you must call
--- g_base64`_encode_close()` to flush the saved state.
--- 
--- The output buffer must be large enough to fit all the data that will
--- be written to it. Due to the way base64 encodes you will need
--- at least: (`len` / 3 + 1) * 4 + 4 bytes (+ 4 may be needed in case of
--- non-zero state). If you enable line-breaking you will need at least:
--- ((`len` / 3 + 1) * 4 + 4) / 76 + 1 bytes of extra space.
--- 
--- `break_lines` is typically used when putting base64-encoded data in emails.
--- It breaks the lines at 76 columns instead of putting all of the text on
--- the same line. This avoids problems with long lines in the email system.
--- Note however that it breaks the lines with `LF` characters, not
--- `CR LF` sequences, so the result cannot be passed directly to SMTP
--- or certain other protocols.
---
--- ---
---
---@param in__ unknown[] # the binary data to encode
---@param len integer # the length of `in`
---@param break_lines (boolean|nil) # whether to break long lines
---@param out unknown[] # pointer to destination buffer
---@param state integer # Saved state between steps, initialize to 0
---@param save integer # Saved state between steps, initialize to 0
---@return integer # The number of bytes of output that was written
function GLib.base64_encode_step(in__, len, break_lines, out, state, save) end

--- # function GLib.basename()
---
--- Gets the name of the file without any leading directory
--- components. It returns a pointer into the given file name
--- string.
---
--- ---
---
---@param file_name string # the name of the file
---@return string # the name of the file without any leading directory components
function GLib.basename(file_name) end

--- # function GLib.bit_lock()
---
--- Sets the indicated `lock_bit` in `address`.  If the bit is already
--- set, this call will block until `g_bit_unlock()` unsets the
--- corresponding bit.
--- 
--- Attempting to lock on two different bits within the same integer is
--- not supported and will very probably cause deadlocks.
--- 
--- The value of the bit that is set is (1u << `bit`).  If `bit` is not
--- between 0 and 31 then the result is undefined.
--- 
--- This function accesses `address` atomically.  All other accesses to
--- `address` must be atomic in order for this function to work
--- reliably. While `address` has a `volatile` qualifier, this is a historical
--- artifact and the argument passed to it should not be `volatile`.
---
--- ---
---
---@param address integer # a pointer to an integer
---@param lock_bit integer # a bit value between 0 and 31
---@return nil
function GLib.bit_lock(address, lock_bit) end

--- # function GLib.bit_nth_lsf()
---
--- Find the position of the first bit set in `mask`, searching
--- from (but not including) `nth_bit` upwards. Bits are numbered
--- from 0 (least significant) to sizeof(`gulong`) * 8 - 1 (31 or 63,
--- usually). To start searching from the 0th bit, set `nth_bit` to -1.
---
--- ---
---
---@param mask integer # a `gulong` containing flags
---@param nth_bit integer # the index of the bit to start the search from
---@return integer # the index of the first bit set which is higher than `nth_bit`, or -1 if no higher bits are set
function GLib.bit_nth_lsf(mask, nth_bit) end

--- # function GLib.bit_nth_msf()
---
--- Find the position of the first bit set in `mask`, searching
--- from (but not including) `nth_bit` downwards. Bits are numbered
--- from 0 (least significant) to sizeof(`gulong`) * 8 - 1 (31 or 63,
--- usually). To start searching from the last bit, set `nth_bit` to
--- -1 or GLIB_SIZEOF_LONG * 8.
---
--- ---
---
---@param mask integer # a `gulong` containing flags
---@param nth_bit integer # the index of the bit to start the search from
---@return integer # the index of the first bit set which is lower than `nth_bit`, or -1 if no lower bits are set
function GLib.bit_nth_msf(mask, nth_bit) end

--- # function GLib.bit_storage()
---
--- Gets the number of bits used to hold `number`,
--- e.g. if `number` is 4, 3 bits are needed.
---
--- ---
---
---@param number integer # a `guint`
---@return integer # the number of bits used to hold `number`
function GLib.bit_storage(number) end

--- # function GLib.bit_trylock()
---
--- Sets the indicated `lock_bit` in `address`, returning `true` if
--- successful.  If the bit is already set, returns `false` immediately.
--- 
--- Attempting to lock on two different bits within the same integer is
--- not supported.
--- 
--- The value of the bit that is set is (1u << `bit`).  If `bit` is not
--- between 0 and 31 then the result is undefined.
--- 
--- This function accesses `address` atomically.  All other accesses to
--- `address` must be atomic in order for this function to work
--- reliably. While `address` has a `volatile` qualifier, this is a historical
--- artifact and the argument passed to it should not be `volatile`.
---
--- ---
---
---@param address integer # a pointer to an integer
---@param lock_bit integer # a bit value between 0 and 31
---@return (boolean|nil) # `true` if the lock was acquired
function GLib.bit_trylock(address, lock_bit) end

--- # function GLib.bit_unlock()
---
--- Clears the indicated `lock_bit` in `address`.  If another thread is
--- currently blocked in `g_bit_lock()` on this same bit then it will be
--- woken up.
--- 
--- This function accesses `address` atomically.  All other accesses to
--- `address` must be atomic in order for this function to work
--- reliably. While `address` has a `volatile` qualifier, this is a historical
--- artifact and the argument passed to it should not be `volatile`.
---
--- ---
---
---@param address integer # a pointer to an integer
---@param lock_bit integer # a bit value between 0 and 31
---@return nil
function GLib.bit_unlock(address, lock_bit) end

--- # function GLib.bookmark_file_error_quark()
---
---@return GLib.Quark
function GLib.bookmark_file_error_quark() end

--- # function GLib.build_filenamev()
---
--- Creates a filename from a vector of elements using the correct
--- separator for the current platform.
--- 
--- This function behaves exactly like `g_build_filename()`, but takes the path
--- elements as a string array, instead of varargs. This function is mainly
--- meant for language bindings.
--- 
--- If you are building a path programmatically you may want to use
--- `GPathBuf` instead.
---
--- ---
---
---@param args unknown[] # `nil`-terminated array of strings containing the path elements.
---@return string # the newly allocated path
function GLib.build_filenamev(args) end

--- # function GLib.build_pathv()
---
--- Behaves exactly like `g_build_path()`, but takes the path elements
--- as a string array, instead of variadic arguments.
--- 
--- This function is mainly meant for language bindings.
---
--- ---
---
---@param separator string # a string used to separator the elements of the path.
---@param args unknown[] # `nil`-terminated array of strings containing the path elements.
---@return string # a newly-allocated string that must be freed with `g_free()`.
function GLib.build_pathv(separator, args) end

--- # function GLib.byte_array_free()
---
--- Frees the memory allocated by the `GByteArray`. If `free_segment` is
--- `true` it frees the actual byte data. If the reference count of
--- `array` is greater than one, the `GByteArray` wrapper is preserved but
--- the size of `array` will be set to zero.
---
--- ---
---
---@param array unknown[] # a `GByteArray`
---@param free_segment (boolean|nil) # if `true` the actual byte data is freed as well
---@return integer # the element data if `free_segment` is `false`, otherwise `nil`. The element data should be freed using `g_free()`.
function GLib.byte_array_free(array, free_segment) end

--- # function GLib.byte_array_free_to_bytes()
---
--- Transfers the data from the `GByteArray` into a new immutable `GBytes`.
--- 
--- The `GByteArray` is freed unless the reference count of `array` is greater
--- than one, the `GByteArray` wrapper is preserved but the size of `array`
--- will be set to zero.
--- 
--- This is identical to using `g_bytes_new_take()` and `g_byte_array_free()`
--- together.
---
--- ---
---
---@param array unknown[] # a `GByteArray`
---@return GLib.Bytes # a new immutable `GBytes` representing same byte data that was in the array
function GLib.byte_array_free_to_bytes(array) end

--- # function GLib.byte_array_new()
---
--- Creates a new `GByteArray` with a reference count of 1.
---
--- ---
---
---@return unknown[] # the new `GByteArray`
function GLib.byte_array_new() end

--- # function GLib.byte_array_new_take()
---
--- Create byte array containing the data. The data will be owned by the array
--- and will be freed with `g_free()`, i.e. it could be allocated using `g_strdup()`.
--- 
--- Do not use it if `len` is greater than %G_MAXUINT. `GByteArray`
--- stores the length of its data in `guint`, which may be shorter than
--- `gsize`.
---
--- ---
---
---@param data unknown[] # byte data for the array
---@param len integer # length of `data`
---@return unknown[] # a new `GByteArray`
function GLib.byte_array_new_take(data, len) end

--- # function GLib.byte_array_steal()
---
--- Frees the data in the array and resets the size to zero, while
--- the underlying array is preserved for use elsewhere and returned
--- to the caller.
---
--- ---
---
---@param array unknown[] # a `GByteArray`.
---@param len? integer # pointer to retrieve the number of elements of the original array
---@return integer # the element data, which should be freed using `g_free()`.
function GLib.byte_array_steal(array, len) end

--- # function GLib.byte_array_unref()
---
--- Atomically decrements the reference count of `array` by one. If the
--- reference count drops to 0, all memory allocated by the array is
--- released. This function is thread-safe and may be called from any
--- thread.
---
--- ---
---
---@param array unknown[] # A `GByteArray`
---@return nil
function GLib.byte_array_unref(array) end

--- # function GLib.canonicalize_filename()
---
--- Gets the canonical file name from `filename`. All triple slashes are turned into
--- single slashes, and all `..` and `.`s resolved against `relative_to`.
--- 
--- Symlinks are not followed, and the returned path is guaranteed to be absolute.
--- 
--- If `filename` is an absolute path, `relative_to` is ignored. Otherwise,
--- `relative_to` will be prepended to `filename` to make it absolute. `relative_to`
--- must be an absolute path, or `nil`. If `relative_to` is `nil`, it'll fallback
--- to `g_get_current_dir()`.
--- 
--- This function never fails, and will canonicalize file paths even if they don't
--- exist.
--- 
--- No file system I/O is done.
---
--- ---
---
---@param filename string # the name of the file
---@param relative_to? string # the relative directory, or `nil` to use the current working directory
---@return string # a newly allocated string with the canonical file path
function GLib.canonicalize_filename(filename, relative_to) end

--- # function GLib.chdir()
---
--- A wrapper for the POSIX `chdir()` function. The function changes the
--- current directory of the process to `path`.
--- 
--- See your C library manual for more details about `chdir()`.
---
--- ---
---
---@param path string # a pathname in the GLib file name encoding (UTF-8 on Windows)
---@return integer # 0 on success, -1 if an error occurred.
function GLib.chdir(path) end

--- # function GLib.check_version()
---
--- Checks that the GLib library in use is compatible with the
--- given version.
--- 
--- Generally you would pass in the constants %GLIB_MAJOR_VERSION,
--- %GLIB_MINOR_VERSION, %GLIB_MICRO_VERSION as the three arguments
--- to this function; that produces a check that the library in use
--- is compatible with the version of GLib the application or module
--- was compiled against.
--- 
--- Compatibility is defined by two things: first the version
--- of the running library is newer than the version
--- ``required_major`.required_minor.`required_micro``. Second
--- the running library must be binary compatible with the
--- version ``required_major`.`required_minor`.`required_micro``
--- (same major version.)
---
--- ---
---
---@param required_major integer # the required major version
---@param required_minor integer # the required minor version
---@param required_micro integer # the required micro version
---@return string # `nil` if the GLib library is compatible with the given version, or a string describing the version mismatch. The returned string is owned by GLib and must not be modified or freed.
function GLib.check_version(required_major, required_minor, required_micro) end

--- # function GLib.checksum_type_get_length()
---
--- Gets the length in bytes of digests of type `checksum_type`
---
--- ---
---
---@param checksum_type GLib.ChecksumType # a `GChecksumType`
---@return integer # the checksum length, or -1 if `checksum_type` is not supported.
function GLib.checksum_type_get_length(checksum_type) end

--- # function GLib.child_watch_add()
---
--- Sets a function to be called when the child indicated by `pid`
--- exits, at the priority `priority`.
--- 
--- If you obtain `pid` from `g_spawn_async()` or `g_spawn_async_with_pipes()`
--- you will need to pass %G_SPAWN_DO_NOT_REAP_CHILD as flag to
--- the spawn function for the child watching to work.
--- 
--- In many programs, you will want to call `g_spawn_check_wait_status()`
--- in the callback to determine whether or not the child exited
--- successfully.
--- 
--- Also, note that on platforms where `GPid` must be explicitly closed
--- (see `g_spawn_close_pid()`) `pid` must not be closed while the source
--- is still active.  Typically, you should invoke `g_spawn_close_pid()`
--- in the callback function for the source.
--- 
--- GLib supports only a single callback per process id.
--- On POSIX platforms, the same restrictions mentioned for
--- `g_child_watch_source_new()` apply to this function.
--- 
--- This internally creates a main loop source using
--- `g_child_watch_source_new()` and attaches it to the main loop context
--- using `g_source_attach()`. You can do these steps manually if you
--- need greater control.
---
--- ---
---
---@param priority integer # the priority of the idle source. Typically this will be in the range between %G_PRIORITY_DEFAULT_IDLE and %G_PRIORITY_HIGH_IDLE.
---@param pid GLib.Pid # process to watch. On POSIX the positive pid of a child process. On Windows a handle for a process (which doesn't have to be a child).
---@param function__ GLib.ChildWatchFunc # function to call
---@param data? userdata # data to pass to `function`
---@param notify? GLib.DestroyNotify # function to call when the idle is removed, or `nil`
---@return integer # the ID (greater than 0) of the event source.
function GLib.child_watch_add(priority, pid, function__, data, notify) end

--- # function GLib.child_watch_source_new()
---
--- Creates a new child_watch source.
--- 
--- The source will not initially be associated with any `GMainContext`
--- and must be added to one with `g_source_attach()` before it will be
--- executed.
--- 
--- Note that child watch sources can only be used in conjunction with
--- `g_spawn...` when the %G_SPAWN_DO_NOT_REAP_CHILD flag is used.
--- 
--- Note that on platforms where `GPid` must be explicitly closed
--- (see `g_spawn_close_pid()`) `pid` must not be closed while the
--- source is still active. Typically, you will want to call
--- `g_spawn_close_pid()` in the callback function for the source.
--- 
--- On POSIX platforms, the following restrictions apply to this API
--- due to limitations in POSIX process interfaces:
--- 
--- * `pid` must be a child of this process
--- * `pid` must be positive
--- * the application must not call `waitpid` with a non-positive
---   first argument, for instance in another thread
--- * the application must not wait for `pid` to exit by any other
---   mechanism, including `waitpid(pid, ...)` or a second child-watch
---   source for the same `pid`
--- * the application must not ignore `SIGCHLD`
--- 
--- If any of those conditions are not met, this and related APIs will
--- not work correctly. This can often be diagnosed via a GLib warning
--- stating that `ECHILD` was received by `waitpid`.
--- 
--- Calling `waitpid` for specific processes other than `pid` remains a
--- valid thing to do.
---
--- ---
---
---@param pid GLib.Pid # process to watch. On POSIX the positive pid of a child process. On Windows a handle for a process (which doesn't have to be a child).
---@return GLib.Source # the newly-created child watch source
function GLib.child_watch_source_new(pid) end

--- # function GLib.clear_error()
---
--- If `err` or *`err` is `nil`, does nothing. Otherwise,
--- calls `g_error_free()` on *`err` and sets *`err` to `nil`.
---
--- ---
---
---@return nil
function GLib.clear_error() end

--- # function GLib.close()
---
--- This wraps the `close()` call. In case of error, %errno will be
--- preserved, but the error will also be stored as a `GError` in `error`.
--- In case of success, %errno is undefined.
--- 
--- Besides using `GError`, there is another major reason to prefer this
--- function over the call provided by the system; on Unix, it will
--- attempt to correctly handle %EINTR, which has platform-specific
--- semantics.
--- 
--- It is a bug to call this function with an invalid file descriptor.
--- 
--- Since 2.76, this function is guaranteed to be async-signal-safe if (and only
--- if) `error` is `nil` and `fd` is a valid open file descriptor.
---
--- ---
---
---@param fd integer # A file descriptor
---@return (boolean|nil) # `true` on success, `false` if there was an error.
function GLib.close(fd) end

--- # function GLib.compute_checksum_for_bytes()
---
--- Computes the checksum for a binary `data`. This is a
--- convenience wrapper for `g_checksum_new()`, `g_checksum_get_string()`
--- and `g_checksum_free()`.
--- 
--- The hexadecimal string returned will be in lower case.
---
--- ---
---
---@param checksum_type GLib.ChecksumType # a `GChecksumType`
---@param data GLib.Bytes # binary blob to compute the digest of
---@return string # the digest of the binary data as a string in hexadecimal, or `nil` if `g_checksum_new()` fails for `checksum_type`. The returned string should be freed with `g_free()` when done using it.
function GLib.compute_checksum_for_bytes(checksum_type, data) end

--- # function GLib.compute_checksum_for_data()
---
--- Computes the checksum for a binary `data` of `length`. This is a
--- convenience wrapper for `g_checksum_new()`, `g_checksum_get_string()`
--- and `g_checksum_free()`.
--- 
--- The hexadecimal string returned will be in lower case.
---
--- ---
---
---@param checksum_type GLib.ChecksumType # a `GChecksumType`
---@param data unknown[] # binary blob to compute the digest of
---@param length integer # length of `data`
---@return string # the digest of the binary data as a string in hexadecimal, or `nil` if `g_checksum_new()` fails for `checksum_type`. The returned string should be freed with `g_free()` when done using it.
function GLib.compute_checksum_for_data(checksum_type, data, length) end

--- # function GLib.compute_checksum_for_string()
---
--- Computes the checksum of a string.
--- 
--- The hexadecimal string returned will be in lower case.
---
--- ---
---
---@param checksum_type GLib.ChecksumType # a `GChecksumType`
---@param str string # the string to compute the checksum of
---@param length integer # the length of the string, or -1 if the string is null-terminated.
---@return string # the checksum as a hexadecimal string, or `nil` if `g_checksum_new()` fails for `checksum_type`. The returned string should be freed with `g_free()` when done using it.
function GLib.compute_checksum_for_string(checksum_type, str, length) end

--- # function GLib.compute_hmac_for_bytes()
---
--- Computes the HMAC for a binary `data`. This is a
--- convenience wrapper for `g_hmac_new()`, `g_hmac_get_string()`
--- and `g_hmac_unref()`.
--- 
--- The hexadecimal string returned will be in lower case.
---
--- ---
---
---@param digest_type GLib.ChecksumType # a `GChecksumType` to use for the HMAC
---@param key GLib.Bytes # the key to use in the HMAC
---@param data GLib.Bytes # binary blob to compute the HMAC of
---@return string # the HMAC of the binary data as a string in hexadecimal. The returned string should be freed with `g_free()` when done using it.
function GLib.compute_hmac_for_bytes(digest_type, key, data) end

--- # function GLib.compute_hmac_for_data()
---
--- Computes the HMAC for a binary `data` of `length`. This is a
--- convenience wrapper for `g_hmac_new()`, `g_hmac_get_string()`
--- and `g_hmac_unref()`.
--- 
--- The hexadecimal string returned will be in lower case.
---
--- ---
---
---@param digest_type GLib.ChecksumType # a `GChecksumType` to use for the HMAC
---@param key unknown[] # the key to use in the HMAC
---@param key_len integer # the length of the key
---@param data unknown[] # binary blob to compute the HMAC of
---@param length integer # length of `data`
---@return string # the HMAC of the binary data as a string in hexadecimal. The returned string should be freed with `g_free()` when done using it.
function GLib.compute_hmac_for_data(digest_type, key, key_len, data, length) end

--- # function GLib.compute_hmac_for_string()
---
--- Computes the HMAC for a string.
--- 
--- The hexadecimal string returned will be in lower case.
---
--- ---
---
---@param digest_type GLib.ChecksumType # a `GChecksumType` to use for the HMAC
---@param key unknown[] # the key to use in the HMAC
---@param key_len integer # the length of the key
---@param str string # the string to compute the HMAC for
---@param length integer # the length of the string, or -1 if the string is nul-terminated
---@return string # the HMAC as a hexadecimal string. The returned string should be freed with `g_free()` when done using it.
function GLib.compute_hmac_for_string(digest_type, key, key_len, str, length) end

--- # function GLib.convert()
---
--- Converts a string from one character set to another.
--- 
--- Note that you should use `g_iconv()` for streaming conversions.
--- Despite the fact that `bytes_read` can return information about partial
--- characters, the g_convert_... functions are not generally suitable
--- for streaming. If the underlying converter maintains internal state,
--- then this won't be preserved across successive calls to `g_convert()`,
--- `g_convert_with_iconv()` or `g_convert_with_fallback()`. (An example of
--- this is the GNU C converter for CP1255 which does not emit a base
--- character until it knows that the next character is not a mark that
--- could combine with the base character.)
--- 
--- Using extensions such as "//TRANSLIT" may not work (or may not work
--- well) on many platforms.  Consider using `g_str_to_ascii()` instead.
---
--- ---
---
---@param str unknown[] # the string to convert.
---@param len integer # the length of the string in bytes, or -1 if the string is nul-terminated (Note that some encodings may allow nul bytes to occur inside strings. In that case, using -1 for the `len` parameter is unsafe)
---@param to_codeset string # name of character set into which to convert `str`
---@param from_codeset string # character set of `str`.
---@param bytes_read? integer # location to store the number of bytes in the input string that were successfully converted, or `nil`. Even if the conversion was successful, this may be less than `len` if there were partial characters at the end of the input. If the error %G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value stored will be the byte offset after the last valid input sequence.
---@param bytes_written? integer # the number of bytes stored in the output buffer (not including the terminating nul).
---@return unknown[] # If the conversion was successful, a newly allocated buffer containing the converted string, which must be freed with `g_free()`. Otherwise `nil` and `error` will be set.
function GLib.convert(str, len, to_codeset, from_codeset, bytes_read, bytes_written) end

--- # function GLib.convert_error_quark()
---
---@return GLib.Quark
function GLib.convert_error_quark() end

--- # function GLib.convert_with_fallback()
---
--- Converts a string from one character set to another, possibly
--- including fallback sequences for characters not representable
--- in the output. Note that it is not guaranteed that the specification
--- for the fallback sequences in `fallback` will be honored. Some
--- systems may do an approximate conversion from `from_codeset`
--- to `to_codeset` in their `iconv()` functions,
--- in which case GLib will simply return that approximate conversion.
--- 
--- Note that you should use `g_iconv()` for streaming conversions.
--- Despite the fact that `bytes_read` can return information about partial
--- characters, the g_convert_... functions are not generally suitable
--- for streaming. If the underlying converter maintains internal state,
--- then this won't be preserved across successive calls to `g_convert()`,
--- `g_convert_with_iconv()` or `g_convert_with_fallback()`. (An example of
--- this is the GNU C converter for CP1255 which does not emit a base
--- character until it knows that the next character is not a mark that
--- could combine with the base character.)
---
--- ---
---
---@param str unknown[] # the string to convert.
---@param len integer # the length of the string in bytes, or -1 if the string is nul-terminated (Note that some encodings may allow nul bytes to occur inside strings. In that case, using -1 for the `len` parameter is unsafe)
---@param to_codeset string # name of character set into which to convert `str`
---@param from_codeset string # character set of `str`.
---@param fallback string # UTF-8 string to use in place of characters not present in the target encoding. (The string must be representable in the target encoding). If `nil`, characters not in the target encoding will be represented as Unicode escapes \uxxxx or \Uxxxxyyyy.
---@param bytes_read? integer # location to store the number of bytes in the input string that were successfully converted, or `nil`. Even if the conversion was successful, this may be less than `len` if there were partial characters at the end of the input.
---@param bytes_written? integer # the number of bytes stored in the output buffer (not including the terminating nul).
---@return unknown[] # If the conversion was successful, a newly allocated buffer containing the converted string, which must be freed with `g_free()`. Otherwise `nil` and `error` will be set.
function GLib.convert_with_fallback(str, len, to_codeset, from_codeset, fallback, bytes_read, bytes_written) end

--- # function GLib.datalist_foreach()
---
--- Calls the given function for each data element of the datalist. The
--- function is called with each data element's `GQuark` id and data,
--- together with the given `user_data` parameter. Note that this
--- function is NOT thread-safe. So unless `datalist` can be protected
--- from any modifications during invocation of this function, it should
--- not be called.
--- 
--- `func` can make changes to `datalist`, but the iteration will not
--- reflect changes made during the `g_datalist_foreach()` call, other
--- than skipping over elements that are removed.
---
--- ---
---
---@param datalist GLib.Data # a datalist.
---@param func GLib.DataForeachFunc # the function to call for each data element.
---@param user_data? userdata # user data to pass to the function.
---@return nil
function GLib.datalist_foreach(datalist, func, user_data) end

--- # function GLib.datalist_get_data()
---
--- Gets a data element, using its string identifier. This is slower than
--- `g_datalist_id_get_data()` because it compares strings.
---
--- ---
---
---@param datalist GLib.Data # a datalist.
---@param key string # the string identifying a data element.
---@return userdata # the data element, or `nil` if it is not found.
function GLib.datalist_get_data(datalist, key) end

--- # function GLib.datalist_get_flags()
---
--- Gets flags values packed in together with the datalist.
--- See `g_datalist_set_flags()`.
---
--- ---
---
---@param datalist GLib.Data # pointer to the location that holds a list
---@return integer # the flags of the datalist
function GLib.datalist_get_flags(datalist) end

--- # function GLib.datalist_id_get_data()
---
--- Retrieves the data element corresponding to `key_id`.
---
--- ---
---
---@param datalist GLib.Data # a datalist.
---@param key_id GLib.Quark # the `GQuark` identifying a data element.
---@return userdata # the data element, or `nil` if it is not found.
function GLib.datalist_id_get_data(datalist, key_id) end

--- # function GLib.datalist_id_remove_multiple()
---
--- Removes multiple keys from a datalist.
--- 
--- This is more efficient than calling `g_datalist_id_remove_data()`
--- multiple times in a row.
---
--- ---
---
---@param datalist GLib.Data # a datalist
---@param keys unknown[] # keys to remove
---@param n_keys integer # length of `keys`, must be <= 16
---@return nil
function GLib.datalist_id_remove_multiple(datalist, keys, n_keys) end

--- # function GLib.datalist_set_flags()
---
--- Turns on flag values for a data list. This function is used
--- to keep a small number of boolean flags in an object with
--- a data list without using any additional space. It is
--- not generally useful except in circumstances where space
--- is very tight. (It is used in the base `GObject` type, for
--- example.)
---
--- ---
---
---@param datalist GLib.Data # pointer to the location that holds a list
---@param flags integer # the flags to turn on. The values of the flags are restricted by %G_DATALIST_FLAGS_MASK (currently 3; giving two possible boolean flags). A value for `flags` that doesn't fit within the mask is an error.
---@return nil
function GLib.datalist_set_flags(datalist, flags) end

--- # function GLib.datalist_unset_flags()
---
--- Turns off flag values for a data list. See `g_datalist_unset_flags()`
---
--- ---
---
---@param datalist GLib.Data # pointer to the location that holds a list
---@param flags integer # the flags to turn off. The values of the flags are restricted by %G_DATALIST_FLAGS_MASK (currently 3: giving two possible boolean flags). A value for `flags` that doesn't fit within the mask is an error.
---@return nil
function GLib.datalist_unset_flags(datalist, flags) end

--- # function GLib.dataset_destroy()
---
--- Destroys the dataset, freeing all memory allocated, and calling any
--- destroy functions set for data elements.
---
--- ---
---
---@param dataset_location userdata # the location identifying the dataset.
---@return nil
function GLib.dataset_destroy(dataset_location) end

--- # function GLib.dataset_foreach()
---
--- Calls the given function for each data element which is associated
--- with the given location. Note that this function is NOT thread-safe.
--- So unless `dataset_location` can be protected from any modifications
--- during invocation of this function, it should not be called.
--- 
--- `func` can make changes to the dataset, but the iteration will not
--- reflect changes made during the `g_dataset_foreach()` call, other
--- than skipping over elements that are removed.
---
--- ---
---
---@param dataset_location userdata # the location identifying the dataset.
---@param func GLib.DataForeachFunc # the function to call for each data element.
---@param user_data? userdata # user data to pass to the function.
---@return nil
function GLib.dataset_foreach(dataset_location, func, user_data) end

--- # function GLib.dataset_id_get_data()
---
--- Gets the data element corresponding to a `GQuark`.
---
--- ---
---
---@param dataset_location userdata # the location identifying the dataset.
---@param key_id GLib.Quark # the `GQuark` id to identify the data element.
---@return userdata # the data element corresponding to the `GQuark`, or `nil` if it is not found.
function GLib.dataset_id_get_data(dataset_location, key_id) end

--- # function GLib.date_get_days_in_month()
---
--- Returns the number of days in a month, taking leap
--- years into account.
---
--- ---
---
---@param month GLib.DateMonth # month
---@param year GLib.DateYear # year
---@return integer # number of days in `month` during the `year`
function GLib.date_get_days_in_month(month, year) end

--- # function GLib.date_get_monday_weeks_in_year()
---
--- Returns the number of weeks in the year, where weeks
--- are taken to start on Monday. Will be 52 or 53. The
--- date must be valid. (Years always have 52 7-day periods,
--- plus 1 or 2 extra days depending on whether it's a leap
--- year. This function is basically telling you how many
--- Mondays are in the year, i.e. there are 53 Mondays if
--- one of the extra days happens to be a Monday.)
---
--- ---
---
---@param year GLib.DateYear # a year
---@return integer # number of Mondays in the year
function GLib.date_get_monday_weeks_in_year(year) end

--- # function GLib.date_get_sunday_weeks_in_year()
---
--- Returns the number of weeks in the year, where weeks
--- are taken to start on Sunday. Will be 52 or 53. The
--- date must be valid. (Years always have 52 7-day periods,
--- plus 1 or 2 extra days depending on whether it's a leap
--- year. This function is basically telling you how many
--- Sundays are in the year, i.e. there are 53 Sundays if
--- one of the extra days happens to be a Sunday.)
---
--- ---
---
---@param year GLib.DateYear # year to count weeks in
---@return integer # the number of weeks in `year`
function GLib.date_get_sunday_weeks_in_year(year) end

--- # function GLib.date_is_leap_year()
---
--- Returns `true` if the year is a leap year.
--- 
--- For the purposes of this function, leap year is every year
--- divisible by 4 unless that year is divisible by 100. If it
--- is divisible by 100 it would be a leap year only if that year
--- is also divisible by 400.
---
--- ---
---
---@param year GLib.DateYear # year to check
---@return (boolean|nil) # `true` if the year is a leap year
function GLib.date_is_leap_year(year) end

--- # function GLib.date_strftime()
---
--- Generates a printed representation of the date, in a
--- [locale][setlocale]-specific way.
--- Works just like the platform's C library `strftime()` function,
--- but only accepts date-related formats; time-related formats
--- give undefined results. Date must be valid. Unlike `strftime()`
--- (which uses the locale encoding), works on a UTF-8 format
--- string and stores a UTF-8 result.
--- 
--- This function does not provide any conversion specifiers in
--- addition to those implemented by the platform's C library.
--- For example, don't expect that using `g_date_strftime()` would
--- make the \%F provided by the C99 `strftime()` work on Windows
--- where the C library only complies to C89.
---
--- ---
---
---@param s string # destination buffer
---@param slen integer # buffer size
---@param format string # format string
---@param date GLib.Date # valid `GDate`
---@return integer # number of characters written to the buffer, or 0 the buffer was too small
function GLib.date_strftime(s, slen, format, date) end

--- # function GLib.date_valid_day()
---
--- Returns `true` if the day of the month is valid (a day is valid if it's
--- between 1 and 31 inclusive).
---
--- ---
---
---@param day GLib.DateDay # day to check
---@return (boolean|nil) # `true` if the day is valid
function GLib.date_valid_day(day) end

--- # function GLib.date_valid_dmy()
---
--- Returns `true` if the day-month-year triplet forms a valid, existing day
--- in the range of days `GDate` understands (Year 1 or later, no more than
--- a few thousand years in the future).
---
--- ---
---
---@param day GLib.DateDay # day
---@param month GLib.DateMonth # month
---@param year GLib.DateYear # year
---@return (boolean|nil) # `true` if the date is a valid one
function GLib.date_valid_dmy(day, month, year) end

--- # function GLib.date_valid_julian()
---
--- Returns `true` if the Julian day is valid. Anything greater than zero
--- is basically a valid Julian, though there is a 32-bit limit.
---
--- ---
---
---@param julian_date integer # Julian day to check
---@return (boolean|nil) # `true` if the Julian day is valid
function GLib.date_valid_julian(julian_date) end

--- # function GLib.date_valid_month()
---
--- Returns `true` if the month value is valid. The 12 `GDateMonth`
--- enumeration values are the only valid months.
---
--- ---
---
---@param month GLib.DateMonth # month
---@return (boolean|nil) # `true` if the month is valid
function GLib.date_valid_month(month) end

--- # function GLib.date_valid_weekday()
---
--- Returns `true` if the weekday is valid. The seven `GDateWeekday` enumeration
--- values are the only valid weekdays.
---
--- ---
---
---@param weekday GLib.DateWeekday # weekday
---@return (boolean|nil) # `true` if the weekday is valid
function GLib.date_valid_weekday(weekday) end

--- # function GLib.date_valid_year()
---
--- Returns `true` if the year is valid. Any year greater than 0 is valid,
--- though there is a 16-bit limit to what `GDate` will understand.
---
--- ---
---
---@param year GLib.DateYear # year
---@return (boolean|nil) # `true` if the year is valid
function GLib.date_valid_year(year) end

--- # function GLib.dcgettext()
---
--- This is a variant of `g_dgettext()` that allows specifying a locale
--- category instead of always using `LC_MESSAGES`. See `g_dgettext()` for
--- more information about how this functions differs from calling
--- `dcgettext()` directly.
---
--- ---
---
---@param domain? string # the translation domain to use, or `nil` to use the domain set with `textdomain()`
---@param msgid string # message to translate
---@param category integer # a locale category
---@return string # the translated string for the given locale category
function GLib.dcgettext(domain, msgid, category) end

--- # function GLib.dgettext()
---
--- This function is a wrapper of `dgettext()` which does not translate
--- the message if the default domain as set with `textdomain()` has no
--- translations for the current locale.
--- 
--- The advantage of using this function over `dgettext()` proper is that
--- libraries using this function (like GTK+) will not use translations
--- if the application using the library does not have translations for
--- the current locale.  This results in a consistent English-only
--- interface instead of one having partial translations.  For this
--- feature to work, the call to `textdomain()` and `setlocale()` should
--- precede any `g_dgettext()` invocations.  For GTK+, it means calling
--- `textdomain()` before gtk_init or its variants.
--- 
--- This function disables translations if and only if upon its first
--- call all the following conditions hold:
--- 
--- - `domain` is not `nil`
--- 
--- - `textdomain()` has been called to set a default text domain
--- 
--- - there is no translations available for the default text domain
---   and the current locale
--- 
--- - current locale is not "C" or any English locales (those
---   starting with "en_")
--- 
--- Note that this behavior may not be desired for example if an application
--- has its untranslated messages in a language other than English. In those
--- cases the application should call `textdomain()` after initializing GTK+.
--- 
--- Applications should normally not use this function directly,
--- but use the `_()` macro for translations.
---
--- ---
---
---@param domain? string # the translation domain to use, or `nil` to use the domain set with `textdomain()`
---@param msgid string # message to translate
---@return string # The translated string
function GLib.dgettext(domain, msgid) end

--- # function GLib.dir_make_tmp()
---
--- Creates a subdirectory in the preferred directory for temporary
--- files (as returned by `g_get_tmp_dir()`).
--- 
--- `tmpl` should be a string in the GLib file name encoding containing
--- a sequence of six 'X' characters, as the parameter to `g_mkstemp()`.
--- However, unlike these functions, the template should only be a
--- basename, no directory components are allowed. If template is
--- `nil`, a default template is used.
--- 
--- Note that in contrast to `g_mkdtemp()` (and `mkdtemp()`) `tmpl` is not
--- modified, and might thus be a read-only literal string.
---
--- ---
---
---@param tmpl? string # Template for directory name, as in `g_mkdtemp()`, basename only, or `nil` for a default template
---@return string # The actual name used. This string should be freed with `g_free()` when not needed any longer and is is in the GLib file name encoding. In case of errors, `nil` is returned and `error` will be set.
function GLib.dir_make_tmp(tmpl) end

--- # function GLib.direct_equal()
---
--- Compares two `gpointer` arguments and returns `true` if they are equal.
--- It can be passed to `g_hash_table_new()` as the `key_equal_func`
--- parameter, when using opaque pointers compared by pointer value as
--- keys in a `GHashTable`.
--- 
--- This equality function is also appropriate for keys that are integers
--- stored in pointers, such as `GINT_TO_POINTER (n)`.
---
--- ---
---
---@param v1? userdata # a key
---@param v2? userdata # a key to compare with `v1`
---@return (boolean|nil) # `true` if the two keys match.
function GLib.direct_equal(v1, v2) end

--- # function GLib.direct_hash()
---
--- Converts a gpointer to a hash value.
--- It can be passed to `g_hash_table_new()` as the `hash_func` parameter,
--- when using opaque pointers compared by pointer value as keys in a
--- `GHashTable`.
--- 
--- This hash function is also appropriate for keys that are integers
--- stored in pointers, such as `GINT_TO_POINTER (n)`.
---
--- ---
---
---@param v? userdata # a `gpointer` key
---@return integer # a hash value corresponding to the key.
function GLib.direct_hash(v) end

--- # function GLib.dngettext()
---
--- This function is a wrapper of `dngettext()` which does not translate
--- the message if the default domain as set with `textdomain()` has no
--- translations for the current locale.
--- 
--- See `g_dgettext()` for details of how this differs from `dngettext()`
--- proper.
---
--- ---
---
---@param domain? string # the translation domain to use, or `nil` to use the domain set with `textdomain()`
---@param msgid string # message to translate
---@param msgid_plural string # plural form of the message
---@param n integer # the quantity for which translation is needed
---@return string # The translated string
function GLib.dngettext(domain, msgid, msgid_plural, n) end

--- # function GLib.double_equal()
---
--- Compares the two `gdouble` values being pointed to and returns
--- `true` if they are equal.
--- It can be passed to `g_hash_table_new()` as the `key_equal_func`
--- parameter, when using non-`nil` pointers to doubles as keys in a
--- `GHashTable`.
---
--- ---
---
---@param v1 userdata # a pointer to a `gdouble` key
---@param v2 userdata # a pointer to a `gdouble` key to compare with `v1`
---@return (boolean|nil) # `true` if the two keys match.
function GLib.double_equal(v1, v2) end

--- # function GLib.double_hash()
---
--- Converts a pointer to a `gdouble` to a hash value.
--- It can be passed to `g_hash_table_new()` as the `hash_func` parameter,
--- It can be passed to `g_hash_table_new()` as the `hash_func` parameter,
--- when using non-`nil` pointers to doubles as keys in a `GHashTable`.
---
--- ---
---
---@param v userdata # a pointer to a `gdouble` key
---@return integer # a hash value corresponding to the key.
function GLib.double_hash(v) end

--- # function GLib.dpgettext()
---
--- This function is a variant of `g_dgettext()` which supports
--- a disambiguating message context. GNU gettext uses the
--- '\004' character to separate the message context and
--- message id in `msgctxtid`.
--- If 0 is passed as `msgidoffset`, this function will fall back to
--- trying to use the deprecated convention of using "|" as a separation
--- character.
--- 
--- This uses `g_dgettext()` internally. See that functions for differences
--- with `dgettext()` proper.
--- 
--- Applications should normally not use this function directly,
--- but use the C`_()` macro for translations with context.
---
--- ---
---
---@param domain? string # the translation domain to use, or `nil` to use the domain set with `textdomain()`
---@param msgctxtid string # a combined message context and message id, separated by a \004 character
---@param msgidoffset integer # the offset of the message id in `msgctxid`
---@return string # The translated string
function GLib.dpgettext(domain, msgctxtid, msgidoffset) end

--- # function GLib.dpgettext2()
---
--- This function is a variant of `g_dgettext()` which supports
--- a disambiguating message context. GNU gettext uses the
--- '\004' character to separate the message context and
--- message id in `msgctxtid`.
--- 
--- This uses `g_dgettext()` internally. See that functions for differences
--- with `dgettext()` proper.
--- 
--- This function differs from C`_()` in that it is not a macro and
--- thus you may use non-string-literals as context and msgid arguments.
---
--- ---
---
---@param domain? string # the translation domain to use, or `nil` to use the domain set with `textdomain()`
---@param context string # the message context
---@param msgid string # the message
---@return string # The translated string
function GLib.dpgettext2(domain, context, msgid) end

--- # function GLib.environ_getenv()
---
--- Returns the value of the environment variable `variable` in the
--- provided list `envp`.
---
--- ---
---
---@param envp? unknown[] # an environment list (eg, as returned from `g_get_environ()`), or `nil` for an empty environment list
---@param variable string # the environment variable to get
---@return string # the value of the environment variable, or `nil` if the environment variable is not set in `envp`. The returned string is owned by `envp`, and will be freed if `variable` is set or unset again.
function GLib.environ_getenv(envp, variable) end

--- # function GLib.environ_setenv()
---
--- Sets the environment variable `variable` in the provided list
--- `envp` to `value`.
---
--- ---
---
---@param envp? unknown[] # an environment list that can be freed using `g_strfreev()` (e.g., as returned from `g_get_environ()`), or `nil` for an empty environment list
---@param variable string # the environment variable to set, must not contain '='
---@param value string # the value for to set the variable to
---@param overwrite (boolean|nil) # whether to change the variable if it already exists
---@return unknown[] # the updated environment list. Free it using `g_strfreev()`.
function GLib.environ_setenv(envp, variable, value, overwrite) end

--- # function GLib.environ_unsetenv()
---
--- Removes the environment variable `variable` from the provided
--- environment `envp`.
---
--- ---
---
---@param envp? unknown[] # an environment list that can be freed using `g_strfreev()` (e.g., as returned from `g_get_environ()`), or `nil` for an empty environment list
---@param variable string # the environment variable to remove, must not contain '='
---@return unknown[] # the updated environment list. Free it using `g_strfreev()`.
function GLib.environ_unsetenv(envp, variable) end

--- # function GLib.file_error_from_errno()
---
--- Gets a `GFileError` constant based on the passed-in `err_no`.
--- 
--- For example, if you pass in `EEXIST` this function returns
--- %G_FILE_ERROR_EXIST. Unlike `errno` values, you can portably
--- assume that all `GFileError` values will exist.
--- 
--- Normally a `GFileError` value goes into a `GError` returned
--- from a function that manipulates files. So you would use
--- `g_file_error_from_errno()` when constructing a `GError`.
---
--- ---
---
---@param err_no integer # an "errno" value
---@return GLib.FileError # `GFileError` corresponding to the given `err_no`
function GLib.file_error_from_errno(err_no) end

--- # function GLib.file_error_quark()
---
---@return GLib.Quark
function GLib.file_error_quark() end

--- # function GLib.file_get_contents()
---
--- Reads an entire file into allocated memory, with good error
--- checking.
--- 
--- If the call was successful, it returns `true` and sets `contents` to the file
--- contents and `length` to the length of the file contents in bytes. The string
--- stored in `contents` will be nul-terminated, so for text files you can pass
--- `nil` for the `length` argument. If the call was not successful, it returns
--- `false` and sets `error`. The error domain is %G_FILE_ERROR. Possible error
--- codes are those in the `GFileError` enumeration. In the error case,
--- `contents` is set to `nil` and `length` is set to zero.
---
--- ---
---
---@param filename string # name of a file to read contents from, in the GLib file name encoding
---@param contents unknown[] # location to store an allocated string, use `g_free()` to free the returned string
---@param length? integer # location to store length in bytes of the contents, or `nil`
---@return (boolean|nil) # `true` on success, `false` if an error occurred
function GLib.file_get_contents(filename, contents, length) end

--- # function GLib.file_open_tmp()
---
--- Opens a file for writing in the preferred directory for temporary
--- files (as returned by `g_get_tmp_dir()`).
--- 
--- `tmpl` should be a string in the GLib file name encoding containing
--- a sequence of six 'X' characters, as the parameter to `g_mkstemp()`.
--- However, unlike these functions, the template should only be a
--- basename, no directory components are allowed. If template is
--- `nil`, a default template is used.
--- 
--- Note that in contrast to `g_mkstemp()` (and `mkstemp()`) `tmpl` is not
--- modified, and might thus be a read-only literal string.
--- 
--- Upon success, and if `name_used` is non-`nil`, the actual name used
--- is returned in `name_used`. This string should be freed with `g_free()`
--- when not needed any longer. The returned name is in the GLib file
--- name encoding.
---
--- ---
---
---@param tmpl? string # Template for file name, as in `g_mkstemp()`, basename only, or `nil` for a default template
---@param name_used string # location to store actual name used, or `nil`
---@return integer # A file handle (as from `open()`) to the file opened for reading and writing. The file is opened in binary mode on platforms where there is a difference. The file handle should be closed with `close()`. In case of errors, -1 is returned and `error` will be set.
function GLib.file_open_tmp(tmpl, name_used) end

--- # function GLib.file_read_link()
---
--- Reads the contents of the symbolic link `filename` like the POSIX
--- ``readlink()`` function.
--- 
--- The returned string is in the encoding used for filenames. Use
--- g_filename_to_utf8() to convert it to UTF-8.
--- 
--- The returned string may also be a relative path. Use `g_build_filename()`
--- to convert it to an absolute path:
--- 
--- ```c
--- g_autoptr(GError) local_error = NULL;
--- g_autofree gchar *link_target = g_file_read_link ("/etc/localtime", &local_error);
--- 
--- if (local_error != NULL)
---   g_error ("Error reading link: %s", local_error->message);
--- 
--- if (!g_path_is_absolute (link_target))
---   {
---     g_autofree gchar *absolute_link_target = g_build_filename ("/etc", link_target, NULL);
---     g_free (link_target);
---     link_target = g_steal_pointer (&absolute_link_target);
---   }
--- ```
---
--- ---
---
---@param filename string # the symbolic link
---@return string # A newly-allocated string with the contents of the symbolic link, or `nil` if an error occurred.
function GLib.file_read_link(filename) end

--- # function GLib.file_set_contents()
---
--- Writes all of `contents` to a file named `filename`. This is a convenience
--- wrapper around calling `g_file_set_contents_full()` with `flags` set to
--- `G_FILE_SET_CONTENTS_CONSISTENT | G_FILE_SET_CONTENTS_ONLY_EXISTING` and
--- `mode` set to `0666`.
---
--- ---
---
---@param filename string # name of a file to write `contents` to, in the GLib file name encoding
---@param contents unknown[] # string to write to the file
---@param length integer # length of `contents`, or -1 if `contents` is a nul-terminated string
---@return (boolean|nil) # `true` on success, `false` if an error occurred
function GLib.file_set_contents(filename, contents, length) end

--- # function GLib.file_set_contents_full()
---
--- Writes all of `contents` to a file named `filename`, with good error checking.
--- If a file called `filename` already exists it will be overwritten.
--- 
--- `flags` control the properties of the write operation: whether it’s atomic,
--- and what the tradeoff is between returning quickly or being resilient to
--- system crashes.
--- 
--- As this function performs file I/O, it is recommended to not call it anywhere
--- where blocking would cause problems, such as in the main loop of a graphical
--- application. In particular, if `flags` has any value other than
--- %G_FILE_SET_CONTENTS_NONE then this function may call ``fsync()``.
--- 
--- If %G_FILE_SET_CONTENTS_CONSISTENT is set in `flags`, the operation is atomic
--- in the sense that it is first written to a temporary file which is then
--- renamed to the final name.
--- 
--- Notes:
--- 
--- - On UNIX, if `filename` already exists hard links to `filename` will break.
---   Also since the file is recreated, existing permissions, access control
---   lists, metadata etc. may be lost. If `filename` is a symbolic link,
---   the link itself will be replaced, not the linked file.
--- 
--- - On UNIX, if `filename` already exists and is non-empty, and if the system
---   supports it (via a journalling filesystem or equivalent), and if
---   %G_FILE_SET_CONTENTS_CONSISTENT is set in `flags`, the ``fsync()`` call (or
---   equivalent) will be used to ensure atomic replacement: `filename`
---   will contain either its old contents or `contents`, even in the face of
---   system power loss, the disk being unsafely removed, etc.
--- 
--- - On UNIX, if `filename` does not already exist or is empty, there is a
---   possibility that system power loss etc. after calling this function will
---   leave `filename` empty or full of NUL bytes, depending on the underlying
---   filesystem, unless %G_FILE_SET_CONTENTS_DURABLE and
---   %G_FILE_SET_CONTENTS_CONSISTENT are set in `flags`.
--- 
--- - On Windows renaming a file will not remove an existing file with the
---   new name, so on Windows there is a race condition between the existing
---   file being removed and the temporary file being renamed.
--- 
--- - On Windows there is no way to remove a file that is open to some
---   process, or mapped into memory. Thus, this function will fail if
---   `filename` already exists and is open.
--- 
--- If the call was successful, it returns `true`. If the call was not successful,
--- it returns `false` and sets `error`. The error domain is %G_FILE_ERROR.
--- Possible error codes are those in the `GFileError` enumeration.
--- 
--- Note that the name for the temporary file is constructed by appending up
--- to 7 characters to `filename`.
--- 
--- If the file didn’t exist before and is created, it will be given the
--- permissions from `mode`. Otherwise, the permissions of the existing file may
--- be changed to `mode` depending on `flags`, or they may remain unchanged.
---
--- ---
---
---@param filename string # name of a file to write `contents` to, in the GLib file name encoding
---@param contents unknown[] # string to write to the file
---@param length integer # length of `contents`, or -1 if `contents` is a nul-terminated string
---@param flags GLib.FileSetContentsFlags # flags controlling the safety vs speed of the operation
---@param mode integer # file mode, as passed to ``open()``; typically this will be `0666`
---@return (boolean|nil) # `true` on success, `false` if an error occurred
function GLib.file_set_contents_full(filename, contents, length, flags, mode) end

--- # function GLib.file_test()
---
--- Returns `true` if any of the tests in the bitfield `test` are
--- `true`. For example, `(G_FILE_TEST_EXISTS | G_FILE_TEST_IS_DIR)`
--- will return `true` if the file exists; the check whether it's a
--- directory doesn't matter since the existence test is `true`. With
--- the current set of available tests, there's no point passing in
--- more than one test at a time.
--- 
--- Apart from %G_FILE_TEST_IS_SYMLINK all tests follow symbolic links,
--- so for a symbolic link to a regular file `g_file_test()` will return
--- `true` for both %G_FILE_TEST_IS_SYMLINK and %G_FILE_TEST_IS_REGULAR.
--- 
--- Note, that for a dangling symbolic link `g_file_test()` will return
--- `true` for %G_FILE_TEST_IS_SYMLINK and `false` for all other flags.
--- 
--- You should never use `g_file_test()` to test whether it is safe
--- to perform an operation, because there is always the possibility
--- of the condition changing before you actually perform the operation,
--- see [TOCTOU](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use).
--- 
--- For example, you might think you could use %G_FILE_TEST_IS_SYMLINK
--- to know whether it is safe to write to a file without being
--- tricked into writing into a different location. It doesn't work!
--- 
--- ```c
---  // DON'T DO THIS
---  if (!g_file_test (filename, G_FILE_TEST_IS_SYMLINK))
---    {
---      fd = g_open (filename, O_WRONLY);
---      // write to fd
---    }
--- 
---  // DO THIS INSTEAD
---  fd = g_open (filename, O_WRONLY | O_NOFOLLOW | O_CLOEXEC);
---  if (fd == -1)
---    {
---      // check error
---      if (errno == ELOOP)
---        // file is a symlink and can be ignored
---      else
---        // handle errors as before
---    }
---  else
---    {
---      // write to fd
---    }
--- ```
--- 
--- Another thing to note is that %G_FILE_TEST_EXISTS and
--- %G_FILE_TEST_IS_EXECUTABLE are implemented using the `access()`
--- system call. This usually doesn't matter, but if your program
--- is setuid or setgid it means that these tests will give you
--- the answer for the real user ID and group ID, rather than the
--- effective user ID and group ID.
--- 
--- On Windows, there are no symlinks, so testing for
--- %G_FILE_TEST_IS_SYMLINK will always return `false`. Testing for
--- %G_FILE_TEST_IS_EXECUTABLE will just check that the file exists and
--- its name indicates that it is executable, checking for well-known
--- extensions and those listed in the `PATHEXT` environment variable.
---
--- ---
---
---@param filename string # a filename to test in the GLib file name encoding
---@param test GLib.FileTest # bitfield of `GFileTest` flags
---@return (boolean|nil) # whether a test was `true`
function GLib.file_test(filename, test) end

--- # function GLib.filename_display_basename()
---
--- Returns the display basename for the particular filename, guaranteed
--- to be valid UTF-8. The display name might not be identical to the filename,
--- for instance there might be problems converting it to UTF-8, and some files
--- can be translated in the display.
--- 
--- If GLib cannot make sense of the encoding of `filename`, as a last resort it
--- replaces unknown characters with U+FFFD, the Unicode replacement character.
--- You can search the result for the UTF-8 encoding of this character (which is
--- "\357\277\275" in octal notation) to find out if `filename` was in an invalid
--- encoding.
--- 
--- You must pass the whole absolute pathname to this functions so that
--- translation of well known locations can be done.
--- 
--- This function is preferred over `g_filename_display_name()` if you know the
--- whole path, as it allows translation.
---
--- ---
---
---@param filename string # an absolute pathname in the GLib file name encoding
---@return string # a newly allocated string containing a rendition of the basename of the filename in valid UTF-8
function GLib.filename_display_basename(filename) end

--- # function GLib.filename_display_name()
---
--- Converts a filename into a valid UTF-8 string. The conversion is
--- not necessarily reversible, so you should keep the original around
--- and use the return value of this function only for display purposes.
--- Unlike g_filename_to_utf8(), the result is guaranteed to be non-`nil`
--- even if the filename actually isn't in the GLib file name encoding.
--- 
--- If GLib cannot make sense of the encoding of `filename`, as a last resort it
--- replaces unknown characters with U+FFFD, the Unicode replacement character.
--- You can search the result for the UTF-8 encoding of this character (which is
--- "\357\277\275" in octal notation) to find out if `filename` was in an invalid
--- encoding.
--- 
--- If you know the whole pathname of the file you should use
--- `g_filename_display_basename()`, since that allows location-based
--- translation of filenames.
---
--- ---
---
---@param filename string # a pathname hopefully in the GLib file name encoding
---@return string # a newly allocated string containing a rendition of the filename in valid UTF-8
function GLib.filename_display_name(filename) end

--- # function GLib.filename_from_uri()
---
--- Converts an escaped ASCII-encoded URI to a local filename in the
--- encoding used for filenames.
---
--- ---
---
---@param uri string # a uri describing a filename (escaped, encoded in ASCII).
---@param hostname? string # Location to store hostname for the URI. If there is no hostname in the URI, `nil` will be stored in this location.
---@return string # a newly-allocated string holding the resulting filename, or `nil` on an error.
function GLib.filename_from_uri(uri, hostname) end

--- # function GLib.filename_from_utf8()
---
--- Converts a string from UTF-8 to the encoding GLib uses for
--- filenames. Note that on Windows GLib uses UTF-8 for filenames;
--- on other platforms, this function indirectly depends on the
--- [current locale][setlocale].
--- 
--- The input string shall not contain nul characters even if the `len`
--- argument is positive. A nul character found inside the string will result
--- in error %G_CONVERT_ERROR_ILLEGAL_SEQUENCE. If the filename encoding is
--- not UTF-8 and the conversion output contains a nul character, the error
--- %G_CONVERT_ERROR_EMBEDDED_NUL is set and the function returns `nil`.
---
--- ---
---
---@param utf8string string # a UTF-8 encoded string.
---@param len integer # the length of the string, or -1 if the string is nul-terminated.
---@param bytes_read? integer # location to store the number of bytes in the input string that were successfully converted, or `nil`. Even if the conversion was successful, this may be less than `len` if there were partial characters at the end of the input. If the error %G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value stored will be the byte offset after the last valid input sequence.
---@param bytes_written? integer # the number of bytes stored in the output buffer (not including the terminating nul).
---@return string # The converted string, or `nil` on an error.
function GLib.filename_from_utf8(utf8string, len, bytes_read, bytes_written) end

--- # function GLib.filename_to_uri()
---
--- Converts an absolute filename to an escaped ASCII-encoded URI, with the path
--- component following Section 3.3. of RFC 2396.
---
--- ---
---
---@param filename string # an absolute filename specified in the GLib file name encoding, which is the on-disk file name bytes on Unix, and UTF-8 on Windows
---@param hostname? string # A UTF-8 encoded hostname, or `nil` for none.
---@return string # a newly-allocated string holding the resulting URI, or `nil` on an error.
function GLib.filename_to_uri(filename, hostname) end

--- # function GLib.filename_to_utf8()
---
--- Converts a string which is in the encoding used by GLib for
--- filenames into a UTF-8 string. Note that on Windows GLib uses UTF-8
--- for filenames; on other platforms, this function indirectly depends on
--- the [current locale][setlocale].
--- 
--- The input string shall not contain nul characters even if the `len`
--- argument is positive. A nul character found inside the string will result
--- in error %G_CONVERT_ERROR_ILLEGAL_SEQUENCE.
--- If the source encoding is not UTF-8 and the conversion output contains a
--- nul character, the error %G_CONVERT_ERROR_EMBEDDED_NUL is set and the
--- function returns `nil`. Use `g_convert()` to produce output that
--- may contain embedded nul characters.
---
--- ---
---
---@param opsysstring string # a string in the encoding for filenames
---@param len integer # the length of the string, or -1 if the string is nul-terminated (Note that some encodings may allow nul bytes to occur inside strings. In that case, using -1 for the `len` parameter is unsafe)
---@param bytes_read? integer # location to store the number of bytes in the input string that were successfully converted, or `nil`. Even if the conversion was successful, this may be less than `len` if there were partial characters at the end of the input. If the error %G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value stored will be the byte offset after the last valid input sequence.
---@param bytes_written? integer # the number of bytes stored in the output buffer (not including the terminating nul).
---@return string # The converted string, or `nil` on an error.
function GLib.filename_to_utf8(opsysstring, len, bytes_read, bytes_written) end

--- # function GLib.find_program_in_path()
---
--- Locates the first executable named `program` in the user's path, in the
--- same way that `execvp()` would locate it. Returns an allocated string
--- with the absolute path name, or `nil` if the program is not found in
--- the path. If `program` is already an absolute path, returns a copy of
--- `program` if `program` exists and is executable, and `nil` otherwise.
---  
--- On Windows, if `program` does not have a file type suffix, tries
--- with the suffixes .exe, .cmd, .bat and .com, and the suffixes in
--- the `PATHEXT` environment variable.
--- 
--- On Windows, it looks for the file in the same way as CreateP`rocess()`
--- would. This means first in the directory where the executing
--- program was loaded from, then in the current directory, then in the
--- Windows 32-bit system directory, then in the Windows directory, and
--- finally in the directories in the `PATH` environment variable. If
--- the program is found, the return value contains the full name
--- including the type suffix.
---
--- ---
---
---@param program string # a program name in the GLib file name encoding
---@return string # a newly-allocated string with the absolute path, or `nil`
function GLib.find_program_in_path(program) end

--- # function GLib.format_size()
---
--- Formats a size (for example the size of a file) into a human readable
--- string.  Sizes are rounded to the nearest size prefix (kB, MB, GB)
--- and are displayed rounded to the nearest tenth. E.g. the file size
--- 3292528 bytes will be converted into the string "3.2 MB". The returned string
--- is UTF-8, and may use a non-breaking space to separate the number and units,
--- to ensure they aren’t separated when line wrapped.
--- 
--- The prefix units base is 1000 (i.e. 1 kB is 1000 bytes).
--- 
--- This string should be freed with `g_free()` when not needed any longer.
--- 
--- See `g_format_size_full()` for more options about how the size might be
--- formatted.
---
--- ---
---
---@param size integer # a size in bytes
---@return string # a newly-allocated formatted string containing a human readable file size
function GLib.format_size(size) end

--- # function GLib.format_size_for_display()
---
--- Formats a size (for example the size of a file) into a human
--- readable string. Sizes are rounded to the nearest size prefix
--- (KB, MB, GB) and are displayed rounded to the nearest tenth.
--- E.g. the file size 3292528 bytes will be converted into the
--- string "3.1 MB".
--- 
--- The prefix units base is 1024 (i.e. 1 KB is 1024 bytes).
--- 
--- This string should be freed with `g_free()` when not needed any longer.
---
--- ---
---
---@param size integer # a size in bytes
---@return string # a newly-allocated formatted string containing a human readable file size
function GLib.format_size_for_display(size) end

--- # function GLib.format_size_full()
---
--- Formats a size.
--- 
--- This function is similar to `g_format_size()` but allows for flags
--- that modify the output. See `GFormatSizeFlags`.
---
--- ---
---
---@param size integer # a size in bytes
---@param flags GLib.FormatSizeFlags # `GFormatSizeFlags` to modify the output
---@return string # a newly-allocated formatted string containing a human readable file size
function GLib.format_size_full(size, flags) end

--- # function GLib.free()
---
--- Frees the memory pointed to by `mem`.
--- 
--- If you know the allocated size of `mem`, calling `g_free_sized()` may be faster,
--- depending on the libc implementation in use.
--- 
--- If `mem` is `nil` it simply returns, so there is no need to check `mem`
--- against `nil` before calling this function.
---
--- ---
---
---@param mem? userdata # the memory to free
---@return nil
function GLib.free(mem) end

--- # function GLib.free_sized()
---
--- Frees the memory pointed to by `mem`, assuming it is has the given `size`.
--- 
--- If `mem` is `nil` this is a no-op (and `size` is ignored).
--- 
--- It is an error if `size` doesn’t match the size passed when `mem` was
--- allocated. `size` is passed to this function to allow optimizations in the
--- allocator. If you don’t know the allocation size, use `g_free()` instead.
---
--- ---
---
---@param mem? userdata # the memory to free
---@param size integer # size of `mem`, in bytes
---@return nil
function GLib.free_sized(mem, size) end

--- # function GLib.get_application_name()
---
--- Gets a human-readable name for the application, as set by
--- `g_set_application_name()`. This name should be localized if
--- possible, and is intended for display to the user.  Contrast with
--- `g_get_prgname()`, which gets a non-localized name. If
--- `g_set_application_name()` has not been called, returns the result of
--- `g_get_prgname()` (which may be `nil` if `g_set_prgname()` has also not
--- been called).
---
--- ---
---
---@return string # human-readable application name. May return `nil`
function GLib.get_application_name() end

--- # function GLib.get_charset()
---
--- Obtains the character set for the [current locale][setlocale]; you
--- might use this character set as an argument to `g_convert()`, to convert
--- from the current locale's encoding to some other encoding. (Frequently
--- g_locale_to_utf8() and g_locale_from_utf8() are nice shortcuts, though.)
--- 
--- On Windows the character set returned by this function is the
--- so-called system default ANSI code-page. That is the character set
--- used by the "narrow" versions of C library and Win32 functions that
--- handle file names. It might be different from the character set
--- used by the C library's current locale.
--- 
--- On Linux, the character set is found by consulting `nl_langinfo()` if
--- available. If not, the environment variables `LC_ALL`, `LC_CTYPE`, `LANG`
--- and `CHARSET` are queried in order. `nl_langinfo()` returns the C locale if
--- no locale has been loaded by `setlocale()`.
--- 
--- The return value is `true` if the locale's encoding is UTF-8, in that
--- case you can perhaps avoid calling `g_convert()`.
--- 
--- The string returned in `charset` is not allocated, and should not be
--- freed.
---
--- ---
---
---@param charset? string # return location for character set name, or `nil`.
---@return (boolean|nil) # `true` if the returned charset is UTF-8
function GLib.get_charset(charset) end

--- # function GLib.get_codeset()
---
--- Gets the character set for the current locale.
---
--- ---
---
---@return string # a newly allocated string containing the name of the character set. This string must be freed with `g_free()`.
function GLib.get_codeset() end

--- # function GLib.get_console_charset()
---
--- Obtains the character set used by the console attached to the process,
--- which is suitable for printing output to the terminal.
--- 
--- Usually this matches the result returned by `g_get_charset()`, but in
--- environments where the locale's character set does not match the encoding
--- of the console this function tries to guess a more suitable value instead.
--- 
--- On Windows the character set returned by this function is the
--- output code page used by the console associated with the calling process.
--- If the codepage can't be determined (for example because there is no
--- console attached) UTF-8 is assumed.
--- 
--- The return value is `true` if the locale's encoding is UTF-8, in that
--- case you can perhaps avoid calling `g_convert()`.
--- 
--- The string returned in `charset` is not allocated, and should not be
--- freed.
---
--- ---
---
---@param charset? string # return location for character set name, or `nil`.
---@return (boolean|nil) # `true` if the returned charset is UTF-8
function GLib.get_console_charset(charset) end

--- # function GLib.get_current_dir()
---
--- Gets the current directory.
--- 
--- The returned string should be freed when no longer needed.
--- The encoding of the returned string is system defined.
--- On Windows, it is always UTF-8.
--- 
--- Since GLib 2.40, this function will return the value of the "PWD"
--- environment variable if it is set and it happens to be the same as
--- the current directory.  This can make a difference in the case that
--- the current directory is the target of a symbolic link.
---
--- ---
---
---@return string # the current directory
function GLib.get_current_dir() end

--- # function GLib.get_current_time()
---
--- Equivalent to the UNIX `gettimeofday()` function, but portable.
--- 
--- You may find `g_get_real_time()` to be more convenient.
---
--- ---
---
---@param result GLib.TimeVal # `GTimeVal` structure in which to store current time.
---@return nil
function GLib.get_current_time(result) end

--- # function GLib.get_environ()
---
--- Gets the list of environment variables for the current process.
--- 
--- The list is `nil` terminated and each item in the list is of the
--- form 'NAME=VALUE'.
--- 
--- This is equivalent to direct access to the 'environ' global variable,
--- except portable.
--- 
--- The return value is freshly allocated and it should be freed with
--- `g_strfreev()` when it is no longer needed.
---
--- ---
---
---@return unknown[] # the list of environment variables
function GLib.get_environ() end

--- # function GLib.get_filename_charsets()
---
--- Determines the preferred character sets used for filenames.
--- The first character set from the `charsets` is the filename encoding, the
--- subsequent character sets are used when trying to generate a displayable
--- representation of a filename, see `g_filename_display_name()`.
--- 
--- On Unix, the character sets are determined by consulting the
--- environment variables `G_FILENAME_ENCODING` and `G_BROKEN_FILENAMES`.
--- On Windows, the character set used in the GLib API is always UTF-8
--- and said environment variables have no effect.
--- 
--- `G_FILENAME_ENCODING` may be set to a comma-separated list of
--- character set names. The special token "\`locale`" is taken
--- to  mean the character set for the [current locale][setlocale].
--- If `G_FILENAME_ENCODING` is not set, but `G_BROKEN_FILENAMES` is,
--- the character set of the current locale is taken as the filename
--- encoding. If neither environment variable  is set, UTF-8 is taken
--- as the filename encoding, but the character set of the current locale
--- is also put in the list of encodings.
--- 
--- The returned `charsets` belong to GLib and must not be freed.
--- 
--- Note that on Unix, regardless of the locale character set or
--- `G_FILENAME_ENCODING` value, the actual file names present
--- on a system might be in any random encoding or just gibberish.
---
--- ---
---
---@param filename_charsets unknown[] # return location for the `nil`-terminated list of encoding names
---@return (boolean|nil) # `true` if the filename encoding is UTF-8.
function GLib.get_filename_charsets(filename_charsets) end

--- # function GLib.get_home_dir()
---
--- Gets the current user's home directory.
--- 
--- As with most UNIX tools, this function will return the value of the
--- `HOME` environment variable if it is set to an existing absolute path
--- name, falling back to the `passwd` file in the case that it is unset.
--- 
--- If the path given in `HOME` is non-absolute, does not exist, or is
--- not a directory, the result is undefined.
--- 
--- Before version 2.36 this function would ignore the `HOME` environment
--- variable, taking the value from the `passwd` database instead. This was
--- changed to increase the compatibility of GLib with other programs (and
--- the XDG basedir specification) and to increase testability of programs
--- based on GLib (by making it easier to run them from test frameworks).
--- 
--- If your program has a strong requirement for either the new or the
--- old behaviour (and if you don't wish to increase your GLib
--- dependency to ensure that the new behaviour is in effect) then you
--- should either directly check the `HOME` environment variable yourself
--- or unset it before calling any functions in GLib.
---
--- ---
---
---@return string # the current user's home directory
function GLib.get_home_dir() end

--- # function GLib.get_host_name()
---
--- Return a name for the machine.
--- 
--- The returned name is not necessarily a fully-qualified domain name,
--- or even present in DNS or some other name service at all. It need
--- not even be unique on your local network or site, but usually it
--- is. Callers should not rely on the return value having any specific
--- properties like uniqueness for security purposes. Even if the name
--- of the machine is changed while an application is running, the
--- return value from this function does not change. The returned
--- string is owned by GLib and should not be modified or freed. If no
--- name can be determined, a default fixed string "localhost" is
--- returned.
--- 
--- The encoding of the returned string is UTF-8.
---
--- ---
---
---@return string # the host name of the machine.
function GLib.get_host_name() end

--- # function GLib.get_language_names()
---
--- Computes a list of applicable locale names, which can be used to
--- e.g. construct locale-dependent filenames or search paths. The returned
--- list is sorted from most desirable to least desirable and always contains
--- the default locale "C".
--- 
--- For example, if LANGUAGE=de:en_US, then the returned list is
--- "de", "en_US", "en", "C".
--- 
--- This function consults the environment variables `LANGUAGE`, `LC_ALL`,
--- `LC_MESSAGES` and `LANG` to find the list of locales specified by the
--- user.
---
--- ---
---
---@return unknown[] # a `nil`-terminated array of strings owned by GLib that must not be modified or freed.
function GLib.get_language_names() end

--- # function GLib.get_language_names_with_category()
---
--- Computes a list of applicable locale names with a locale category name,
--- which can be used to construct the fallback locale-dependent filenames
--- or search paths. The returned list is sorted from most desirable to
--- least desirable and always contains the default locale "C".
--- 
--- This function consults the environment variables `LANGUAGE`, `LC_ALL`,
--- `category_name`, and `LANG` to find the list of locales specified by the
--- user.
--- 
--- `g_get_language_names()` returns g_get_language_names_with_category("LC_MESSAGES").
---
--- ---
---
---@param category_name string # a locale category name
---@return unknown[] # a `nil`-terminated array of strings owned by the thread g_get_language_names_with_category was called from. It must not be modified or freed. It must be copied if planned to be used in another thread.
function GLib.get_language_names_with_category(category_name) end

--- # function GLib.get_locale_variants()
---
--- Returns a list of derived variants of `locale`, which can be used to
--- e.g. construct locale-dependent filenames or search paths. The returned
--- list is sorted from most desirable to least desirable.
--- This function handles territory, charset and extra locale modifiers. See
--- [`setlocale(3)`](man:setlocale) for information about locales and their format.
--- 
--- `locale` itself is guaranteed to be returned in the output.
--- 
--- For example, if `locale` is `fr_BE`, then the returned list
--- is `fr_BE`, `fr`. If `locale` is `en_GB.UTF-8`euro``, then the returned list
--- is `en_GB.UTF-8`euro``, `en_GB.UTF-8`, `en_GB`euro``, `en_GB`, `en.UTF-8`euro``,
--- `en.UTF-8`, `en`euro``, `en`.
--- 
--- If you need the list of variants for the current locale,
--- use `g_get_language_names()`.
---
--- ---
---
---@param locale string # a locale identifier
---@return unknown[] # a newly allocated array of newly allocated strings with the locale variants. Free with `g_strfreev()`.
function GLib.get_locale_variants(locale) end

--- # function GLib.get_monotonic_time()
---
--- Queries the system monotonic time.
--- 
--- The monotonic clock will always increase and doesn't suffer
--- discontinuities when the user (or NTP) changes the system time.  It
--- may or may not continue to tick during times where the machine is
--- suspended.
--- 
--- We try to use the clock that corresponds as closely as possible to
--- the passage of time as measured by system calls such as `poll()` but it
--- may not always be possible to do this.
---
--- ---
---
---@return integer # the monotonic time, in microseconds
function GLib.get_monotonic_time() end

--- # function GLib.get_num_processors()
---
--- Determine the approximate number of threads that the system will
--- schedule simultaneously for this process.  This is intended to be
--- used as a parameter to `g_thread_pool_new()` for CPU bound tasks and
--- similar cases.
---
--- ---
---
---@return integer # Number of schedulable threads, always greater than 0
function GLib.get_num_processors() end

--- # function GLib.get_os_info()
---
--- Get information about the operating system.
--- 
--- On Linux this comes from the `/etc/os-release` file. On other systems, it may
--- come from a variety of sources. You can either use the standard key names
--- like %G_OS_INFO_KEY_NAME or pass any UTF-8 string key name. For example,
--- `/etc/os-release` provides a number of other less commonly used values that may
--- be useful. No key is guaranteed to be provided, so the caller should always
--- check if the result is `nil`.
---
--- ---
---
---@param key_name string # a key for the OS info being requested, for example %G_OS_INFO_KEY_NAME.
---@return string # The associated value for the requested key or `nil` if this information is not provided.
function GLib.get_os_info(key_name) end

--- # function GLib.get_prgname()
---
--- Gets the name of the program. This name should not be localized,
--- in contrast to `g_get_application_name()`.
--- 
--- If you are using `GApplication` the program name is set in
--- `g_application_run()`. In case of GDK or GTK+ it is set in
--- `gdk_init()`, which is called by `gtk_init()` and the
--- `GtkApplication`::startup handler. The program name is found by
--- taking the last component of `argv`[0].
---
--- ---
---
---@return string # the name of the program, or `nil` if it has not been set yet. The returned string belongs to GLib and must not be modified or freed.
function GLib.get_prgname() end

--- # function GLib.get_real_name()
---
--- Gets the real name of the user. This usually comes from the user's
--- entry in the `passwd` file. The encoding of the returned string is
--- system-defined. (On Windows, it is, however, always UTF-8.) If the
--- real user name cannot be determined, the string "Unknown" is
--- returned.
---
--- ---
---
---@return string # the user's real name.
function GLib.get_real_name() end

--- # function GLib.get_real_time()
---
--- Queries the system wall-clock time.
--- 
--- This call is functionally equivalent to `g_get_current_time()` except
--- that the return value is often more convenient than dealing with a
--- `GTimeVal`.
--- 
--- You should only use this call if you are actually interested in the real
--- wall-clock time.  `g_get_monotonic_time()` is probably more useful for
--- measuring intervals.
---
--- ---
---
---@return integer # the number of microseconds since January 1, 1970 UTC.
function GLib.get_real_time() end

--- # function GLib.get_system_config_dirs()
---
--- Returns an ordered list of base directories in which to access
--- system-wide configuration information.
--- 
--- On UNIX platforms this is determined using the mechanisms described
--- in the
--- [XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
--- In this case the list of directories retrieved will be `XDG_CONFIG_DIRS`.
--- 
--- On Windows it follows XDG Base Directory Specification if `XDG_CONFIG_DIRS` is defined.
--- If `XDG_CONFIG_DIRS` is undefined, the directory that contains application
--- data for all users is used instead. A typical path is
--- `C:\Documents and Settings\All Users\Application Data`.
--- This folder is used for application data
--- that is not user specific. For example, an application can store
--- a spell-check dictionary, a database of clip art, or a log file in the
--- FOLDERID_ProgramData folder. This information will not roam and is available
--- to anyone using the computer.
--- 
--- The return value is cached and modifying it at runtime is not supported, as
--- it’s not thread-safe to modify environment variables at runtime.
---
--- ---
---
---@return unknown[] # a `nil`-terminated array of strings owned by GLib that must not be modified or freed.
function GLib.get_system_config_dirs() end

--- # function GLib.get_system_data_dirs()
---
--- Returns an ordered list of base directories in which to access
--- system-wide application data.
--- 
--- On UNIX platforms this is determined using the mechanisms described
--- in the
--- [XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec)
--- In this case the list of directories retrieved will be `XDG_DATA_DIRS`.
--- 
--- On Windows it follows XDG Base Directory Specification if `XDG_DATA_DIRS` is defined.
--- If `XDG_DATA_DIRS` is undefined,
--- the first elements in the list are the Application Data
--- and Documents folders for All Users. (These can be determined only
--- on Windows 2000 or later and are not present in the list on other
--- Windows versions.) See documentation for FOLDERID_ProgramData and
--- FOLDERID_PublicDocuments.
--- 
--- Then follows the "share" subfolder in the installation folder for
--- the package containing the DLL that calls this function, if it can
--- be determined.
--- 
--- Finally the list contains the "share" subfolder in the installation
--- folder for GLib, and in the installation folder for the package the
--- application's .exe file belongs to.
--- 
--- The installation folders above are determined by looking up the
--- folder where the module (DLL or EXE) in question is located. If the
--- folder's name is "bin", its parent is used, otherwise the folder
--- itself.
--- 
--- Note that on Windows the returned list can vary depending on where
--- this function is called.
--- 
--- The return value is cached and modifying it at runtime is not supported, as
--- it’s not thread-safe to modify environment variables at runtime.
---
--- ---
---
---@return unknown[] # a `nil`-terminated array of strings owned by GLib that must not be modified or freed.
function GLib.get_system_data_dirs() end

--- # function GLib.get_tmp_dir()
---
--- Gets the directory to use for temporary files.
--- 
--- On UNIX, this is taken from the `TMPDIR` environment variable.
--- If the variable is not set, `P_tmpdir` is
--- used, as defined by the system C library. Failing that, a
--- hard-coded default of "/tmp" is returned.
--- 
--- On Windows, the `TEMP` environment variable is used, with the
--- root directory of the Windows installation (eg: "C:\") used
--- as a default.
--- 
--- The encoding of the returned string is system-defined. On Windows,
--- it is always UTF-8. The return value is never `nil` or the empty
--- string.
---
--- ---
---
---@return string # the directory to use for temporary files.
function GLib.get_tmp_dir() end

--- # function GLib.get_user_cache_dir()
---
--- Returns a base directory in which to store non-essential, cached
--- data specific to particular user.
--- 
--- On UNIX platforms this is determined using the mechanisms described
--- in the
--- [XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
--- In this case the directory retrieved will be `XDG_CACHE_HOME`.
--- 
--- On Windows it follows XDG Base Directory Specification if `XDG_CACHE_HOME` is defined.
--- If `XDG_CACHE_HOME` is undefined, the directory that serves as a common
--- repository for temporary Internet files is used instead. A typical path is
--- `C:\Documents and Settings\username\Local Settings\Temporary Internet Files`.
--- See the [documentation for `FOLDERID_InternetCache`](https://docs.microsoft.com/en-us/windows/win32/shell/knownfolderid).
--- 
--- The return value is cached and modifying it at runtime is not supported, as
--- it’s not thread-safe to modify environment variables at runtime.
---
--- ---
---
---@return string # a string owned by GLib that must not be modified or freed.
function GLib.get_user_cache_dir() end

--- # function GLib.get_user_config_dir()
---
--- Returns a base directory in which to store user-specific application
--- configuration information such as user preferences and settings.
--- 
--- On UNIX platforms this is determined using the mechanisms described
--- in the
--- [XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
--- In this case the directory retrieved will be `XDG_CONFIG_HOME`.
--- 
--- On Windows it follows XDG Base Directory Specification if `XDG_CONFIG_HOME` is defined.
--- If `XDG_CONFIG_HOME` is undefined, the folder to use for local (as opposed
--- to roaming) application data is used instead. See the
--- [documentation for `FOLDERID_LocalAppData`](https://docs.microsoft.com/en-us/windows/win32/shell/knownfolderid).
--- Note that in this case on Windows it will be  the same
--- as what `g_get_user_data_dir()` returns.
--- 
--- The return value is cached and modifying it at runtime is not supported, as
--- it’s not thread-safe to modify environment variables at runtime.
---
--- ---
---
---@return string # a string owned by GLib that must not be modified or freed.
function GLib.get_user_config_dir() end

--- # function GLib.get_user_data_dir()
---
--- Returns a base directory in which to access application data such
--- as icons that is customized for a particular user.
--- 
--- On UNIX platforms this is determined using the mechanisms described
--- in the
--- [XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
--- In this case the directory retrieved will be `XDG_DATA_HOME`.
--- 
--- On Windows it follows XDG Base Directory Specification if `XDG_DATA_HOME`
--- is defined. If `XDG_DATA_HOME` is undefined, the folder to use for local (as
--- opposed to roaming) application data is used instead. See the
--- [documentation for `FOLDERID_LocalAppData`](https://docs.microsoft.com/en-us/windows/win32/shell/knownfolderid).
--- Note that in this case on Windows it will be the same
--- as what `g_get_user_config_dir()` returns.
--- 
--- The return value is cached and modifying it at runtime is not supported, as
--- it’s not thread-safe to modify environment variables at runtime.
---
--- ---
---
---@return string # a string owned by GLib that must not be modified or freed.
function GLib.get_user_data_dir() end

--- # function GLib.get_user_name()
---
--- Gets the user name of the current user. The encoding of the returned
--- string is system-defined. On UNIX, it might be the preferred file name
--- encoding, or something else, and there is no guarantee that it is even
--- consistent on a machine. On Windows, it is always UTF-8.
---
--- ---
---
---@return string # the user name of the current user.
function GLib.get_user_name() end

--- # function GLib.get_user_runtime_dir()
---
--- Returns a directory that is unique to the current user on the local
--- system.
--- 
--- This is determined using the mechanisms described
--- in the
--- [XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
--- This is the directory
--- specified in the `XDG_RUNTIME_DIR` environment variable.
--- In the case that this variable is not set, we return the value of
--- `g_get_user_cache_dir()`, after verifying that it exists.
--- 
--- The return value is cached and modifying it at runtime is not supported, as
--- it’s not thread-safe to modify environment variables at runtime.
---
--- ---
---
---@return string # a string owned by GLib that must not be modified or freed.
function GLib.get_user_runtime_dir() end

--- # function GLib.get_user_special_dir()
---
--- Returns the full path of a special directory using its logical id.
--- 
--- On UNIX this is done using the XDG special user directories.
--- For compatibility with existing practise, %G_USER_DIRECTORY_DESKTOP
--- falls back to `$HOME/Desktop` when XDG special user directories have
--- not been set up.
--- 
--- Depending on the platform, the user might be able to change the path
--- of the special directory without requiring the session to restart; GLib
--- will not reflect any change once the special directories are loaded.
---
--- ---
---
---@param directory GLib.UserDirectory # the logical id of special directory
---@return string # the path to the specified special directory, or `nil` if the logical id was not found. The returned string is owned by GLib and should not be modified or freed.
function GLib.get_user_special_dir(directory) end

--- # function GLib.get_user_state_dir()
---
--- Returns a base directory in which to store state files specific to
--- particular user.
--- 
--- On UNIX platforms this is determined using the mechanisms described
--- in the
--- [XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
--- In this case the directory retrieved will be `XDG_STATE_HOME`.
--- 
--- On Windows it follows XDG Base Directory Specification if `XDG_STATE_HOME` is defined.
--- If `XDG_STATE_HOME` is undefined, the folder to use for local (as opposed
--- to roaming) application data is used instead. See the
--- [documentation for `FOLDERID_LocalAppData`](https://docs.microsoft.com/en-us/windows/win32/shell/knownfolderid).
--- Note that in this case on Windows it will be the same
--- as what `g_get_user_data_dir()` returns.
--- 
--- The return value is cached and modifying it at runtime is not supported, as
--- it’s not thread-safe to modify environment variables at runtime.
---
--- ---
---
---@return string # a string owned by GLib that must not be modified or freed.
function GLib.get_user_state_dir() end

--- # function GLib.getenv()
---
--- Returns the value of an environment variable.
--- 
--- On UNIX, the name and value are byte strings which might or might not
--- be in some consistent character set and encoding. On Windows, they are
--- in UTF-8.
--- On Windows, in case the environment variable's value contains
--- references to other environment variables, they are expanded.
---
--- ---
---
---@param variable string # the environment variable to get
---@return string # the value of the environment variable, or `nil` if the environment variable is not found. The returned string may be overwritten by the next call to `g_getenv()`, `g_setenv()` or `g_unsetenv()`.
function GLib.getenv(variable) end

--- # function GLib.hash_table_add()
---
--- This is a convenience function for using a `GHashTable` as a set.  It
--- is equivalent to calling `g_hash_table_replace()` with `key` as both the
--- key and the value.
--- 
--- In particular, this means that if `key` already exists in the hash table, then
--- the old copy of `key` in the hash table is freed and `key` replaces it in the
--- table.
--- 
--- When a hash table only ever contains keys that have themselves as the
--- corresponding value it is able to be stored more efficiently.  See
--- the discussion in the section description.
--- 
--- Starting from GLib 2.40, this function returns a boolean value to
--- indicate whether the newly added value was already in the hash table
--- or not.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param key? userdata # a key to insert
---@return (boolean|nil) # `true` if the key did not exist yet
function GLib.hash_table_add(hash_table, key) end

--- # function GLib.hash_table_contains()
---
--- Checks if `key` is in `hash_table`.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param key? userdata # a key to check
---@return (boolean|nil) # `true` if `key` is in `hash_table`, `false` otherwise.
function GLib.hash_table_contains(hash_table, key) end

--- # function GLib.hash_table_destroy()
---
--- Destroys all keys and values in the `GHashTable` and decrements its
--- reference count by 1. If keys and/or values are dynamically allocated,
--- you should either free them first or create the `GHashTable` with destroy
--- notifiers using `g_hash_table_new_full()`. In the latter case the destroy
--- functions you supplied will be called on all keys and values during the
--- destruction phase.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@return nil
function GLib.hash_table_destroy(hash_table) end

--- # function GLib.hash_table_insert()
---
--- Inserts a new key and value into a `GHashTable`.
--- 
--- If the key already exists in the `GHashTable` its current
--- value is replaced with the new value. If you supplied a
--- `value_destroy_func` when creating the `GHashTable`, the old
--- value is freed using that function. If you supplied a
--- `key_destroy_func` when creating the `GHashTable`, the passed
--- key is freed using that function.
--- 
--- Starting from GLib 2.40, this function returns a boolean value to
--- indicate whether the newly added value was already in the hash table
--- or not.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param key? userdata # a key to insert
---@param value? userdata # the value to associate with the key
---@return (boolean|nil) # `true` if the key did not exist yet
function GLib.hash_table_insert(hash_table, key, value) end

--- # function GLib.hash_table_lookup()
---
--- Looks up a key in a `GHashTable`. Note that this function cannot
--- distinguish between a key that is not present and one which is present
--- and has the value `nil`. If you need this distinction, use
--- `g_hash_table_lookup_extended()`.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param key? userdata # the key to look up
---@return userdata # the associated value, or `nil` if the key is not found
function GLib.hash_table_lookup(hash_table, key) end

--- # function GLib.hash_table_lookup_extended()
---
--- Looks up a key in the `GHashTable`, returning the original key and the
--- associated value and a `gboolean` which is `true` if the key was found. This
--- is useful if you need to free the memory allocated for the original key,
--- for example before calling `g_hash_table_remove()`.
--- 
--- You can actually pass `nil` for `lookup_key` to test
--- whether the `nil` key exists, provided the hash and equal functions
--- of `hash_table` are `nil`-safe.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param lookup_key? userdata # the key to look up
---@param orig_key? userdata # return location for the original key
---@param value? userdata # return location for the value associated with the key
---@return (boolean|nil) # `true` if the key was found in the `GHashTable`
function GLib.hash_table_lookup_extended(hash_table, lookup_key, orig_key, value) end

--- # function GLib.hash_table_new_similar()
---
--- Creates a new `GHashTable` like `g_hash_table_new_full()` with a reference
--- count of 1.
--- 
--- It inherits the hash function, the key equal function, the key destroy function,
--- as well as the value destroy function, from `other_hash_table`.
--- 
--- The returned hash table will be empty; it will not contain the keys
--- or values from `other_hash_table`.
---
--- ---
---
---@param other_hash_table table<userdata, userdata> # Another `GHashTable`
---@return table<userdata, userdata> # a new `GHashTable`
function GLib.hash_table_new_similar(other_hash_table) end

--- # function GLib.hash_table_remove()
---
--- Removes a key and its associated value from a `GHashTable`.
--- 
--- If the `GHashTable` was created using `g_hash_table_new_full()`, the
--- key and value are freed using the supplied destroy functions, otherwise
--- you have to make sure that any dynamically allocated values are freed
--- yourself.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param key? userdata # the key to remove
---@return (boolean|nil) # `true` if the key was found and removed from the `GHashTable`
function GLib.hash_table_remove(hash_table, key) end

--- # function GLib.hash_table_remove_all()
---
--- Removes all keys and their associated values from a `GHashTable`.
--- 
--- If the `GHashTable` was created using `g_hash_table_new_full()`,
--- the keys and values are freed using the supplied destroy functions,
--- otherwise you have to make sure that any dynamically allocated
--- values are freed yourself.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@return nil
function GLib.hash_table_remove_all(hash_table) end

--- # function GLib.hash_table_replace()
---
--- Inserts a new key and value into a `GHashTable` similar to
--- `g_hash_table_insert()`. The difference is that if the key
--- already exists in the `GHashTable`, it gets replaced by the
--- new key. If you supplied a `value_destroy_func` when creating
--- the `GHashTable`, the old value is freed using that function.
--- If you supplied a `key_destroy_func` when creating the
--- `GHashTable`, the old key is freed using that function.
--- 
--- Starting from GLib 2.40, this function returns a boolean value to
--- indicate whether the newly added value was already in the hash table
--- or not.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param key? userdata # a key to insert
---@param value? userdata # the value to associate with the key
---@return (boolean|nil) # `true` if the key did not exist yet
function GLib.hash_table_replace(hash_table, key, value) end

--- # function GLib.hash_table_size()
---
--- Returns the number of elements contained in the `GHashTable`.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@return integer # the number of key/value pairs in the `GHashTable`.
function GLib.hash_table_size(hash_table) end

--- # function GLib.hash_table_steal()
---
--- Removes a key and its associated value from a `GHashTable` without
--- calling the key and value destroy functions.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param key? userdata # the key to remove
---@return (boolean|nil) # `true` if the key was found and removed from the `GHashTable`
function GLib.hash_table_steal(hash_table, key) end

--- # function GLib.hash_table_steal_all()
---
--- Removes all keys and their associated values from a `GHashTable`
--- without calling the key and value destroy functions.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@return nil
function GLib.hash_table_steal_all(hash_table) end

--- # function GLib.hash_table_steal_extended()
---
--- Looks up a key in the `GHashTable`, stealing the original key and the
--- associated value and returning `true` if the key was found. If the key was
--- not found, `false` is returned.
--- 
--- If found, the stolen key and value are removed from the hash table without
--- calling the key and value destroy functions, and ownership is transferred to
--- the caller of this method, as with `g_hash_table_steal()`. That is the case
--- regardless whether `stolen_key` or `stolen_value` output parameters are
--- requested.
--- 
--- You can pass `nil` for `lookup_key`, provided the hash and equal functions
--- of `hash_table` are `nil`-safe.
--- 
--- The dictionary implementation optimizes for having all values identical to
--- their keys, for example by using `g_hash_table_add()`. When stealing both the
--- key and the value from such a dictionary, the value will be `nil`.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a `GHashTable`
---@param lookup_key? userdata # the key to look up
---@param stolen_key? userdata # return location for the original key
---@param stolen_value? userdata # return location for the value associated with the key
---@return (boolean|nil) # `true` if the key was found in the `GHashTable`
function GLib.hash_table_steal_extended(hash_table, lookup_key, stolen_key, stolen_value) end

--- # function GLib.hash_table_unref()
---
--- Atomically decrements the reference count of `hash_table` by one.
--- If the reference count drops to 0, all keys and values will be
--- destroyed, and all memory allocated by the hash table is released.
--- This function is MT-safe and may be called from any thread.
---
--- ---
---
---@param hash_table table<userdata, userdata> # a valid `GHashTable`
---@return nil
function GLib.hash_table_unref(hash_table) end

--- # function GLib.hook_destroy()
---
--- Destroys a `GHook`, given its ID.
---
--- ---
---
---@param hook_list GLib.HookList # a `GHookList`
---@param hook_id integer # a hook ID
---@return (boolean|nil) # `true` if the `GHook` was found in the `GHookList` and destroyed
function GLib.hook_destroy(hook_list, hook_id) end

--- # function GLib.hook_destroy_link()
---
--- Removes one `GHook` from a `GHookList`, marking it
--- inactive and calling `g_hook_unref()` on it.
---
--- ---
---
---@param hook_list GLib.HookList # a `GHookList`
---@param hook GLib.Hook # the `GHook` to remove
---@return nil
function GLib.hook_destroy_link(hook_list, hook) end

--- # function GLib.hook_free()
---
--- Calls the `GHookList` `finalize_hook` function if it exists,
--- and frees the memory allocated for the `GHook`.
---
--- ---
---
---@param hook_list GLib.HookList # a `GHookList`
---@param hook GLib.Hook # the `GHook` to free
---@return nil
function GLib.hook_free(hook_list, hook) end

--- # function GLib.hook_insert_before()
---
--- Inserts a `GHook` into a `GHookList`, before a given `GHook`.
---
--- ---
---
---@param hook_list GLib.HookList # a `GHookList`
---@param sibling? GLib.Hook # the `GHook` to insert the new `GHook` before
---@param hook GLib.Hook # the `GHook` to insert
---@return nil
function GLib.hook_insert_before(hook_list, sibling, hook) end

--- # function GLib.hook_prepend()
---
--- Prepends a `GHook` on the start of a `GHookList`.
---
--- ---
---
---@param hook_list GLib.HookList # a `GHookList`
---@param hook GLib.Hook # the `GHook` to add to the start of `hook_list`
---@return nil
function GLib.hook_prepend(hook_list, hook) end

--- # function GLib.hook_unref()
---
--- Decrements the reference count of a `GHook`.
--- If the reference count falls to 0, the `GHook` is removed
--- from the `GHookList` and `g_hook_free()` is called to free it.
---
--- ---
---
---@param hook_list GLib.HookList # a `GHookList`
---@param hook GLib.Hook # the `GHook` to unref
---@return nil
function GLib.hook_unref(hook_list, hook) end

--- # function GLib.hostname_is_ascii_encoded()
---
--- Tests if `hostname` contains segments with an ASCII-compatible
--- encoding of an Internationalized Domain Name. If this returns
--- `true`, you should decode the hostname with `g_hostname_to_unicode()`
--- before displaying it to the user.
--- 
--- Note that a hostname might contain a mix of encoded and unencoded
--- segments, and so it is possible for `g_hostname_is_non_ascii()` and
--- `g_hostname_is_ascii_encoded()` to both return `true` for a name.
---
--- ---
---
---@param hostname string # a hostname
---@return (boolean|nil) # `true` if `hostname` contains any ASCII-encoded segments.
function GLib.hostname_is_ascii_encoded(hostname) end

--- # function GLib.hostname_is_ip_address()
---
--- Tests if `hostname` is the string form of an IPv4 or IPv6 address.
--- (Eg, "192.168.0.1".)
--- 
--- Since 2.66, IPv6 addresses with a zone-id are accepted (RFC6874).
---
--- ---
---
---@param hostname string # a hostname (or IP address in string form)
---@return (boolean|nil) # `true` if `hostname` is an IP address
function GLib.hostname_is_ip_address(hostname) end

--- # function GLib.hostname_is_non_ascii()
---
--- Tests if `hostname` contains Unicode characters. If this returns
--- `true`, you need to encode the hostname with `g_hostname_to_ascii()`
--- before using it in non-IDN-aware contexts.
--- 
--- Note that a hostname might contain a mix of encoded and unencoded
--- segments, and so it is possible for `g_hostname_is_non_ascii()` and
--- `g_hostname_is_ascii_encoded()` to both return `true` for a name.
---
--- ---
---
---@param hostname string # a hostname
---@return (boolean|nil) # `true` if `hostname` contains any non-ASCII characters
function GLib.hostname_is_non_ascii(hostname) end

--- # function GLib.hostname_to_ascii()
---
--- Converts `hostname` to its canonical ASCII form; an ASCII-only
--- string containing no uppercase letters and not ending with a
--- trailing dot.
---
--- ---
---
---@param hostname string # a valid UTF-8 or ASCII hostname
---@return string # an ASCII hostname, which must be freed, or `nil` if `hostname` is in some way invalid.
function GLib.hostname_to_ascii(hostname) end

--- # function GLib.hostname_to_unicode()
---
--- Converts `hostname` to its canonical presentation form; a UTF-8
--- string in Unicode normalization form C, containing no uppercase
--- letters, no forbidden characters, and no ASCII-encoded segments,
--- and not ending with a trailing dot.
--- 
--- Of course if `hostname` is not an internationalized hostname, then
--- the canonical presentation form will be entirely ASCII.
---
--- ---
---
---@param hostname string # a valid UTF-8 or ASCII hostname
---@return string # a UTF-8 hostname, which must be freed, or `nil` if `hostname` is in some way invalid.
function GLib.hostname_to_unicode(hostname) end

--- # function GLib.idle_add()
---
--- Adds a function to be called whenever there are no higher priority
--- events pending.
--- 
--- If the function returns %G_SOURCE_REMOVE or `false` it is automatically
--- removed from the list of event sources and will not be called again.
--- 
--- See [memory management of sources][mainloop-memory-management] for details
--- on how to handle the return value and memory management of `data`.
--- 
--- This internally creates a main loop source using `g_idle_source_new()`
--- and attaches it to the global `GMainContext` using `g_source_attach()`, so
--- the callback will be invoked in whichever thread is running that main
--- context. You can do these steps manually if you need greater control or to
--- use a custom main context.
---
--- ---
---
---@param priority integer # the priority of the idle source. Typically this will be in the range between %G_PRIORITY_DEFAULT_IDLE and %G_PRIORITY_HIGH_IDLE.
---@param function__ GLib.SourceFunc # function to call
---@param data? userdata # data to pass to `function`
---@param notify? GLib.DestroyNotify # function to call when the idle is removed, or `nil`
---@return integer # the ID (greater than 0) of the event source.
function GLib.idle_add(priority, function__, data, notify) end

--- # function GLib.idle_remove_by_data()
---
--- Removes the idle function with the given data.
---
--- ---
---
---@param data? userdata # the data for the idle source's callback.
---@return (boolean|nil) # `true` if an idle source was found and removed.
function GLib.idle_remove_by_data(data) end

--- # function GLib.idle_source_new()
---
--- Creates a new idle source.
--- 
--- The source will not initially be associated with any `GMainContext`
--- and must be added to one with `g_source_attach()` before it will be
--- executed. Note that the default priority for idle sources is
--- %G_PRIORITY_DEFAULT_IDLE, as compared to other sources which
--- have a default priority of %G_PRIORITY_DEFAULT.
---
--- ---
---
---@return GLib.Source # the newly-created idle source
function GLib.idle_source_new() end

--- # function GLib.int64_equal()
---
--- Compares the two `gint64` values being pointed to and returns
--- `true` if they are equal.
--- It can be passed to `g_hash_table_new()` as the `key_equal_func`
--- parameter, when using non-`nil` pointers to 64-bit integers as keys in a
--- `GHashTable`.
---
--- ---
---
---@param v1 userdata # a pointer to a `gint64` key
---@param v2 userdata # a pointer to a `gint64` key to compare with `v1`
---@return (boolean|nil) # `true` if the two keys match.
function GLib.int64_equal(v1, v2) end

--- # function GLib.int64_hash()
---
--- Converts a pointer to a `gint64` to a hash value.
--- 
--- It can be passed to `g_hash_table_new()` as the `hash_func` parameter,
--- when using non-`nil` pointers to 64-bit integer values as keys in a
--- `GHashTable`.
---
--- ---
---
---@param v userdata # a pointer to a `gint64` key
---@return integer # a hash value corresponding to the key.
function GLib.int64_hash(v) end

--- # function GLib.int_equal()
---
--- Compares the two `gint` values being pointed to and returns
--- `true` if they are equal.
--- It can be passed to `g_hash_table_new()` as the `key_equal_func`
--- parameter, when using non-`nil` pointers to integers as keys in a
--- `GHashTable`.
--- 
--- Note that this function acts on pointers to `gint`, not on `gint`
--- directly: if your hash table's keys are of the form
--- `GINT_TO_POINTER (n)`, use `g_direct_equal()` instead.
---
--- ---
---
---@param v1 userdata # a pointer to a `gint` key
---@param v2 userdata # a pointer to a `gint` key to compare with `v1`
---@return (boolean|nil) # `true` if the two keys match.
function GLib.int_equal(v1, v2) end

--- # function GLib.int_hash()
---
--- Converts a pointer to a `gint` to a hash value.
--- It can be passed to `g_hash_table_new()` as the `hash_func` parameter,
--- when using non-`nil` pointers to integer values as keys in a `GHashTable`.
--- 
--- Note that this function acts on pointers to `gint`, not on `gint`
--- directly: if your hash table's keys are of the form
--- `GINT_TO_POINTER (n)`, use `g_direct_hash()` instead.
---
--- ---
---
---@param v userdata # a pointer to a `gint` key
---@return integer # a hash value corresponding to the key.
function GLib.int_hash(v) end

--- # function GLib.intern_static_string()
---
--- Returns a canonical representation for `string`. Interned strings
--- can be compared for equality by comparing the pointers, instead of
--- using `strcmp()`. `g_intern_static_string()` does not copy the string,
--- therefore `string` must not be freed or modified.
--- 
--- This function must not be used before library constructors have finished
--- running. In particular, this means it cannot be used to initialize global
--- variables in C++.
---
--- ---
---
---@param string? string # a static string
---@return string # a canonical representation for the string
function GLib.intern_static_string(string) end

--- # function GLib.intern_string()
---
--- Returns a canonical representation for `string`. Interned strings
--- can be compared for equality by comparing the pointers, instead of
--- using `strcmp()`.
--- 
--- This function must not be used before library constructors have finished
--- running. In particular, this means it cannot be used to initialize global
--- variables in C++.
---
--- ---
---
---@param string? string # a string
---@return string # a canonical representation for the string
function GLib.intern_string(string) end

--- # function GLib.io_add_watch()
---
--- Adds the `GIOChannel` into the default main loop context
--- with the given priority.
--- 
--- This internally creates a main loop source using `g_io_create_watch()`
--- and attaches it to the main loop context with `g_source_attach()`.
--- You can do these steps manually if you need greater control.
---
--- ---
---
---@param channel GLib.IOChannel # a `GIOChannel`
---@param priority integer # the priority of the `GIOChannel` source
---@param condition GLib.IOCondition # the condition to watch for
---@param func GLib.IOFunc # the function to call when the condition is satisfied
---@param user_data? userdata # user data to pass to `func`
---@param notify GLib.DestroyNotify # the function to call when the source is removed
---@return integer # the event source id
function GLib.io_add_watch(channel, priority, condition, func, user_data, notify) end

--- # function GLib.io_channel_error_from_errno()
---
--- Converts an `errno` error number to a `GIOChannelError`.
---
--- ---
---
---@param en integer # an `errno` error number, e.g. `EINVAL`
---@return GLib.IOChannelError # a `GIOChannelError` error number, e.g. %G_IO_CHANNEL_ERROR_INVAL.
function GLib.io_channel_error_from_errno(en) end

--- # function GLib.io_channel_error_quark()
---
---@return GLib.Quark
function GLib.io_channel_error_quark() end

--- # function GLib.io_create_watch()
---
--- Creates a `GSource` that's dispatched when `condition` is met for the
--- given `channel`. For example, if condition is %G_IO_IN, the source will
--- be dispatched when there's data available for reading.
--- 
--- The callback function invoked by the `GSource` should be added with
--- `g_source_set_callback()`, but it has type `GIOFunc` (not `GSourceFunc`).
--- 
--- `g_io_add_watch()` is a simpler interface to this same functionality, for
--- the case where you want to add the source to the default main loop context
--- at the default priority.
--- 
--- On Windows, polling a `GSource` created to watch a channel for a socket
--- puts the socket in non-blocking mode. This is a side-effect of the
--- implementation and unavoidable.
---
--- ---
---
---@param channel GLib.IOChannel # a `GIOChannel` to watch
---@param condition GLib.IOCondition # conditions to watch for
---@return GLib.Source # a new `GSource`
function GLib.io_create_watch(channel, condition) end

--- # function GLib.key_file_error_quark()
---
---@return GLib.Quark
function GLib.key_file_error_quark() end

--- # function GLib.listenv()
---
--- Gets the names of all variables set in the environment.
--- 
--- Programs that want to be portable to Windows should typically use
--- this function and `g_getenv()` instead of using the environ array
--- from the C library directly. On Windows, the strings in the environ
--- array are in system codepage encoding, while in most of the typical
--- use cases for environment variables in GLib-using programs you want
--- the UTF-8 encoding that this function and `g_getenv()` provide.
---
--- ---
---
---@return unknown[] # a `nil`-terminated list of strings which must be freed with `g_strfreev()`.
function GLib.listenv() end

--- # function GLib.locale_from_utf8()
---
--- Converts a string from UTF-8 to the encoding used for strings by
--- the C runtime (usually the same as that used by the operating
--- system) in the [current locale][setlocale]. On Windows this means
--- the system codepage.
--- 
--- The input string shall not contain nul characters even if the `len`
--- argument is positive. A nul character found inside the string will result
--- in error %G_CONVERT_ERROR_ILLEGAL_SEQUENCE. Use `g_convert()` to convert
--- input that may contain embedded nul characters.
---
--- ---
---
---@param utf8string string # a UTF-8 encoded string
---@param len integer # the length of the string, or -1 if the string is nul-terminated.
---@param bytes_read? integer # location to store the number of bytes in the input string that were successfully converted, or `nil`. Even if the conversion was successful, this may be less than `len` if there were partial characters at the end of the input. If the error %G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value stored will be the byte offset after the last valid input sequence.
---@param bytes_written? integer # the number of bytes stored in the output buffer (not including the terminating nul).
---@return unknown[] # A newly-allocated buffer containing the converted string, or `nil` on an error, and error will be set.
function GLib.locale_from_utf8(utf8string, len, bytes_read, bytes_written) end

--- # function GLib.locale_to_utf8()
---
--- Converts a string which is in the encoding used for strings by
--- the C runtime (usually the same as that used by the operating
--- system) in the [current locale][setlocale] into a UTF-8 string.
--- 
--- If the source encoding is not UTF-8 and the conversion output contains a
--- nul character, the error %G_CONVERT_ERROR_EMBEDDED_NUL is set and the
--- function returns `nil`.
--- If the source encoding is UTF-8, an embedded nul character is treated with
--- the %G_CONVERT_ERROR_ILLEGAL_SEQUENCE error for backward compatibility with
--- earlier versions of this library. Use `g_convert()` to produce output that
--- may contain embedded nul characters.
---
--- ---
---
---@param opsysstring unknown[] # a string in the encoding of the current locale. On Windows this means the system codepage.
---@param len integer # the length of the string, or -1 if the string is nul-terminated (Note that some encodings may allow nul bytes to occur inside strings. In that case, using -1 for the `len` parameter is unsafe)
---@param bytes_read? integer # location to store the number of bytes in the input string that were successfully converted, or `nil`. Even if the conversion was successful, this may be less than `len` if there were partial characters at the end of the input. If the error %G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value stored will be the byte offset after the last valid input sequence.
---@param bytes_written? integer # the number of bytes stored in the output buffer (not including the terminating nul).
---@return string # The converted string, or `nil` on an error.
function GLib.locale_to_utf8(opsysstring, len, bytes_read, bytes_written) end

--- # function GLib.log_default_handler()
---
--- The default log handler set up by GLib; `g_log_set_default_handler()`
--- allows to install an alternate default log handler.
--- This is used if no log handler has been set for the particular log
--- domain and log level combination. It outputs the message to stderr
--- or stdout and if the log level is fatal it calls G_BREAKPOINT(). It automatically
--- prints a new-line character after the message, so one does not need to be
--- manually included in `message`.
--- 
--- The behavior of this log handler can be influenced by a number of
--- environment variables:
--- 
--- - `G_MESSAGES_PREFIXED`: A :-separated list of log levels for which
---   messages should be prefixed by the program name and PID of the
---   application.
--- 
--- - `G_MESSAGES_DEBUG`: A space-separated list of log domains for
---   which debug and informational messages are printed. By default
---   these messages are not printed.
--- 
--- stderr is used for levels %G_LOG_LEVEL_ERROR, %G_LOG_LEVEL_CRITICAL,
--- %G_LOG_LEVEL_WARNING and %G_LOG_LEVEL_MESSAGE. stdout is used for
--- the rest, unless stderr was requested by
--- `g_log_writer_default_set_use_stderr()`.
--- 
--- This has no effect if structured logging is enabled; see
--- [Using Structured Logging][using-structured-logging].
---
--- ---
---
---@param log_domain? string # the log domain of the message, or `nil` for the default "" application domain
---@param log_level GLib.LogLevelFlags # the level of the message
---@param message? string # the message
---@param unused_data? userdata # data passed from `g_log()` which is unused
---@return nil
function GLib.log_default_handler(log_domain, log_level, message, unused_data) end

--- # function GLib.log_get_debug_enabled()
---
--- Return whether debug output from the GLib logging system is enabled.
--- 
--- Note that this should not be used to conditionalise calls to `g_debug()` or
--- other logging functions; it should only be used from %GLogWriterFunc
--- implementations.
--- 
--- Note also that the value of this does not depend on `G_MESSAGES_DEBUG`; see
--- the docs for `g_log_set_debug_enabled()`.
---
--- ---
---
---@return (boolean|nil) # `true` if debug output is enabled, `false` otherwise
function GLib.log_get_debug_enabled() end

--- # function GLib.log_remove_handler()
---
--- Removes the log handler.
--- 
--- This has no effect if structured logging is enabled; see
--- [Using Structured Logging][using-structured-logging].
---
--- ---
---
---@param log_domain string # the log domain
---@param handler_id integer # the id of the handler, which was returned in `g_log_set_handler()`
---@return nil
function GLib.log_remove_handler(log_domain, handler_id) end

--- # function GLib.log_set_always_fatal()
---
--- Sets the message levels which are always fatal, in any log domain.
--- When a message with any of these levels is logged the program terminates.
--- You can only set the levels defined by GLib to be fatal.
--- %G_LOG_LEVEL_ERROR is always fatal.
--- 
--- You can also make some message levels fatal at runtime by setting
--- the `G_DEBUG` environment variable (see
--- [Running GLib Applications](glib-running.html)).
--- 
--- Libraries should not call this function, as it affects all messages logged
--- by a process, including those from other libraries.
--- 
--- Structured log messages (using `g_log_structured()` and
--- `g_log_structured_array()`) are fatal only if the default log writer is used;
--- otherwise it is up to the writer function to determine which log messages
--- are fatal. See [Using Structured Logging][using-structured-logging].
---
--- ---
---
---@param fatal_mask GLib.LogLevelFlags # the mask containing bits set for each level of error which is to be fatal
---@return GLib.LogLevelFlags # the old fatal mask
function GLib.log_set_always_fatal(fatal_mask) end

--- # function GLib.log_set_debug_enabled()
---
--- Enable or disable debug output from the GLib logging system for all domains.
--- This value interacts disjunctively with `G_MESSAGES_DEBUG` — if either of
--- them would allow a debug message to be outputted, it will be.
--- 
--- Note that this should not be used from within library code to enable debug
--- output — it is intended for external use.
---
--- ---
---
---@param enabled (boolean|nil) # `true` to enable debug output, `false` otherwise
---@return nil
function GLib.log_set_debug_enabled(enabled) end

--- # function GLib.log_set_fatal_mask()
---
--- Sets the log levels which are fatal in the given domain.
--- %G_LOG_LEVEL_ERROR is always fatal.
--- 
--- This has no effect on structured log messages (using `g_log_structured()` or
--- `g_log_structured_array()`). To change the fatal behaviour for specific log
--- messages, programs must install a custom log writer function using
--- `g_log_set_writer_func()`. See
--- [Using Structured Logging][using-structured-logging].
--- 
--- This function is mostly intended to be used with
--- %G_LOG_LEVEL_CRITICAL.  You should typically not set
--- %G_LOG_LEVEL_WARNING, %G_LOG_LEVEL_MESSAGE, %G_LOG_LEVEL_INFO or
--- %G_LOG_LEVEL_DEBUG as fatal except inside of test programs.
---
--- ---
---
---@param log_domain string # the log domain
---@param fatal_mask GLib.LogLevelFlags # the new fatal mask
---@return GLib.LogLevelFlags # the old fatal mask for the log domain
function GLib.log_set_fatal_mask(log_domain, fatal_mask) end

--- # function GLib.log_set_handler()
---
--- Like `g_log_set_handler()`, but takes a destroy notify for the `user_data`.
--- 
--- This has no effect if structured logging is enabled; see
--- [Using Structured Logging][using-structured-logging].
---
--- ---
---
---@param log_domain? string # the log domain, or `nil` for the default "" application domain
---@param log_levels GLib.LogLevelFlags # the log levels to apply the log handler for. To handle fatal and recursive messages as well, combine the log levels with the %G_LOG_FLAG_FATAL and %G_LOG_FLAG_RECURSION bit flags.
---@param log_func GLib.LogFunc # the log handler function
---@param user_data? userdata # data passed to the log handler
---@param destroy GLib.DestroyNotify # destroy notify for `user_data`, or `nil`
---@return integer # the id of the new handler
function GLib.log_set_handler(log_domain, log_levels, log_func, user_data, destroy) end

--- # function GLib.log_set_writer_func()
---
--- Set a writer function which will be called to format and write out each log
--- message. Each program should set a writer function, or the default writer
--- (`g_log_writer_default()`) will be used.
--- 
--- Libraries **must not** call this function — only programs are allowed to
--- install a writer function, as there must be a single, central point where
--- log messages are formatted and outputted.
--- 
--- There can only be one writer function. It is an error to set more than one.
---
--- ---
---
---@param func? GLib.LogWriterFunc # log writer function, which must not be `nil`
---@param user_data? userdata # user data to pass to `func`
---@param user_data_free GLib.DestroyNotify # function to free `user_data` once it’s finished with, if non-`nil`
---@return nil
function GLib.log_set_writer_func(func, user_data, user_data_free) end

--- # function GLib.log_structured_array()
---
--- Log a message with structured data. The message will be passed through to the
--- log writer set by the application using `g_log_set_writer_func()`. If the
--- message is fatal (i.e. its log level is %G_LOG_LEVEL_ERROR), the program will
--- be aborted at the end of this function.
--- 
--- See `g_log_structured()` for more documentation.
--- 
--- This assumes that `log_level` is already present in `fields` (typically as the
--- `PRIORITY` field).
---
--- ---
---
---@param log_level GLib.LogLevelFlags # log level, either from `GLogLevelFlags`, or a user-defined level
---@param fields unknown[] # key–value pairs of structured data to add to the log message
---@param n_fields integer # number of elements in the `fields` array
---@return nil
function GLib.log_structured_array(log_level, fields, n_fields) end

--- # function GLib.log_variant()
---
--- Log a message with structured data, accepting the data within a `GVariant`. This
--- version is especially useful for use in other languages, via introspection.
--- 
--- The only mandatory item in the `fields` dictionary is the "MESSAGE" which must
--- contain the text shown to the user.
--- 
--- The values in the `fields` dictionary are likely to be of type String
--- (%G_VARIANT_TYPE_STRING). Array of bytes (%G_VARIANT_TYPE_BYTESTRING) is also
--- supported. In this case the message is handled as binary and will be forwarded
--- to the log writer as such. The size of the array should not be higher than
--- %G_MAXSSIZE. Otherwise it will be truncated to this size. For other types
--- `g_variant_print()` will be used to convert the value into a string.
--- 
--- For more details on its usage and about the parameters, see `g_log_structured()`.
---
--- ---
---
---@param log_domain? string # log domain, usually %G_LOG_DOMAIN
---@param log_level GLib.LogLevelFlags # log level, either from `GLogLevelFlags`, or a user-defined level
---@param fields GLib.Variant # a dictionary (`GVariant` of the type %G_VARIANT_TYPE_VARDICT) containing the key-value pairs of message data.
---@return nil
function GLib.log_variant(log_domain, log_level, fields) end

--- # function GLib.log_writer_default()
---
--- Format a structured log message and output it to the default log destination
--- for the platform. On Linux, this is typically the systemd journal, falling
--- back to `stdout` or `stderr` if running from the terminal or if output is
--- being redirected to a file.
--- 
--- Support for other platform-specific logging mechanisms may be added in
--- future. Distributors of GLib may modify this function to impose their own
--- (documented) platform-specific log writing policies.
--- 
--- This is suitable for use as a `GLogWriterFunc`, and is the default writer used
--- if no other is set using `g_log_set_writer_func()`.
--- 
--- As with `g_log_default_handler()`, this function drops debug and informational
--- messages unless their log domain (or `all`) is listed in the space-separated
--- `G_MESSAGES_DEBUG` environment variable.
--- 
--- `g_log_writer_default()` uses the mask set by `g_log_set_always_fatal()` to
--- determine which messages are fatal. When using a custom writer func instead it is
--- up to the writer function to determine which log messages are fatal.
---
--- ---
---
---@param log_level GLib.LogLevelFlags # log level, either from `GLogLevelFlags`, or a user-defined level
---@param fields unknown[] # key–value pairs of structured data forming the log message
---@param n_fields integer # number of elements in the `fields` array
---@param user_data? userdata # user data passed to `g_log_set_writer_func()`
---@return GLib.LogWriterOutput # %G_LOG_WRITER_HANDLED on success, %G_LOG_WRITER_UNHANDLED otherwise
function GLib.log_writer_default(log_level, fields, n_fields, user_data) end

--- # function GLib.log_writer_default_set_use_stderr()
---
--- Configure whether the built-in log functions
--- (`g_log_default_handler()` for the old-style API, and both
--- `g_log_writer_default()` and `g_log_writer_standard_streams()` for the
--- structured API) will output all log messages to `stderr`.
--- 
--- By default, log messages of levels %G_LOG_LEVEL_INFO and
--- %G_LOG_LEVEL_DEBUG are sent to `stdout`, and other log messages are
--- sent to `stderr`. This is problematic for applications that intend
--- to reserve `stdout` for structured output such as JSON or XML.
--- 
--- This function sets global state. It is not thread-aware, and should be
--- called at the very start of a program, before creating any other threads
--- or creating objects that could create worker threads of their own.
---
--- ---
---
---@param use_stderr (boolean|nil) # If `true`, use `stderr` for log messages that would normally have appeared on `stdout`
---@return nil
function GLib.log_writer_default_set_use_stderr(use_stderr) end

--- # function GLib.log_writer_default_would_drop()
---
--- Check whether `g_log_writer_default()` and `g_log_default_handler()` would
--- ignore a message with the given domain and level.
--- 
--- As with `g_log_default_handler()`, this function drops debug and informational
--- messages unless their log domain (or `all`) is listed in the space-separated
--- `G_MESSAGES_DEBUG` environment variable.
--- 
--- This can be used when implementing log writers with the same filtering
--- behaviour as the default, but a different destination or output format:
--- 
--- ```c
---   if (g_log_writer_default_would_drop (log_level, log_domain))
---     return G_LOG_WRITER_HANDLED;
--- ```
--- 
--- or to skip an expensive computation if it is only needed for a debugging
--- message, and `G_MESSAGES_DEBUG` is not set:
--- 
--- ```c
---   if (!g_log_writer_default_would_drop (G_LOG_LEVEL_DEBUG, G_LOG_DOMAIN))
---     {
---       gchar *result = expensive_computation (my_object);
--- 
---       g_debug ("my_object result: %s", result);
---       g_free (result);
---     }
--- ```
---
--- ---
---
---@param log_level GLib.LogLevelFlags # log level, either from `GLogLevelFlags`, or a user-defined level
---@param log_domain? string # log domain
---@return (boolean|nil) # `true` if the log message would be dropped by GLib's default log handlers
function GLib.log_writer_default_would_drop(log_level, log_domain) end

--- # function GLib.log_writer_format_fields()
---
--- Format a structured log message as a string suitable for outputting to the
--- terminal (or elsewhere). This will include the values of all fields it knows
--- how to interpret, which includes `MESSAGE` and `GLIB_DOMAIN` (see the
--- documentation for `g_log_structured()`). It does not include values from
--- unknown fields.
--- 
--- The returned string does **not** have a trailing new-line character. It is
--- encoded in the character set of the current locale, which is not necessarily
--- UTF-8.
---
--- ---
---
---@param log_level GLib.LogLevelFlags # log level, either from `GLogLevelFlags`, or a user-defined level
---@param fields unknown[] # key–value pairs of structured data forming the log message
---@param n_fields integer # number of elements in the `fields` array
---@param use_color (boolean|nil) # `true` to use ANSI color escape sequences when formatting the message, `false` to not
---@return string # string containing the formatted log message, in the character set of the current locale
function GLib.log_writer_format_fields(log_level, fields, n_fields, use_color) end

--- # function GLib.log_writer_is_journald()
---
--- Check whether the given `output_fd` file descriptor is a connection to the
--- systemd journal, or something else (like a log file or `stdout` or
--- `stderr`).
--- 
--- Invalid file descriptors are accepted and return `false`, which allows for
--- the following construct without needing any additional error handling:
--- ```c
---   is_journald = g_log_writer_is_journald (fileno (stderr));
--- ```
---
--- ---
---
---@param output_fd integer # output file descriptor to check
---@return (boolean|nil) # `true` if `output_fd` points to the journal, `false` otherwise
function GLib.log_writer_is_journald(output_fd) end

--- # function GLib.log_writer_journald()
---
--- Format a structured log message and send it to the systemd journal as a set
--- of key–value pairs. All fields are sent to the journal, but if a field has
--- length zero (indicating program-specific data) then only its key will be
--- sent.
--- 
--- This is suitable for use as a `GLogWriterFunc`.
--- 
--- If GLib has been compiled without systemd support, this function is still
--- defined, but will always return %G_LOG_WRITER_UNHANDLED.
---
--- ---
---
---@param log_level GLib.LogLevelFlags # log level, either from `GLogLevelFlags`, or a user-defined level
---@param fields unknown[] # key–value pairs of structured data forming the log message
---@param n_fields integer # number of elements in the `fields` array
---@param user_data? userdata # user data passed to `g_log_set_writer_func()`
---@return GLib.LogWriterOutput # %G_LOG_WRITER_HANDLED on success, %G_LOG_WRITER_UNHANDLED otherwise
function GLib.log_writer_journald(log_level, fields, n_fields, user_data) end

--- # function GLib.log_writer_standard_streams()
---
--- Format a structured log message and print it to either `stdout` or `stderr`,
--- depending on its log level. %G_LOG_LEVEL_INFO and %G_LOG_LEVEL_DEBUG messages
--- are sent to `stdout`, or to `stderr` if requested by
--- `g_log_writer_default_set_use_stderr()`;
--- all other log levels are sent to `stderr`. Only fields
--- which are understood by this function are included in the formatted string
--- which is printed.
--- 
--- If the output stream supports ANSI color escape sequences, they will be used
--- in the output.
--- 
--- A trailing new-line character is added to the log message when it is printed.
--- 
--- This is suitable for use as a `GLogWriterFunc`.
---
--- ---
---
---@param log_level GLib.LogLevelFlags # log level, either from `GLogLevelFlags`, or a user-defined level
---@param fields unknown[] # key–value pairs of structured data forming the log message
---@param n_fields integer # number of elements in the `fields` array
---@param user_data? userdata # user data passed to `g_log_set_writer_func()`
---@return GLib.LogWriterOutput # %G_LOG_WRITER_HANDLED on success, %G_LOG_WRITER_UNHANDLED otherwise
function GLib.log_writer_standard_streams(log_level, fields, n_fields, user_data) end

--- # function GLib.log_writer_supports_color()
---
--- Check whether the given `output_fd` file descriptor supports ANSI color
--- escape sequences. If so, they can safely be used when formatting log
--- messages.
---
--- ---
---
---@param output_fd integer # output file descriptor to check
---@return (boolean|nil) # `true` if ANSI color escapes are supported, `false` otherwise
function GLib.log_writer_supports_color(output_fd) end

--- # function GLib.main_context_default()
---
--- Returns the global-default main context. This is the main context
--- used for main loop functions when a main loop is not explicitly
--- specified, and corresponds to the "main" main loop. See also
--- `g_main_context_get_thread_default()`.
---
--- ---
---
---@return GLib.MainContext # the global-default main context.
function GLib.main_context_default() end

--- # function GLib.main_context_get_thread_default()
---
--- Gets the thread-default `GMainContext` for this thread. Asynchronous
--- operations that want to be able to be run in contexts other than
--- the default one should call this method or
--- `g_main_context_ref_thread_default()` to get a `GMainContext` to add
--- their `GSources` to. (Note that even in single-threaded
--- programs applications may sometimes want to temporarily push a
--- non-default context, so it is not safe to assume that this will
--- always return `nil` if you are running in the default thread.)
--- 
--- If you need to hold a reference on the context, use
--- `g_main_context_ref_thread_default()` instead.
---
--- ---
---
---@return GLib.MainContext # the thread-default `GMainContext`, or `nil` if the thread-default context is the global-default main context.
function GLib.main_context_get_thread_default() end

--- # function GLib.main_context_ref_thread_default()
---
--- Gets the thread-default `GMainContext` for this thread, as with
--- `g_main_context_get_thread_default()`, but also adds a reference to
--- it with `g_main_context_ref()`. In addition, unlike
--- `g_main_context_get_thread_default()`, if the thread-default context
--- is the global-default context, this will return that `GMainContext`
--- (with a ref added to it) rather than returning `nil`.
---
--- ---
---
---@return GLib.MainContext # the thread-default `GMainContext`. Unref with `g_main_context_unref()` when you are done with it.
function GLib.main_context_ref_thread_default() end

--- # function GLib.main_current_source()
---
--- Returns the currently firing source for this thread.
---
--- ---
---
---@return GLib.Source # The currently firing source or `nil`.
function GLib.main_current_source() end

--- # function GLib.main_depth()
---
--- Returns the depth of the stack of calls to
--- `g_main_context_dispatch()` on any `GMainContext` in the current thread.
---  That is, when called from the toplevel, it gives 0. When
--- called from within a callback from `g_main_context_iteration()`
--- (or `g_main_loop_run()`, etc.) it returns 1. When called from within
--- a callback to a recursive call to `g_main_context_iteration()`,
--- it returns 2. And so forth.
--- 
--- This function is useful in a situation like the following:
--- Imagine an extremely simple "garbage collected" system.
--- 
--- ```c
--- static GList *free_list;
--- 
--- gpointer
--- allocate_memory (gsize size)
--- {
---   gpointer result = g_malloc (size);
---   free_list = g_list_prepend (free_list, result);
---   return result;
--- }
--- 
--- void
--- free_allocated_memory (void)
--- {
---   GList *l;
---   for (l = free_list; l; l = l->next);
---     g_free (l->data);
---   g_list_free (free_list);
---   free_list = NULL;
---  }
--- 
--- [...]
--- 
--- while (TRUE);
---  {
---    g_main_context_iteration (NULL, TRUE);
---    `free_allocated_memory()`;
---   }
--- ```
--- 
--- This works from an application, however, if you want to do the same
--- thing from a library, it gets more difficult, since you no longer
--- control the main loop. You might think you can simply use an idle
--- function to make the call to `free_allocated_memory()`, but that
--- doesn't work, since the idle function could be called from a
--- recursive callback. This can be fixed by using `g_main_depth()`
--- 
--- ```c
--- gpointer
--- allocate_memory (gsize size)
--- {
---   FreeListBlock *block = g_new (FreeListBlock, 1);
---   block->mem = g_malloc (size);
---   block->depth = g_main_depth ();
---   free_list = g_list_prepend (free_list, block);
---   return block->mem;
--- }
--- 
--- void
--- free_allocated_memory (void)
--- {
---   GList *l;
---   
---   int depth = g_main_depth ();
---   for (l = free_list; l; );
---     {
---       GList *next = l->next;
---       FreeListBlock *block = l->data;
---       if (block->depth > depth)
---         {
---           g_free (block->mem);
---           g_free (block);
---           free_list = g_list_delete_link (free_list, l);
---         }
---               
---       l = next;
---     }
---   }
--- ```
--- 
--- There is a temptation to use `g_main_depth()` to solve
--- problems with reentrancy. For instance, while waiting for data
--- to be received from the network in response to a menu item,
--- the menu item might be selected again. It might seem that
--- one could make the menu item's callback return immediately
--- and do nothing if `g_main_depth()` returns a value greater than 1.
--- However, this should be avoided since the user then sees selecting
--- the menu item do nothing. Furthermore, you'll find yourself adding
--- these checks all over your code, since there are doubtless many,
--- many things that the user could do. Instead, you can use the
--- following techniques:
--- 
--- 1. Use `gtk_widget_set_sensitive()` or modal dialogs to prevent
---    the user from interacting with elements while the main
---    loop is recursing.
--- 
--- 2. Avoid main loop recursion in situations where you can't handle
---    arbitrary  callbacks. Instead, structure your code so that you
---    simply return to the main loop and then get called again when
---    there is more work to do.
---
--- ---
---
---@return integer # The main loop recursion level in the current thread
function GLib.main_depth() end

--- # function GLib.malloc()
---
--- Allocates `n_bytes` bytes of memory.
--- If `n_bytes` is 0 it returns `nil`.
--- 
--- If the allocation fails (because the system is out of memory),
--- the program is terminated.
---
--- ---
---
---@param n_bytes integer # the number of bytes to allocate
---@return userdata # a pointer to the allocated memory
function GLib.malloc(n_bytes) end

--- # function GLib.malloc0()
---
--- Allocates `n_bytes` bytes of memory, initialized to 0's.
--- If `n_bytes` is 0 it returns `nil`.
--- 
--- If the allocation fails (because the system is out of memory),
--- the program is terminated.
---
--- ---
---
---@param n_bytes integer # the number of bytes to allocate
---@return userdata # a pointer to the allocated memory
function GLib.malloc0(n_bytes) end

--- # function GLib.malloc0_n()
---
--- This function is similar to g_malloc0(), allocating (`n_blocks` * `n_block_bytes`) bytes,
--- but care is taken to detect possible overflow during multiplication.
--- 
--- If the allocation fails (because the system is out of memory),
--- the program is terminated.
---
--- ---
---
---@param n_blocks integer # the number of blocks to allocate
---@param n_block_bytes integer # the size of each block in bytes
---@return userdata # a pointer to the allocated memory
function GLib.malloc0_n(n_blocks, n_block_bytes) end

--- # function GLib.malloc_n()
---
--- This function is similar to `g_malloc()`, allocating (`n_blocks` * `n_block_bytes`) bytes,
--- but care is taken to detect possible overflow during multiplication.
--- 
--- If the allocation fails (because the system is out of memory),
--- the program is terminated.
---
--- ---
---
---@param n_blocks integer # the number of blocks to allocate
---@param n_block_bytes integer # the size of each block in bytes
---@return userdata # a pointer to the allocated memory
function GLib.malloc_n(n_blocks, n_block_bytes) end

--- # function GLib.markup_error_quark()
---
---@return GLib.Quark
function GLib.markup_error_quark() end

--- # function GLib.markup_escape_text()
---
--- Escapes text so that the markup parser will parse it verbatim.
--- Less than, greater than, ampersand, etc. are replaced with the
--- corresponding entities. This function would typically be used
--- when writing out a file to be parsed with the markup parser.
--- 
--- Note that this function doesn't protect whitespace and line endings
--- from being processed according to the XML rules for normalization
--- of line endings and attribute values.
--- 
--- Note also that this function will produce character references in
--- the range of &`x1`; ... &`x1f`; for all control sequences
--- except for tabstop, newline and carriage return.  The character
--- references in this range are not valid XML 1.0, but they are
--- valid XML 1.1 and will be accepted by the GMarkup parser.
---
--- ---
---
---@param text string # some valid UTF-8 text
---@param length integer # length of `text` in bytes, or -1 if the text is nul-terminated
---@return string # a newly allocated string with the escaped text
function GLib.markup_escape_text(text, length) end

--- # function GLib.mem_is_system_malloc()
---
--- Checks whether the allocator used by `g_malloc()` is the system's
--- malloc implementation. If it returns `true` memory allocated with
--- `malloc()` can be used interchangeably with memory allocated using `g_malloc()`.
--- This function is useful for avoiding an extra copy of allocated memory returned
--- by a non-GLib-based API.
---
--- ---
---
---@return (boolean|nil) # if `true`, `malloc()` and `g_malloc()` can be mixed.
function GLib.mem_is_system_malloc() end

--- # function GLib.mem_profile()
---
--- GLib used to support some tools for memory profiling, but this
--- no longer works. There are many other useful tools for memory
--- profiling these days which can be used instead.
---
--- ---
---
---@return nil
function GLib.mem_profile() end

--- # function GLib.mem_set_vtable()
---
--- This function used to let you override the memory allocation function.
--- However, its use was incompatible with the use of global constructors
--- in GLib and GIO, because those use the GLib allocators before main is
--- reached. Therefore this function is now deprecated and is just a stub.
---
--- ---
---
---@param vtable GLib.MemVTable # table of memory allocation routines.
---@return nil
function GLib.mem_set_vtable(vtable) end

--- # function GLib.memdup()
---
--- Allocates `byte_size` bytes of memory, and copies `byte_size` bytes into it
--- from `mem`. If `mem` is `nil` it returns `nil`.
---
--- ---
---
---@param mem? userdata # the memory to copy.
---@param byte_size integer # the number of bytes to copy.
---@return userdata # a pointer to the newly-allocated copy of the memory, or `nil` if `mem` is `nil`.
function GLib.memdup(mem, byte_size) end

--- # function GLib.memdup2()
---
--- Allocates `byte_size` bytes of memory, and copies `byte_size` bytes into it
--- from `mem`. If `mem` is `nil` it returns `nil`.
--- 
--- This replaces `g_memdup()`, which was prone to integer overflows when
--- converting the argument from a `gsize` to a `guint`.
---
--- ---
---
---@param mem? userdata # the memory to copy.
---@param byte_size integer # the number of bytes to copy.
---@return userdata # a pointer to the newly-allocated copy of the memory, or `nil` if `mem` is `nil`.
function GLib.memdup2(mem, byte_size) end

--- # function GLib.mkdir_with_parents()
---
--- Create a directory if it doesn't already exist. Create intermediate
--- parent directories as needed, too.
---
--- ---
---
---@param pathname string # a pathname in the GLib file name encoding
---@param mode integer # permissions to use for newly created directories
---@return integer # 0 if the directory already exists, or was successfully created. Returns -1 if an error occurred, with errno set.
function GLib.mkdir_with_parents(pathname, mode) end

--- # function GLib.nullify_pointer()
---
--- Set the pointer at the specified location to `nil`.
---
--- ---
---
---@param nullify_location userdata # the memory address of the pointer.
---@return nil
function GLib.nullify_pointer(nullify_location) end

--- # function GLib.number_parser_error_quark()
---
---@return GLib.Quark
function GLib.number_parser_error_quark() end

--- # function GLib.on_error_query()
---
--- Prompts the user with
--- `[E]xit, [H]alt, show [S]tack trace or [P]roceed`.
--- This function is intended to be used for debugging use only.
--- The following example shows how it can be used together with
--- the `g_log()` functions.
--- 
--- ```c
--- `include` <glib.h>
--- 
--- static void
--- log_handler (const gchar   *log_domain,
---              GLogLevelFlags log_level,
---              const gchar   *message,
---              gpointer       user_data)
--- {
---   g_log_default_handler (log_domain, log_level, message, user_data);
--- 
---   g_on_error_query (MY_PROGRAM_NAME);
--- }
--- 
--- int
--- main (int argc, char *argv[])
--- {
---   g_log_set_handler (MY_LOG_DOMAIN,
---                      G_LOG_LEVEL_WARNING |
---                      G_LOG_LEVEL_ERROR |
---                      G_LOG_LEVEL_CRITICAL,
---                      log_handler,
---                      NULL);
---   ...
--- ```
--- 
--- If "[E]xit" is selected, the application terminates with a call
--- to _exit(0).
--- 
--- If "[S]tack" trace is selected, `g_on_error_stack_trace()` is called.
--- This invokes gdb, which attaches to the current process and shows
--- a stack trace. The prompt is then shown again.
--- 
--- If "[P]roceed" is selected, the function returns.
--- 
--- This function may cause different actions on non-UNIX platforms.
--- 
--- On Windows consider using the `G_DEBUGGER` environment
--- variable (see [Running GLib Applications](glib-running.html)) and
--- calling `g_on_error_stack_trace()` instead.
---
--- ---
---
---@param prg_name string # the program name, needed by gdb for the "[S]tack trace" option. If `prg_name` is `nil`, `g_get_prgname()` is called to get the program name (which will work correctly if `gdk_init()` or `gtk_init()` has been called)
---@return nil
function GLib.on_error_query(prg_name) end

--- # function GLib.on_error_stack_trace()
---
--- Invokes gdb, which attaches to the current process and shows a
--- stack trace. Called by `g_on_error_query()` when the "[S]tack trace"
--- option is selected. You can get the current process's program name
--- with `g_get_prgname()`, assuming that you have called `gtk_init()` or
--- `gdk_init()`.
--- 
--- This function may cause different actions on non-UNIX platforms.
--- 
--- When running on Windows, this function is *not* called by
--- `g_on_error_query()`. If called directly, it will raise an
--- exception, which will crash the program. If the `G_DEBUGGER` environment
--- variable is set, a debugger will be invoked to attach and
--- handle that exception (see [Running GLib Applications](glib-running.html)).
---
--- ---
---
---@param prg_name string # the program name, needed by gdb for the "[S]tack trace" option
---@return nil
function GLib.on_error_stack_trace(prg_name) end

--- # function GLib.once_init_enter()
---
--- Function to be called when starting a critical initialization
--- section. The argument `location` must point to a static
--- 0-initialized variable that will be set to a value other than 0 at
--- the end of the initialization section. In combination with
--- `g_once_init_leave()` and the unique address `value_location`, it can
--- be ensured that an initialization section will be executed only once
--- during a program's life time, and that concurrent threads are
--- blocked until initialization completed. To be used in constructs
--- like this:
--- 
--- ```c
---   static gsize initialization_value = 0;
--- 
---   if (g_once_init_enter (&initialization_value))
---     {
---       gsize setup_value = 42; // initialization code here
--- 
---       g_once_init_leave (&initialization_value, setup_value);
---     }
--- 
---   // use initialization_value here
--- ```
--- 
--- While `location` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param location userdata # location of a static initializable variable containing 0
---@return (boolean|nil) # `true` if the initialization section should be entered, `false` and blocks otherwise
function GLib.once_init_enter(location) end

--- # function GLib.once_init_leave()
---
--- Counterpart to `g_once_init_enter()`. Expects a location of a static
--- 0-initialized initialization variable, and an initialization value
--- other than 0. Sets the variable to the initialization value, and
--- releases concurrent threads blocking in `g_once_init_enter()` on this
--- initialization variable.
--- 
--- While `location` has a `volatile` qualifier, this is a historical artifact and
--- the pointer passed to it should not be `volatile`.
---
--- ---
---
---@param location userdata # location of a static initializable variable containing 0
---@param result integer # new non-0 value for *`value_location`
---@return nil
function GLib.once_init_leave(location, result) end

--- # function GLib.option_error_quark()
---
---@return GLib.Quark
function GLib.option_error_quark() end

--- # function GLib.parse_debug_string()
---
--- Parses a string containing debugging options
--- into a %guint containing bit flags. This is used
--- within GDK and GTK+ to parse the debug options passed on the
--- command line or through environment variables.
--- 
--- If `string` is equal to "all", all flags are set. Any flags
--- specified along with "all" in `string` are inverted; thus,
--- "all,foo,bar" or "foo,bar,all" sets all flags except those
--- corresponding to "foo" and "bar".
--- 
--- If `string` is equal to "help", all the available keys in `keys`
--- are printed out to standard error.
---
--- ---
---
---@param string? string # a list of debug options separated by colons, spaces, or commas, or `nil`.
---@param keys unknown[] # pointer to an array of `GDebugKey` which associate strings with bit flags.
---@param nkeys integer # the number of `GDebugKeys` in the array.
---@return integer # the combined set of bit flags.
function GLib.parse_debug_string(string, keys, nkeys) end

--- # function GLib.path_buf_equal()
---
--- Compares two path buffers for equality and returns `TRUE`
--- if they are equal.
--- 
--- The path inside the paths buffers are not going to be normalized,
--- so `X/Y/Z/A/..`, `X/./Y/Z` and `X/Y/Z` are not going to be considered
--- equal.
--- 
--- This function can be passed to `g_hash_table_new()` as the
--- `key_equal_func` parameter.
---
--- ---
---
---@param v1 userdata # a path buffer to compare
---@param v2 userdata # a path buffer to compare
---@return (boolean|nil) # `TRUE` if the two path buffers are equal, and `FALSE` otherwise
function GLib.path_buf_equal(v1, v2) end

--- # function GLib.path_get_basename()
---
--- Gets the last component of the filename.
--- 
--- If `file_name` ends with a directory separator it gets the component
--- before the last slash. If `file_name` consists only of directory
--- separators (and on Windows, possibly a drive letter), a single
--- separator is returned. If `file_name` is empty, it gets ".".
---
--- ---
---
---@param file_name string # the name of the file
---@return string # a newly allocated string containing the last component of the filename
function GLib.path_get_basename(file_name) end

--- # function GLib.path_get_dirname()
---
--- Gets the directory components of a file name. For example, the directory
--- component of `/usr/bin/test` is `/usr/bin`. The directory component of `/`
--- is `/`.
--- 
--- If the file name has no directory components "." is returned.
--- The returned string should be freed when no longer needed.
---
--- ---
---
---@param file_name string # the name of the file
---@return string # the directory components of the file
function GLib.path_get_dirname(file_name) end

--- # function GLib.path_is_absolute()
---
--- Returns `true` if the given `file_name` is an absolute file name.
--- Note that this is a somewhat vague concept on Windows.
--- 
--- On POSIX systems, an absolute file name is well-defined. It always
--- starts from the single root directory. For example "/usr/local".
--- 
--- On Windows, the concepts of current drive and drive-specific
--- current directory introduce vagueness. This function interprets as
--- an absolute file name one that either begins with a directory
--- separator such as "\Users\tml" or begins with the root on a drive,
--- for example "C:\Windows". The first case also includes UNC paths
--- such as "\\\\myserver\docs\foo". In all cases, either slashes or
--- backslashes are accepted.
--- 
--- Note that a file name relative to the current drive root does not
--- truly specify a file uniquely over time and across processes, as
--- the current drive is a per-process value and can be changed.
--- 
--- File names relative the current directory on some specific drive,
--- such as "D:foo/bar", are not interpreted as absolute by this
--- function, but they obviously are not relative to the normal current
--- directory as returned by `getcwd()` or `g_get_current_dir()`
--- either. Such paths should be avoided, or need to be handled using
--- Windows-specific code.
---
--- ---
---
---@param file_name string # a file name
---@return (boolean|nil) # `true` if `file_name` is absolute
function GLib.path_is_absolute(file_name) end

--- # function GLib.path_skip_root()
---
--- Returns a pointer into `file_name` after the root component,
--- i.e. after the "/" in UNIX or "C:\" under Windows. If `file_name`
--- is not an absolute path it returns `nil`.
---
--- ---
---
---@param file_name string # a file name
---@return string # a pointer into `file_name` after the root component
function GLib.path_skip_root(file_name) end

--- # function GLib.pattern_match_simple()
---
--- Matches a string against a pattern given as a string. If this
--- function is to be called in a loop, it's more efficient to compile
--- the pattern once with `g_pattern_spec_new()` and call
--- `g_pattern_match_string()` repeatedly.
---
--- ---
---
---@param pattern string # the UTF-8 encoded pattern
---@param string string # the UTF-8 encoded string to match
---@return (boolean|nil) # `true` if `string` matches `pspec`
function GLib.pattern_match_simple(pattern, string) end

--- # function GLib.pointer_bit_lock()
---
--- This is equivalent to g_bit_lock, but working on pointers (or other
--- pointer-sized values).
--- 
--- For portability reasons, you may only lock on the bottom 32 bits of
--- the pointer.
--- 
--- While `address` has a `volatile` qualifier, this is a historical
--- artifact and the argument passed to it should not be `volatile`.
---
--- ---
---
---@param address userdata # a pointer to a `gpointer`-sized value
---@param lock_bit integer # a bit value between 0 and 31
---@return nil
function GLib.pointer_bit_lock(address, lock_bit) end

--- # function GLib.pointer_bit_trylock()
---
--- This is equivalent to `g_bit_trylock()`, but working on pointers (or
--- other pointer-sized values).
--- 
--- For portability reasons, you may only lock on the bottom 32 bits of
--- the pointer.
--- 
--- While `address` has a `volatile` qualifier, this is a historical
--- artifact and the argument passed to it should not be `volatile`.
---
--- ---
---
---@param address userdata # a pointer to a `gpointer`-sized value
---@param lock_bit integer # a bit value between 0 and 31
---@return (boolean|nil) # `true` if the lock was acquired
function GLib.pointer_bit_trylock(address, lock_bit) end

--- # function GLib.pointer_bit_unlock()
---
--- This is equivalent to g_bit_unlock, but working on pointers (or other
--- pointer-sized values).
--- 
--- For portability reasons, you may only lock on the bottom 32 bits of
--- the pointer.
--- 
--- While `address` has a `volatile` qualifier, this is a historical
--- artifact and the argument passed to it should not be `volatile`.
---
--- ---
---
---@param address userdata # a pointer to a `gpointer`-sized value
---@param lock_bit integer # a bit value between 0 and 31
---@return nil
function GLib.pointer_bit_unlock(address, lock_bit) end

--- # function GLib.poll()
---
--- Polls `fds`, as with the `poll()` system call, but portably. (On
--- systems that don't have `poll()`, it is emulated using `select()`.)
--- This is used internally by `GMainContext`, but it can be called
--- directly if you need to block until a file descriptor is ready, but
--- don't want to run the full main loop.
--- 
--- Each element of `fds` is a `GPollFD` describing a single file
--- descriptor to poll. The `fd` field indicates the file descriptor,
--- and the `events` field indicates the events to poll for. On return,
--- the `revents` fields will be filled with the events that actually
--- occurred.
--- 
--- On POSIX systems, the file descriptors in `fds` can be any sort of
--- file descriptor, but the situation is much more complicated on
--- Windows. If you need to use `g_poll()` in code that has to run on
--- Windows, the easiest solution is to construct all of your
--- `GPollFDs` with g_io_channel_win32`_make_pollfd()`.
---
--- ---
---
---@param fds GLib.PollFD # file descriptors to poll
---@param nfds integer # the number of file descriptors in `fds`
---@param timeout integer # amount of time to wait, in milliseconds, or -1 to wait forever
---@return integer # the number of entries in `fds` whose `revents` fields were filled in, or 0 if the operation timed out, or -1 on error or if the call was interrupted.
function GLib.poll(fds, nfds, timeout) end

--- # function GLib.prefix_error_literal()
---
--- Prefixes `prefix` to an existing error message. If `err` or *`err` is
--- `nil` (i.e.: no error variable) then do nothing.
---
--- ---
---
---@param err? GLib.Error # a return location for a `GError`, or `nil`
---@param prefix string # string to prefix `err` with
---@return nil
function GLib.prefix_error_literal(err, prefix) end

--- # function GLib.propagate_error()
---
--- If `dest` is `nil`, free `src`; otherwise, moves `src` into *`dest`.
--- The error variable `dest` points to must be `nil`.
--- 
--- `src` must be non-`nil`.
--- 
--- Note that `src` is no longer valid after this call. If you want
--- to keep using the same GError*, you need to set it to `nil`
--- after calling this function on it.
---
--- ---
---
---@param dest? GLib.Error # error return location
---@param src GLib.Error # error to move into the return location
---@return nil
function GLib.propagate_error(dest, src) end

--- # function GLib.quark_from_static_string()
---
--- Gets the `GQuark` identifying the given (static) string. If the
--- string does not currently have an associated `GQuark`, a new `GQuark`
--- is created, linked to the given string.
--- 
--- Note that this function is identical to `g_quark_from_string()` except
--- that if a new `GQuark` is created the string itself is used rather
--- than a copy. This saves memory, but can only be used if the string
--- will continue to exist until the program terminates. It can be used
--- with statically allocated strings in the main program, but not with
--- statically allocated memory in dynamically loaded modules, if you
--- expect to ever unload the module again (e.g. do not use this
--- function in GTK+ theme engines).
--- 
--- This function must not be used before library constructors have finished
--- running. In particular, this means it cannot be used to initialize global
--- variables in C++.
---
--- ---
---
---@param string? string # a string
---@return GLib.Quark # the `GQuark` identifying the string, or 0 if `string` is `nil`
function GLib.quark_from_static_string(string) end

--- # function GLib.quark_from_string()
---
--- Gets the `GQuark` identifying the given string. If the string does
--- not currently have an associated `GQuark`, a new `GQuark` is created,
--- using a copy of the string.
--- 
--- This function must not be used before library constructors have finished
--- running. In particular, this means it cannot be used to initialize global
--- variables in C++.
---
--- ---
---
---@param string? string # a string
---@return GLib.Quark # the `GQuark` identifying the string, or 0 if `string` is `nil`
function GLib.quark_from_string(string) end

--- # function GLib.quark_to_string()
---
--- Gets the string associated with the given `GQuark`.
---
--- ---
---
---@param quark GLib.Quark # a `GQuark`.
---@return string # the string associated with the `GQuark`
function GLib.quark_to_string(quark) end

--- # function GLib.quark_try_string()
---
--- Gets the `GQuark` associated with the given string, or 0 if string is
--- `nil` or it has no associated `GQuark`.
--- 
--- If you want the GQuark to be created if it doesn't already exist,
--- use `g_quark_from_string()` or `g_quark_from_static_string()`.
--- 
--- This function must not be used before library constructors have finished
--- running.
---
--- ---
---
---@param string? string # a string
---@return GLib.Quark # the `GQuark` associated with the string, or 0 if `string` is `nil` or there is no `GQuark` associated with it
function GLib.quark_try_string(string) end

--- # function GLib.random_double()
---
--- Returns a random `gdouble` equally distributed over the range [0..1).
---
--- ---
---
---@return number # a random number
function GLib.random_double() end

--- # function GLib.random_double_range()
---
--- Returns a random `gdouble` equally distributed over the range
--- [`begin`..`end`).
---
--- ---
---
---@param begin number # lower closed bound of the interval
---@param end__ number # upper open bound of the interval
---@return number # a random number
function GLib.random_double_range(begin, end__) end

--- # function GLib.random_int()
---
--- Return a random `guint32` equally distributed over the range
--- [0..2^32-1].
---
--- ---
---
---@return integer # a random number
function GLib.random_int() end

--- # function GLib.random_int_range()
---
--- Returns a random `gint32` equally distributed over the range
--- [`begin`..`end`-1].
---
--- ---
---
---@param begin integer # lower closed bound of the interval
---@param end__ integer # upper open bound of the interval
---@return integer # a random number
function GLib.random_int_range(begin, end__) end

--- # function GLib.random_set_seed()
---
--- Sets the seed for the global random number generator, which is used
--- by the g_random_* functions, to `seed`.
---
--- ---
---
---@param seed integer # a value to reinitialize the global random number generator
---@return nil
function GLib.random_set_seed(seed) end

--- # function GLib.rc_box_acquire()
---
--- Acquires a reference on the data pointed by `mem_block`.
---
--- ---
---
---@param mem_block userdata # a pointer to reference counted data
---@return userdata # a pointer to the data, with its reference count increased
function GLib.rc_box_acquire(mem_block) end

--- # function GLib.rc_box_alloc()
---
--- Allocates `block_size` bytes of memory, and adds reference
--- counting semantics to it.
--- 
--- The data will be freed when its reference count drops to
--- zero.
--- 
--- The allocated data is guaranteed to be suitably aligned for any
--- built-in type.
---
--- ---
---
---@param block_size integer # the size of the allocation, must be greater than 0
---@return userdata # a pointer to the allocated memory
function GLib.rc_box_alloc(block_size) end

--- # function GLib.rc_box_alloc0()
---
--- Allocates `block_size` bytes of memory, and adds reference
--- counting semantics to it.
--- 
--- The contents of the returned data is set to zero.
--- 
--- The data will be freed when its reference count drops to
--- zero.
--- 
--- The allocated data is guaranteed to be suitably aligned for any
--- built-in type.
---
--- ---
---
---@param block_size integer # the size of the allocation, must be greater than 0
---@return userdata # a pointer to the allocated memory
function GLib.rc_box_alloc0(block_size) end

--- # function GLib.rc_box_dup()
---
--- Allocates a new block of data with reference counting
--- semantics, and copies `block_size` bytes of `mem_block`
--- into it.
---
--- ---
---
---@param block_size integer # the number of bytes to copy, must be greater than 0
---@param mem_block userdata # the memory to copy
---@return userdata # a pointer to the allocated memory
function GLib.rc_box_dup(block_size, mem_block) end

--- # function GLib.rc_box_get_size()
---
--- Retrieves the size of the reference counted data pointed by `mem_block`.
---
--- ---
---
---@param mem_block userdata # a pointer to reference counted data
---@return integer # the size of the data, in bytes
function GLib.rc_box_get_size(mem_block) end

--- # function GLib.rc_box_release()
---
--- Releases a reference on the data pointed by `mem_block`.
--- 
--- If the reference was the last one, it will free the
--- resources allocated for `mem_block`.
---
--- ---
---
---@param mem_block userdata # a pointer to reference counted data
---@return nil
function GLib.rc_box_release(mem_block) end

--- # function GLib.rc_box_release_full()
---
--- Releases a reference on the data pointed by `mem_block`.
--- 
--- If the reference was the last one, it will call `clear_func`
--- to clear the contents of `mem_block`, and then will free the
--- resources allocated for `mem_block`.
---
--- ---
---
---@param mem_block userdata # a pointer to reference counted data
---@param clear_func GLib.DestroyNotify # a function to call when clearing the data
---@return nil
function GLib.rc_box_release_full(mem_block, clear_func) end

--- # function GLib.realloc()
---
--- Reallocates the memory pointed to by `mem`, so that it now has space for
--- `n_bytes` bytes of memory. It returns the new address of the memory, which may
--- have been moved. `mem` may be `nil`, in which case it's considered to
--- have zero-length. `n_bytes` may be 0, in which case `nil` will be returned
--- and `mem` will be freed unless it is `nil`.
--- 
--- If the allocation fails (because the system is out of memory),
--- the program is terminated.
---
--- ---
---
---@param mem? userdata # the memory to reallocate
---@param n_bytes integer # new size of the memory in bytes
---@return userdata # the new address of the allocated memory
function GLib.realloc(mem, n_bytes) end

--- # function GLib.realloc_n()
---
--- This function is similar to `g_realloc()`, allocating (`n_blocks` * `n_block_bytes`) bytes,
--- but care is taken to detect possible overflow during multiplication.
--- 
--- If the allocation fails (because the system is out of memory),
--- the program is terminated.
---
--- ---
---
---@param mem? userdata # the memory to reallocate
---@param n_blocks integer # the number of blocks to allocate
---@param n_block_bytes integer # the size of each block in bytes
---@return userdata # the new address of the allocated memory
function GLib.realloc_n(mem, n_blocks, n_block_bytes) end

--- # function GLib.ref_count_compare()
---
--- Compares the current value of `rc` with `val`.
---
--- ---
---
---@param rc integer # the address of a reference count variable
---@param val integer # the value to compare
---@return (boolean|nil) # `true` if the reference count is the same as the given value
function GLib.ref_count_compare(rc, val) end

--- # function GLib.ref_count_dec()
---
--- Decreases the reference count.
--- 
--- If `true` is returned, the reference count reached 0. After this point, `rc`
--- is an undefined state and must be reinitialized with
--- `g_ref_count_init()` to be used again.
---
--- ---
---
---@param rc integer # the address of a reference count variable
---@return (boolean|nil) # `true` if the reference count reached 0, and `false` otherwise
function GLib.ref_count_dec(rc) end

--- # function GLib.ref_count_inc()
---
--- Increases the reference count.
---
--- ---
---
---@param rc integer # the address of a reference count variable
---@return nil
function GLib.ref_count_inc(rc) end

--- # function GLib.ref_count_init()
---
--- Initializes a reference count variable to 1.
---
--- ---
---
---@param rc integer # the address of a reference count variable
---@return nil
function GLib.ref_count_init(rc) end

--- # function GLib.ref_string_acquire()
---
--- Acquires a reference on a string.
---
--- ---
---
---@param str string # a reference counted string
---@return string # the given string, with its reference count increased
function GLib.ref_string_acquire(str) end

--- # function GLib.ref_string_length()
---
--- Retrieves the length of `str`.
---
--- ---
---
---@param str string # a reference counted string
---@return integer # the length of the given string, in bytes
function GLib.ref_string_length(str) end

--- # function GLib.ref_string_new()
---
--- Creates a new reference counted string and copies the contents of `str`
--- into it.
---
--- ---
---
---@param str string # a NUL-terminated string
---@return string # the newly created reference counted string
function GLib.ref_string_new(str) end

--- # function GLib.ref_string_new_intern()
---
--- Creates a new reference counted string and copies the content of `str`
--- into it.
--- 
--- If you call this function multiple times with the same `str`, or with
--- the same contents of `str`, it will return a new reference, instead of
--- creating a new string.
---
--- ---
---
---@param str string # a NUL-terminated string
---@return string # the newly created reference counted string, or a new reference to an existing string
function GLib.ref_string_new_intern(str) end

--- # function GLib.ref_string_new_len()
---
--- Creates a new reference counted string and copies the contents of `str`
--- into it, up to `len` bytes.
--- 
--- Since this function does not stop at nul bytes, it is the caller's
--- responsibility to ensure that `str` has at least `len` addressable bytes.
---
--- ---
---
---@param str string # a string
---@param len integer # length of `str` to use, or -1 if `str` is nul-terminated
---@return string # the newly created reference counted string
function GLib.ref_string_new_len(str, len) end

--- # function GLib.ref_string_release()
---
--- Releases a reference on a string; if it was the last reference, the
--- resources allocated by the string are freed as well.
---
--- ---
---
---@param str string # a reference counted string
---@return nil
function GLib.ref_string_release(str) end

--- # function GLib.regex_check_replacement()
---
--- Checks whether `replacement` is a valid replacement string
--- (see `g_regex_replace()`), i.e. that all escape sequences in
--- it are valid.
--- 
--- If `has_references` is not `nil` then `replacement` is checked
--- for pattern references. For instance, replacement text 'foo\n'
--- does not contain references and may be evaluated without information
--- about actual match, but '\0\1' (whole match followed by first
--- subpattern) requires valid `GMatchInfo` object.
---
--- ---
---
---@param replacement string # the replacement string
---@param has_references? (boolean|nil) # location to store information about references in `replacement` or `nil`
---@return (boolean|nil) # whether `replacement` is a valid replacement string
function GLib.regex_check_replacement(replacement, has_references) end

--- # function GLib.regex_error_quark()
---
---@return GLib.Quark
function GLib.regex_error_quark() end

--- # function GLib.regex_escape_nul()
---
--- Escapes the nul characters in `string` to "\x00".  It can be used
--- to compile a regex with embedded nul characters.
--- 
--- For completeness, `length` can be -1 for a nul-terminated string.
--- In this case the output string will be of course equal to `string`.
---
--- ---
---
---@param string string # the string to escape
---@param length integer # the length of `string`
---@return string # a newly-allocated escaped string
function GLib.regex_escape_nul(string, length) end

--- # function GLib.regex_escape_string()
---
--- Escapes the special characters used for regular expressions
--- in `string`, for instance "a.b*c" becomes "a\.b\*c". This
--- function is useful to dynamically generate regular expressions.
--- 
--- `string` can contain nul characters that are replaced with "\0",
--- in this case remember to specify the correct length of `string`
--- in `length`.
---
--- ---
---
---@param string string # the string to escape
---@param length integer # the length of `string`, in bytes, or -1 if `string` is nul-terminated
---@return string # a newly-allocated escaped string
function GLib.regex_escape_string(string, length) end

--- # function GLib.regex_match_simple()
---
--- Scans for a match in `string` for `pattern`.
--- 
--- This function is equivalent to `g_regex_match()` but it does not
--- require to compile the pattern with `g_regex_new()`, avoiding some
--- lines of code when you need just to do a match without extracting
--- substrings, capture counts, and so on.
--- 
--- If this function is to be called on the same `pattern` more than
--- once, it's more efficient to compile the pattern once with
--- `g_regex_new()` and then use `g_regex_match()`.
---
--- ---
---
---@param pattern string # the regular expression
---@param string string # the string to scan for matches
---@param compile_options GLib.RegexCompileFlags # compile options for the regular expression, or 0
---@param match_options GLib.RegexMatchFlags # match options, or 0
---@return (boolean|nil) # `true` if the string matched, `false` otherwise
function GLib.regex_match_simple(pattern, string, compile_options, match_options) end

--- # function GLib.regex_split_simple()
---
--- Breaks the string on the pattern, and returns an array of
--- the tokens. If the pattern contains capturing parentheses,
--- then the text for each of the substrings will also be returned.
--- If the pattern does not match anywhere in the string, then the
--- whole string is returned as the first token.
--- 
--- This function is equivalent to `g_regex_split()` but it does
--- not require to compile the pattern with `g_regex_new()`, avoiding
--- some lines of code when you need just to do a split without
--- extracting substrings, capture counts, and so on.
--- 
--- If this function is to be called on the same `pattern` more than
--- once, it's more efficient to compile the pattern once with
--- `g_regex_new()` and then use `g_regex_split()`.
--- 
--- As a special case, the result of splitting the empty string ""
--- is an empty vector, not a vector containing a single string.
--- The reason for this special case is that being able to represent
--- an empty vector is typically more useful than consistent handling
--- of empty elements. If you do need to represent empty elements,
--- you'll need to check for the empty string before calling this
--- function.
--- 
--- A pattern that can match empty strings splits `string` into
--- separate characters wherever it matches the empty string between
--- characters. For example splitting "ab c" using as a separator
--- "\s*", you will get "a", "b" and "c".
---
--- ---
---
---@param pattern string # the regular expression
---@param string string # the string to scan for matches
---@param compile_options GLib.RegexCompileFlags # compile options for the regular expression, or 0
---@param match_options GLib.RegexMatchFlags # match options, or 0
---@return unknown[] # a `nil`-terminated array of strings. Free it using `g_strfreev()`
function GLib.regex_split_simple(pattern, string, compile_options, match_options) end

--- # function GLib.reload_user_special_dirs_cache()
---
--- Resets the cache used for `g_get_user_special_dir()`, so
--- that the latest on-disk version is used. Call this only
--- if you just changed the data on disk yourself.
--- 
--- Due to thread safety issues this may cause leaking of strings
--- that were previously returned from `g_get_user_special_dir()`
--- that can't be freed. We ensure to only leak the data for
--- the directories that actually changed value though.
---
--- ---
---
---@return nil
function GLib.reload_user_special_dirs_cache() end

--- # function GLib.rmdir()
---
--- A wrapper for the POSIX `rmdir()` function. The `rmdir()` function
--- deletes a directory from the filesystem.
--- 
--- See your C library manual for more details about how `rmdir()` works
--- on your system.
---
--- ---
---
---@param filename string # a pathname in the GLib file name encoding (UTF-8 on Windows)
---@return integer # 0 if the directory was successfully removed, -1 if an error occurred
function GLib.rmdir(filename) end

--- # function GLib.sequence_get()
---
--- Returns the data that `iter` points to.
---
--- ---
---
---@param iter GLib.SequenceIter # a `GSequenceIter`
---@return userdata # the data that `iter` points to
function GLib.sequence_get(iter) end

--- # function GLib.sequence_insert_before()
---
--- Inserts a new item just before the item pointed to by `iter`.
---
--- ---
---
---@param iter GLib.SequenceIter # a `GSequenceIter`
---@param data? userdata # the data for the new item
---@return GLib.SequenceIter # an iterator pointing to the new item
function GLib.sequence_insert_before(iter, data) end

--- # function GLib.sequence_move()
---
--- Moves the item pointed to by `src` to the position indicated by `dest`.
--- After calling this function `dest` will point to the position immediately
--- after `src`. It is allowed for `src` and `dest` to point into different
--- sequences.
---
--- ---
---
---@param src GLib.SequenceIter # a `GSequenceIter` pointing to the item to move
---@param dest GLib.SequenceIter # a `GSequenceIter` pointing to the position to which the item is moved
---@return nil
function GLib.sequence_move(src, dest) end

--- # function GLib.sequence_move_range()
---
--- Inserts the (`begin`, `end`) range at the destination pointed to by `dest`.
--- The `begin` and `end` iters must point into the same sequence. It is
--- allowed for `dest` to point to a different sequence than the one pointed
--- into by `begin` and `end`.
--- 
--- If `dest` is `nil`, the range indicated by `begin` and `end` is
--- removed from the sequence. If `dest` points to a place within
--- the (`begin`, `end`) range, the range does not move.
---
--- ---
---
---@param dest GLib.SequenceIter # a `GSequenceIter`
---@param begin GLib.SequenceIter # a `GSequenceIter`
---@param end__ GLib.SequenceIter # a `GSequenceIter`
---@return nil
function GLib.sequence_move_range(dest, begin, end__) end

--- # function GLib.sequence_range_get_midpoint()
---
--- Finds an iterator somewhere in the range (`begin`, `end`). This
--- iterator will be close to the middle of the range, but is not
--- guaranteed to be exactly in the middle.
--- 
--- The `begin` and `end` iterators must both point to the same sequence
--- and `begin` must come before or be equal to `end` in the sequence.
---
--- ---
---
---@param begin GLib.SequenceIter # a `GSequenceIter`
---@param end__ GLib.SequenceIter # a `GSequenceIter`
---@return GLib.SequenceIter # a `GSequenceIter` pointing somewhere in the (`begin`, `end`) range
function GLib.sequence_range_get_midpoint(begin, end__) end

--- # function GLib.sequence_remove()
---
--- Removes the item pointed to by `iter`. It is an error to pass the
--- end iterator to this function.
--- 
--- If the sequence has a data destroy function associated with it, this
--- function is called on the data for the removed item.
---
--- ---
---
---@param iter GLib.SequenceIter # a `GSequenceIter`
---@return nil
function GLib.sequence_remove(iter) end

--- # function GLib.sequence_remove_range()
---
--- Removes all items in the (`begin`, `end`) range.
--- 
--- If the sequence has a data destroy function associated with it, this
--- function is called on the data for the removed items.
---
--- ---
---
---@param begin GLib.SequenceIter # a `GSequenceIter`
---@param end__ GLib.SequenceIter # a `GSequenceIter`
---@return nil
function GLib.sequence_remove_range(begin, end__) end

--- # function GLib.sequence_set()
---
--- Changes the data for the item pointed to by `iter` to be `data`. If
--- the sequence has a data destroy function associated with it, that
--- function is called on the existing data that `iter` pointed to.
---
--- ---
---
---@param iter GLib.SequenceIter # a `GSequenceIter`
---@param data? userdata # new data for the item
---@return nil
function GLib.sequence_set(iter, data) end

--- # function GLib.sequence_swap()
---
--- Swaps the items pointed to by `a` and `b`. It is allowed for `a` and `b`
--- to point into difference sequences.
---
--- ---
---
---@param a GLib.SequenceIter # a `GSequenceIter`
---@param b GLib.SequenceIter # a `GSequenceIter`
---@return nil
function GLib.sequence_swap(a, b) end

--- # function GLib.set_application_name()
---
--- Sets a human-readable name for the application. This name should be
--- localized if possible, and is intended for display to the user.
--- Contrast with `g_set_prgname()`, which sets a non-localized name.
--- `g_set_prgname()` will be called automatically by `gtk_init()`,
--- but `g_set_application_name()` will not.
--- 
--- Note that for thread safety reasons, this function can only
--- be called once.
--- 
--- The application name will be used in contexts such as error messages,
--- or when displaying an application's name in the task list.
---
--- ---
---
---@param application_name string # localized name of the application
---@return nil
function GLib.set_application_name(application_name) end

--- # function GLib.set_error_literal()
---
--- Does nothing if `err` is `nil`; if `err` is non-`nil`, then *`err`
--- must be `nil`. A new `GError` is created and assigned to *`err`.
--- Unlike `g_set_error()`, `message` is not a `printf()`-style format string.
--- Use this function if `message` contains text you don't have control over,
--- that could include `printf()` escape sequences.
---
--- ---
---
---@param err? GLib.Error # a return location for a `GError`
---@param domain GLib.Quark # error domain
---@param code integer # error code
---@param message string # error message
---@return nil
function GLib.set_error_literal(err, domain, code, message) end

--- # function GLib.set_prgname()
---
--- Sets the name of the program. This name should not be localized,
--- in contrast to `g_set_application_name()`.
--- 
--- If you are using `GApplication` the program name is set in
--- `g_application_run()`. In case of GDK or GTK+ it is set in
--- `gdk_init()`, which is called by `gtk_init()` and the
--- `GtkApplication`::startup handler. The program name is found by
--- taking the last component of `argv`[0].
--- 
--- Since GLib 2.72, this function can be called multiple times
--- and is fully thread safe. Prior to GLib 2.72, this function
--- could only be called once per process.
---
--- ---
---
---@param prgname string # the name of the program.
---@return nil
function GLib.set_prgname(prgname) end

--- # function GLib.setenv()
---
--- Sets an environment variable. On UNIX, both the variable's name and
--- value can be arbitrary byte strings, except that the variable's name
--- cannot contain '='. On Windows, they should be in UTF-8.
--- 
--- Note that on some systems, when variables are overwritten, the memory
--- used for the previous variables and its value isn't reclaimed.
--- 
--- You should be mindful of the fact that environment variable handling
--- in UNIX is not thread-safe, and your program may crash if one thread
--- calls `g_setenv()` while another thread is calling `getenv()`. (And note
--- that many functions, such as `gettext()`, call `getenv()` internally.)
--- This function is only safe to use at the very start of your program,
--- before creating any other threads (or creating objects that create
--- worker threads of their own).
--- 
--- If you need to set up the environment for a child process, you can
--- use `g_get_environ()` to get an environment array, modify that with
--- `g_environ_setenv()` and `g_environ_unsetenv()`, and then pass that
--- array directly to `execvpe()`, `g_spawn_async()`, or the like.
---
--- ---
---
---@param variable string # the environment variable to set, must not contain '='.
---@param value string # the value for to set the variable to.
---@param overwrite (boolean|nil) # whether to change the variable if it already exists.
---@return (boolean|nil) # `false` if the environment variable couldn't be set.
function GLib.setenv(variable, value, overwrite) end

--- # function GLib.shell_error_quark()
---
---@return GLib.Quark
function GLib.shell_error_quark() end

--- # function GLib.shell_parse_argv()
---
--- Parses a command line into an argument vector, in much the same way
--- the shell would, but without many of the expansions the shell would
--- perform (variable expansion, globs, operators, filename expansion,
--- etc. are not supported).
--- 
--- The results are defined to be the same as those you would get from
--- a UNIX98 `/bin/sh`, as long as the input contains none of the
--- unsupported shell expansions. If the input does contain such expansions,
--- they are passed through literally.
--- 
--- Possible errors are those from the %G_SHELL_ERROR domain.
--- 
--- In particular, if `command_line` is an empty string (or a string containing
--- only whitespace), %G_SHELL_ERROR_EMPTY_STRING will be returned. It’s
--- guaranteed that `argvp` will be a non-empty array if this function returns
--- successfully.
--- 
--- Free the returned vector with `g_strfreev()`.
---
--- ---
---
---@param command_line string # command line to parse
---@param argcp? integer # return location for number of args
---@param argvp? unknown[] # return location for array of args
---@return (boolean|nil) # `true` on success, `false` if error set
function GLib.shell_parse_argv(command_line, argcp, argvp) end

--- # function GLib.shell_quote()
---
--- Quotes a string so that the shell (/bin/sh) will interpret the
--- quoted string to mean `unquoted_string`.
--- 
--- If you pass a filename to the shell, for example, you should first
--- quote it with this function.
--- 
--- The return value must be freed with `g_free()`.
--- 
--- The quoting style used is undefined (single or double quotes may be
--- used).
---
--- ---
---
---@param unquoted_string string # a literal string
---@return string # quoted string
function GLib.shell_quote(unquoted_string) end

--- # function GLib.shell_unquote()
---
--- Unquotes a string as the shell (/bin/sh) would.
--- 
--- This function only handles quotes; if a string contains file globs,
--- arithmetic operators, variables, backticks, redirections, or other
--- special-to-the-shell features, the result will be different from the
--- result a real shell would produce (the variables, backticks, etc.
--- will be passed through literally instead of being expanded).
--- 
--- This function is guaranteed to succeed if applied to the result of
--- `g_shell_quote()`. If it fails, it returns `nil` and sets the
--- error.
--- 
--- The `quoted_string` need not actually contain quoted or escaped text;
--- `g_shell_unquote()` simply goes through the string and unquotes/unescapes
--- anything that the shell would. Both single and double quotes are
--- handled, as are escapes including escaped newlines.
--- 
--- The return value must be freed with `g_free()`.
--- 
--- Possible errors are in the %G_SHELL_ERROR domain.
--- 
--- Shell quoting rules are a bit strange. Single quotes preserve the
--- literal string exactly. escape sequences are not allowed; not even
--- `\'` - if you want a `'` in the quoted text, you have to do something
--- like `'foo'\''bar'`. Double quotes allow `$`, ```, `"`, `\`, and
--- newline to be escaped with backslash. Otherwise double quotes
--- preserve things literally.
---
--- ---
---
---@param quoted_string string # shell-quoted string
---@return string # an unquoted string
function GLib.shell_unquote(quoted_string) end

--- # function GLib.slice_alloc()
---
--- Allocates a block of memory from the libc allocator.
--- 
--- The block address handed out can be expected to be aligned
--- to at least `1 * sizeof (void*)`.
--- 
--- Since GLib 2.76 this always uses the system `malloc()` implementation
--- internally.
---
--- ---
---
---@param block_size integer # the number of bytes to allocate
---@return userdata # a pointer to the allocated memory block, which will be `nil` if and only if `mem_size` is 0
function GLib.slice_alloc(block_size) end

--- # function GLib.slice_alloc0()
---
--- Allocates a block of memory via `g_slice_alloc()` and initializes
--- the returned memory to 0.
--- 
--- Since GLib 2.76 this always uses the system `malloc()` implementation
--- internally.
---
--- ---
---
---@param block_size integer # the number of bytes to allocate
---@return userdata # a pointer to the allocated block, which will be `nil` if and only if `mem_size` is 0
function GLib.slice_alloc0(block_size) end

--- # function GLib.slice_copy()
---
--- Allocates a block of memory from the slice allocator
--- and copies `block_size` bytes into it from `mem_block`.
--- 
--- `mem_block` must be non-`nil` if `block_size` is non-zero.
--- 
--- Since GLib 2.76 this always uses the system `malloc()` implementation
--- internally.
---
--- ---
---
---@param block_size integer # the number of bytes to allocate
---@param mem_block? userdata # the memory to copy
---@return userdata # a pointer to the allocated memory block, which will be `nil` if and only if `mem_size` is 0
function GLib.slice_copy(block_size, mem_block) end

--- # function GLib.slice_free1()
---
--- Frees a block of memory.
--- 
--- The memory must have been allocated via `g_slice_alloc()` or
--- g_slice_alloc0() and the `block_size` has to match the size
--- specified upon allocation. Note that the exact release behaviour
--- can be changed with the [`G_DEBUG=gc-friendly`][G_DEBUG] environment
--- variable.
--- 
--- If `mem_block` is `nil`, this function does nothing.
--- 
--- Since GLib 2.76 this always uses the system `free_sized()` implementation
--- internally.
---
--- ---
---
---@param block_size integer # the size of the block
---@param mem_block? userdata # a pointer to the block to free
---@return nil
function GLib.slice_free1(block_size, mem_block) end

--- # function GLib.slice_free_chain_with_offset()
---
--- Frees a linked list of memory blocks of structure type `type`.
--- 
--- The memory blocks must be equal-sized, allocated via
--- `g_slice_alloc()` or g_slice_alloc0() and linked together by a
--- `next` pointer (similar to `GSList`). The offset of the `next`
--- field in each block is passed as third argument.
--- Note that the exact release behaviour can be changed with the
--- [`G_DEBUG=gc-friendly`][G_DEBUG] environment variable.
--- 
--- If `mem_chain` is `nil`, this function does nothing.
--- 
--- Since GLib 2.76 this always uses the system `free_sized()` implementation
--- internally.
---
--- ---
---
---@param block_size integer # the size of the blocks
---@param mem_chain? userdata # a pointer to the first block of the chain
---@param next_offset integer # the offset of the `next` field in the blocks
---@return nil
function GLib.slice_free_chain_with_offset(block_size, mem_chain, next_offset) end

--- # function GLib.slice_get_config()
---
---@param ckey GLib.SliceConfig
---@return integer
function GLib.slice_get_config(ckey) end

--- # function GLib.slice_get_config_state()
---
---@param ckey GLib.SliceConfig
---@param address integer
---@param n_values integer
---@return integer
function GLib.slice_get_config_state(ckey, address, n_values) end

--- # function GLib.slice_set_config()
---
---@param ckey GLib.SliceConfig
---@param value integer
---@return nil
function GLib.slice_set_config(ckey, value) end

--- # function GLib.source_remove()
---
--- Removes the source with the given ID from the default main context. You must
--- use `g_source_destroy()` for sources added to a non-default main context.
--- 
--- The ID of a `GSource` is given by `g_source_get_id()`, or will be
--- returned by the functions `g_source_attach()`, `g_idle_add()`,
--- `g_idle_add_full()`, `g_timeout_add()`, `g_timeout_add_full()`,
--- `g_child_watch_add()`, `g_child_watch_add_full()`, `g_io_add_watch()`, and
--- `g_io_add_watch_full()`.
--- 
--- It is a programmer error to attempt to remove a non-existent source.
--- 
--- More specifically: source IDs can be reissued after a source has been
--- destroyed and therefore it is never valid to use this function with a
--- source ID which may have already been removed.  An example is when
--- scheduling an idle to run in another thread with `g_idle_add()`: the
--- idle may already have run and been removed by the time this function
--- is called on its (now invalid) source ID.  This source ID may have
--- been reissued, leading to the operation being performed against the
--- wrong source.
---
--- ---
---
---@param tag integer # the ID of the source to remove.
---@return (boolean|nil) # `true` if the source was found and removed.
function GLib.source_remove(tag) end

--- # function GLib.source_remove_by_funcs_user_data()
---
--- Removes a source from the default main loop context given the
--- source functions and user data. If multiple sources exist with the
--- same source functions and user data, only one will be destroyed.
---
--- ---
---
---@param funcs GLib.SourceFuncs # The `source_funcs` passed to `g_source_new()`
---@param user_data? userdata # the user data for the callback
---@return (boolean|nil) # `true` if a source was found and removed.
function GLib.source_remove_by_funcs_user_data(funcs, user_data) end

--- # function GLib.source_remove_by_user_data()
---
--- Removes a source from the default main loop context given the user
--- data for the callback. If multiple sources exist with the same user
--- data, only one will be destroyed.
---
--- ---
---
---@param user_data? userdata # the user_data for the callback.
---@return (boolean|nil) # `true` if a source was found and removed.
function GLib.source_remove_by_user_data(user_data) end

--- # function GLib.source_set_name_by_id()
---
--- Sets the name of a source using its ID.
--- 
--- This is a convenience utility to set source names from the return
--- value of `g_idle_add()`, `g_timeout_add()`, etc.
--- 
--- It is a programmer error to attempt to set the name of a non-existent
--- source.
--- 
--- More specifically: source IDs can be reissued after a source has been
--- destroyed and therefore it is never valid to use this function with a
--- source ID which may have already been removed.  An example is when
--- scheduling an idle to run in another thread with `g_idle_add()`: the
--- idle may already have run and been removed by the time this function
--- is called on its (now invalid) source ID.  This source ID may have
--- been reissued, leading to the operation being performed against the
--- wrong source.
---
--- ---
---
---@param tag integer # a `GSource` ID
---@param name string # debug name for the source
---@return nil
function GLib.source_set_name_by_id(tag, name) end

--- # function GLib.spaced_primes_closest()
---
--- Gets the smallest prime number from a built-in array of primes which
--- is larger than `num`. This is used within GLib to calculate the optimum
--- size of a `GHashTable`.
--- 
--- The built-in array of primes ranges from 11 to 13845163 such that
--- each prime is approximately 1.5-2 times the previous prime.
---
--- ---
---
---@param num integer # a `guint`
---@return integer # the smallest prime number from a built-in array of primes which is larger than `num`
function GLib.spaced_primes_closest(num) end

--- # function GLib.spawn_async()
---
--- Executes a child program asynchronously.
--- 
--- See `g_spawn_async_with_pipes()` for a full description; this function
--- simply calls the `g_spawn_async_with_pipes()` without any pipes.
--- 
--- You should call `g_spawn_close_pid()` on the returned child process
--- reference when you don't need it any more.
--- 
--- If you are writing a GTK application, and the program you are spawning is a
--- graphical application too, then to ensure that the spawned program opens its
--- windows on the right screen, you may want to use `GdkAppLaunchContext`,
--- `GAppLaunchContext`, or set the %DISPLAY environment variable.
--- 
--- Note that the returned `child_pid` on Windows is a handle to the child
--- process and not its identifier. Process handles and process identifiers
--- are different concepts on Windows.
---
--- ---
---
---@param working_directory? string # child's current working directory, or `nil` to inherit parent's
---@param argv unknown[] # child's argument vector
---@param envp? unknown[] # child's environment, or `nil` to inherit parent's
---@param flags GLib.SpawnFlags # flags from `GSpawnFlags`
---@param child_setup? GLib.SpawnChildSetupFunc # function to run in the child just before `exec()`
---@param user_data? userdata # user data for `child_setup`
---@param child_pid? GLib.Pid # return location for child process reference, or `nil`
---@return (boolean|nil) # `true` on success, `false` if error is set
function GLib.spawn_async(working_directory, argv, envp, flags, child_setup, user_data, child_pid) end

--- # function GLib.spawn_async_with_fds()
---
--- Executes a child program asynchronously.
--- 
--- Identical to `g_spawn_async_with_pipes_and_fds()` but with `n_fds` set to zero,
--- so no FD assignments are used.
---
--- ---
---
---@param working_directory? string # child's current working directory, or `nil` to inherit parent's, in the GLib file name encoding
---@param argv unknown[] # child's argument vector, in the GLib file name encoding; it must be non-empty and `nil`-terminated
---@param envp? unknown[] # child's environment, or `nil` to inherit parent's, in the GLib file name encoding
---@param flags GLib.SpawnFlags # flags from `GSpawnFlags`
---@param child_setup? GLib.SpawnChildSetupFunc # function to run in the child just before `exec()`
---@param user_data? userdata # user data for `child_setup`
---@param child_pid? GLib.Pid # return location for child process ID, or `nil`
---@param stdin_fd integer # file descriptor to use for child's stdin, or `-1`
---@param stdout_fd integer # file descriptor to use for child's stdout, or `-1`
---@param stderr_fd integer # file descriptor to use for child's stderr, or `-1`
---@return (boolean|nil) # `true` on success, `false` if an error was set
function GLib.spawn_async_with_fds(working_directory, argv, envp, flags, child_setup, user_data, child_pid, stdin_fd, stdout_fd, stderr_fd) end

--- # function GLib.spawn_async_with_pipes()
---
--- Identical to `g_spawn_async_with_pipes_and_fds()` but with `n_fds` set to zero,
--- so no FD assignments are used.
---
--- ---
---
---@param working_directory? string # child's current working directory, or `nil` to inherit parent's, in the GLib file name encoding
---@param argv unknown[] # child's argument vector, in the GLib file name encoding; it must be non-empty and `nil`-terminated
---@param envp? unknown[] # child's environment, or `nil` to inherit parent's, in the GLib file name encoding
---@param flags GLib.SpawnFlags # flags from `GSpawnFlags`
---@param child_setup? GLib.SpawnChildSetupFunc # function to run in the child just before `exec()`
---@param user_data? userdata # user data for `child_setup`
---@param child_pid? GLib.Pid # return location for child process ID, or `nil`
---@param standard_input? integer # return location for file descriptor to write to child's stdin, or `nil`
---@param standard_output? integer # return location for file descriptor to read child's stdout, or `nil`
---@param standard_error? integer # return location for file descriptor to read child's stderr, or `nil`
---@return (boolean|nil) # `true` on success, `false` if an error was set
function GLib.spawn_async_with_pipes(working_directory, argv, envp, flags, child_setup, user_data, child_pid, standard_input, standard_output, standard_error) end

--- # function GLib.spawn_async_with_pipes_and_fds()
---
--- Executes a child program asynchronously (your program will not
--- block waiting for the child to exit).
--- 
--- The child program is specified by the only argument that must be
--- provided, `argv`. `argv` should be a `nil`-terminated array of strings,
--- to be passed as the argument vector for the child. The first string
--- in `argv` is of course the name of the program to execute. By default,
--- the name of the program must be a full path. If `flags` contains the
--- %G_SPAWN_SEARCH_PATH flag, the `PATH` environment variable is used to
--- search for the executable. If `flags` contains the
--- %G_SPAWN_SEARCH_PATH_FROM_ENVP flag, the `PATH` variable from `envp`
--- is used to search for the executable. If both the
--- %G_SPAWN_SEARCH_PATH and %G_SPAWN_SEARCH_PATH_FROM_ENVP flags are
--- set, the `PATH` variable from `envp` takes precedence over the
--- environment variable.
--- 
--- If the program name is not a full path and %G_SPAWN_SEARCH_PATH flag
--- is not used, then the program will be run from the current directory
--- (or `working_directory`, if specified); this might be unexpected or even
--- dangerous in some cases when the current directory is world-writable.
--- 
--- On Windows, note that all the string or string vector arguments to
--- this function and the other `g_spawn*()` functions are in UTF-8, the
--- GLib file name encoding. Unicode characters that are not part of
--- the system codepage passed in these arguments will be correctly
--- available in the spawned program only if it uses wide character API
--- to retrieve its command line. For C programs built with Microsoft's
--- tools it is enough to make the program have a ``wmain()`` instead of
--- ``main()``. ``wmain()`` has a wide character argument vector as parameter.
--- 
--- At least currently, mingw doesn't support ``wmain()``, so if you use
--- mingw to develop the spawned program, it should call
--- g_win32`_get_command_line()` to get arguments in UTF-8.
--- 
--- On Windows the low-level child process creation API `CreateP`rocess()``
--- doesn't use argument vectors, but a command line. The C runtime
--- library's `spawn*()` family of functions (which `g_spawn_async_with_pipes()`
--- eventually calls) paste the argument vector elements together into
--- a command line, and the C runtime startup code does a corresponding
--- reconstruction of an argument vector from the command line, to be
--- passed to ``main()``. Complications arise when you have argument vector
--- elements that contain spaces or double quotes. The `spawn*()` functions
--- don't do any quoting or escaping, but on the other hand the startup
--- code does do unquoting and unescaping in order to enable receiving
--- arguments with embedded spaces or double quotes. To work around this
--- asymmetry, `g_spawn_async_with_pipes()` will do quoting and escaping on
--- argument vector elements that need it before calling the C runtime
--- ``spawn()`` function.
--- 
--- The returned `child_pid` on Windows is a handle to the child
--- process, not its identifier. Process handles and process
--- identifiers are different concepts on Windows.
--- 
--- `envp` is a `nil`-terminated array of strings, where each string
--- has the form `KEY=VALUE`. This will become the child's environment.
--- If `envp` is `nil`, the child inherits its parent's environment.
--- 
--- `flags` should be the bitwise OR of any flags you want to affect the
--- function's behaviour. The %G_SPAWN_DO_NOT_REAP_CHILD means that the
--- child will not automatically be reaped; you must use a child watch
--- (`g_child_watch_add()`) to be notified about the death of the child process,
--- otherwise it will stay around as a zombie process until this process exits.
--- Eventually you must call `g_spawn_close_pid()` on the `child_pid`, in order to
--- free resources which may be associated with the child process. (On Unix,
--- using a child watch is equivalent to calling `waitpid()` or handling
--- the `SIGCHLD` signal manually. On Windows, calling `g_spawn_close_pid()`
--- is equivalent to calling `CloseH`andle()`` on the process handle returned
--- in `child_pid`). See `g_child_watch_add()`.
--- 
--- Open UNIX file descriptors marked as `FD_CLOEXEC` will be automatically
--- closed in the child process. %G_SPAWN_LEAVE_DESCRIPTORS_OPEN means that
--- other open file descriptors will be inherited by the child; otherwise all
--- descriptors except stdin/stdout/stderr will be closed before calling ``exec()``
--- in the child. %G_SPAWN_SEARCH_PATH means that `argv`[0] need not be an
--- absolute path, it will be looked for in the `PATH` environment
--- variable. %G_SPAWN_SEARCH_PATH_FROM_ENVP means need not be an
--- absolute path, it will be looked for in the `PATH` variable from
--- `envp`. If both %G_SPAWN_SEARCH_PATH and %G_SPAWN_SEARCH_PATH_FROM_ENVP
--- are used, the value from `envp` takes precedence over the environment.
--- 
--- %G_SPAWN_CHILD_INHERITS_STDIN means that the child will inherit the parent's
--- standard input (by default, the child's standard input is attached to
--- `/dev/null`). %G_SPAWN_STDIN_FROM_DEV_NULL explicitly imposes the default
--- behavior. Both flags cannot be enabled at the same time and, in both cases,
--- the `stdin_pipe_out` argument is ignored.
--- 
--- %G_SPAWN_STDOUT_TO_DEV_NULL means that the child's standard output
--- will be discarded (by default, it goes to the same location as the parent's
--- standard output). %G_SPAWN_CHILD_INHERITS_STDOUT explicitly imposes the
--- default behavior. Both flags cannot be enabled at the same time and, in
--- both cases, the `stdout_pipe_out` argument is ignored.
--- 
--- %G_SPAWN_STDERR_TO_DEV_NULL means that the child's standard error
--- will be discarded (by default, it goes to the same location as the parent's
--- standard error). %G_SPAWN_CHILD_INHERITS_STDERR explicitly imposes the
--- default behavior. Both flags cannot be enabled at the same time and, in
--- both cases, the `stderr_pipe_out` argument is ignored.
--- 
--- It is valid to pass the same FD in multiple parameters (e.g. you can pass
--- a single FD for both `stdout_fd` and `stderr_fd`, and include it in
--- `source_fds` too).
--- 
--- `source_fds` and `target_fds` allow zero or more FDs from this process to be
--- remapped to different FDs in the spawned process. If `n_fds` is greater than
--- zero, `source_fds` and `target_fds` must both be non-`nil` and the same length.
--- Each FD in `source_fds` is remapped to the FD number at the same index in
--- `target_fds`. The source and target FD may be equal to simply propagate an FD
--- to the spawned process. FD remappings are processed after standard FDs, so
--- any target FDs which equal `stdin_fd`, `stdout_fd` or `stderr_fd` will overwrite
--- them in the spawned process.
--- 
--- `source_fds` is supported on Windows since 2.72.
--- 
--- %G_SPAWN_FILE_AND_ARGV_ZERO means that the first element of `argv` is
--- the file to execute, while the remaining elements are the actual
--- argument vector to pass to the file. Normally `g_spawn_async_with_pipes()`
--- uses `argv`[0] as the file to execute, and passes all of `argv` to the child.
--- 
--- `child_setup` and `user_data` are a function and user data. On POSIX
--- platforms, the function is called in the child after GLib has
--- performed all the setup it plans to perform (including creating
--- pipes, closing file descriptors, etc.) but before calling ``exec()``.
--- That is, `child_setup` is called just before calling ``exec()`` in the
--- child. Obviously actions taken in this function will only affect
--- the child, not the parent.
--- 
--- On Windows, there is no separate ``fork()`` and ``exec()`` functionality.
--- Child processes are created and run with a single API call,
--- `CreateP`rocess()``. There is no sensible thing `child_setup`
--- could be used for on Windows so it is ignored and not called.
--- 
--- If non-`nil`, `child_pid` will on Unix be filled with the child's
--- process ID. You can use the process ID to send signals to the child,
--- or to use `g_child_watch_add()` (or ``waitpid()``) if you specified the
--- %G_SPAWN_DO_NOT_REAP_CHILD flag. On Windows, `child_pid` will be
--- filled with a handle to the child process only if you specified the
--- %G_SPAWN_DO_NOT_REAP_CHILD flag. You can then access the child
--- process using the Win32 API, for example wait for its termination
--- with the `WaitFor*()` functions, or examine its exit code with
--- `GetExitCodeP`rocess()``. You should close the handle with `CloseH`andle()``
--- or `g_spawn_close_pid()` when you no longer need it.
--- 
--- If non-`nil`, the `stdin_pipe_out`, `stdout_pipe_out`, `stderr_pipe_out`
--- locations will be filled with file descriptors for writing to the child's
--- standard input or reading from its standard output or standard error.
--- The caller of `g_spawn_async_with_pipes()` must close these file descriptors
--- when they are no longer in use. If these parameters are `nil`, the
--- corresponding pipe won't be created.
--- 
--- If `stdin_pipe_out` is `nil`, the child's standard input is attached to
--- `/dev/null` unless %G_SPAWN_CHILD_INHERITS_STDIN is set.
--- 
--- If `stderr_pipe_out` is NULL, the child's standard error goes to the same
--- location as the parent's standard error unless %G_SPAWN_STDERR_TO_DEV_NULL
--- is set.
--- 
--- If `stdout_pipe_out` is NULL, the child's standard output goes to the same
--- location as the parent's standard output unless %G_SPAWN_STDOUT_TO_DEV_NULL
--- is set.
--- 
--- `error` can be `nil` to ignore errors, or non-`nil` to report errors.
--- If an error is set, the function returns `false`. Errors are reported
--- even if they occur in the child (for example if the executable in
--- ``argv`[0]` is not found). Typically the `message` field of returned
--- errors should be displayed to users. Possible errors are those from
--- the %G_SPAWN_ERROR domain.
--- 
--- If an error occurs, `child_pid`, `stdin_pipe_out`, `stdout_pipe_out`,
--- and `stderr_pipe_out` will not be filled with valid values.
--- 
--- If `child_pid` is not `nil` and an error does not occur then the returned
--- process reference must be closed using `g_spawn_close_pid()`.
--- 
--- On modern UNIX platforms, GLib can use an efficient process launching
--- codepath driven internally by ``posix_spawn()``. This has the advantage of
--- avoiding the fork-time performance costs of cloning the parent process
--- address space, and avoiding associated memory overcommit checks that are
--- not relevant in the context of immediately executing a distinct process.
--- This optimized codepath will be used provided that the following conditions
--- are met:
--- 
--- 1. %G_SPAWN_DO_NOT_REAP_CHILD is set
--- 2. %G_SPAWN_LEAVE_DESCRIPTORS_OPEN is set
--- 3. %G_SPAWN_SEARCH_PATH_FROM_ENVP is not set
--- 4. `working_directory` is `nil`
--- 5. `child_setup` is `nil`
--- 6. The program is of a recognised binary format, or has a shebang.
---    Otherwise, GLib will have to execute the program through the
---    shell, which is not done using the optimized codepath.
--- 
--- If you are writing a GTK application, and the program you are spawning is a
--- graphical application too, then to ensure that the spawned program opens its
--- windows on the right screen, you may want to use `GdkAppLaunchContext`,
--- `GAppLaunchContext`, or set the `DISPLAY` environment variable.
---
--- ---
---
---@param working_directory? string # child's current working directory, or `nil` to inherit parent's, in the GLib file name encoding
---@param argv unknown[] # child's argument vector, in the GLib file name encoding; it must be non-empty and `nil`-terminated
---@param envp? unknown[] # child's environment, or `nil` to inherit parent's, in the GLib file name encoding
---@param flags GLib.SpawnFlags # flags from `GSpawnFlags`
---@param child_setup? GLib.SpawnChildSetupFunc # function to run in the child just before ``exec()``
---@param user_data? userdata # user data for `child_setup`
---@param stdin_fd integer # file descriptor to use for child's stdin, or `-1`
---@param stdout_fd integer # file descriptor to use for child's stdout, or `-1`
---@param stderr_fd integer # file descriptor to use for child's stderr, or `-1`
---@param source_fds? unknown[] # array of FDs from the parent process to make available in the child process
---@param target_fds? unknown[] # array of FDs to remap `source_fds` to in the child process
---@param n_fds integer # number of FDs in `source_fds` and `target_fds`
---@param child_pid_out? GLib.Pid # return location for child process ID, or `nil`
---@param stdin_pipe_out? integer # return location for file descriptor to write to child's stdin, or `nil`
---@param stdout_pipe_out? integer # return location for file descriptor to read child's stdout, or `nil`
---@param stderr_pipe_out? integer # return location for file descriptor to read child's stderr, or `nil`
---@return (boolean|nil) # `true` on success, `false` if an error was set
function GLib.spawn_async_with_pipes_and_fds(working_directory, argv, envp, flags, child_setup, user_data, stdin_fd, stdout_fd, stderr_fd, source_fds, target_fds, n_fds, child_pid_out, stdin_pipe_out, stdout_pipe_out, stderr_pipe_out) end

--- # function GLib.spawn_check_exit_status()
---
--- An old name for `g_spawn_check_wait_status()`, deprecated because its
--- name is misleading.
--- 
--- Despite the name of the function, `wait_status` must be the wait status
--- as returned by `g_spawn_sync()`, `g_subprocess_get_status()`, ``waitpid()``,
--- etc. On Unix platforms, it is incorrect for it to be the exit status
--- as passed to ``exit()`` or returned by `g_subprocess_get_exit_status()` or
--- `WEXITSTATUS()`.
---
--- ---
---
---@param wait_status integer # A status as returned from `g_spawn_sync()`
---@return (boolean|nil) # `true` if child exited successfully, `false` otherwise (and `error` will be set)
function GLib.spawn_check_exit_status(wait_status) end

--- # function GLib.spawn_check_wait_status()
---
--- Set `error` if `wait_status` indicates the child exited abnormally
--- (e.g. with a nonzero exit code, or via a fatal signal).
--- 
--- The `g_spawn_sync()` and `g_child_watch_add()` family of APIs return the
--- status of subprocesses encoded in a platform-specific way.
--- On Unix, this is guaranteed to be in the same format `waitpid()` returns,
--- and on Windows it is guaranteed to be the result of GetExitCodeP`rocess()`.
--- 
--- Prior to the introduction of this function in GLib 2.34, interpreting
--- `wait_status` required use of platform-specific APIs, which is problematic
--- for software using GLib as a cross-platform layer.
--- 
--- Additionally, many programs simply want to determine whether or not
--- the child exited successfully, and either propagate a `GError` or
--- print a message to standard error. In that common case, this function
--- can be used. Note that the error message in `error` will contain
--- human-readable information about the wait status.
--- 
--- The `domain` and `code` of `error` have special semantics in the case
--- where the process has an "exit code", as opposed to being killed by
--- a signal. On Unix, this happens if WIFEXITED() would be true of
--- `wait_status`. On Windows, it is always the case.
--- 
--- The special semantics are that the actual exit code will be the
--- code set in `error`, and the domain will be %G_SPAWN_EXIT_ERROR.
--- This allows you to differentiate between different exit codes.
--- 
--- If the process was terminated by some means other than an exit
--- status (for example if it was killed by a signal), the domain will be
--- %G_SPAWN_ERROR and the code will be %G_SPAWN_ERROR_FAILED.
--- 
--- This function just offers convenience; you can of course also check
--- the available platform via a macro such as %G_OS_UNIX, and use
--- WIFEXITED() and WEXITSTATUS() on `wait_status` directly. Do not attempt
--- to scan or parse the error message string; it may be translated and/or
--- change in future versions of GLib.
--- 
--- Prior to version 2.70, `g_spawn_check_exit_status()` provides the same
--- functionality, although under a misleading name.
---
--- ---
---
---@param wait_status integer # A platform-specific wait status as returned from `g_spawn_sync()`
---@return (boolean|nil) # `true` if child exited successfully, `false` otherwise (and `error` will be set)
function GLib.spawn_check_wait_status(wait_status) end

--- # function GLib.spawn_close_pid()
---
--- On some platforms, notably Windows, the `GPid` type represents a resource
--- which must be closed to prevent resource leaking. `g_spawn_close_pid()`
--- is provided for this purpose. It should be used on all platforms, even
--- though it doesn't do anything under UNIX.
---
--- ---
---
---@param pid GLib.Pid # The process reference to close
---@return nil
function GLib.spawn_close_pid(pid) end

--- # function GLib.spawn_command_line_async()
---
--- A simple version of `g_spawn_async()` that parses a command line with
--- `g_shell_parse_argv()` and passes it to `g_spawn_async()`.
--- 
--- Runs a command line in the background. Unlike `g_spawn_async()`, the
--- %G_SPAWN_SEARCH_PATH flag is enabled, other flags are not. Note
--- that %G_SPAWN_SEARCH_PATH can have security implications, so
--- consider using `g_spawn_async()` directly if appropriate. Possible
--- errors are those from `g_shell_parse_argv()` and `g_spawn_async()`.
--- 
--- The same concerns on Windows apply as for `g_spawn_command_line_sync()`.
---
--- ---
---
---@param command_line string # a command line
---@return (boolean|nil) # `true` on success, `false` if error is set
function GLib.spawn_command_line_async(command_line) end

--- # function GLib.spawn_command_line_sync()
---
--- A simple version of `g_spawn_sync()` with little-used parameters
--- removed, taking a command line instead of an argument vector.
--- 
--- See `g_spawn_sync()` for full details.
--- 
--- The `command_line` argument will be parsed by `g_shell_parse_argv()`.
--- 
--- Unlike `g_spawn_sync()`, the %G_SPAWN_SEARCH_PATH flag is enabled.
--- Note that %G_SPAWN_SEARCH_PATH can have security implications, so
--- consider using `g_spawn_sync()` directly if appropriate.
--- 
--- Possible errors are those from `g_spawn_sync()` and those
--- from `g_shell_parse_argv()`.
--- 
--- If `wait_status` is non-`nil`, the platform-specific status of
--- the child is stored there; see the documentation of
--- `g_spawn_check_wait_status()` for how to use and interpret this.
--- On Unix platforms, note that it is usually not equal
--- to the integer passed to ``exit()`` or returned from ``main()``.
--- 
--- On Windows, please note the implications of `g_shell_parse_argv()`
--- parsing `command_line`. Parsing is done according to Unix shell rules, not
--- Windows command interpreter rules.
--- Space is a separator, and backslashes are
--- special. Thus you cannot simply pass a `command_line` containing
--- canonical Windows paths, like "c:\\program files\\app\\app.exe", as
--- the backslashes will be eaten, and the space will act as a
--- separator. You need to enclose such paths with single quotes, like
--- "'c:\\program files\\app\\app.exe' 'e:\\folder\\argument.txt'".
---
--- ---
---
---@param command_line string # a command line
---@param standard_output? unknown[] # return location for child output
---@param standard_error? unknown[] # return location for child errors
---@param wait_status? integer # return location for child wait status, as returned by `waitpid()`
---@return (boolean|nil) # `true` on success, `false` if an error was set
function GLib.spawn_command_line_sync(command_line, standard_output, standard_error, wait_status) end

--- # function GLib.spawn_error_quark()
---
---@return GLib.Quark
function GLib.spawn_error_quark() end

--- # function GLib.spawn_exit_error_quark()
---
---@return GLib.Quark
function GLib.spawn_exit_error_quark() end

--- # function GLib.spawn_sync()
---
--- Executes a child synchronously (waits for the child to exit before returning).
--- 
--- All output from the child is stored in `standard_output` and `standard_error`,
--- if those parameters are non-`nil`. Note that you must set the
--- %G_SPAWN_STDOUT_TO_DEV_NULL and %G_SPAWN_STDERR_TO_DEV_NULL flags when
--- passing `nil` for `standard_output` and `standard_error`.
--- 
--- If `wait_status` is non-`nil`, the platform-specific status of
--- the child is stored there; see the documentation of
--- `g_spawn_check_wait_status()` for how to use and interpret this.
--- On Unix platforms, note that it is usually not equal
--- to the integer passed to ``exit()`` or returned from ``main()``.
--- 
--- Note that it is invalid to pass %G_SPAWN_DO_NOT_REAP_CHILD in
--- `flags`, and on POSIX platforms, the same restrictions as for
--- `g_child_watch_source_new()` apply.
--- 
--- If an error occurs, no data is returned in `standard_output`,
--- `standard_error`, or `wait_status`.
--- 
--- This function calls `g_spawn_async_with_pipes()` internally; see that
--- function for full details on the other parameters and details on
--- how these functions work on Windows.
---
--- ---
---
---@param working_directory? string # child's current working directory, or `nil` to inherit parent's
---@param argv unknown[] # child's argument vector, which must be non-empty and `nil`-terminated
---@param envp? unknown[] # child's environment, or `nil` to inherit parent's
---@param flags GLib.SpawnFlags # flags from `GSpawnFlags`
---@param child_setup? GLib.SpawnChildSetupFunc # function to run in the child just before `exec()`
---@param user_data? userdata # user data for `child_setup`
---@param standard_output? unknown[] # return location for child output, or `nil`
---@param standard_error? unknown[] # return location for child error messages, or `nil`
---@param wait_status? integer # return location for child wait status, as returned by `waitpid()`, or `nil`
---@return (boolean|nil) # `true` on success, `false` if an error was set
function GLib.spawn_sync(working_directory, argv, envp, flags, child_setup, user_data, standard_output, standard_error, wait_status) end

--- # function GLib.stpcpy()
---
--- Copies a nul-terminated string into the destination buffer, including
--- the trailing nul byte, and returns a pointer to the trailing nul byte
--- in `dest`.  The return value is useful for concatenating multiple
--- strings without having to repeatedly scan for the end.
---
--- ---
---
---@param dest string # destination buffer.
---@param src string # source string.
---@return string # a pointer to the trailing nul byte in `dest`.
function GLib.stpcpy(dest, src) end

--- # function GLib.str_equal()
---
--- Compares two strings for byte-by-byte equality and returns `true`
--- if they are equal. It can be passed to `g_hash_table_new()` as the
--- `key_equal_func` parameter, when using non-`nil` strings as keys in a
--- `GHashTable`.
--- 
--- This function is typically used for hash table comparisons, but can be used
--- for general purpose comparisons of non-`nil` strings. For a `nil`-safe string
--- comparison function, see g_strcmp0().
---
--- ---
---
---@param v1 userdata # a key
---@param v2 userdata # a key to compare with `v1`
---@return (boolean|nil) # `true` if the two keys match
function GLib.str_equal(v1, v2) end

--- # function GLib.str_has_prefix()
---
--- Looks whether the string `str` begins with `prefix`.
---
--- ---
---
---@param str string # a nul-terminated string
---@param prefix string # the nul-terminated prefix to look for
---@return (boolean|nil) # `true` if `str` begins with `prefix`, `false` otherwise.
function GLib.str_has_prefix(str, prefix) end

--- # function GLib.str_has_suffix()
---
--- Looks whether the string `str` ends with `suffix`.
---
--- ---
---
---@param str string # a nul-terminated string
---@param suffix string # the nul-terminated suffix to look for
---@return (boolean|nil) # `true` if `str` end with `suffix`, `false` otherwise.
function GLib.str_has_suffix(str, suffix) end

--- # function GLib.str_hash()
---
--- Converts a string to a hash value.
--- 
--- This function implements the widely used "djb" hash apparently
--- posted by Daniel Bernstein to comp.lang.c some time ago.  The 32
--- bit unsigned hash value starts at 5381 and for each byte 'c' in
--- the string, is updated: `hash = hash * 33 + c`. This function
--- uses the signed value of each byte.
--- 
--- It can be passed to `g_hash_table_new()` as the `hash_func` parameter,
--- when using non-`nil` strings as keys in a `GHashTable`.
--- 
--- Note that this function may not be a perfect fit for all use cases.
--- For example, it produces some hash collisions with strings as short
--- as 2.
---
--- ---
---
---@param v userdata # a string key
---@return integer # a hash value corresponding to the key
function GLib.str_hash(v) end

--- # function GLib.str_is_ascii()
---
--- Determines if a string is pure ASCII. A string is pure ASCII if it
--- contains no bytes with the high bit set.
---
--- ---
---
---@param str string # a string
---@return (boolean|nil) # `true` if `str` is ASCII
function GLib.str_is_ascii(str) end

--- # function GLib.str_match_string()
---
--- Checks if a search conducted for `search_term` should match
--- `potential_hit`.
--- 
--- This function calls `g_str_tokenize_and_fold()` on both
--- `search_term` and `potential_hit`.  ASCII alternates are never taken
--- for `search_term` but will be taken for `potential_hit` according to
--- the value of `accept_alternates`.
--- 
--- A hit occurs when each folded token in `search_term` is a prefix of a
--- folded token from `potential_hit`.
--- 
--- Depending on how you're performing the search, it will typically be
--- faster to call `g_str_tokenize_and_fold()` on each string in
--- your corpus and build an index on the returned folded tokens, then
--- call `g_str_tokenize_and_fold()` on the search term and
--- perform lookups into that index.
--- 
--- As some examples, searching for ‘fred’ would match the potential hit
--- ‘Smith, Fred’ and also ‘Frédéric’.  Searching for ‘Fréd’ would match
--- ‘Frédéric’ but not ‘Frederic’ (due to the one-directional nature of
--- accent matching).  Searching ‘fo’ would match ‘Foo’ and ‘Bar Foo
--- Baz’, but not ‘SFO’ (because no word has ‘fo’ as a prefix).
---
--- ---
---
---@param search_term string # the search term from the user
---@param potential_hit string # the text that may be a hit
---@param accept_alternates (boolean|nil) # `true` to accept ASCII alternates
---@return (boolean|nil) # `true` if `potential_hit` is a hit
function GLib.str_match_string(search_term, potential_hit, accept_alternates) end

--- # function GLib.str_to_ascii()
---
--- Transliterate `str` to plain ASCII.
--- 
--- For best results, `str` should be in composed normalised form.
--- 
--- This function performs a reasonably good set of character
--- replacements.  The particular set of replacements that is done may
--- change by version or even by runtime environment.
--- 
--- If the source language of `str` is known, it can used to improve the
--- accuracy of the translation by passing it as `from_locale`.  It should
--- be a valid POSIX locale string (of the form
--- `language[_territory][.codeset][`modifier`]`).
--- 
--- If `from_locale` is `nil` then the current locale is used.
--- 
--- If you want to do translation for no specific locale, and you want it
--- to be done independently of the currently locale, specify `"C"` for
--- `from_locale`.
---
--- ---
---
---@param str string # a string, in UTF-8
---@param from_locale? string # the source locale, if known
---@return string # a string in plain ASCII
function GLib.str_to_ascii(str, from_locale) end

--- # function GLib.str_tokenize_and_fold()
---
--- Tokenises `string` and performs folding on each token.
--- 
--- A token is a non-empty sequence of alphanumeric characters in the
--- source string, separated by non-alphanumeric characters.  An
--- "alphanumeric" character for this purpose is one that matches
--- `g_unichar_isalnum()` or `g_unichar_ismark()`.
--- 
--- Each token is then (Unicode) normalised and case-folded.  If
--- `ascii_alternates` is non-`nil` and some of the returned tokens
--- contain non-ASCII characters, ASCII alternatives will be generated.
--- 
--- The number of ASCII alternatives that are generated and the method
--- for doing so is unspecified, but `translit_locale` (if specified) may
--- improve the transliteration if the language of the source string is
--- known.
---
--- ---
---
---@param string string # a string
---@param translit_locale? string # the language code (like 'de' or 'en_GB') from which `string` originates
---@param ascii_alternates unknown[] # a return location for ASCII alternates
---@return unknown[] # the folded tokens
function GLib.str_tokenize_and_fold(string, translit_locale, ascii_alternates) end

--- # function GLib.strcanon()
---
--- For each character in `string`, if the character is not in `valid_chars`,
--- replaces the character with `substitutor`.
--- 
--- Modifies `string` in place, and return `string` itself, not a copy. The
--- return value is to allow nesting such as:
--- 
--- ```c
---   g_ascii_strup (g_strcanon (str, "abc", '?'))
--- ```
--- 
--- In order to modify a copy, you may use `g_strdup()`:
--- 
--- ```c
---   reformatted = g_strcanon (g_strdup (const_str), "abc", '?');
---   ...
---   g_free (reformatted);
--- ```
---
--- ---
---
---@param string string # a nul-terminated array of bytes
---@param valid_chars string # bytes permitted in `string`
---@param substitutor integer # replacement character for disallowed bytes
---@return string # the modified `string`
function GLib.strcanon(string, valid_chars, substitutor) end

--- # function GLib.strcasecmp()
---
--- A case-insensitive string comparison, corresponding to the standard
--- `strcasecmp()` function on platforms which support it.
---
--- ---
---
---@param s1 string # a string
---@param s2 string # a string to compare with `s1`
---@return integer # 0 if the strings match, a negative value if `s1` < `s2`, or a positive value if `s1` > `s2`.
function GLib.strcasecmp(s1, s2) end

--- # function GLib.strchomp()
---
--- Removes trailing whitespace from a string.
--- 
--- This function doesn't allocate or reallocate any memory;
--- it modifies `string` in place. Therefore, it cannot be used
--- on statically allocated strings.
--- 
--- The pointer to `string` is returned to allow the nesting of functions.
--- 
--- Also see `g_strchug()` and `g_strstrip()`.
---
--- ---
---
---@param string string # a string to remove the trailing whitespace from
---@return string # `string`
function GLib.strchomp(string) end

--- # function GLib.strchug()
---
--- Removes leading whitespace from a string, by moving the rest
--- of the characters forward.
--- 
--- This function doesn't allocate or reallocate any memory;
--- it modifies `string` in place. Therefore, it cannot be used on
--- statically allocated strings.
--- 
--- The pointer to `string` is returned to allow the nesting of functions.
--- 
--- Also see `g_strchomp()` and `g_strstrip()`.
---
--- ---
---
---@param string string # a string to remove the leading whitespace from
---@return string # `string`
function GLib.strchug(string) end

--- # function GLib.strcmp0()
---
--- Compares `str1` and `str2` like `strcmp()`. Handles `nil`
--- gracefully by sorting it before non-`nil` strings.
--- Comparing two `nil` pointers returns 0.
---
--- ---
---
---@param str1? string # a C string or `nil`
---@param str2? string # another C string or `nil`
---@return integer # an integer less than, equal to, or greater than zero, if `str1` is <, == or > than `str2`.
function GLib.strcmp0(str1, str2) end

--- # function GLib.strcompress()
---
--- Replaces all escaped characters with their one byte equivalent.
--- 
--- This function does the reverse conversion of `g_strescape()`.
---
--- ---
---
---@param source string # a string to compress
---@return string # a newly-allocated copy of `source` with all escaped character compressed
function GLib.strcompress(source) end

--- # function GLib.strdelimit()
---
--- Converts any delimiter characters in `string` to `new_delimiter`.
--- 
--- Any characters in `string` which are found in `delimiters` are
--- changed to the `new_delimiter` character. Modifies `string` in place,
--- and returns `string` itself, not a copy.
--- 
--- The return value is to allow nesting such as:
--- 
--- ```c
---   g_ascii_strup (g_strdelimit (str, "abc", '?'))
--- ```
--- 
--- In order to modify a copy, you may use `g_strdup()`:
--- 
--- ```c
---   reformatted = g_strdelimit (g_strdup (const_str), "abc", '?');
---   ...
---   g_free (reformatted);
--- ```
---
--- ---
---
---@param string string # the string to convert
---@param delimiters? string # a string containing the current delimiters, or `nil` to use the standard delimiters defined in %G_STR_DELIMITERS
---@param new_delimiter integer # the new delimiter character
---@return string # the modified `string`
function GLib.strdelimit(string, delimiters, new_delimiter) end

--- # function GLib.strdown()
---
--- Converts a string to lower case.
---
--- ---
---
---@param string string # the string to convert.
---@return string # the string
function GLib.strdown(string) end

--- # function GLib.strdup()
---
--- Duplicates a string. If `str` is `nil` it returns `nil`.
--- The returned string should be freed with `g_free()`
--- when no longer needed.
---
--- ---
---
---@param str? string # the string to duplicate
---@return string # a newly-allocated copy of `str`
function GLib.strdup(str) end

--- # function GLib.strerror()
---
--- Returns a string corresponding to the given error code, e.g. "no
--- such process". Unlike `strerror()`, this always returns a string in
--- UTF-8 encoding, and the pointer is guaranteed to remain valid for
--- the lifetime of the process.
--- 
--- Note that the string may be translated according to the current locale.
--- 
--- The value of %errno will not be changed by this function. However, it may
--- be changed by intermediate function calls, so you should save its value
--- as soon as the call returns:
--- ```c
---   int saved_errno;
--- 
---   ret = read (blah);
---   saved_errno = errno;
--- 
---   g_strerror (saved_errno);
--- ```
---
--- ---
---
---@param errnum integer # the system error number. See the standard C %errno documentation
---@return string # a UTF-8 string describing the error code. If the error code is unknown, it returns a string like "Unknown error: <code>".
function GLib.strerror(errnum) end

--- # function GLib.strescape()
---
--- Escapes the special characters '\b', '\f', '\n', '\r', '\t', '\v', '\'
--- and '"' in the string `source` by inserting a '\' before
--- them. Additionally all characters in the range 0x01-0x1F (everything
--- below SPACE) and in the range 0x7F-0xFF (all non-ASCII chars) are
--- replaced with a '\' followed by their octal representation.
--- Characters supplied in `exceptions` are not escaped.
--- 
--- `g_strcompress()` does the reverse conversion.
---
--- ---
---
---@param source string # a string to escape
---@param exceptions? string # a string of characters not to escape in `source`
---@return string # a newly-allocated copy of `source` with certain characters escaped. See above.
function GLib.strescape(source, exceptions) end

--- # function GLib.strfreev()
---
--- Frees a `nil`-terminated array of strings, as well as each
--- string it contains.
--- 
--- If `str_array` is `nil`, this function simply returns.
---
--- ---
---
---@param str_array? string # a `nil`-terminated array of strings to free
---@return nil
function GLib.strfreev(str_array) end

--- # function GLib.strip_context()
---
--- An auxiliary function for `gettext()` support (see Q`_()`).
---
--- ---
---
---@param msgid string # a string
---@param msgval string # another string
---@return string # `msgval`, unless `msgval` is identical to `msgid` and contains a '|' character, in which case a pointer to the substring of msgid after the first '|' character is returned.
function GLib.strip_context(msgid, msgval) end

--- # function GLib.strjoinv()
---
--- Joins a number of strings together to form one long string, with the
--- optional `separator` inserted between each of them. The returned string
--- should be freed with `g_free()`.
--- 
--- If `str_array` has no items, the return value will be an
--- empty string. If `str_array` contains a single item, `separator` will not
--- appear in the resulting string.
---
--- ---
---
---@param separator? string # a string to insert between each of the strings, or `nil`
---@param str_array string # a `nil`-terminated array of strings to join
---@return string # a newly-allocated string containing all of the strings joined together, with `separator` between them
function GLib.strjoinv(separator, str_array) end

--- # function GLib.strlcat()
---
--- Portability wrapper that calls `strlcat()` on systems which have it,
--- and emulates it otherwise. Appends nul-terminated `src` string to `dest`,
--- guaranteeing nul-termination for `dest`. The total size of `dest` won't
--- exceed `dest_size`.
--- 
--- At most `dest_size` - 1 characters will be copied. Unlike `strncat()`,
--- `dest_size` is the full size of dest, not the space left over. This
--- function does not allocate memory. It always nul-terminates (unless
--- `dest_size` == 0 or there were no nul characters in the `dest_size`
--- characters of dest to start with).
--- 
--- Caveat: this is supposedly a more secure alternative to `strcat()` or
--- `strncat()`, but for real security `g_strconcat()` is harder to mess up.
---
--- ---
---
---@param dest string # destination buffer, already containing one nul-terminated string
---@param src string # source buffer
---@param dest_size integer # length of `dest` buffer in bytes (not length of existing string inside `dest`)
---@return integer # size of attempted result, which is MIN (dest_size, strlen (original dest)) + strlen (src), so if retval >= dest_size, truncation occurred.
function GLib.strlcat(dest, src, dest_size) end

--- # function GLib.strlcpy()
---
--- Portability wrapper that calls `strlcpy()` on systems which have it,
--- and emulates `strlcpy()` otherwise. Copies `src` to `dest`; `dest` is
--- guaranteed to be nul-terminated; `src` must be nul-terminated;
--- `dest_size` is the buffer size, not the number of bytes to copy.
--- 
--- At most `dest_size` - 1 characters will be copied. Always nul-terminates
--- (unless `dest_size` is 0). This function does not allocate memory. Unlike
--- `strncpy()`, this function doesn't pad `dest` (so it's often faster). It
--- returns the size of the attempted result, strlen (src), so if
--- `retval` >= `dest_size`, truncation occurred.
--- 
--- Caveat: `strlcpy()` is supposedly more secure than `strcpy()` or `strncpy()`,
--- but if you really want to avoid screwups, `g_strdup()` is an even better
--- idea.
---
--- ---
---
---@param dest string # destination buffer
---@param src string # source buffer
---@param dest_size integer # length of `dest` in bytes
---@return integer # length of `src`
function GLib.strlcpy(dest, src, dest_size) end

--- # function GLib.strncasecmp()
---
--- A case-insensitive string comparison, corresponding to the standard
--- `strncasecmp()` function on platforms which support it. It is similar
--- to `g_strcasecmp()` except it only compares the first `n` characters of
--- the strings.
---
--- ---
---
---@param s1 string # a string
---@param s2 string # a string to compare with `s1`
---@param n integer # the maximum number of characters to compare
---@return integer # 0 if the strings match, a negative value if `s1` < `s2`, or a positive value if `s1` > `s2`.
function GLib.strncasecmp(s1, s2, n) end

--- # function GLib.strndup()
---
--- Duplicates the first `n` bytes of a string, returning a newly-allocated
--- buffer `n` + 1 bytes long which will always be nul-terminated. If `str`
--- is less than `n` bytes long the buffer is padded with nuls. If `str` is
--- `nil` it returns `nil`. The returned value should be freed when no longer
--- needed.
--- 
--- To copy a number of characters from a UTF-8 encoded string,
--- use g_utf8`_strncpy()` instead.
---
--- ---
---
---@param str string # the string to duplicate
---@param n integer # the maximum number of bytes to copy from `str`
---@return string # a newly-allocated buffer containing the first `n` bytes of `str`, nul-terminated
function GLib.strndup(str, n) end

--- # function GLib.strnfill()
---
--- Creates a new string `length` bytes long filled with `fill_char`.
--- The returned string should be freed when no longer needed.
---
--- ---
---
---@param length integer # the length of the new string
---@param fill_char integer # the byte to fill the string with
---@return string # a newly-allocated string filled the `fill_char`
function GLib.strnfill(length, fill_char) end

--- # function GLib.strreverse()
---
--- Reverses all of the bytes in a string. For example,
--- `g_strreverse ("abcdef")` will result in "fedcba".
--- 
--- Note that `g_strreverse()` doesn't work on UTF-8 strings
--- containing multibyte characters. For that purpose, use
--- g_utf8`_strreverse()`.
---
--- ---
---
---@param string string # the string to reverse
---@return string # the same pointer passed in as `string`
function GLib.strreverse(string) end

--- # function GLib.strrstr()
---
--- Searches the string `haystack` for the last occurrence
--- of the string `needle`.
---
--- ---
---
---@param haystack string # a nul-terminated string
---@param needle string # the nul-terminated string to search for
---@return string # a pointer to the found occurrence, or `nil` if not found.
function GLib.strrstr(haystack, needle) end

--- # function GLib.strrstr_len()
---
--- Searches the string `haystack` for the last occurrence
--- of the string `needle`, limiting the length of the search
--- to `haystack_len`.
---
--- ---
---
---@param haystack string # a nul-terminated string
---@param haystack_len integer # the maximum length of `haystack` in bytes. A length of -1 can be used to mean "search the entire string", like `g_strrstr()`.
---@param needle string # the nul-terminated string to search for
---@return string # a pointer to the found occurrence, or `nil` if not found.
function GLib.strrstr_len(haystack, haystack_len, needle) end

--- # function GLib.strsignal()
---
--- Returns a string describing the given signal, e.g. "Segmentation fault".
--- You should use this function in preference to `strsignal()`, because it
--- returns a string in UTF-8 encoding, and since not all platforms support
--- the `strsignal()` function.
---
--- ---
---
---@param signum integer # the signal number. See the `signal` documentation
---@return string # a UTF-8 string describing the signal. If the signal is unknown, it returns "unknown signal (<signum>)".
function GLib.strsignal(signum) end

--- # function GLib.strstr_len()
---
--- Searches the string `haystack` for the first occurrence
--- of the string `needle`, limiting the length of the search
--- to `haystack_len`.
---
--- ---
---
---@param haystack string # a nul-terminated string
---@param haystack_len integer # the maximum length of `haystack` in bytes. A length of -1 can be used to mean "search the entire string", like ``strstr()``.
---@param needle string # the string to search for
---@return string # a pointer to the found occurrence, or `nil` if not found.
function GLib.strstr_len(haystack, haystack_len, needle) end

--- # function GLib.strtod()
---
--- Converts a string to a `gdouble` value.
--- It calls the standard `strtod()` function to handle the conversion, but
--- if the string is not completely converted it attempts the conversion
--- again with `g_ascii_strtod()`, and returns the best match.
--- 
--- This function should seldom be used. The normal situation when reading
--- numbers not for human consumption is to use `g_ascii_strtod()`. Only when
--- you know that you must expect both locale formatted and C formatted numbers
--- should you use this. Make sure that you don't pass strings such as comma
--- separated lists of values, since the commas may be interpreted as a decimal
--- point in some locales, causing unexpected results.
---
--- ---
---
---@param nptr string # the string to convert to a numeric value.
---@param endptr? string # if non-`nil`, it returns the character after the last character used in the conversion.
---@return number # the `gdouble` value.
function GLib.strtod(nptr, endptr) end

--- # function GLib.strup()
---
--- Converts a string to upper case.
---
--- ---
---
---@param string string # the string to convert
---@return string # the string
function GLib.strup(string) end

--- # function GLib.strv_contains()
---
--- Checks if `strv` contains `str`. `strv` must not be `nil`.
---
--- ---
---
---@param strv string # a `nil`-terminated array of strings
---@param str string # a string
---@return (boolean|nil) # `true` if `str` is an element of `strv`, according to `g_str_equal()`.
function GLib.strv_contains(strv, str) end

--- # function GLib.strv_equal()
---
--- Checks if `strv1` and `strv2` contain exactly the same elements in exactly the
--- same order. Elements are compared using `g_str_equal()`. To match independently
--- of order, sort the arrays first (using `g_qsort_with_data()` or similar).
--- 
--- Two empty arrays are considered equal. Neither `strv1` not `strv2` may be
--- `nil`.
---
--- ---
---
---@param strv1 string # a `nil`-terminated array of strings
---@param strv2 string # another `nil`-terminated array of strings
---@return (boolean|nil) # `true` if `strv1` and `strv2` are equal
function GLib.strv_equal(strv1, strv2) end

--- # function GLib.strv_get_type()
---
---@return GLib.GType
function GLib.strv_get_type() end

--- # function GLib.strv_length()
---
--- Returns the length of the given `nil`-terminated
--- string array `str_array`. `str_array` must not be `nil`.
---
--- ---
---
---@param str_array string # a `nil`-terminated array of strings
---@return integer # length of `str_array`.
function GLib.strv_length(str_array) end

--- # function GLib.test_add_data_func()
---
--- Create a new test case, similar to `g_test_create_case()`. However
--- the test is assumed to use no fixture, and test suites are automatically
--- created on the fly and added to the root fixture, based on the
--- slash-separated portions of `testpath`. The `test_data` argument
--- will be passed as first argument to `test_func`.
--- 
--- If `testpath` includes the component "subprocess" anywhere in it,
--- the test will be skipped by default, and only run if explicitly
--- required via the `-p` command-line option or `g_test_trap_subprocess()`.
--- 
--- No component of `testpath` may start with a dot (`.`) if the
--- %G_TEST_OPTION_ISOLATE_DIRS option is being used; and it is recommended to
--- do so even if it isn’t.
---
--- ---
---
---@param testpath string # /-separated test case path name for the test.
---@param test_data? userdata # Test data argument for the test function.
---@param test_func GLib.TestDataFunc # The test function to invoke for this test.
---@return nil
function GLib.test_add_data_func(testpath, test_data, test_func) end

--- # function GLib.test_add_data_func_full()
---
--- Create a new test case, as with `g_test_add_data_func()`, but freeing
--- `test_data` after the test run is complete.
---
--- ---
---
---@param testpath string # /-separated test case path name for the test.
---@param test_data? userdata # Test data argument for the test function.
---@param test_func GLib.TestDataFunc # The test function to invoke for this test.
---@param data_free_func GLib.DestroyNotify # `GDestroyNotify` for `test_data`.
---@return nil
function GLib.test_add_data_func_full(testpath, test_data, test_func, data_free_func) end

--- # function GLib.test_add_func()
---
--- Create a new test case, similar to `g_test_create_case()`. However
--- the test is assumed to use no fixture, and test suites are automatically
--- created on the fly and added to the root fixture, based on the
--- slash-separated portions of `testpath`.
--- 
--- If `testpath` includes the component "subprocess" anywhere in it,
--- the test will be skipped by default, and only run if explicitly
--- required via the `-p` command-line option or `g_test_trap_subprocess()`.
--- 
--- No component of `testpath` may start with a dot (`.`) if the
--- %G_TEST_OPTION_ISOLATE_DIRS option is being used; and it is recommended to
--- do so even if it isn’t.
---
--- ---
---
---@param testpath string # /-separated test case path name for the test.
---@param test_func GLib.TestFunc # The test function to invoke for this test.
---@return nil
function GLib.test_add_func(testpath, test_func) end

--- # function GLib.test_assert_expected_messages_internal()
---
---@param domain string
---@param file string
---@param line integer
---@param func string
---@return nil
function GLib.test_assert_expected_messages_internal(domain, file, line, func) end

--- # function GLib.test_bug()
---
--- This function adds a message to test reports that
--- associates a bug URI with a test case.
--- 
--- Bug URIs are constructed from a base URI set with `g_test_bug_base()`
--- and `bug_uri_snippet`. If `g_test_bug_base()` has not been called, it is
--- assumed to be the empty string, so a full URI can be provided to
--- `g_test_bug()` instead.
--- 
--- Since GLib 2.70, the base URI is not prepended to `bug_uri_snippet` if it
--- is already a valid URI.
---
--- ---
---
---@param bug_uri_snippet string # Bug specific bug tracker URI or URI portion.
---@return nil
function GLib.test_bug(bug_uri_snippet) end

--- # function GLib.test_bug_base()
---
--- Specify the base URI for bug reports.
--- 
--- The base URI is used to construct bug report messages for
--- `g_test_message()` when `g_test_bug()` is called.
--- Calling this function outside of a test case sets the
--- default base URI for all test cases. Calling it from within
--- a test case changes the base URI for the scope of the test
--- case only.
--- Bug URIs are constructed by appending a bug specific URI
--- portion to `uri_pattern`, or by replacing the special string
--- `%s` within `uri_pattern` if that is present.
--- 
--- If `g_test_bug_base()` is not called, bug URIs are formed solely
--- from the value provided by `g_test_bug()`.
---
--- ---
---
---@param uri_pattern string # the base pattern for bug URIs
---@return nil
function GLib.test_bug_base(uri_pattern) end

--- # function GLib.test_expect_message()
---
--- Indicates that a message with the given `log_domain` and `log_level`,
--- with text matching `pattern`, is expected to be logged. When this
--- message is logged, it will not be printed, and the test case will
--- not abort.
--- 
--- This API may only be used with the old logging API (`g_log()` without
--- %G_LOG_USE_STRUCTURED defined). It will not work with the structured logging
--- API. See [Testing for Messages][testing-for-messages].
--- 
--- Use `g_test_assert_expected_messages()` to assert that all
--- previously-expected messages have been seen and suppressed.
--- 
--- You can call this multiple times in a row, if multiple messages are
--- expected as a result of a single call. (The messages must appear in
--- the same order as the calls to `g_test_expect_message()`.)
--- 
--- For example:
--- 
--- ```c
---   // `g_main_context_push_thread_default()` should fail if the
---   // context is already owned by another thread.
---   g_test_expect_message (G_LOG_DOMAIN,
---                          G_LOG_LEVEL_CRITICAL,
---                          "assertion*acquired_context*failed");
---   g_main_context_push_thread_default (bad_context);
---   g_test_assert_expected_messages ();
--- ```
--- 
--- Note that you cannot use this to test `g_error()` messages, since
--- `g_error()` intentionally never returns even if the program doesn't
--- abort; use `g_test_trap_subprocess()` in this case.
--- 
--- If messages at %G_LOG_LEVEL_DEBUG are emitted, but not explicitly
--- expected via `g_test_expect_message()` then they will be ignored.
---
--- ---
---
---@param log_domain? string # the log domain of the message
---@param log_level GLib.LogLevelFlags # the log level of the message
---@param pattern string # a glob-style [pattern][glib-Glob-style-pattern-matching]
---@return nil
function GLib.test_expect_message(log_domain, log_level, pattern) end

--- # function GLib.test_fail()
---
--- Indicates that a test failed. This function can be called
--- multiple times from the same test. You can use this function
--- if your test failed in a recoverable way.
--- 
--- Do not use this function if the failure of a test could cause
--- other tests to malfunction.
--- 
--- Calling this function will not stop the test from running, you
--- need to return from the test function yourself. So you can
--- produce additional diagnostic messages or even continue running
--- the test.
--- 
--- If not called from inside a test, this function does nothing.
--- 
--- Note that unlike `g_test_skip()` and `g_test_incomplete()`, this
--- function does not log a message alongside the test failure.
--- If details of the test failure are available, either log them with
--- `g_test_message()` before `g_test_fail()`, or use `g_test_fail_printf()`
--- instead.
---
--- ---
---
---@return nil
function GLib.test_fail() end

--- # function GLib.test_failed()
---
--- Returns whether a test has already failed. This will
--- be the case when `g_test_fail()`, `g_test_incomplete()`
--- or `g_test_skip()` have been called, but also if an
--- assertion has failed.
--- 
--- This can be useful to return early from a test if
--- continuing after a failed assertion might be harmful.
--- 
--- The return value of this function is only meaningful
--- if it is called from inside a test function.
---
--- ---
---
---@return (boolean|nil) # `true` if the test has failed
function GLib.test_failed() end

--- # function GLib.test_get_dir()
---
--- Gets the pathname of the directory containing test files of the type
--- specified by `file_type`.
--- 
--- This is approximately the same as calling g_test_build_filename("."),
--- but you don't need to free the return value.
---
--- ---
---
---@param file_type GLib.TestFileType # the type of file (built vs. distributed)
---@return string # the path of the directory, owned by GLib
function GLib.test_get_dir(file_type) end

--- # function GLib.test_get_path()
---
--- Gets the test path for the test currently being run.
--- 
--- In essence, it will be the same string passed as the first argument to
--- e.g. `g_test_add()` when the test was added.
--- 
--- This function returns a valid string only within a test function.
--- 
--- Note that this is a test path, not a file system path.
---
--- ---
---
---@return string # the test path for the test currently being run
function GLib.test_get_path() end

--- # function GLib.test_incomplete()
---
--- Indicates that a test failed because of some incomplete
--- functionality. This function can be called multiple times
--- from the same test.
--- 
--- Calling this function will not stop the test from running, you
--- need to return from the test function yourself. So you can
--- produce additional diagnostic messages or even continue running
--- the test.
--- 
--- If not called from inside a test, this function does nothing.
---
--- ---
---
---@param msg? string # explanation
---@return nil
function GLib.test_incomplete(msg) end

--- # function GLib.test_log_type_name()
---
---@param log_type GLib.TestLogType
---@return string
function GLib.test_log_type_name(log_type) end

--- # function GLib.test_queue_destroy()
---
--- This function enqueus a callback `destroy_func` to be executed
--- during the next test case teardown phase. This is most useful
--- to auto destruct allocated test resources at the end of a test run.
--- Resources are released in reverse queue order, that means enqueueing
--- callback A before callback B will cause B() to be called before
--- A() during teardown.
---
--- ---
---
---@param destroy_func GLib.DestroyNotify # Destroy callback for teardown phase.
---@param destroy_data? userdata # Destroy callback data.
---@return nil
function GLib.test_queue_destroy(destroy_func, destroy_data) end

--- # function GLib.test_queue_free()
---
--- Enqueue a pointer to be released with `g_free()` during the next
--- teardown phase. This is equivalent to calling `g_test_queue_destroy()`
--- with a destroy callback of `g_free()`.
---
--- ---
---
---@param gfree_pointer? userdata # the pointer to be stored.
---@return nil
function GLib.test_queue_free(gfree_pointer) end

--- # function GLib.test_rand_double()
---
--- Get a reproducible random floating point number,
--- see `g_test_rand_int()` for details on test case random numbers.
---
--- ---
---
---@return number # a random number from the seeded random number generator.
function GLib.test_rand_double() end

--- # function GLib.test_rand_double_range()
---
--- Get a reproducible random floating pointer number out of a specified range,
--- see `g_test_rand_int()` for details on test case random numbers.
---
--- ---
---
---@param range_start number # the minimum value returned by this function
---@param range_end number # the minimum value not returned by this function
---@return number # a number with `range_start` <= number < `range_end`.
function GLib.test_rand_double_range(range_start, range_end) end

--- # function GLib.test_rand_int()
---
--- Get a reproducible random integer number.
--- 
--- The random numbers generated by the g_test_rand_*() family of functions
--- change with every new test program start, unless the --seed option is
--- given when starting test programs.
--- 
--- For individual test cases however, the random number generator is
--- reseeded, to avoid dependencies between tests and to make --seed
--- effective for all test cases.
---
--- ---
---
---@return integer # a random number from the seeded random number generator.
function GLib.test_rand_int() end

--- # function GLib.test_rand_int_range()
---
--- Get a reproducible random integer number out of a specified range,
--- see `g_test_rand_int()` for details on test case random numbers.
---
--- ---
---
---@param begin integer # the minimum value returned by this function
---@param end__ integer # the smallest value not to be returned by this function
---@return integer # a number with `begin` <= number < `end`.
function GLib.test_rand_int_range(begin, end__) end

--- # function GLib.test_run()
---
--- Runs all tests under the toplevel suite which can be retrieved
--- with `g_test_get_root()`. Similar to `g_test_run_suite()`, the test
--- cases to be run are filtered according to test path arguments
--- (`-p testpath` and `-s testpath`) as parsed by `g_test_init()`.
--- `g_test_run_suite()` or `g_test_run()` may only be called once in a
--- program.
--- 
--- In general, the tests and sub-suites within each suite are run in
--- the order in which they are defined. However, note that prior to
--- GLib 2.36, there was a bug in the `g_test_add_*`
--- functions which caused them to create multiple suites with the same
--- name, meaning that if you created tests "/foo/simple",
--- "/bar/simple", and "/foo/using-bar" in that order, they would get
--- run in that order (since `g_test_run()` would run the first "/foo"
--- suite, then the "/bar" suite, then the second "/foo" suite). As of
--- 2.36, this bug is fixed, and adding the tests in that order would
--- result in a running order of "/foo/simple", "/foo/using-bar",
--- "/bar/simple". If this new ordering is sub-optimal (because it puts
--- more-complicated tests before simpler ones, making it harder to
--- figure out exactly what has failed), you can fix it by changing the
--- test paths to group tests by suite in a way that will result in the
--- desired running order. Eg, "/simple/foo", "/simple/bar",
--- "/complex/foo-using-bar".
--- 
--- However, you should never make the actual result of a test depend
--- on the order that tests are run in. If you need to ensure that some
--- particular code runs before or after a given test case, use
--- `g_test_add()`, which lets you specify setup and teardown functions.
--- 
--- If all tests are skipped or marked as incomplete (expected failures),
--- this function will return 0 if producing TAP output, or 77 (treated
--- as "skip test" by Automake) otherwise.
---
--- ---
---
---@return integer # 0 on success, 1 on failure (assuming it returns at all), 0 or 77 if all tests were skipped with `g_test_skip()` and/or `g_test_incomplete()`
function GLib.test_run() end

--- # function GLib.test_run_suite()
---
--- Execute the tests within `suite` and all nested `GTestSuites`.
--- The test suites to be executed are filtered according to
--- test path arguments (`-p testpath` and `-s testpath`) as parsed by
--- `g_test_init()`. See the `g_test_run()` documentation for more
--- information on the order that tests are run in.
--- 
--- `g_test_run_suite()` or `g_test_run()` may only be called once
--- in a program.
---
--- ---
---
---@param suite GLib.TestSuite # a `GTestSuite`
---@return integer # 0 on success
function GLib.test_run_suite(suite) end

--- # function GLib.test_set_nonfatal_assertions()
---
--- Changes the behaviour of the various `g_assert_*()` macros,
--- `g_test_assert_expected_messages()` and the various
--- `g_test_trap_assert_*()` macros to not abort to program, but instead
--- call `g_test_fail()` and continue. (This also changes the behavior of
--- `g_test_fail()` so that it will not cause the test program to abort
--- after completing the failed test.)
--- 
--- Note that the `g_assert_not_reached()` and `g_assert()` macros are not
--- affected by this.
--- 
--- This function can only be called after `g_test_init()`.
---
--- ---
---
---@return nil
function GLib.test_set_nonfatal_assertions() end

--- # function GLib.test_skip()
---
--- Indicates that a test was skipped.
--- 
--- Calling this function will not stop the test from running, you
--- need to return from the test function yourself. So you can
--- produce additional diagnostic messages or even continue running
--- the test.
--- 
--- If not called from inside a test, this function does nothing.
---
--- ---
---
---@param msg? string # explanation
---@return nil
function GLib.test_skip(msg) end

--- # function GLib.test_subprocess()
---
--- Returns `true` (after `g_test_init()` has been called) if the test
--- program is running under `g_test_trap_subprocess()`.
---
--- ---
---
---@return (boolean|nil) # `true` if the test program is running under `g_test_trap_subprocess()`.
function GLib.test_subprocess() end

--- # function GLib.test_summary()
---
--- Set the summary for a test, which describes what the test checks, and how it
--- goes about checking it. This may be included in test report output, and is
--- useful documentation for anyone reading the source code or modifying a test
--- in future. It must be a single line.
--- 
--- This should be called at the top of a test function.
--- 
--- For example:
--- ```c
--- static void
--- test_array_sort (void)
--- {
---   g_test_summary ("Test `my_array_sort()` sorts the array correctly and stably, "
---                   "including testing zero length and one-element arrays.");
--- 
---   …
--- }
--- ```
---
--- ---
---
---@param summary string # One or two sentences summarising what the test checks, and how it checks it.
---@return nil
function GLib.test_summary(summary) end

--- # function GLib.test_timer_elapsed()
---
--- Get the number of seconds since the last start of the timer with
--- `g_test_timer_start()`.
---
--- ---
---
---@return number # the time since the last start of the timer in seconds, as a double
function GLib.test_timer_elapsed() end

--- # function GLib.test_timer_last()
---
--- Report the last result of `g_test_timer_elapsed()`.
---
--- ---
---
---@return number # the last result of `g_test_timer_elapsed()`, as a double
function GLib.test_timer_last() end

--- # function GLib.test_timer_start()
---
--- Start a timing test. Call `g_test_timer_elapsed()` when the task is supposed
--- to be done. Call this function again to restart the timer.
---
--- ---
---
---@return nil
function GLib.test_timer_start() end

--- # function GLib.test_trap_assertions()
---
---@param domain string
---@param file string
---@param line integer
---@param func string
---@param assertion_flags integer
---@param pattern string
---@return nil
function GLib.test_trap_assertions(domain, file, line, func, assertion_flags, pattern) end

--- # function GLib.test_trap_fork()
---
--- Fork the current test program to execute a test case that might
--- not return or that might abort.
--- 
--- If `usec_timeout` is non-0, the forked test case is aborted and
--- considered failing if its run time exceeds it.
--- 
--- The forking behavior can be configured with the `GTestTrapFlags` flags.
--- 
--- In the following example, the test code forks, the forked child
--- process produces some sample output and exits successfully.
--- The forking parent process then asserts successful child program
--- termination and validates child program outputs.
--- 
--- ```c
---   static void
---   test_fork_patterns (void)
---   {
---     if (g_test_trap_fork (0, G_TEST_TRAP_SILENCE_STDOUT | G_TEST_TRAP_SILENCE_STDERR))
---       {
---         g_print ("some stdout text: somagic17\n");
---         g_printerr ("some stderr text: semagic43\n");
---         exit (0); // successful test run
---       }
---     g_test_trap_assert_passed ();
---     g_test_trap_assert_stdout ("*somagic17*");
---     g_test_trap_assert_stderr ("*semagic43*");
---   }
--- ```
---
--- ---
---
---@param usec_timeout integer # Timeout for the forked test in micro seconds.
---@param test_trap_flags GLib.TestTrapFlags # Flags to modify forking behaviour.
---@return (boolean|nil) # `true` for the forked child and `false` for the executing parent process.
function GLib.test_trap_fork(usec_timeout, test_trap_flags) end

--- # function GLib.test_trap_has_passed()
---
--- Check the result of the last `g_test_trap_subprocess()` call.
---
--- ---
---
---@return (boolean|nil) # `true` if the last test subprocess terminated successfully.
function GLib.test_trap_has_passed() end

--- # function GLib.test_trap_reached_timeout()
---
--- Check the result of the last `g_test_trap_subprocess()` call.
---
--- ---
---
---@return (boolean|nil) # `true` if the last test subprocess got killed due to a timeout.
function GLib.test_trap_reached_timeout() end

--- # function GLib.test_trap_subprocess()
---
--- Respawns the test program to run only `test_path` in a subprocess.
--- This can be used for a test case that might not return, or that
--- might abort.
--- 
--- If `test_path` is `nil` then the same test is re-run in a subprocess.
--- You can use `g_test_subprocess()` to determine whether the test is in
--- a subprocess or not.
--- 
--- `test_path` can also be the name of the parent test, followed by
--- "`/subprocess/`" and then a name for the specific subtest (or just
--- ending with "`/subprocess`" if the test only has one child test);
--- tests with names of this form will automatically be skipped in the
--- parent process.
--- 
--- If `usec_timeout` is non-0, the test subprocess is aborted and
--- considered failing if its run time exceeds it.
--- 
--- The subprocess behavior can be configured with the
--- `GTestSubprocessFlags` flags.
--- 
--- You can use methods such as `g_test_trap_assert_passed()`,
--- `g_test_trap_assert_failed()`, and `g_test_trap_assert_stderr()` to
--- check the results of the subprocess. (But note that
--- `g_test_trap_assert_stdout()` and `g_test_trap_assert_stderr()`
--- cannot be used if `test_flags` specifies that the child should
--- inherit the parent stdout/stderr.)
--- 
--- If your `main ()` needs to behave differently in
--- the subprocess, you can call `g_test_subprocess()` (after calling
--- `g_test_init()`) to see whether you are in a subprocess.
--- 
--- The following example tests that calling
--- `my_object_new(1000000)` will abort with an error
--- message.
--- 
--- ```c
---   static void
---   test_create_large_object (void)
---   {
---     if (g_test_subprocess ())
---       {
---         my_object_new (1000000);
---         return;
---       }
--- 
---     // Reruns this same test in a subprocess
---     g_test_trap_subprocess (NULL, 0, G_TEST_SUBPROCESS_DEFAULT);
---     g_test_trap_assert_failed ();
---     g_test_trap_assert_stderr ("*ERROR*too large*");
---   }
--- 
---   int
---   main (int argc, char **argv)
---   {
---     g_test_init (&argc, &argv, NULL);
--- 
---     g_test_add_func ("/myobject/create_large_object",
---                      test_create_large_object);
---     return g_test_run ();
---   }
--- ```
---
--- ---
---
---@param test_path? string # Test to run in a subprocess
---@param usec_timeout integer # Timeout for the subprocess test in micro seconds.
---@param test_flags GLib.TestSubprocessFlags # Flags to modify subprocess behaviour.
---@return nil
function GLib.test_trap_subprocess(test_path, usec_timeout, test_flags) end

--- # function GLib.thread_error_quark()
---
---@return GLib.Quark
function GLib.thread_error_quark() end

--- # function GLib.thread_exit()
---
--- Terminates the current thread.
--- 
--- If another thread is waiting for us using `g_thread_join()` then the
--- waiting thread will be woken up and get `retval` as the return value
--- of `g_thread_join()`.
--- 
--- Calling `g_thread_exit()` with a parameter `retval` is equivalent to
--- returning `retval` from the function `func`, as given to `g_thread_new()`.
--- 
--- You must only call `g_thread_exit()` from a thread that you created
--- yourself with `g_thread_new()` or related APIs. You must not call
--- this function from a thread created with another threading library
--- or or from within a `GThreadPool`.
---
--- ---
---
---@param retval? userdata # the return value of this thread
---@return nil
function GLib.thread_exit(retval) end

--- # function GLib.thread_pool_get_max_idle_time()
---
--- This function will return the maximum `interval` that a
--- thread will wait in the thread pool for new tasks before
--- being stopped.
--- 
--- If this function returns 0, threads waiting in the thread
--- pool for new work are not stopped.
---
--- ---
---
---@return integer # the maximum `interval` (milliseconds) to wait for new tasks in the thread pool before stopping the thread
function GLib.thread_pool_get_max_idle_time() end

--- # function GLib.thread_pool_get_max_unused_threads()
---
--- Returns the maximal allowed number of unused threads.
---
--- ---
---
---@return integer # the maximal number of unused threads
function GLib.thread_pool_get_max_unused_threads() end

--- # function GLib.thread_pool_get_num_unused_threads()
---
--- Returns the number of currently unused threads.
---
--- ---
---
---@return integer # the number of currently unused threads
function GLib.thread_pool_get_num_unused_threads() end

--- # function GLib.thread_pool_set_max_idle_time()
---
--- This function will set the maximum `interval` that a thread
--- waiting in the pool for new tasks can be idle for before
--- being stopped. This function is similar to calling
--- `g_thread_pool_stop_unused_threads()` on a regular timeout,
--- except this is done on a per thread basis.
--- 
--- By setting `interval` to 0, idle threads will not be stopped.
--- 
--- The default value is 15000 (15 seconds).
---
--- ---
---
---@param interval integer # the maximum `interval` (in milliseconds) a thread can be idle
---@return nil
function GLib.thread_pool_set_max_idle_time(interval) end

--- # function GLib.thread_pool_set_max_unused_threads()
---
--- Sets the maximal number of unused threads to `max_threads`.
--- If `max_threads` is -1, no limit is imposed on the number
--- of unused threads.
--- 
--- The default value is 2.
---
--- ---
---
---@param max_threads integer # maximal number of unused threads
---@return nil
function GLib.thread_pool_set_max_unused_threads(max_threads) end

--- # function GLib.thread_pool_stop_unused_threads()
---
--- Stops all currently unused threads. This does not change the
--- maximal number of unused threads. This function can be used to
--- regularly stop all unused threads e.g. from `g_timeout_add()`.
---
--- ---
---
---@return nil
function GLib.thread_pool_stop_unused_threads() end

--- # function GLib.thread_self()
---
--- This function returns the `GThread` corresponding to the
--- current thread. Note that this function does not increase
--- the reference count of the returned struct.
--- 
--- This function will return a `GThread` even for threads that
--- were not created by GLib (i.e. those created by other threading
--- APIs). This may be useful for thread identification purposes
--- (i.e. comparisons) but you must not use GLib functions (such
--- as `g_thread_join()`) on these threads.
---
--- ---
---
---@return GLib.Thread # the `GThread` representing the current thread
function GLib.thread_self() end

--- # function GLib.thread_yield()
---
--- Causes the calling thread to voluntarily relinquish the CPU, so
--- that other threads can run.
--- 
--- This function is often used as a method to make busy wait less evil.
---
--- ---
---
---@return nil
function GLib.thread_yield() end

--- # function GLib.time_val_from_iso8601()
---
--- Converts a string containing an ISO 8601 encoded date and time
--- to a `GTimeVal` and puts it into `time_`.
--- 
--- `iso_date` must include year, month, day, hours, minutes, and
--- seconds. It can optionally include fractions of a second and a time
--- zone indicator. (In the absence of any time zone indication, the
--- timestamp is assumed to be in local time.)
--- 
--- Any leading or trailing space in `iso_date` is ignored.
--- 
--- This function was deprecated, along with `GTimeVal` itself, in GLib 2.62.
--- Equivalent functionality is available using code like:
--- ```c
--- GDateTime *dt = g_date_time_new_from_iso8601 (iso8601_string, NULL);
--- gint64 time_val = g_date_time_to_unix (dt);
--- g_date_time_unref (dt);
--- ```
---
--- ---
---
---@param iso_date string # an ISO 8601 encoded date string
---@param time_ GLib.TimeVal # a `GTimeVal`
---@return (boolean|nil) # `true` if the conversion was successful.
function GLib.time_val_from_iso8601(iso_date, time_) end

--- # function GLib.timeout_add()
---
--- Sets a function to be called at regular intervals, with the given
--- priority.  The function is called repeatedly until it returns
--- `false`, at which point the timeout is automatically destroyed and
--- the function will not be called again.  The `notify` function is
--- called when the timeout is destroyed.  The first call to the
--- function will be at the end of the first `interval`.
--- 
--- Note that timeout functions may be delayed, due to the processing of other
--- event sources. Thus they should not be relied on for precise timing.
--- After each call to the timeout function, the time of the next
--- timeout is recalculated based on the current time and the given interval
--- (it does not try to 'catch up' time lost in delays).
--- 
--- See [memory management of sources][mainloop-memory-management] for details
--- on how to handle the return value and memory management of `data`.
--- 
--- This internally creates a main loop source using `g_timeout_source_new()`
--- and attaches it to the global `GMainContext` using `g_source_attach()`, so
--- the callback will be invoked in whichever thread is running that main
--- context. You can do these steps manually if you need greater control or to
--- use a custom main context.
--- 
--- The interval given is in terms of monotonic time, not wall clock time.
--- See `g_get_monotonic_time()`.
---
--- ---
---
---@param priority integer # the priority of the timeout source. Typically this will be in the range between %G_PRIORITY_DEFAULT and %G_PRIORITY_HIGH.
---@param interval integer # the time between calls to the function, in milliseconds (1/1000ths of a second)
---@param function__ GLib.SourceFunc # function to call
---@param data? userdata # data to pass to `function`
---@param notify? GLib.DestroyNotify # function to call when the timeout is removed, or `nil`
---@return integer # the ID (greater than 0) of the event source.
function GLib.timeout_add(priority, interval, function__, data, notify) end

--- # function GLib.timeout_add_seconds()
---
--- Sets a function to be called at regular intervals, with `priority`.
--- 
--- The function is called repeatedly until it returns %G_SOURCE_REMOVE
--- or `false`, at which point the timeout is automatically destroyed and
--- the function will not be called again.
--- 
--- Unlike `g_timeout_add()`, this function operates at whole second granularity.
--- The initial starting point of the timer is determined by the implementation
--- and the implementation is expected to group multiple timers together so that
--- they fire all at the same time. To allow this grouping, the `interval` to the
--- first timer is rounded and can deviate up to one second from the specified
--- interval. Subsequent timer iterations will generally run at the specified
--- interval.
--- 
--- Note that timeout functions may be delayed, due to the processing of other
--- event sources. Thus they should not be relied on for precise timing.
--- After each call to the timeout function, the time of the next
--- timeout is recalculated based on the current time and the given `interval`
--- 
--- See [memory management of sources][mainloop-memory-management] for details
--- on how to handle the return value and memory management of `data`.
--- 
--- If you want timing more precise than whole seconds, use `g_timeout_add()`
--- instead.
--- 
--- The grouping of timers to fire at the same time results in a more power
--- and CPU efficient behavior so if your timer is in multiples of seconds
--- and you don't require the first timer exactly one second from now, the
--- use of `g_timeout_add_seconds()` is preferred over `g_timeout_add()`.
--- 
--- This internally creates a main loop source using
--- `g_timeout_source_new_seconds()` and attaches it to the main loop context
--- using `g_source_attach()`. You can do these steps manually if you need
--- greater control.
--- 
--- It is safe to call this function from any thread.
--- 
--- The interval given is in terms of monotonic time, not wall clock
--- time.  See `g_get_monotonic_time()`.
---
--- ---
---
---@param priority integer # the priority of the timeout source. Typically this will be in the range between %G_PRIORITY_DEFAULT and %G_PRIORITY_HIGH.
---@param interval integer # the time between calls to the function, in seconds
---@param function__ GLib.SourceFunc # function to call
---@param data? userdata # data to pass to `function`
---@param notify? GLib.DestroyNotify # function to call when the timeout is removed, or `nil`
---@return integer # the ID (greater than 0) of the event source.
function GLib.timeout_add_seconds(priority, interval, function__, data, notify) end

--- # function GLib.timeout_source_new()
---
--- Creates a new timeout source.
--- 
--- The source will not initially be associated with any `GMainContext`
--- and must be added to one with `g_source_attach()` before it will be
--- executed.
--- 
--- The interval given is in terms of monotonic time, not wall clock
--- time.  See `g_get_monotonic_time()`.
---
--- ---
---
---@param interval integer # the timeout interval in milliseconds.
---@return GLib.Source # the newly-created timeout source
function GLib.timeout_source_new(interval) end

--- # function GLib.timeout_source_new_seconds()
---
--- Creates a new timeout source.
--- 
--- The source will not initially be associated with any `GMainContext`
--- and must be added to one with `g_source_attach()` before it will be
--- executed.
--- 
--- The scheduling granularity/accuracy of this timeout source will be
--- in seconds.
--- 
--- The interval given is in terms of monotonic time, not wall clock time.
--- See `g_get_monotonic_time()`.
---
--- ---
---
---@param interval integer # the timeout interval in seconds
---@return GLib.Source # the newly-created timeout source
function GLib.timeout_source_new_seconds(interval) end

--- # function GLib.trash_stack_height()
---
--- Returns the height of a `GTrashStack`.
--- 
--- Note that execution of this function is of O(N) complexity
--- where N denotes the number of items on the stack.
---
--- ---
---
---@param stack_p GLib.TrashStack # a `GTrashStack`
---@return integer # the height of the stack
function GLib.trash_stack_height(stack_p) end

--- # function GLib.trash_stack_peek()
---
--- Returns the element at the top of a `GTrashStack`
--- which may be `nil`.
---
--- ---
---
---@param stack_p GLib.TrashStack # a `GTrashStack`
---@return userdata # the element at the top of the stack
function GLib.trash_stack_peek(stack_p) end

--- # function GLib.trash_stack_pop()
---
--- Pops a piece of memory off a `GTrashStack`.
---
--- ---
---
---@param stack_p GLib.TrashStack # a `GTrashStack`
---@return userdata # the element at the top of the stack
function GLib.trash_stack_pop(stack_p) end

--- # function GLib.trash_stack_push()
---
--- Pushes a piece of memory onto a `GTrashStack`.
---
--- ---
---
---@param stack_p GLib.TrashStack # a `GTrashStack`
---@param data_p userdata # the piece of memory to push on the stack
---@return nil
function GLib.trash_stack_push(stack_p, data_p) end

--- # function GLib.try_malloc()
---
--- Attempts to allocate `n_bytes`, and returns `nil` on failure.
--- Contrast with `g_malloc()`, which aborts the program on failure.
---
--- ---
---
---@param n_bytes integer # number of bytes to allocate.
---@return userdata # the allocated memory, or `nil`.
function GLib.try_malloc(n_bytes) end

--- # function GLib.try_malloc0()
---
--- Attempts to allocate `n_bytes`, initialized to 0's, and returns `nil` on
--- failure. Contrast with g_malloc0(), which aborts the program on failure.
---
--- ---
---
---@param n_bytes integer # number of bytes to allocate
---@return userdata # the allocated memory, or `nil`
function GLib.try_malloc0(n_bytes) end

--- # function GLib.try_malloc0_n()
---
--- This function is similar to g_try_malloc0(), allocating (`n_blocks` * `n_block_bytes`) bytes,
--- but care is taken to detect possible overflow during multiplication.
---
--- ---
---
---@param n_blocks integer # the number of blocks to allocate
---@param n_block_bytes integer # the size of each block in bytes
---@return userdata # the allocated memory, or `nil`
function GLib.try_malloc0_n(n_blocks, n_block_bytes) end

--- # function GLib.try_malloc_n()
---
--- This function is similar to `g_try_malloc()`, allocating (`n_blocks` * `n_block_bytes`) bytes,
--- but care is taken to detect possible overflow during multiplication.
---
--- ---
---
---@param n_blocks integer # the number of blocks to allocate
---@param n_block_bytes integer # the size of each block in bytes
---@return userdata # the allocated memory, or `nil`.
function GLib.try_malloc_n(n_blocks, n_block_bytes) end

--- # function GLib.try_realloc()
---
--- Attempts to realloc `mem` to a new size, `n_bytes`, and returns `nil`
--- on failure. Contrast with `g_realloc()`, which aborts the program
--- on failure.
--- 
--- If `mem` is `nil`, behaves the same as `g_try_malloc()`.
---
--- ---
---
---@param mem? userdata # previously-allocated memory, or `nil`.
---@param n_bytes integer # number of bytes to allocate.
---@return userdata # the allocated memory, or `nil`.
function GLib.try_realloc(mem, n_bytes) end

--- # function GLib.try_realloc_n()
---
--- This function is similar to `g_try_realloc()`, allocating (`n_blocks` * `n_block_bytes`) bytes,
--- but care is taken to detect possible overflow during multiplication.
---
--- ---
---
---@param mem? userdata # previously-allocated memory, or `nil`.
---@param n_blocks integer # the number of blocks to allocate
---@param n_block_bytes integer # the size of each block in bytes
---@return userdata # the allocated memory, or `nil`.
function GLib.try_realloc_n(mem, n_blocks, n_block_bytes) end

--- # function GLib.ucs4_to_utf16()
---
--- Convert a string from UCS-4 to UTF-16. A 0 character will be
--- added to the result after the converted text.
---
--- ---
---
---@param str unknown[] # a UCS-4 encoded string
---@param len integer # the maximum length (number of characters) of `str` to use. If `len` < 0, then the string is nul-terminated.
---@param items_read? integer # location to store number of bytes read, or `nil`. If an error occurs then the index of the invalid input is stored here.
---@param items_written? integer # location to store number of `gunichar2` written, or `nil`. The value stored here does not include the trailing 0.
---@return integer # a pointer to a newly allocated UTF-16 string. This value must be freed with `g_free()`. If an error occurs, `nil` will be returned and `error` set.
function GLib.ucs4_to_utf16(str, len, items_read, items_written) end

--- # function GLib.ucs4_to_utf8()
---
--- Convert a string from a 32-bit fixed width representation as UCS-4.
--- to UTF-8. The result will be terminated with a 0 byte.
---
--- ---
---
---@param str unknown[] # a UCS-4 encoded string
---@param len integer # the maximum length (number of characters) of `str` to use. If `len` < 0, then the string is nul-terminated.
---@param items_read? integer # location to store number of characters read, or `nil`.
---@param items_written? integer # location to store number of bytes written or `nil`. The value here stored does not include the trailing 0 byte.
---@return string # a pointer to a newly allocated UTF-8 string. This value must be freed with `g_free()`. If an error occurs, `nil` will be returned and `error` set. In that case, `items_read` will be set to the position of the first invalid input character.
function GLib.ucs4_to_utf8(str, len, items_read, items_written) end

--- # function GLib.unichar_break_type()
---
--- Determines the break type of `c`. `c` should be a Unicode character
--- (to derive a character from UTF-8 encoded text, use
--- g_utf8`_get_char()`). The break type is used to find word and line
--- breaks ("text boundaries"), Pango implements the Unicode boundary
--- resolution algorithms and normally you would use a function such
--- as `pango_break()` instead of caring about break types yourself.
---
--- ---
---
---@param c integer # a Unicode character
---@return GLib.UnicodeBreakType # the break type of `c`
function GLib.unichar_break_type(c) end

--- # function GLib.unichar_combining_class()
---
--- Determines the canonical combining class of a Unicode character.
---
--- ---
---
---@param uc integer # a Unicode character
---@return integer # the combining class of the character
function GLib.unichar_combining_class(uc) end

--- # function GLib.unichar_compose()
---
--- Performs a single composition step of the
--- Unicode canonical composition algorithm.
--- 
--- This function includes algorithmic Hangul Jamo composition,
--- but it is not exactly the inverse of `g_unichar_decompose()`.
--- No composition can have either of `a` or `b` equal to zero.
--- To be precise, this function composes if and only if
--- there exists a Primary Composite P which is canonically
--- equivalent to the sequence <`a`,`b`>.  See the Unicode
--- Standard for the definition of Primary Composite.
--- 
--- If `a` and `b` do not compose a new character, `ch` is set to zero.
--- 
--- See
--- [UAX#15](http://unicode.org/reports/tr15/)
--- for details.
---
--- ---
---
---@param a integer # a Unicode character
---@param b integer # a Unicode character
---@param ch integer # return location for the composed character
---@return (boolean|nil) # `true` if the characters could be composed
function GLib.unichar_compose(a, b, ch) end

--- # function GLib.unichar_decompose()
---
--- Performs a single decomposition step of the
--- Unicode canonical decomposition algorithm.
--- 
--- This function does not include compatibility
--- decompositions. It does, however, include algorithmic
--- Hangul Jamo decomposition, as well as 'singleton'
--- decompositions which replace a character by a single
--- other character. In the case of singletons *`b` will
--- be set to zero.
--- 
--- If `ch` is not decomposable, *`a` is set to `ch` and *`b`
--- is set to zero.
--- 
--- Note that the way Unicode decomposition pairs are
--- defined, it is guaranteed that `b` would not decompose
--- further, but `a` may itself decompose.  To get the full
--- canonical decomposition for `ch`, one would need to
--- recursively call this function on `a`.  Or use
--- `g_unichar_fully_decompose()`.
--- 
--- See
--- [UAX#15](http://unicode.org/reports/tr15/)
--- for details.
---
--- ---
---
---@param ch integer # a Unicode character
---@param a integer # return location for the first component of `ch`
---@param b integer # return location for the second component of `ch`
---@return (boolean|nil) # `true` if the character could be decomposed
function GLib.unichar_decompose(ch, a, b) end

--- # function GLib.unichar_digit_value()
---
--- Determines the numeric value of a character as a decimal
--- digit.
---
--- ---
---
---@param c integer # a Unicode character
---@return integer # If `c` is a decimal digit (according to `g_unichar_isdigit()`), its numeric value. Otherwise, -1.
function GLib.unichar_digit_value(c) end

--- # function GLib.unichar_fully_decompose()
---
--- Computes the canonical or compatibility decomposition of a
--- Unicode character.  For compatibility decomposition,
--- pass `true` for `compat`; for canonical decomposition
--- pass `false` for `compat`.
--- 
--- The decomposed sequence is placed in `result`.  Only up to
--- `result_len` characters are written into `result`.  The length
--- of the full decomposition (irrespective of `result_len`) is
--- returned by the function.  For canonical decomposition,
--- currently all decompositions are of length at most 4, but
--- this may change in the future (very unlikely though).
--- At any rate, Unicode does guarantee that a buffer of length
--- 18 is always enough for both compatibility and canonical
--- decompositions, so that is the size recommended. This is provided
--- as %G_UNICHAR_MAX_DECOMPOSITION_LENGTH.
--- 
--- See
--- [UAX#15](http://unicode.org/reports/tr15/)
--- for details.
---
--- ---
---
---@param ch integer # a Unicode character.
---@param compat (boolean|nil) # whether perform canonical or compatibility decomposition
---@param result? integer # location to store decomposed result, or `nil`
---@param result_len integer # length of `result`
---@return integer # the length of the full decomposition.
function GLib.unichar_fully_decompose(ch, compat, result, result_len) end

--- # function GLib.unichar_get_mirror_char()
---
--- In Unicode, some characters are "mirrored". This means that their
--- images are mirrored horizontally in text that is laid out from right
--- to left. For instance, "(" would become its mirror image, ")", in
--- right-to-left text.
--- 
--- If `ch` has the Unicode mirrored property and there is another unicode
--- character that typically has a glyph that is the mirror image of `ch`'s
--- glyph and `mirrored_ch` is set, it puts that character in the address
--- pointed to by `mirrored_ch`.  Otherwise the original character is put.
---
--- ---
---
---@param ch integer # a Unicode character
---@param mirrored_ch integer # location to store the mirrored character
---@return (boolean|nil) # `true` if `ch` has a mirrored character, `false` otherwise
function GLib.unichar_get_mirror_char(ch, mirrored_ch) end

--- # function GLib.unichar_get_script()
---
--- Looks up the `GUnicodeScript` for a particular character (as defined
--- by Unicode Standard Annex \#24). No check is made for `ch` being a
--- valid Unicode character; if you pass in invalid character, the
--- result is undefined.
--- 
--- This function is equivalent to `pango_script_for_unichar()` and the
--- two are interchangeable.
---
--- ---
---
---@param ch integer # a Unicode character
---@return GLib.UnicodeScript # the `GUnicodeScript` for the character.
function GLib.unichar_get_script(ch) end

--- # function GLib.unichar_isalnum()
---
--- Determines whether a character is alphanumeric.
--- Given some UTF-8 text, obtain a character value
--- with g_utf8`_get_char()`.
---
--- ---
---
---@param c integer # a Unicode character
---@return (boolean|nil) # `true` if `c` is an alphanumeric character
function GLib.unichar_isalnum(c) end

--- # function GLib.unichar_isalpha()
---
--- Determines whether a character is alphabetic (i.e. a letter).
--- Given some UTF-8 text, obtain a character value with
--- g_utf8`_get_char()`.
---
--- ---
---
---@param c integer # a Unicode character
---@return (boolean|nil) # `true` if `c` is an alphabetic character
function GLib.unichar_isalpha(c) end

--- # function GLib.unichar_iscntrl()
---
--- Determines whether a character is a control character.
--- Given some UTF-8 text, obtain a character value with
--- g_utf8`_get_char()`.
---
--- ---
---
---@param c integer # a Unicode character
---@return (boolean|nil) # `true` if `c` is a control character
function GLib.unichar_iscntrl(c) end

--- # function GLib.unichar_isdefined()
---
--- Determines if a given character is assigned in the Unicode
--- standard.
---
--- ---
---
---@param c integer # a Unicode character
---@return (boolean|nil) # `true` if the character has an assigned value
function GLib.unichar_isdefined(c) end

--- # function GLib.unichar_isdigit()
---
--- Determines whether a character is numeric (i.e. a digit).  This
--- covers ASCII 0-9 and also digits in other languages/scripts.  Given
--- some UTF-8 text, obtain a character value with g_utf8`_get_char()`.
---
--- ---
---
---@param c integer # a Unicode character
---@return (boolean|nil) # `true` if `c` is a digit
function GLib.unichar_isdigit(c) end

--- # function GLib.unichar_isgraph()
---
--- Determines whether a character is printable and not a space
--- (returns `false` for control characters, format characters, and
--- spaces). `g_unichar_isprint()` is similar, but returns `true` for
--- spaces. Given some UTF-8 text, obtain a character value with
--- g_utf8`_get_char()`.
---
--- ---
---
---@param c integer # a Unicode character
---@return (boolean|nil) # `true` if `c` is printable unless it's a space
function GLib.unichar_isgraph(c) end

--- # function GLib.unichar_islower()
---
--- Determines whether a character is a lowercase letter.
--- Given some UTF-8 text, obtain a character value with
--- g_utf8`_get_char()`.
---
--- ---
---
---@param c integer # a Unicode character
---@return (boolean|nil) # `true` if `c` is a lowercase letter
function GLib.unichar_islower(c) end

--- # function GLib.unichar_ismark()
---
--- Determines whether a character is a mark (non-spacing mark,
--- combining mark, or enclosing mark in Unicode speak).
--- Given some UTF-8 text, obtain a character value
--- with g_utf8`_get_char()`.
--- 
--- Note: in most cases where isalpha characters are allowed,
--- ismark characters should be allowed to as they are essential
--- for writing most European languages as well as many non-Latin
--- scripts.
---
--- ---
---
---@param c integer # a Unicode character
---@return (boolean|nil) # `true` if `c` is a mark character
function GLib.unichar_ismark(c) end

--- # function GLib.unichar_isprint()
---
--- Determines whether a character is printable.
--- Unlike `g_unichar_isgraph()`, returns `true` for spaces.
--- Given some UTF-8 text, obtain a character value with
--- g_utf8`_get_char()`.
---
--- ---
---
---@param c integer # a Unicode character
---@return (boolean|nil) # `true` if `c` is printable
function GLib.unichar_isprint(c) end

--- # function GLib.unichar_ispunct()
---
--- Determines whether a character is punctuation or a symbol.
--- Given some UTF-8 text, obtain a character value with
--- g_utf8`_get_char()`.
---
--- ---
---
---@param c integer # a Unicode character
---@return (boolean|nil) # `true` if `c` is a punctuation or symbol character
function GLib.unichar_ispunct(c) end

--- # function GLib.unichar_isspace()
---
--- Determines whether a character is a space, tab, or line separator
--- (newline, carriage return, etc.).  Given some UTF-8 text, obtain a
--- character value with g_utf8`_get_char()`.
--- 
--- (Note: don't use this to do word breaking; you have to use
--- Pango or equivalent to get word breaking right, the algorithm
--- is fairly complex.)
---
--- ---
---
---@param c integer # a Unicode character
---@return (boolean|nil) # `true` if `c` is a space character
function GLib.unichar_isspace(c) end

--- # function GLib.unichar_istitle()
---
--- Determines if a character is titlecase. Some characters in
--- Unicode which are composites, such as the DZ digraph
--- have three case variants instead of just two. The titlecase
--- form is used at the beginning of a word where only the
--- first letter is capitalized. The titlecase form of the DZ
--- digraph is U+01F2 LATIN CAPITAL LETTTER D WITH SMALL LETTER Z.
---
--- ---
---
---@param c integer # a Unicode character
---@return (boolean|nil) # `true` if the character is titlecase
function GLib.unichar_istitle(c) end

--- # function GLib.unichar_isupper()
---
--- Determines if a character is uppercase.
---
--- ---
---
---@param c integer # a Unicode character
---@return (boolean|nil) # `true` if `c` is an uppercase character
function GLib.unichar_isupper(c) end

--- # function GLib.unichar_iswide()
---
--- Determines if a character is typically rendered in a double-width
--- cell.
---
--- ---
---
---@param c integer # a Unicode character
---@return (boolean|nil) # `true` if the character is wide
function GLib.unichar_iswide(c) end

--- # function GLib.unichar_iswide_cjk()
---
--- Determines if a character is typically rendered in a double-width
--- cell under legacy East Asian locales.  If a character is wide according to
--- `g_unichar_iswide()`, then it is also reported wide with this function, but
--- the converse is not necessarily true. See the
--- [Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/)
--- for details.
--- 
--- If a character passes the `g_unichar_iswide()` test then it will also pass
--- this test, but not the other way around.  Note that some characters may
--- pass both this test and `g_unichar_iszerowidth()`.
---
--- ---
---
---@param c integer # a Unicode character
---@return (boolean|nil) # `true` if the character is wide in legacy East Asian locales
function GLib.unichar_iswide_cjk(c) end

--- # function GLib.unichar_isxdigit()
---
--- Determines if a character is a hexadecimal digit.
---
--- ---
---
---@param c integer # a Unicode character.
---@return (boolean|nil) # `true` if the character is a hexadecimal digit
function GLib.unichar_isxdigit(c) end

--- # function GLib.unichar_iszerowidth()
---
--- Determines if a given character typically takes zero width when rendered.
--- The return value is `true` for all non-spacing and enclosing marks
--- (e.g., combining accents), format characters, zero-width
--- space, but not U+00AD SOFT HYPHEN.
--- 
--- A typical use of this function is with one of `g_unichar_iswide()` or
--- `g_unichar_iswide_cjk()` to determine the number of cells a string occupies
--- when displayed on a grid display (terminals).  However, note that not all
--- terminals support zero-width rendering of zero-width marks.
---
--- ---
---
---@param c integer # a Unicode character
---@return (boolean|nil) # `true` if the character has zero width
function GLib.unichar_iszerowidth(c) end

--- # function GLib.unichar_to_utf8()
---
--- Converts a single character to UTF-8.
---
--- ---
---
---@param c integer # a Unicode character code
---@param outbuf? string # output buffer, must have at least 6 bytes of space. If `nil`, the length will be computed and returned and nothing will be written to `outbuf`.
---@return integer # number of bytes written
function GLib.unichar_to_utf8(c, outbuf) end

--- # function GLib.unichar_tolower()
---
--- Converts a character to lower case.
---
--- ---
---
---@param c integer # a Unicode character.
---@return integer # the result of converting `c` to lower case. If `c` is not an upperlower or titlecase character, or has no lowercase equivalent `c` is returned unchanged.
function GLib.unichar_tolower(c) end

--- # function GLib.unichar_totitle()
---
--- Converts a character to the titlecase.
---
--- ---
---
---@param c integer # a Unicode character
---@return integer # the result of converting `c` to titlecase. If `c` is not an uppercase or lowercase character, `c` is returned unchanged.
function GLib.unichar_totitle(c) end

--- # function GLib.unichar_toupper()
---
--- Converts a character to uppercase.
---
--- ---
---
---@param c integer # a Unicode character
---@return integer # the result of converting `c` to uppercase. If `c` is not a lowercase or titlecase character, or has no upper case equivalent `c` is returned unchanged.
function GLib.unichar_toupper(c) end

--- # function GLib.unichar_type()
---
--- Classifies a Unicode character by type.
---
--- ---
---
---@param c integer # a Unicode character
---@return GLib.UnicodeType # the type of the character.
function GLib.unichar_type(c) end

--- # function GLib.unichar_validate()
---
--- Checks whether `ch` is a valid Unicode character. Some possible
--- integer values of `ch` will not be valid. 0 is considered a valid
--- character, though it's normally a string terminator.
---
--- ---
---
---@param ch integer # a Unicode character
---@return (boolean|nil) # `true` if `ch` is a valid Unicode character
function GLib.unichar_validate(ch) end

--- # function GLib.unichar_xdigit_value()
---
--- Determines the numeric value of a character as a hexadecimal
--- digit.
---
--- ---
---
---@param c integer # a Unicode character
---@return integer # If `c` is a hex digit (according to `g_unichar_isxdigit()`), its numeric value. Otherwise, -1.
function GLib.unichar_xdigit_value(c) end

--- # function GLib.unicode_canonical_decomposition()
---
--- Computes the canonical decomposition of a Unicode character.
---
--- ---
---
---@param ch integer # a Unicode character.
---@param result_len integer # location to store the length of the return value.
---@return integer # a newly allocated string of Unicode characters. `result_len` is set to the resulting length of the string.
function GLib.unicode_canonical_decomposition(ch, result_len) end

--- # function GLib.unicode_canonical_ordering()
---
--- Computes the canonical ordering of a string in-place.
--- This rearranges decomposed characters in the string
--- according to their combining classes.  See the Unicode
--- manual for more information.
---
--- ---
---
---@param string unknown[] # a UCS-4 encoded string.
---@param len integer # the maximum length of `string` to use.
---@return nil
function GLib.unicode_canonical_ordering(string, len) end

--- # function GLib.unicode_script_from_iso15924()
---
--- Looks up the Unicode script for `iso15924`.  ISO 15924 assigns four-letter
--- codes to scripts.  For example, the code for Arabic is 'Arab'.
--- This function accepts four letter codes encoded as a `guint32` in a
--- big-endian fashion.  That is, the code expected for Arabic is
--- 0x41726162 (0x41 is ASCII code for 'A', 0x72 is ASCII code for 'r', etc).
--- 
--- See
--- [Codes for the representation of names of scripts](http://unicode.org/iso15924/codelists.html)
--- for details.
---
--- ---
---
---@param iso15924 integer # a Unicode script
---@return GLib.UnicodeScript # the Unicode script for `iso15924`, or of %G_UNICODE_SCRIPT_INVALID_CODE if `iso15924` is zero and %G_UNICODE_SCRIPT_UNKNOWN if `iso15924` is unknown.
function GLib.unicode_script_from_iso15924(iso15924) end

--- # function GLib.unicode_script_to_iso15924()
---
--- Looks up the ISO 15924 code for `script`.  ISO 15924 assigns four-letter
--- codes to scripts.  For example, the code for Arabic is 'Arab'.  The
--- four letter codes are encoded as a `guint32` by this function in a
--- big-endian fashion.  That is, the code returned for Arabic is
--- 0x41726162 (0x41 is ASCII code for 'A', 0x72 is ASCII code for 'r', etc).
--- 
--- See
--- [Codes for the representation of names of scripts](http://unicode.org/iso15924/codelists.html)
--- for details.
---
--- ---
---
---@param script GLib.UnicodeScript # a Unicode script
---@return integer # the ISO 15924 code for `script`, encoded as an integer, of zero if `script` is %G_UNICODE_SCRIPT_INVALID_CODE or ISO 15924 code 'Zzzz' (script code for UNKNOWN) if `script` is not understood.
function GLib.unicode_script_to_iso15924(script) end

--- # function GLib.unix_error_quark()
---
---@return GLib.Quark
function GLib.unix_error_quark() end

--- # function GLib.unix_fd_add_full()
---
--- Sets a function to be called when the IO condition, as specified by
--- `condition` becomes true for `fd`.
--- 
--- This is the same as `g_unix_fd_add()`, except that it allows you to
--- specify a non-default priority and a provide a `GDestroyNotify` for
--- `user_data`.
---
--- ---
---
---@param priority integer # the priority of the source
---@param fd integer # a file descriptor
---@param condition GLib.IOCondition # IO conditions to watch for on `fd`
---@param function__ GLib.UnixFDSourceFunc # a `GUnixFDSourceFunc`
---@param user_data? userdata # data to pass to `function`
---@param notify GLib.DestroyNotify # function to call when the idle is removed, or `nil`
---@return integer # the ID (greater than 0) of the event source
function GLib.unix_fd_add_full(priority, fd, condition, function__, user_data, notify) end

--- # function GLib.unix_fd_source_new()
---
--- Creates a `GSource` to watch for a particular IO condition on a file
--- descriptor.
--- 
--- The source will never close the fd -- you must do it yourself.
---
--- ---
---
---@param fd integer # a file descriptor
---@param condition GLib.IOCondition # IO conditions to watch for on `fd`
---@return GLib.Source # the newly created `GSource`
function GLib.unix_fd_source_new(fd, condition) end

--- # function GLib.unix_get_passwd_entry()
---
--- Get the `passwd` file entry for the given `user_name` using ``getpwnam_r()``.
--- This can fail if the given `user_name` doesn’t exist.
--- 
--- The returned `struct passwd` has been allocated using `g_malloc()` and should
--- be freed using `g_free()`. The strings referenced by the returned struct are
--- included in the same allocation, so are valid until the `struct passwd` is
--- freed.
--- 
--- This function is safe to call from multiple threads concurrently.
--- 
--- You will need to include `pwd.h` to get the definition of `struct passwd`.
---
--- ---
---
---@param user_name string # the username to get the passwd file entry for
---@return userdata # passwd entry, or `nil` on error; free the returned value with `g_free()`
function GLib.unix_get_passwd_entry(user_name) end

--- # function GLib.unix_open_pipe()
---
--- Similar to the UNIX `pipe()` call, but on modern systems like Linux
--- uses the pipe2() system call, which atomically creates a pipe with
--- the configured flags. The only supported flag currently is
--- %FD_CLOEXEC. If for example you want to configure %O_NONBLOCK, that
--- must still be done separately with `fcntl()`.
--- 
--- This function does not take %O_CLOEXEC, it takes %FD_CLOEXEC as if
--- for `fcntl()`; these are different on Linux/glibc.
---
--- ---
---
---@param fds unknown[] # Array of two integers
---@param flags integer # Bitfield of file descriptor flags, as for `fcntl()`
---@return (boolean|nil) # `true` on success, `false` if not (and errno will be set).
function GLib.unix_open_pipe(fds, flags) end

--- # function GLib.unix_set_fd_nonblocking()
---
--- Control the non-blocking state of the given file descriptor,
--- according to `nonblock`. On most systems this uses %O_NONBLOCK, but
--- on some older ones may use %O_NDELAY.
---
--- ---
---
---@param fd integer # A file descriptor
---@param nonblock (boolean|nil) # If `true`, set the descriptor to be non-blocking
---@return (boolean|nil) # `true` if successful
function GLib.unix_set_fd_nonblocking(fd, nonblock) end

--- # function GLib.unix_signal_add()
---
--- A convenience function for `g_unix_signal_source_new()`, which
--- attaches to the default `GMainContext`.  You can remove the watch
--- using `g_source_remove()`.
---
--- ---
---
---@param priority integer # the priority of the signal source. Typically this will be in the range between %G_PRIORITY_DEFAULT and %G_PRIORITY_HIGH.
---@param signum integer # Signal number
---@param handler GLib.SourceFunc # Callback
---@param user_data? userdata # Data for `handler`
---@param notify GLib.DestroyNotify # `GDestroyNotify` for `handler`
---@return integer # An ID (greater than 0) for the event source
function GLib.unix_signal_add(priority, signum, handler, user_data, notify) end

--- # function GLib.unix_signal_source_new()
---
--- Create a `GSource` that will be dispatched upon delivery of the UNIX
--- signal `signum`.  In GLib versions before 2.36, only `SIGHUP`, `SIGINT`,
--- `SIGTERM` can be monitored.  In GLib 2.36, `SIGUSR1` and `SIGUSR2`
--- were added. In GLib 2.54, `SIGWINCH` was added.
--- 
--- Note that unlike the UNIX default, all sources which have created a
--- watch will be dispatched, regardless of which underlying thread
--- invoked `g_unix_signal_source_new()`.
--- 
--- For example, an effective use of this function is to handle `SIGTERM`
--- cleanly; flushing any outstanding files, and then calling
--- `g_main_loop_quit()`.  It is not safe to do any of this from a regular
--- UNIX signal handler; such a handler may be invoked while `malloc()` or
--- another library function is running, causing reentrancy issues if the
--- handler attempts to use those functions.  None of the GLib/GObject
--- API is safe against this kind of reentrancy.
--- 
--- The interaction of this source when combined with native UNIX
--- functions like `sigprocmask()` is not defined.
--- 
--- The source will not initially be associated with any `GMainContext`
--- and must be added to one with `g_source_attach()` before it will be
--- executed.
---
--- ---
---
---@param signum integer # A signal number
---@return GLib.Source # A newly created `GSource`
function GLib.unix_signal_source_new(signum) end

--- # function GLib.unlink()
---
--- A wrapper for the POSIX `unlink()` function. The `unlink()` function
--- deletes a name from the filesystem. If this was the last link to the
--- file and no processes have it opened, the diskspace occupied by the
--- file is freed.
--- 
--- See your C library manual for more details about `unlink()`. Note
--- that on Windows, it is in general not possible to delete files that
--- are open to some process, or mapped into memory.
---
--- ---
---
---@param filename string # a pathname in the GLib file name encoding (UTF-8 on Windows)
---@return integer # 0 if the name was successfully deleted, -1 if an error occurred
function GLib.unlink(filename) end

--- # function GLib.unsetenv()
---
--- Removes an environment variable from the environment.
--- 
--- Note that on some systems, when variables are overwritten, the
--- memory used for the previous variables and its value isn't reclaimed.
--- 
--- You should be mindful of the fact that environment variable handling
--- in UNIX is not thread-safe, and your program may crash if one thread
--- calls `g_unsetenv()` while another thread is calling `getenv()`. (And note
--- that many functions, such as `gettext()`, call `getenv()` internally.) This
--- function is only safe to use at the very start of your program, before
--- creating any other threads (or creating objects that create worker
--- threads of their own).
--- 
--- If you need to set up the environment for a child process, you can
--- use `g_get_environ()` to get an environment array, modify that with
--- `g_environ_setenv()` and `g_environ_unsetenv()`, and then pass that
--- array directly to `execvpe()`, `g_spawn_async()`, or the like.
---
--- ---
---
---@param variable string # the environment variable to remove, must not contain '='
---@return nil
function GLib.unsetenv(variable) end

--- # function GLib.uri_build()
---
--- Creates a new `GUri` from the given components according to `flags`.
--- 
--- See also `g_uri_build_with_user()`, which allows specifying the
--- components of the "userinfo" separately.
---
--- ---
---
---@param flags GLib.UriFlags # flags describing how to build the `GUri`
---@param scheme string # the URI scheme
---@param userinfo? string # the userinfo component, or `nil`
---@param host? string # the host component, or `nil`
---@param port integer # the port, or `-1`
---@param path string # the path component
---@param query? string # the query component, or `nil`
---@param fragment? string # the fragment, or `nil`
---@return GLib.Uri # a new `GUri`
function GLib.uri_build(flags, scheme, userinfo, host, port, path, query, fragment) end

--- # function GLib.uri_build_with_user()
---
--- Creates a new `GUri` from the given components according to `flags`
--- (%G_URI_FLAGS_HAS_PASSWORD is added unconditionally). The `flags` must be
--- coherent with the passed values, in particular use `%`-encoded values with
--- %G_URI_FLAGS_ENCODED.
--- 
--- In contrast to `g_uri_build()`, this allows specifying the components
--- of the ‘userinfo’ field separately. Note that `user` must be non-`nil`
--- if either `password` or `auth_params` is non-`nil`.
---
--- ---
---
---@param flags GLib.UriFlags # flags describing how to build the `GUri`
---@param scheme string # the URI scheme
---@param user? string # the user component of the userinfo, or `nil`
---@param password? string # the password component of the userinfo, or `nil`
---@param auth_params? string # the auth params of the userinfo, or `nil`
---@param host? string # the host component, or `nil`
---@param port integer # the port, or `-1`
---@param path string # the path component
---@param query? string # the query component, or `nil`
---@param fragment? string # the fragment, or `nil`
---@return GLib.Uri # a new `GUri`
function GLib.uri_build_with_user(flags, scheme, user, password, auth_params, host, port, path, query, fragment) end

--- # function GLib.uri_error_quark()
---
---@return GLib.Quark
function GLib.uri_error_quark() end

--- # function GLib.uri_escape_bytes()
---
--- Escapes arbitrary data for use in a URI.
--- 
--- Normally all characters that are not ‘unreserved’ (i.e. ASCII
--- alphanumerical characters plus dash, dot, underscore and tilde) are
--- escaped. But if you specify characters in `reserved_chars_allowed`
--- they are not escaped. This is useful for the ‘reserved’ characters
--- in the URI specification, since those are allowed unescaped in some
--- portions of a URI.
--- 
--- Though technically incorrect, this will also allow escaping nul
--- bytes as `%``00`.
---
--- ---
---
---@param unescaped unknown[] # the unescaped input data.
---@param length integer # the length of `unescaped`
---@param reserved_chars_allowed? string # a string of reserved characters that are allowed to be used, or `nil`.
---@return string # an escaped version of `unescaped`. The returned string should be freed when no longer needed.
function GLib.uri_escape_bytes(unescaped, length, reserved_chars_allowed) end

--- # function GLib.uri_escape_string()
---
--- Escapes a string for use in a URI.
--- 
--- Normally all characters that are not "unreserved" (i.e. ASCII
--- alphanumerical characters plus dash, dot, underscore and tilde) are
--- escaped. But if you specify characters in `reserved_chars_allowed`
--- they are not escaped. This is useful for the "reserved" characters
--- in the URI specification, since those are allowed unescaped in some
--- portions of a URI.
---
--- ---
---
---@param unescaped string # the unescaped input string.
---@param reserved_chars_allowed? string # a string of reserved characters that are allowed to be used, or `nil`.
---@param allow_utf8 (boolean|nil) # `true` if the result can include UTF-8 characters.
---@return string # an escaped version of `unescaped`. The returned string should be freed when no longer needed.
function GLib.uri_escape_string(unescaped, reserved_chars_allowed, allow_utf8) end

--- # function GLib.uri_is_valid()
---
--- Parses `uri_string` according to `flags`, to determine whether it is a valid
--- [absolute URI][relative-absolute-uris], i.e. it does not need to be resolved
--- relative to another URI using `g_uri_parse_relative()`.
--- 
--- If it’s not a valid URI, an error is returned explaining how it’s invalid.
--- 
--- See `g_uri_split()`, and the definition of `GUriFlags`, for more
--- information on the effect of `flags`.
---
--- ---
---
---@param uri_string string # a string containing an absolute URI
---@param flags GLib.UriFlags # flags for parsing `uri_string`
---@return (boolean|nil) # `true` if `uri_string` is a valid absolute URI, `false` on error.
function GLib.uri_is_valid(uri_string, flags) end

--- # function GLib.uri_join()
---
--- Joins the given components together according to `flags` to create
--- an absolute URI string. `path` may not be `nil` (though it may be the empty
--- string).
--- 
--- When `host` is present, `path` must either be empty or begin with a slash (`/`)
--- character. When `host` is not present, `path` cannot begin with two slash
---    characters (`//`). See
--- [RFC 3986, section 3](https://tools.ietf.org/html/rfc3986`section`-3).
--- 
--- See also `g_uri_join_with_user()`, which allows specifying the
--- components of the ‘userinfo’ separately.
--- 
--- %G_URI_FLAGS_HAS_PASSWORD and %G_URI_FLAGS_HAS_AUTH_PARAMS are ignored if set
--- in `flags`.
---
--- ---
---
---@param flags GLib.UriFlags # flags describing how to build the URI string
---@param scheme? string # the URI scheme, or `nil`
---@param userinfo? string # the userinfo component, or `nil`
---@param host? string # the host component, or `nil`
---@param port integer # the port, or `-1`
---@param path string # the path component
---@param query? string # the query component, or `nil`
---@param fragment? string # the fragment, or `nil`
---@return string # an absolute URI string
function GLib.uri_join(flags, scheme, userinfo, host, port, path, query, fragment) end

--- # function GLib.uri_join_with_user()
---
--- Joins the given components together according to `flags` to create
--- an absolute URI string. `path` may not be `nil` (though it may be the empty
--- string).
--- 
--- In contrast to `g_uri_join()`, this allows specifying the components
--- of the ‘userinfo’ separately. It otherwise behaves the same.
--- 
--- %G_URI_FLAGS_HAS_PASSWORD and %G_URI_FLAGS_HAS_AUTH_PARAMS are ignored if set
--- in `flags`.
---
--- ---
---
---@param flags GLib.UriFlags # flags describing how to build the URI string
---@param scheme? string # the URI scheme, or `nil`
---@param user? string # the user component of the userinfo, or `nil`
---@param password? string # the password component of the userinfo, or `nil`
---@param auth_params? string # the auth params of the userinfo, or `nil`
---@param host? string # the host component, or `nil`
---@param port integer # the port, or `-1`
---@param path string # the path component
---@param query? string # the query component, or `nil`
---@param fragment? string # the fragment, or `nil`
---@return string # an absolute URI string
function GLib.uri_join_with_user(flags, scheme, user, password, auth_params, host, port, path, query, fragment) end

--- # function GLib.uri_list_extract_uris()
---
--- Splits an URI list conforming to the text/uri-list
--- mime type defined in RFC 2483 into individual URIs,
--- discarding any comments. The URIs are not validated.
---
--- ---
---
---@param uri_list string # an URI list
---@return unknown[] # a newly allocated `nil`-terminated list of strings holding the individual URIs. The array should be freed with `g_strfreev()`.
function GLib.uri_list_extract_uris(uri_list) end

--- # function GLib.uri_parse()
---
--- Parses `uri_string` according to `flags`. If the result is not a
--- valid [absolute URI][relative-absolute-uris], it will be discarded, and an
--- error returned.
---
--- ---
---
---@param uri_string string # a string representing an absolute URI
---@param flags GLib.UriFlags # flags describing how to parse `uri_string`
---@return GLib.Uri # a new `GUri`, or NULL on error.
function GLib.uri_parse(uri_string, flags) end

--- # function GLib.uri_parse_params()
---
--- Many URI schemes include one or more attribute/value pairs as part of the URI
--- value. This method can be used to parse them into a hash table. When an
--- attribute has multiple occurrences, the last value is the final returned
--- value. If you need to handle repeated attributes differently, use
--- `GUriParamsIter`.
--- 
--- The `params` string is assumed to still be `%`-encoded, but the returned
--- values will be fully decoded. (Thus it is possible that the returned values
--- may contain `=` or `separators`, if the value was encoded in the input.)
--- Invalid `%`-encoding is treated as with the %G_URI_FLAGS_PARSE_RELAXED
--- rules for `g_uri_parse()`. (However, if `params` is the path or query string
--- from a `GUri` that was parsed without %G_URI_FLAGS_PARSE_RELAXED and
--- %G_URI_FLAGS_ENCODED, then you already know that it does not contain any
--- invalid encoding.)
--- 
--- %G_URI_PARAMS_WWW_FORM is handled as documented for `g_uri_params_iter_init()`.
--- 
--- If %G_URI_PARAMS_CASE_INSENSITIVE is passed to `flags`, attributes will be
--- compared case-insensitively, so a params string `attr=123&Attr=456` will only
--- return a single attribute–value pair, `Attr=456`. Case will be preserved in
--- the returned attributes.
--- 
--- If `params` cannot be parsed (for example, it contains two `separators`
--- characters in a row), then `error` is set and `nil` is returned.
---
--- ---
---
---@param params string # a `%`-encoded string containing `attribute=value` parameters
---@param length integer # the length of `params`, or `-1` if it is nul-terminated
---@param separators string # the separator byte character set between parameters. (usually `&`, but sometimes `;` or both `&;`). Note that this function works on bytes not characters, so it can't be used to delimit UTF-8 strings for anything but ASCII characters. You may pass an empty set, in which case no splitting will occur.
---@param flags GLib.UriParamsFlags # flags to modify the way the parameters are handled.
---@return table<string, string> # A hash table of attribute/value pairs, with both names and values fully-decoded; or `nil` on error.
function GLib.uri_parse_params(params, length, separators, flags) end

--- # function GLib.uri_parse_scheme()
---
--- Gets the scheme portion of a URI string.
--- [RFC 3986](https://tools.ietf.org/html/rfc3986`section`-3) decodes the scheme
--- as:
--- ```c
--- URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
--- ```
--- Common schemes include `file`, `https`, `svn+ssh`, etc.
---
--- ---
---
---@param uri string # a valid URI.
---@return string # The ‘scheme’ component of the URI, or `nil` on error. The returned string should be freed when no longer needed.
function GLib.uri_parse_scheme(uri) end

--- # function GLib.uri_peek_scheme()
---
--- Gets the scheme portion of a URI string.
--- [RFC 3986](https://tools.ietf.org/html/rfc3986`section`-3) decodes the scheme
--- as:
--- ```c
--- URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
--- ```
--- Common schemes include `file`, `https`, `svn+ssh`, etc.
--- 
--- Unlike `g_uri_parse_scheme()`, the returned scheme is normalized to
--- all-lowercase and does not need to be freed.
---
--- ---
---
---@param uri string # a valid URI.
---@return string # The ‘scheme’ component of the URI, or `nil` on error. The returned string is normalized to all-lowercase, and interned via `g_intern_string()`, so it does not need to be freed.
function GLib.uri_peek_scheme(uri) end

--- # function GLib.uri_resolve_relative()
---
--- Parses `uri_ref` according to `flags` and, if it is a
--- [relative URI][relative-absolute-uris], resolves it relative to
--- `base_uri_string`. If the result is not a valid absolute URI, it will be
--- discarded, and an error returned.
--- 
--- (If `base_uri_string` is `nil`, this just returns `uri_ref`, or
--- `nil` if `uri_ref` is invalid or not absolute.)
---
--- ---
---
---@param base_uri_string? string # a string representing a base URI
---@param uri_ref string # a string representing a relative or absolute URI
---@param flags GLib.UriFlags # flags describing how to parse `uri_ref`
---@return string # the resolved URI string, or NULL on error.
function GLib.uri_resolve_relative(base_uri_string, uri_ref, flags) end

--- # function GLib.uri_split()
---
--- Parses `uri_ref` (which can be an
--- [absolute or relative URI][relative-absolute-uris]) according to `flags`, and
--- returns the pieces. Any component that doesn't appear in `uri_ref` will be
--- returned as `nil` (but note that all URIs always have a path component,
--- though it may be the empty string).
--- 
--- If `flags` contains %G_URI_FLAGS_ENCODED, then `%`-encoded characters in
--- `uri_ref` will remain encoded in the output strings. (If not,
--- then all such characters will be decoded.) Note that decoding will
--- only work if the URI components are ASCII or UTF-8, so you will
--- need to use %G_URI_FLAGS_ENCODED if they are not.
--- 
--- Note that the %G_URI_FLAGS_HAS_PASSWORD and
--- %G_URI_FLAGS_HAS_AUTH_PARAMS `flags` are ignored by `g_uri_split()`,
--- since it always returns only the full userinfo; use
--- `g_uri_split_with_user()` if you want it split up.
---
--- ---
---
---@param uri_ref string # a string containing a relative or absolute URI
---@param flags GLib.UriFlags # flags for parsing `uri_ref`
---@param scheme? string # on return, contains the scheme (converted to lowercase), or `nil`
---@param userinfo? string # on return, contains the userinfo, or `nil`
---@param host? string # on return, contains the host, or `nil`
---@param port? integer # on return, contains the port, or `-1`
---@param path? string # on return, contains the path
---@param query? string # on return, contains the query, or `nil`
---@param fragment? string # on return, contains the fragment, or `nil`
---@return (boolean|nil) # `true` if `uri_ref` parsed successfully, `false` on error.
function GLib.uri_split(uri_ref, flags, scheme, userinfo, host, port, path, query, fragment) end

--- # function GLib.uri_split_network()
---
--- Parses `uri_string` (which must be an [absolute URI][relative-absolute-uris])
--- according to `flags`, and returns the pieces relevant to connecting to a host.
--- See the documentation for `g_uri_split()` for more details; this is
--- mostly a wrapper around that function with simpler arguments.
--- However, it will return an error if `uri_string` is a relative URI,
--- or does not contain a hostname component.
---
--- ---
---
---@param uri_string string # a string containing an absolute URI
---@param flags GLib.UriFlags # flags for parsing `uri_string`
---@param scheme? string # on return, contains the scheme (converted to lowercase), or `nil`
---@param host? string # on return, contains the host, or `nil`
---@param port? integer # on return, contains the port, or `-1`
---@return (boolean|nil) # `true` if `uri_string` parsed successfully, `false` on error.
function GLib.uri_split_network(uri_string, flags, scheme, host, port) end

--- # function GLib.uri_split_with_user()
---
--- Parses `uri_ref` (which can be an
--- [absolute or relative URI][relative-absolute-uris]) according to `flags`, and
--- returns the pieces. Any component that doesn't appear in `uri_ref` will be
--- returned as `nil` (but note that all URIs always have a path component,
--- though it may be the empty string).
--- 
--- See `g_uri_split()`, and the definition of `GUriFlags`, for more
--- information on the effect of `flags`. Note that `password` will only
--- be parsed out if `flags` contains %G_URI_FLAGS_HAS_PASSWORD, and
--- `auth_params` will only be parsed out if `flags` contains
--- %G_URI_FLAGS_HAS_AUTH_PARAMS.
---
--- ---
---
---@param uri_ref string # a string containing a relative or absolute URI
---@param flags GLib.UriFlags # flags for parsing `uri_ref`
---@param scheme? string # on return, contains the scheme (converted to lowercase), or `nil`
---@param user? string # on return, contains the user, or `nil`
---@param password? string # on return, contains the password, or `nil`
---@param auth_params? string # on return, contains the auth_params, or `nil`
---@param host? string # on return, contains the host, or `nil`
---@param port? integer # on return, contains the port, or `-1`
---@param path? string # on return, contains the path
---@param query? string # on return, contains the query, or `nil`
---@param fragment? string # on return, contains the fragment, or `nil`
---@return (boolean|nil) # `true` if `uri_ref` parsed successfully, `false` on error.
function GLib.uri_split_with_user(uri_ref, flags, scheme, user, password, auth_params, host, port, path, query, fragment) end

--- # function GLib.uri_unescape_bytes()
---
--- Unescapes a segment of an escaped string as binary data.
--- 
--- Note that in contrast to `g_uri_unescape_string()`, this does allow
--- nul bytes to appear in the output.
--- 
--- If any of the characters in `illegal_characters` appears as an escaped
--- character in `escaped_string`, then that is an error and `nil` will be
--- returned. This is useful if you want to avoid for instance having a slash
--- being expanded in an escaped path element, which might confuse pathname
--- handling.
---
--- ---
---
---@param escaped_string string # A URI-escaped string
---@param length integer # the length (in bytes) of `escaped_string` to escape, or `-1` if it is nul-terminated.
---@param illegal_characters? string # a string of illegal characters not to be allowed, or `nil`.
---@return GLib.Bytes # an unescaped version of `escaped_string` or `nil` on error (if decoding failed, using %G_URI_ERROR_FAILED error code). The returned `GBytes` should be unreffed when no longer needed.
function GLib.uri_unescape_bytes(escaped_string, length, illegal_characters) end

--- # function GLib.uri_unescape_segment()
---
--- Unescapes a segment of an escaped string.
--- 
--- If any of the characters in `illegal_characters` or the NUL
--- character appears as an escaped character in `escaped_string`, then
--- that is an error and `nil` will be returned. This is useful if you
--- want to avoid for instance having a slash being expanded in an
--- escaped path element, which might confuse pathname handling.
--- 
--- Note: `NUL` byte is not accepted in the output, in contrast to
--- `g_uri_unescape_bytes()`.
---
--- ---
---
---@param escaped_string? string # A string, may be `nil`
---@param escaped_string_end? string # Pointer to end of `escaped_string`, may be `nil`
---@param illegal_characters? string # An optional string of illegal characters not to be allowed, may be `nil`
---@return string # an unescaped version of `escaped_string`, or `nil` on error. The returned string should be freed when no longer needed. As a special case if `nil` is given for `escaped_string`, this function will return `nil`.
function GLib.uri_unescape_segment(escaped_string, escaped_string_end, illegal_characters) end

--- # function GLib.uri_unescape_string()
---
--- Unescapes a whole escaped string.
--- 
--- If any of the characters in `illegal_characters` or the NUL
--- character appears as an escaped character in `escaped_string`, then
--- that is an error and `nil` will be returned. This is useful if you
--- want to avoid for instance having a slash being expanded in an
--- escaped path element, which might confuse pathname handling.
---
--- ---
---
---@param escaped_string string # an escaped string to be unescaped.
---@param illegal_characters? string # a string of illegal characters not to be allowed, or `nil`.
---@return string # an unescaped version of `escaped_string`. The returned string should be freed when no longer needed.
function GLib.uri_unescape_string(escaped_string, illegal_characters) end

--- # function GLib.usleep()
---
--- Pauses the current thread for the given number of microseconds.
--- 
--- There are 1 million microseconds per second (represented by the
--- %G_USEC_PER_SEC macro). `g_usleep()` may have limited precision,
--- depending on hardware and operating system; don't rely on the exact
--- length of the sleep.
---
--- ---
---
---@param microseconds integer # number of microseconds to pause
---@return nil
function GLib.usleep(microseconds) end

--- # function GLib.utf16_to_ucs4()
---
--- Convert a string from UTF-16 to UCS-4. The result will be
--- nul-terminated.
---
--- ---
---
---@param str unknown[] # a UTF-16 encoded string
---@param len integer # the maximum length (number of `gunichar2`) of `str` to use. If `len` < 0, then the string is nul-terminated.
---@param items_read? integer # location to store number of words read, or `nil`. If `nil`, then %G_CONVERT_ERROR_PARTIAL_INPUT will be returned in case `str` contains a trailing partial character. If an error occurs then the index of the invalid input is stored here.
---@param items_written? integer # location to store number of characters written, or `nil`. The value stored here does not include the trailing 0 character.
---@return integer # a pointer to a newly allocated UCS-4 string. This value must be freed with `g_free()`. If an error occurs, `nil` will be returned and `error` set.
function GLib.utf16_to_ucs4(str, len, items_read, items_written) end

--- # function GLib.utf16_to_utf8()
---
--- Convert a string from UTF-16 to UTF-8. The result will be
--- terminated with a 0 byte.
--- 
--- Note that the input is expected to be already in native endianness,
--- an initial byte-order-mark character is not handled specially.
--- `g_convert()` can be used to convert a byte buffer of UTF-16 data of
--- ambiguous endianness.
--- 
--- Further note that this function does not validate the result
--- string; it may e.g. include embedded NUL characters. The only
--- validation done by this function is to ensure that the input can
--- be correctly interpreted as UTF-16, i.e. it doesn't contain
--- unpaired surrogates or partial character sequences.
---
--- ---
---
---@param str unknown[] # a UTF-16 encoded string
---@param len integer # the maximum length (number of `gunichar2`) of `str` to use. If `len` < 0, then the string is nul-terminated.
---@param items_read? integer # location to store number of words read, or `nil`. If `nil`, then %G_CONVERT_ERROR_PARTIAL_INPUT will be returned in case `str` contains a trailing partial character. If an error occurs then the index of the invalid input is stored here. It’s guaranteed to be non-negative.
---@param items_written? integer # location to store number of bytes written, or `nil`. The value stored here does not include the trailing 0 byte. It’s guaranteed to be non-negative.
---@return string # a pointer to a newly allocated UTF-8 string. This value must be freed with `g_free()`. If an error occurs, `nil` will be returned and `error` set.
function GLib.utf16_to_utf8(str, len, items_read, items_written) end

--- # function GLib.utf8_casefold()
---
--- Converts a string into a form that is independent of case. The
--- result will not correspond to any particular case, but can be
--- compared for equality or ordered with the results of calling
--- g_utf8`_casefold()` on other strings.
--- 
--- Note that calling g_utf8`_casefold()` followed by g_utf8`_collate()` is
--- only an approximation to the correct linguistic case insensitive
--- ordering, though it is a fairly good one. Getting this exactly
--- right would require a more sophisticated collation function that
--- takes case sensitivity into account. GLib does not currently
--- provide such a function.
---
--- ---
---
---@param str string # a UTF-8 encoded string
---@param len integer # length of `str`, in bytes, or -1 if `str` is nul-terminated.
---@return string # a newly allocated string, that is a case independent form of `str`.
function GLib.utf8_casefold(str, len) end

--- # function GLib.utf8_collate()
---
--- Compares two strings for ordering using the linguistically
--- correct rules for the [current locale][setlocale].
--- When sorting a large number of strings, it will be significantly
--- faster to obtain collation keys with g_utf8`_collate_key()` and
--- compare the keys with `strcmp()` when sorting instead of sorting
--- the original strings.
--- 
--- If the two strings are not comparable due to being in different collation
--- sequences, the result is undefined. This can happen if the strings are in
--- different language scripts, for example.
---
--- ---
---
---@param str1 string # a UTF-8 encoded string
---@param str2 string # a UTF-8 encoded string
---@return integer # < 0 if `str1` compares before `str2`, 0 if they compare equal, > 0 if `str1` compares after `str2`.
function GLib.utf8_collate(str1, str2) end

--- # function GLib.utf8_collate_key()
---
--- Converts a string into a collation key that can be compared
--- with other collation keys produced by the same function using
--- `strcmp()`.
--- 
--- The results of comparing the collation keys of two strings
--- with `strcmp()` will always be the same as comparing the two
--- original keys with g_utf8`_collate()`.
--- 
--- Note that this function depends on the [current locale][setlocale].
---
--- ---
---
---@param str string # a UTF-8 encoded string.
---@param len integer # length of `str`, in bytes, or -1 if `str` is nul-terminated.
---@return string # a newly allocated string. This string should be freed with `g_free()` when you are done with it.
function GLib.utf8_collate_key(str, len) end

--- # function GLib.utf8_collate_key_for_filename()
---
--- Converts a string into a collation key that can be compared
--- with other collation keys produced by the same function using `strcmp()`.
--- 
--- In order to sort filenames correctly, this function treats the dot '.'
--- as a special case. Most dictionary orderings seem to consider it
--- insignificant, thus producing the ordering "event.c" "eventgenerator.c"
--- "event.h" instead of "event.c" "event.h" "eventgenerator.c". Also, we
--- would like to treat numbers intelligently so that "file1" "file10" "file5"
--- is sorted as "file1" "file5" "file10".
--- 
--- Note that this function depends on the [current locale][setlocale].
---
--- ---
---
---@param str string # a UTF-8 encoded string.
---@param len integer # length of `str`, in bytes, or -1 if `str` is nul-terminated.
---@return string # a newly allocated string. This string should be freed with `g_free()` when you are done with it.
function GLib.utf8_collate_key_for_filename(str, len) end

--- # function GLib.utf8_find_next_char()
---
--- Finds the start of the next UTF-8 character in the string after `p`.
--- 
--- `p` does not have to be at the beginning of a UTF-8 character. No check
--- is made to see if the character found is actually valid other than
--- it starts with an appropriate byte.
--- 
--- If `end` is `nil`, the return value will never be `nil`: if the end of the
--- string is reached, a pointer to the terminating nul byte is returned. If
--- `end` is non-`nil`, the return value will be `nil` if the end of the string
--- is reached.
---
--- ---
---
---@param p string # a pointer to a position within a UTF-8 encoded string
---@param end__? string # a pointer to the byte following the end of the string, or `nil` to indicate that the string is nul-terminated
---@return string # a pointer to the found character or `nil` if `end` is set and is reached
function GLib.utf8_find_next_char(p, end__) end

--- # function GLib.utf8_find_prev_char()
---
--- Given a position `p` with a UTF-8 encoded string `str`, find the start
--- of the previous UTF-8 character starting before `p`. Returns `nil` if no
--- UTF-8 characters are present in `str` before `p`.
--- 
--- `p` does not have to be at the beginning of a UTF-8 character. No check
--- is made to see if the character found is actually valid other than
--- it starts with an appropriate byte.
---
--- ---
---
---@param str string # pointer to the beginning of a UTF-8 encoded string
---@param p string # pointer to some position within `str`
---@return string # a pointer to the found character or `nil`.
function GLib.utf8_find_prev_char(str, p) end

--- # function GLib.utf8_get_char()
---
--- Converts a sequence of bytes encoded as UTF-8 to a Unicode character.
--- 
--- If `p` does not point to a valid UTF-8 encoded character, results
--- are undefined. If you are not sure that the bytes are complete
--- valid Unicode characters, you should use g_utf8`_get_char_validated()`
--- instead.
---
--- ---
---
---@param p string # a pointer to Unicode character encoded as UTF-8
---@return integer # the resulting character
function GLib.utf8_get_char(p) end

--- # function GLib.utf8_get_char_validated()
---
--- Convert a sequence of bytes encoded as UTF-8 to a Unicode character.
--- This function checks for incomplete characters, for invalid characters
--- such as characters that are out of the range of Unicode, and for
--- overlong encodings of valid characters.
--- 
--- Note that g_utf8`_get_char_validated()` returns (gunichar)-2 if
--- `max_len` is positive and any of the bytes in the first UTF-8 character
--- sequence are nul.
---
--- ---
---
---@param p string # a pointer to Unicode character encoded as UTF-8
---@param max_len integer # the maximum number of bytes to read, or -1 if `p` is nul-terminated
---@return integer # the resulting character. If `p` points to a partial sequence at the end of a string that could begin a valid character (or if `max_len` is zero), returns (gunichar)-2; otherwise, if `p` does not point to a valid UTF-8 encoded Unicode character, returns (gunichar)-1.
function GLib.utf8_get_char_validated(p, max_len) end

--- # function GLib.utf8_make_valid()
---
--- If the provided string is valid UTF-8, return a copy of it. If not,
--- return a copy in which bytes that could not be interpreted as valid Unicode
--- are replaced with the Unicode replacement character (U+FFFD).
--- 
--- For example, this is an appropriate function to use if you have received
--- a string that was incorrectly declared to be UTF-8, and you need a valid
--- UTF-8 version of it that can be logged or displayed to the user, with the
--- assumption that it is close enough to ASCII or UTF-8 to be mostly
--- readable as-is.
---
--- ---
---
---@param str string # string to coerce into UTF-8
---@param len integer # the maximum length of `str` to use, in bytes. If `len` < 0, then the string is nul-terminated.
---@return string # a valid UTF-8 string whose content resembles `str`
function GLib.utf8_make_valid(str, len) end

--- # function GLib.utf8_normalize()
---
--- Converts a string into canonical form, standardizing
--- such issues as whether a character with an accent
--- is represented as a base character and combining
--- accent or as a single precomposed character. The
--- string has to be valid UTF-8, otherwise `nil` is
--- returned. You should generally call g_utf8`_normalize()`
--- before comparing two Unicode strings.
--- 
--- The normalization mode %G_NORMALIZE_DEFAULT only
--- standardizes differences that do not affect the
--- text content, such as the above-mentioned accent
--- representation. %G_NORMALIZE_ALL also standardizes
--- the "compatibility" characters in Unicode, such
--- as SUPERSCRIPT THREE to the standard forms
--- (in this case DIGIT THREE). Formatting information
--- may be lost but for most text operations such
--- characters should be considered the same.
--- 
--- %G_NORMALIZE_DEFAULT_COMPOSE and %G_NORMALIZE_ALL_COMPOSE
--- are like %G_NORMALIZE_DEFAULT and %G_NORMALIZE_ALL,
--- but returned a result with composed forms rather
--- than a maximally decomposed form. This is often
--- useful if you intend to convert the string to
--- a legacy encoding or pass it to a system with
--- less capable Unicode handling.
---
--- ---
---
---@param str string # a UTF-8 encoded string.
---@param len integer # length of `str`, in bytes, or -1 if `str` is nul-terminated.
---@param mode GLib.NormalizeMode # the type of normalization to perform.
---@return string # a newly allocated string, that is the normalized form of `str`, or `nil` if `str` is not valid UTF-8.
function GLib.utf8_normalize(str, len, mode) end

--- # function GLib.utf8_offset_to_pointer()
---
--- Converts from an integer character offset to a pointer to a position
--- within the string.
--- 
--- Since 2.10, this function allows to pass a negative `offset` to
--- step backwards. It is usually worth stepping backwards from the end
--- instead of forwards if `offset` is in the last fourth of the string,
--- since moving forward is about 3 times faster than moving backward.
--- 
--- Note that this function doesn't abort when reaching the end of `str`.
--- Therefore you should be sure that `offset` is within string boundaries
--- before calling that function. Call g_utf8`_strlen()` when unsure.
--- This limitation exists as this function is called frequently during
--- text rendering and therefore has to be as fast as possible.
---
--- ---
---
---@param str string # a UTF-8 encoded string
---@param offset integer # a character offset within `str`
---@return string # the resulting pointer
function GLib.utf8_offset_to_pointer(str, offset) end

--- # function GLib.utf8_pointer_to_offset()
---
--- Converts from a pointer to position within a string to an integer
--- character offset.
--- 
--- Since 2.10, this function allows `pos` to be before `str`, and returns
--- a negative offset in this case.
---
--- ---
---
---@param str string # a UTF-8 encoded string
---@param pos string # a pointer to a position within `str`
---@return integer # the resulting character offset
function GLib.utf8_pointer_to_offset(str, pos) end

--- # function GLib.utf8_prev_char()
---
--- Finds the previous UTF-8 character in the string before `p`.
--- 
--- `p` does not have to be at the beginning of a UTF-8 character. No check
--- is made to see if the character found is actually valid other than
--- it starts with an appropriate byte. If `p` might be the first
--- character of the string, you must use g_utf8`_find_prev_char()` instead.
---
--- ---
---
---@param p string # a pointer to a position within a UTF-8 encoded string
---@return string # a pointer to the found character
function GLib.utf8_prev_char(p) end

--- # function GLib.utf8_strchr()
---
--- Finds the leftmost occurrence of the given Unicode character
--- in a UTF-8 encoded string, while limiting the search to `len` bytes.
--- If `len` is -1, allow unbounded search.
---
--- ---
---
---@param p string # a nul-terminated UTF-8 encoded string
---@param len integer # the maximum length of `p`
---@param c integer # a Unicode character
---@return string # `nil` if the string does not contain the character, otherwise, a pointer to the start of the leftmost occurrence of the character in the string.
function GLib.utf8_strchr(p, len, c) end

--- # function GLib.utf8_strdown()
---
--- Converts all Unicode characters in the string that have a case
--- to lowercase. The exact manner that this is done depends
--- on the current locale, and may result in the number of
--- characters in the string changing.
---
--- ---
---
---@param str string # a UTF-8 encoded string
---@param len integer # length of `str`, in bytes, or -1 if `str` is nul-terminated.
---@return string # a newly allocated string, with all characters converted to lowercase.
function GLib.utf8_strdown(str, len) end

--- # function GLib.utf8_strlen()
---
--- Computes the length of the string in characters, not including
--- the terminating nul character. If the `max`'th byte falls in the
--- middle of a character, the last (partial) character is not counted.
---
--- ---
---
---@param p string # pointer to the start of a UTF-8 encoded string
---@param max integer # the maximum number of bytes to examine. If `max` is less than 0, then the string is assumed to be nul-terminated. If `max` is 0, `p` will not be examined and may be `nil`. If `max` is greater than 0, up to `max` bytes are examined
---@return integer # the length of the string in characters
function GLib.utf8_strlen(p, max) end

--- # function GLib.utf8_strncpy()
---
--- Like the standard C `strncpy()` function, but copies a given number
--- of characters instead of a given number of bytes. The `src` string
--- must be valid UTF-8 encoded text. (Use g_utf8`_validate()` on all
--- text before trying to use UTF-8 utility functions with it.)
--- 
--- Note you must ensure `dest` is at least 4 * `n` + 1 to fit the
--- largest possible UTF-8 characters
---
--- ---
---
---@param dest string # buffer to fill with characters from `src`
---@param src string # UTF-8 encoded string
---@param n integer # character count
---@return string # `dest`
function GLib.utf8_strncpy(dest, src, n) end

--- # function GLib.utf8_strrchr()
---
--- Find the rightmost occurrence of the given Unicode character
--- in a UTF-8 encoded string, while limiting the search to `len` bytes.
--- If `len` is -1, allow unbounded search.
---
--- ---
---
---@param p string # a nul-terminated UTF-8 encoded string
---@param len integer # the maximum length of `p`
---@param c integer # a Unicode character
---@return string # `nil` if the string does not contain the character, otherwise, a pointer to the start of the rightmost occurrence of the character in the string.
function GLib.utf8_strrchr(p, len, c) end

--- # function GLib.utf8_strreverse()
---
--- Reverses a UTF-8 string. `str` must be valid UTF-8 encoded text.
--- (Use g_utf8`_validate()` on all text before trying to use UTF-8
--- utility functions with it.)
--- 
--- This function is intended for programmatic uses of reversed strings.
--- It pays no attention to decomposed characters, combining marks, byte
--- order marks, directional indicators (LRM, LRO, etc) and similar
--- characters which might need special handling when reversing a string
--- for display purposes.
--- 
--- Note that unlike `g_strreverse()`, this function returns
--- newly-allocated memory, which should be freed with `g_free()` when
--- no longer needed.
---
--- ---
---
---@param str string # a UTF-8 encoded string
---@param len integer # the maximum length of `str` to use, in bytes. If `len` < 0, then the string is nul-terminated.
---@return string # a newly-allocated string which is the reverse of `str`
function GLib.utf8_strreverse(str, len) end

--- # function GLib.utf8_strup()
---
--- Converts all Unicode characters in the string that have a case
--- to uppercase. The exact manner that this is done depends
--- on the current locale, and may result in the number of
--- characters in the string increasing. (For instance, the
--- German ess-zet will be changed to SS.)
---
--- ---
---
---@param str string # a UTF-8 encoded string
---@param len integer # length of `str`, in bytes, or -1 if `str` is nul-terminated.
---@return string # a newly allocated string, with all characters converted to uppercase.
function GLib.utf8_strup(str, len) end

--- # function GLib.utf8_substring()
---
--- Copies a substring out of a UTF-8 encoded string.
--- The substring will contain `end_pos` - `start_pos` characters.
--- 
--- Since GLib 2.72, `-1` can be passed to `end_pos` to indicate the
--- end of the string.
---
--- ---
---
---@param str string # a UTF-8 encoded string
---@param start_pos integer # a character offset within `str`
---@param end_pos integer # another character offset within `str`, or `-1` to indicate the end of the string
---@return string # a newly allocated copy of the requested substring. Free with `g_free()` when no longer needed.
function GLib.utf8_substring(str, start_pos, end_pos) end

--- # function GLib.utf8_to_ucs4()
---
--- Convert a string from UTF-8 to a 32-bit fixed width
--- representation as UCS-4. A trailing 0 character will be added to the
--- string after the converted text.
---
--- ---
---
---@param str string # a UTF-8 encoded string
---@param len integer # the maximum length of `str` to use, in bytes. If `len` < 0, then the string is nul-terminated.
---@param items_read? integer # location to store number of bytes read, or `nil`. If `nil`, then %G_CONVERT_ERROR_PARTIAL_INPUT will be returned in case `str` contains a trailing partial character. If an error occurs then the index of the invalid input is stored here.
---@param items_written? integer # location to store number of characters written or `nil`. The value here stored does not include the trailing 0 character.
---@return integer # a pointer to a newly allocated UCS-4 string. This value must be freed with `g_free()`. If an error occurs, `nil` will be returned and `error` set.
function GLib.utf8_to_ucs4(str, len, items_read, items_written) end

--- # function GLib.utf8_to_ucs4_fast()
---
--- Convert a string from UTF-8 to a 32-bit fixed width
--- representation as UCS-4, assuming valid UTF-8 input.
--- This function is roughly twice as fast as g_utf8_to_ucs4()
--- but does no error checking on the input. A trailing 0 character
--- will be added to the string after the converted text.
---
--- ---
---
---@param str string # a UTF-8 encoded string
---@param len integer # the maximum length of `str` to use, in bytes. If `len` < 0, then the string is nul-terminated.
---@param items_written? integer # location to store the number of characters in the result, or `nil`.
---@return integer # a pointer to a newly allocated UCS-4 string. This value must be freed with `g_free()`.
function GLib.utf8_to_ucs4_fast(str, len, items_written) end

--- # function GLib.utf8_to_utf16()
---
--- Convert a string from UTF-8 to UTF-16. A 0 character will be
--- added to the result after the converted text.
---
--- ---
---
---@param str string # a UTF-8 encoded string
---@param len integer # the maximum length (number of bytes) of `str` to use. If `len` < 0, then the string is nul-terminated.
---@param items_read? integer # location to store number of bytes read, or `nil`. If `nil`, then %G_CONVERT_ERROR_PARTIAL_INPUT will be returned in case `str` contains a trailing partial character. If an error occurs then the index of the invalid input is stored here.
---@param items_written? integer # location to store number of `gunichar2` written, or `nil`. The value stored here does not include the trailing 0.
---@return integer # a pointer to a newly allocated UTF-16 string. This value must be freed with `g_free()`. If an error occurs, `nil` will be returned and `error` set.
function GLib.utf8_to_utf16(str, len, items_read, items_written) end

--- # function GLib.utf8_validate()
---
--- Validates UTF-8 encoded text. `str` is the text to validate;
--- if `str` is nul-terminated, then `max_len` can be -1, otherwise
--- `max_len` should be the number of bytes to validate.
--- If `end` is non-`nil`, then the end of the valid range
--- will be stored there (i.e. the start of the first invalid
--- character if some bytes were invalid, or the end of the text
--- being validated otherwise).
--- 
--- Note that g_utf8`_validate()` returns `false` if `max_len` is
--- positive and any of the `max_len` bytes are nul.
--- 
--- Returns `true` if all of `str` was valid. Many GLib and GTK+
--- routines require valid UTF-8 as input; so data read from a file
--- or the network should be checked with g_utf8`_validate()` before
--- doing anything else with it.
---
--- ---
---
---@param str unknown[] # a pointer to character data
---@param max_len integer # max bytes to validate, or -1 to go until NUL
---@param end__? string # return location for end of valid data
---@return (boolean|nil) # `true` if the text was valid UTF-8
function GLib.utf8_validate(str, max_len, end__) end

--- # function GLib.utf8_validate_len()
---
--- Validates UTF-8 encoded text.
--- 
--- As with g_utf8`_validate()`, but `max_len` must be set, and hence this function
--- will always return `false` if any of the bytes of `str` are nul.
---
--- ---
---
---@param str unknown[] # a pointer to character data
---@param max_len integer # max bytes to validate
---@param end__? string # return location for end of valid data
---@return (boolean|nil) # `true` if the text was valid UTF-8
function GLib.utf8_validate_len(str, max_len, end__) end

--- # function GLib.uuid_string_is_valid()
---
--- Parses the string `str` and verify if it is a UUID.
--- 
--- The function accepts the following syntax:
--- 
--- - simple forms (e.g. `f81d4fae-7dec-11d0-a765-00a0c91e6bf6`)
--- 
--- Note that hyphens are required within the UUID string itself,
--- as per the aforementioned RFC.
---
--- ---
---
---@param str string # a string representing a UUID
---@return (boolean|nil) # `true` if `str` is a valid UUID, `false` otherwise.
function GLib.uuid_string_is_valid(str) end

--- # function GLib.uuid_string_random()
---
--- Generates a random UUID (RFC 4122 version 4) as a string. It has the same
--- randomness guarantees as `GRand`, so must not be used for cryptographic
--- purposes such as key generation, nonces, salts or one-time pads.
---
--- ---
---
---@return string # A string that should be freed with `g_free()`.
function GLib.uuid_string_random() end

--- # function GLib.variant_get_gtype()
---
---@return GLib.GType
function GLib.variant_get_gtype() end

--- # function GLib.variant_is_object_path()
---
--- Determines if a given string is a valid D-Bus object path.  You
--- should ensure that a string is a valid D-Bus object path before
--- passing it to `g_variant_new_object_path()`.
--- 
--- A valid object path starts with `/` followed by zero or more
--- sequences of characters separated by `/` characters.  Each sequence
--- must contain only the characters `[A-Z][a-z][0-9]_`.  No sequence
--- (including the one following the final `/` character) may be empty.
---
--- ---
---
---@param string string # a normal C nul-terminated string
---@return (boolean|nil) # `true` if `string` is a D-Bus object path
function GLib.variant_is_object_path(string) end

--- # function GLib.variant_is_signature()
---
--- Determines if a given string is a valid D-Bus type signature.  You
--- should ensure that a string is a valid D-Bus type signature before
--- passing it to `g_variant_new_signature()`.
--- 
--- D-Bus type signatures consist of zero or more definite `GVariantType`
--- strings in sequence.
---
--- ---
---
---@param string string # a normal C nul-terminated string
---@return (boolean|nil) # `true` if `string` is a D-Bus type signature
function GLib.variant_is_signature(string) end

--- # function GLib.variant_parse()
---
--- Parses a `GVariant` from a text representation.
--- 
--- A single `GVariant` is parsed from the content of `text`.
--- 
--- The format is described [here][gvariant-text].
--- 
--- The memory at `limit` will never be accessed and the parser behaves as
--- if the character at `limit` is the nul terminator.  This has the
--- effect of bounding `text`.
--- 
--- If `endptr` is non-`nil` then `text` is permitted to contain data
--- following the value that this function parses and `endptr` will be
--- updated to point to the first character past the end of the text
--- parsed by this function.  If `endptr` is `nil` and there is extra data
--- then an error is returned.
--- 
--- If `type` is non-`nil` then the value will be parsed to have that
--- type.  This may result in additional parse errors (in the case that
--- the parsed value doesn't fit the type) but may also result in fewer
--- errors (in the case that the type would have been ambiguous, such as
--- with empty arrays).
--- 
--- In the event that the parsing is successful, the resulting `GVariant`
--- is returned. It is never floating, and must be freed with
--- `g_variant_unref()`.
--- 
--- In case of any error, `nil` will be returned.  If `error` is non-`nil`
--- then it will be set to reflect the error that occurred.
--- 
--- Officially, the language understood by the parser is "any string
--- produced by `g_variant_print()`".
--- 
--- There may be implementation specific restrictions on deeply nested values,
--- which would result in a %G_VARIANT_PARSE_ERROR_RECURSION error. `GVariant` is
--- guaranteed to handle nesting up to at least 64 levels.
---
--- ---
---
---@param type? GLib.VariantType # a `GVariantType`, or `nil`
---@param text string # a string containing a GVariant in text form
---@param limit? string # a pointer to the end of `text`, or `nil`
---@param endptr? string # a location to store the end pointer, or `nil`
---@return GLib.Variant # a non-floating reference to a `GVariant`, or `nil`
function GLib.variant_parse(type, text, limit, endptr) end

--- # function GLib.variant_parse_error_print_context()
---
--- Pretty-prints a message showing the context of a `GVariant` parse
--- error within the string for which parsing was attempted.
--- 
--- The resulting string is suitable for output to the console or other
--- monospace media where newlines are treated in the usual way.
--- 
--- The message will typically look something like one of the following:
--- 
--- ```c
--- unterminated string constant:
---   (1, 2, 3, 'abc
---             ^^^^
--- ```
--- 
--- or
--- 
--- ```c
--- unable to find a common type:
---   [1, 2, 3, 'str']
---    ^        ^^^^^
--- ```
--- 
--- The format of the message may change in a future version.
--- 
--- `error` must have come from a failed attempt to `g_variant_parse()` and
--- `source_str` must be exactly the same string that caused the error.
--- If `source_str` was not nul-terminated when you passed it to
--- `g_variant_parse()` then you must add nul termination before using this
--- function.
---
--- ---
---
---@param error GLib.Error # a `GError` from the `GVariantParseError` domain
---@param source_str string # the string that was given to the parser
---@return string # the printed message
function GLib.variant_parse_error_print_context(error, source_str) end

--- # function GLib.variant_parse_error_quark()
---
---@return GLib.Quark
function GLib.variant_parse_error_quark() end

--- # function GLib.variant_parser_get_error_quark()
---
--- Same as `g_variant_error_quark()`.
---
--- ---
---
---@return GLib.Quark
function GLib.variant_parser_get_error_quark() end

--- # function GLib.variant_type_checked_()
---
---@param arg0 string
---@return GLib.VariantType
function GLib.variant_type_checked_(arg0) end

--- # function GLib.variant_type_string_get_depth_()
---
---@param type_string string
---@return integer
function GLib.variant_type_string_get_depth_(type_string) end

--- # function GLib.variant_type_string_is_valid()
---
--- Checks if `type_string` is a valid GVariant type string.  This call is
--- equivalent to calling `g_variant_type_string_scan()` and confirming
--- that the following character is a nul terminator.
---
--- ---
---
---@param type_string string # a pointer to any string
---@return (boolean|nil) # `true` if `type_string` is exactly one valid type string Since 2.24
function GLib.variant_type_string_is_valid(type_string) end

--- # function GLib.variant_type_string_scan()
---
--- Scan for a single complete and valid GVariant type string in `string`.
--- The memory pointed to by `limit` (or bytes beyond it) is never
--- accessed.
--- 
--- If a valid type string is found, `endptr` is updated to point to the
--- first character past the end of the string that was found and `true`
--- is returned.
--- 
--- If there is no valid type string starting at `string`, or if the type
--- string does not end before `limit` then `false` is returned.
--- 
--- For the simple case of checking if a string is a valid type string,
--- see `g_variant_type_string_is_valid()`.
---
--- ---
---
---@param string string # a pointer to any string
---@param limit? string # the end of `string`, or `nil`
---@param endptr? string # location to store the end pointer, or `nil`
---@return (boolean|nil) # `true` if a valid type string was found
function GLib.variant_type_string_scan(string, limit, endptr) end

return GLib

