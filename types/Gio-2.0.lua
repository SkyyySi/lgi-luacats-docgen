---@meta Gio

---@class Gio
local Gio = {}

--- # interface Gio.Action
---
--- `GAction` represents a single named action.
--- 
--- The main interface to an action is that it can be activated with
--- `g_action_activate()`.  This results in the 'activate' signal being
--- emitted.  An activation has a `GVariant` parameter (which may be
--- `nil`).  The correct type for the parameter is determined by a static
--- parameter type (which is given at construction time).
--- 
--- An action may optionally have a state, in which case the state may be
--- set with `g_action_change_state()`.  This call takes a `GVariant`.  The
--- correct type for the state is determined by a static state type
--- (which is given at construction time).
--- 
--- The state may have a hint associated with it, specifying its valid
--- range.
--- 
--- `GAction` is merely the interface to the concept of an action, as
--- described above.  Various implementations of actions exist, including
--- `GSimpleAction`.
--- 
--- In all cases, the implementing class is responsible for storing the
--- name of the action, the parameter type, the enabled state, the
--- optional state type and the state and emitting the appropriate
--- signals when these change.  The implementor is responsible for filtering
--- calls to `g_action_activate()` and `g_action_change_state()` for type
--- safety and for the state being enabled.
--- 
--- Probably the only useful thing to do with a `GAction` is to put it
--- inside of a `GSimpleActionGroup`.
---
--- ---
---
---@class Gio.Action
Gio.Action = {}

--- # method Gio.Action:activate()
---
--- Activates the action.
--- 
--- `parameter` must be the correct type of parameter for the action (ie:
--- the parameter type given at construction time).  If the parameter
--- type was `nil` then `parameter` must also be `nil`.
--- 
--- If the `parameter` GVariant is floating, it is consumed.
---
--- ---
---
---@param self Gio.Action # a `GAction`
---@param parameter? GLib.Variant # the parameter to the activation
---@return nil
function Gio.Action:activate(parameter) end

--- # method Gio.Action:change_state()
---
--- Request for the state of `action` to be changed to `value`.
--- 
--- The action must be stateful and `value` must be of the correct type.
--- See `g_action_get_state_type()`.
--- 
--- This call merely requests a change.  The action may refuse to change
--- its state or may change its state to something other than `value`.
--- See `g_action_get_state_hint()`.
--- 
--- If the `value` GVariant is floating, it is consumed.
---
--- ---
---
---@param self Gio.Action # a `GAction`
---@param value GLib.Variant # the new state
---@return nil
function Gio.Action:change_state(value) end

--- # method Gio.Action:get_enabled()
---
--- Checks if `action` is currently enabled.
--- 
--- An action must be enabled in order to be activated or in order to
--- have its state changed from outside callers.
---
--- ---
---
---@param self Gio.Action # a `GAction`
---@return (boolean|nil) # whether the action is enabled
function Gio.Action:get_enabled() end

--- # method Gio.Action:get_name()
---
--- Queries the name of `action`.
---
--- ---
---
---@param self Gio.Action # a `GAction`
---@return string # the name of the action
function Gio.Action:get_name() end

--- # method Gio.Action:get_parameter_type()
---
--- Queries the type of the parameter that must be given when activating
--- `action`.
--- 
--- When activating the action using `g_action_activate()`, the `GVariant`
--- given to that function must be of the type returned by this function.
--- 
--- In the case that this function returns `nil`, you must not give any
--- `GVariant`, but `nil` instead.
---
--- ---
---
---@param self Gio.Action # a `GAction`
---@return GLib.VariantType # the parameter type
function Gio.Action:get_parameter_type() end

--- # method Gio.Action:get_state()
---
--- Queries the current state of `action`.
--- 
--- If the action is not stateful then `nil` will be returned.  If the
--- action is stateful then the type of the return value is the type
--- given by `g_action_get_state_type()`.
--- 
--- The return value (if non-`nil`) should be freed with
--- `g_variant_unref()` when it is no longer required.
---
--- ---
---
---@param self Gio.Action # a `GAction`
---@return GLib.Variant # the current state of the action
function Gio.Action:get_state() end

--- # method Gio.Action:get_state_hint()
---
--- Requests a hint about the valid range of values for the state of
--- `action`.
--- 
--- If `nil` is returned it either means that the action is not stateful
--- or that there is no hint about the valid range of values for the
--- state of the action.
--- 
--- If a `GVariant` array is returned then each item in the array is a
--- possible value for the state.  If a `GVariant` pair (ie: two-tuple) is
--- returned then the tuple specifies the inclusive lower and upper bound
--- of valid values for the state.
--- 
--- In any case, the information is merely a hint.  It may be possible to
--- have a state value outside of the hinted range and setting a value
--- within the range may fail.
--- 
--- The return value (if non-`nil`) should be freed with
--- `g_variant_unref()` when it is no longer required.
---
--- ---
---
---@param self Gio.Action # a `GAction`
---@return GLib.Variant # the state range hint
function Gio.Action:get_state_hint() end

--- # method Gio.Action:get_state_type()
---
--- Queries the type of the state of `action`.
--- 
--- If the action is stateful (e.g. created with
--- `g_simple_action_new_stateful()`) then this function returns the
--- `GVariantType` of the state.  This is the type of the initial value
--- given as the state. All calls to `g_action_change_state()` must give a
--- `GVariant` of this type and `g_action_get_state()` will return a
--- `GVariant` of the same type.
--- 
--- If the action is not stateful (e.g. created with `g_simple_action_new()`)
--- then this function will return `nil`. In that case, `g_action_get_state()`
--- will return `nil` and you must not call `g_action_change_state()`.
---
--- ---
---
---@param self Gio.Action # a `GAction`
---@return GLib.VariantType # the state type, if the action is stateful
function Gio.Action:get_state_type() end

--- # function Gio.Action.name_is_valid()
---
--- Checks if `action_name` is valid.
--- 
--- `action_name` is valid if it consists only of alphanumeric characters,
--- plus '-' and '.'.  The empty string is not a valid action name.
--- 
--- It is an error to call this function with a non-utf8 `action_name`.
--- `action_name` must not be `nil`.
---
--- ---
---
---@param action_name string # a potential action name
---@return (boolean|nil) # `true` if `action_name` is valid
function Gio.Action.name_is_valid(action_name) end

--- # function Gio.Action.parse_detailed_name()
---
--- Parses a detailed action name into its separate name and target
--- components.
--- 
--- Detailed action names can have three formats.
--- 
--- The first format is used to represent an action name with no target
--- value and consists of just an action name containing no whitespace
--- nor the characters `:`, `(` or `)`.  For example: `app.action`.
--- 
--- The second format is used to represent an action with a target value
--- that is a non-empty string consisting only of alphanumerics, plus `-`
--- and `.`.  In that case, the action name and target value are
--- separated by a double colon (`::`).  For example:
--- `app.action::target`.
--- 
--- The third format is used to represent an action with any type of
--- target value, including strings.  The target value follows the action
--- name, surrounded in parens.  For example: `app.action(42)`.  The
--- target value is parsed using `g_variant_parse()`.  If a tuple-typed
--- value is desired, it must be specified in the same way, resulting in
--- two sets of parens, for example: `app.action((1,2,3))`.  A string
--- target can be specified this way as well: `app.action('target')`.
--- For strings, this third format must be used if target value is
--- empty or contains characters other than alphanumerics, `-` and `.`.
--- 
--- If this function returns `true`, a non-`nil` value is guaranteed to be returned
--- in `action_name` (if a pointer is passed in). A `nil` value may still be
--- returned in `target_value`, as the `detailed_name` may not contain a target.
--- 
--- If returned, the `GVariant` in `target_value` is guaranteed to not be floating.
---
--- ---
---
---@param detailed_name string # a detailed action name
---@param action_name? string # the action name
---@param target_value? GLib.Variant # the target value, or `nil` for no target
---@return (boolean|nil) # `true` if successful, else `false` with `error` set
function Gio.Action.parse_detailed_name(detailed_name, action_name, target_value) end

--- # function Gio.Action.print_detailed_name()
---
--- Formats a detailed action name from `action_name` and `target_value`.
--- 
--- It is an error to call this function with an invalid action name.
--- 
--- This function is the opposite of `g_action_parse_detailed_name()`.
--- It will produce a string that can be parsed back to the `action_name`
--- and `target_value` by that function.
--- 
--- See that function for the types of strings that will be printed by
--- this function.
---
--- ---
---
---@param action_name string # a valid action name
---@param target_value? GLib.Variant # a `GVariant` target value, or `nil`
---@return string # a detailed format string
function Gio.Action.print_detailed_name(action_name, target_value) end

--- # record Gio.ActionEntry
---
--- This struct defines a single action.  It is for use with
--- `g_action_map_add_action_entries()`.
--- 
--- The order of the items in the structure are intended to reflect
--- frequency of use.  It is permissible to use an incomplete initialiser
--- in order to leave some of the later values as `nil`.  All values
--- after `name` are optional.  Additional optional fields may be added in
--- the future.
--- 
--- See `g_action_map_add_action_entries()` for an example.
---
--- ---
---
---@class Gio.ActionEntry
---@field name string # the name of the action
---@field activate fun(action: Gio.SimpleAction, parameter: GLib.Variant, user_data: userdata): nil
---@field parameter_type string # the type of the parameter that must be passed to the activate function for this action, given as a single GVariant type string (or `nil` for no parameter)
---@field state string # the initial state for this action, given in [GVariant text format][gvariant-text]. The state is parsed with no extra type information, so type tags must be added to the string if they are necessary. Stateless actions should give `nil` here.
---@field change_state fun(action: Gio.SimpleAction, value: GLib.Variant, user_data: userdata): nil
---@field padding unknown[]
Gio.ActionEntry = {}

--- # interface Gio.ActionGroup
---
--- `GActionGroup` represents a group of actions. Actions can be used to
--- expose functionality in a structured way, either from one part of a
--- program to another, or to the outside world. Action groups are often
--- used together with a `GMenuModel` that provides additional
--- representation data for displaying the actions to the user, e.g. in
--- a menu.
--- 
--- The main way to interact with the actions in a GActionGroup is to
--- activate them with `g_action_group_activate_action()`. Activating an
--- action may require a `GVariant` parameter. The required type of the
--- parameter can be inquired with `g_action_group_get_action_parameter_type()`.
--- Actions may be disabled, see `g_action_group_get_action_enabled()`.
--- Activating a disabled action has no effect.
--- 
--- Actions may optionally have a state in the form of a `GVariant`. The
--- current state of an action can be inquired with
--- `g_action_group_get_action_state()`. Activating a stateful action may
--- change its state, but it is also possible to set the state by calling
--- `g_action_group_change_action_state()`.
--- 
--- As typical example, consider a text editing application which has an
--- option to change the current font to 'bold'. A good way to represent
--- this would be a stateful action, with a boolean state. Activating the
--- action would toggle the state.
--- 
--- Each action in the group has a unique name (which is a string).  All
--- method calls, except `g_action_group_list_actions()` take the name of
--- an action as an argument.
--- 
--- The `GActionGroup` API is meant to be the 'public' API to the action
--- group.  The calls here are exactly the interaction that 'external
--- forces' (eg: UI, incoming D-Bus messages, etc.) are supposed to have
--- with actions.  'Internal' APIs (ie: ones meant only to be accessed by
--- the action group implementation) are found on subclasses.  This is
--- why you will find - for example - `g_action_group_get_action_enabled()`
--- but not an equivalent `set()` call.
--- 
--- Signals are emitted on the action group in response to state changes
--- on individual actions.
--- 
--- Implementations of `GActionGroup` should provide implementations for
--- the virtual functions `g_action_group_list_actions()` and
--- `g_action_group_query_action()`.  The other virtual functions should
--- not be implemented - their "wrappers" are actually implemented with
--- calls to `g_action_group_query_action()`.
---
--- ---
---
---@class Gio.ActionGroup
Gio.ActionGroup = {}

--- # method Gio.ActionGroup:action_added()
---
--- Emits the `GActionGroup`::action-added signal on `action_group`.
--- 
--- This function should only be called by `GActionGroup` implementations.
---
--- ---
---
---@param self Gio.ActionGroup # a `GActionGroup`
---@param action_name string # the name of an action in the group
---@return nil
function Gio.ActionGroup:action_added(action_name) end

--- # method Gio.ActionGroup:action_enabled_changed()
---
--- Emits the `GActionGroup`::action-enabled-changed signal on `action_group`.
--- 
--- This function should only be called by `GActionGroup` implementations.
---
--- ---
---
---@param self Gio.ActionGroup # a `GActionGroup`
---@param action_name string # the name of an action in the group
---@param enabled (boolean|nil) # whether or not the action is now enabled
---@return nil
function Gio.ActionGroup:action_enabled_changed(action_name, enabled) end

--- # method Gio.ActionGroup:action_removed()
---
--- Emits the `GActionGroup`::action-removed signal on `action_group`.
--- 
--- This function should only be called by `GActionGroup` implementations.
---
--- ---
---
---@param self Gio.ActionGroup # a `GActionGroup`
---@param action_name string # the name of an action in the group
---@return nil
function Gio.ActionGroup:action_removed(action_name) end

--- # method Gio.ActionGroup:action_state_changed()
---
--- Emits the `GActionGroup`::action-state-changed signal on `action_group`.
--- 
--- This function should only be called by `GActionGroup` implementations.
---
--- ---
---
---@param self Gio.ActionGroup # a `GActionGroup`
---@param action_name string # the name of an action in the group
---@param state GLib.Variant # the new state of the named action
---@return nil
function Gio.ActionGroup:action_state_changed(action_name, state) end

--- # method Gio.ActionGroup:activate_action()
---
--- Activate the named action within `action_group`.
--- 
--- If the action is expecting a parameter, then the correct type of
--- parameter must be given as `parameter`.  If the action is expecting no
--- parameters then `parameter` must be `nil`.  See
--- `g_action_group_get_action_parameter_type()`.
--- 
--- If the `GActionGroup` implementation supports asynchronous remote
--- activation over D-Bus, this call may return before the relevant
--- D-Bus traffic has been sent, or any replies have been received. In
--- order to block on such asynchronous activation calls,
--- `g_dbus_connection_flush()` should be called prior to the code, which
--- depends on the result of the action activation. Without flushing
--- the D-Bus connection, there is no guarantee that the action would
--- have been activated.
--- 
--- The following code which runs in a remote app instance, shows an
--- example of a "quit" action being activated on the primary app
--- instance over D-Bus. Here `g_dbus_connection_flush()` is called
--- before ``exit()``. Without `g_dbus_connection_flush()`, the "quit" action
--- may fail to be activated on the primary instance.
--- 
--- ```c
--- // call "quit" action on primary instance
--- g_action_group_activate_action (G_ACTION_GROUP (app), "quit", NULL);
--- 
--- // make sure the action is activated now
--- g_dbus_connection_flush (...);
--- 
--- g_debug ("application has been terminated. exiting.");
--- 
--- exit (0);
--- ```
---
--- ---
---
---@param self Gio.ActionGroup # a `GActionGroup`
---@param action_name string # the name of the action to activate
---@param parameter? GLib.Variant # parameters to the activation
---@return nil
function Gio.ActionGroup:activate_action(action_name, parameter) end

--- # method Gio.ActionGroup:change_action_state()
---
--- Request for the state of the named action within `action_group` to be
--- changed to `value`.
--- 
--- The action must be stateful and `value` must be of the correct type.
--- See `g_action_group_get_action_state_type()`.
--- 
--- This call merely requests a change.  The action may refuse to change
--- its state or may change its state to something other than `value`.
--- See `g_action_group_get_action_state_hint()`.
--- 
--- If the `value` GVariant is floating, it is consumed.
---
--- ---
---
---@param self Gio.ActionGroup # a `GActionGroup`
---@param action_name string # the name of the action to request the change on
---@param value GLib.Variant # the new state
---@return nil
function Gio.ActionGroup:change_action_state(action_name, value) end

--- # method Gio.ActionGroup:get_action_enabled()
---
--- Checks if the named action within `action_group` is currently enabled.
--- 
--- An action must be enabled in order to be activated or in order to
--- have its state changed from outside callers.
---
--- ---
---
---@param self Gio.ActionGroup # a `GActionGroup`
---@param action_name string # the name of the action to query
---@return (boolean|nil) # whether or not the action is currently enabled
function Gio.ActionGroup:get_action_enabled(action_name) end

--- # method Gio.ActionGroup:get_action_parameter_type()
---
--- Queries the type of the parameter that must be given when activating
--- the named action within `action_group`.
--- 
--- When activating the action using `g_action_group_activate_action()`,
--- the `GVariant` given to that function must be of the type returned
--- by this function.
--- 
--- In the case that this function returns `nil`, you must not give any
--- `GVariant`, but `nil` instead.
--- 
--- The parameter type of a particular action will never change but it is
--- possible for an action to be removed and for a new action to be added
--- with the same name but a different parameter type.
---
--- ---
---
---@param self Gio.ActionGroup # a `GActionGroup`
---@param action_name string # the name of the action to query
---@return GLib.VariantType # the parameter type
function Gio.ActionGroup:get_action_parameter_type(action_name) end

--- # method Gio.ActionGroup:get_action_state()
---
--- Queries the current state of the named action within `action_group`.
--- 
--- If the action is not stateful then `nil` will be returned.  If the
--- action is stateful then the type of the return value is the type
--- given by `g_action_group_get_action_state_type()`.
--- 
--- The return value (if non-`nil`) should be freed with
--- `g_variant_unref()` when it is no longer required.
---
--- ---
---
---@param self Gio.ActionGroup # a `GActionGroup`
---@param action_name string # the name of the action to query
---@return GLib.Variant # the current state of the action
function Gio.ActionGroup:get_action_state(action_name) end

--- # method Gio.ActionGroup:get_action_state_hint()
---
--- Requests a hint about the valid range of values for the state of the
--- named action within `action_group`.
--- 
--- If `nil` is returned it either means that the action is not stateful
--- or that there is no hint about the valid range of values for the
--- state of the action.
--- 
--- If a `GVariant` array is returned then each item in the array is a
--- possible value for the state.  If a `GVariant` pair (ie: two-tuple) is
--- returned then the tuple specifies the inclusive lower and upper bound
--- of valid values for the state.
--- 
--- In any case, the information is merely a hint.  It may be possible to
--- have a state value outside of the hinted range and setting a value
--- within the range may fail.
--- 
--- The return value (if non-`nil`) should be freed with
--- `g_variant_unref()` when it is no longer required.
---
--- ---
---
---@param self Gio.ActionGroup # a `GActionGroup`
---@param action_name string # the name of the action to query
---@return GLib.Variant # the state range hint
function Gio.ActionGroup:get_action_state_hint(action_name) end

--- # method Gio.ActionGroup:get_action_state_type()
---
--- Queries the type of the state of the named action within
--- `action_group`.
--- 
--- If the action is stateful then this function returns the
--- `GVariantType` of the state.  All calls to
--- `g_action_group_change_action_state()` must give a `GVariant` of this
--- type and `g_action_group_get_action_state()` will return a `GVariant`
--- of the same type.
--- 
--- If the action is not stateful then this function will return `nil`.
--- In that case, `g_action_group_get_action_state()` will return `nil`
--- and you must not call `g_action_group_change_action_state()`.
--- 
--- The state type of a particular action will never change but it is
--- possible for an action to be removed and for a new action to be added
--- with the same name but a different state type.
---
--- ---
---
---@param self Gio.ActionGroup # a `GActionGroup`
---@param action_name string # the name of the action to query
---@return GLib.VariantType # the state type, if the action is stateful
function Gio.ActionGroup:get_action_state_type(action_name) end

--- # method Gio.ActionGroup:has_action()
---
--- Checks if the named action exists within `action_group`.
---
--- ---
---
---@param self Gio.ActionGroup # a `GActionGroup`
---@param action_name string # the name of the action to check for
---@return (boolean|nil) # whether the named action exists
function Gio.ActionGroup:has_action(action_name) end

--- # method Gio.ActionGroup:list_actions()
---
--- Lists the actions contained within `action_group`.
--- 
--- The caller is responsible for freeing the list with `g_strfreev()` when
--- it is no longer required.
---
--- ---
---
---@param self Gio.ActionGroup # a `GActionGroup`
---@return unknown[] # a `nil`-terminated array of the names of the actions in the group
function Gio.ActionGroup:list_actions() end

--- # method Gio.ActionGroup:query_action()
---
--- Queries all aspects of the named action within an `action_group`.
--- 
--- This function acquires the information available from
--- `g_action_group_has_action()`, `g_action_group_get_action_enabled()`,
--- `g_action_group_get_action_parameter_type()`,
--- `g_action_group_get_action_state_type()`,
--- `g_action_group_get_action_state_hint()` and
--- `g_action_group_get_action_state()` with a single function call.
--- 
--- This provides two main benefits.
--- 
--- The first is the improvement in efficiency that comes with not having
--- to perform repeated lookups of the action in order to discover
--- different things about it.  The second is that implementing
--- `GActionGroup` can now be done by only overriding this one virtual
--- function.
--- 
--- The interface provides a default implementation of this function that
--- calls the individual functions, as required, to fetch the
--- information.  The interface also provides default implementations of
--- those functions that call this function.  All implementations,
--- therefore, must override either this function or all of the others.
--- 
--- If the action exists, `true` is returned and any of the requested
--- fields (as indicated by having a non-`nil` reference passed in) are
--- filled.  If the action doesn't exist, `false` is returned and the
--- fields may or may not have been modified.
---
--- ---
---
---@param self Gio.ActionGroup # a `GActionGroup`
---@param action_name string # the name of an action in the group
---@param enabled (boolean|nil) # if the action is presently enabled
---@param parameter_type? GLib.VariantType # the parameter type, or `nil` if none needed
---@param state_type? GLib.VariantType # the state type, or `nil` if stateless
---@param state_hint? GLib.Variant # the state hint, or `nil` if none
---@param state? GLib.Variant # the current state, or `nil` if stateless
---@return (boolean|nil) # `true` if the action exists, else `false`
function Gio.ActionGroup:query_action(action_name, enabled, parameter_type, state_type, state_hint, state) end

--- # record Gio.ActionGroupInterface
---
--- The virtual function table for `GActionGroup`.
---
--- ---
---
---@class Gio.ActionGroupInterface
---@field g_iface GObject.TypeInterface
---@field has_action fun(action_group: Gio.ActionGroup, action_name: string): (boolean|nil)
---@field list_actions fun(action_group: Gio.ActionGroup): unknown[]
---@field get_action_enabled fun(action_group: Gio.ActionGroup, action_name: string): (boolean|nil)
---@field get_action_parameter_type fun(action_group: Gio.ActionGroup, action_name: string): GLib.VariantType
---@field get_action_state_type fun(action_group: Gio.ActionGroup, action_name: string): GLib.VariantType
---@field get_action_state_hint fun(action_group: Gio.ActionGroup, action_name: string): GLib.Variant
---@field get_action_state fun(action_group: Gio.ActionGroup, action_name: string): GLib.Variant
---@field change_action_state fun(action_group: Gio.ActionGroup, action_name: string, value: GLib.Variant): nil
---@field activate_action fun(action_group: Gio.ActionGroup, action_name: string, parameter: GLib.Variant): nil
---@field action_added fun(action_group: Gio.ActionGroup, action_name: string): nil
---@field action_removed fun(action_group: Gio.ActionGroup, action_name: string): nil
---@field action_enabled_changed fun(action_group: Gio.ActionGroup, action_name: string, enabled: (boolean|nil)): nil
---@field action_state_changed fun(action_group: Gio.ActionGroup, action_name: string, state: GLib.Variant): nil
---@field query_action fun(action_group: Gio.ActionGroup, action_name: string, enabled: (boolean|nil), parameter_type: GLib.VariantType, state_type: GLib.VariantType, state_hint: GLib.Variant, state: GLib.Variant): (boolean|nil)
Gio.ActionGroupInterface = {}

--- # record Gio.ActionInterface
---
--- The virtual function table for `GAction`.
---
--- ---
---
---@class Gio.ActionInterface
---@field g_iface GObject.TypeInterface
---@field get_name fun(action: Gio.Action): string
---@field get_parameter_type fun(action: Gio.Action): GLib.VariantType
---@field get_state_type fun(action: Gio.Action): GLib.VariantType
---@field get_state_hint fun(action: Gio.Action): GLib.Variant
---@field get_enabled fun(action: Gio.Action): (boolean|nil)
---@field get_state fun(action: Gio.Action): GLib.Variant
---@field change_state fun(action: Gio.Action, value: GLib.Variant): nil
---@field activate fun(action: Gio.Action, parameter: GLib.Variant): nil
Gio.ActionInterface = {}

--- # interface Gio.ActionMap
---
--- The GActionMap interface is implemented by `GActionGroup`
--- implementations that operate by containing a number of
--- named `GAction` instances, such as `GSimpleActionGroup`.
--- 
--- One useful application of this interface is to map the
--- names of actions from various action groups to unique,
--- prefixed names (e.g. by prepending "app." or "win.").
--- This is the motivation for the 'Map' part of the interface
--- name.
---
--- ---
---
---@class Gio.ActionMap
Gio.ActionMap = {}

--- # method Gio.ActionMap:add_action()
---
--- Adds an action to the `action_map`.
--- 
--- If the action map already contains an action with the same name
--- as `action` then the old action is dropped from the action map.
--- 
--- The action map takes its own reference on `action`.
---
--- ---
---
---@param self Gio.ActionMap # a `GActionMap`
---@param action Gio.Action # a `GAction`
---@return nil
function Gio.ActionMap:add_action(action) end

--- # method Gio.ActionMap:add_action_entries()
---
--- A convenience function for creating multiple `GSimpleAction` instances
--- and adding them to a `GActionMap`.
--- 
--- Each action is constructed as per one `GActionEntry`.
--- 
--- ```c
--- static void
--- activate_quit (GSimpleAction *simple,
---                GVariant      *parameter,
---                gpointer       user_data)
--- {
---   exit (0);
--- }
--- 
--- static void
--- activate_print_string (GSimpleAction *simple,
---                        GVariant      *parameter,
---                        gpointer       user_data)
--- {
---   g_print ("%s\n", g_variant_get_string (parameter, NULL));
--- }
--- 
--- static GActionGroup *
--- create_action_group (void)
--- {
---   const GActionEntry entries[] = {
---     { "quit",         activate_quit              },
---     { "print-string", activate_print_string, "s" }
---   };
---   GSimpleActionGroup *group;
--- 
---   group = g_simple_action_group_new ();
---   g_action_map_add_action_entries (G_ACTION_MAP (group), entries, G_N_ELEMENTS (entries), NULL);
--- 
---   return G_ACTION_GROUP (group);
--- }
--- ```
---
--- ---
---
---@param self Gio.ActionMap # a `GActionMap`
---@param entries unknown[] # a pointer to the first item in an array of `GActionEntry` structs
---@param n_entries integer # the length of `entries`, or -1 if `entries` is `nil`-terminated
---@param user_data? userdata # the user data for signal connections
---@return nil
function Gio.ActionMap:add_action_entries(entries, n_entries, user_data) end

--- # method Gio.ActionMap:lookup_action()
---
--- Looks up the action with the name `action_name` in `action_map`.
--- 
--- If no such action exists, returns `nil`.
---
--- ---
---
---@param self Gio.ActionMap # a `GActionMap`
---@param action_name string # the name of an action
---@return Gio.Action # a `GAction`, or `nil`
function Gio.ActionMap:lookup_action(action_name) end

--- # method Gio.ActionMap:remove_action()
---
--- Removes the named action from the action map.
--- 
--- If no action of this name is in the map then nothing happens.
---
--- ---
---
---@param self Gio.ActionMap # a `GActionMap`
---@param action_name string # the name of the action
---@return nil
function Gio.ActionMap:remove_action(action_name) end

--- # record Gio.ActionMapInterface
---
--- The virtual function table for `GActionMap`.
---
--- ---
---
---@class Gio.ActionMapInterface
---@field g_iface GObject.TypeInterface
---@field lookup_action fun(action_map: Gio.ActionMap, action_name: string): Gio.Action
---@field add_action fun(action_map: Gio.ActionMap, action: Gio.Action): nil
---@field remove_action fun(action_map: Gio.ActionMap, action_name: string): nil
Gio.ActionMapInterface = {}

--- # interface Gio.AppInfo
---
--- `GAppInfo` and `GAppLaunchContext` are used for describing and launching
--- applications installed on the system.
--- 
--- As of GLib 2.20, URIs will always be converted to POSIX paths
--- (using `g_file_get_path()`) when using `g_app_info_launch()` even if
--- the application requested an URI and not a POSIX path. For example
--- for a desktop-file based application with Exec key `totem
--- %U` and a single URI, `sftp://foo/file.avi`, then
--- `/home/user/.gvfs/sftp on foo/file.avi` will be passed. This will
--- only work if a set of suitable GIO extensions (such as gvfs 2.26
--- compiled with FUSE support), is available and operational; if this
--- is not the case, the URI will be passed unmodified to the application.
--- Some URIs, such as `mailto:`, of course cannot be mapped to a POSIX
--- path (in gvfs there's no FUSE mount for it); such URIs will be
--- passed unmodified to the application.
--- 
--- Specifically for gvfs 2.26 and later, the POSIX URI will be mapped
--- back to the GIO URI in the `GFile` constructors (since gvfs
--- implements the `GVfs` extension point). As such, if the application
--- needs to examine the URI, it needs to use `g_file_get_uri()` or
--- similar on `GFile`. In other words, an application cannot assume
--- that the URI passed to e.g. `g_file_new_for_commandline_arg()` is
--- equal to the result of `g_file_get_uri()`. The following snippet
--- illustrates this:
--- 
--- ```c
--- GFile *f;
--- char *uri;
--- 
--- file = g_file_new_for_commandline_arg (uri_from_commandline);
--- 
--- uri = g_file_get_uri (file);
--- strcmp (uri, uri_from_commandline) == 0;
--- g_free (uri);
--- 
--- if (g_file_has_uri_scheme (file, "cdda"))
---   {
---     // do something special with uri
---   }
--- g_object_unref (file);
--- ```
--- 
--- This code will work when both `cdda://sr0/Track 1.wav` and
--- `/home/user/.gvfs/cdda on sr0/Track 1.wav` is passed to the
--- application. It should be noted that it's generally not safe
--- for applications to rely on the format of a particular URIs.
--- Different launcher applications (e.g. file managers) may have
--- different ideas of what a given URI means.
---
--- ---
---
---@class Gio.AppInfo
Gio.AppInfo = {}

--- # method Gio.AppInfo:add_supports_type()
---
--- Adds a content type to the application information to indicate the
--- application is capable of opening files with the given content type.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`.
---@param content_type string # a string.
---@return (boolean|nil) # `true` on success, `false` on error.
function Gio.AppInfo:add_supports_type(content_type) end

--- # method Gio.AppInfo:can_delete()
---
--- Obtains the information whether the `GAppInfo` can be deleted.
--- See `g_app_info_delete()`.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`
---@return (boolean|nil) # `true` if `appinfo` can be deleted
function Gio.AppInfo:can_delete() end

--- # method Gio.AppInfo:can_remove_supports_type()
---
--- Checks if a supported content type can be removed from an application.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`.
---@return (boolean|nil) # `true` if it is possible to remove supported content types from a given `appinfo`, `false` if not.
function Gio.AppInfo:can_remove_supports_type() end

--- # method Gio.AppInfo:delete()
---
--- Tries to delete a `GAppInfo`.
--- 
--- On some platforms, there may be a difference between user-defined
--- `GAppInfos` which can be deleted, and system-wide ones which cannot.
--- See `g_app_info_can_delete()`.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`
---@return (boolean|nil) # `true` if `appinfo` has been deleted
function Gio.AppInfo:delete() end

--- # method Gio.AppInfo:dup()
---
--- Creates a duplicate of a `GAppInfo`.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`.
---@return Gio.AppInfo # a duplicate of `appinfo`.
function Gio.AppInfo:dup() end

--- # method Gio.AppInfo:equal()
---
--- Checks if two `GAppInfos` are equal.
--- 
--- Note that the check *may not* compare each individual
--- field, and only does an identity check. In case detecting changes in the
--- contents is needed, program code must additionally compare relevant fields.
---
--- ---
---
---@param self Gio.AppInfo # the first `GAppInfo`.
---@param appinfo2 Gio.AppInfo # the second `GAppInfo`.
---@return (boolean|nil) # `true` if `appinfo1` is equal to `appinfo2`. `false` otherwise.
function Gio.AppInfo:equal(appinfo2) end

--- # method Gio.AppInfo:get_commandline()
---
--- Gets the commandline with which the application will be
--- started.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`
---@return string # a string containing the `appinfo`'s commandline, or `nil` if this information is not available
function Gio.AppInfo:get_commandline() end

--- # method Gio.AppInfo:get_description()
---
--- Gets a human-readable description of an installed application.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`.
---@return string # a string containing a description of the application `appinfo`, or `nil` if none.
function Gio.AppInfo:get_description() end

--- # method Gio.AppInfo:get_display_name()
---
--- Gets the display name of the application. The display name is often more
--- descriptive to the user than the name itself.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`.
---@return string # the display name of the application for `appinfo`, or the name if no display name is available.
function Gio.AppInfo:get_display_name() end

--- # method Gio.AppInfo:get_executable()
---
--- Gets the executable's name for the installed application.
--- 
--- This is intended to be used for debugging or labelling what program is going
--- to be run. To launch the executable, use `g_app_info_launch()` and related
--- functions, rather than spawning the return value from this function.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`
---@return string # a string containing the `appinfo`'s application binaries name
function Gio.AppInfo:get_executable() end

--- # method Gio.AppInfo:get_icon()
---
--- Gets the icon for the application.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`.
---@return Gio.Icon # the default `GIcon` for `appinfo` or `nil` if there is no default icon.
function Gio.AppInfo:get_icon() end

--- # method Gio.AppInfo:get_id()
---
--- Gets the ID of an application. An id is a string that
--- identifies the application. The exact format of the id is
--- platform dependent. For instance, on Unix this is the
--- desktop file id from the xdg menu specification.
--- 
--- Note that the returned ID may be `nil`, depending on how
--- the `appinfo` has been constructed.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`.
---@return string # a string containing the application's ID.
function Gio.AppInfo:get_id() end

--- # method Gio.AppInfo:get_name()
---
--- Gets the installed name of the application.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`.
---@return string # the name of the application for `appinfo`.
function Gio.AppInfo:get_name() end

--- # method Gio.AppInfo:get_supported_types()
---
--- Retrieves the list of content types that `app_info` claims to support.
--- If this information is not provided by the environment, this function
--- will return `nil`.
--- This function does not take in consideration associations added with
--- `g_app_info_add_supports_type()`, but only those exported directly by
--- the application.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo` that can handle files
---@return unknown[] # a list of content types.
function Gio.AppInfo:get_supported_types() end

--- # method Gio.AppInfo:launch()
---
--- Launches the application. Passes `files` to the launched application
--- as arguments, using the optional `context` to get information
--- about the details of the launcher (like what screen it is on).
--- On error, `error` will be set accordingly.
--- 
--- To launch the application without arguments pass a `nil` `files` list.
--- 
--- Note that even if the launch is successful the application launched
--- can fail to start if it runs into problems during startup. There is
--- no way to detect this.
--- 
--- Some URIs can be changed when passed through a GFile (for instance
--- unsupported URIs with strange formats like mailto:), so if you have
--- a textual URI you want to pass in as argument, consider using
--- `g_app_info_launch_uris()` instead.
--- 
--- The launched application inherits the environment of the launching
--- process, but it can be modified with `g_app_launch_context_setenv()`
--- and `g_app_launch_context_unsetenv()`.
--- 
--- On UNIX, this function sets the `GIO_LAUNCHED_DESKTOP_FILE`
--- environment variable with the path of the launched desktop file and
--- `GIO_LAUNCHED_DESKTOP_FILE_PID` to the process id of the launched
--- process. This can be used to ignore `GIO_LAUNCHED_DESKTOP_FILE`,
--- should it be inherited by further processes. The `DISPLAY`,
--- `XDG_ACTIVATION_TOKEN` and `DESKTOP_STARTUP_ID` environment
--- variables are also set, based on information provided in `context`.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`
---@param files? Gio.File[] # a `GList` of `GFile` objects
---@param context? Gio.AppLaunchContext # a `GAppLaunchContext` or `nil`
---@return (boolean|nil) # `true` on successful launch, `false` otherwise.
function Gio.AppInfo:launch(files, context) end

--- # method Gio.AppInfo:launch_uris()
---
--- Launches the application. This passes the `uris` to the launched application
--- as arguments, using the optional `context` to get information
--- about the details of the launcher (like what screen it is on).
--- On error, `error` will be set accordingly. If the application only supports
--- one URI per invocation as part of their command-line, multiple instances
--- of the application will be spawned.
--- 
--- To launch the application without arguments pass a `nil` `uris` list.
--- 
--- Note that even if the launch is successful the application launched
--- can fail to start if it runs into problems during startup. There is
--- no way to detect this.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`
---@param uris? string[] # a `GList` containing URIs to launch.
---@param context? Gio.AppLaunchContext # a `GAppLaunchContext` or `nil`
---@return (boolean|nil) # `true` on successful launch, `false` otherwise.
function Gio.AppInfo:launch_uris(uris, context) end

--- # method Gio.AppInfo:launch_uris_async()
---
--- Async version of `g_app_info_launch_uris()`.
--- 
--- The `callback` is invoked immediately after the application launch, but it
--- waits for activation in case of D-Bus–activated applications and also provides
--- extended error information for sandboxed applications, see notes for
--- `g_app_info_launch_default_for_uri_async()`.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`
---@param uris? string[] # a `GList` containing URIs to launch.
---@param context? Gio.AppLaunchContext # a `GAppLaunchContext` or `nil`
---@param cancellable? Gio.Cancellable # a `GCancellable`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is done
---@param user_data? userdata # data to pass to `callback`
---@return nil
function Gio.AppInfo:launch_uris_async(uris, context, cancellable, callback, user_data) end

--- # method Gio.AppInfo:launch_uris_finish()
---
--- Finishes a `g_app_info_launch_uris_async()` operation.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` on successful launch, `false` otherwise.
function Gio.AppInfo:launch_uris_finish(result) end

--- # method Gio.AppInfo:remove_supports_type()
---
--- Removes a supported type from an application, if possible.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`.
---@param content_type string # a string.
---@return (boolean|nil) # `true` on success, `false` on error.
function Gio.AppInfo:remove_supports_type(content_type) end

--- # method Gio.AppInfo:set_as_default_for_extension()
---
--- Sets the application as the default handler for the given file extension.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`.
---@param extension string # a string containing the file extension (without the dot).
---@return (boolean|nil) # `true` on success, `false` on error.
function Gio.AppInfo:set_as_default_for_extension(extension) end

--- # method Gio.AppInfo:set_as_default_for_type()
---
--- Sets the application as the default handler for a given type.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`.
---@param content_type string # the content type.
---@return (boolean|nil) # `true` on success, `false` on error.
function Gio.AppInfo:set_as_default_for_type(content_type) end

--- # method Gio.AppInfo:set_as_last_used_for_type()
---
--- Sets the application as the last used application for a given type.
--- This will make the application appear as first in the list returned
--- by `g_app_info_get_recommended_for_type()`, regardless of the default
--- application for that content type.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`.
---@param content_type string # the content type.
---@return (boolean|nil) # `true` on success, `false` on error.
function Gio.AppInfo:set_as_last_used_for_type(content_type) end

--- # method Gio.AppInfo:should_show()
---
--- Checks if the application info should be shown in menus that
--- list available applications.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`.
---@return (boolean|nil) # `true` if the `appinfo` should be shown, `false` otherwise.
function Gio.AppInfo:should_show() end

--- # method Gio.AppInfo:supports_files()
---
--- Checks if the application accepts files as arguments.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`.
---@return (boolean|nil) # `true` if the `appinfo` supports files.
function Gio.AppInfo:supports_files() end

--- # method Gio.AppInfo:supports_uris()
---
--- Checks if the application supports reading files and directories from URIs.
---
--- ---
---
---@param self Gio.AppInfo # a `GAppInfo`.
---@return (boolean|nil) # `true` if the `appinfo` supports URIs.
function Gio.AppInfo:supports_uris() end

--- # function Gio.AppInfo.create_from_commandline()
---
--- Creates a new `GAppInfo` from the given information.
--- 
--- Note that for `commandline`, the quoting rules of the Exec key of the
--- [freedesktop.org Desktop Entry Specification](http://freedesktop.org/Standards/desktop-entry-spec)
--- are applied. For example, if the `commandline` contains
--- percent-encoded URIs, the percent-character must be doubled in order to prevent it from
--- being swallowed by Exec key unquoting. See the specification for exact quoting rules.
---
--- ---
---
---@param commandline string # the commandline to use
---@param application_name? string # the application name, or `nil` to use `commandline`
---@param flags Gio.AppInfoCreateFlags # flags that can specify details of the created `GAppInfo`
---@return Gio.AppInfo # new `GAppInfo` for given command.
function Gio.AppInfo.create_from_commandline(commandline, application_name, flags) end

--- # function Gio.AppInfo.get_all()
---
--- Gets a list of all of the applications currently registered
--- on this system.
--- 
--- For desktop files, this includes applications that have
--- `NoDisplay=true` set or are excluded from display by means
--- of `OnlyShowIn` or `NotShowIn`. See `g_app_info_should_show()`.
--- The returned list does not include applications which have
--- the `Hidden` key set.
---
--- ---
---
---@return Gio.AppInfo[] # a newly allocated `GList` of references to `GAppInfos`.
function Gio.AppInfo.get_all() end

--- # function Gio.AppInfo.get_all_for_type()
---
--- Gets a list of all `GAppInfos` for a given content type,
--- including the recommended and fallback `GAppInfos`. See
--- `g_app_info_get_recommended_for_type()` and
--- `g_app_info_get_fallback_for_type()`.
---
--- ---
---
---@param content_type string # the content type to find a `GAppInfo` for
---@return Gio.AppInfo[] # `GList` of `GAppInfos` for given `content_type` or `nil` on error.
function Gio.AppInfo.get_all_for_type(content_type) end

--- # function Gio.AppInfo.get_default_for_type()
---
--- Gets the default `GAppInfo` for a given content type.
---
--- ---
---
---@param content_type string # the content type to find a `GAppInfo` for
---@param must_support_uris (boolean|nil) # if `true`, the `GAppInfo` is expected to support URIs
---@return Gio.AppInfo # `GAppInfo` for given `content_type` or `nil` on error.
function Gio.AppInfo.get_default_for_type(content_type, must_support_uris) end

--- # function Gio.AppInfo.get_default_for_type_async()
---
--- Asynchronously gets the default `GAppInfo` for a given content type.
---
--- ---
---
---@param content_type string # the content type to find a `GAppInfo` for
---@param must_support_uris (boolean|nil) # if `true`, the `GAppInfo` is expected to support URIs
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is done
---@param user_data? userdata # data to pass to `callback`
---@return nil
function Gio.AppInfo.get_default_for_type_async(content_type, must_support_uris, cancellable, callback, user_data) end

--- # function Gio.AppInfo.get_default_for_type_finish()
---
--- Finishes a default `GAppInfo` lookup started by
--- `g_app_info_get_default_for_type_async()`.
--- 
--- If no `GAppInfo` is found, then `error` will be set to %G_IO_ERROR_NOT_FOUND.
---
--- ---
---
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return Gio.AppInfo # `GAppInfo` for given `content_type` or `nil` on error.
function Gio.AppInfo.get_default_for_type_finish(result) end

--- # function Gio.AppInfo.get_default_for_uri_scheme()
---
--- Gets the default application for handling URIs with
--- the given URI scheme. A URI scheme is the initial part
--- of the URI, up to but not including the ':', e.g. "http",
--- "ftp" or "sip".
---
--- ---
---
---@param uri_scheme string # a string containing a URI scheme.
---@return Gio.AppInfo # `GAppInfo` for given `uri_scheme` or `nil` on error.
function Gio.AppInfo.get_default_for_uri_scheme(uri_scheme) end

--- # function Gio.AppInfo.get_default_for_uri_scheme_async()
---
--- Asynchronously gets the default application for handling URIs with
--- the given URI scheme. A URI scheme is the initial part
--- of the URI, up to but not including the ':', e.g. "http",
--- "ftp" or "sip".
---
--- ---
---
---@param uri_scheme string # a string containing a URI scheme.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is done
---@param user_data? userdata # data to pass to `callback`
---@return nil
function Gio.AppInfo.get_default_for_uri_scheme_async(uri_scheme, cancellable, callback, user_data) end

--- # function Gio.AppInfo.get_default_for_uri_scheme_finish()
---
--- Finishes a default `GAppInfo` lookup started by
--- `g_app_info_get_default_for_uri_scheme_async()`.
--- 
--- If no `GAppInfo` is found, then `error` will be set to %G_IO_ERROR_NOT_FOUND.
---
--- ---
---
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return Gio.AppInfo # `GAppInfo` for given `uri_scheme` or `nil` on error.
function Gio.AppInfo.get_default_for_uri_scheme_finish(result) end

--- # function Gio.AppInfo.get_fallback_for_type()
---
--- Gets a list of fallback `GAppInfos` for a given content type, i.e.
--- those applications which claim to support the given content type
--- by MIME type subclassing and not directly.
---
--- ---
---
---@param content_type string # the content type to find a `GAppInfo` for
---@return Gio.AppInfo[] # `GList` of `GAppInfos` for given `content_type` or `nil` on error.
function Gio.AppInfo.get_fallback_for_type(content_type) end

--- # function Gio.AppInfo.get_recommended_for_type()
---
--- Gets a list of recommended `GAppInfos` for a given content type, i.e.
--- those applications which claim to support the given content type exactly,
--- and not by MIME type subclassing.
--- Note that the first application of the list is the last used one, i.e.
--- the last one for which `g_app_info_set_as_last_used_for_type()` has been
--- called.
---
--- ---
---
---@param content_type string # the content type to find a `GAppInfo` for
---@return Gio.AppInfo[] # `GList` of `GAppInfos` for given `content_type` or `nil` on error.
function Gio.AppInfo.get_recommended_for_type(content_type) end

--- # function Gio.AppInfo.launch_default_for_uri()
---
--- Utility function that launches the default application
--- registered to handle the specified uri. Synchronous I/O
--- is done on the uri to detect the type of the file if
--- required.
--- 
--- The D-Bus–activated applications don't have to be started if your application
--- terminates too soon after this function. To prevent this, use
--- `g_app_info_launch_default_for_uri_async()` instead.
---
--- ---
---
---@param uri string # the uri to show
---@param context? Gio.AppLaunchContext # an optional `GAppLaunchContext`
---@return (boolean|nil) # `true` on success, `false` on error.
function Gio.AppInfo.launch_default_for_uri(uri, context) end

--- # function Gio.AppInfo.launch_default_for_uri_async()
---
--- Async version of `g_app_info_launch_default_for_uri()`.
--- 
--- This version is useful if you are interested in receiving
--- error information in the case where the application is
--- sandboxed and the portal may present an application chooser
--- dialog to the user.
--- 
--- This is also useful if you want to be sure that the D-Bus–activated
--- applications are really started before termination and if you are interested
--- in receiving error information from their activation.
---
--- ---
---
---@param uri string # the uri to show
---@param context? Gio.AppLaunchContext # an optional `GAppLaunchContext`
---@param cancellable? Gio.Cancellable # a `GCancellable`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is done
---@param user_data? userdata # data to pass to `callback`
---@return nil
function Gio.AppInfo.launch_default_for_uri_async(uri, context, cancellable, callback, user_data) end

--- # function Gio.AppInfo.launch_default_for_uri_finish()
---
--- Finishes an asynchronous launch-default-for-uri operation.
---
--- ---
---
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` if the launch was successful, `false` if `error` is set
function Gio.AppInfo.launch_default_for_uri_finish(result) end

--- # function Gio.AppInfo.reset_type_associations()
---
--- Removes all changes to the type associations done by
--- `g_app_info_set_as_default_for_type()`,
--- `g_app_info_set_as_default_for_extension()`,
--- `g_app_info_add_supports_type()` or
--- `g_app_info_remove_supports_type()`.
---
--- ---
---
---@param content_type string # a content type
---@return nil
function Gio.AppInfo.reset_type_associations(content_type) end

---@enum Gio.AppInfoCreateFlags
Gio.AppInfoCreateFlags = {}

--- # record Gio.AppInfoIface
---
--- Application Information interface, for operating system portability.
---
--- ---
---
---@class Gio.AppInfoIface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field dup fun(appinfo: Gio.AppInfo): Gio.AppInfo
---@field equal fun(appinfo1: Gio.AppInfo, appinfo2: Gio.AppInfo): (boolean|nil)
---@field get_id fun(appinfo: Gio.AppInfo): string
---@field get_name fun(appinfo: Gio.AppInfo): string
---@field get_description fun(appinfo: Gio.AppInfo): string
---@field get_executable fun(appinfo: Gio.AppInfo): string
---@field get_icon fun(appinfo: Gio.AppInfo): Gio.Icon
---@field launch fun(appinfo: Gio.AppInfo, files: Gio.File[], context: Gio.AppLaunchContext): (boolean|nil)
---@field supports_uris fun(appinfo: Gio.AppInfo): (boolean|nil)
---@field supports_files fun(appinfo: Gio.AppInfo): (boolean|nil)
---@field launch_uris fun(appinfo: Gio.AppInfo, uris: string[], context: Gio.AppLaunchContext): (boolean|nil)
---@field should_show fun(appinfo: Gio.AppInfo): (boolean|nil)
---@field set_as_default_for_type fun(appinfo: Gio.AppInfo, content_type: string): (boolean|nil)
---@field set_as_default_for_extension fun(appinfo: Gio.AppInfo, extension: string): (boolean|nil)
---@field add_supports_type fun(appinfo: Gio.AppInfo, content_type: string): (boolean|nil)
---@field can_remove_supports_type fun(appinfo: Gio.AppInfo): (boolean|nil)
---@field remove_supports_type fun(appinfo: Gio.AppInfo, content_type: string): (boolean|nil)
---@field can_delete fun(appinfo: Gio.AppInfo): (boolean|nil)
---@field do_delete fun(appinfo: Gio.AppInfo): (boolean|nil)
---@field get_commandline fun(appinfo: Gio.AppInfo): string
---@field get_display_name fun(appinfo: Gio.AppInfo): string
---@field set_as_last_used_for_type fun(appinfo: Gio.AppInfo, content_type: string): (boolean|nil)
---@field get_supported_types fun(appinfo: Gio.AppInfo): unknown[]
---@field launch_uris_async fun(appinfo: Gio.AppInfo, uris: string[], context: Gio.AppLaunchContext, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field launch_uris_finish fun(appinfo: Gio.AppInfo, result: Gio.AsyncResult): (boolean|nil)
Gio.AppInfoIface = {}

--- # class Gio.AppInfoMonitor
---
--- `GAppInfoMonitor` is a very simple object used for monitoring the app
--- info database for changes (ie: newly installed or removed
--- applications).
--- 
--- Call `g_app_info_monitor_get()` to get a `GAppInfoMonitor` and connect
--- to the "changed" signal.
--- 
--- In the usual case, applications should try to make note of the change
--- (doing things like invalidating caches) but not act on it.  In
--- particular, applications should avoid making calls to `GAppInfo` APIs
--- in response to the change signal, deferring these until the time that
--- the data is actually required.  The exception to this case is when
--- application information is actually being displayed on the screen
--- (eg: during a search or when the list of all applications is shown).
--- The reason for this is that changes to the list of installed
--- applications often come in groups (like during system updates) and
--- rescanning the list on every change is pointless and expensive.
---
--- ---
---
---@class Gio.AppInfoMonitor : GObject.Object
Gio.AppInfoMonitor = {}

--- # function Gio.AppInfoMonitor.get()
---
--- Gets the `GAppInfoMonitor` for the current thread-default main
--- context.
--- 
--- The `GAppInfoMonitor` will emit a "changed" signal in the
--- thread-default main context whenever the list of installed
--- applications (as reported by `g_app_info_get_all()`) may have changed.
--- 
--- You must only call `g_object_unref()` on the return value from under
--- the same main context as you created it.
---
--- ---
---
---@return Gio.AppInfoMonitor # a reference to a `GAppInfoMonitor`
function Gio.AppInfoMonitor.get() end

--- # class Gio.AppLaunchContext
---
--- Integrating the launch with the launching application. This is used to
--- handle for instance startup notification and launching the new application
--- on the same screen as the launching window.
---
--- ---
---
---@class Gio.AppLaunchContext : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.AppLaunchContextPrivate
---@operator call: Gio.AppLaunchContext
Gio.AppLaunchContext = {}

--- # method Gio.AppLaunchContext:get_display()
---
--- Gets the display string for the `context`. This is used to ensure new
--- applications are started on the same display as the launching
--- application, by setting the `DISPLAY` environment variable.
---
--- ---
---
---@param self Gio.AppLaunchContext # a `GAppLaunchContext`
---@param info Gio.AppInfo # a `GAppInfo`
---@param files Gio.File[] # a `GList` of `GFile` objects
---@return string # a display string for the display.
function Gio.AppLaunchContext:get_display(info, files) end

--- # method Gio.AppLaunchContext:get_environment()
---
--- Gets the complete environment variable list to be passed to
--- the child process when `context` is used to launch an application.
--- This is a `nil`-terminated array of strings, where each string has
--- the form `KEY=VALUE`.
---
--- ---
---
---@param self Gio.AppLaunchContext # a `GAppLaunchContext`
---@return unknown[] # the child's environment
function Gio.AppLaunchContext:get_environment() end

--- # method Gio.AppLaunchContext:get_startup_notify_id()
---
--- Initiates startup notification for the application and returns the
--- `XDG_ACTIVATION_TOKEN` or `DESKTOP_STARTUP_ID` for the launched operation,
--- if supported.
--- 
--- The returned token may be referred to equivalently as an ‘activation token’
--- (using Wayland terminology) or a ‘startup sequence ID’ (using X11 terminology).
--- The two [are interoperable](https://gitlab.freedesktop.org/wayland/wayland-protocols/-/blob/main/staging/xdg-activation/x11-interoperation.rst).
--- 
--- Activation tokens are defined in the [XDG Activation Protocol](https://wayland.app/protocols/xdg-activation-v1),
--- and startup notification IDs are defined in the
--- [freedesktop.org Startup Notification Protocol](http://standards.freedesktop.org/startup-notification-spec/startup-notification-latest.txt).
--- 
--- Support for the XDG Activation Protocol was added in GLib 2.76.
---
--- ---
---
---@param self Gio.AppLaunchContext # a `GAppLaunchContext`
---@param info Gio.AppInfo # a `GAppInfo`
---@param files Gio.File[] # a `GList` of of `GFile` objects
---@return string # a startup notification ID for the application, or `nil` if not supported.
function Gio.AppLaunchContext:get_startup_notify_id(info, files) end

--- # method Gio.AppLaunchContext:launch_failed()
---
--- Called when an application has failed to launch, so that it can cancel
--- the application startup notification started in `g_app_launch_context_get_startup_notify_id()`.
---
--- ---
---
---@param self Gio.AppLaunchContext # a `GAppLaunchContext`.
---@param startup_notify_id string # the startup notification id that was returned by `g_app_launch_context_get_startup_notify_id()`.
---@return nil
function Gio.AppLaunchContext:launch_failed(startup_notify_id) end

--- # method Gio.AppLaunchContext:setenv()
---
--- Arranges for `variable` to be set to `value` in the child's
--- environment when `context` is used to launch an application.
---
--- ---
---
---@param self Gio.AppLaunchContext # a `GAppLaunchContext`
---@param variable string # the environment variable to set
---@param value string # the value for to set the variable to.
---@return nil
function Gio.AppLaunchContext:setenv(variable, value) end

--- # method Gio.AppLaunchContext:unsetenv()
---
--- Arranges for `variable` to be unset in the child's environment
--- when `context` is used to launch an application.
---
--- ---
---
---@param self Gio.AppLaunchContext # a `GAppLaunchContext`
---@param variable string # the environment variable to remove
---@return nil
function Gio.AppLaunchContext:unsetenv(variable) end

--- # function Gio.AppLaunchContext.new()
---
--- Creates a new application launch context. This is not normally used,
--- instead you instantiate a subclass of this, such as `GdkAppLaunchContext`.
---
--- ---
---
---@return Gio.AppLaunchContext # a `GAppLaunchContext`.
function Gio.AppLaunchContext.new() end

--- # record Gio.AppLaunchContextClass
---
---@class Gio.AppLaunchContextClass
---@field parent_class GObject.ObjectClass
---@field get_display fun(context: Gio.AppLaunchContext, info: Gio.AppInfo, files: Gio.File[]): string
---@field get_startup_notify_id fun(context: Gio.AppLaunchContext, info: Gio.AppInfo, files: Gio.File[]): string
---@field launch_failed fun(context: Gio.AppLaunchContext, startup_notify_id: string): nil
---@field launched fun(context: Gio.AppLaunchContext, info: Gio.AppInfo, platform_data: GLib.Variant): nil
---@field launch_started fun(context: Gio.AppLaunchContext, info: Gio.AppInfo, platform_data: GLib.Variant): nil
Gio.AppLaunchContextClass = {}

--- # record Gio.AppLaunchContextPrivate
---
---@class Gio.AppLaunchContextPrivate
Gio.AppLaunchContextPrivate = {}

--- # class Gio.Application
---
--- A `GApplication` is the foundation of an application.  It wraps some
--- low-level platform-specific services and is intended to act as the
--- foundation for higher-level application classes such as
--- `GtkApplication` or `MxApplication`.  In general, you should not use
--- this class outside of a higher level framework.
--- 
--- GApplication provides convenient life cycle management by maintaining
--- a "use count" for the primary application instance. The use count can
--- be changed using `g_application_hold()` and `g_application_release()`. If
--- it drops to zero, the application exits. Higher-level classes such as
--- `GtkApplication` employ the use count to ensure that the application
--- stays alive as long as it has any opened windows.
--- 
--- Another feature that GApplication (optionally) provides is process
--- uniqueness. Applications can make use of this functionality by
--- providing a unique application ID. If given, only one application
--- with this ID can be running at a time per session. The session
--- concept is platform-dependent, but corresponds roughly to a graphical
--- desktop login. When your application is launched again, its
--- arguments are passed through platform communication to the already
--- running program. The already running instance of the program is
--- called the "primary instance"; for non-unique applications this is
--- always the current instance. On Linux, the D-Bus session bus
--- is used for communication.
--- 
--- The use of `GApplication` differs from some other commonly-used
--- uniqueness libraries (such as libunique) in important ways. The
--- application is not expected to manually register itself and check
--- if it is the primary instance. Instead, the `main()` function of a
--- `GApplication` should do very little more than instantiating the
--- application instance, possibly connecting signal handlers, then
--- calling `g_application_run()`. All checks for uniqueness are done
--- internally. If the application is the primary instance then the
--- startup signal is emitted and the mainloop runs. If the application
--- is not the primary instance then a signal is sent to the primary
--- instance and `g_application_run()` promptly returns. See the code
--- examples below.
--- 
--- If used, the expected form of an application identifier is the same as
--- that of of a
--- [D-Bus well-known bus name](https://dbus.freedesktop.org/doc/dbus-specification.html`message`-protocol-names-bus).
--- Examples include: `com.example.MyApp`, `org.example.internal_apps.Calculator`,
--- `org._7_zip.Archiver`.
--- For details on valid application identifiers, see `g_application_id_is_valid()`.
--- 
--- On Linux, the application identifier is claimed as a well-known bus name
--- on the user's session bus.  This means that the uniqueness of your
--- application is scoped to the current session.  It also means that your
--- application may provide additional services (through registration of other
--- object paths) at that bus name.  The registration of these object paths
--- should be done with the shared GDBus session bus.  Note that due to the
--- internal architecture of GDBus, method calls can be dispatched at any time
--- (even if a main loop is not running).  For this reason, you must ensure that
--- any object paths that you wish to register are registered before `GApplication`
--- attempts to acquire the bus name of your application (which happens in
--- `g_application_register()`).  Unfortunately, this means that you cannot use
--- `g_application_get_is_remote()` to decide if you want to register object paths.
--- 
--- GApplication also implements the `GActionGroup` and `GActionMap`
--- interfaces and lets you easily export actions by adding them with
--- `g_action_map_add_action()`. When invoking an action by calling
--- `g_action_group_activate_action()` on the application, it is always
--- invoked in the primary instance. The actions are also exported on
--- the session bus, and GIO provides the `GDBusActionGroup` wrapper to
--- conveniently access them remotely. GIO provides a `GDBusMenuModel` wrapper
--- for remote access to exported `GMenuModels`.
--- 
--- There is a number of different entry points into a GApplication:
--- 
--- - via 'Activate' (i.e. just starting the application)
--- 
--- - via 'Open' (i.e. opening some files)
--- 
--- - by handling a command-line
--- 
--- - via activating an action
--- 
--- The `GApplication`::startup signal lets you handle the application
--- initialization for all of these in a single place.
--- 
--- Regardless of which of these entry points is used to start the
--- application, GApplication passes some ‘platform data’ from the
--- launching instance to the primary instance, in the form of a
--- `GVariant` dictionary mapping strings to variants. To use platform
--- data, override the `before_emit` or `after_emit` virtual functions
--- in your `GApplication` subclass. When dealing with
--- `GApplicationCommandLine` objects, the platform data is
--- directly available via `g_application_command_line_get_cwd()`,
--- `g_application_command_line_get_environ()` and
--- `g_application_command_line_get_platform_data()`.
--- 
--- As the name indicates, the platform data may vary depending on the
--- operating system, but it always includes the current directory (key
--- "cwd"), and optionally the environment (ie the set of environment
--- variables and their values) of the calling process (key "environ").
--- The environment is only added to the platform data if the
--- %G_APPLICATION_SEND_ENVIRONMENT flag is set. `GApplication` subclasses
--- can add their own platform data by overriding the `add_platform_data`
--- virtual function. For instance, `GtkApplication` adds startup notification
--- data in this way.
--- 
--- To parse commandline arguments you may handle the
--- `GApplication`::command-line signal or override the `local_command_line()`
--- vfunc, to parse them in either the primary instance or the local instance,
--- respectively.
--- 
--- For an example of opening files with a GApplication, see
--- [gapplication-example-open.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-open.c).
--- 
--- For an example of using actions with GApplication, see
--- [gapplication-example-actions.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-actions.c).
--- 
--- For an example of using extra D-Bus hooks with GApplication, see
--- [gapplication-example-dbushooks.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-dbushooks.c).
---
--- ---
---
---@class Gio.Application : GObject.Object, Gio.ActionGroup, Gio.ActionMap
---@field parent_instance GObject.Object
---@field priv Gio.ApplicationPrivate
---@operator call: Gio.Application
Gio.Application = {}

--- # method Gio.Application:activate()
---
--- Activates the application.
--- 
--- In essence, this results in the `GApplication`::activate signal being
--- emitted in the primary instance.
--- 
--- The application must be registered before calling this function.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@return nil
function Gio.Application:activate() end

--- # method Gio.Application:add_main_option()
---
--- Add an option to be handled by `application`.
--- 
--- Calling this function is the equivalent of calling
--- `g_application_add_main_option_entries()` with a single `GOptionEntry`
--- that has its arg_data member set to `nil`.
--- 
--- The parsed arguments will be packed into a `GVariantDict` which
--- is passed to `GApplication`::handle-local-options. If
--- %G_APPLICATION_HANDLES_COMMAND_LINE is set, then it will also
--- be sent to the primary instance. See
--- `g_application_add_main_option_entries()` for more details.
--- 
--- See `GOptionEntry` for more documentation of the arguments.
---
--- ---
---
---@param self Gio.Application # the `GApplication`
---@param long_name string # the long name of an option used to specify it in a commandline
---@param short_name integer # the short name of an option
---@param flags GLib.OptionFlags # flags from `GOptionFlags`
---@param arg GLib.OptionArg # the type of the option, as a `GOptionArg`
---@param description string # the description for the option in `--help` output
---@param arg_description? string # the placeholder to use for the extra argument parsed by the option in `--help` output
---@return nil
function Gio.Application:add_main_option(long_name, short_name, flags, arg, description, arg_description) end

--- # method Gio.Application:add_main_option_entries()
---
--- Adds main option entries to be handled by `application`.
--- 
--- This function is comparable to `g_option_context_add_main_entries()`.
--- 
--- After the commandline arguments are parsed, the
--- `GApplication`::handle-local-options signal will be emitted.  At this
--- point, the application can inspect the values pointed to by `arg_data`
--- in the given `GOptionEntrys`.
--- 
--- Unlike `GOptionContext`, `GApplication` supports giving a `nil`
--- `arg_data` for a non-callback `GOptionEntry`.  This results in the
--- argument in question being packed into a `GVariantDict` which is also
--- passed to `GApplication`::handle-local-options, where it can be
--- inspected and modified.  If %G_APPLICATION_HANDLES_COMMAND_LINE is
--- set, then the resulting dictionary is sent to the primary instance,
--- where `g_application_command_line_get_options_dict()` will return it.
--- As it has been passed outside the process at this point, the types of all
--- values in the options dict must be checked before being used.
--- This "packing" is done according to the type of the argument --
--- booleans for normal flags, strings for strings, bytestrings for
--- filenames, etc.  The packing only occurs if the flag is given (ie: we
--- do not pack a "false" `GVariant` in the case that a flag is missing).
--- 
--- In general, it is recommended that all commandline arguments are
--- parsed locally.  The options dictionary should then be used to
--- transmit the result of the parsing to the primary instance, where
--- `g_variant_dict_lookup()` can be used.  For local options, it is
--- possible to either use `arg_data` in the usual way, or to consult (and
--- potentially remove) the option from the options dictionary.
--- 
--- This function is new in GLib 2.40.  Before then, the only real choice
--- was to send all of the commandline arguments (options and all) to the
--- primary instance for handling.  `GApplication` ignored them completely
--- on the local side.  Calling this function "opts in" to the new
--- behaviour, and in particular, means that unrecognised options will be
--- treated as errors.  Unrecognised options have never been ignored when
--- %G_APPLICATION_HANDLES_COMMAND_LINE is unset.
--- 
--- If `GApplication`::handle-local-options needs to see the list of
--- filenames, then the use of %G_OPTION_REMAINING is recommended.  If
--- `arg_data` is `nil` then %G_OPTION_REMAINING can be used as a key into
--- the options dictionary.  If you do use %G_OPTION_REMAINING then you
--- need to handle these arguments for yourself because once they are
--- consumed, they will no longer be visible to the default handling
--- (which treats them as filenames to be opened).
--- 
--- It is important to use the proper GVariant format when retrieving
--- the options with `g_variant_dict_lookup()`:
--- - for %G_OPTION_ARG_NONE, use `b`
--- - for %G_OPTION_ARG_STRING, use `&s`
--- - for %G_OPTION_ARG_INT, use `i`
--- - for %G_OPTION_ARG_INT64, use `x`
--- - for %G_OPTION_ARG_DOUBLE, use `d`
--- - for %G_OPTION_ARG_FILENAME, use `^&ay`
--- - for %G_OPTION_ARG_STRING_ARRAY, use `^a&s`
--- - for %G_OPTION_ARG_FILENAME_ARRAY, use `^a&ay`
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@param entries unknown[] # a `nil`-terminated list of `GOptionEntrys`
---@return nil
function Gio.Application:add_main_option_entries(entries) end

--- # method Gio.Application:add_option_group()
---
--- Adds a `GOptionGroup` to the commandline handling of `application`.
--- 
--- This function is comparable to `g_option_context_add_group()`.
--- 
--- Unlike `g_application_add_main_option_entries()`, this function does
--- not deal with `nil` `arg_data` and never transmits options to the
--- primary instance.
--- 
--- The reason for that is because, by the time the options arrive at the
--- primary instance, it is typically too late to do anything with them.
--- Taking the GTK option group as an example: GTK will already have been
--- initialised by the time the `GApplication`::command-line handler runs.
--- In the case that this is not the first-running instance of the
--- application, the existing instance may already have been running for
--- a very long time.
--- 
--- This means that the options from `GOptionGroup` are only really usable
--- in the case that the instance of the application being run is the
--- first instance.  Passing options like `--display=` or `--gdk-debug=`
--- on future runs will have no effect on the existing primary instance.
--- 
--- Calling this function will cause the options in the supplied option
--- group to be parsed, but it does not cause you to be "opted in" to the
--- new functionality whereby unrecognised options are rejected even if
--- %G_APPLICATION_HANDLES_COMMAND_LINE was given.
---
--- ---
---
---@param self Gio.Application # the `GApplication`
---@param group GLib.OptionGroup # a `GOptionGroup`
---@return nil
function Gio.Application:add_option_group(group) end

--- # method Gio.Application:bind_busy_property()
---
--- Marks `application` as busy (see `g_application_mark_busy()`) while
--- `property` on `object` is `true`.
--- 
--- The binding holds a reference to `application` while it is active, but
--- not to `object`. Instead, the binding is destroyed when `object` is
--- finalized.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@param object GObject.Object # a `GObject`
---@param property string # the name of a boolean property of `object`
---@return nil
function Gio.Application:bind_busy_property(object, property) end

--- # method Gio.Application:get_application_id()
---
--- Gets the unique identifier for `application`.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@return string # the identifier for `application`, owned by `application`
function Gio.Application:get_application_id() end

--- # method Gio.Application:get_dbus_connection()
---
--- Gets the `GDBusConnection` being used by the application, or `nil`.
--- 
--- If `GApplication` is using its D-Bus backend then this function will
--- return the `GDBusConnection` being used for uniqueness and
--- communication with the desktop environment and other instances of the
--- application.
--- 
--- If `GApplication` is not using D-Bus then this function will return
--- `nil`.  This includes the situation where the D-Bus backend would
--- normally be in use but we were unable to connect to the bus.
--- 
--- This function must not be called before the application has been
--- registered.  See `g_application_get_is_registered()`.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@return Gio.DBusConnection # a `GDBusConnection`, or `nil`
function Gio.Application:get_dbus_connection() end

--- # method Gio.Application:get_dbus_object_path()
---
--- Gets the D-Bus object path being used by the application, or `nil`.
--- 
--- If `GApplication` is using its D-Bus backend then this function will
--- return the D-Bus object path that `GApplication` is using.  If the
--- application is the primary instance then there is an object published
--- at this path.  If the application is not the primary instance then
--- the result of this function is undefined.
--- 
--- If `GApplication` is not using D-Bus then this function will return
--- `nil`.  This includes the situation where the D-Bus backend would
--- normally be in use but we were unable to connect to the bus.
--- 
--- This function must not be called before the application has been
--- registered.  See `g_application_get_is_registered()`.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@return string # the object path, or `nil`
function Gio.Application:get_dbus_object_path() end

--- # method Gio.Application:get_flags()
---
--- Gets the flags for `application`.
--- 
--- See `GApplicationFlags`.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@return Gio.ApplicationFlags # the flags for `application`
function Gio.Application:get_flags() end

--- # method Gio.Application:get_inactivity_timeout()
---
--- Gets the current inactivity timeout for the application.
--- 
--- This is the amount of time (in milliseconds) after the last call to
--- `g_application_release()` before the application stops running.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@return integer # the timeout, in milliseconds
function Gio.Application:get_inactivity_timeout() end

--- # method Gio.Application:get_is_busy()
---
--- Gets the application's current busy state, as set through
--- `g_application_mark_busy()` or `g_application_bind_busy_property()`.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@return (boolean|nil) # `true` if `application` is currently marked as busy
function Gio.Application:get_is_busy() end

--- # method Gio.Application:get_is_registered()
---
--- Checks if `application` is registered.
--- 
--- An application is registered if `g_application_register()` has been
--- successfully called.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@return (boolean|nil) # `true` if `application` is registered
function Gio.Application:get_is_registered() end

--- # method Gio.Application:get_is_remote()
---
--- Checks if `application` is remote.
--- 
--- If `application` is remote then it means that another instance of
--- application already exists (the 'primary' instance).  Calls to
--- perform actions on `application` will result in the actions being
--- performed by the primary instance.
--- 
--- The value of this property cannot be accessed before
--- `g_application_register()` has been called.  See
--- `g_application_get_is_registered()`.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@return (boolean|nil) # `true` if `application` is remote
function Gio.Application:get_is_remote() end

--- # method Gio.Application:get_resource_base_path()
---
--- Gets the resource base path of `application`.
--- 
--- See `g_application_set_resource_base_path()` for more information.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@return string # the base resource path, if one is set
function Gio.Application:get_resource_base_path() end

--- # method Gio.Application:hold()
---
--- Increases the use count of `application`.
--- 
--- Use this function to indicate that the application has a reason to
--- continue to run.  For example, `g_application_hold()` is called by GTK+
--- when a toplevel window is on the screen.
--- 
--- To cancel the hold, call `g_application_release()`.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@return nil
function Gio.Application:hold() end

--- # method Gio.Application:mark_busy()
---
--- Increases the busy count of `application`.
--- 
--- Use this function to indicate that the application is busy, for instance
--- while a long running operation is pending.
--- 
--- The busy state will be exposed to other processes, so a session shell will
--- use that information to indicate the state to the user (e.g. with a
--- spinner).
--- 
--- To cancel the busy indication, use `g_application_unmark_busy()`.
--- 
--- The application must be registered before calling this function.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@return nil
function Gio.Application:mark_busy() end

--- # method Gio.Application:open()
---
--- Opens the given files.
--- 
--- In essence, this results in the `GApplication`::open signal being emitted
--- in the primary instance.
--- 
--- `n_files` must be greater than zero.
--- 
--- `hint` is simply passed through to the ::open signal.  It is
--- intended to be used by applications that have multiple modes for
--- opening files (eg: "view" vs "edit", etc).  Unless you have a need
--- for this functionality, you should use "".
--- 
--- The application must be registered before calling this function
--- and it must have the %G_APPLICATION_HANDLES_OPEN flag set.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@param files unknown[] # an array of `GFiles` to open
---@param n_files integer # the length of the `files` array
---@param hint string # a hint (or ""), but never `nil`
---@return nil
function Gio.Application:open(files, n_files, hint) end

--- # method Gio.Application:quit()
---
--- Immediately quits the application.
--- 
--- Upon return to the mainloop, `g_application_run()` will return,
--- calling only the 'shutdown' function before doing so.
--- 
--- The hold count is ignored.
--- Take care if your code has called `g_application_hold()` on the application and
--- is therefore still expecting it to exist.
--- (Note that you may have called `g_application_hold()` indirectly, for example
--- through `gtk_application_add_window()`.)
--- 
--- The result of calling `g_application_run()` again after it returns is
--- unspecified.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@return nil
function Gio.Application:quit() end

--- # method Gio.Application:register()
---
--- Attempts registration of the application.
--- 
--- This is the point at which the application discovers if it is the
--- primary instance or merely acting as a remote for an already-existing
--- primary instance.  This is implemented by attempting to acquire the
--- application identifier as a unique bus name on the session bus using
--- GDBus.
--- 
--- If there is no application ID or if %G_APPLICATION_NON_UNIQUE was
--- given, then this process will always become the primary instance.
--- 
--- Due to the internal architecture of GDBus, method calls can be
--- dispatched at any time (even if a main loop is not running).  For
--- this reason, you must ensure that any object paths that you wish to
--- register are registered before calling this function.
--- 
--- If the application has already been registered then `true` is
--- returned with no work performed.
--- 
--- The `GApplication`::startup signal is emitted if registration succeeds
--- and `application` is the primary instance (including the non-unique
--- case).
--- 
--- In the event of an error (such as `cancellable` being cancelled, or a
--- failure to connect to the session bus), `false` is returned and `error`
--- is set appropriately.
--- 
--- Note: the return value of this function is not an indicator that this
--- instance is or is not the primary instance of the application.  See
--- `g_application_get_is_remote()` for that.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return (boolean|nil) # `true` if registration succeeded
function Gio.Application:register(cancellable) end

--- # method Gio.Application:release()
---
--- Decrease the use count of `application`.
--- 
--- When the use count reaches zero, the application will stop running.
--- 
--- Never call this function except to cancel the effect of a previous
--- call to `g_application_hold()`.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@return nil
function Gio.Application:release() end

--- # method Gio.Application:run()
---
--- Runs the application.
--- 
--- This function is intended to be run from `main()` and its return value
--- is intended to be returned by `main()`. Although you are expected to pass
--- the `argc`, `argv` parameters from `main()` to this function, it is possible
--- to pass `nil` if `argv` is not available or commandline handling is not
--- required.  Note that on Windows, `argc` and `argv` are ignored, and
--- g_win32`_get_command_line()` is called internally (for proper support
--- of Unicode commandline arguments).
--- 
--- `GApplication` will attempt to parse the commandline arguments.  You
--- can add commandline flags to the list of recognised options by way of
--- `g_application_add_main_option_entries()`.  After this, the
--- `GApplication`::handle-local-options signal is emitted, from which the
--- application can inspect the values of its `GOptionEntrys`.
--- 
--- `GApplication`::handle-local-options is a good place to handle options
--- such as `--version`, where an immediate reply from the local process is
--- desired (instead of communicating with an already-running instance).
--- A `GApplication`::handle-local-options handler can stop further processing
--- by returning a non-negative value, which then becomes the exit status of
--- the process.
--- 
--- What happens next depends on the flags: if
--- %G_APPLICATION_HANDLES_COMMAND_LINE was specified then the remaining
--- commandline arguments are sent to the primary instance, where a
--- `GApplication`::command-line signal is emitted.  Otherwise, the
--- remaining commandline arguments are assumed to be a list of files.
--- If there are no files listed, the application is activated via the
--- `GApplication`::activate signal.  If there are one or more files, and
--- %G_APPLICATION_HANDLES_OPEN was specified then the files are opened
--- via the `GApplication`::open signal.
--- 
--- If you are interested in doing more complicated local handling of the
--- commandline then you should implement your own `GApplication` subclass
--- and override `local_command_line()`. In this case, you most likely want
--- to return `true` from your `local_command_line()` implementation to
--- suppress the default handling. See
--- [gapplication-example-cmdline2.c][https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-cmdline2.c]
--- for an example.
--- 
--- If, after the above is done, the use count of the application is zero
--- then the exit status is returned immediately.  If the use count is
--- non-zero then the default main context is iterated until the use count
--- falls to zero, at which point 0 is returned.
--- 
--- If the %G_APPLICATION_IS_SERVICE flag is set, then the service will
--- run for as much as 10 seconds with a use count of zero while waiting
--- for the message that caused the activation to arrive.  After that,
--- if the use count falls to zero the application will exit immediately,
--- except in the case that `g_application_set_inactivity_timeout()` is in
--- use.
--- 
--- This function sets the prgname (`g_set_prgname()`), if not already set,
--- to the basename of argv[0].
--- 
--- Much like `g_main_loop_run()`, this function will acquire the main context
--- for the duration that the application is running.
--- 
--- Since 2.40, applications that are not explicitly flagged as services
--- or launchers (ie: neither %G_APPLICATION_IS_SERVICE or
--- %G_APPLICATION_IS_LAUNCHER are given as flags) will check (from the
--- default handler for local_command_line) if "--gapplication-service"
--- was given in the command line.  If this flag is present then normal
--- commandline processing is interrupted and the
--- %G_APPLICATION_IS_SERVICE flag is set.  This provides a "compromise"
--- solution whereby running an application directly from the commandline
--- will invoke it in the normal way (which can be useful for debugging)
--- while still allowing applications to be D-Bus activated in service
--- mode.  The D-Bus service file should invoke the executable with
--- "--gapplication-service" as the sole commandline argument.  This
--- approach is suitable for use by most graphical applications but
--- should not be used from applications like editors that need precise
--- control over when processes invoked via the commandline will exit and
--- what their exit status will be.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@param argc integer # the argc from `main()` (or 0 if `argv` is `nil`)
---@param argv? unknown[] # the argv from `main()`, or `nil`
---@return integer # the exit status
function Gio.Application:run(argc, argv) end

--- # method Gio.Application:send_notification()
---
--- Sends a notification on behalf of `application` to the desktop shell.
--- There is no guarantee that the notification is displayed immediately,
--- or even at all.
--- 
--- Notifications may persist after the application exits. It will be
--- D-Bus-activated when the notification or one of its actions is
--- activated.
--- 
--- Modifying `notification` after this call has no effect. However, the
--- object can be reused for a later call to this function.
--- 
--- `id` may be any string that uniquely identifies the event for the
--- application. It does not need to be in any special format. For
--- example, "new-message" might be appropriate for a notification about
--- new messages.
--- 
--- If a previous notification was sent with the same `id`, it will be
--- replaced with `notification` and shown again as if it was a new
--- notification. This works even for notifications sent from a previous
--- execution of the application, as long as `id` is the same string.
--- 
--- `id` may be `nil`, but it is impossible to replace or withdraw
--- notifications without an id.
--- 
--- If `notification` is no longer relevant, it can be withdrawn with
--- `g_application_withdraw_notification()`.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@param id? string # id of the notification, or `nil`
---@param notification Gio.Notification # the `GNotification` to send
---@return nil
function Gio.Application:send_notification(id, notification) end

--- # method Gio.Application:set_action_group()
---
--- This used to be how actions were associated with a `GApplication`.
--- Now there is `GActionMap` for that.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@param action_group? Gio.ActionGroup # a `GActionGroup`, or `nil`
---@return nil
function Gio.Application:set_action_group(action_group) end

--- # method Gio.Application:set_application_id()
---
--- Sets the unique identifier for `application`.
--- 
--- The application id can only be modified if `application` has not yet
--- been registered.
--- 
--- If non-`nil`, the application id must be valid.  See
--- `g_application_id_is_valid()`.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@param application_id? string # the identifier for `application`
---@return nil
function Gio.Application:set_application_id(application_id) end

--- # method Gio.Application:set_default()
---
--- Sets or unsets the default application for the process, as returned
--- by `g_application_get_default()`.
--- 
--- This function does not take its own reference on `application`.  If
--- `application` is destroyed then the default application will revert
--- back to `nil`.
---
--- ---
---
---@param self? Gio.Application # the application to set as default, or `nil`
---@return nil
function Gio.Application:set_default() end

--- # method Gio.Application:set_flags()
---
--- Sets the flags for `application`.
--- 
--- The flags can only be modified if `application` has not yet been
--- registered.
--- 
--- See `GApplicationFlags`.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@param flags Gio.ApplicationFlags # the flags for `application`
---@return nil
function Gio.Application:set_flags(flags) end

--- # method Gio.Application:set_inactivity_timeout()
---
--- Sets the current inactivity timeout for the application.
--- 
--- This is the amount of time (in milliseconds) after the last call to
--- `g_application_release()` before the application stops running.
--- 
--- This call has no side effects of its own.  The value set here is only
--- used for next time `g_application_release()` drops the use count to
--- zero.  Any timeouts currently in progress are not impacted.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@param inactivity_timeout integer # the timeout, in milliseconds
---@return nil
function Gio.Application:set_inactivity_timeout(inactivity_timeout) end

--- # method Gio.Application:set_option_context_description()
---
--- Adds a description to the `application` option context.
--- 
--- See `g_option_context_set_description()` for more information.
---
--- ---
---
---@param self Gio.Application # the `GApplication`
---@param description? string # a string to be shown in `--help` output after the list of options, or `nil`
---@return nil
function Gio.Application:set_option_context_description(description) end

--- # method Gio.Application:set_option_context_parameter_string()
---
--- Sets the parameter string to be used by the commandline handling of `application`.
--- 
--- This function registers the argument to be passed to `g_option_context_new()`
--- when the internal `GOptionContext` of `application` is created.
--- 
--- See `g_option_context_new()` for more information about `parameter_string`.
---
--- ---
---
---@param self Gio.Application # the `GApplication`
---@param parameter_string? string # a string which is displayed in the first line of `--help` output, after the usage summary `programname [OPTION...]`.
---@return nil
function Gio.Application:set_option_context_parameter_string(parameter_string) end

--- # method Gio.Application:set_option_context_summary()
---
--- Adds a summary to the `application` option context.
--- 
--- See `g_option_context_set_summary()` for more information.
---
--- ---
---
---@param self Gio.Application # the `GApplication`
---@param summary? string # a string to be shown in `--help` output before the list of options, or `nil`
---@return nil
function Gio.Application:set_option_context_summary(summary) end

--- # method Gio.Application:set_resource_base_path()
---
--- Sets (or unsets) the base resource path of `application`.
--- 
--- The path is used to automatically load various [application
--- resources][gresource] such as menu layouts and action descriptions.
--- The various types of resources will be found at fixed names relative
--- to the given base path.
--- 
--- By default, the resource base path is determined from the application
--- ID by prefixing '/' and replacing each '.' with '/'.  This is done at
--- the time that the `GApplication` object is constructed.  Changes to
--- the application ID after that point will not have an impact on the
--- resource base path.
--- 
--- As an example, if the application has an ID of "org.example.app" then
--- the default resource base path will be "/org/example/app".  If this
--- is a `GtkApplication` (and you have not manually changed the path)
--- then Gtk will then search for the menus of the application at
--- "/org/example/app/gtk/menus.ui".
--- 
--- See `GResource` for more information about adding resources to your
--- application.
--- 
--- You can disable automatic resource loading functionality by setting
--- the path to `nil`.
--- 
--- Changing the resource base path once the application is running is
--- not recommended.  The point at which the resource path is consulted
--- for forming paths for various purposes is unspecified.  When writing
--- a sub-class of `GApplication` you should either set the
--- `GApplication`:resource-base-path property at construction time, or call
--- this function during the instance initialization. Alternatively, you
--- can call this function in the `GApplicationClass`.startup virtual function,
--- before chaining up to the parent implementation.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@param resource_path? string # the resource path to use
---@return nil
function Gio.Application:set_resource_base_path(resource_path) end

--- # method Gio.Application:unbind_busy_property()
---
--- Destroys a binding between `property` and the busy state of
--- `application` that was previously created with
--- `g_application_bind_busy_property()`.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@param object GObject.Object # a `GObject`
---@param property string # the name of a boolean property of `object`
---@return nil
function Gio.Application:unbind_busy_property(object, property) end

--- # method Gio.Application:unmark_busy()
---
--- Decreases the busy count of `application`.
--- 
--- When the busy count reaches zero, the new state will be propagated
--- to other processes.
--- 
--- This function must only be called to cancel the effect of a previous
--- call to `g_application_mark_busy()`.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@return nil
function Gio.Application:unmark_busy() end

--- # method Gio.Application:withdraw_notification()
---
--- Withdraws a notification that was sent with
--- `g_application_send_notification()`.
--- 
--- This call does nothing if a notification with `id` doesn't exist or
--- the notification was never sent.
--- 
--- This function works even for notifications sent in previous
--- executions of this application, as long `id` is the same as it was for
--- the sent notification.
--- 
--- Note that notifications are dismissed when the user clicks on one
--- of the buttons in a notification or triggers its default action, so
--- there is no need to explicitly withdraw the notification in that case.
---
--- ---
---
---@param self Gio.Application # a `GApplication`
---@param id string # id of a previously sent notification
---@return nil
function Gio.Application:withdraw_notification(id) end

--- # function Gio.Application.get_default()
---
--- Returns the default `GApplication` instance for this process.
--- 
--- Normally there is only one `GApplication` per process and it becomes
--- the default when it is created.  You can exercise more control over
--- this by using `g_application_set_default()`.
--- 
--- If there is no default application then `nil` is returned.
---
--- ---
---
---@return Gio.Application # the default application for this process, or `nil`
function Gio.Application.get_default() end

--- # function Gio.Application.id_is_valid()
---
--- Checks if `application_id` is a valid application identifier.
--- 
--- A valid ID is required for calls to `g_application_new()` and
--- `g_application_set_application_id()`.
--- 
--- Application identifiers follow the same format as
--- [D-Bus well-known bus names](https://dbus.freedesktop.org/doc/dbus-specification.html`message`-protocol-names-bus).
--- For convenience, the restrictions on application identifiers are
--- reproduced here:
--- 
--- - Application identifiers are composed of 1 or more elements separated by a
---   period (`.`) character. All elements must contain at least one character.
--- 
--- - Each element must only contain the ASCII characters `[A-Z][a-z][0-9]_-`,
---   with `-` discouraged in new application identifiers. Each element must not
---   begin with a digit.
--- 
--- - Application identifiers must contain at least one `.` (period) character
---   (and thus at least two elements).
--- 
--- - Application identifiers must not begin with a `.` (period) character.
--- 
--- - Application identifiers must not exceed 255 characters.
--- 
--- Note that the hyphen (`-`) character is allowed in application identifiers,
--- but is problematic or not allowed in various specifications and APIs that
--- refer to D-Bus, such as
--- [Flatpak application IDs](http://docs.flatpak.org/en/latest/introduction.html`identifiers`),
--- the
--- [`DBusActivatable` interface in the Desktop Entry Specification](https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html`dbus`),
--- and the convention that an application's "main" interface and object path
--- resemble its application identifier and bus name. To avoid situations that
--- require special-case handling, it is recommended that new application
--- identifiers consistently replace hyphens with underscores.
--- 
--- Like D-Bus interface names, application identifiers should start with the
--- reversed DNS domain name of the author of the interface (in lower-case), and
--- it is conventional for the rest of the application identifier to consist of
--- words run together, with initial capital letters.
--- 
--- As with D-Bus interface names, if the author's DNS domain name contains
--- hyphen/minus characters they should be replaced by underscores, and if it
--- contains leading digits they should be escaped by prepending an underscore.
--- For example, if the owner of 7-zip.org used an application identifier for an
--- archiving application, it might be named `org._7_zip.Archiver`.
---
--- ---
---
---@param application_id string # a potential application identifier
---@return (boolean|nil) # `true` if `application_id` is valid
function Gio.Application.id_is_valid(application_id) end

--- # function Gio.Application.new()
---
--- Creates a new `GApplication` instance.
--- 
--- If non-`nil`, the application id must be valid.  See
--- `g_application_id_is_valid()`.
--- 
--- If no application ID is given then some features of `GApplication`
--- (most notably application uniqueness) will be disabled.
---
--- ---
---
---@param application_id? string # the application id
---@param flags Gio.ApplicationFlags # the application flags
---@return Gio.Application # a new `GApplication` instance
function Gio.Application.new(application_id, flags) end

--- # record Gio.ApplicationClass
---
--- Virtual function table for `GApplication`.
---
--- ---
---
---@class Gio.ApplicationClass
---@field parent_class GObject.ObjectClass
---@field startup fun(application: Gio.Application): nil
---@field activate fun(application: Gio.Application): nil
---@field open fun(application: Gio.Application, files: unknown[], n_files: integer, hint: string): nil
---@field command_line fun(application: Gio.Application, command_line: Gio.ApplicationCommandLine): integer
---@field local_command_line fun(application: Gio.Application, arguments: unknown[], exit_status: integer): (boolean|nil)
---@field before_emit fun(application: Gio.Application, platform_data: GLib.Variant): nil
---@field after_emit fun(application: Gio.Application, platform_data: GLib.Variant): nil
---@field add_platform_data fun(application: Gio.Application, builder: GLib.VariantBuilder): nil
---@field quit_mainloop fun(application: Gio.Application): nil
---@field run_mainloop fun(application: Gio.Application): nil
---@field shutdown fun(application: Gio.Application): nil
---@field dbus_register fun(application: Gio.Application, connection: Gio.DBusConnection, object_path: string): (boolean|nil)
---@field dbus_unregister fun(application: Gio.Application, connection: Gio.DBusConnection, object_path: string): nil
---@field handle_local_options fun(application: Gio.Application, options: GLib.VariantDict): integer
---@field name_lost fun(application: Gio.Application): (boolean|nil)
---@field padding unknown[]
Gio.ApplicationClass = {}

--- # class Gio.ApplicationCommandLine
---
--- `GApplicationCommandLine` represents a command-line invocation of
--- an application.  It is created by `GApplication` and emitted
--- in the `GApplication`::command-line signal and virtual function.
--- 
--- The class contains the list of arguments that the program was invoked
--- with.  It is also possible to query if the commandline invocation was
--- local (ie: the current process is running in direct response to the
--- invocation) or remote (ie: some other process forwarded the
--- commandline to this process).
--- 
--- The GApplicationCommandLine object can provide the `argc` and `argv`
--- parameters for use with the `GOptionContext` command-line parsing API,
--- with the `g_application_command_line_get_arguments()` function. See
--- [gapplication-example-cmdline3.c][gapplication-example-cmdline3]
--- for an example.
--- 
--- The exit status of the originally-invoked process may be set and
--- messages can be printed to stdout or stderr of that process.  The
--- lifecycle of the originally-invoked process is tied to the lifecycle
--- of this object (ie: the process exits when the last reference is
--- dropped).
--- 
--- The main use for `GApplicationCommandLine` (and the
--- `GApplication`::command-line signal) is 'Emacs server' like use cases:
--- You can set the `EDITOR` environment variable to have e.g. git use
--- your favourite editor to edit commit messages, and if you already
--- have an instance of the editor running, the editing will happen
--- in the running instance, instead of opening a new one. An important
--- aspect of this use case is that the process that gets started by git
--- does not return until the editing is done.
--- 
--- Normally, the commandline is completely handled in the
--- `GApplication`::command-line handler. The launching instance exits
--- once the signal handler in the primary instance has returned, and
--- the return value of the signal handler becomes the exit status
--- of the launching instance.
--- ```c
--- static int
--- command_line (GApplication            *application,
---               GApplicationCommandLine *cmdline)
--- {
---   gchar **argv;
---   gint argc;
---   gint i;
--- 
---   argv = g_application_command_line_get_arguments (cmdline, &argc);
--- 
---   g_application_command_line_print (cmdline,
---                                     "This text is written back\n"
---                                     "to stdout of the caller\n");
--- 
---   for (i = 0; i < argc; i++)
---     g_print ("argument %d: %s\n", i, argv[i]);
--- 
---   g_strfreev (argv);
--- 
---   return 0;
--- }
--- ```
--- The complete example can be found here:
--- [gapplication-example-cmdline.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-cmdline.c)
--- 
--- In more complicated cases, the handling of the commandline can be
--- split between the launcher and the primary instance.
--- ```c
--- static gboolean
---  test_local_cmdline (GApplication   *application,
---                      gchar        ***arguments,
---                      gint           *exit_status)
--- {
---   gint i, j;
---   gchar **argv;
--- 
---   argv = *arguments;
--- 
---   if (argv[0] == NULL)
---     {
---       *exit_status = 0;
---       return FALSE;
---     }
--- 
---   i = 1;
---   while (argv[i])
---     {
---       if (g_str_has_prefix (argv[i], "--local-"))
---         {
---           g_print ("handling argument %s locally\n", argv[i]);
---           g_free (argv[i]);
---           for (j = i; argv[j]; j++)
---             argv[j] = argv[j + 1];
---         }
---       else
---         {
---           g_print ("not handling argument %s locally\n", argv[i]);
---           i++;
---         }
---     }
--- 
---   *exit_status = 0;
--- 
---   return FALSE;
--- }
--- 
--- static void
--- test_application_class_init (TestApplicationClass *class)
--- {
---   G_APPLICATION_CLASS (class)->local_command_line = test_local_cmdline;
--- 
---   ...
--- }
--- ```
--- In this example of split commandline handling, options that start
--- with `--local-` are handled locally, all other options are passed
--- to the `GApplication`::command-line handler which runs in the primary
--- instance.
--- 
--- The complete example can be found here:
--- [gapplication-example-cmdline2.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-cmdline2.c)
--- 
--- If handling the commandline requires a lot of work, it may
--- be better to defer it.
--- ```c
--- static gboolean
--- my_cmdline_handler (gpointer data)
--- {
---   GApplicationCommandLine *cmdline = data;
--- 
---   // do the heavy lifting in an idle
--- 
---   g_application_command_line_set_exit_status (cmdline, 0);
---   g_object_unref (cmdline); // this releases the application
--- 
---   return G_SOURCE_REMOVE;
--- }
--- 
--- static int
--- command_line (GApplication            *application,
---               GApplicationCommandLine *cmdline)
--- {
---   // keep the application running until we are done with this commandline
---   g_application_hold (application);
--- 
---   g_object_set_data_full (G_OBJECT (cmdline),
---                           "application", application,
---                           (GDestroyNotify)g_application_release);
--- 
---   g_object_ref (cmdline);
---   g_idle_add (my_cmdline_handler, cmdline);
--- 
---   return 0;
--- }
--- ```
--- In this example the commandline is not completely handled before
--- the `GApplication`::command-line handler returns. Instead, we keep
--- a reference to the `GApplicationCommandLine` object and handle it
--- later (in this example, in an idle). Note that it is necessary to
--- hold the application until you are done with the commandline.
--- 
--- The complete example can be found here:
--- [gapplication-example-cmdline3.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-cmdline3.c)
---
--- ---
---
---@class Gio.ApplicationCommandLine : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.ApplicationCommandLinePrivate
Gio.ApplicationCommandLine = {}

--- # method Gio.ApplicationCommandLine:create_file_for_arg()
---
--- Creates a `GFile` corresponding to a filename that was given as part
--- of the invocation of `cmdline`.
--- 
--- This differs from `g_file_new_for_commandline_arg()` in that it
--- resolves relative pathnames using the current working directory of
--- the invoking process rather than the local process.
---
--- ---
---
---@param self Gio.ApplicationCommandLine # a `GApplicationCommandLine`
---@param arg string # an argument from `cmdline`
---@return Gio.File # a new `GFile`
function Gio.ApplicationCommandLine:create_file_for_arg(arg) end

--- # method Gio.ApplicationCommandLine:get_arguments()
---
--- Gets the list of arguments that was passed on the command line.
--- 
--- The strings in the array may contain non-UTF-8 data on UNIX (such as
--- filenames or arguments given in the system locale) but are always in
--- UTF-8 on Windows.
--- 
--- If you wish to use the return value with `GOptionContext`, you must
--- use `g_option_context_parse_strv()`.
--- 
--- The return value is `nil`-terminated and should be freed using
--- `g_strfreev()`.
---
--- ---
---
---@param self Gio.ApplicationCommandLine # a `GApplicationCommandLine`
---@param argc? integer # the length of the arguments array, or `nil`
---@return unknown[] # the string array containing the arguments (the argv)
function Gio.ApplicationCommandLine:get_arguments(argc) end

--- # method Gio.ApplicationCommandLine:get_cwd()
---
--- Gets the working directory of the command line invocation.
--- The string may contain non-utf8 data.
--- 
--- It is possible that the remote application did not send a working
--- directory, so this may be `nil`.
--- 
--- The return value should not be modified or freed and is valid for as
--- long as `cmdline` exists.
---
--- ---
---
---@param self Gio.ApplicationCommandLine # a `GApplicationCommandLine`
---@return string # the current directory, or `nil`
function Gio.ApplicationCommandLine:get_cwd() end

--- # method Gio.ApplicationCommandLine:get_environ()
---
--- Gets the contents of the 'environ' variable of the command line
--- invocation, as would be returned by `g_get_environ()`, ie as a
--- `nil`-terminated list of strings in the form 'NAME=VALUE'.
--- The strings may contain non-utf8 data.
--- 
--- The remote application usually does not send an environment.  Use
--- %G_APPLICATION_SEND_ENVIRONMENT to affect that.  Even with this flag
--- set it is possible that the environment is still not available (due
--- to invocation messages from other applications).
--- 
--- The return value should not be modified or freed and is valid for as
--- long as `cmdline` exists.
--- 
--- See `g_application_command_line_getenv()` if you are only interested
--- in the value of a single environment variable.
---
--- ---
---
---@param self Gio.ApplicationCommandLine # a `GApplicationCommandLine`
---@return unknown[] # the environment strings, or `nil` if they were not sent
function Gio.ApplicationCommandLine:get_environ() end

--- # method Gio.ApplicationCommandLine:get_exit_status()
---
--- Gets the exit status of `cmdline`.  See
--- `g_application_command_line_set_exit_status()` for more information.
---
--- ---
---
---@param self Gio.ApplicationCommandLine # a `GApplicationCommandLine`
---@return integer # the exit status
function Gio.ApplicationCommandLine:get_exit_status() end

--- # method Gio.ApplicationCommandLine:get_is_remote()
---
--- Determines if `cmdline` represents a remote invocation.
---
--- ---
---
---@param self Gio.ApplicationCommandLine # a `GApplicationCommandLine`
---@return (boolean|nil) # `true` if the invocation was remote
function Gio.ApplicationCommandLine:get_is_remote() end

--- # method Gio.ApplicationCommandLine:get_options_dict()
---
--- Gets the options that were passed to `g_application_command_line()`.
--- 
--- If you did not override `local_command_line()` then these are the same
--- options that were parsed according to the `GOptionEntrys` added to the
--- application with `g_application_add_main_option_entries()` and possibly
--- modified from your GApplication::handle-local-options handler.
--- 
--- If no options were sent then an empty dictionary is returned so that
--- you don't need to check for `nil`.
--- 
--- The data has been passed via an untrusted external process, so the types of
--- all values must be checked before being used.
---
--- ---
---
---@param self Gio.ApplicationCommandLine # a `GApplicationCommandLine`
---@return GLib.VariantDict # a `GVariantDict` with the options
function Gio.ApplicationCommandLine:get_options_dict() end

--- # method Gio.ApplicationCommandLine:get_platform_data()
---
--- Gets the platform data associated with the invocation of `cmdline`.
--- 
--- This is a `GVariant` dictionary containing information about the
--- context in which the invocation occurred.  It typically contains
--- information like the current working directory and the startup
--- notification ID.
--- 
--- It comes from an untrusted external process and hence the types of all
--- values must be validated before being used.
--- 
--- For local invocation, it will be `nil`.
---
--- ---
---
---@param self Gio.ApplicationCommandLine # `GApplicationCommandLine`
---@return GLib.Variant # the platform data, or `nil`
function Gio.ApplicationCommandLine:get_platform_data() end

--- # method Gio.ApplicationCommandLine:get_stdin()
---
--- Gets the stdin of the invoking process.
--- 
--- The `GInputStream` can be used to read data passed to the standard
--- input of the invoking process.
--- This doesn't work on all platforms.  Presently, it is only available
--- on UNIX when using a D-Bus daemon capable of passing file descriptors.
--- If stdin is not available then `nil` will be returned.  In the
--- future, support may be expanded to other platforms.
--- 
--- You must only call this function once per commandline invocation.
---
--- ---
---
---@param self Gio.ApplicationCommandLine # a `GApplicationCommandLine`
---@return Gio.InputStream # a `GInputStream` for stdin
function Gio.ApplicationCommandLine:get_stdin() end

--- # method Gio.ApplicationCommandLine:getenv()
---
--- Gets the value of a particular environment variable of the command
--- line invocation, as would be returned by `g_getenv()`.  The strings may
--- contain non-utf8 data.
--- 
--- The remote application usually does not send an environment.  Use
--- %G_APPLICATION_SEND_ENVIRONMENT to affect that.  Even with this flag
--- set it is possible that the environment is still not available (due
--- to invocation messages from other applications).
--- 
--- The return value should not be modified or freed and is valid for as
--- long as `cmdline` exists.
---
--- ---
---
---@param self Gio.ApplicationCommandLine # a `GApplicationCommandLine`
---@param name string # the environment variable to get
---@return string # the value of the variable, or `nil` if unset or unsent
function Gio.ApplicationCommandLine:getenv(name) end

--- # method Gio.ApplicationCommandLine:set_exit_status()
---
--- Sets the exit status that will be used when the invoking process
--- exits.
--- 
--- The return value of the `GApplication`::command-line signal is
--- passed to this function when the handler returns.  This is the usual
--- way of setting the exit status.
--- 
--- In the event that you want the remote invocation to continue running
--- and want to decide on the exit status in the future, you can use this
--- call.  For the case of a remote invocation, the remote process will
--- typically exit when the last reference is dropped on `cmdline`.  The
--- exit status of the remote process will be equal to the last value
--- that was set with this function.
--- 
--- In the case that the commandline invocation is local, the situation
--- is slightly more complicated.  If the commandline invocation results
--- in the mainloop running (ie: because the use-count of the application
--- increased to a non-zero value) then the application is considered to
--- have been 'successful' in a certain sense, and the exit status is
--- always zero.  If the application use count is zero, though, the exit
--- status of the local `GApplicationCommandLine` is used.
---
--- ---
---
---@param self Gio.ApplicationCommandLine # a `GApplicationCommandLine`
---@param exit_status integer # the exit status
---@return nil
function Gio.ApplicationCommandLine:set_exit_status(exit_status) end

--- # record Gio.ApplicationCommandLineClass
---
--- The `GApplicationCommandLineClass`-struct
--- contains private data only.
---
--- ---
---
---@class Gio.ApplicationCommandLineClass
---@field parent_class GObject.ObjectClass
---@field print_literal fun(cmdline: Gio.ApplicationCommandLine, message: string): nil
---@field printerr_literal fun(cmdline: Gio.ApplicationCommandLine, message: string): nil
---@field get_stdin fun(cmdline: Gio.ApplicationCommandLine): Gio.InputStream
---@field padding unknown[]
Gio.ApplicationCommandLineClass = {}

--- # record Gio.ApplicationCommandLinePrivate
---
---@class Gio.ApplicationCommandLinePrivate
Gio.ApplicationCommandLinePrivate = {}

---@enum Gio.ApplicationFlags
Gio.ApplicationFlags = {}

--- # record Gio.ApplicationPrivate
---
---@class Gio.ApplicationPrivate
Gio.ApplicationPrivate = {}

---@enum Gio.AskPasswordFlags
Gio.AskPasswordFlags = {}

--- # interface Gio.AsyncInitable
---
--- This is the asynchronous version of `GInitable`; it behaves the same
--- in all ways except that initialization is asynchronous. For more details
--- see the descriptions on `GInitable`.
--- 
--- A class may implement both the `GInitable` and `GAsyncInitable` interfaces.
--- 
--- Users of objects implementing this are not intended to use the interface
--- method directly; instead it will be used automatically in various ways.
--- For C applications you generally just call `g_async_initable_new_async()`
--- directly, or indirectly via a `foo_thing_new_async()` wrapper. This will call
--- `g_async_initable_init_async()` under the cover, calling back with `nil` and
--- a set %GError on failure.
--- 
--- A typical implementation might look something like this:
--- 
--- ```c
--- enum {
---    NOT_INITIALIZED,
---    INITIALIZING,
---    INITIALIZED
--- };
--- 
--- static void
--- _foo_ready_cb (Foo *self)
--- {
---   GList *l;
--- 
---   self->priv->state = INITIALIZED;
--- 
---   for (l = self->priv->init_results; l != NULL; l = l->next)
---     {
---       GTask *task = l->data;
--- 
---       if (self->priv->success)
---         g_task_return_boolean (task, TRUE);
---       else
---         g_task_return_new_error (task, ...);
---       g_object_unref (task);
---     }
--- 
---   g_list_free (self->priv->init_results);
---   self->priv->init_results = NULL;
--- }
--- 
--- static void
--- foo_init_async (GAsyncInitable       *initable,
---                 int                   io_priority,
---                 GCancellable         *cancellable,
---                 GAsyncReadyCallback   callback,
---                 gpointer              user_data)
--- {
---   Foo *self = FOO (initable);
---   GTask *task;
--- 
---   task = g_task_new (initable, cancellable, callback, user_data);
---   g_task_set_name (task, G_STRFUNC);
--- 
---   switch (self->priv->state)
---     {
---       case NOT_INITIALIZED:
---         _foo_get_ready (self);
---         self->priv->init_results = g_list_append (self->priv->init_results,
---                                                   task);
---         self->priv->state = INITIALIZING;
---         break;
---       case INITIALIZING:
---         self->priv->init_results = g_list_append (self->priv->init_results,
---                                                   task);
---         break;
---       case INITIALIZED:
---         if (!self->priv->success)
---           g_task_return_new_error (task, ...);
---         else
---           g_task_return_boolean (task, TRUE);
---         g_object_unref (task);
---         break;
---     }
--- }
--- 
--- static gboolean
--- foo_init_finish (GAsyncInitable       *initable,
---                  GAsyncResult         *result,
---                  GError              **error)
--- {
---   g_return_val_if_fail (g_task_is_valid (result, initable), FALSE);
--- 
---   return g_task_propagate_boolean (G_TASK (result), error);
--- }
--- 
--- static void
--- foo_async_initable_iface_init (gpointer g_iface,
---                                gpointer data)
--- {
---   GAsyncInitableIface *iface = g_iface;
--- 
---   iface->init_async = foo_init_async;
---   iface->init_finish = foo_init_finish;
--- }
--- ```
---
--- ---
---
---@class Gio.AsyncInitable
Gio.AsyncInitable = {}

--- # method Gio.AsyncInitable:init_async()
---
--- Starts asynchronous initialization of the object implementing the
--- interface. This must be done before any real use of the object after
--- initial construction. If the object also implements `GInitable` you can
--- optionally call `g_initable_init()` instead.
--- 
--- This method is intended for language bindings. If writing in C,
--- `g_async_initable_new_async()` should typically be used instead.
--- 
--- When the initialization is finished, `callback` will be called. You can
--- then call `g_async_initable_init_finish()` to get the result of the
--- initialization.
--- 
--- Implementations may also support cancellation. If `cancellable` is not
--- `nil`, then initialization can be cancelled by triggering the cancellable
--- object from another thread. If the operation was cancelled, the error
--- %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not `nil`, and
--- the object doesn't support cancellable initialization, the error
--- %G_IO_ERROR_NOT_SUPPORTED will be returned.
--- 
--- As with `GInitable`, if the object is not initialized, or initialization
--- returns with an error, then all operations on the object except
--- `g_object_ref()` and `g_object_unref()` are considered to be invalid, and
--- have undefined behaviour. They will often fail with `g_critical()` or
--- `g_warning()`, but this must not be relied on.
--- 
--- Callers should not assume that a class which implements `GAsyncInitable` can
--- be initialized multiple times; for more information, see `g_initable_init()`.
--- If a class explicitly supports being initialized multiple times,
--- implementation requires yielding all subsequent calls to `init_async()` on the
--- results of the first call.
--- 
--- For classes that also support the `GInitable` interface, the default
--- implementation of this method will run the `g_initable_init()` function
--- in a thread, so if you want to support asynchronous initialization via
--- threads, just implement the `GAsyncInitable` interface without overriding
--- any interface methods.
---
--- ---
---
---@param self Gio.AsyncInitable # a `GAsyncInitable`.
---@param io_priority integer # the [I/O priority][io-priority] of the operation
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.AsyncInitable:init_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.AsyncInitable:init_finish()
---
--- Finishes asynchronous initialization and returns the result.
--- See `g_async_initable_init_async()`.
---
--- ---
---
---@param self Gio.AsyncInitable # a `GAsyncInitable`.
---@param res Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` if successful. If an error has occurred, this function will return `false` and set `error` appropriately if present.
function Gio.AsyncInitable:init_finish(res) end

--- # method Gio.AsyncInitable:new_finish()
---
--- Finishes the async construction for the various g_async_initable_new
--- calls, returning the created object or `nil` on error.
---
--- ---
---
---@param self Gio.AsyncInitable # the `GAsyncInitable` from the callback
---@param res Gio.AsyncResult # the `GAsyncResult` from the callback
---@return GObject.Object # a newly created `GObject`, or `nil` on error. Free with `g_object_unref()`.
function Gio.AsyncInitable:new_finish(res) end

--- # function Gio.AsyncInitable.newv_async()
---
--- Helper function for constructing `GAsyncInitable` object. This is
--- similar to `g_object_newv()` but also initializes the object asynchronously.
--- 
--- When the initialization is finished, `callback` will be called. You can
--- then call `g_async_initable_new_finish()` to get the new object and check
--- for any errors.
---
--- ---
---
---@param object_type Gio.GType # a `GType` supporting `GAsyncInitable`.
---@param n_parameters integer # the number of parameters in `parameters`
---@param parameters GObject.Parameter # the parameters to use to construct the object
---@param io_priority integer # the [I/O priority][io-priority] of the operation
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the initialization is finished
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.AsyncInitable.newv_async(object_type, n_parameters, parameters, io_priority, cancellable, callback, user_data) end

--- # record Gio.AsyncInitableIface
---
--- Provides an interface for asynchronous initializing object such that
--- initialization may fail.
---
--- ---
---
---@class Gio.AsyncInitableIface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field init_async fun(initable: Gio.AsyncInitable, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field init_finish fun(initable: Gio.AsyncInitable, res: Gio.AsyncResult): (boolean|nil)
Gio.AsyncInitableIface = {}

---@alias Gio.AsyncReadyCallback fun(source_object: GObject.Object, res: Gio.AsyncResult, data: userdata): nil

--- # interface Gio.AsyncResult
---
--- Provides a base class for implementing asynchronous function results.
--- 
--- Asynchronous operations are broken up into two separate operations
--- which are chained together by a `GAsyncReadyCallback`. To begin
--- an asynchronous operation, provide a `GAsyncReadyCallback` to the
--- asynchronous function. This callback will be triggered when the
--- operation has completed, and must be run in a later iteration of
--- the [thread-default main context][g-main-context-push-thread-default]
--- from where the operation was initiated. It will be passed a
--- `GAsyncResult` instance filled with the details of the operation's
--- success or failure, the object the asynchronous function was
--- started for and any error codes returned. The asynchronous callback
--- function is then expected to call the corresponding "`_finish()`"
--- function, passing the object the function was called for, the
--- `GAsyncResult` instance, and (optionally) an `error` to grab any
--- error conditions that may have occurred.
--- 
--- The "`_finish()`" function for an operation takes the generic result
--- (of type `GAsyncResult`) and returns the specific result that the
--- operation in question yields (e.g. a `GFileEnumerator` for a
--- "enumerate children" operation). If the result or error status of the
--- operation is not needed, there is no need to call the "`_finish()`"
--- function; GIO will take care of cleaning up the result and error
--- information after the `GAsyncReadyCallback` returns. You can pass
--- `nil` for the `GAsyncReadyCallback` if you don't need to take any
--- action at all after the operation completes. Applications may also
--- take a reference to the `GAsyncResult` and call "`_finish()`" later;
--- however, the "`_finish()`" function may be called at most once.
--- 
--- Example of a typical asynchronous operation flow:
--- ```c
--- void _theoretical_frobnitz_async (Theoretical         *t,
---                                   GCancellable        *c,
---                                   GAsyncReadyCallback  cb,
---                                   gpointer             u);
--- 
--- gboolean _theoretical_frobnitz_finish (Theoretical   *t,
---                                        GAsyncResult  *res,
---                                        GError       **e);
--- 
--- static void
--- frobnitz_result_func (GObject      *source_object,
--- 		 GAsyncResult *res,
--- 		 gpointer      user_data)
--- {
---   gboolean success = FALSE;
--- 
---   success = _theoretical_frobnitz_finish (source_object, res, NULL);
--- 
---   if (success)
---     g_printf ("Hurray!\n");
---   else
---     g_printf ("Uh oh!\n");
--- 
---   ...
--- 
--- }
--- 
--- int main (int argc, void *argv[])
--- {
---    ...
--- 
---    _theoretical_frobnitz_async (theoretical_data,
---                                 NULL,
---                                 frobnitz_result_func,
---                                 NULL);
--- 
---    ...
--- }
--- ```
--- 
--- The callback for an asynchronous operation is called only once, and is
--- always called, even in the case of a cancelled operation. On cancellation
--- the result is a %G_IO_ERROR_CANCELLED error.
--- 
--- ## I/O Priority # {`io`-priority}
--- 
--- Many I/O-related asynchronous operations have a priority parameter,
--- which is used in certain cases to determine the order in which
--- operations are executed. They are not used to determine system-wide
--- I/O scheduling. Priorities are integers, with lower numbers indicating
--- higher priority. It is recommended to choose priorities between
--- %G_PRIORITY_LOW and %G_PRIORITY_HIGH, with %G_PRIORITY_DEFAULT
--- as a default.
---
--- ---
---
---@class Gio.AsyncResult
Gio.AsyncResult = {}

--- # method Gio.AsyncResult:get_source_object()
---
--- Gets the source object from a `GAsyncResult`.
---
--- ---
---
---@param self Gio.AsyncResult # a `GAsyncResult`
---@return GObject.Object # a new reference to the source object for the `res`, or `nil` if there is none.
function Gio.AsyncResult:get_source_object() end

--- # method Gio.AsyncResult:get_user_data()
---
--- Gets the user data from a `GAsyncResult`.
---
--- ---
---
---@param self Gio.AsyncResult # a `GAsyncResult`.
---@return userdata # the user data for `res`.
function Gio.AsyncResult:get_user_data() end

--- # method Gio.AsyncResult:is_tagged()
---
--- Checks if `res` has the given `source_tag` (generally a function
--- pointer indicating the function `res` was created by).
---
--- ---
---
---@param self Gio.AsyncResult # a `GAsyncResult`
---@param source_tag? userdata # an application-defined tag
---@return (boolean|nil) # `true` if `res` has the indicated `source_tag`, `false` if not.
function Gio.AsyncResult:is_tagged(source_tag) end

--- # method Gio.AsyncResult:legacy_propagate_error()
---
--- If `res` is a `GSimpleAsyncResult`, this is equivalent to
--- `g_simple_async_result_propagate_error()`. Otherwise it returns
--- `false`.
--- 
--- This can be used for legacy error handling in async *`_finish()`
--- wrapper functions that traditionally handled `GSimpleAsyncResult`
--- error returns themselves rather than calling into the virtual method.
--- This should not be used in new code; `GAsyncResult` errors that are
--- set by virtual methods should also be extracted by virtual methods,
--- to enable subclasses to chain up correctly.
---
--- ---
---
---@param self Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` if `error` is has been filled in with an error from `res`, `false` if not.
function Gio.AsyncResult:legacy_propagate_error() end

--- # record Gio.AsyncResultIface
---
--- Interface definition for `GAsyncResult`.
---
--- ---
---
---@class Gio.AsyncResultIface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field get_user_data fun(res: Gio.AsyncResult): userdata
---@field get_source_object fun(res: Gio.AsyncResult): GObject.Object
---@field is_tagged fun(res: Gio.AsyncResult, source_tag: userdata): (boolean|nil)
Gio.AsyncResultIface = {}

--- # class Gio.BufferedInputStream
---
--- Buffered input stream implements `GFilterInputStream` and provides
--- for buffered reads.
--- 
--- By default, `GBufferedInputStream`'s buffer size is set at 4 kilobytes.
--- 
--- To create a buffered input stream, use `g_buffered_input_stream_new()`,
--- or `g_buffered_input_stream_new_sized()` to specify the buffer's size at
--- construction.
--- 
--- To get the size of a buffer within a buffered input stream, use
--- `g_buffered_input_stream_get_buffer_size()`. To change the size of a
--- buffered input stream's buffer, use
--- `g_buffered_input_stream_set_buffer_size()`. Note that the buffer's size
--- cannot be reduced below the size of the data within the buffer.
---
--- ---
---
---@class Gio.BufferedInputStream : Gio.FilterInputStream, Gio.Seekable
---@field parent_instance Gio.FilterInputStream
---@field priv Gio.BufferedInputStreamPrivate
---@operator call: Gio.BufferedInputStream
Gio.BufferedInputStream = {}

--- # method Gio.BufferedInputStream:fill()
---
--- Tries to read `count` bytes from the stream into the buffer.
--- Will block during this read.
--- 
--- If `count` is zero, returns zero and does nothing. A value of `count`
--- larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.
--- 
--- On success, the number of bytes read into the buffer is returned.
--- It is not an error if this is not the same as the requested size, as it
--- can happen e.g. near the end of a file. Zero is returned on end of file
--- (or if `count` is zero),  but never otherwise.
--- 
--- If `count` is -1 then the attempted read size is equal to the number of
--- bytes that are required to fill the buffer.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
--- operation was partially finished when the operation was cancelled the
--- partial result will be returned, without an error.
--- 
--- On error -1 is returned and `error` is set accordingly.
--- 
--- For the asynchronous, non-blocking, version of this function, see
--- `g_buffered_input_stream_fill_async()`.
---
--- ---
---
---@param self Gio.BufferedInputStream # a `GBufferedInputStream`
---@param count integer # the number of bytes that will be read from the stream
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return integer # the number of bytes read into `stream`'s buffer, up to `count`, or -1 on error.
function Gio.BufferedInputStream:fill(count, cancellable) end

--- # method Gio.BufferedInputStream:fill_async()
---
--- Reads data into `stream`'s buffer asynchronously, up to `count` size.
--- `io_priority` can be used to prioritize reads. For the synchronous
--- version of this function, see `g_buffered_input_stream_fill()`.
--- 
--- If `count` is -1 then the attempted read size is equal to the number
--- of bytes that are required to fill the buffer.
---
--- ---
---
---@param self Gio.BufferedInputStream # a `GBufferedInputStream`
---@param count integer # the number of bytes that will be read from the stream
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`
---@param user_data? userdata # a `gpointer`
---@return nil
function Gio.BufferedInputStream:fill_async(count, io_priority, cancellable, callback, user_data) end

--- # method Gio.BufferedInputStream:fill_finish()
---
--- Finishes an asynchronous read.
---
--- ---
---
---@param self Gio.BufferedInputStream # a `GBufferedInputStream`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return integer # a `gssize` of the read stream, or `-1` on an error.
function Gio.BufferedInputStream:fill_finish(result) end

--- # method Gio.BufferedInputStream:get_available()
---
--- Gets the size of the available data within the stream.
---
--- ---
---
---@param self Gio.BufferedInputStream # `GBufferedInputStream`
---@return integer # size of the available stream.
function Gio.BufferedInputStream:get_available() end

--- # method Gio.BufferedInputStream:get_buffer_size()
---
--- Gets the size of the input buffer.
---
--- ---
---
---@param self Gio.BufferedInputStream # a `GBufferedInputStream`
---@return integer # the current buffer size.
function Gio.BufferedInputStream:get_buffer_size() end

--- # method Gio.BufferedInputStream:peek()
---
--- Peeks in the buffer, copying data of size `count` into `buffer`,
--- offset `offset` bytes.
---
--- ---
---
---@param self Gio.BufferedInputStream # a `GBufferedInputStream`
---@param buffer unknown[] # a pointer to an allocated chunk of memory
---@param offset integer # a `gsize`
---@param count integer # a `gsize`
---@return integer # a `gsize` of the number of bytes peeked, or -1 on error.
function Gio.BufferedInputStream:peek(buffer, offset, count) end

--- # method Gio.BufferedInputStream:peek_buffer()
---
--- Returns the buffer with the currently available bytes. The returned
--- buffer must not be modified and will become invalid when reading from
--- the stream or filling the buffer.
---
--- ---
---
---@param self Gio.BufferedInputStream # a `GBufferedInputStream`
---@param count integer # a `gsize` to get the number of bytes available in the buffer
---@return unknown[] # read-only buffer
function Gio.BufferedInputStream:peek_buffer(count) end

--- # method Gio.BufferedInputStream:read_byte()
---
--- Tries to read a single byte from the stream or the buffer. Will block
--- during this read.
--- 
--- On success, the byte read from the stream is returned. On end of stream
--- -1 is returned but it's not an exceptional error and `error` is not set.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
--- operation was partially finished when the operation was cancelled the
--- partial result will be returned, without an error.
--- 
--- On error -1 is returned and `error` is set accordingly.
---
--- ---
---
---@param self Gio.BufferedInputStream # a `GBufferedInputStream`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return integer # the byte read from the `stream`, or -1 on end of stream or error.
function Gio.BufferedInputStream:read_byte(cancellable) end

--- # method Gio.BufferedInputStream:set_buffer_size()
---
--- Sets the size of the internal buffer of `stream` to `size`, or to the
--- size of the contents of the buffer. The buffer can never be resized
--- smaller than its current contents.
---
--- ---
---
---@param self Gio.BufferedInputStream # a `GBufferedInputStream`
---@param size integer # a `gsize`
---@return nil
function Gio.BufferedInputStream:set_buffer_size(size) end

--- # function Gio.BufferedInputStream.new()
---
--- Creates a new `GInputStream` from the given `base_stream`, with
--- a buffer set to the default size (4 kilobytes).
---
--- ---
---
---@param base_stream Gio.InputStream # a `GInputStream`
---@return Gio.InputStream # a `GInputStream` for the given `base_stream`.
function Gio.BufferedInputStream.new(base_stream) end

--- # function Gio.BufferedInputStream.new_sized()
---
--- Creates a new `GBufferedInputStream` from the given `base_stream`,
--- with a buffer set to `size`.
---
--- ---
---
---@param base_stream Gio.InputStream # a `GInputStream`
---@param size integer # a `gsize`
---@return Gio.InputStream # a `GInputStream`.
function Gio.BufferedInputStream.new_sized(base_stream, size) end

--- # record Gio.BufferedInputStreamClass
---
---@class Gio.BufferedInputStreamClass
---@field parent_class Gio.FilterInputStreamClass
---@field fill fun(stream: Gio.BufferedInputStream, count: integer, cancellable: Gio.Cancellable): integer
---@field fill_async fun(stream: Gio.BufferedInputStream, count: integer, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field fill_finish fun(stream: Gio.BufferedInputStream, result: Gio.AsyncResult): integer
Gio.BufferedInputStreamClass = {}

--- # record Gio.BufferedInputStreamPrivate
---
---@class Gio.BufferedInputStreamPrivate
Gio.BufferedInputStreamPrivate = {}

--- # class Gio.BufferedOutputStream
---
--- Buffered output stream implements `GFilterOutputStream` and provides
--- for buffered writes.
--- 
--- By default, `GBufferedOutputStream`'s buffer size is set at 4 kilobytes.
--- 
--- To create a buffered output stream, use `g_buffered_output_stream_new()`,
--- or `g_buffered_output_stream_new_sized()` to specify the buffer's size
--- at construction.
--- 
--- To get the size of a buffer within a buffered input stream, use
--- `g_buffered_output_stream_get_buffer_size()`. To change the size of a
--- buffered output stream's buffer, use
--- `g_buffered_output_stream_set_buffer_size()`. Note that the buffer's
--- size cannot be reduced below the size of the data within the buffer.
---
--- ---
---
---@class Gio.BufferedOutputStream : Gio.FilterOutputStream, Gio.Seekable
---@field parent_instance Gio.FilterOutputStream
---@field priv Gio.BufferedOutputStreamPrivate
---@operator call: Gio.BufferedOutputStream
Gio.BufferedOutputStream = {}

--- # method Gio.BufferedOutputStream:get_auto_grow()
---
--- Checks if the buffer automatically grows as data is added.
---
--- ---
---
---@param self Gio.BufferedOutputStream # a `GBufferedOutputStream`.
---@return (boolean|nil) # `true` if the `stream`'s buffer automatically grows, `false` otherwise.
function Gio.BufferedOutputStream:get_auto_grow() end

--- # method Gio.BufferedOutputStream:get_buffer_size()
---
--- Gets the size of the buffer in the `stream`.
---
--- ---
---
---@param self Gio.BufferedOutputStream # a `GBufferedOutputStream`.
---@return integer # the current size of the buffer.
function Gio.BufferedOutputStream:get_buffer_size() end

--- # method Gio.BufferedOutputStream:set_auto_grow()
---
--- Sets whether or not the `stream`'s buffer should automatically grow.
--- If `auto_grow` is true, then each write will just make the buffer
--- larger, and you must manually flush the buffer to actually write out
--- the data to the underlying stream.
---
--- ---
---
---@param self Gio.BufferedOutputStream # a `GBufferedOutputStream`.
---@param auto_grow (boolean|nil) # a `gboolean`.
---@return nil
function Gio.BufferedOutputStream:set_auto_grow(auto_grow) end

--- # method Gio.BufferedOutputStream:set_buffer_size()
---
--- Sets the size of the internal buffer to `size`.
---
--- ---
---
---@param self Gio.BufferedOutputStream # a `GBufferedOutputStream`.
---@param size integer # a `gsize`.
---@return nil
function Gio.BufferedOutputStream:set_buffer_size(size) end

--- # function Gio.BufferedOutputStream.new()
---
--- Creates a new buffered output stream for a base stream.
---
--- ---
---
---@param base_stream Gio.OutputStream # a `GOutputStream`.
---@return Gio.OutputStream # a `GOutputStream` for the given `base_stream`.
function Gio.BufferedOutputStream.new(base_stream) end

--- # function Gio.BufferedOutputStream.new_sized()
---
--- Creates a new buffered output stream with a given buffer size.
---
--- ---
---
---@param base_stream Gio.OutputStream # a `GOutputStream`.
---@param size integer # a `gsize`.
---@return Gio.OutputStream # a `GOutputStream` with an internal buffer set to `size`.
function Gio.BufferedOutputStream.new_sized(base_stream, size) end

--- # record Gio.BufferedOutputStreamClass
---
---@class Gio.BufferedOutputStreamClass
---@field parent_class Gio.FilterOutputStreamClass
Gio.BufferedOutputStreamClass = {}

--- # record Gio.BufferedOutputStreamPrivate
---
---@class Gio.BufferedOutputStreamPrivate
Gio.BufferedOutputStreamPrivate = {}

---@alias Gio.BusAcquiredCallback fun(connection: Gio.DBusConnection, name: string, user_data: userdata): nil

---@alias Gio.BusNameAcquiredCallback fun(connection: Gio.DBusConnection, name: string, user_data: userdata): nil

---@alias Gio.BusNameAppearedCallback fun(connection: Gio.DBusConnection, name: string, name_owner: string, user_data: userdata): nil

---@alias Gio.BusNameLostCallback fun(connection: Gio.DBusConnection, name: string, user_data: userdata): nil

---@enum Gio.BusNameOwnerFlags
Gio.BusNameOwnerFlags = {}

---@alias Gio.BusNameVanishedCallback fun(connection: Gio.DBusConnection, name: string, user_data: userdata): nil

---@enum Gio.BusNameWatcherFlags
Gio.BusNameWatcherFlags = {}

---@enum Gio.BusType
Gio.BusType = {}

--- # class Gio.BytesIcon
---
--- `GBytesIcon` specifies an image held in memory in a common format (usually
--- png) to be used as icon.
---
--- ---
---
---@class Gio.BytesIcon : GObject.Object, Gio.Icon, Gio.LoadableIcon
---@operator call: Gio.BytesIcon
Gio.BytesIcon = {}

--- # method Gio.BytesIcon:get_bytes()
---
--- Gets the `GBytes` associated with the given `icon`.
---
--- ---
---
---@param self Gio.BytesIcon # a `GIcon`.
---@return GLib.Bytes # a `GBytes`.
function Gio.BytesIcon:get_bytes() end

--- # function Gio.BytesIcon.new()
---
--- Creates a new icon for a bytes.
--- 
--- This cannot fail, but loading and interpreting the bytes may fail later on
--- (for example, if `g_loadable_icon_load()` is called) if the image is invalid.
---
--- ---
---
---@param bytes GLib.Bytes # a `GBytes`.
---@return Gio.BytesIcon # a `GIcon` for the given `bytes`.
function Gio.BytesIcon.new(bytes) end

--- # class Gio.Cancellable
---
--- GCancellable is a thread-safe operation cancellation stack used
--- throughout GIO to allow for cancellation of synchronous and
--- asynchronous operations.
---
--- ---
---
---@class Gio.Cancellable : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.CancellablePrivate
---@operator call: Gio.Cancellable
Gio.Cancellable = {}

--- # method Gio.Cancellable:cancel()
---
--- Will set `cancellable` to cancelled, and will emit the
--- `GCancellable`::cancelled signal. (However, see the warning about
--- race conditions in the documentation for that signal if you are
--- planning to connect to it.)
--- 
--- This function is thread-safe. In other words, you can safely call
--- it from a thread other than the one running the operation that was
--- passed the `cancellable`.
--- 
--- If `cancellable` is `nil`, this function returns immediately for convenience.
--- 
--- The convention within GIO is that cancelling an asynchronous
--- operation causes it to complete asynchronously. That is, if you
--- cancel the operation from the same thread in which it is running,
--- then the operation's `GAsyncReadyCallback` will not be invoked until
--- the application returns to the main loop.
---
--- ---
---
---@param self? Gio.Cancellable # a `GCancellable` object.
---@return nil
function Gio.Cancellable:cancel() end

--- # method Gio.Cancellable:connect()
---
--- Convenience function to connect to the `GCancellable`::cancelled
--- signal. Also handles the race condition that may happen
--- if the cancellable is cancelled right before connecting.
--- 
--- `callback` is called at most once, either directly at the
--- time of the connect if `cancellable` is already cancelled,
--- or when `cancellable` is cancelled in some thread.
--- 
--- `data_destroy_func` will be called when the handler is
--- disconnected, or immediately if the cancellable is already
--- cancelled.
--- 
--- See `GCancellable`::cancelled for details on how to use this.
--- 
--- Since GLib 2.40, the lock protecting `cancellable` is not held when
--- `callback` is invoked.  This lifts a restriction in place for
--- earlier GLib versions which now makes it easier to write cleanup
--- code that unconditionally invokes e.g. `g_cancellable_cancel()`.
---
--- ---
---
---@param self? Gio.Cancellable # A `GCancellable`.
---@param callback GObject.Callback # The `GCallback` to connect.
---@param data? userdata # Data to pass to `callback`.
---@param data_destroy_func? GLib.DestroyNotify # Free function for `data` or `nil`.
---@return integer # The id of the signal handler or 0 if `cancellable` has already been cancelled.
function Gio.Cancellable:connect(callback, data, data_destroy_func) end

--- # method Gio.Cancellable:disconnect()
---
--- Disconnects a handler from a cancellable instance similar to
--- `g_signal_handler_disconnect()`.  Additionally, in the event that a
--- signal handler is currently running, this call will block until the
--- handler has finished.  Calling this function from a
--- `GCancellable`::cancelled signal handler will therefore result in a
--- deadlock.
--- 
--- This avoids a race condition where a thread cancels at the
--- same time as the cancellable operation is finished and the
--- signal handler is removed. See `GCancellable`::cancelled for
--- details on how to use this.
--- 
--- If `cancellable` is `nil` or `handler_id` is `0` this function does
--- nothing.
---
--- ---
---
---@param self? Gio.Cancellable # A `GCancellable` or `nil`.
---@param handler_id integer # Handler id of the handler to be disconnected, or `0`.
---@return nil
function Gio.Cancellable:disconnect(handler_id) end

--- # method Gio.Cancellable:get_fd()
---
--- Gets the file descriptor for a cancellable job. This can be used to
--- implement cancellable operations on Unix systems. The returned fd will
--- turn readable when `cancellable` is cancelled.
--- 
--- You are not supposed to read from the fd yourself, just check for
--- readable status. Reading to unset the readable status is done
--- with `g_cancellable_reset()`.
--- 
--- After a successful return from this function, you should use
--- `g_cancellable_release_fd()` to free up resources allocated for
--- the returned file descriptor.
--- 
--- See also `g_cancellable_make_pollfd()`.
---
--- ---
---
---@param self? Gio.Cancellable # a `GCancellable`.
---@return integer # A valid file descriptor. `-1` if the file descriptor is not supported, or on errors.
function Gio.Cancellable:get_fd() end

--- # method Gio.Cancellable:is_cancelled()
---
--- Checks if a cancellable job has been cancelled.
---
--- ---
---
---@param self? Gio.Cancellable # a `GCancellable` or `nil`
---@return (boolean|nil) # `true` if `cancellable` is cancelled, FALSE if called with `nil` or if item is not cancelled.
function Gio.Cancellable:is_cancelled() end

--- # method Gio.Cancellable:make_pollfd()
---
--- Creates a `GPollFD` corresponding to `cancellable`; this can be passed
--- to `g_poll()` and used to poll for cancellation. This is useful both
--- for unix systems without a native poll and for portability to
--- windows.
--- 
--- When this function returns `true`, you should use
--- `g_cancellable_release_fd()` to free up resources allocated for the
--- `pollfd`. After a `false` return, do not call `g_cancellable_release_fd()`.
--- 
--- If this function returns `false`, either no `cancellable` was given or
--- resource limits prevent this function from allocating the necessary
--- structures for polling. (On Linux, you will likely have reached
--- the maximum number of file descriptors.) The suggested way to handle
--- these cases is to ignore the `cancellable`.
--- 
--- You are not supposed to read from the fd yourself, just check for
--- readable status. Reading to unset the readable status is done
--- with `g_cancellable_reset()`.
---
--- ---
---
---@param self? Gio.Cancellable # a `GCancellable` or `nil`
---@param pollfd GLib.PollFD # a pointer to a `GPollFD`
---@return (boolean|nil) # `true` if `pollfd` was successfully initialized, `false` on failure to prepare the cancellable.
function Gio.Cancellable:make_pollfd(pollfd) end

--- # method Gio.Cancellable:pop_current()
---
--- Pops `cancellable` off the cancellable stack (verifying that `cancellable`
--- is on the top of the stack).
---
--- ---
---
---@param self? Gio.Cancellable # a `GCancellable` object
---@return nil
function Gio.Cancellable:pop_current() end

--- # method Gio.Cancellable:push_current()
---
--- Pushes `cancellable` onto the cancellable stack. The current
--- cancellable can then be received using `g_cancellable_get_current()`.
--- 
--- This is useful when implementing cancellable operations in
--- code that does not allow you to pass down the cancellable object.
--- 
--- This is typically called automatically by e.g. `GFile` operations,
--- so you rarely have to call this yourself.
---
--- ---
---
---@param self? Gio.Cancellable # a `GCancellable` object
---@return nil
function Gio.Cancellable:push_current() end

--- # method Gio.Cancellable:release_fd()
---
--- Releases a resources previously allocated by `g_cancellable_get_fd()`
--- or `g_cancellable_make_pollfd()`.
--- 
--- For compatibility reasons with older releases, calling this function
--- is not strictly required, the resources will be automatically freed
--- when the `cancellable` is finalized. However, the `cancellable` will
--- block scarce file descriptors until it is finalized if this function
--- is not called. This can cause the application to run out of file
--- descriptors when many `GCancellables` are used at the same time.
---
--- ---
---
---@param self? Gio.Cancellable # a `GCancellable`
---@return nil
function Gio.Cancellable:release_fd() end

--- # method Gio.Cancellable:reset()
---
--- Resets `cancellable` to its uncancelled state.
--- 
--- If cancellable is currently in use by any cancellable operation
--- then the behavior of this function is undefined.
--- 
--- Note that it is generally not a good idea to reuse an existing
--- cancellable for more operations after it has been cancelled once,
--- as this function might tempt you to do. The recommended practice
--- is to drop the reference to a cancellable after cancelling it,
--- and let it die with the outstanding async operations. You should
--- create a fresh cancellable for further async operations.
---
--- ---
---
---@param self? Gio.Cancellable # a `GCancellable` object.
---@return nil
function Gio.Cancellable:reset() end

--- # method Gio.Cancellable:set_error_if_cancelled()
---
--- If the `cancellable` is cancelled, sets the error to notify
--- that the operation was cancelled.
---
--- ---
---
---@param self? Gio.Cancellable # a `GCancellable` or `nil`
---@return (boolean|nil) # `true` if `cancellable` was cancelled, `false` if it was not
function Gio.Cancellable:set_error_if_cancelled() end

--- # method Gio.Cancellable:source_new()
---
--- Creates a source that triggers if `cancellable` is cancelled and
--- calls its callback of type `GCancellableSourceFunc`. This is
--- primarily useful for attaching to another (non-cancellable) source
--- with `g_source_add_child_source()` to add cancellability to it.
--- 
--- For convenience, you can call this with a `nil` `GCancellable`,
--- in which case the source will never trigger.
--- 
--- The new `GSource` will hold a reference to the `GCancellable`.
---
--- ---
---
---@param self? Gio.Cancellable # a `GCancellable`, or `nil`
---@return GLib.Source # the new `GSource`.
function Gio.Cancellable:source_new() end

--- # function Gio.Cancellable.get_current()
---
--- Gets the top cancellable from the stack.
---
--- ---
---
---@return Gio.Cancellable # a `GCancellable` from the top of the stack, or `nil` if the stack is empty.
function Gio.Cancellable.get_current() end

--- # function Gio.Cancellable.new()
---
--- Creates a new `GCancellable` object.
--- 
--- Applications that want to start one or more operations
--- that should be cancellable should create a `GCancellable`
--- and pass it to the operations.
--- 
--- One `GCancellable` can be used in multiple consecutive
--- operations or in multiple concurrent operations.
---
--- ---
---
---@return Gio.Cancellable # a `GCancellable`.
function Gio.Cancellable.new() end

--- # record Gio.CancellableClass
---
---@class Gio.CancellableClass
---@field parent_class GObject.ObjectClass
---@field cancelled fun(cancellable: Gio.Cancellable): nil
Gio.CancellableClass = {}

--- # record Gio.CancellablePrivate
---
---@class Gio.CancellablePrivate
Gio.CancellablePrivate = {}

---@alias Gio.CancellableSourceFunc fun(cancellable: Gio.Cancellable, data: userdata): (boolean|nil)

--- # class Gio.CharsetConverter
---
--- `GCharsetConverter` is an implementation of `GConverter` based on
--- GIConv.
---
--- ---
---
---@class Gio.CharsetConverter : GObject.Object, Gio.Converter, Gio.Initable
---@operator call: Gio.CharsetConverter
Gio.CharsetConverter = {}

--- # method Gio.CharsetConverter:get_num_fallbacks()
---
--- Gets the number of fallbacks that `converter` has applied so far.
---
--- ---
---
---@param self Gio.CharsetConverter # a `GCharsetConverter`
---@return integer # the number of fallbacks that `converter` has applied
function Gio.CharsetConverter:get_num_fallbacks() end

--- # method Gio.CharsetConverter:get_use_fallback()
---
--- Gets the `GCharsetConverter`:use-fallback property.
---
--- ---
---
---@param self Gio.CharsetConverter # a `GCharsetConverter`
---@return (boolean|nil) # `true` if fallbacks are used by `converter`
function Gio.CharsetConverter:get_use_fallback() end

--- # method Gio.CharsetConverter:set_use_fallback()
---
--- Sets the `GCharsetConverter`:use-fallback property.
---
--- ---
---
---@param self Gio.CharsetConverter # a `GCharsetConverter`
---@param use_fallback (boolean|nil) # `true` to use fallbacks
---@return nil
function Gio.CharsetConverter:set_use_fallback(use_fallback) end

--- # function Gio.CharsetConverter.new()
---
--- Creates a new `GCharsetConverter`.
---
--- ---
---
---@param to_charset string # destination charset
---@param from_charset string # source charset
---@return Gio.CharsetConverter # a new `GCharsetConverter` or `nil` on error.
function Gio.CharsetConverter.new(to_charset, from_charset) end

--- # record Gio.CharsetConverterClass
---
---@class Gio.CharsetConverterClass
---@field parent_class GObject.ObjectClass
Gio.CharsetConverterClass = {}

--- # interface Gio.Converter
---
--- `GConverter` is implemented by objects that convert
--- binary data in various ways. The conversion can be
--- stateful and may fail at any place.
--- 
--- Some example conversions are: character set conversion,
--- compression, decompression and regular expression
--- replace.
---
--- ---
---
---@class Gio.Converter
Gio.Converter = {}

--- # method Gio.Converter:convert()
---
--- This is the main operation used when converting data. It is to be called
--- multiple times in a loop, and each time it will do some work, i.e.
--- producing some output (in `outbuf`) or consuming some input (from `inbuf`) or
--- both. If its not possible to do any work an error is returned.
--- 
--- Note that a single call may not consume all input (or any input at all).
--- Also a call may produce output even if given no input, due to state stored
--- in the converter producing output.
--- 
--- If any data was either produced or consumed, and then an error happens, then
--- only the successful conversion is reported and the error is returned on the
--- next call.
--- 
--- A full conversion loop involves calling this method repeatedly, each time
--- giving it new input and space output space. When there is no more input
--- data after the data in `inbuf`, the flag %G_CONVERTER_INPUT_AT_END must be set.
--- The loop will be (unless some error happens) returning %G_CONVERTER_CONVERTED
--- each time until all data is consumed and all output is produced, then
--- %G_CONVERTER_FINISHED is returned instead. Note, that %G_CONVERTER_FINISHED
--- may be returned even if %G_CONVERTER_INPUT_AT_END is not set, for instance
--- in a decompression converter where the end of data is detectable from the
--- data (and there might even be other data after the end of the compressed data).
--- 
--- When some data has successfully been converted `bytes_read` and is set to
--- the number of bytes read from `inbuf`, and `bytes_written` is set to indicate
--- how many bytes was written to `outbuf`. If there are more data to output
--- or consume (i.e. unless the %G_CONVERTER_INPUT_AT_END is specified) then
--- %G_CONVERTER_CONVERTED is returned, and if no more data is to be output
--- then %G_CONVERTER_FINISHED is returned.
--- 
--- On error %G_CONVERTER_ERROR is returned and `error` is set accordingly.
--- Some errors need special handling:
--- 
--- %G_IO_ERROR_NO_SPACE is returned if there is not enough space
--- to write the resulting converted data, the application should
--- call the function again with a larger `outbuf` to continue.
--- 
--- %G_IO_ERROR_PARTIAL_INPUT is returned if there is not enough
--- input to fully determine what the conversion should produce,
--- and the %G_CONVERTER_INPUT_AT_END flag is not set. This happens for
--- example with an incomplete multibyte sequence when converting text,
--- or when a regexp matches up to the end of the input (and may match
--- further input). It may also happen when `inbuf_size` is zero and
--- there is no more data to produce.
--- 
--- When this happens the application should read more input and then
--- call the function again. If further input shows that there is no
--- more data call the function again with the same data but with
--- the %G_CONVERTER_INPUT_AT_END flag set. This may cause the conversion
--- to finish as e.g. in the regexp match case (or, to fail again with
--- %G_IO_ERROR_PARTIAL_INPUT in e.g. a charset conversion where the
--- input is actually partial).
--- 
--- After `g_converter_convert()` has returned %G_CONVERTER_FINISHED the
--- converter object is in an invalid state where its not allowed
--- to call `g_converter_convert()` anymore. At this time you can only
--- free the object or call `g_converter_reset()` to reset it to the
--- initial state.
--- 
--- If the flag %G_CONVERTER_FLUSH is set then conversion is modified
--- to try to write out all internal state to the output. The application
--- has to call the function multiple times with the flag set, and when
--- the available input has been consumed and all internal state has
--- been produced then %G_CONVERTER_FLUSHED (or %G_CONVERTER_FINISHED if
--- really at the end) is returned instead of %G_CONVERTER_CONVERTED.
--- This is somewhat similar to what happens at the end of the input stream,
--- but done in the middle of the data.
--- 
--- This has different meanings for different conversions. For instance
--- in a compression converter it would mean that we flush all the
--- compression state into output such that if you uncompress the
--- compressed data you get back all the input data. Doing this may
--- make the final file larger due to padding though. Another example
--- is a regexp conversion, where if you at the end of the flushed data
--- have a match, but there is also a potential longer match. In the
--- non-flushed case we would ask for more input, but when flushing we
--- treat this as the end of input and do the match.
--- 
--- Flushing is not always possible (like if a charset converter flushes
--- at a partial multibyte sequence). Converters are supposed to try
--- to produce as much output as possible and then return an error
--- (typically %G_IO_ERROR_PARTIAL_INPUT).
---
--- ---
---
---@param self Gio.Converter # a `GConverter`.
---@param inbuf unknown[] # the buffer containing the data to convert.
---@param inbuf_size integer # the number of bytes in `inbuf`
---@param outbuf unknown[] # a buffer to write converted data in.
---@param outbuf_size integer # the number of bytes in `outbuf`, must be at least one
---@param flags Gio.ConverterFlags # a `GConverterFlags` controlling the conversion details
---@param bytes_read integer # will be set to the number of bytes read from `inbuf` on success
---@param bytes_written integer # will be set to the number of bytes written to `outbuf` on success
---@return Gio.ConverterResult # a `GConverterResult`, %G_CONVERTER_ERROR on error.
function Gio.Converter:convert(inbuf, inbuf_size, outbuf, outbuf_size, flags, bytes_read, bytes_written) end

--- # method Gio.Converter:reset()
---
--- Resets all internal state in the converter, making it behave
--- as if it was just created. If the converter has any internal
--- state that would produce output then that output is lost.
---
--- ---
---
---@param self Gio.Converter # a `GConverter`.
---@return nil
function Gio.Converter:reset() end

---@enum Gio.ConverterFlags
Gio.ConverterFlags = {}

--- # record Gio.ConverterIface
---
--- Provides an interface for converting data from one type
--- to another type. The conversion can be stateful
--- and may fail at any place.
---
--- ---
---
---@class Gio.ConverterIface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field convert fun(converter: Gio.Converter, inbuf: unknown[], inbuf_size: integer, outbuf: unknown[], outbuf_size: integer, flags: Gio.ConverterFlags, bytes_read: integer, bytes_written: integer): Gio.ConverterResult
---@field reset fun(converter: Gio.Converter): nil
Gio.ConverterIface = {}

--- # class Gio.ConverterInputStream
---
--- Converter input stream implements `GInputStream` and allows
--- conversion of data of various types during reading.
--- 
--- As of GLib 2.34, `GConverterInputStream` implements
--- `GPollableInputStream`.
---
--- ---
---
---@class Gio.ConverterInputStream : Gio.FilterInputStream, Gio.PollableInputStream
---@field parent_instance Gio.FilterInputStream
---@field priv Gio.ConverterInputStreamPrivate
---@operator call: Gio.ConverterInputStream
Gio.ConverterInputStream = {}

--- # method Gio.ConverterInputStream:get_converter()
---
--- Gets the `GConverter` that is used by `converter_stream`.
---
--- ---
---
---@param self Gio.ConverterInputStream # a `GConverterInputStream`
---@return Gio.Converter # the converter of the converter input stream
function Gio.ConverterInputStream:get_converter() end

--- # function Gio.ConverterInputStream.new()
---
--- Creates a new converter input stream for the `base_stream`.
---
--- ---
---
---@param base_stream Gio.InputStream # a `GInputStream`
---@param converter Gio.Converter # a `GConverter`
---@return Gio.InputStream # a new `GInputStream`.
function Gio.ConverterInputStream.new(base_stream, converter) end

--- # record Gio.ConverterInputStreamClass
---
---@class Gio.ConverterInputStreamClass
---@field parent_class Gio.FilterInputStreamClass
Gio.ConverterInputStreamClass = {}

--- # record Gio.ConverterInputStreamPrivate
---
---@class Gio.ConverterInputStreamPrivate
Gio.ConverterInputStreamPrivate = {}

--- # class Gio.ConverterOutputStream
---
--- Converter output stream implements `GOutputStream` and allows
--- conversion of data of various types during reading.
--- 
--- As of GLib 2.34, `GConverterOutputStream` implements
--- `GPollableOutputStream`.
---
--- ---
---
---@class Gio.ConverterOutputStream : Gio.FilterOutputStream, Gio.PollableOutputStream
---@field parent_instance Gio.FilterOutputStream
---@field priv Gio.ConverterOutputStreamPrivate
---@operator call: Gio.ConverterOutputStream
Gio.ConverterOutputStream = {}

--- # method Gio.ConverterOutputStream:get_converter()
---
--- Gets the `GConverter` that is used by `converter_stream`.
---
--- ---
---
---@param self Gio.ConverterOutputStream # a `GConverterOutputStream`
---@return Gio.Converter # the converter of the converter output stream
function Gio.ConverterOutputStream:get_converter() end

--- # function Gio.ConverterOutputStream.new()
---
--- Creates a new converter output stream for the `base_stream`.
---
--- ---
---
---@param base_stream Gio.OutputStream # a `GOutputStream`
---@param converter Gio.Converter # a `GConverter`
---@return Gio.OutputStream # a new `GOutputStream`.
function Gio.ConverterOutputStream.new(base_stream, converter) end

--- # record Gio.ConverterOutputStreamClass
---
---@class Gio.ConverterOutputStreamClass
---@field parent_class Gio.FilterOutputStreamClass
Gio.ConverterOutputStreamClass = {}

--- # record Gio.ConverterOutputStreamPrivate
---
---@class Gio.ConverterOutputStreamPrivate
Gio.ConverterOutputStreamPrivate = {}

---@enum Gio.ConverterResult
Gio.ConverterResult = {}

--- # class Gio.Credentials
---
--- The `GCredentials` type is a reference-counted wrapper for native
--- credentials. This information is typically used for identifying,
--- authenticating and authorizing other processes.
--- 
--- Some operating systems supports looking up the credentials of the
--- remote peer of a communication endpoint - see e.g.
--- `g_socket_get_credentials()`.
--- 
--- Some operating systems supports securely sending and receiving
--- credentials over a Unix Domain Socket, see
--- `GUnixCredentialsMessage`, `g_unix_connection_send_credentials()` and
--- `g_unix_connection_receive_credentials()` for details.
--- 
--- On Linux, the native credential type is a `struct ucred` - see the
--- unix(7) man page for details. This corresponds to
--- %G_CREDENTIALS_TYPE_LINUX_UCRED.
--- 
--- On Apple operating systems (including iOS, tvOS, and macOS),
--- the native credential type is a `struct xucred`.
--- This corresponds to %G_CREDENTIALS_TYPE_APPLE_XUCRED.
--- 
--- On FreeBSD, Debian GNU/kFreeBSD, and GNU/Hurd, the native
--- credential type is a `struct cmsgcred`. This corresponds
--- to %G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED.
--- 
--- On NetBSD, the native credential type is a `struct unpcbid`.
--- This corresponds to %G_CREDENTIALS_TYPE_NETBSD_UNPCBID.
--- 
--- On OpenBSD, the native credential type is a `struct sockpeercred`.
--- This corresponds to %G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED.
--- 
--- On Solaris (including OpenSolaris and its derivatives), the native
--- credential type is a `ucred_t`. This corresponds to
--- %G_CREDENTIALS_TYPE_SOLARIS_UCRED.
--- 
--- Since GLib 2.72, on Windows, the native credentials may contain the PID of a
--- process. This corresponds to %G_CREDENTIALS_TYPE_WIN32_PID.
---
--- ---
---
---@class Gio.Credentials : GObject.Object
---@operator call: Gio.Credentials
Gio.Credentials = {}

--- # method Gio.Credentials:get_unix_pid()
---
--- Tries to get the UNIX process identifier from `credentials`. This
--- method is only available on UNIX platforms.
--- 
--- This operation can fail if `GCredentials` is not supported on the
--- OS or if the native credentials type does not contain information
--- about the UNIX process ID.
---
--- ---
---
---@param self Gio.Credentials # A `GCredentials`
---@return integer # The UNIX process ID, or `-1` if `error` is set.
function Gio.Credentials:get_unix_pid() end

--- # method Gio.Credentials:get_unix_user()
---
--- Tries to get the UNIX user identifier from `credentials`. This
--- method is only available on UNIX platforms.
--- 
--- This operation can fail if `GCredentials` is not supported on the
--- OS or if the native credentials type does not contain information
--- about the UNIX user.
---
--- ---
---
---@param self Gio.Credentials # A `GCredentials`
---@return integer # The UNIX user identifier or `-1` if `error` is set.
function Gio.Credentials:get_unix_user() end

--- # method Gio.Credentials:is_same_user()
---
--- Checks if `credentials` and `other_credentials` is the same user.
--- 
--- This operation can fail if `GCredentials` is not supported on the
--- the OS.
---
--- ---
---
---@param self Gio.Credentials # A `GCredentials`.
---@param other_credentials Gio.Credentials # A `GCredentials`.
---@return (boolean|nil) # `true` if `credentials` and `other_credentials` has the same user, `false` otherwise or if `error` is set.
function Gio.Credentials:is_same_user(other_credentials) end

--- # method Gio.Credentials:set_native()
---
--- Copies the native credentials of type `native_type` from `native`
--- into `credentials`.
--- 
--- It is a programming error (which will cause a warning to be
--- logged) to use this method if there is no `GCredentials` support for
--- the OS or if `native_type` isn't supported by the OS.
---
--- ---
---
---@param self Gio.Credentials # A `GCredentials`.
---@param native_type Gio.CredentialsType # The type of native credentials to set.
---@param native userdata # A pointer to native credentials.
---@return nil
function Gio.Credentials:set_native(native_type, native) end

--- # method Gio.Credentials:set_unix_user()
---
--- Tries to set the UNIX user identifier on `credentials`. This method
--- is only available on UNIX platforms.
--- 
--- This operation can fail if `GCredentials` is not supported on the
--- OS or if the native credentials type does not contain information
--- about the UNIX user. It can also fail if the OS does not allow the
--- use of "spoofed" credentials.
---
--- ---
---
---@param self Gio.Credentials # A `GCredentials`.
---@param uid integer # The UNIX user identifier to set.
---@return (boolean|nil) # `true` if `uid` was set, `false` if error is set.
function Gio.Credentials:set_unix_user(uid) end

--- # method Gio.Credentials:to_string()
---
--- Creates a human-readable textual representation of `credentials`
--- that can be used in logging and debug messages. The format of the
--- returned string may change in future GLib release.
---
--- ---
---
---@param self Gio.Credentials # A `GCredentials` object.
---@return string # A string that should be freed with `g_free()`.
function Gio.Credentials:to_string() end

--- # function Gio.Credentials.new()
---
--- Creates a new `GCredentials` object with credentials matching the
--- the current process.
---
--- ---
---
---@return Gio.Credentials # A `GCredentials`. Free with `g_object_unref()`.
function Gio.Credentials.new() end

--- # record Gio.CredentialsClass
---
--- Class structure for `GCredentials`.
---
--- ---
---
---@class Gio.CredentialsClass
Gio.CredentialsClass = {}

---@enum Gio.CredentialsType
Gio.CredentialsType = {}

--- # class Gio.DBusActionGroup
---
--- `GDBusActionGroup` is an implementation of the `GActionGroup`
--- interface that can be used as a proxy for an action group
--- that is exported over D-Bus with `g_dbus_connection_export_action_group()`.
---
--- ---
---
---@class Gio.DBusActionGroup : GObject.Object, Gio.ActionGroup, Gio.RemoteActionGroup
Gio.DBusActionGroup = {}

--- # function Gio.DBusActionGroup.get()
---
--- Obtains a `GDBusActionGroup` for the action group which is exported at
--- the given `bus_name` and `object_path`.
--- 
--- The thread default main context is taken at the time of this call.
--- All signals on the menu model (and any linked models) are reported
--- with respect to this context.  All calls on the returned menu model
--- (and linked models) must also originate from this same context, with
--- the thread default main context unchanged.
--- 
--- This call is non-blocking.  The returned action group may or may not
--- already be filled in.  The correct thing to do is connect the signals
--- for the action group to monitor for changes and then to call
--- `g_action_group_list_actions()` to get the initial list.
---
--- ---
---
---@param connection Gio.DBusConnection # A `GDBusConnection`
---@param bus_name? string # the bus name which exports the action group or `nil` if `connection` is not a message bus connection
---@param object_path string # the object path at which the action group is exported
---@return Gio.DBusActionGroup # a `GDBusActionGroup`
function Gio.DBusActionGroup.get(connection, bus_name, object_path) end

--- # record Gio.DBusAnnotationInfo
---
--- Information about an annotation.
---
--- ---
---
---@class Gio.DBusAnnotationInfo
---@field ref_count integer # The reference count or -1 if statically allocated.
---@field key string # The name of the annotation, e.g. "org.freedesktop.DBus.Deprecated".
---@field value string # The value of the annotation.
---@field annotations unknown[] # A pointer to a `nil`-terminated array of pointers to `GDBusAnnotationInfo` structures or `nil` if there are no annotations.
Gio.DBusAnnotationInfo = {}

--- # method Gio.DBusAnnotationInfo:ref()
---
--- If `info` is statically allocated does nothing. Otherwise increases
--- the reference count.
---
--- ---
---
---@param self Gio.DBusAnnotationInfo # A `GDBusNodeInfo`
---@return Gio.DBusAnnotationInfo # The same `info`.
function Gio.DBusAnnotationInfo:ref() end

--- # method Gio.DBusAnnotationInfo:unref()
---
--- If `info` is statically allocated, does nothing. Otherwise decreases
--- the reference count of `info`. When its reference count drops to 0,
--- the memory used is freed.
---
--- ---
---
---@param self Gio.DBusAnnotationInfo # A `GDBusAnnotationInfo`.
---@return nil
function Gio.DBusAnnotationInfo:unref() end

--- # function Gio.DBusAnnotationInfo.lookup()
---
--- Looks up the value of an annotation.
--- 
--- The cost of this function is O(n) in number of annotations.
---
--- ---
---
---@param annotations? unknown[] # A `nil`-terminated array of annotations or `nil`.
---@param name string # The name of the annotation to look up.
---@return string # The value or `nil` if not found. Do not free, it is owned by `annotations`.
function Gio.DBusAnnotationInfo.lookup(annotations, name) end

--- # record Gio.DBusArgInfo
---
--- Information about an argument for a method or a signal.
---
--- ---
---
---@class Gio.DBusArgInfo
---@field ref_count integer # The reference count or -1 if statically allocated.
---@field name string # Name of the argument, e.g. `unix_user_id`.
---@field signature string # D-Bus signature of the argument (a single complete type).
---@field annotations unknown[] # A pointer to a `nil`-terminated array of pointers to `GDBusAnnotationInfo` structures or `nil` if there are no annotations.
Gio.DBusArgInfo = {}

--- # method Gio.DBusArgInfo:ref()
---
--- If `info` is statically allocated does nothing. Otherwise increases
--- the reference count.
---
--- ---
---
---@param self Gio.DBusArgInfo # A `GDBusArgInfo`
---@return Gio.DBusArgInfo # The same `info`.
function Gio.DBusArgInfo:ref() end

--- # method Gio.DBusArgInfo:unref()
---
--- If `info` is statically allocated, does nothing. Otherwise decreases
--- the reference count of `info`. When its reference count drops to 0,
--- the memory used is freed.
---
--- ---
---
---@param self Gio.DBusArgInfo # A `GDBusArgInfo`.
---@return nil
function Gio.DBusArgInfo:unref() end

--- # class Gio.DBusAuthObserver
---
--- The `GDBusAuthObserver` type provides a mechanism for participating
--- in how a `GDBusServer` (or a `GDBusConnection`) authenticates remote
--- peers. Simply instantiate a `GDBusAuthObserver` and connect to the
--- signals you are interested in. Note that new signals may be added
--- in the future
--- 
--- ## Controlling Authentication Mechanisms
--- 
--- By default, a `GDBusServer` or server-side `GDBusConnection` will allow
--- any authentication mechanism to be used. If you only
--- want to allow D-Bus connections with the `EXTERNAL` mechanism,
--- which makes use of credentials passing and is the recommended
--- mechanism for modern Unix platforms such as Linux and the BSD family,
--- you would use a signal handler like this:
--- 
--- ```c
--- static gboolean
--- on_allow_mechanism (GDBusAuthObserver *observer,
---                     const gchar       *mechanism,
---                     gpointer           user_data)
--- {
---   if (g_strcmp0 (mechanism, "EXTERNAL") == 0)
---     {
---       return TRUE;
---     }
--- 
---   return FALSE;
--- }
--- ```
--- 
--- ## Controlling Authorization # {`auth`-observer}
--- 
--- By default, a `GDBusServer` or server-side `GDBusConnection` will accept
--- connections from any successfully authenticated user (but not from
--- anonymous connections using the `ANONYMOUS` mechanism). If you only
--- want to allow D-Bus connections from processes owned by the same uid
--- as the server, since GLib 2.68, you should use the
--- %G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER flag. It’s equivalent
--- to the following signal handler:
--- 
--- ```c
--- static gboolean
--- on_authorize_authenticated_peer (GDBusAuthObserver *observer,
---                                  GIOStream         *stream,
---                                  GCredentials      *credentials,
---                                  gpointer           user_data)
--- {
---   gboolean authorized;
--- 
---   authorized = FALSE;
---   if (credentials != NULL)
---     {
---       GCredentials *own_credentials;
---       own_credentials = g_credentials_new ();
---       if (g_credentials_is_same_user (credentials, own_credentials, NULL))
---         authorized = TRUE;
---       g_object_unref (own_credentials);
---     }
--- 
---   return authorized;
--- }
--- ```
---
--- ---
---
---@class Gio.DBusAuthObserver : GObject.Object
---@operator call: Gio.DBusAuthObserver
Gio.DBusAuthObserver = {}

--- # method Gio.DBusAuthObserver:allow_mechanism()
---
--- Emits the `GDBusAuthObserver`::allow-mechanism signal on `observer`.
---
--- ---
---
---@param self Gio.DBusAuthObserver # A `GDBusAuthObserver`.
---@param mechanism string # The name of the mechanism, e.g. `DBUS_COOKIE_SHA1`.
---@return (boolean|nil) # `true` if `mechanism` can be used to authenticate the other peer, `false` if not.
function Gio.DBusAuthObserver:allow_mechanism(mechanism) end

--- # method Gio.DBusAuthObserver:authorize_authenticated_peer()
---
--- Emits the `GDBusAuthObserver`::authorize-authenticated-peer signal on `observer`.
---
--- ---
---
---@param self Gio.DBusAuthObserver # A `GDBusAuthObserver`.
---@param stream Gio.IOStream # A `GIOStream` for the `GDBusConnection`.
---@param credentials? Gio.Credentials # Credentials received from the peer or `nil`.
---@return (boolean|nil) # `true` if the peer is authorized, `false` if not.
function Gio.DBusAuthObserver:authorize_authenticated_peer(stream, credentials) end

--- # function Gio.DBusAuthObserver.new()
---
--- Creates a new `GDBusAuthObserver` object.
---
--- ---
---
---@return Gio.DBusAuthObserver # A `GDBusAuthObserver`. Free with `g_object_unref()`.
function Gio.DBusAuthObserver.new() end

---@enum Gio.DBusCallFlags
Gio.DBusCallFlags = {}

---@enum Gio.DBusCapabilityFlags
Gio.DBusCapabilityFlags = {}

--- # class Gio.DBusConnection
---
--- The `GDBusConnection` type is used for D-Bus connections to remote
--- peers such as a message buses. It is a low-level API that offers a
--- lot of flexibility. For instance, it lets you establish a connection
--- over any transport that can by represented as a `GIOStream`.
--- 
--- This class is rarely used directly in D-Bus clients. If you are writing
--- a D-Bus client, it is often easier to use the `g_bus_own_name()`,
--- `g_bus_watch_name()` or `g_dbus_proxy_new_for_bus()` APIs.
--- 
--- As an exception to the usual GLib rule that a particular object must not
--- be used by two threads at the same time, `GDBusConnection`'s methods may be
--- called from any thread. This is so that `g_bus_get()` and `g_bus_get_sync()`
--- can safely return the same `GDBusConnection` when called from any thread.
--- 
--- Most of the ways to obtain a `GDBusConnection` automatically initialize it
--- (i.e. connect to D-Bus): for instance, `g_dbus_connection_new()` and
--- `g_bus_get()`, and the synchronous versions of those methods, give you an
--- initialized connection. Language bindings for GIO should use
--- `g_initable_new()` or `g_async_initable_new_async()`, which also initialize the
--- connection.
--- 
--- If you construct an uninitialized `GDBusConnection`, such as via
--- `g_object_new()`, you must initialize it via `g_initable_init()` or
--- `g_async_initable_init_async()` before using its methods or properties.
--- Calling methods or accessing properties on a `GDBusConnection` that has not
--- completed initialization successfully is considered to be invalid, and leads
--- to undefined behaviour. In particular, if initialization fails with a
--- `GError`, the only valid thing you can do with that `GDBusConnection` is to
--- free it with `g_object_unref()`.
--- 
--- ## An example D-Bus server # {`gdbus`-server}
--- 
--- Here is an example for a D-Bus server:
--- [gdbus-example-server.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gdbus-example-server.c)
--- 
--- ## An example for exporting a subtree # {`gdbus`-subtree-server}
--- 
--- Here is an example for exporting a subtree:
--- [gdbus-example-subtree.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gdbus-example-subtree.c)
--- 
--- ## An example for file descriptor passing # {`gdbus`-unix-fd-client}
--- 
--- Here is an example for passing UNIX file descriptors:
--- [gdbus-unix-fd-client.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gdbus-example-unix-fd-client.c)
--- 
--- ## An example for exporting a GObject # {`gdbus`-export}
--- 
--- Here is an example for exporting a `GObject`:
--- [gdbus-example-export.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gdbus-example-export.c)
---
--- ---
---
---@class Gio.DBusConnection : GObject.Object, Gio.AsyncInitable, Gio.Initable
---@operator call: Gio.DBusConnection
Gio.DBusConnection = {}

--- # method Gio.DBusConnection:add_filter()
---
--- Adds a message filter. Filters are handlers that are run on all
--- incoming and outgoing messages, prior to standard dispatch. Filters
--- are run in the order that they were added.  The same handler can be
--- added as a filter more than once, in which case it will be run more
--- than once.  Filters added during a filter callback won't be run on
--- the message being processed. Filter functions are allowed to modify
--- and even drop messages.
--- 
--- Note that filters are run in a dedicated message handling thread so
--- they can't block and, generally, can't do anything but signal a
--- worker thread. Also note that filters are rarely needed - use API
--- such as `g_dbus_connection_send_message_with_reply()`,
--- `g_dbus_connection_signal_subscribe()` or `g_dbus_connection_call()` instead.
--- 
--- If a filter consumes an incoming message the message is not
--- dispatched anywhere else - not even the standard dispatch machinery
--- (that API such as `g_dbus_connection_signal_subscribe()` and
--- `g_dbus_connection_send_message_with_reply()` relies on) will see the
--- message. Similarly, if a filter consumes an outgoing message, the
--- message will not be sent to the other peer.
--- 
--- If `user_data_free_func` is non-`nil`, it will be called (in the
--- thread-default main context of the thread you are calling this
--- method from) at some point after `user_data` is no longer
--- needed. (It is not guaranteed to be called synchronously when the
--- filter is removed, and may be called after `connection` has been
--- destroyed.)
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param filter_function Gio.DBusMessageFilterFunction # a filter function
---@param user_data? userdata # user data to pass to `filter_function`
---@param user_data_free_func GLib.DestroyNotify # function to free `user_data` with when filter is removed or `nil`
---@return integer # a filter identifier that can be used with `g_dbus_connection_remove_filter()`
function Gio.DBusConnection:add_filter(filter_function, user_data, user_data_free_func) end

--- # method Gio.DBusConnection:call()
---
--- Asynchronously invokes the `method_name` method on the
--- `interface_name` D-Bus interface on the remote object at
--- `object_path` owned by `bus_name`.
--- 
--- If `connection` is closed then the operation will fail with
--- %G_IO_ERROR_CLOSED. If `cancellable` is canceled, the operation will
--- fail with %G_IO_ERROR_CANCELLED. If `parameters` contains a value
--- not compatible with the D-Bus protocol, the operation fails with
--- %G_IO_ERROR_INVALID_ARGUMENT.
--- 
--- If `reply_type` is non-`nil` then the reply will be checked for having this type and an
--- error will be raised if it does not match.  Said another way, if you give a `reply_type`
--- then any non-`nil` return value will be of this type. Unless it’s
--- %G_VARIANT_TYPE_UNIT, the `reply_type` will be a tuple containing one or more
--- values.
--- 
--- If the `parameters` `GVariant` is floating, it is consumed. This allows
--- convenient 'inline' use of `g_variant_new()`, e.g.:
--- ```c
---  g_dbus_connection_call (connection,
---                          "org.freedesktop.StringThings",
---                          "/org/freedesktop/StringThings",
---                          "org.freedesktop.StringThings",
---                          "TwoStrings",
---                          g_variant_new ("(ss)",
---                                         "Thing One",
---                                         "Thing Two"),
---                          NULL,
---                          G_DBUS_CALL_FLAGS_NONE,
---                          -1,
---                          NULL,
---                          (GAsyncReadyCallback) two_strings_done,
---                          NULL);
--- ```
--- 
--- This is an asynchronous method. When the operation is finished,
--- `callback` will be invoked in the
--- [thread-default main context][g-main-context-push-thread-default]
--- of the thread you are calling this method from. You can then call
--- `g_dbus_connection_call_finish()` to get the result of the operation.
--- See `g_dbus_connection_call_sync()` for the synchronous version of this
--- function.
--- 
--- If `callback` is `nil` then the D-Bus method call message will be sent with
--- the %G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED flag set.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param bus_name? string # a unique or well-known bus name or `nil` if `connection` is not a message bus connection
---@param object_path string # path of remote object
---@param interface_name string # D-Bus interface to invoke method on
---@param method_name string # the name of the method to invoke
---@param parameters? GLib.Variant # a `GVariant` tuple with parameters for the method or `nil` if not passing parameters
---@param reply_type? GLib.VariantType # the expected type of the reply (which will be a tuple), or `nil`
---@param flags Gio.DBusCallFlags # flags from the `GDBusCallFlags` enumeration
---@param timeout_msec integer # the timeout in milliseconds, -1 to use the default timeout or %G_MAXINT for no timeout
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied or `nil` if you don't care about the result of the method invocation
---@param user_data? userdata # the data to pass to `callback`
---@return nil
function Gio.DBusConnection:call(bus_name, object_path, interface_name, method_name, parameters, reply_type, flags, timeout_msec, cancellable, callback, user_data) end

--- # method Gio.DBusConnection:call_finish()
---
--- Finishes an operation started with `g_dbus_connection_call()`.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param res Gio.AsyncResult # a `GAsyncResult` obtained from the `GAsyncReadyCallback` passed to `g_dbus_connection_call()`
---@return GLib.Variant # `nil` if `error` is set. Otherwise a non-floating `GVariant` tuple with return values. Free with `g_variant_unref()`.
function Gio.DBusConnection:call_finish(res) end

--- # method Gio.DBusConnection:call_sync()
---
--- Synchronously invokes the `method_name` method on the
--- `interface_name` D-Bus interface on the remote object at
--- `object_path` owned by `bus_name`.
--- 
--- If `connection` is closed then the operation will fail with
--- %G_IO_ERROR_CLOSED. If `cancellable` is canceled, the
--- operation will fail with %G_IO_ERROR_CANCELLED. If `parameters`
--- contains a value not compatible with the D-Bus protocol, the operation
--- fails with %G_IO_ERROR_INVALID_ARGUMENT.
--- 
--- If `reply_type` is non-`nil` then the reply will be checked for having
--- this type and an error will be raised if it does not match.  Said
--- another way, if you give a `reply_type` then any non-`nil` return
--- value will be of this type.
--- 
--- If the `parameters` `GVariant` is floating, it is consumed.
--- This allows convenient 'inline' use of `g_variant_new()`, e.g.:
--- ```c
---  g_dbus_connection_call_sync (connection,
---                               "org.freedesktop.StringThings",
---                               "/org/freedesktop/StringThings",
---                               "org.freedesktop.StringThings",
---                               "TwoStrings",
---                               g_variant_new ("(ss)",
---                                              "Thing One",
---                                              "Thing Two"),
---                               NULL,
---                               G_DBUS_CALL_FLAGS_NONE,
---                               -1,
---                               NULL,
---                               &error);
--- ```
--- 
--- The calling thread is blocked until a reply is received. See
--- `g_dbus_connection_call()` for the asynchronous version of
--- this method.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param bus_name? string # a unique or well-known bus name or `nil` if `connection` is not a message bus connection
---@param object_path string # path of remote object
---@param interface_name string # D-Bus interface to invoke method on
---@param method_name string # the name of the method to invoke
---@param parameters? GLib.Variant # a `GVariant` tuple with parameters for the method or `nil` if not passing parameters
---@param reply_type? GLib.VariantType # the expected type of the reply, or `nil`
---@param flags Gio.DBusCallFlags # flags from the `GDBusCallFlags` enumeration
---@param timeout_msec integer # the timeout in milliseconds, -1 to use the default timeout or %G_MAXINT for no timeout
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@return GLib.Variant # `nil` if `error` is set. Otherwise a non-floating `GVariant` tuple with return values. Free with `g_variant_unref()`.
function Gio.DBusConnection:call_sync(bus_name, object_path, interface_name, method_name, parameters, reply_type, flags, timeout_msec, cancellable) end

--- # method Gio.DBusConnection:call_with_unix_fd_list()
---
--- Like `g_dbus_connection_call()` but also takes a `GUnixFDList` object.
--- 
--- The file descriptors normally correspond to %G_VARIANT_TYPE_HANDLE
--- values in the body of the message. For example, if a message contains
--- two file descriptors, `fd_list` would have length 2, and
--- `g_variant_new_handle (0)` and `g_variant_new_handle (1)` would appear
--- somewhere in the body of the message (not necessarily in that order!)
--- to represent the file descriptors at indexes 0 and 1 respectively.
--- 
--- When designing D-Bus APIs that are intended to be interoperable,
--- please note that non-GDBus implementations of D-Bus can usually only
--- access file descriptors if they are referenced in this way by a
--- value of type %G_VARIANT_TYPE_HANDLE in the body of the message.
--- 
--- This method is only available on UNIX.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param bus_name? string # a unique or well-known bus name or `nil` if `connection` is not a message bus connection
---@param object_path string # path of remote object
---@param interface_name string # D-Bus interface to invoke method on
---@param method_name string # the name of the method to invoke
---@param parameters? GLib.Variant # a `GVariant` tuple with parameters for the method or `nil` if not passing parameters
---@param reply_type? GLib.VariantType # the expected type of the reply, or `nil`
---@param flags Gio.DBusCallFlags # flags from the `GDBusCallFlags` enumeration
---@param timeout_msec integer # the timeout in milliseconds, -1 to use the default timeout or %G_MAXINT for no timeout
---@param fd_list? Gio.UnixFDList # a `GUnixFDList` or `nil`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied or `nil` if you don't * care about the result of the method invocation
---@param user_data? userdata # The data to pass to `callback`.
---@return nil
function Gio.DBusConnection:call_with_unix_fd_list(bus_name, object_path, interface_name, method_name, parameters, reply_type, flags, timeout_msec, fd_list, cancellable, callback, user_data) end

--- # method Gio.DBusConnection:call_with_unix_fd_list_finish()
---
--- Finishes an operation started with `g_dbus_connection_call_with_unix_fd_list()`.
--- 
--- The file descriptors normally correspond to %G_VARIANT_TYPE_HANDLE
--- values in the body of the message. For example,
--- if `g_variant_get_handle()` returns 5, that is intended to be a reference
--- to the file descriptor that can be accessed by
--- `g_unix_fd_list_get (*out_fd_list, 5, ...)`.
--- 
--- When designing D-Bus APIs that are intended to be interoperable,
--- please note that non-GDBus implementations of D-Bus can usually only
--- access file descriptors if they are referenced in this way by a
--- value of type %G_VARIANT_TYPE_HANDLE in the body of the message.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param out_fd_list? Gio.UnixFDList # return location for a `GUnixFDList` or `nil`
---@param res Gio.AsyncResult # a `GAsyncResult` obtained from the `GAsyncReadyCallback` passed to `g_dbus_connection_call_with_unix_fd_list()`
---@return GLib.Variant # `nil` if `error` is set. Otherwise a non-floating `GVariant` tuple with return values. Free with `g_variant_unref()`.
function Gio.DBusConnection:call_with_unix_fd_list_finish(out_fd_list, res) end

--- # method Gio.DBusConnection:call_with_unix_fd_list_sync()
---
--- Like `g_dbus_connection_call_sync()` but also takes and returns `GUnixFDList` objects.
--- See `g_dbus_connection_call_with_unix_fd_list()` and
--- `g_dbus_connection_call_with_unix_fd_list_finish()` for more details.
--- 
--- This method is only available on UNIX.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param bus_name? string # a unique or well-known bus name or `nil` if `connection` is not a message bus connection
---@param object_path string # path of remote object
---@param interface_name string # D-Bus interface to invoke method on
---@param method_name string # the name of the method to invoke
---@param parameters? GLib.Variant # a `GVariant` tuple with parameters for the method or `nil` if not passing parameters
---@param reply_type? GLib.VariantType # the expected type of the reply, or `nil`
---@param flags Gio.DBusCallFlags # flags from the `GDBusCallFlags` enumeration
---@param timeout_msec integer # the timeout in milliseconds, -1 to use the default timeout or %G_MAXINT for no timeout
---@param fd_list? Gio.UnixFDList # a `GUnixFDList` or `nil`
---@param out_fd_list? Gio.UnixFDList # return location for a `GUnixFDList` or `nil`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@return GLib.Variant # `nil` if `error` is set. Otherwise a non-floating `GVariant` tuple with return values. Free with `g_variant_unref()`.
function Gio.DBusConnection:call_with_unix_fd_list_sync(bus_name, object_path, interface_name, method_name, parameters, reply_type, flags, timeout_msec, fd_list, out_fd_list, cancellable) end

--- # method Gio.DBusConnection:close()
---
--- Closes `connection`. Note that this never causes the process to
--- exit (this might only happen if the other end of a shared message
--- bus connection disconnects, see `GDBusConnection`:exit-on-close).
--- 
--- Once the connection is closed, operations such as sending a message
--- will return with the error %G_IO_ERROR_CLOSED. Closing a connection
--- will not automatically flush the connection so queued messages may
--- be lost. Use `g_dbus_connection_flush()` if you need such guarantees.
--- 
--- If `connection` is already closed, this method fails with
--- %G_IO_ERROR_CLOSED.
--- 
--- When `connection` has been closed, the `GDBusConnection`::closed
--- signal is emitted in the
--- [thread-default main context][g-main-context-push-thread-default]
--- of the thread that `connection` was constructed in.
--- 
--- This is an asynchronous method. When the operation is finished,
--- `callback` will be invoked in the
--- [thread-default main context][g-main-context-push-thread-default]
--- of the thread you are calling this method from. You can
--- then call `g_dbus_connection_close_finish()` to get the result of the
--- operation. See `g_dbus_connection_close_sync()` for the synchronous
--- version.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied or `nil` if you don't care about the result
---@param user_data? userdata # The data to pass to `callback`
---@return nil
function Gio.DBusConnection:close(cancellable, callback, user_data) end

--- # method Gio.DBusConnection:close_finish()
---
--- Finishes an operation started with `g_dbus_connection_close()`.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param res Gio.AsyncResult # a `GAsyncResult` obtained from the `GAsyncReadyCallback` passed to `g_dbus_connection_close()`
---@return (boolean|nil) # `true` if the operation succeeded, `false` if `error` is set
function Gio.DBusConnection:close_finish(res) end

--- # method Gio.DBusConnection:close_sync()
---
--- Synchronously closes `connection`. The calling thread is blocked
--- until this is done. See `g_dbus_connection_close()` for the
--- asynchronous version of this method and more details about what it
--- does.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@return (boolean|nil) # `true` if the operation succeeded, `false` if `error` is set
function Gio.DBusConnection:close_sync(cancellable) end

--- # method Gio.DBusConnection:emit_signal()
---
--- Emits a signal.
--- 
--- If the parameters GVariant is floating, it is consumed.
--- 
--- This can only fail if `parameters` is not compatible with the D-Bus protocol
--- (%G_IO_ERROR_INVALID_ARGUMENT), or if `connection` has been closed
--- (%G_IO_ERROR_CLOSED).
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param destination_bus_name? string # the unique bus name for the destination for the signal or `nil` to emit to all listeners
---@param object_path string # path of remote object
---@param interface_name string # D-Bus interface to emit a signal on
---@param signal_name string # the name of the signal to emit
---@param parameters? GLib.Variant # a `GVariant` tuple with parameters for the signal or `nil` if not passing parameters
---@return (boolean|nil) # `true` unless `error` is set
function Gio.DBusConnection:emit_signal(destination_bus_name, object_path, interface_name, signal_name, parameters) end

--- # method Gio.DBusConnection:export_action_group()
---
--- Exports `action_group` on `connection` at `object_path`.
--- 
--- The implemented D-Bus API should be considered private.  It is
--- subject to change in the future.
--- 
--- A given object path can only have one action group exported on it.
--- If this constraint is violated, the export will fail and 0 will be
--- returned (with `error` set accordingly).
--- 
--- You can unexport the action group using
--- `g_dbus_connection_unexport_action_group()` with the return value of
--- this function.
--- 
--- The thread default main context is taken at the time of this call.
--- All incoming action activations and state change requests are
--- reported from this context.  Any changes on the action group that
--- cause it to emit signals must also come from this same context.
--- Since incoming action activations and state change requests are
--- rather likely to cause changes on the action group, this effectively
--- limits a given action group to being exported from only one main
--- context.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param object_path string # a D-Bus object path
---@param action_group Gio.ActionGroup # a `GActionGroup`
---@return integer # the ID of the export (never zero), or 0 in case of failure
function Gio.DBusConnection:export_action_group(object_path, action_group) end

--- # method Gio.DBusConnection:export_menu_model()
---
--- Exports `menu` on `connection` at `object_path`.
--- 
--- The implemented D-Bus API should be considered private.
--- It is subject to change in the future.
--- 
--- An object path can only have one menu model exported on it. If this
--- constraint is violated, the export will fail and 0 will be
--- returned (with `error` set accordingly).
--- 
--- Exporting menus with sections containing more than
--- %G_MENU_EXPORTER_MAX_SECTION_SIZE items is not supported and results in
--- undefined behavior.
--- 
--- You can unexport the menu model using
--- `g_dbus_connection_unexport_menu_model()` with the return value of
--- this function.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param object_path string # a D-Bus object path
---@param menu Gio.MenuModel # a `GMenuModel`
---@return integer # the ID of the export (never zero), or 0 in case of failure
function Gio.DBusConnection:export_menu_model(object_path, menu) end

--- # method Gio.DBusConnection:flush()
---
--- Asynchronously flushes `connection`, that is, writes all queued
--- outgoing message to the transport and then flushes the transport
--- (using `g_output_stream_flush_async()`). This is useful in programs
--- that wants to emit a D-Bus signal and then exit immediately. Without
--- flushing the connection, there is no guaranteed that the message has
--- been sent to the networking buffers in the OS kernel.
--- 
--- This is an asynchronous method. When the operation is finished,
--- `callback` will be invoked in the
--- [thread-default main context][g-main-context-push-thread-default]
--- of the thread you are calling this method from. You can
--- then call `g_dbus_connection_flush_finish()` to get the result of the
--- operation. See `g_dbus_connection_flush_sync()` for the synchronous
--- version.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied or `nil` if you don't care about the result
---@param user_data? userdata # The data to pass to `callback`
---@return nil
function Gio.DBusConnection:flush(cancellable, callback, user_data) end

--- # method Gio.DBusConnection:flush_finish()
---
--- Finishes an operation started with `g_dbus_connection_flush()`.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param res Gio.AsyncResult # a `GAsyncResult` obtained from the `GAsyncReadyCallback` passed to `g_dbus_connection_flush()`
---@return (boolean|nil) # `true` if the operation succeeded, `false` if `error` is set
function Gio.DBusConnection:flush_finish(res) end

--- # method Gio.DBusConnection:flush_sync()
---
--- Synchronously flushes `connection`. The calling thread is blocked
--- until this is done. See `g_dbus_connection_flush()` for the
--- asynchronous version of this method and more details about what it
--- does.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@return (boolean|nil) # `true` if the operation succeeded, `false` if `error` is set
function Gio.DBusConnection:flush_sync(cancellable) end

--- # method Gio.DBusConnection:get_capabilities()
---
--- Gets the capabilities negotiated with the remote peer
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@return Gio.DBusCapabilityFlags # zero or more flags from the `GDBusCapabilityFlags` enumeration
function Gio.DBusConnection:get_capabilities() end

--- # method Gio.DBusConnection:get_exit_on_close()
---
--- Gets whether the process is terminated when `connection` is
--- closed by the remote peer. See
--- `GDBusConnection`:exit-on-close for more details.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@return (boolean|nil) # whether the process is terminated when `connection` is closed by the remote peer
function Gio.DBusConnection:get_exit_on_close() end

--- # method Gio.DBusConnection:get_flags()
---
--- Gets the flags used to construct this connection
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@return Gio.DBusConnectionFlags # zero or more flags from the `GDBusConnectionFlags` enumeration
function Gio.DBusConnection:get_flags() end

--- # method Gio.DBusConnection:get_guid()
---
--- The GUID of the peer performing the role of server when
--- authenticating. See `GDBusConnection`:guid for more details.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@return string # The GUID. Do not free this string, it is owned by `connection`.
function Gio.DBusConnection:get_guid() end

--- # method Gio.DBusConnection:get_last_serial()
---
--- Retrieves the last serial number assigned to a `GDBusMessage` on
--- the current thread. This includes messages sent via both low-level
--- API such as `g_dbus_connection_send_message()` as well as
--- high-level API such as `g_dbus_connection_emit_signal()`,
--- `g_dbus_connection_call()` or `g_dbus_proxy_call()`.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@return integer # the last used serial or zero when no message has been sent within the current thread
function Gio.DBusConnection:get_last_serial() end

--- # method Gio.DBusConnection:get_peer_credentials()
---
--- Gets the credentials of the authenticated peer. This will always
--- return `nil` unless `connection` acted as a server
--- (e.g. %G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER was passed)
--- when set up and the client passed credentials as part of the
--- authentication process.
--- 
--- In a message bus setup, the message bus is always the server and
--- each application is a client. So this method will always return
--- `nil` for message bus clients.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@return Gio.Credentials # a `GCredentials` or `nil` if not available. Do not free this object, it is owned by `connection`.
function Gio.DBusConnection:get_peer_credentials() end

--- # method Gio.DBusConnection:get_stream()
---
--- Gets the underlying stream used for IO.
--- 
--- While the `GDBusConnection` is active, it will interact with this
--- stream from a worker thread, so it is not safe to interact with
--- the stream directly.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@return Gio.IOStream # the stream used for IO
function Gio.DBusConnection:get_stream() end

--- # method Gio.DBusConnection:get_unique_name()
---
--- Gets the unique name of `connection` as assigned by the message
--- bus. This can also be used to figure out if `connection` is a
--- message bus connection.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@return string # the unique name or `nil` if `connection` is not a message bus connection. Do not free this string, it is owned by `connection`.
function Gio.DBusConnection:get_unique_name() end

--- # method Gio.DBusConnection:is_closed()
---
--- Gets whether `connection` is closed.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@return (boolean|nil) # `true` if the connection is closed, `false` otherwise
function Gio.DBusConnection:is_closed() end

--- # method Gio.DBusConnection:register_object()
---
--- Version of `g_dbus_connection_register_object()` using closures instead of a
--- `GDBusInterfaceVTable` for easier binding in other languages.
---
--- ---
---
---@param self Gio.DBusConnection # A `GDBusConnection`.
---@param object_path string # The object path to register at.
---@param interface_info Gio.DBusInterfaceInfo # Introspection data for the interface.
---@param method_call_closure? GObject.Closure # `GClosure` for handling incoming method calls.
---@param get_property_closure? GObject.Closure # `GClosure` for getting a property.
---@param set_property_closure? GObject.Closure # `GClosure` for setting a property.
---@return integer # 0 if `error` is set, otherwise a registration ID (never 0) that can be used with `g_dbus_connection_unregister_object()` .
function Gio.DBusConnection:register_object(object_path, interface_info, method_call_closure, get_property_closure, set_property_closure) end

--- # method Gio.DBusConnection:register_subtree()
---
--- Registers a whole subtree of dynamic objects.
--- 
--- The `enumerate` and `introspection` functions in `vtable` are used to
--- convey, to remote callers, what nodes exist in the subtree rooted
--- by `object_path`.
--- 
--- When handling remote calls into any node in the subtree, first the
--- `enumerate` function is used to check if the node exists. If the node exists
--- or the %G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES flag is set
--- the `introspection` function is used to check if the node supports the
--- requested method. If so, the `dispatch` function is used to determine
--- where to dispatch the call. The collected `GDBusInterfaceVTable` and
--- `gpointer` will be used to call into the interface vtable for processing
--- the request.
--- 
--- All calls into user-provided code will be invoked in the
--- [thread-default main context][g-main-context-push-thread-default]
--- of the thread you are calling this method from.
--- 
--- If an existing subtree is already registered at `object_path` or
--- then `error` is set to %G_IO_ERROR_EXISTS.
--- 
--- Note that it is valid to register regular objects (using
--- `g_dbus_connection_register_object()`) in a subtree registered with
--- `g_dbus_connection_register_subtree()` - if so, the subtree handler
--- is tried as the last resort. One way to think about a subtree
--- handler is to consider it a fallback handler for object paths not
--- registered via `g_dbus_connection_register_object()` or other bindings.
--- 
--- Note that `vtable` will be copied so you cannot change it after
--- registration.
--- 
--- See this [server][gdbus-subtree-server] for an example of how to use
--- this method.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param object_path string # the object path to register the subtree at
---@param vtable Gio.DBusSubtreeVTable # a `GDBusSubtreeVTable` to enumerate, introspect and dispatch nodes in the subtree
---@param flags Gio.DBusSubtreeFlags # flags used to fine tune the behavior of the subtree
---@param user_data? userdata # data to pass to functions in `vtable`
---@param user_data_free_func GLib.DestroyNotify # function to call when the subtree is unregistered
---@return integer # 0 if `error` is set, otherwise a subtree registration ID (never 0) that can be used with `g_dbus_connection_unregister_subtree()`
function Gio.DBusConnection:register_subtree(object_path, vtable, flags, user_data, user_data_free_func) end

--- # method Gio.DBusConnection:remove_filter()
---
--- Removes a filter.
--- 
--- Note that since filters run in a different thread, there is a race
--- condition where it is possible that the filter will be running even
--- after calling `g_dbus_connection_remove_filter()`, so you cannot just
--- free data that the filter might be using. Instead, you should pass
--- a `GDestroyNotify` to `g_dbus_connection_add_filter()`, which will be
--- called when it is guaranteed that the data is no longer needed.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param filter_id integer # an identifier obtained from `g_dbus_connection_add_filter()`
---@return nil
function Gio.DBusConnection:remove_filter(filter_id) end

--- # method Gio.DBusConnection:send_message()
---
--- Asynchronously sends `message` to the peer represented by `connection`.
--- 
--- Unless `flags` contain the
--- %G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag, the serial number
--- will be assigned by `connection` and set on `message` via
--- `g_dbus_message_set_serial()`. If `out_serial` is not `nil`, then the
--- serial number used will be written to this location prior to
--- submitting the message to the underlying transport. While it has a `volatile`
--- qualifier, this is a historical artifact and the argument passed to it should
--- not be `volatile`.
--- 
--- If `connection` is closed then the operation will fail with
--- %G_IO_ERROR_CLOSED. If `message` is not well-formed,
--- the operation fails with %G_IO_ERROR_INVALID_ARGUMENT.
--- 
--- See this [server][gdbus-server] and [client][gdbus-unix-fd-client]
--- for an example of how to use this low-level API to send and receive
--- UNIX file descriptors.
--- 
--- Note that `message` must be unlocked, unless `flags` contain the
--- %G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param message Gio.DBusMessage # a `GDBusMessage`
---@param flags Gio.DBusSendMessageFlags # flags affecting how the message is sent
---@param out_serial? integer # return location for serial number assigned to `message` when sending it or `nil`
---@return (boolean|nil) # `true` if the message was well-formed and queued for transmission, `false` if `error` is set
function Gio.DBusConnection:send_message(message, flags, out_serial) end

--- # method Gio.DBusConnection:send_message_with_reply()
---
--- Asynchronously sends `message` to the peer represented by `connection`.
--- 
--- Unless `flags` contain the
--- %G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag, the serial number
--- will be assigned by `connection` and set on `message` via
--- `g_dbus_message_set_serial()`. If `out_serial` is not `nil`, then the
--- serial number used will be written to this location prior to
--- submitting the message to the underlying transport. While it has a `volatile`
--- qualifier, this is a historical artifact and the argument passed to it should
--- not be `volatile`.
--- 
--- If `connection` is closed then the operation will fail with
--- %G_IO_ERROR_CLOSED. If `cancellable` is canceled, the operation will
--- fail with %G_IO_ERROR_CANCELLED. If `message` is not well-formed,
--- the operation fails with %G_IO_ERROR_INVALID_ARGUMENT.
--- 
--- This is an asynchronous method. When the operation is finished, `callback`
--- will be invoked in the
--- [thread-default main context][g-main-context-push-thread-default]
--- of the thread you are calling this method from. You can then call
--- `g_dbus_connection_send_message_with_reply_finish()` to get the result of the operation.
--- See `g_dbus_connection_send_message_with_reply_sync()` for the synchronous version.
--- 
--- Note that `message` must be unlocked, unless `flags` contain the
--- %G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag.
--- 
--- See this [server][gdbus-server] and [client][gdbus-unix-fd-client]
--- for an example of how to use this low-level API to send and receive
--- UNIX file descriptors.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param message Gio.DBusMessage # a `GDBusMessage`
---@param flags Gio.DBusSendMessageFlags # flags affecting how the message is sent
---@param timeout_msec integer # the timeout in milliseconds, -1 to use the default timeout or %G_MAXINT for no timeout
---@param out_serial? integer # return location for serial number assigned to `message` when sending it or `nil`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied or `nil` if you don't care about the result
---@param user_data? userdata # The data to pass to `callback`
---@return nil
function Gio.DBusConnection:send_message_with_reply(message, flags, timeout_msec, out_serial, cancellable, callback, user_data) end

--- # method Gio.DBusConnection:send_message_with_reply_finish()
---
--- Finishes an operation started with `g_dbus_connection_send_message_with_reply()`.
--- 
--- Note that `error` is only set if a local in-process error
--- occurred. That is to say that the returned `GDBusMessage` object may
--- be of type %G_DBUS_MESSAGE_TYPE_ERROR. Use
--- `g_dbus_message_to_gerror()` to transcode this to a `GError`.
--- 
--- See this [server][gdbus-server] and [client][gdbus-unix-fd-client]
--- for an example of how to use this low-level API to send and receive
--- UNIX file descriptors.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param res Gio.AsyncResult # a `GAsyncResult` obtained from the `GAsyncReadyCallback` passed to `g_dbus_connection_send_message_with_reply()`
---@return Gio.DBusMessage # a locked `GDBusMessage` or `nil` if `error` is set
function Gio.DBusConnection:send_message_with_reply_finish(res) end

--- # method Gio.DBusConnection:send_message_with_reply_sync()
---
--- Synchronously sends `message` to the peer represented by `connection`
--- and blocks the calling thread until a reply is received or the
--- timeout is reached. See `g_dbus_connection_send_message_with_reply()`
--- for the asynchronous version of this method.
--- 
--- Unless `flags` contain the
--- %G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag, the serial number
--- will be assigned by `connection` and set on `message` via
--- `g_dbus_message_set_serial()`. If `out_serial` is not `nil`, then the
--- serial number used will be written to this location prior to
--- submitting the message to the underlying transport. While it has a `volatile`
--- qualifier, this is a historical artifact and the argument passed to it should
--- not be `volatile`.
--- 
--- If `connection` is closed then the operation will fail with
--- %G_IO_ERROR_CLOSED. If `cancellable` is canceled, the operation will
--- fail with %G_IO_ERROR_CANCELLED. If `message` is not well-formed,
--- the operation fails with %G_IO_ERROR_INVALID_ARGUMENT.
--- 
--- Note that `error` is only set if a local in-process error
--- occurred. That is to say that the returned `GDBusMessage` object may
--- be of type %G_DBUS_MESSAGE_TYPE_ERROR. Use
--- `g_dbus_message_to_gerror()` to transcode this to a `GError`.
--- 
--- See this [server][gdbus-server] and [client][gdbus-unix-fd-client]
--- for an example of how to use this low-level API to send and receive
--- UNIX file descriptors.
--- 
--- Note that `message` must be unlocked, unless `flags` contain the
--- %G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param message Gio.DBusMessage # a `GDBusMessage`
---@param flags Gio.DBusSendMessageFlags # flags affecting how the message is sent.
---@param timeout_msec integer # the timeout in milliseconds, -1 to use the default timeout or %G_MAXINT for no timeout
---@param out_serial? integer # return location for serial number assigned to `message` when sending it or `nil`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@return Gio.DBusMessage # a locked `GDBusMessage` that is the reply to `message` or `nil` if `error` is set
function Gio.DBusConnection:send_message_with_reply_sync(message, flags, timeout_msec, out_serial, cancellable) end

--- # method Gio.DBusConnection:set_exit_on_close()
---
--- Sets whether the process should be terminated when `connection` is
--- closed by the remote peer. See `GDBusConnection`:exit-on-close for
--- more details.
--- 
--- Note that this function should be used with care. Most modern UNIX
--- desktops tie the notion of a user session with the session bus, and expect
--- all of a user's applications to quit when their bus connection goes away.
--- If you are setting `exit_on_close` to `false` for the shared session
--- bus connection, you should make sure that your application exits
--- when the user session ends.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param exit_on_close (boolean|nil) # whether the process should be terminated when `connection` is closed by the remote peer
---@return nil
function Gio.DBusConnection:set_exit_on_close(exit_on_close) end

--- # method Gio.DBusConnection:signal_subscribe()
---
--- Subscribes to signals on `connection` and invokes `callback` whenever
--- the signal is received. Note that `callback` will be invoked in the
--- [thread-default main context][g-main-context-push-thread-default]
--- of the thread you are calling this method from.
--- 
--- If `connection` is not a message bus connection, `sender` must be
--- `nil`.
--- 
--- If `sender` is a well-known name note that `callback` is invoked with
--- the unique name for the owner of `sender`, not the well-known name
--- as one would expect. This is because the message bus rewrites the
--- name. As such, to avoid certain race conditions, users should be
--- tracking the name owner of the well-known name and use that when
--- processing the received signal.
--- 
--- If one of %G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE or
--- %G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH are given, `arg0` is
--- interpreted as part of a namespace or path.  The first argument
--- of a signal is matched against that part as specified by D-Bus.
--- 
--- If `user_data_free_func` is non-`nil`, it will be called (in the
--- thread-default main context of the thread you are calling this
--- method from) at some point after `user_data` is no longer
--- needed. (It is not guaranteed to be called synchronously when the
--- signal is unsubscribed from, and may be called after `connection`
--- has been destroyed.)
--- 
--- As `callback` is potentially invoked in a different thread from where it’s
--- emitted, it’s possible for this to happen after
--- `g_dbus_connection_signal_unsubscribe()` has been called in another thread.
--- Due to this, `user_data` should have a strong reference which is freed with
--- `user_data_free_func`, rather than pointing to data whose lifecycle is tied
--- to the signal subscription. For example, if a `GObject` is used to store the
--- subscription ID from `g_dbus_connection_signal_subscribe()`, a strong reference
--- to that `GObject` must be passed to `user_data`, and `g_object_unref()` passed to
--- `user_data_free_func`. You are responsible for breaking the resulting
--- reference count cycle by explicitly unsubscribing from the signal when
--- dropping the last external reference to the `GObject`. Alternatively, a weak
--- reference may be used.
--- 
--- It is guaranteed that if you unsubscribe from a signal using
--- `g_dbus_connection_signal_unsubscribe()` from the same thread which made the
--- corresponding `g_dbus_connection_signal_subscribe()` call, `callback` will not
--- be invoked after `g_dbus_connection_signal_unsubscribe()` returns.
--- 
--- The returned subscription identifier is an opaque value which is guaranteed
--- to never be zero.
--- 
--- This function can never fail.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param sender? string # sender name to match on (unique or well-known name) or `nil` to listen from all senders
---@param interface_name? string # D-Bus interface name to match on or `nil` to match on all interfaces
---@param member? string # D-Bus signal name to match on or `nil` to match on all signals
---@param object_path? string # object path to match on or `nil` to match on all object paths
---@param arg0? string # contents of first string argument to match on or `nil` to match on all kinds of arguments
---@param flags Gio.DBusSignalFlags # `GDBusSignalFlags` describing how arg0 is used in subscribing to the signal
---@param callback Gio.DBusSignalCallback # callback to invoke when there is a signal matching the requested data
---@param user_data? userdata # user data to pass to `callback`
---@param user_data_free_func? GLib.DestroyNotify # function to free `user_data` with when subscription is removed or `nil`
---@return integer # a subscription identifier that can be used with `g_dbus_connection_signal_unsubscribe()`
function Gio.DBusConnection:signal_subscribe(sender, interface_name, member, object_path, arg0, flags, callback, user_data, user_data_free_func) end

--- # method Gio.DBusConnection:signal_unsubscribe()
---
--- Unsubscribes from signals.
--- 
--- Note that there may still be D-Bus traffic to process (relating to this
--- signal subscription) in the current thread-default `GMainContext` after this
--- function has returned. You should continue to iterate the `GMainContext`
--- until the `GDestroyNotify` function passed to
--- `g_dbus_connection_signal_subscribe()` is called, in order to avoid memory
--- leaks through callbacks queued on the `GMainContext` after it’s stopped being
--- iterated.
--- Alternatively, any idle source with a priority lower than %G_PRIORITY_DEFAULT
--- that was scheduled after unsubscription, also indicates that all resources
--- of this subscription are released.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param subscription_id integer # a subscription id obtained from `g_dbus_connection_signal_subscribe()`
---@return nil
function Gio.DBusConnection:signal_unsubscribe(subscription_id) end

--- # method Gio.DBusConnection:start_message_processing()
---
--- If `connection` was created with
--- %G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING, this method
--- starts processing messages. Does nothing on if `connection` wasn't
--- created with this flag or if the method has already been called.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@return nil
function Gio.DBusConnection:start_message_processing() end

--- # method Gio.DBusConnection:unexport_action_group()
---
--- Reverses the effect of a previous call to
--- `g_dbus_connection_export_action_group()`.
--- 
--- It is an error to call this function with an ID that wasn't returned
--- from `g_dbus_connection_export_action_group()` or to call it with the
--- same ID more than once.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param export_id integer # the ID from `g_dbus_connection_export_action_group()`
---@return nil
function Gio.DBusConnection:unexport_action_group(export_id) end

--- # method Gio.DBusConnection:unexport_menu_model()
---
--- Reverses the effect of a previous call to
--- `g_dbus_connection_export_menu_model()`.
--- 
--- It is an error to call this function with an ID that wasn't returned
--- from `g_dbus_connection_export_menu_model()` or to call it with the
--- same ID more than once.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param export_id integer # the ID from `g_dbus_connection_export_menu_model()`
---@return nil
function Gio.DBusConnection:unexport_menu_model(export_id) end

--- # method Gio.DBusConnection:unregister_object()
---
--- Unregisters an object.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param registration_id integer # a registration id obtained from `g_dbus_connection_register_object()`
---@return (boolean|nil) # `true` if the object was unregistered, `false` otherwise
function Gio.DBusConnection:unregister_object(registration_id) end

--- # method Gio.DBusConnection:unregister_subtree()
---
--- Unregisters a subtree.
---
--- ---
---
---@param self Gio.DBusConnection # a `GDBusConnection`
---@param registration_id integer # a subtree registration id obtained from `g_dbus_connection_register_subtree()`
---@return (boolean|nil) # `true` if the subtree was unregistered, `false` otherwise
function Gio.DBusConnection:unregister_subtree(registration_id) end

--- # function Gio.DBusConnection.new()
---
--- Asynchronously sets up a D-Bus connection for exchanging D-Bus messages
--- with the end represented by `stream`.
--- 
--- If `stream` is a `GSocketConnection`, then the corresponding `GSocket`
--- will be put into non-blocking mode.
--- 
--- The D-Bus connection will interact with `stream` from a worker thread.
--- As a result, the caller should not interact with `stream` after this
--- method has been called, except by calling `g_object_unref()` on it.
--- 
--- If `observer` is not `nil` it may be used to control the
--- authentication process.
--- 
--- When the operation is finished, `callback` will be invoked. You can
--- then call `g_dbus_connection_new_finish()` to get the result of the
--- operation.
--- 
--- This is an asynchronous failable constructor. See
--- `g_dbus_connection_new_sync()` for the synchronous
--- version.
---
--- ---
---
---@param stream Gio.IOStream # a `GIOStream`
---@param guid? string # the GUID to use if authenticating as a server or `nil`
---@param flags Gio.DBusConnectionFlags # flags describing how to make the connection
---@param observer? Gio.DBusAuthObserver # a `GDBusAuthObserver` or `nil`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to `callback`
---@return nil
function Gio.DBusConnection.new(stream, guid, flags, observer, cancellable, callback, user_data) end

--- # function Gio.DBusConnection.new_for_address()
---
--- Asynchronously connects and sets up a D-Bus client connection for
--- exchanging D-Bus messages with an endpoint specified by `address`
--- which must be in the
--- [D-Bus address format](https://dbus.freedesktop.org/doc/dbus-specification.html`addresses`).
--- 
--- This constructor can only be used to initiate client-side
--- connections - use `g_dbus_connection_new()` if you need to act as the
--- server. In particular, `flags` cannot contain the
--- %G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER,
--- %G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS or
--- %G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER flags.
--- 
--- When the operation is finished, `callback` will be invoked. You can
--- then call `g_dbus_connection_new_for_address_finish()` to get the result of
--- the operation.
--- 
--- If `observer` is not `nil` it may be used to control the
--- authentication process.
--- 
--- This is an asynchronous failable constructor. See
--- `g_dbus_connection_new_for_address_sync()` for the synchronous
--- version.
---
--- ---
---
---@param address string # a D-Bus address
---@param flags Gio.DBusConnectionFlags # flags describing how to make the connection
---@param observer? Gio.DBusAuthObserver # a `GDBusAuthObserver` or `nil`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to `callback`
---@return nil
function Gio.DBusConnection.new_for_address(address, flags, observer, cancellable, callback, user_data) end

--- # function Gio.DBusConnection.new_finish()
---
--- Finishes an operation started with `g_dbus_connection_new()`.
---
--- ---
---
---@param res Gio.AsyncResult # a `GAsyncResult` obtained from the `GAsyncReadyCallback` passed to `g_dbus_connection_new()`.
---@return Gio.DBusConnection # a `GDBusConnection` or `nil` if `error` is set. Free with `g_object_unref()`.
function Gio.DBusConnection.new_finish(res) end

--- # function Gio.DBusConnection.new_for_address_finish()
---
--- Finishes an operation started with `g_dbus_connection_new_for_address()`.
---
--- ---
---
---@param res Gio.AsyncResult # a `GAsyncResult` obtained from the `GAsyncReadyCallback` passed to `g_dbus_connection_new()`
---@return Gio.DBusConnection # a `GDBusConnection` or `nil` if `error` is set. Free with `g_object_unref()`.
function Gio.DBusConnection.new_for_address_finish(res) end

--- # function Gio.DBusConnection.new_for_address_sync()
---
--- Synchronously connects and sets up a D-Bus client connection for
--- exchanging D-Bus messages with an endpoint specified by `address`
--- which must be in the
--- [D-Bus address format](https://dbus.freedesktop.org/doc/dbus-specification.html`addresses`).
--- 
--- This constructor can only be used to initiate client-side
--- connections - use `g_dbus_connection_new_sync()` if you need to act
--- as the server. In particular, `flags` cannot contain the
--- %G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER,
--- %G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS or
--- %G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER flags.
--- 
--- This is a synchronous failable constructor. See
--- `g_dbus_connection_new_for_address()` for the asynchronous version.
--- 
--- If `observer` is not `nil` it may be used to control the
--- authentication process.
---
--- ---
---
---@param address string # a D-Bus address
---@param flags Gio.DBusConnectionFlags # flags describing how to make the connection
---@param observer? Gio.DBusAuthObserver # a `GDBusAuthObserver` or `nil`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@return Gio.DBusConnection # a `GDBusConnection` or `nil` if `error` is set. Free with `g_object_unref()`.
function Gio.DBusConnection.new_for_address_sync(address, flags, observer, cancellable) end

--- # function Gio.DBusConnection.new_sync()
---
--- Synchronously sets up a D-Bus connection for exchanging D-Bus messages
--- with the end represented by `stream`.
--- 
--- If `stream` is a `GSocketConnection`, then the corresponding `GSocket`
--- will be put into non-blocking mode.
--- 
--- The D-Bus connection will interact with `stream` from a worker thread.
--- As a result, the caller should not interact with `stream` after this
--- method has been called, except by calling `g_object_unref()` on it.
--- 
--- If `observer` is not `nil` it may be used to control the
--- authentication process.
--- 
--- This is a synchronous failable constructor. See
--- `g_dbus_connection_new()` for the asynchronous version.
---
--- ---
---
---@param stream Gio.IOStream # a `GIOStream`
---@param guid? string # the GUID to use if authenticating as a server or `nil`
---@param flags Gio.DBusConnectionFlags # flags describing how to make the connection
---@param observer? Gio.DBusAuthObserver # a `GDBusAuthObserver` or `nil`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@return Gio.DBusConnection # a `GDBusConnection` or `nil` if `error` is set. Free with `g_object_unref()`.
function Gio.DBusConnection.new_sync(stream, guid, flags, observer, cancellable) end

---@enum Gio.DBusConnectionFlags
Gio.DBusConnectionFlags = {}

---@enum Gio.DBusError
Gio.DBusError = {}

--- # record Gio.DBusErrorEntry
---
--- Struct used in `g_dbus_error_register_error_domain()`.
---
--- ---
---
---@class Gio.DBusErrorEntry
---@field error_code integer # An error code.
---@field dbus_error_name string # The D-Bus error name to associate with `error_code`.
Gio.DBusErrorEntry = {}

--- # interface Gio.DBusInterface
---
--- The `GDBusInterface` type is the base type for D-Bus interfaces both
--- on the service side (see `GDBusInterfaceSkeleton`) and client side
--- (see `GDBusProxy`).
---
--- ---
---
---@class Gio.DBusInterface
Gio.DBusInterface = {}

--- # method Gio.DBusInterface:get_object()
---
--- Gets the `GDBusObject` that `interface_` belongs to, if any.
---
--- ---
---
---@param self Gio.DBusInterface # An exported D-Bus interface.
---@return Gio.DBusObject # A `GDBusObject` or `nil`. The returned reference should be freed with `g_object_unref()`.
function Gio.DBusInterface:get_object() end

--- # method Gio.DBusInterface:get_info()
---
--- Gets D-Bus introspection information for the D-Bus interface
--- implemented by `interface_`.
---
--- ---
---
---@param self Gio.DBusInterface # An exported D-Bus interface.
---@return Gio.DBusInterfaceInfo # A `GDBusInterfaceInfo`. Do not free.
function Gio.DBusInterface:get_info() end

--- # method Gio.DBusInterface:set_object()
---
--- Sets the `GDBusObject` for `interface_` to `object`.
--- 
--- Note that `interface_` will hold a weak reference to `object`.
---
--- ---
---
---@param self Gio.DBusInterface # An exported D-Bus interface.
---@param object? Gio.DBusObject # A `GDBusObject` or `nil`.
---@return nil
function Gio.DBusInterface:set_object(object) end

---@alias Gio.DBusInterfaceGetPropertyFunc fun(connection: Gio.DBusConnection, sender: string, object_path: string, interface_name: string, property_name: string, error: GLib.Error, user_data: userdata): GLib.Variant

--- # record Gio.DBusInterfaceIface
---
--- Base type for D-Bus interfaces.
---
--- ---
---
---@class Gio.DBusInterfaceIface
---@field parent_iface GObject.TypeInterface # The parent interface.
---@field get_info fun(interface_: Gio.DBusInterface): Gio.DBusInterfaceInfo
---@field get_object fun(interface_: Gio.DBusInterface): Gio.DBusObject
---@field set_object fun(interface_: Gio.DBusInterface, object: Gio.DBusObject): nil
---@field dup_object fun(interface_: Gio.DBusInterface): Gio.DBusObject
Gio.DBusInterfaceIface = {}

--- # record Gio.DBusInterfaceInfo
---
--- Information about a D-Bus interface.
---
--- ---
---
---@class Gio.DBusInterfaceInfo
---@field ref_count integer # The reference count or -1 if statically allocated.
---@field name string # The name of the D-Bus interface, e.g. "org.freedesktop.DBus.Properties".
---@field methods unknown[] # A pointer to a `nil`-terminated array of pointers to `GDBusMethodInfo` structures or `nil` if there are no methods.
---@field signals unknown[] # A pointer to a `nil`-terminated array of pointers to `GDBusSignalInfo` structures or `nil` if there are no signals.
---@field properties unknown[] # A pointer to a `nil`-terminated array of pointers to `GDBusPropertyInfo` structures or `nil` if there are no properties.
---@field annotations unknown[] # A pointer to a `nil`-terminated array of pointers to `GDBusAnnotationInfo` structures or `nil` if there are no annotations.
Gio.DBusInterfaceInfo = {}

--- # method Gio.DBusInterfaceInfo:cache_build()
---
--- Builds a lookup-cache to speed up
--- `g_dbus_interface_info_lookup_method()`,
--- `g_dbus_interface_info_lookup_signal()` and
--- `g_dbus_interface_info_lookup_property()`.
--- 
--- If this has already been called with `info`, the existing cache is
--- used and its use count is increased.
--- 
--- Note that `info` cannot be modified until
--- `g_dbus_interface_info_cache_release()` is called.
---
--- ---
---
---@param self Gio.DBusInterfaceInfo # A `GDBusInterfaceInfo`.
---@return nil
function Gio.DBusInterfaceInfo:cache_build() end

--- # method Gio.DBusInterfaceInfo:cache_release()
---
--- Decrements the usage count for the cache for `info` built by
--- `g_dbus_interface_info_cache_build()` (if any) and frees the
--- resources used by the cache if the usage count drops to zero.
---
--- ---
---
---@param self Gio.DBusInterfaceInfo # A GDBusInterfaceInfo
---@return nil
function Gio.DBusInterfaceInfo:cache_release() end

--- # method Gio.DBusInterfaceInfo:generate_xml()
---
--- Appends an XML representation of `info` (and its children) to `string_builder`.
--- 
--- This function is typically used for generating introspection XML
--- documents at run-time for handling the
--- `org.freedesktop.DBus.Introspectable.Introspect`
--- method.
---
--- ---
---
---@param self Gio.DBusInterfaceInfo # A `GDBusNodeInfo`
---@param indent integer # Indentation level.
---@param string_builder GLib.String # A `GString` to to append XML data to.
---@return nil
function Gio.DBusInterfaceInfo:generate_xml(indent, string_builder) end

--- # method Gio.DBusInterfaceInfo:lookup_method()
---
--- Looks up information about a method.
--- 
--- The cost of this function is O(n) in number of methods unless
--- `g_dbus_interface_info_cache_build()` has been used on `info`.
---
--- ---
---
---@param self Gio.DBusInterfaceInfo # A `GDBusInterfaceInfo`.
---@param name string # A D-Bus method name (typically in CamelCase)
---@return Gio.DBusMethodInfo # A `GDBusMethodInfo` or `nil` if not found. Do not free, it is owned by `info`.
function Gio.DBusInterfaceInfo:lookup_method(name) end

--- # method Gio.DBusInterfaceInfo:lookup_property()
---
--- Looks up information about a property.
--- 
--- The cost of this function is O(n) in number of properties unless
--- `g_dbus_interface_info_cache_build()` has been used on `info`.
---
--- ---
---
---@param self Gio.DBusInterfaceInfo # A `GDBusInterfaceInfo`.
---@param name string # A D-Bus property name (typically in CamelCase).
---@return Gio.DBusPropertyInfo # A `GDBusPropertyInfo` or `nil` if not found. Do not free, it is owned by `info`.
function Gio.DBusInterfaceInfo:lookup_property(name) end

--- # method Gio.DBusInterfaceInfo:lookup_signal()
---
--- Looks up information about a signal.
--- 
--- The cost of this function is O(n) in number of signals unless
--- `g_dbus_interface_info_cache_build()` has been used on `info`.
---
--- ---
---
---@param self Gio.DBusInterfaceInfo # A `GDBusInterfaceInfo`.
---@param name string # A D-Bus signal name (typically in CamelCase)
---@return Gio.DBusSignalInfo # A `GDBusSignalInfo` or `nil` if not found. Do not free, it is owned by `info`.
function Gio.DBusInterfaceInfo:lookup_signal(name) end

--- # method Gio.DBusInterfaceInfo:ref()
---
--- If `info` is statically allocated does nothing. Otherwise increases
--- the reference count.
---
--- ---
---
---@param self Gio.DBusInterfaceInfo # A `GDBusInterfaceInfo`
---@return Gio.DBusInterfaceInfo # The same `info`.
function Gio.DBusInterfaceInfo:ref() end

--- # method Gio.DBusInterfaceInfo:unref()
---
--- If `info` is statically allocated, does nothing. Otherwise decreases
--- the reference count of `info`. When its reference count drops to 0,
--- the memory used is freed.
---
--- ---
---
---@param self Gio.DBusInterfaceInfo # A `GDBusInterfaceInfo`.
---@return nil
function Gio.DBusInterfaceInfo:unref() end

---@alias Gio.DBusInterfaceMethodCallFunc fun(connection: Gio.DBusConnection, sender: string, object_path: string, interface_name: string, method_name: string, parameters: GLib.Variant, invocation: Gio.DBusMethodInvocation, user_data: userdata): nil

---@alias Gio.DBusInterfaceSetPropertyFunc fun(connection: Gio.DBusConnection, sender: string, object_path: string, interface_name: string, property_name: string, value: GLib.Variant, error: GLib.Error, user_data: userdata): (boolean|nil)

--- # class Gio.DBusInterfaceSkeleton
---
--- Abstract base class for D-Bus interfaces on the service side.
---
--- ---
---
---@class Gio.DBusInterfaceSkeleton : GObject.Object, Gio.DBusInterface
---@field parent_instance GObject.Object
---@field priv Gio.DBusInterfaceSkeletonPrivate
Gio.DBusInterfaceSkeleton = {}

--- # method Gio.DBusInterfaceSkeleton:export()
---
--- Exports `interface_` at `object_path` on `connection`.
--- 
--- This can be called multiple times to export the same `interface_`
--- onto multiple connections however the `object_path` provided must be
--- the same for all connections.
--- 
--- Use `g_dbus_interface_skeleton_unexport()` to unexport the object.
---
--- ---
---
---@param self Gio.DBusInterfaceSkeleton # The D-Bus interface to export.
---@param connection Gio.DBusConnection # A `GDBusConnection` to export `interface_` on.
---@param object_path string # The path to export the interface at.
---@return (boolean|nil) # `true` if the interface was exported on `connection`, otherwise `false` with `error` set.
function Gio.DBusInterfaceSkeleton:export(connection, object_path) end

--- # method Gio.DBusInterfaceSkeleton:flush()
---
--- If `interface_` has outstanding changes, request for these changes to be
--- emitted immediately.
--- 
--- For example, an exported D-Bus interface may queue up property
--- changes and emit the
--- `org.freedesktop.DBus.Properties.PropertiesChanged`
--- signal later (e.g. in an idle handler). This technique is useful
--- for collapsing multiple property changes into one.
---
--- ---
---
---@param self Gio.DBusInterfaceSkeleton # A `GDBusInterfaceSkeleton`.
---@return nil
function Gio.DBusInterfaceSkeleton:flush() end

--- # method Gio.DBusInterfaceSkeleton:get_connection()
---
--- Gets the first connection that `interface_` is exported on, if any.
---
--- ---
---
---@param self Gio.DBusInterfaceSkeleton # A `GDBusInterfaceSkeleton`.
---@return Gio.DBusConnection # A `GDBusConnection` or `nil` if `interface_` is not exported anywhere. Do not free, the object belongs to `interface_`.
function Gio.DBusInterfaceSkeleton:get_connection() end

--- # method Gio.DBusInterfaceSkeleton:get_connections()
---
--- Gets a list of the connections that `interface_` is exported on.
---
--- ---
---
---@param self Gio.DBusInterfaceSkeleton # A `GDBusInterfaceSkeleton`.
---@return Gio.DBusConnection[] # A list of all the connections that `interface_` is exported on. The returned list should be freed with `g_list_free()` after each element has been freed with `g_object_unref()`.
function Gio.DBusInterfaceSkeleton:get_connections() end

--- # method Gio.DBusInterfaceSkeleton:get_flags()
---
--- Gets the `GDBusInterfaceSkeletonFlags` that describes what the behavior
--- of `interface_`
---
--- ---
---
---@param self Gio.DBusInterfaceSkeleton # A `GDBusInterfaceSkeleton`.
---@return Gio.DBusInterfaceSkeletonFlags # One or more flags from the `GDBusInterfaceSkeletonFlags` enumeration.
function Gio.DBusInterfaceSkeleton:get_flags() end

--- # method Gio.DBusInterfaceSkeleton:get_info()
---
--- Gets D-Bus introspection information for the D-Bus interface
--- implemented by `interface_`.
---
--- ---
---
---@param self Gio.DBusInterfaceSkeleton # A `GDBusInterfaceSkeleton`.
---@return Gio.DBusInterfaceInfo # A `GDBusInterfaceInfo` (never `nil`). Do not free.
function Gio.DBusInterfaceSkeleton:get_info() end

--- # method Gio.DBusInterfaceSkeleton:get_object_path()
---
--- Gets the object path that `interface_` is exported on, if any.
---
--- ---
---
---@param self Gio.DBusInterfaceSkeleton # A `GDBusInterfaceSkeleton`.
---@return string # A string owned by `interface_` or `nil` if `interface_` is not exported anywhere. Do not free, the string belongs to `interface_`.
function Gio.DBusInterfaceSkeleton:get_object_path() end

--- # method Gio.DBusInterfaceSkeleton:get_properties()
---
--- Gets all D-Bus properties for `interface_`.
---
--- ---
---
---@param self Gio.DBusInterfaceSkeleton # A `GDBusInterfaceSkeleton`.
---@return GLib.Variant # A `GVariant` of type ['a{sv}'][G-VARIANT-TYPE-VARDICT:CAPS]. Free with `g_variant_unref()`.
function Gio.DBusInterfaceSkeleton:get_properties() end

--- # method Gio.DBusInterfaceSkeleton:has_connection()
---
--- Checks if `interface_` is exported on `connection`.
---
--- ---
---
---@param self Gio.DBusInterfaceSkeleton # A `GDBusInterfaceSkeleton`.
---@param connection Gio.DBusConnection # A `GDBusConnection`.
---@return (boolean|nil) # `true` if `interface_` is exported on `connection`, `false` otherwise.
function Gio.DBusInterfaceSkeleton:has_connection(connection) end

--- # method Gio.DBusInterfaceSkeleton:set_flags()
---
--- Sets flags describing what the behavior of `skeleton` should be.
---
--- ---
---
---@param self Gio.DBusInterfaceSkeleton # A `GDBusInterfaceSkeleton`.
---@param flags Gio.DBusInterfaceSkeletonFlags # Flags from the `GDBusInterfaceSkeletonFlags` enumeration.
---@return nil
function Gio.DBusInterfaceSkeleton:set_flags(flags) end

--- # method Gio.DBusInterfaceSkeleton:unexport()
---
--- Stops exporting `interface_` on all connections it is exported on.
--- 
--- To unexport `interface_` from only a single connection, use
--- `g_dbus_interface_skeleton_unexport_from_connection()`
---
--- ---
---
---@param self Gio.DBusInterfaceSkeleton # A `GDBusInterfaceSkeleton`.
---@return nil
function Gio.DBusInterfaceSkeleton:unexport() end

--- # method Gio.DBusInterfaceSkeleton:unexport_from_connection()
---
--- Stops exporting `interface_` on `connection`.
--- 
--- To stop exporting on all connections the interface is exported on,
--- use `g_dbus_interface_skeleton_unexport()`.
---
--- ---
---
---@param self Gio.DBusInterfaceSkeleton # A `GDBusInterfaceSkeleton`.
---@param connection Gio.DBusConnection # A `GDBusConnection`.
---@return nil
function Gio.DBusInterfaceSkeleton:unexport_from_connection(connection) end

--- # record Gio.DBusInterfaceSkeletonClass
---
--- Class structure for `GDBusInterfaceSkeleton`.
---
--- ---
---
---@class Gio.DBusInterfaceSkeletonClass
---@field parent_class GObject.ObjectClass # The parent class.
---@field get_info fun(interface_: Gio.DBusInterfaceSkeleton): Gio.DBusInterfaceInfo
---@field get_properties fun(interface_: Gio.DBusInterfaceSkeleton): GLib.Variant
---@field flush fun(interface_: Gio.DBusInterfaceSkeleton): nil
---@field vfunc_padding unknown[]
---@field g_authorize_method fun(interface_: Gio.DBusInterfaceSkeleton, invocation: Gio.DBusMethodInvocation): (boolean|nil)
---@field signal_padding unknown[]
Gio.DBusInterfaceSkeletonClass = {}

---@enum Gio.DBusInterfaceSkeletonFlags
Gio.DBusInterfaceSkeletonFlags = {}

--- # record Gio.DBusInterfaceSkeletonPrivate
---
---@class Gio.DBusInterfaceSkeletonPrivate
Gio.DBusInterfaceSkeletonPrivate = {}

--- # record Gio.DBusInterfaceVTable
---
--- Virtual table for handling properties and method calls for a D-Bus
--- interface.
--- 
--- Since 2.38, if you want to handle getting/setting D-Bus properties
--- asynchronously, give `nil` as your `get_property()` or `set_property()`
--- function. The D-Bus call will be directed to your `method_call` function,
--- with the provided `interface_name` set to "org.freedesktop.DBus.Properties".
--- 
--- Ownership of the `GDBusMethodInvocation` object passed to the
--- `method_call()` function is transferred to your handler; you must
--- call one of the methods of `GDBusMethodInvocation` to return a reply
--- (possibly empty), or an error. These functions also take ownership
--- of the passed-in invocation object, so unless the invocation
--- object has otherwise been referenced, it will be then be freed.
--- Calling one of these functions may be done within your
--- `method_call()` implementation but it also can be done at a later
--- point to handle the method asynchronously.
--- 
--- The usual checks on the validity of the calls is performed. For
--- `Get` calls, an error is automatically returned if the property does
--- not exist or the permissions do not allow access. The same checks are
--- performed for `Set` calls, and the provided value is also checked for
--- being the correct type.
--- 
--- For both `Get` and `Set` calls, the `GDBusMethodInvocation`
--- passed to the `method_call` handler can be queried with
--- `g_dbus_method_invocation_get_property_info()` to get a pointer
--- to the `GDBusPropertyInfo` of the property.
--- 
--- If you have readable properties specified in your interface info,
--- you must ensure that you either provide a non-`nil` `get_property`()
--- function or provide implementations of both the `Get` and `GetAll`
--- methods on org.freedesktop.DBus.Properties interface in your `method_call`
--- function. Note that the required return type of the `Get` call is
--- `(v)`, not the type of the property. `GetAll` expects a return value
--- of type `a{sv}`.
--- 
--- If you have writable properties specified in your interface info,
--- you must ensure that you either provide a non-`nil` `set_property`()
--- function or provide an implementation of the `Set` call. If implementing
--- the call, you must return the value of type %G_VARIANT_TYPE_UNIT.
---
--- ---
---
---@class Gio.DBusInterfaceVTable
---@field method_call Gio.DBusInterfaceMethodCallFunc # Function for handling incoming method calls.
---@field get_property Gio.DBusInterfaceGetPropertyFunc # Function for getting a property.
---@field set_property Gio.DBusInterfaceSetPropertyFunc # Function for setting a property.
---@field padding unknown[]
Gio.DBusInterfaceVTable = {}

--- # class Gio.DBusMenuModel
---
--- `GDBusMenuModel` is an implementation of `GMenuModel` that can be used
--- as a proxy for a menu model that is exported over D-Bus with
--- `g_dbus_connection_export_menu_model()`.
---
--- ---
---
---@class Gio.DBusMenuModel : Gio.MenuModel
Gio.DBusMenuModel = {}

--- # function Gio.DBusMenuModel.get()
---
--- Obtains a `GDBusMenuModel` for the menu model which is exported
--- at the given `bus_name` and `object_path`.
--- 
--- The thread default main context is taken at the time of this call.
--- All signals on the menu model (and any linked models) are reported
--- with respect to this context.  All calls on the returned menu model
--- (and linked models) must also originate from this same context, with
--- the thread default main context unchanged.
---
--- ---
---
---@param connection Gio.DBusConnection # a `GDBusConnection`
---@param bus_name? string # the bus name which exports the menu model or `nil` if `connection` is not a message bus connection
---@param object_path string # the object path at which the menu model is exported
---@return Gio.DBusMenuModel # a `GDBusMenuModel` object. Free with `g_object_unref()`.
function Gio.DBusMenuModel.get(connection, bus_name, object_path) end

--- # class Gio.DBusMessage
---
--- A type for representing D-Bus messages that can be sent or received
--- on a `GDBusConnection`.
---
--- ---
---
---@class Gio.DBusMessage : GObject.Object
---@operator call: Gio.DBusMessage
Gio.DBusMessage = {}

--- # method Gio.DBusMessage:copy()
---
--- Copies `message`. The copy is a deep copy and the returned
--- `GDBusMessage` is completely identical except that it is guaranteed
--- to not be locked.
--- 
--- This operation can fail if e.g. `message` contains file descriptors
--- and the per-process or system-wide open files limit is reached.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return Gio.DBusMessage # A new `GDBusMessage` or `nil` if `error` is set. Free with `g_object_unref()`.
function Gio.DBusMessage:copy() end

--- # method Gio.DBusMessage:get_arg0()
---
--- Convenience to get the first item in the body of `message`.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return string # The string item or `nil` if the first item in the body of `message` is not a string.
function Gio.DBusMessage:get_arg0() end

--- # method Gio.DBusMessage:get_body()
---
--- Gets the body of a message.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return GLib.Variant # A `GVariant` or `nil` if the body is empty. Do not free, it is owned by `message`.
function Gio.DBusMessage:get_body() end

--- # method Gio.DBusMessage:get_byte_order()
---
--- Gets the byte order of `message`.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return Gio.DBusMessageByteOrder # The byte order.
function Gio.DBusMessage:get_byte_order() end

--- # method Gio.DBusMessage:get_destination()
---
--- Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION header field.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return string # The value.
function Gio.DBusMessage:get_destination() end

--- # method Gio.DBusMessage:get_error_name()
---
--- Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME header field.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return string # The value.
function Gio.DBusMessage:get_error_name() end

--- # method Gio.DBusMessage:get_flags()
---
--- Gets the flags for `message`.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return Gio.DBusMessageFlags # Flags that are set (typically values from the `GDBusMessageFlags` enumeration bitwise ORed together).
function Gio.DBusMessage:get_flags() end

--- # method Gio.DBusMessage:get_header()
---
--- Gets a header field on `message`.
--- 
--- The caller is responsible for checking the type of the returned `GVariant`
--- matches what is expected.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param header_field Gio.DBusMessageHeaderField # A 8-bit unsigned integer (typically a value from the `GDBusMessageHeaderField` enumeration)
---@return GLib.Variant # A `GVariant` with the value if the header was found, `nil` otherwise. Do not free, it is owned by `message`.
function Gio.DBusMessage:get_header(header_field) end

--- # method Gio.DBusMessage:get_header_fields()
---
--- Gets an array of all header fields on `message` that are set.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return unknown[] # An array of header fields terminated by %G_DBUS_MESSAGE_HEADER_FIELD_INVALID. Each element is a `guchar`. Free with `g_free()`.
function Gio.DBusMessage:get_header_fields() end

--- # method Gio.DBusMessage:get_interface()
---
--- Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE header field.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return string # The value.
function Gio.DBusMessage:get_interface() end

--- # method Gio.DBusMessage:get_locked()
---
--- Checks whether `message` is locked. To monitor changes to this
--- value, conncet to the `GObject`::notify signal to listen for changes
--- on the `GDBusMessage`:locked property.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return (boolean|nil) # `true` if `message` is locked, `false` otherwise.
function Gio.DBusMessage:get_locked() end

--- # method Gio.DBusMessage:get_member()
---
--- Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_MEMBER header field.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return string # The value.
function Gio.DBusMessage:get_member() end

--- # method Gio.DBusMessage:get_message_type()
---
--- Gets the type of `message`.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return Gio.DBusMessageType # A 8-bit unsigned integer (typically a value from the `GDBusMessageType` enumeration).
function Gio.DBusMessage:get_message_type() end

--- # method Gio.DBusMessage:get_num_unix_fds()
---
--- Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS header field.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return integer # The value.
function Gio.DBusMessage:get_num_unix_fds() end

--- # method Gio.DBusMessage:get_path()
---
--- Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_PATH header field.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return string # The value.
function Gio.DBusMessage:get_path() end

--- # method Gio.DBusMessage:get_reply_serial()
---
--- Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL header field.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return integer # The value.
function Gio.DBusMessage:get_reply_serial() end

--- # method Gio.DBusMessage:get_sender()
---
--- Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_SENDER header field.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return string # The value.
function Gio.DBusMessage:get_sender() end

--- # method Gio.DBusMessage:get_serial()
---
--- Gets the serial for `message`.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return integer # A `guint32`.
function Gio.DBusMessage:get_serial() end

--- # method Gio.DBusMessage:get_signature()
---
--- Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE header field.
--- 
--- This will always be non-`nil`, but may be an empty string.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return string # The value.
function Gio.DBusMessage:get_signature() end

--- # method Gio.DBusMessage:get_unix_fd_list()
---
--- Gets the UNIX file descriptors associated with `message`, if any.
--- 
--- This method is only available on UNIX.
--- 
--- The file descriptors normally correspond to %G_VARIANT_TYPE_HANDLE
--- values in the body of the message. For example,
--- if `g_variant_get_handle()` returns 5, that is intended to be a reference
--- to the file descriptor that can be accessed by
--- `g_unix_fd_list_get (list, 5, ...)`.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return Gio.UnixFDList # A `GUnixFDList` or `nil` if no file descriptors are associated. Do not free, this object is owned by `message`.
function Gio.DBusMessage:get_unix_fd_list() end

--- # method Gio.DBusMessage:lock()
---
--- If `message` is locked, does nothing. Otherwise locks the message.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return nil
function Gio.DBusMessage:lock() end

--- # method Gio.DBusMessage:new_method_error_literal()
---
--- Creates a new `GDBusMessage` that is an error reply to `method_call_message`.
---
--- ---
---
---@param self Gio.DBusMessage # A message of type %G_DBUS_MESSAGE_TYPE_METHOD_CALL to create a reply message to.
---@param error_name string # A valid D-Bus error name.
---@param error_message string # The D-Bus error message.
---@return Gio.DBusMessage # A `GDBusMessage`. Free with `g_object_unref()`.
function Gio.DBusMessage:new_method_error_literal(error_name, error_message) end

--- # method Gio.DBusMessage:new_method_reply()
---
--- Creates a new `GDBusMessage` that is a reply to `method_call_message`.
---
--- ---
---
---@param self Gio.DBusMessage # A message of type %G_DBUS_MESSAGE_TYPE_METHOD_CALL to create a reply message to.
---@return Gio.DBusMessage # `GDBusMessage`. Free with `g_object_unref()`.
function Gio.DBusMessage:new_method_reply() end

--- # method Gio.DBusMessage:print()
---
--- Produces a human-readable multi-line description of `message`.
--- 
--- The contents of the description has no ABI guarantees, the contents
--- and formatting is subject to change at any time. Typical output
--- looks something like this:
--- ```c
--- Flags:   none
--- Version: 0
--- Serial:  4
--- Headers:
---   path -> objectpath '/org/gtk/GDBus/TestObject'
---   interface -> 'org.gtk.GDBus.TestInterface'
---   member -> 'GimmeStdout'
---   destination -> ':1.146'
--- Body: ()
--- UNIX File Descriptors:
---   (none)
--- ```
--- or
--- ```c
--- Flags:   no-reply-expected
--- Version: 0
--- Serial:  477
--- Headers:
---   reply-serial -> uint32 4
---   destination -> ':1.159'
---   sender -> ':1.146'
---   num-unix-fds -> uint32 1
--- Body: ()
--- UNIX File Descriptors:
---   fd 12: dev=0:10,mode=020620,ino=5,uid=500,gid=5,rdev=136:2,size=0,atime=1273085037,mtime=1273085851,ctime=1272982635
--- ```
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param indent integer # Indentation level.
---@return string # A string that should be freed with `g_free()`.
function Gio.DBusMessage:print(indent) end

--- # method Gio.DBusMessage:set_body()
---
--- Sets the body `message`. As a side-effect the
--- %G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE header field is set to the
--- type string of `body` (or cleared if `body` is `nil`).
--- 
--- If `body` is floating, `message` assumes ownership of `body`.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param body GLib.Variant # Either `nil` or a `GVariant` that is a tuple.
---@return nil
function Gio.DBusMessage:set_body(body) end

--- # method Gio.DBusMessage:set_byte_order()
---
--- Sets the byte order of `message`.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param byte_order Gio.DBusMessageByteOrder # The byte order.
---@return nil
function Gio.DBusMessage:set_byte_order(byte_order) end

--- # method Gio.DBusMessage:set_destination()
---
--- Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION header field.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param value? string # The value to set.
---@return nil
function Gio.DBusMessage:set_destination(value) end

--- # method Gio.DBusMessage:set_error_name()
---
--- Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME header field.
---
--- ---
---
---@param self? Gio.DBusMessage # A `GDBusMessage`.
---@param value string # The value to set.
---@return nil
function Gio.DBusMessage:set_error_name(value) end

--- # method Gio.DBusMessage:set_flags()
---
--- Sets the flags to set on `message`.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param flags Gio.DBusMessageFlags # Flags for `message` that are set (typically values from the `GDBusMessageFlags` enumeration bitwise ORed together).
---@return nil
function Gio.DBusMessage:set_flags(flags) end

--- # method Gio.DBusMessage:set_header()
---
--- Sets a header field on `message`.
--- 
--- If `value` is floating, `message` assumes ownership of `value`.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param header_field Gio.DBusMessageHeaderField # A 8-bit unsigned integer (typically a value from the `GDBusMessageHeaderField` enumeration)
---@param value? GLib.Variant # A `GVariant` to set the header field or `nil` to clear the header field.
---@return nil
function Gio.DBusMessage:set_header(header_field, value) end

--- # method Gio.DBusMessage:set_interface()
---
--- Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE header field.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param value? string # The value to set.
---@return nil
function Gio.DBusMessage:set_interface(value) end

--- # method Gio.DBusMessage:set_member()
---
--- Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_MEMBER header field.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param value? string # The value to set.
---@return nil
function Gio.DBusMessage:set_member(value) end

--- # method Gio.DBusMessage:set_message_type()
---
--- Sets `message` to be of `type`.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param type Gio.DBusMessageType # A 8-bit unsigned integer (typically a value from the `GDBusMessageType` enumeration).
---@return nil
function Gio.DBusMessage:set_message_type(type) end

--- # method Gio.DBusMessage:set_num_unix_fds()
---
--- Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS header field.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param value integer # The value to set.
---@return nil
function Gio.DBusMessage:set_num_unix_fds(value) end

--- # method Gio.DBusMessage:set_path()
---
--- Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_PATH header field.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param value? string # The value to set.
---@return nil
function Gio.DBusMessage:set_path(value) end

--- # method Gio.DBusMessage:set_reply_serial()
---
--- Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL header field.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param value integer # The value to set.
---@return nil
function Gio.DBusMessage:set_reply_serial(value) end

--- # method Gio.DBusMessage:set_sender()
---
--- Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_SENDER header field.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param value? string # The value to set.
---@return nil
function Gio.DBusMessage:set_sender(value) end

--- # method Gio.DBusMessage:set_serial()
---
--- Sets the serial for `message`.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param serial integer # A `guint32`.
---@return nil
function Gio.DBusMessage:set_serial(serial) end

--- # method Gio.DBusMessage:set_signature()
---
--- Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE header field.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param value? string # The value to set.
---@return nil
function Gio.DBusMessage:set_signature(value) end

--- # method Gio.DBusMessage:set_unix_fd_list()
---
--- Sets the UNIX file descriptors associated with `message`. As a
--- side-effect the %G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS header
--- field is set to the number of fds in `fd_list` (or cleared if
--- `fd_list` is `nil`).
--- 
--- This method is only available on UNIX.
--- 
--- When designing D-Bus APIs that are intended to be interoperable,
--- please note that non-GDBus implementations of D-Bus can usually only
--- access file descriptors if they are referenced by a value of type
--- %G_VARIANT_TYPE_HANDLE in the body of the message.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param fd_list? Gio.UnixFDList # A `GUnixFDList` or `nil`.
---@return nil
function Gio.DBusMessage:set_unix_fd_list(fd_list) end

--- # method Gio.DBusMessage:to_blob()
---
--- Serializes `message` to a blob. The byte order returned by
--- `g_dbus_message_get_byte_order()` will be used.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@param out_size integer # Return location for size of generated blob.
---@param capabilities Gio.DBusCapabilityFlags # A `GDBusCapabilityFlags` describing what protocol features are supported.
---@return unknown[] # A pointer to a valid binary D-Bus message of `out_size` bytes generated by `message` or `nil` if `error` is set. Free with `g_free()`.
function Gio.DBusMessage:to_blob(out_size, capabilities) end

--- # method Gio.DBusMessage:to_gerror()
---
--- If `message` is not of type %G_DBUS_MESSAGE_TYPE_ERROR does
--- nothing and returns `false`.
--- 
--- Otherwise this method encodes the error in `message` as a `GError`
--- using `g_dbus_error_set_dbus_error()` using the information in the
--- %G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME header field of `message` as
--- well as the first string item in `message`'s body.
---
--- ---
---
---@param self Gio.DBusMessage # A `GDBusMessage`.
---@return (boolean|nil) # `true` if `error` was set, `false` otherwise.
function Gio.DBusMessage:to_gerror() end

--- # function Gio.DBusMessage.bytes_needed()
---
--- Utility function to calculate how many bytes are needed to
--- completely deserialize the D-Bus message stored at `blob`.
---
--- ---
---
---@param blob unknown[] # A blob representing a binary D-Bus message.
---@param blob_len integer # The length of `blob` (must be at least 16).
---@return integer # Number of bytes needed or -1 if `error` is set (e.g. if `blob` contains invalid data or not enough data is available to determine the size).
function Gio.DBusMessage.bytes_needed(blob, blob_len) end

--- # function Gio.DBusMessage.new()
---
--- Creates a new empty `GDBusMessage`.
---
--- ---
---
---@return Gio.DBusMessage # A `GDBusMessage`. Free with `g_object_unref()`.
function Gio.DBusMessage.new() end

--- # function Gio.DBusMessage.new_from_blob()
---
--- Creates a new `GDBusMessage` from the data stored at `blob`. The byte
--- order that the message was in can be retrieved using
--- `g_dbus_message_get_byte_order()`.
--- 
--- If the `blob` cannot be parsed, contains invalid fields, or contains invalid
--- headers, %G_IO_ERROR_INVALID_ARGUMENT will be returned.
---
--- ---
---
---@param blob unknown[] # A blob representing a binary D-Bus message.
---@param blob_len integer # The length of `blob`.
---@param capabilities Gio.DBusCapabilityFlags # A `GDBusCapabilityFlags` describing what protocol features are supported.
---@return Gio.DBusMessage # A new `GDBusMessage` or `nil` if `error` is set. Free with `g_object_unref()`.
function Gio.DBusMessage.new_from_blob(blob, blob_len, capabilities) end

--- # function Gio.DBusMessage.new_method_call()
---
--- Creates a new `GDBusMessage` for a method call.
---
--- ---
---
---@param name? string # A valid D-Bus name or `nil`.
---@param path string # A valid object path.
---@param interface_? string # A valid D-Bus interface name or `nil`.
---@param method string # A valid method name.
---@return Gio.DBusMessage # A `GDBusMessage`. Free with `g_object_unref()`.
function Gio.DBusMessage.new_method_call(name, path, interface_, method) end

--- # function Gio.DBusMessage.new_signal()
---
--- Creates a new `GDBusMessage` for a signal emission.
---
--- ---
---
---@param path string # A valid object path.
---@param interface_ string # A valid D-Bus interface name.
---@param signal string # A valid signal name.
---@return Gio.DBusMessage # A `GDBusMessage`. Free with `g_object_unref()`.
function Gio.DBusMessage.new_signal(path, interface_, signal) end

---@enum Gio.DBusMessageByteOrder
Gio.DBusMessageByteOrder = {}

---@alias Gio.DBusMessageFilterFunction fun(connection: Gio.DBusConnection, message: Gio.DBusMessage, incoming: (boolean|nil), user_data: userdata): Gio.DBusMessage

---@enum Gio.DBusMessageFlags
Gio.DBusMessageFlags = {}

---@enum Gio.DBusMessageHeaderField
Gio.DBusMessageHeaderField = {}

---@enum Gio.DBusMessageType
Gio.DBusMessageType = {}

--- # record Gio.DBusMethodInfo
---
--- Information about a method on an D-Bus interface.
---
--- ---
---
---@class Gio.DBusMethodInfo
---@field ref_count integer # The reference count or -1 if statically allocated.
---@field name string # The name of the D-Bus method, e.g. `RequestName`.
---@field in_args unknown[] # A pointer to a `nil`-terminated array of pointers to `GDBusArgInfo` structures or `nil` if there are no in arguments.
---@field out_args unknown[] # A pointer to a `nil`-terminated array of pointers to `GDBusArgInfo` structures or `nil` if there are no out arguments.
---@field annotations unknown[] # A pointer to a `nil`-terminated array of pointers to `GDBusAnnotationInfo` structures or `nil` if there are no annotations.
Gio.DBusMethodInfo = {}

--- # method Gio.DBusMethodInfo:ref()
---
--- If `info` is statically allocated does nothing. Otherwise increases
--- the reference count.
---
--- ---
---
---@param self Gio.DBusMethodInfo # A `GDBusMethodInfo`
---@return Gio.DBusMethodInfo # The same `info`.
function Gio.DBusMethodInfo:ref() end

--- # method Gio.DBusMethodInfo:unref()
---
--- If `info` is statically allocated, does nothing. Otherwise decreases
--- the reference count of `info`. When its reference count drops to 0,
--- the memory used is freed.
---
--- ---
---
---@param self Gio.DBusMethodInfo # A `GDBusMethodInfo`.
---@return nil
function Gio.DBusMethodInfo:unref() end

--- # class Gio.DBusMethodInvocation
---
--- Instances of the `GDBusMethodInvocation` class are used when
--- handling D-Bus method calls. It provides a way to asynchronously
--- return results and errors.
--- 
--- The normal way to obtain a `GDBusMethodInvocation` object is to receive
--- it as an argument to the `handle_method_call()` function in a
--- `GDBusInterfaceVTable` that was passed to `g_dbus_connection_register_object()`.
---
--- ---
---
---@class Gio.DBusMethodInvocation : GObject.Object
Gio.DBusMethodInvocation = {}

--- # method Gio.DBusMethodInvocation:get_connection()
---
--- Gets the `GDBusConnection` the method was invoked on.
---
--- ---
---
---@param self Gio.DBusMethodInvocation # A `GDBusMethodInvocation`.
---@return Gio.DBusConnection # A `GDBusConnection`. Do not free, it is owned by `invocation`.
function Gio.DBusMethodInvocation:get_connection() end

--- # method Gio.DBusMethodInvocation:get_interface_name()
---
--- Gets the name of the D-Bus interface the method was invoked on.
--- 
--- If this method call is a property Get, Set or GetAll call that has
--- been redirected to the method call handler then
--- "org.freedesktop.DBus.Properties" will be returned.  See
--- `GDBusInterfaceVTable` for more information.
---
--- ---
---
---@param self Gio.DBusMethodInvocation # A `GDBusMethodInvocation`.
---@return string # A string. Do not free, it is owned by `invocation`.
function Gio.DBusMethodInvocation:get_interface_name() end

--- # method Gio.DBusMethodInvocation:get_message()
---
--- Gets the `GDBusMessage` for the method invocation. This is useful if
--- you need to use low-level protocol features, such as UNIX file
--- descriptor passing, that cannot be properly expressed in the
--- `GVariant` API.
--- 
--- See this [server][gdbus-server] and [client][gdbus-unix-fd-client]
--- for an example of how to use this low-level API to send and receive
--- UNIX file descriptors.
---
--- ---
---
---@param self Gio.DBusMethodInvocation # A `GDBusMethodInvocation`.
---@return Gio.DBusMessage # `GDBusMessage`. Do not free, it is owned by `invocation`.
function Gio.DBusMethodInvocation:get_message() end

--- # method Gio.DBusMethodInvocation:get_method_info()
---
--- Gets information about the method call, if any.
--- 
--- If this method invocation is a property Get, Set or GetAll call that
--- has been redirected to the method call handler then `nil` will be
--- returned.  See `g_dbus_method_invocation_get_property_info()` and
--- `GDBusInterfaceVTable` for more information.
---
--- ---
---
---@param self Gio.DBusMethodInvocation # A `GDBusMethodInvocation`.
---@return Gio.DBusMethodInfo # A `GDBusMethodInfo` or `nil`. Do not free, it is owned by `invocation`.
function Gio.DBusMethodInvocation:get_method_info() end

--- # method Gio.DBusMethodInvocation:get_method_name()
---
--- Gets the name of the method that was invoked.
---
--- ---
---
---@param self Gio.DBusMethodInvocation # A `GDBusMethodInvocation`.
---@return string # A string. Do not free, it is owned by `invocation`.
function Gio.DBusMethodInvocation:get_method_name() end

--- # method Gio.DBusMethodInvocation:get_object_path()
---
--- Gets the object path the method was invoked on.
---
--- ---
---
---@param self Gio.DBusMethodInvocation # A `GDBusMethodInvocation`.
---@return string # A string. Do not free, it is owned by `invocation`.
function Gio.DBusMethodInvocation:get_object_path() end

--- # method Gio.DBusMethodInvocation:get_parameters()
---
--- Gets the parameters of the method invocation. If there are no input
--- parameters then this will return a GVariant with 0 children rather than NULL.
---
--- ---
---
---@param self Gio.DBusMethodInvocation # A `GDBusMethodInvocation`.
---@return GLib.Variant # A `GVariant` tuple. Do not unref this because it is owned by `invocation`.
function Gio.DBusMethodInvocation:get_parameters() end

--- # method Gio.DBusMethodInvocation:get_property_info()
---
--- Gets information about the property that this method call is for, if
--- any.
--- 
--- This will only be set in the case of an invocation in response to a
--- property Get or Set call that has been directed to the method call
--- handler for an object on account of its `property_get()` or
--- `property_set()` vtable pointers being unset.
--- 
--- See `GDBusInterfaceVTable` for more information.
--- 
--- If the call was GetAll, `nil` will be returned.
---
--- ---
---
---@param self Gio.DBusMethodInvocation # A `GDBusMethodInvocation`
---@return Gio.DBusPropertyInfo # a `GDBusPropertyInfo` or `nil`
function Gio.DBusMethodInvocation:get_property_info() end

--- # method Gio.DBusMethodInvocation:get_sender()
---
--- Gets the bus name that invoked the method.
---
--- ---
---
---@param self Gio.DBusMethodInvocation # A `GDBusMethodInvocation`.
---@return string # A string. Do not free, it is owned by `invocation`.
function Gio.DBusMethodInvocation:get_sender() end

--- # method Gio.DBusMethodInvocation:return_dbus_error()
---
--- Finishes handling a D-Bus method call by returning an error.
--- 
--- This method will take ownership of `invocation`. See
--- `GDBusInterfaceVTable` for more information about the ownership of
--- `invocation`.
---
--- ---
---
---@param self Gio.DBusMethodInvocation # A `GDBusMethodInvocation`.
---@param error_name string # A valid D-Bus error name.
---@param error_message string # A valid D-Bus error message.
---@return nil
function Gio.DBusMethodInvocation:return_dbus_error(error_name, error_message) end

--- # method Gio.DBusMethodInvocation:return_error_literal()
---
--- Like `g_dbus_method_invocation_return_error()` but without `printf()`-style formatting.
--- 
--- This method will take ownership of `invocation`. See
--- `GDBusInterfaceVTable` for more information about the ownership of
--- `invocation`.
---
--- ---
---
---@param self Gio.DBusMethodInvocation # A `GDBusMethodInvocation`.
---@param domain GLib.Quark # A `GQuark` for the `GError` error domain.
---@param code integer # The error code.
---@param message string # The error message.
---@return nil
function Gio.DBusMethodInvocation:return_error_literal(domain, code, message) end

--- # method Gio.DBusMethodInvocation:return_gerror()
---
--- Like `g_dbus_method_invocation_return_error()` but takes a `GError`
--- instead of the error domain, error code and message.
--- 
--- This method will take ownership of `invocation`. See
--- `GDBusInterfaceVTable` for more information about the ownership of
--- `invocation`.
---
--- ---
---
---@param self Gio.DBusMethodInvocation # A `GDBusMethodInvocation`.
---@param error GLib.Error # A `GError`.
---@return nil
function Gio.DBusMethodInvocation:return_gerror(error) end

--- # method Gio.DBusMethodInvocation:return_value()
---
--- Finishes handling a D-Bus method call by returning `parameters`.
--- If the `parameters` GVariant is floating, it is consumed.
--- 
--- It is an error if `parameters` is not of the right format: it must be a tuple
--- containing the out-parameters of the D-Bus method. Even if the method has a
--- single out-parameter, it must be contained in a tuple. If the method has no
--- out-parameters, `parameters` may be `nil` or an empty tuple.
--- 
--- ```c
--- GDBusMethodInvocation *invocation = some_invocation;
--- g_autofree gchar *result_string = NULL;
--- g_autoptr (GError) error = NULL;
--- 
--- result_string = calculate_result (&error);
--- 
--- if (error != NULL)
---   g_dbus_method_invocation_return_gerror (invocation, error);
--- else
---   g_dbus_method_invocation_return_value (invocation,
---                                          g_variant_new ("(s)", result_string));
--- 
--- // Do not free `invocation` here; returning a value does that
--- ```
--- 
--- This method will take ownership of `invocation`. See
--- `GDBusInterfaceVTable` for more information about the ownership of
--- `invocation`.
--- 
--- Since 2.48, if the method call requested for a reply not to be sent
--- then this call will sink `parameters` and free `invocation`, but
--- otherwise do nothing (as per the recommendations of the D-Bus
--- specification).
---
--- ---
---
---@param self Gio.DBusMethodInvocation # A `GDBusMethodInvocation`.
---@param parameters? GLib.Variant # A `GVariant` tuple with out parameters for the method or `nil` if not passing any parameters.
---@return nil
function Gio.DBusMethodInvocation:return_value(parameters) end

--- # method Gio.DBusMethodInvocation:return_value_with_unix_fd_list()
---
--- Like `g_dbus_method_invocation_return_value()` but also takes a `GUnixFDList`.
--- 
--- This method is only available on UNIX.
--- 
--- This method will take ownership of `invocation`. See
--- `GDBusInterfaceVTable` for more information about the ownership of
--- `invocation`.
---
--- ---
---
---@param self Gio.DBusMethodInvocation # A `GDBusMethodInvocation`.
---@param parameters? GLib.Variant # A `GVariant` tuple with out parameters for the method or `nil` if not passing any parameters.
---@param fd_list? Gio.UnixFDList # A `GUnixFDList` or `nil`.
---@return nil
function Gio.DBusMethodInvocation:return_value_with_unix_fd_list(parameters, fd_list) end

--- # record Gio.DBusNodeInfo
---
--- Information about nodes in a remote object hierarchy.
---
--- ---
---
---@class Gio.DBusNodeInfo
---@field ref_count integer # The reference count or -1 if statically allocated.
---@field path string # The path of the node or `nil` if omitted. Note that this may be a relative path. See the D-Bus specification for more details.
---@field interfaces unknown[] # A pointer to a `nil`-terminated array of pointers to `GDBusInterfaceInfo` structures or `nil` if there are no interfaces.
---@field nodes unknown[] # A pointer to a `nil`-terminated array of pointers to `GDBusNodeInfo` structures or `nil` if there are no nodes.
---@field annotations unknown[] # A pointer to a `nil`-terminated array of pointers to `GDBusAnnotationInfo` structures or `nil` if there are no annotations.
Gio.DBusNodeInfo = {}

--- # method Gio.DBusNodeInfo:generate_xml()
---
--- Appends an XML representation of `info` (and its children) to `string_builder`.
--- 
--- This function is typically used for generating introspection XML documents at run-time for
--- handling the `org.freedesktop.DBus.Introspectable.Introspect`  method.
---
--- ---
---
---@param self Gio.DBusNodeInfo # A `GDBusNodeInfo`.
---@param indent integer # Indentation level.
---@param string_builder GLib.String # A `GString` to to append XML data to.
---@return nil
function Gio.DBusNodeInfo:generate_xml(indent, string_builder) end

--- # method Gio.DBusNodeInfo:lookup_interface()
---
--- Looks up information about an interface.
--- 
--- The cost of this function is O(n) in number of interfaces.
---
--- ---
---
---@param self Gio.DBusNodeInfo # A `GDBusNodeInfo`.
---@param name string # A D-Bus interface name.
---@return Gio.DBusInterfaceInfo # A `GDBusInterfaceInfo` or `nil` if not found. Do not free, it is owned by `info`.
function Gio.DBusNodeInfo:lookup_interface(name) end

--- # method Gio.DBusNodeInfo:ref()
---
--- If `info` is statically allocated does nothing. Otherwise increases
--- the reference count.
---
--- ---
---
---@param self Gio.DBusNodeInfo # A `GDBusNodeInfo`
---@return Gio.DBusNodeInfo # The same `info`.
function Gio.DBusNodeInfo:ref() end

--- # method Gio.DBusNodeInfo:unref()
---
--- If `info` is statically allocated, does nothing. Otherwise decreases
--- the reference count of `info`. When its reference count drops to 0,
--- the memory used is freed.
---
--- ---
---
---@param self Gio.DBusNodeInfo # A `GDBusNodeInfo`.
---@return nil
function Gio.DBusNodeInfo:unref() end

--- # function Gio.DBusNodeInfo.new_for_xml()
---
--- Parses `xml_data` and returns a `GDBusNodeInfo` representing the data.
--- 
--- The introspection XML must contain exactly one top-level
--- <node> element.
--- 
--- Note that this routine is using a
--- [GMarkup][glib-Simple-XML-Subset-Parser.description]-based
--- parser that only accepts a subset of valid XML documents.
---
--- ---
---
---@param xml_data string # Valid D-Bus introspection XML.
---@return Gio.DBusNodeInfo # A `GDBusNodeInfo` structure or `nil` if `error` is set. Free with `g_dbus_node_info_unref()`.
function Gio.DBusNodeInfo.new_for_xml(xml_data) end

--- # interface Gio.DBusObject
---
--- The `GDBusObject` type is the base type for D-Bus objects on both
--- the service side (see `GDBusObjectSkeleton`) and the client side
--- (see `GDBusObjectProxy`). It is essentially just a container of
--- interfaces.
---
--- ---
---
---@class Gio.DBusObject
Gio.DBusObject = {}

--- # method Gio.DBusObject:get_interface()
---
--- Gets the D-Bus interface with name `interface_name` associated with
--- `object`, if any.
---
--- ---
---
---@param self Gio.DBusObject # A `GDBusObject`.
---@param interface_name string # A D-Bus interface name.
---@return Gio.DBusInterface # `nil` if not found, otherwise a `GDBusInterface` that must be freed with `g_object_unref()`.
function Gio.DBusObject:get_interface(interface_name) end

--- # method Gio.DBusObject:get_interfaces()
---
--- Gets the D-Bus interfaces associated with `object`.
---
--- ---
---
---@param self Gio.DBusObject # A `GDBusObject`.
---@return Gio.DBusInterface[] # A list of `GDBusInterface` instances. The returned list must be freed by `g_list_free()` after each element has been freed with `g_object_unref()`.
function Gio.DBusObject:get_interfaces() end

--- # method Gio.DBusObject:get_object_path()
---
--- Gets the object path for `object`.
---
--- ---
---
---@param self Gio.DBusObject # A `GDBusObject`.
---@return string # A string owned by `object`. Do not free.
function Gio.DBusObject:get_object_path() end

--- # record Gio.DBusObjectIface
---
--- Base object type for D-Bus objects.
---
--- ---
---
---@class Gio.DBusObjectIface
---@field parent_iface GObject.TypeInterface # The parent interface.
---@field get_object_path fun(object: Gio.DBusObject): string
---@field get_interfaces fun(object: Gio.DBusObject): Gio.DBusInterface[]
---@field get_interface fun(object: Gio.DBusObject, interface_name: string): Gio.DBusInterface
---@field interface_added fun(object: Gio.DBusObject, interface_: Gio.DBusInterface): nil
---@field interface_removed fun(object: Gio.DBusObject, interface_: Gio.DBusInterface): nil
Gio.DBusObjectIface = {}

--- # interface Gio.DBusObjectManager
---
--- The `GDBusObjectManager` type is the base type for service- and
--- client-side implementations of the standardized
--- [org.freedesktop.DBus.ObjectManager](http://dbus.freedesktop.org/doc/dbus-specification.html`standard`-interfaces-objectmanager)
--- interface.
--- 
--- See `GDBusObjectManagerClient` for the client-side implementation
--- and `GDBusObjectManagerServer` for the service-side implementation.
---
--- ---
---
---@class Gio.DBusObjectManager
Gio.DBusObjectManager = {}

--- # method Gio.DBusObjectManager:get_interface()
---
--- Gets the interface proxy for `interface_name` at `object_path`, if
--- any.
---
--- ---
---
---@param self Gio.DBusObjectManager # A `GDBusObjectManager`.
---@param object_path string # Object path to look up.
---@param interface_name string # D-Bus interface name to look up.
---@return Gio.DBusInterface # A `GDBusInterface` instance or `nil`. Free with `g_object_unref()`.
function Gio.DBusObjectManager:get_interface(object_path, interface_name) end

--- # method Gio.DBusObjectManager:get_object()
---
--- Gets the `GDBusObject` at `object_path`, if any.
---
--- ---
---
---@param self Gio.DBusObjectManager # A `GDBusObjectManager`.
---@param object_path string # Object path to look up.
---@return Gio.DBusObject # A `GDBusObject` or `nil`. Free with `g_object_unref()`.
function Gio.DBusObjectManager:get_object(object_path) end

--- # method Gio.DBusObjectManager:get_object_path()
---
--- Gets the object path that `manager` is for.
---
--- ---
---
---@param self Gio.DBusObjectManager # A `GDBusObjectManager`.
---@return string # A string owned by `manager`. Do not free.
function Gio.DBusObjectManager:get_object_path() end

--- # method Gio.DBusObjectManager:get_objects()
---
--- Gets all `GDBusObject` objects known to `manager`.
---
--- ---
---
---@param self Gio.DBusObjectManager # A `GDBusObjectManager`.
---@return Gio.DBusObject[] # A list of `GDBusObject` objects. The returned list should be freed with `g_list_free()` after each element has been freed with `g_object_unref()`.
function Gio.DBusObjectManager:get_objects() end

--- # class Gio.DBusObjectManagerClient
---
--- `GDBusObjectManagerClient` is used to create, monitor and delete object
--- proxies for remote objects exported by a `GDBusObjectManagerServer` (or any
--- code implementing the
--- [org.freedesktop.DBus.ObjectManager](http://dbus.freedesktop.org/doc/dbus-specification.html`standard`-interfaces-objectmanager)
--- interface).
--- 
--- Once an instance of this type has been created, you can connect to
--- the `GDBusObjectManager`::object-added and
--- `GDBusObjectManager`::object-removed signals and inspect the
--- `GDBusObjectProxy` objects returned by
--- `g_dbus_object_manager_get_objects()`.
--- 
--- If the name for a `GDBusObjectManagerClient` is not owned by anyone at
--- object construction time, the default behavior is to request the
--- message bus to launch an owner for the name. This behavior can be
--- disabled using the %G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START
--- flag. It's also worth noting that this only works if the name of
--- interest is activatable in the first place. E.g. in some cases it
--- is not possible to launch an owner for the requested name. In this
--- case, `GDBusObjectManagerClient` object construction still succeeds but
--- there will be no object proxies
--- (e.g. `g_dbus_object_manager_get_objects()` returns the empty list) and
--- the `GDBusObjectManagerClient`:name-owner property is `nil`.
--- 
--- The owner of the requested name can come and go (for example
--- consider a system service being restarted) – `GDBusObjectManagerClient`
--- handles this case too; simply connect to the `GObject`::notify
--- signal to watch for changes on the `GDBusObjectManagerClient`:name-owner
--- property. When the name owner vanishes, the behavior is that
--- `GDBusObjectManagerClient`:name-owner is set to `nil` (this includes
--- emission of the `GObject`::notify signal) and then
--- `GDBusObjectManager`::object-removed signals are synthesized
--- for all currently existing object proxies. Since
--- `GDBusObjectManagerClient`:name-owner is `nil` when this happens, you can
--- use this information to disambiguate a synthesized signal from a
--- genuine signal caused by object removal on the remote
--- `GDBusObjectManager`. Similarly, when a new name owner appears,
--- `GDBusObjectManager`::object-added signals are synthesized
--- while `GDBusObjectManagerClient`:name-owner is still `nil`. Only when all
--- object proxies have been added, the `GDBusObjectManagerClient`:name-owner
--- is set to the new name owner (this includes emission of the
--- `GObject`::notify signal).  Furthermore, you are guaranteed that
--- `GDBusObjectManagerClient`:name-owner will alternate between a name owner
--- (e.g. `:1.42`) and `nil` even in the case where
--- the name of interest is atomically replaced
--- 
--- Ultimately, `GDBusObjectManagerClient` is used to obtain `GDBusProxy`
--- instances. All signals (including the
--- org.freedesktop.DBus.Properties::PropertiesChanged signal)
--- delivered to `GDBusProxy` instances are guaranteed to originate
--- from the name owner. This guarantee along with the behavior
--- described above, means that certain race conditions including the
--- "half the proxy is from the old owner and the other half is from
--- the new owner" problem cannot happen.
--- 
--- To avoid having the application connect to signals on the returned
--- `GDBusObjectProxy` and `GDBusProxy` objects, the
--- `GDBusObject`::interface-added,
--- `GDBusObject`::interface-removed,
--- `GDBusProxy`::g-properties-changed and
--- `GDBusProxy`::g-signal signals
--- are also emitted on the `GDBusObjectManagerClient` instance managing these
--- objects. The signals emitted are
--- `GDBusObjectManager`::interface-added,
--- `GDBusObjectManager`::interface-removed,
--- `GDBusObjectManagerClient`::interface-proxy-properties-changed and
--- `GDBusObjectManagerClient`::interface-proxy-signal.
--- 
--- Note that all callbacks and signals are emitted in the
--- [thread-default main context][g-main-context-push-thread-default]
--- that the `GDBusObjectManagerClient` object was constructed
--- in. Additionally, the `GDBusObjectProxy` and `GDBusProxy` objects
--- originating from the `GDBusObjectManagerClient` object will be created in
--- the same context and, consequently, will deliver signals in the
--- same main loop.
---
--- ---
---
---@class Gio.DBusObjectManagerClient : GObject.Object, Gio.AsyncInitable, Gio.DBusObjectManager, Gio.Initable
---@field parent_instance GObject.Object
---@field priv Gio.DBusObjectManagerClientPrivate
---@operator call: Gio.DBusObjectManagerClient
Gio.DBusObjectManagerClient = {}

--- # method Gio.DBusObjectManagerClient:get_connection()
---
--- Gets the `GDBusConnection` used by `manager`.
---
--- ---
---
---@param self Gio.DBusObjectManagerClient # A `GDBusObjectManagerClient`
---@return Gio.DBusConnection # A `GDBusConnection` object. Do not free, the object belongs to `manager`.
function Gio.DBusObjectManagerClient:get_connection() end

--- # method Gio.DBusObjectManagerClient:get_flags()
---
--- Gets the flags that `manager` was constructed with.
---
--- ---
---
---@param self Gio.DBusObjectManagerClient # A `GDBusObjectManagerClient`
---@return Gio.DBusObjectManagerClientFlags # Zero of more flags from the `GDBusObjectManagerClientFlags` enumeration.
function Gio.DBusObjectManagerClient:get_flags() end

--- # method Gio.DBusObjectManagerClient:get_name()
---
--- Gets the name that `manager` is for, or `nil` if not a message bus
--- connection.
---
--- ---
---
---@param self Gio.DBusObjectManagerClient # A `GDBusObjectManagerClient`
---@return string # A unique or well-known name. Do not free, the string belongs to `manager`.
function Gio.DBusObjectManagerClient:get_name() end

--- # method Gio.DBusObjectManagerClient:get_name_owner()
---
--- The unique name that owns the name that `manager` is for or `nil` if
--- no-one currently owns that name. You can connect to the
--- `GObject`::notify signal to track changes to the
--- `GDBusObjectManagerClient`:name-owner property.
---
--- ---
---
---@param self Gio.DBusObjectManagerClient # A `GDBusObjectManagerClient`.
---@return string # The name owner or `nil` if no name owner exists. Free with `g_free()`.
function Gio.DBusObjectManagerClient:get_name_owner() end

--- # function Gio.DBusObjectManagerClient.new()
---
--- Asynchronously creates a new `GDBusObjectManagerClient` object.
--- 
--- This is an asynchronous failable constructor. When the result is
--- ready, `callback` will be invoked in the
--- [thread-default main context][g-main-context-push-thread-default]
--- of the thread you are calling this method from. You can
--- then call `g_dbus_object_manager_client_new_finish()` to get the result. See
--- `g_dbus_object_manager_client_new_sync()` for the synchronous version.
---
--- ---
---
---@param connection Gio.DBusConnection # A `GDBusConnection`.
---@param flags Gio.DBusObjectManagerClientFlags # Zero or more flags from the `GDBusObjectManagerClientFlags` enumeration.
---@param name string # The owner of the control object (unique or well-known name).
---@param object_path string # The object path of the control object.
---@param get_proxy_type_func? Gio.DBusProxyTypeFunc # A `GDBusProxyTypeFunc` function or `nil` to always construct `GDBusProxy` proxies.
---@param get_proxy_type_user_data? userdata # User data to pass to `get_proxy_type_func`.
---@param get_proxy_type_destroy_notify? GLib.DestroyNotify # Free function for `get_proxy_type_user_data` or `nil`.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`
---@param callback? Gio.AsyncReadyCallback # A `GAsyncReadyCallback` to call when the request is satisfied.
---@param user_data? userdata # The data to pass to `callback`.
---@return nil
function Gio.DBusObjectManagerClient.new(connection, flags, name, object_path, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, callback, user_data) end

--- # function Gio.DBusObjectManagerClient.new_for_bus()
---
--- Like `g_dbus_object_manager_client_new()` but takes a `GBusType` instead of a
--- `GDBusConnection`.
--- 
--- This is an asynchronous failable constructor. When the result is
--- ready, `callback` will be invoked in the
--- [thread-default main loop][g-main-context-push-thread-default]
--- of the thread you are calling this method from. You can
--- then call `g_dbus_object_manager_client_new_for_bus_finish()` to get the result. See
--- `g_dbus_object_manager_client_new_for_bus_sync()` for the synchronous version.
---
--- ---
---
---@param bus_type Gio.BusType # A `GBusType`.
---@param flags Gio.DBusObjectManagerClientFlags # Zero or more flags from the `GDBusObjectManagerClientFlags` enumeration.
---@param name string # The owner of the control object (unique or well-known name).
---@param object_path string # The object path of the control object.
---@param get_proxy_type_func? Gio.DBusProxyTypeFunc # A `GDBusProxyTypeFunc` function or `nil` to always construct `GDBusProxy` proxies.
---@param get_proxy_type_user_data? userdata # User data to pass to `get_proxy_type_func`.
---@param get_proxy_type_destroy_notify? GLib.DestroyNotify # Free function for `get_proxy_type_user_data` or `nil`.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`
---@param callback? Gio.AsyncReadyCallback # A `GAsyncReadyCallback` to call when the request is satisfied.
---@param user_data? userdata # The data to pass to `callback`.
---@return nil
function Gio.DBusObjectManagerClient.new_for_bus(bus_type, flags, name, object_path, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, callback, user_data) end

--- # function Gio.DBusObjectManagerClient.new_finish()
---
--- Finishes an operation started with `g_dbus_object_manager_client_new()`.
---
--- ---
---
---@param res Gio.AsyncResult # A `GAsyncResult` obtained from the `GAsyncReadyCallback` passed to `g_dbus_object_manager_client_new()`.
---@return Gio.DBusObjectManagerClient # A `GDBusObjectManagerClient` object or `nil` if `error` is set. Free with `g_object_unref()`.
function Gio.DBusObjectManagerClient.new_finish(res) end

--- # function Gio.DBusObjectManagerClient.new_for_bus_finish()
---
--- Finishes an operation started with `g_dbus_object_manager_client_new_for_bus()`.
---
--- ---
---
---@param res Gio.AsyncResult # A `GAsyncResult` obtained from the `GAsyncReadyCallback` passed to `g_dbus_object_manager_client_new_for_bus()`.
---@return Gio.DBusObjectManagerClient # A `GDBusObjectManagerClient` object or `nil` if `error` is set. Free with `g_object_unref()`.
function Gio.DBusObjectManagerClient.new_for_bus_finish(res) end

--- # function Gio.DBusObjectManagerClient.new_for_bus_sync()
---
--- Like `g_dbus_object_manager_client_new_sync()` but takes a `GBusType` instead
--- of a `GDBusConnection`.
--- 
--- This is a synchronous failable constructor - the calling thread is
--- blocked until a reply is received. See `g_dbus_object_manager_client_new_for_bus()`
--- for the asynchronous version.
---
--- ---
---
---@param bus_type Gio.BusType # A `GBusType`.
---@param flags Gio.DBusObjectManagerClientFlags # Zero or more flags from the `GDBusObjectManagerClientFlags` enumeration.
---@param name string # The owner of the control object (unique or well-known name).
---@param object_path string # The object path of the control object.
---@param get_proxy_type_func? Gio.DBusProxyTypeFunc # A `GDBusProxyTypeFunc` function or `nil` to always construct `GDBusProxy` proxies.
---@param get_proxy_type_user_data? userdata # User data to pass to `get_proxy_type_func`.
---@param get_proxy_type_destroy_notify? GLib.DestroyNotify # Free function for `get_proxy_type_user_data` or `nil`.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`
---@return Gio.DBusObjectManagerClient # A `GDBusObjectManagerClient` object or `nil` if `error` is set. Free with `g_object_unref()`.
function Gio.DBusObjectManagerClient.new_for_bus_sync(bus_type, flags, name, object_path, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable) end

--- # function Gio.DBusObjectManagerClient.new_sync()
---
--- Creates a new `GDBusObjectManagerClient` object.
--- 
--- This is a synchronous failable constructor - the calling thread is
--- blocked until a reply is received. See `g_dbus_object_manager_client_new()`
--- for the asynchronous version.
---
--- ---
---
---@param connection Gio.DBusConnection # A `GDBusConnection`.
---@param flags Gio.DBusObjectManagerClientFlags # Zero or more flags from the `GDBusObjectManagerClientFlags` enumeration.
---@param name? string # The owner of the control object (unique or well-known name), or `nil` when not using a message bus connection.
---@param object_path string # The object path of the control object.
---@param get_proxy_type_func? Gio.DBusProxyTypeFunc # A `GDBusProxyTypeFunc` function or `nil` to always construct `GDBusProxy` proxies.
---@param get_proxy_type_user_data? userdata # User data to pass to `get_proxy_type_func`.
---@param get_proxy_type_destroy_notify? GLib.DestroyNotify # Free function for `get_proxy_type_user_data` or `nil`.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`
---@return Gio.DBusObjectManagerClient # A `GDBusObjectManagerClient` object or `nil` if `error` is set. Free with `g_object_unref()`.
function Gio.DBusObjectManagerClient.new_sync(connection, flags, name, object_path, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable) end

--- # record Gio.DBusObjectManagerClientClass
---
--- Class structure for `GDBusObjectManagerClient`.
---
--- ---
---
---@class Gio.DBusObjectManagerClientClass
---@field parent_class GObject.ObjectClass # The parent class.
---@field interface_proxy_signal fun(manager: Gio.DBusObjectManagerClient, object_proxy: Gio.DBusObjectProxy, interface_proxy: Gio.DBusProxy, sender_name: string, signal_name: string, parameters: GLib.Variant): nil
---@field interface_proxy_properties_changed fun(manager: Gio.DBusObjectManagerClient, object_proxy: Gio.DBusObjectProxy, interface_proxy: Gio.DBusProxy, changed_properties: GLib.Variant, invalidated_properties: string): nil
---@field padding unknown[]
Gio.DBusObjectManagerClientClass = {}

---@enum Gio.DBusObjectManagerClientFlags
Gio.DBusObjectManagerClientFlags = {}

--- # record Gio.DBusObjectManagerClientPrivate
---
---@class Gio.DBusObjectManagerClientPrivate
Gio.DBusObjectManagerClientPrivate = {}

--- # record Gio.DBusObjectManagerIface
---
--- Base type for D-Bus object managers.
---
--- ---
---
---@class Gio.DBusObjectManagerIface
---@field parent_iface GObject.TypeInterface # The parent interface.
---@field get_object_path fun(manager: Gio.DBusObjectManager): string
---@field get_objects fun(manager: Gio.DBusObjectManager): Gio.DBusObject[]
---@field get_object fun(manager: Gio.DBusObjectManager, object_path: string): Gio.DBusObject
---@field get_interface fun(manager: Gio.DBusObjectManager, object_path: string, interface_name: string): Gio.DBusInterface
---@field object_added fun(manager: Gio.DBusObjectManager, object: Gio.DBusObject): nil
---@field object_removed fun(manager: Gio.DBusObjectManager, object: Gio.DBusObject): nil
---@field interface_added fun(manager: Gio.DBusObjectManager, object: Gio.DBusObject, interface_: Gio.DBusInterface): nil
---@field interface_removed fun(manager: Gio.DBusObjectManager, object: Gio.DBusObject, interface_: Gio.DBusInterface): nil
Gio.DBusObjectManagerIface = {}

--- # class Gio.DBusObjectManagerServer
---
--- `GDBusObjectManagerServer` is used to export `GDBusObject` instances using
--- the standardized
--- [org.freedesktop.DBus.ObjectManager](http://dbus.freedesktop.org/doc/dbus-specification.html`standard`-interfaces-objectmanager)
--- interface. For example, remote D-Bus clients can get all objects
--- and properties in a single call. Additionally, any change in the
--- object hierarchy is broadcast using signals. This means that D-Bus
--- clients can keep caches up to date by only listening to D-Bus
--- signals.
--- 
--- The recommended path to export an object manager at is the path form of the
--- well-known name of a D-Bus service, or below. For example, if a D-Bus service
--- is available at the well-known name `net.example.ExampleService1`, the object
--- manager should typically be exported at `/net/example/ExampleService1`, or
--- below (to allow for multiple object managers in a service).
--- 
--- It is supported, but not recommended, to export an object manager at the root
--- path, `/`.
--- 
--- See `GDBusObjectManagerClient` for the client-side code that is
--- intended to be used with `GDBusObjectManagerServer` or any D-Bus
--- object implementing the org.freedesktop.DBus.ObjectManager
--- interface.
---
--- ---
---
---@class Gio.DBusObjectManagerServer : GObject.Object, Gio.DBusObjectManager
---@field parent_instance GObject.Object
---@field priv Gio.DBusObjectManagerServerPrivate
---@operator call: Gio.DBusObjectManagerServer
Gio.DBusObjectManagerServer = {}

--- # method Gio.DBusObjectManagerServer:export()
---
--- Exports `object` on `manager`.
--- 
--- If there is already a `GDBusObject` exported at the object path,
--- then the old object is removed.
--- 
--- The object path for `object` must be in the hierarchy rooted by the
--- object path for `manager`.
--- 
--- Note that `manager` will take a reference on `object` for as long as
--- it is exported.
---
--- ---
---
---@param self Gio.DBusObjectManagerServer # A `GDBusObjectManagerServer`.
---@param object Gio.DBusObjectSkeleton # A `GDBusObjectSkeleton`.
---@return nil
function Gio.DBusObjectManagerServer:export(object) end

--- # method Gio.DBusObjectManagerServer:export_uniquely()
---
--- Like `g_dbus_object_manager_server_export()` but appends a string of
--- the form _N (with N being a natural number) to `object`'s object path
--- if an object with the given path already exists. As such, the
--- `GDBusObjectProxy`:g-object-path property of `object` may be modified.
---
--- ---
---
---@param self Gio.DBusObjectManagerServer # A `GDBusObjectManagerServer`.
---@param object Gio.DBusObjectSkeleton # An object.
---@return nil
function Gio.DBusObjectManagerServer:export_uniquely(object) end

--- # method Gio.DBusObjectManagerServer:get_connection()
---
--- Gets the `GDBusConnection` used by `manager`.
---
--- ---
---
---@param self Gio.DBusObjectManagerServer # A `GDBusObjectManagerServer`
---@return Gio.DBusConnection # A `GDBusConnection` object or `nil` if `manager` isn't exported on a connection. The returned object should be freed with `g_object_unref()`.
function Gio.DBusObjectManagerServer:get_connection() end

--- # method Gio.DBusObjectManagerServer:is_exported()
---
--- Returns whether `object` is currently exported on `manager`.
---
--- ---
---
---@param self Gio.DBusObjectManagerServer # A `GDBusObjectManagerServer`.
---@param object Gio.DBusObjectSkeleton # An object.
---@return (boolean|nil) # `true` if `object` is exported
function Gio.DBusObjectManagerServer:is_exported(object) end

--- # method Gio.DBusObjectManagerServer:set_connection()
---
--- Exports all objects managed by `manager` on `connection`. If
--- `connection` is `nil`, stops exporting objects.
---
--- ---
---
---@param self Gio.DBusObjectManagerServer # A `GDBusObjectManagerServer`.
---@param connection? Gio.DBusConnection # A `GDBusConnection` or `nil`.
---@return nil
function Gio.DBusObjectManagerServer:set_connection(connection) end

--- # method Gio.DBusObjectManagerServer:unexport()
---
--- If `manager` has an object at `path`, removes the object. Otherwise
--- does nothing.
--- 
--- Note that `object_path` must be in the hierarchy rooted by the
--- object path for `manager`.
---
--- ---
---
---@param self Gio.DBusObjectManagerServer # A `GDBusObjectManagerServer`.
---@param object_path string # An object path.
---@return (boolean|nil) # `true` if object at `object_path` was removed, `false` otherwise.
function Gio.DBusObjectManagerServer:unexport(object_path) end

--- # function Gio.DBusObjectManagerServer.new()
---
--- Creates a new `GDBusObjectManagerServer` object.
--- 
--- The returned server isn't yet exported on any connection. To do so,
--- use `g_dbus_object_manager_server_set_connection()`. Normally you
--- want to export all of your objects before doing so to avoid
--- [InterfacesAdded](http://dbus.freedesktop.org/doc/dbus-specification.html`standard`-interfaces-objectmanager)
--- signals being emitted.
---
--- ---
---
---@param object_path string # The object path to export the manager object at.
---@return Gio.DBusObjectManagerServer # A `GDBusObjectManagerServer` object. Free with `g_object_unref()`.
function Gio.DBusObjectManagerServer.new(object_path) end

--- # record Gio.DBusObjectManagerServerClass
---
--- Class structure for `GDBusObjectManagerServer`.
---
--- ---
---
---@class Gio.DBusObjectManagerServerClass
---@field parent_class GObject.ObjectClass # The parent class.
---@field padding unknown[]
Gio.DBusObjectManagerServerClass = {}

--- # record Gio.DBusObjectManagerServerPrivate
---
---@class Gio.DBusObjectManagerServerPrivate
Gio.DBusObjectManagerServerPrivate = {}

--- # class Gio.DBusObjectProxy
---
--- A `GDBusObjectProxy` is an object used to represent a remote object
--- with one or more D-Bus interfaces. Normally, you don't instantiate
--- a `GDBusObjectProxy` yourself - typically `GDBusObjectManagerClient`
--- is used to obtain it.
---
--- ---
---
---@class Gio.DBusObjectProxy : GObject.Object, Gio.DBusObject
---@field parent_instance GObject.Object
---@field priv Gio.DBusObjectProxyPrivate
---@operator call: Gio.DBusObjectProxy
Gio.DBusObjectProxy = {}

--- # method Gio.DBusObjectProxy:get_connection()
---
--- Gets the connection that `proxy` is for.
---
--- ---
---
---@param self Gio.DBusObjectProxy # a `GDBusObjectProxy`
---@return Gio.DBusConnection # A `GDBusConnection`. Do not free, the object is owned by `proxy`.
function Gio.DBusObjectProxy:get_connection() end

--- # function Gio.DBusObjectProxy.new()
---
--- Creates a new `GDBusObjectProxy` for the given connection and
--- object path.
---
--- ---
---
---@param connection Gio.DBusConnection # a `GDBusConnection`
---@param object_path string # the object path
---@return Gio.DBusObjectProxy # a new `GDBusObjectProxy`
function Gio.DBusObjectProxy.new(connection, object_path) end

--- # record Gio.DBusObjectProxyClass
---
--- Class structure for `GDBusObjectProxy`.
---
--- ---
---
---@class Gio.DBusObjectProxyClass
---@field parent_class GObject.ObjectClass # The parent class.
---@field padding unknown[]
Gio.DBusObjectProxyClass = {}

--- # record Gio.DBusObjectProxyPrivate
---
---@class Gio.DBusObjectProxyPrivate
Gio.DBusObjectProxyPrivate = {}

--- # class Gio.DBusObjectSkeleton
---
--- A `GDBusObjectSkeleton` instance is essentially a group of D-Bus
--- interfaces. The set of exported interfaces on the object may be
--- dynamic and change at runtime.
--- 
--- This type is intended to be used with `GDBusObjectManager`.
---
--- ---
---
---@class Gio.DBusObjectSkeleton : GObject.Object, Gio.DBusObject
---@field parent_instance GObject.Object
---@field priv Gio.DBusObjectSkeletonPrivate
---@operator call: Gio.DBusObjectSkeleton
Gio.DBusObjectSkeleton = {}

--- # method Gio.DBusObjectSkeleton:add_interface()
---
--- Adds `interface_` to `object`.
--- 
--- If `object` already contains a `GDBusInterfaceSkeleton` with the same
--- interface name, it is removed before `interface_` is added.
--- 
--- Note that `object` takes its own reference on `interface_` and holds
--- it until removed.
---
--- ---
---
---@param self Gio.DBusObjectSkeleton # A `GDBusObjectSkeleton`.
---@param interface_ Gio.DBusInterfaceSkeleton # A `GDBusInterfaceSkeleton`.
---@return nil
function Gio.DBusObjectSkeleton:add_interface(interface_) end

--- # method Gio.DBusObjectSkeleton:flush()
---
--- This method simply calls `g_dbus_interface_skeleton_flush()` on all
--- interfaces belonging to `object`. See that method for when flushing
--- is useful.
---
--- ---
---
---@param self Gio.DBusObjectSkeleton # A `GDBusObjectSkeleton`.
---@return nil
function Gio.DBusObjectSkeleton:flush() end

--- # method Gio.DBusObjectSkeleton:remove_interface()
---
--- Removes `interface_` from `object`.
---
--- ---
---
---@param self Gio.DBusObjectSkeleton # A `GDBusObjectSkeleton`.
---@param interface_ Gio.DBusInterfaceSkeleton # A `GDBusInterfaceSkeleton`.
---@return nil
function Gio.DBusObjectSkeleton:remove_interface(interface_) end

--- # method Gio.DBusObjectSkeleton:remove_interface_by_name()
---
--- Removes the `GDBusInterface` with `interface_name` from `object`.
--- 
--- If no D-Bus interface of the given interface exists, this function
--- does nothing.
---
--- ---
---
---@param self Gio.DBusObjectSkeleton # A `GDBusObjectSkeleton`.
---@param interface_name string # A D-Bus interface name.
---@return nil
function Gio.DBusObjectSkeleton:remove_interface_by_name(interface_name) end

--- # method Gio.DBusObjectSkeleton:set_object_path()
---
--- Sets the object path for `object`.
---
--- ---
---
---@param self Gio.DBusObjectSkeleton # A `GDBusObjectSkeleton`.
---@param object_path string # A valid D-Bus object path.
---@return nil
function Gio.DBusObjectSkeleton:set_object_path(object_path) end

--- # function Gio.DBusObjectSkeleton.new()
---
--- Creates a new `GDBusObjectSkeleton`.
---
--- ---
---
---@param object_path string # An object path.
---@return Gio.DBusObjectSkeleton # A `GDBusObjectSkeleton`. Free with `g_object_unref()`.
function Gio.DBusObjectSkeleton.new(object_path) end

--- # record Gio.DBusObjectSkeletonClass
---
--- Class structure for `GDBusObjectSkeleton`.
---
--- ---
---
---@class Gio.DBusObjectSkeletonClass
---@field parent_class GObject.ObjectClass # The parent class.
---@field authorize_method fun(object: Gio.DBusObjectSkeleton, interface_: Gio.DBusInterfaceSkeleton, invocation: Gio.DBusMethodInvocation): (boolean|nil)
---@field padding unknown[]
Gio.DBusObjectSkeletonClass = {}

--- # record Gio.DBusObjectSkeletonPrivate
---
---@class Gio.DBusObjectSkeletonPrivate
Gio.DBusObjectSkeletonPrivate = {}

--- # record Gio.DBusPropertyInfo
---
--- Information about a D-Bus property on a D-Bus interface.
---
--- ---
---
---@class Gio.DBusPropertyInfo
---@field ref_count integer # The reference count or -1 if statically allocated.
---@field name string # The name of the D-Bus property, e.g. "SupportedFilesystems".
---@field signature string # The D-Bus signature of the property (a single complete type).
---@field flags Gio.DBusPropertyInfoFlags # Access control flags for the property.
---@field annotations unknown[] # A pointer to a `nil`-terminated array of pointers to `GDBusAnnotationInfo` structures or `nil` if there are no annotations.
Gio.DBusPropertyInfo = {}

--- # method Gio.DBusPropertyInfo:ref()
---
--- If `info` is statically allocated does nothing. Otherwise increases
--- the reference count.
---
--- ---
---
---@param self Gio.DBusPropertyInfo # A `GDBusPropertyInfo`
---@return Gio.DBusPropertyInfo # The same `info`.
function Gio.DBusPropertyInfo:ref() end

--- # method Gio.DBusPropertyInfo:unref()
---
--- If `info` is statically allocated, does nothing. Otherwise decreases
--- the reference count of `info`. When its reference count drops to 0,
--- the memory used is freed.
---
--- ---
---
---@param self Gio.DBusPropertyInfo # A `GDBusPropertyInfo`.
---@return nil
function Gio.DBusPropertyInfo:unref() end

---@enum Gio.DBusPropertyInfoFlags
Gio.DBusPropertyInfoFlags = {}

--- # class Gio.DBusProxy
---
--- `GDBusProxy` is a base class used for proxies to access a D-Bus
--- interface on a remote object. A `GDBusProxy` can be constructed for
--- both well-known and unique names.
--- 
--- By default, `GDBusProxy` will cache all properties (and listen to
--- changes) of the remote object, and proxy all signals that get
--- emitted. This behaviour can be changed by passing suitable
--- `GDBusProxyFlags` when the proxy is created. If the proxy is for a
--- well-known name, the property cache is flushed when the name owner
--- vanishes and reloaded when a name owner appears.
--- 
--- The unique name owner of the proxy's name is tracked and can be read from
--- `GDBusProxy`:g-name-owner. Connect to the `GObject`::notify signal to
--- get notified of changes. Additionally, only signals and property
--- changes emitted from the current name owner are considered and
--- calls are always sent to the current name owner. This avoids a
--- number of race conditions when the name is lost by one owner and
--- claimed by another. However, if no name owner currently exists,
--- then calls will be sent to the well-known name which may result in
--- the message bus launching an owner (unless
--- %G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START is set).
--- 
--- If the proxy is for a stateless D-Bus service, where the name owner may
--- be started and stopped between calls, the `GDBusProxy`:g-name-owner tracking
--- of `GDBusProxy` will cause the proxy to drop signal and property changes from
--- the service after it has restarted for the first time. When interacting
--- with a stateless D-Bus service, do not use `GDBusProxy` — use direct D-Bus
--- method calls and signal connections.
--- 
--- The generic `GDBusProxy`::g-properties-changed and
--- `GDBusProxy`::g-signal signals are not very convenient to work with.
--- Therefore, the recommended way of working with proxies is to subclass
--- `GDBusProxy`, and have more natural properties and signals in your derived
--- class. This [example][gdbus-example-gdbus-codegen] shows how this can
--- easily be done using the [gdbus-codegen][gdbus-codegen] tool.
--- 
--- A `GDBusProxy` instance can be used from multiple threads but note
--- that all signals (e.g. `GDBusProxy`::g-signal, `GDBusProxy`::g-properties-changed
--- and `GObject`::notify) are emitted in the
--- [thread-default main context][g-main-context-push-thread-default]
--- of the thread where the instance was constructed.
--- 
--- An example using a proxy for a well-known name can be found in
--- [gdbus-example-watch-proxy.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gdbus-example-watch-proxy.c)
---
--- ---
---
---@class Gio.DBusProxy : GObject.Object, Gio.AsyncInitable, Gio.DBusInterface, Gio.Initable
---@field parent_instance GObject.Object
---@field priv Gio.DBusProxyPrivate
---@operator call: Gio.DBusProxy
Gio.DBusProxy = {}

--- # method Gio.DBusProxy:call()
---
--- Asynchronously invokes the `method_name` method on `proxy`.
--- 
--- If `method_name` contains any dots, then `name` is split into interface and
--- method name parts. This allows using `proxy` for invoking methods on
--- other interfaces.
--- 
--- If the `GDBusConnection` associated with `proxy` is closed then
--- the operation will fail with %G_IO_ERROR_CLOSED. If
--- `cancellable` is canceled, the operation will fail with
--- %G_IO_ERROR_CANCELLED. If `parameters` contains a value not
--- compatible with the D-Bus protocol, the operation fails with
--- %G_IO_ERROR_INVALID_ARGUMENT.
--- 
--- If the `parameters` `GVariant` is floating, it is consumed. This allows
--- convenient 'inline' use of `g_variant_new()`, e.g.:
--- ```c
---  g_dbus_proxy_call (proxy,
---                     "TwoStrings",
---                     g_variant_new ("(ss)",
---                                    "Thing One",
---                                    "Thing Two"),
---                     G_DBUS_CALL_FLAGS_NONE,
---                     -1,
---                     NULL,
---                     (GAsyncReadyCallback) two_strings_done,
---                     &data);
--- ```
--- 
--- If `proxy` has an expected interface (see
--- `GDBusProxy`:g-interface-info) and `method_name` is referenced by it,
--- then the return value is checked against the return type.
--- 
--- This is an asynchronous method. When the operation is finished,
--- `callback` will be invoked in the
--- [thread-default main context][g-main-context-push-thread-default]
--- of the thread you are calling this method from.
--- You can then call `g_dbus_proxy_call_finish()` to get the result of
--- the operation. See `g_dbus_proxy_call_sync()` for the synchronous
--- version of this method.
--- 
--- If `callback` is `nil` then the D-Bus method call message will be sent with
--- the %G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED flag set.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`.
---@param method_name string # Name of method to invoke.
---@param parameters? GLib.Variant # A `GVariant` tuple with parameters for the signal or `nil` if not passing parameters.
---@param flags Gio.DBusCallFlags # Flags from the `GDBusCallFlags` enumeration.
---@param timeout_msec integer # The timeout in milliseconds (with %G_MAXINT meaning "infinite") or -1 to use the proxy default timeout.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`.
---@param callback? Gio.AsyncReadyCallback # A `GAsyncReadyCallback` to call when the request is satisfied or `nil` if you don't care about the result of the method invocation.
---@param user_data? userdata # The data to pass to `callback`.
---@return nil
function Gio.DBusProxy:call(method_name, parameters, flags, timeout_msec, cancellable, callback, user_data) end

--- # method Gio.DBusProxy:call_finish()
---
--- Finishes an operation started with `g_dbus_proxy_call()`.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`.
---@param res Gio.AsyncResult # A `GAsyncResult` obtained from the `GAsyncReadyCallback` passed to `g_dbus_proxy_call()`.
---@return GLib.Variant # `nil` if `error` is set. Otherwise a `GVariant` tuple with return values. Free with `g_variant_unref()`.
function Gio.DBusProxy:call_finish(res) end

--- # method Gio.DBusProxy:call_sync()
---
--- Synchronously invokes the `method_name` method on `proxy`.
--- 
--- If `method_name` contains any dots, then `name` is split into interface and
--- method name parts. This allows using `proxy` for invoking methods on
--- other interfaces.
--- 
--- If the `GDBusConnection` associated with `proxy` is disconnected then
--- the operation will fail with %G_IO_ERROR_CLOSED. If
--- `cancellable` is canceled, the operation will fail with
--- %G_IO_ERROR_CANCELLED. If `parameters` contains a value not
--- compatible with the D-Bus protocol, the operation fails with
--- %G_IO_ERROR_INVALID_ARGUMENT.
--- 
--- If the `parameters` `GVariant` is floating, it is consumed. This allows
--- convenient 'inline' use of `g_variant_new()`, e.g.:
--- ```c
---  g_dbus_proxy_call_sync (proxy,
---                          "TwoStrings",
---                          g_variant_new ("(ss)",
---                                         "Thing One",
---                                         "Thing Two"),
---                          G_DBUS_CALL_FLAGS_NONE,
---                          -1,
---                          NULL,
---                          &error);
--- ```
--- 
--- The calling thread is blocked until a reply is received. See
--- `g_dbus_proxy_call()` for the asynchronous version of this
--- method.
--- 
--- If `proxy` has an expected interface (see
--- `GDBusProxy`:g-interface-info) and `method_name` is referenced by it,
--- then the return value is checked against the return type.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`.
---@param method_name string # Name of method to invoke.
---@param parameters? GLib.Variant # A `GVariant` tuple with parameters for the signal or `nil` if not passing parameters.
---@param flags Gio.DBusCallFlags # Flags from the `GDBusCallFlags` enumeration.
---@param timeout_msec integer # The timeout in milliseconds (with %G_MAXINT meaning "infinite") or -1 to use the proxy default timeout.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`.
---@return GLib.Variant # `nil` if `error` is set. Otherwise a `GVariant` tuple with return values. Free with `g_variant_unref()`.
function Gio.DBusProxy:call_sync(method_name, parameters, flags, timeout_msec, cancellable) end

--- # method Gio.DBusProxy:call_with_unix_fd_list()
---
--- Like `g_dbus_proxy_call()` but also takes a `GUnixFDList` object.
--- 
--- This method is only available on UNIX.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`.
---@param method_name string # Name of method to invoke.
---@param parameters? GLib.Variant # A `GVariant` tuple with parameters for the signal or `nil` if not passing parameters.
---@param flags Gio.DBusCallFlags # Flags from the `GDBusCallFlags` enumeration.
---@param timeout_msec integer # The timeout in milliseconds (with %G_MAXINT meaning "infinite") or -1 to use the proxy default timeout.
---@param fd_list? Gio.UnixFDList # A `GUnixFDList` or `nil`.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`.
---@param callback? Gio.AsyncReadyCallback # A `GAsyncReadyCallback` to call when the request is satisfied or `nil` if you don't care about the result of the method invocation.
---@param user_data? userdata # The data to pass to `callback`.
---@return nil
function Gio.DBusProxy:call_with_unix_fd_list(method_name, parameters, flags, timeout_msec, fd_list, cancellable, callback, user_data) end

--- # method Gio.DBusProxy:call_with_unix_fd_list_finish()
---
--- Finishes an operation started with `g_dbus_proxy_call_with_unix_fd_list()`.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`.
---@param out_fd_list? Gio.UnixFDList # Return location for a `GUnixFDList` or `nil`.
---@param res Gio.AsyncResult # A `GAsyncResult` obtained from the `GAsyncReadyCallback` passed to `g_dbus_proxy_call_with_unix_fd_list()`.
---@return GLib.Variant # `nil` if `error` is set. Otherwise a `GVariant` tuple with return values. Free with `g_variant_unref()`.
function Gio.DBusProxy:call_with_unix_fd_list_finish(out_fd_list, res) end

--- # method Gio.DBusProxy:call_with_unix_fd_list_sync()
---
--- Like `g_dbus_proxy_call_sync()` but also takes and returns `GUnixFDList` objects.
--- 
--- This method is only available on UNIX.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`.
---@param method_name string # Name of method to invoke.
---@param parameters? GLib.Variant # A `GVariant` tuple with parameters for the signal or `nil` if not passing parameters.
---@param flags Gio.DBusCallFlags # Flags from the `GDBusCallFlags` enumeration.
---@param timeout_msec integer # The timeout in milliseconds (with %G_MAXINT meaning "infinite") or -1 to use the proxy default timeout.
---@param fd_list? Gio.UnixFDList # A `GUnixFDList` or `nil`.
---@param out_fd_list? Gio.UnixFDList # Return location for a `GUnixFDList` or `nil`.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`.
---@return GLib.Variant # `nil` if `error` is set. Otherwise a `GVariant` tuple with return values. Free with `g_variant_unref()`.
function Gio.DBusProxy:call_with_unix_fd_list_sync(method_name, parameters, flags, timeout_msec, fd_list, out_fd_list, cancellable) end

--- # method Gio.DBusProxy:get_cached_property()
---
--- Looks up the value for a property from the cache. This call does no
--- blocking IO.
--- 
--- If `proxy` has an expected interface (see
--- `GDBusProxy`:g-interface-info) and `property_name` is referenced by
--- it, then `value` is checked against the type of the property.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`.
---@param property_name string # Property name.
---@return GLib.Variant # A reference to the `GVariant` instance that holds the value for `property_name` or `nil` if the value is not in the cache. The returned reference must be freed with `g_variant_unref()`.
function Gio.DBusProxy:get_cached_property(property_name) end

--- # method Gio.DBusProxy:get_cached_property_names()
---
--- Gets the names of all cached properties on `proxy`.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`.
---@return unknown[] # A `nil`-terminated array of strings or `nil` if `proxy` has no cached properties. Free the returned array with `g_strfreev()`.
function Gio.DBusProxy:get_cached_property_names() end

--- # method Gio.DBusProxy:get_connection()
---
--- Gets the connection `proxy` is for.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`.
---@return Gio.DBusConnection # A `GDBusConnection` owned by `proxy`. Do not free.
function Gio.DBusProxy:get_connection() end

--- # method Gio.DBusProxy:get_default_timeout()
---
--- Gets the timeout to use if -1 (specifying default timeout) is
--- passed as `timeout_msec` in the `g_dbus_proxy_call()` and
--- `g_dbus_proxy_call_sync()` functions.
--- 
--- See the `GDBusProxy`:g-default-timeout property for more details.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`.
---@return integer # Timeout to use for `proxy`.
function Gio.DBusProxy:get_default_timeout() end

--- # method Gio.DBusProxy:get_flags()
---
--- Gets the flags that `proxy` was constructed with.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`.
---@return Gio.DBusProxyFlags # Flags from the `GDBusProxyFlags` enumeration.
function Gio.DBusProxy:get_flags() end

--- # method Gio.DBusProxy:get_interface_info()
---
--- Returns the `GDBusInterfaceInfo`, if any, specifying the interface
--- that `proxy` conforms to. See the `GDBusProxy`:g-interface-info
--- property for more details.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`
---@return Gio.DBusInterfaceInfo # A `GDBusInterfaceInfo` or `nil`. Do not unref the returned object, it is owned by `proxy`.
function Gio.DBusProxy:get_interface_info() end

--- # method Gio.DBusProxy:get_interface_name()
---
--- Gets the D-Bus interface name `proxy` is for.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`.
---@return string # A string owned by `proxy`. Do not free.
function Gio.DBusProxy:get_interface_name() end

--- # method Gio.DBusProxy:get_name()
---
--- Gets the name that `proxy` was constructed for.
--- 
--- When connected to a message bus, this will usually be non-`nil`.
--- However, it may be `nil` for a proxy that communicates using a peer-to-peer
--- pattern.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`.
---@return string # A string owned by `proxy`. Do not free.
function Gio.DBusProxy:get_name() end

--- # method Gio.DBusProxy:get_name_owner()
---
--- The unique name that owns the name that `proxy` is for or `nil` if
--- no-one currently owns that name. You may connect to the
--- `GObject`::notify signal to track changes to the
--- `GDBusProxy`:g-name-owner property.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`.
---@return string # The name owner or `nil` if no name owner exists. Free with `g_free()`.
function Gio.DBusProxy:get_name_owner() end

--- # method Gio.DBusProxy:get_object_path()
---
--- Gets the object path `proxy` is for.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`.
---@return string # A string owned by `proxy`. Do not free.
function Gio.DBusProxy:get_object_path() end

--- # method Gio.DBusProxy:set_cached_property()
---
--- If `value` is not `nil`, sets the cached value for the property with
--- name `property_name` to the value in `value`.
--- 
--- If `value` is `nil`, then the cached value is removed from the
--- property cache.
--- 
--- If `proxy` has an expected interface (see
--- `GDBusProxy`:g-interface-info) and `property_name` is referenced by
--- it, then `value` is checked against the type of the property.
--- 
--- If the `value` `GVariant` is floating, it is consumed. This allows
--- convenient 'inline' use of `g_variant_new()`, e.g.
--- ```c
---  g_dbus_proxy_set_cached_property (proxy,
---                                    "SomeProperty",
---                                    g_variant_new ("(si)",
---                                                  "A String",
---                                                  42));
--- ```
--- 
--- Normally you will not need to use this method since `proxy`
--- is tracking changes using the
--- `org.freedesktop.DBus.Properties.PropertiesChanged`
--- D-Bus signal. However, for performance reasons an object may
--- decide to not use this signal for some properties and instead
--- use a proprietary out-of-band mechanism to transmit changes.
--- 
--- As a concrete example, consider an object with a property
--- `ChatroomParticipants` which is an array of strings. Instead of
--- transmitting the same (long) array every time the property changes,
--- it is more efficient to only transmit the delta using e.g. signals
--- `ChatroomParticipantJoined(String name)` and
--- `ChatroomParticipantParted(String name)`.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`
---@param property_name string # Property name.
---@param value? GLib.Variant # Value for the property or `nil` to remove it from the cache.
---@return nil
function Gio.DBusProxy:set_cached_property(property_name, value) end

--- # method Gio.DBusProxy:set_default_timeout()
---
--- Sets the timeout to use if -1 (specifying default timeout) is
--- passed as `timeout_msec` in the `g_dbus_proxy_call()` and
--- `g_dbus_proxy_call_sync()` functions.
--- 
--- See the `GDBusProxy`:g-default-timeout property for more details.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`.
---@param timeout_msec integer # Timeout in milliseconds.
---@return nil
function Gio.DBusProxy:set_default_timeout(timeout_msec) end

--- # method Gio.DBusProxy:set_interface_info()
---
--- Ensure that interactions with `proxy` conform to the given
--- interface. See the `GDBusProxy`:g-interface-info property for more
--- details.
---
--- ---
---
---@param self Gio.DBusProxy # A `GDBusProxy`
---@param info? Gio.DBusInterfaceInfo # Minimum interface this proxy conforms to or `nil` to unset.
---@return nil
function Gio.DBusProxy:set_interface_info(info) end

--- # function Gio.DBusProxy.new()
---
--- Creates a proxy for accessing `interface_name` on the remote object
--- at `object_path` owned by `name` at `connection` and asynchronously
--- loads D-Bus properties unless the
--- %G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES flag is used. Connect to
--- the `GDBusProxy`::g-properties-changed signal to get notified about
--- property changes.
--- 
--- If the %G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS flag is not set, also sets up
--- match rules for signals. Connect to the `GDBusProxy`::g-signal signal
--- to handle signals from the remote object.
--- 
--- If both %G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES and
--- %G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS are set, this constructor is
--- guaranteed to complete immediately without blocking.
--- 
--- If `name` is a well-known name and the
--- %G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START and %G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION
--- flags aren't set and no name owner currently exists, the message bus
--- will be requested to launch a name owner for the name.
--- 
--- This is a failable asynchronous constructor - when the proxy is
--- ready, `callback` will be invoked and you can use
--- `g_dbus_proxy_new_finish()` to get the result.
--- 
--- See `g_dbus_proxy_new_sync()` and for a synchronous version of this constructor.
--- 
--- `GDBusProxy` is used in this [example][gdbus-wellknown-proxy].
---
--- ---
---
---@param connection Gio.DBusConnection # A `GDBusConnection`.
---@param flags Gio.DBusProxyFlags # Flags used when constructing the proxy.
---@param info? Gio.DBusInterfaceInfo # A `GDBusInterfaceInfo` specifying the minimal interface that `proxy` conforms to or `nil`.
---@param name? string # A bus name (well-known or unique) or `nil` if `connection` is not a message bus connection.
---@param object_path string # An object path.
---@param interface_name string # A D-Bus interface name.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`.
---@param callback? Gio.AsyncReadyCallback # Callback function to invoke when the proxy is ready.
---@param user_data? userdata # User data to pass to `callback`.
---@return nil
function Gio.DBusProxy.new(connection, flags, info, name, object_path, interface_name, cancellable, callback, user_data) end

--- # function Gio.DBusProxy.new_for_bus()
---
--- Like `g_dbus_proxy_new()` but takes a `GBusType` instead of a `GDBusConnection`.
--- 
--- `GDBusProxy` is used in this [example][gdbus-wellknown-proxy].
---
--- ---
---
---@param bus_type Gio.BusType # A `GBusType`.
---@param flags Gio.DBusProxyFlags # Flags used when constructing the proxy.
---@param info? Gio.DBusInterfaceInfo # A `GDBusInterfaceInfo` specifying the minimal interface that `proxy` conforms to or `nil`.
---@param name string # A bus name (well-known or unique).
---@param object_path string # An object path.
---@param interface_name string # A D-Bus interface name.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`.
---@param callback? Gio.AsyncReadyCallback # Callback function to invoke when the proxy is ready.
---@param user_data? userdata # User data to pass to `callback`.
---@return nil
function Gio.DBusProxy.new_for_bus(bus_type, flags, info, name, object_path, interface_name, cancellable, callback, user_data) end

--- # function Gio.DBusProxy.new_finish()
---
--- Finishes creating a `GDBusProxy`.
---
--- ---
---
---@param res Gio.AsyncResult # A `GAsyncResult` obtained from the `GAsyncReadyCallback` function passed to `g_dbus_proxy_new()`.
---@return Gio.DBusProxy # A `GDBusProxy` or `nil` if `error` is set. Free with `g_object_unref()`.
function Gio.DBusProxy.new_finish(res) end

--- # function Gio.DBusProxy.new_for_bus_finish()
---
--- Finishes creating a `GDBusProxy`.
---
--- ---
---
---@param res Gio.AsyncResult # A `GAsyncResult` obtained from the `GAsyncReadyCallback` function passed to `g_dbus_proxy_new_for_bus()`.
---@return Gio.DBusProxy # A `GDBusProxy` or `nil` if `error` is set. Free with `g_object_unref()`.
function Gio.DBusProxy.new_for_bus_finish(res) end

--- # function Gio.DBusProxy.new_for_bus_sync()
---
--- Like `g_dbus_proxy_new_sync()` but takes a `GBusType` instead of a `GDBusConnection`.
--- 
--- `GDBusProxy` is used in this [example][gdbus-wellknown-proxy].
---
--- ---
---
---@param bus_type Gio.BusType # A `GBusType`.
---@param flags Gio.DBusProxyFlags # Flags used when constructing the proxy.
---@param info? Gio.DBusInterfaceInfo # A `GDBusInterfaceInfo` specifying the minimal interface that `proxy` conforms to or `nil`.
---@param name string # A bus name (well-known or unique).
---@param object_path string # An object path.
---@param interface_name string # A D-Bus interface name.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`.
---@return Gio.DBusProxy # A `GDBusProxy` or `nil` if error is set. Free with `g_object_unref()`.
function Gio.DBusProxy.new_for_bus_sync(bus_type, flags, info, name, object_path, interface_name, cancellable) end

--- # function Gio.DBusProxy.new_sync()
---
--- Creates a proxy for accessing `interface_name` on the remote object
--- at `object_path` owned by `name` at `connection` and synchronously
--- loads D-Bus properties unless the
--- %G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES flag is used.
--- 
--- If the %G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS flag is not set, also sets up
--- match rules for signals. Connect to the `GDBusProxy`::g-signal signal
--- to handle signals from the remote object.
--- 
--- If both %G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES and
--- %G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS are set, this constructor is
--- guaranteed to return immediately without blocking.
--- 
--- If `name` is a well-known name and the
--- %G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START and %G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION
--- flags aren't set and no name owner currently exists, the message bus
--- will be requested to launch a name owner for the name.
--- 
--- This is a synchronous failable constructor. See `g_dbus_proxy_new()`
--- and `g_dbus_proxy_new_finish()` for the asynchronous version.
--- 
--- `GDBusProxy` is used in this [example][gdbus-wellknown-proxy].
---
--- ---
---
---@param connection Gio.DBusConnection # A `GDBusConnection`.
---@param flags Gio.DBusProxyFlags # Flags used when constructing the proxy.
---@param info? Gio.DBusInterfaceInfo # A `GDBusInterfaceInfo` specifying the minimal interface that `proxy` conforms to or `nil`.
---@param name? string # A bus name (well-known or unique) or `nil` if `connection` is not a message bus connection.
---@param object_path string # An object path.
---@param interface_name string # A D-Bus interface name.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`.
---@return Gio.DBusProxy # A `GDBusProxy` or `nil` if error is set. Free with `g_object_unref()`.
function Gio.DBusProxy.new_sync(connection, flags, info, name, object_path, interface_name, cancellable) end

--- # record Gio.DBusProxyClass
---
--- Class structure for `GDBusProxy`.
---
--- ---
---
---@class Gio.DBusProxyClass
---@field parent_class GObject.ObjectClass
---@field g_properties_changed fun(proxy: Gio.DBusProxy, changed_properties: GLib.Variant, invalidated_properties: string): nil
---@field g_signal fun(proxy: Gio.DBusProxy, sender_name: string, signal_name: string, parameters: GLib.Variant): nil
---@field padding unknown[]
Gio.DBusProxyClass = {}

---@enum Gio.DBusProxyFlags
Gio.DBusProxyFlags = {}

--- # record Gio.DBusProxyPrivate
---
---@class Gio.DBusProxyPrivate
Gio.DBusProxyPrivate = {}

---@alias Gio.DBusProxyTypeFunc fun(manager: Gio.DBusObjectManagerClient, object_path: string, interface_name: string, data: userdata): Gio.GType

---@enum Gio.DBusSendMessageFlags
Gio.DBusSendMessageFlags = {}

--- # class Gio.DBusServer
---
--- `GDBusServer` is a helper for listening to and accepting D-Bus
--- connections. This can be used to create a new D-Bus server, allowing two
--- peers to use the D-Bus protocol for their own specialized communication.
--- A server instance provided in this way will not perform message routing or
--- implement the org.freedesktop.DBus interface.
--- 
--- To just export an object on a well-known name on a message bus, such as the
--- session or system bus, you should instead use `g_bus_own_name()`.
--- 
--- An example of peer-to-peer communication with GDBus can be found
--- in [gdbus-example-peer.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gdbus-example-peer.c).
--- 
--- Note that a minimal `GDBusServer` will accept connections from any
--- peer. In many use-cases it will be necessary to add a `GDBusAuthObserver`
--- that only accepts connections that have successfully authenticated
--- as the same user that is running the `GDBusServer`. Since GLib 2.68 this can
--- be achieved more simply by passing the
--- %G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER flag to the server.
---
--- ---
---
---@class Gio.DBusServer : GObject.Object, Gio.Initable
Gio.DBusServer = {}

--- # method Gio.DBusServer:get_client_address()
---
--- Gets a
--- [D-Bus address](https://dbus.freedesktop.org/doc/dbus-specification.html`addresses`)
--- string that can be used by clients to connect to `server`.
--- 
--- This is valid and non-empty if initializing the `GDBusServer` succeeded.
---
--- ---
---
---@param self Gio.DBusServer # A `GDBusServer`.
---@return string # A D-Bus address string. Do not free, the string is owned by `server`.
function Gio.DBusServer:get_client_address() end

--- # method Gio.DBusServer:get_flags()
---
--- Gets the flags for `server`.
---
--- ---
---
---@param self Gio.DBusServer # A `GDBusServer`.
---@return Gio.DBusServerFlags # A set of flags from the `GDBusServerFlags` enumeration.
function Gio.DBusServer:get_flags() end

--- # method Gio.DBusServer:get_guid()
---
--- Gets the GUID for `server`, as provided to `g_dbus_server_new_sync()`.
---
--- ---
---
---@param self Gio.DBusServer # A `GDBusServer`.
---@return string # A D-Bus GUID. Do not free this string, it is owned by `server`.
function Gio.DBusServer:get_guid() end

--- # method Gio.DBusServer:is_active()
---
--- Gets whether `server` is active.
---
--- ---
---
---@param self Gio.DBusServer # A `GDBusServer`.
---@return (boolean|nil) # `true` if server is active, `false` otherwise.
function Gio.DBusServer:is_active() end

--- # method Gio.DBusServer:start()
---
--- Starts `server`.
---
--- ---
---
---@param self Gio.DBusServer # A `GDBusServer`.
---@return nil
function Gio.DBusServer:start() end

--- # method Gio.DBusServer:stop()
---
--- Stops `server`.
---
--- ---
---
---@param self Gio.DBusServer # A `GDBusServer`.
---@return nil
function Gio.DBusServer:stop() end

--- # function Gio.DBusServer.new_sync()
---
--- Creates a new D-Bus server that listens on the first address in
--- `address` that works.
--- 
--- Once constructed, you can use `g_dbus_server_get_client_address()` to
--- get a D-Bus address string that clients can use to connect.
--- 
--- To have control over the available authentication mechanisms and
--- the users that are authorized to connect, it is strongly recommended
--- to provide a non-`nil` `GDBusAuthObserver`.
--- 
--- Connect to the `GDBusServer`::new-connection signal to handle
--- incoming connections.
--- 
--- The returned `GDBusServer` isn't active - you have to start it with
--- `g_dbus_server_start()`.
--- 
--- `GDBusServer` is used in this [example][gdbus-peer-to-peer].
--- 
--- This is a synchronous failable constructor. There is currently no
--- asynchronous version.
---
--- ---
---
---@param address string # A D-Bus address.
---@param flags Gio.DBusServerFlags # Flags from the `GDBusServerFlags` enumeration.
---@param guid string # A D-Bus GUID.
---@param observer? Gio.DBusAuthObserver # A `GDBusAuthObserver` or `nil`.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`.
---@return Gio.DBusServer # A `GDBusServer` or `nil` if `error` is set. Free with `g_object_unref()`.
function Gio.DBusServer.new_sync(address, flags, guid, observer, cancellable) end

---@enum Gio.DBusServerFlags
Gio.DBusServerFlags = {}

---@alias Gio.DBusSignalCallback fun(connection: Gio.DBusConnection, sender_name: string, object_path: string, interface_name: string, signal_name: string, parameters: GLib.Variant, user_data: userdata): nil

---@enum Gio.DBusSignalFlags
Gio.DBusSignalFlags = {}

--- # record Gio.DBusSignalInfo
---
--- Information about a signal on a D-Bus interface.
---
--- ---
---
---@class Gio.DBusSignalInfo
---@field ref_count integer # The reference count or -1 if statically allocated.
---@field name string # The name of the D-Bus signal, e.g. "NameOwnerChanged".
---@field args unknown[] # A pointer to a `nil`-terminated array of pointers to `GDBusArgInfo` structures or `nil` if there are no arguments.
---@field annotations unknown[] # A pointer to a `nil`-terminated array of pointers to `GDBusAnnotationInfo` structures or `nil` if there are no annotations.
Gio.DBusSignalInfo = {}

--- # method Gio.DBusSignalInfo:ref()
---
--- If `info` is statically allocated does nothing. Otherwise increases
--- the reference count.
---
--- ---
---
---@param self Gio.DBusSignalInfo # A `GDBusSignalInfo`
---@return Gio.DBusSignalInfo # The same `info`.
function Gio.DBusSignalInfo:ref() end

--- # method Gio.DBusSignalInfo:unref()
---
--- If `info` is statically allocated, does nothing. Otherwise decreases
--- the reference count of `info`. When its reference count drops to 0,
--- the memory used is freed.
---
--- ---
---
---@param self Gio.DBusSignalInfo # A `GDBusSignalInfo`.
---@return nil
function Gio.DBusSignalInfo:unref() end

---@alias Gio.DBusSubtreeDispatchFunc fun(connection: Gio.DBusConnection, sender: string, object_path: string, interface_name: string, node: string, out_user_data: userdata, user_data: userdata): Gio.DBusInterfaceVTable

---@alias Gio.DBusSubtreeEnumerateFunc fun(connection: Gio.DBusConnection, sender: string, object_path: string, user_data: userdata): unknown[]

---@enum Gio.DBusSubtreeFlags
Gio.DBusSubtreeFlags = {}

---@alias Gio.DBusSubtreeIntrospectFunc fun(connection: Gio.DBusConnection, sender: string, object_path: string, node: string, user_data: userdata): unknown[]

--- # record Gio.DBusSubtreeVTable
---
--- Virtual table for handling subtrees registered with `g_dbus_connection_register_subtree()`.
---
--- ---
---
---@class Gio.DBusSubtreeVTable
---@field enumerate Gio.DBusSubtreeEnumerateFunc # Function for enumerating child nodes.
---@field introspect Gio.DBusSubtreeIntrospectFunc # Function for introspecting a child node.
---@field dispatch Gio.DBusSubtreeDispatchFunc # Function for dispatching a remote call on a child node.
---@field padding unknown[]
Gio.DBusSubtreeVTable = {}

--- # class Gio.DataInputStream
---
--- Data input stream implements `GInputStream` and includes functions for
--- reading structured data directly from a binary input stream.
---
--- ---
---
---@class Gio.DataInputStream : Gio.BufferedInputStream, Gio.Seekable
---@field parent_instance Gio.BufferedInputStream
---@field priv Gio.DataInputStreamPrivate
---@operator call: Gio.DataInputStream
Gio.DataInputStream = {}

--- # method Gio.DataInputStream:get_byte_order()
---
--- Gets the byte order for the data input stream.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@return Gio.DataStreamByteOrder # the `stream`'s current `GDataStreamByteOrder`.
function Gio.DataInputStream:get_byte_order() end

--- # method Gio.DataInputStream:get_newline_type()
---
--- Gets the current newline type for the `stream`.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@return Gio.DataStreamNewlineType # `GDataStreamNewlineType` for the given `stream`.
function Gio.DataInputStream:get_newline_type() end

--- # method Gio.DataInputStream:read_byte()
---
--- Reads an unsigned 8-bit/1-byte value from `stream`.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return integer # an unsigned 8-bit/1-byte value read from the `stream` or `0` if an error occurred.
function Gio.DataInputStream:read_byte(cancellable) end

--- # method Gio.DataInputStream:read_int16()
---
--- Reads a 16-bit/2-byte value from `stream`.
--- 
--- In order to get the correct byte order for this read operation,
--- see `g_data_input_stream_get_byte_order()` and `g_data_input_stream_set_byte_order()`.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return integer # a signed 16-bit/2-byte value read from `stream` or `0` if an error occurred.
function Gio.DataInputStream:read_int16(cancellable) end

--- # method Gio.DataInputStream:read_int32()
---
--- Reads a signed 32-bit/4-byte value from `stream`.
--- 
--- In order to get the correct byte order for this read operation,
--- see `g_data_input_stream_get_byte_order()` and `g_data_input_stream_set_byte_order()`.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return integer # a signed 32-bit/4-byte value read from the `stream` or `0` if an error occurred.
function Gio.DataInputStream:read_int32(cancellable) end

--- # method Gio.DataInputStream:read_int64()
---
--- Reads a 64-bit/8-byte value from `stream`.
--- 
--- In order to get the correct byte order for this read operation,
--- see `g_data_input_stream_get_byte_order()` and `g_data_input_stream_set_byte_order()`.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return integer # a signed 64-bit/8-byte value read from `stream` or `0` if an error occurred.
function Gio.DataInputStream:read_int64(cancellable) end

--- # method Gio.DataInputStream:read_line()
---
--- Reads a line from the data input stream.  Note that no encoding
--- checks or conversion is performed; the input is not guaranteed to
--- be UTF-8, and may in fact have embedded NUL characters.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@param length? integer # a `gsize` to get the length of the data read in.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return unknown[] # a NUL terminated byte array with the line that was read in (without the newlines). Set `length` to a `gsize` to get the length of the read line. On an error, it will return `nil` and `error` will be set. If there's no content to read, it will still return `nil`, but `error` won't be set.
function Gio.DataInputStream:read_line(length, cancellable) end

--- # method Gio.DataInputStream:read_line_async()
---
--- The asynchronous version of `g_data_input_stream_read_line()`.  It is
--- an error to have two outstanding calls to this function.
--- 
--- When the operation is finished, `callback` will be called. You
--- can then call `g_data_input_stream_read_line_finish()` to get
--- the result of the operation.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied.
---@param user_data? userdata # the data to pass to callback function.
---@return nil
function Gio.DataInputStream:read_line_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.DataInputStream:read_line_finish()
---
--- Finish an asynchronous call started by
--- `g_data_input_stream_read_line_async()`.  Note the warning about
--- string encoding in `g_data_input_stream_read_line()` applies here as
--- well.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@param result Gio.AsyncResult # the `GAsyncResult` that was provided to the callback.
---@param length? integer # a `gsize` to get the length of the data read in.
---@return unknown[] # a NUL-terminated byte array with the line that was read in (without the newlines). Set `length` to a `gsize` to get the length of the read line. On an error, it will return `nil` and `error` will be set. If there's no content to read, it will still return `nil`, but `error` won't be set.
function Gio.DataInputStream:read_line_finish(result, length) end

--- # method Gio.DataInputStream:read_line_finish_utf8()
---
--- Finish an asynchronous call started by
--- `g_data_input_stream_read_line_async()`.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@param result Gio.AsyncResult # the `GAsyncResult` that was provided to the callback.
---@param length? integer # a `gsize` to get the length of the data read in.
---@return string # a string with the line that was read in (without the newlines). Set `length` to a `gsize` to get the length of the read line. On an error, it will return `nil` and `error` will be set. For UTF-8 conversion errors, the set error domain is %G_CONVERT_ERROR. If there's no content to read, it will still return `nil`, but `error` won't be set.
function Gio.DataInputStream:read_line_finish_utf8(result, length) end

--- # method Gio.DataInputStream:read_line_utf8()
---
--- Reads a UTF-8 encoded line from the data input stream.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@param length? integer # a `gsize` to get the length of the data read in.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return string # a NUL terminated UTF-8 string with the line that was read in (without the newlines). Set `length` to a `gsize` to get the length of the read line. On an error, it will return `nil` and `error` will be set. For UTF-8 conversion errors, the set error domain is %G_CONVERT_ERROR. If there's no content to read, it will still return `nil`, but `error` won't be set.
function Gio.DataInputStream:read_line_utf8(length, cancellable) end

--- # method Gio.DataInputStream:read_uint16()
---
--- Reads an unsigned 16-bit/2-byte value from `stream`.
--- 
--- In order to get the correct byte order for this read operation,
--- see `g_data_input_stream_get_byte_order()` and `g_data_input_stream_set_byte_order()`.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return integer # an unsigned 16-bit/2-byte value read from the `stream` or `0` if an error occurred.
function Gio.DataInputStream:read_uint16(cancellable) end

--- # method Gio.DataInputStream:read_uint32()
---
--- Reads an unsigned 32-bit/4-byte value from `stream`.
--- 
--- In order to get the correct byte order for this read operation,
--- see `g_data_input_stream_get_byte_order()` and `g_data_input_stream_set_byte_order()`.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return integer # an unsigned 32-bit/4-byte value read from the `stream` or `0` if an error occurred.
function Gio.DataInputStream:read_uint32(cancellable) end

--- # method Gio.DataInputStream:read_uint64()
---
--- Reads an unsigned 64-bit/8-byte value from `stream`.
--- 
--- In order to get the correct byte order for this read operation,
--- see `g_data_input_stream_get_byte_order()`.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return integer # an unsigned 64-bit/8-byte read from `stream` or `0` if an error occurred.
function Gio.DataInputStream:read_uint64(cancellable) end

--- # method Gio.DataInputStream:read_until()
---
--- Reads a string from the data input stream, up to the first
--- occurrence of any of the stop characters.
--- 
--- Note that, in contrast to `g_data_input_stream_read_until_async()`,
--- this function consumes the stop character that it finds.
--- 
--- Don't use this function in new code.  Its functionality is
--- inconsistent with `g_data_input_stream_read_until_async()`.  Both
--- functions will be marked as deprecated in a future release.  Use
--- `g_data_input_stream_read_upto()` instead, but note that that function
--- does not consume the stop character.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@param stop_chars string # characters to terminate the read.
---@param length? integer # a `gsize` to get the length of the data read in.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return string # a string with the data that was read before encountering any of the stop characters. Set `length` to a `gsize` to get the length of the string. This function will return `nil` on an error.
function Gio.DataInputStream:read_until(stop_chars, length, cancellable) end

--- # method Gio.DataInputStream:read_until_async()
---
--- The asynchronous version of `g_data_input_stream_read_until()`.
--- It is an error to have two outstanding calls to this function.
--- 
--- Note that, in contrast to `g_data_input_stream_read_until()`,
--- this function does not consume the stop character that it finds.  You
--- must read it for yourself.
--- 
--- When the operation is finished, `callback` will be called. You
--- can then call `g_data_input_stream_read_until_finish()` to get
--- the result of the operation.
--- 
--- Don't use this function in new code.  Its functionality is
--- inconsistent with `g_data_input_stream_read_until()`.  Both functions
--- will be marked as deprecated in a future release.  Use
--- `g_data_input_stream_read_upto_async()` instead.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@param stop_chars string # characters to terminate the read.
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied.
---@param user_data? userdata # the data to pass to callback function.
---@return nil
function Gio.DataInputStream:read_until_async(stop_chars, io_priority, cancellable, callback, user_data) end

--- # method Gio.DataInputStream:read_until_finish()
---
--- Finish an asynchronous call started by
--- `g_data_input_stream_read_until_async()`.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@param result Gio.AsyncResult # the `GAsyncResult` that was provided to the callback.
---@param length? integer # a `gsize` to get the length of the data read in.
---@return string # a string with the data that was read before encountering any of the stop characters. Set `length` to a `gsize` to get the length of the string. This function will return `nil` on an error.
function Gio.DataInputStream:read_until_finish(result, length) end

--- # method Gio.DataInputStream:read_upto()
---
--- Reads a string from the data input stream, up to the first
--- occurrence of any of the stop characters.
--- 
--- In contrast to `g_data_input_stream_read_until()`, this function
--- does not consume the stop character. You have to use
--- `g_data_input_stream_read_byte()` to get it before calling
--- `g_data_input_stream_read_upto()` again.
--- 
--- Note that `stop_chars` may contain '\0' if `stop_chars_len` is
--- specified.
--- 
--- The returned string will always be nul-terminated on success.
---
--- ---
---
---@param self Gio.DataInputStream # a `GDataInputStream`
---@param stop_chars string # characters to terminate the read
---@param stop_chars_len integer # length of `stop_chars`. May be -1 if `stop_chars` is nul-terminated
---@param length? integer # a `gsize` to get the length of the data read in
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return string # a string with the data that was read before encountering any of the stop characters. Set `length` to a `gsize` to get the length of the string. This function will return `nil` on an error
function Gio.DataInputStream:read_upto(stop_chars, stop_chars_len, length, cancellable) end

--- # method Gio.DataInputStream:read_upto_async()
---
--- The asynchronous version of `g_data_input_stream_read_upto()`.
--- It is an error to have two outstanding calls to this function.
--- 
--- In contrast to `g_data_input_stream_read_until()`, this function
--- does not consume the stop character. You have to use
--- `g_data_input_stream_read_byte()` to get it before calling
--- `g_data_input_stream_read_upto()` again.
--- 
--- Note that `stop_chars` may contain '\0' if `stop_chars_len` is
--- specified.
--- 
--- When the operation is finished, `callback` will be called. You
--- can then call `g_data_input_stream_read_upto_finish()` to get
--- the result of the operation.
---
--- ---
---
---@param self Gio.DataInputStream # a `GDataInputStream`
---@param stop_chars string # characters to terminate the read
---@param stop_chars_len integer # length of `stop_chars`. May be -1 if `stop_chars` is nul-terminated
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.DataInputStream:read_upto_async(stop_chars, stop_chars_len, io_priority, cancellable, callback, user_data) end

--- # method Gio.DataInputStream:read_upto_finish()
---
--- Finish an asynchronous call started by
--- `g_data_input_stream_read_upto_async()`.
--- 
--- Note that this function does not consume the stop character. You
--- have to use `g_data_input_stream_read_byte()` to get it before calling
--- `g_data_input_stream_read_upto_async()` again.
--- 
--- The returned string will always be nul-terminated on success.
---
--- ---
---
---@param self Gio.DataInputStream # a `GDataInputStream`
---@param result Gio.AsyncResult # the `GAsyncResult` that was provided to the callback
---@param length? integer # a `gsize` to get the length of the data read in
---@return string # a string with the data that was read before encountering any of the stop characters. Set `length` to a `gsize` to get the length of the string. This function will return `nil` on an error.
function Gio.DataInputStream:read_upto_finish(result, length) end

--- # method Gio.DataInputStream:set_byte_order()
---
--- This function sets the byte order for the given `stream`. All subsequent
--- reads from the `stream` will be read in the given `order`.
---
--- ---
---
---@param self Gio.DataInputStream # a given `GDataInputStream`.
---@param order Gio.DataStreamByteOrder # a `GDataStreamByteOrder` to set.
---@return nil
function Gio.DataInputStream:set_byte_order(order) end

--- # method Gio.DataInputStream:set_newline_type()
---
--- Sets the newline type for the `stream`.
--- 
--- Note that using G_DATA_STREAM_NEWLINE_TYPE_ANY is slightly unsafe. If a read
--- chunk ends in "CR" we must read an additional byte to know if this is "CR" or
--- "CR LF", and this might block if there is no more data available.
---
--- ---
---
---@param self Gio.DataInputStream # a `GDataInputStream`.
---@param type Gio.DataStreamNewlineType # the type of new line return as `GDataStreamNewlineType`.
---@return nil
function Gio.DataInputStream:set_newline_type(type) end

--- # function Gio.DataInputStream.new()
---
--- Creates a new data input stream for the `base_stream`.
---
--- ---
---
---@param base_stream Gio.InputStream # a `GInputStream`.
---@return Gio.DataInputStream # a new `GDataInputStream`.
function Gio.DataInputStream.new(base_stream) end

--- # record Gio.DataInputStreamClass
---
---@class Gio.DataInputStreamClass
---@field parent_class Gio.BufferedInputStreamClass
Gio.DataInputStreamClass = {}

--- # record Gio.DataInputStreamPrivate
---
---@class Gio.DataInputStreamPrivate
Gio.DataInputStreamPrivate = {}

--- # class Gio.DataOutputStream
---
--- Data output stream implements `GOutputStream` and includes functions for
--- writing data directly to an output stream.
---
--- ---
---
---@class Gio.DataOutputStream : Gio.FilterOutputStream, Gio.Seekable
---@field parent_instance Gio.FilterOutputStream
---@field priv Gio.DataOutputStreamPrivate
---@operator call: Gio.DataOutputStream
Gio.DataOutputStream = {}

--- # method Gio.DataOutputStream:get_byte_order()
---
--- Gets the byte order for the stream.
---
--- ---
---
---@param self Gio.DataOutputStream # a `GDataOutputStream`.
---@return Gio.DataStreamByteOrder # the `GDataStreamByteOrder` for the `stream`.
function Gio.DataOutputStream:get_byte_order() end

--- # method Gio.DataOutputStream:put_byte()
---
--- Puts a byte into the output stream.
---
--- ---
---
---@param self Gio.DataOutputStream # a `GDataOutputStream`.
---@param data integer # a `guchar`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `true` if `data` was successfully added to the `stream`.
function Gio.DataOutputStream:put_byte(data, cancellable) end

--- # method Gio.DataOutputStream:put_int16()
---
--- Puts a signed 16-bit integer into the output stream.
---
--- ---
---
---@param self Gio.DataOutputStream # a `GDataOutputStream`.
---@param data integer # a `gint16`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `true` if `data` was successfully added to the `stream`.
function Gio.DataOutputStream:put_int16(data, cancellable) end

--- # method Gio.DataOutputStream:put_int32()
---
--- Puts a signed 32-bit integer into the output stream.
---
--- ---
---
---@param self Gio.DataOutputStream # a `GDataOutputStream`.
---@param data integer # a `gint32`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `true` if `data` was successfully added to the `stream`.
function Gio.DataOutputStream:put_int32(data, cancellable) end

--- # method Gio.DataOutputStream:put_int64()
---
--- Puts a signed 64-bit integer into the stream.
---
--- ---
---
---@param self Gio.DataOutputStream # a `GDataOutputStream`.
---@param data integer # a `gint64`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `true` if `data` was successfully added to the `stream`.
function Gio.DataOutputStream:put_int64(data, cancellable) end

--- # method Gio.DataOutputStream:put_string()
---
--- Puts a string into the output stream.
---
--- ---
---
---@param self Gio.DataOutputStream # a `GDataOutputStream`.
---@param str string # a string.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `true` if `string` was successfully added to the `stream`.
function Gio.DataOutputStream:put_string(str, cancellable) end

--- # method Gio.DataOutputStream:put_uint16()
---
--- Puts an unsigned 16-bit integer into the output stream.
---
--- ---
---
---@param self Gio.DataOutputStream # a `GDataOutputStream`.
---@param data integer # a `guint16`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `true` if `data` was successfully added to the `stream`.
function Gio.DataOutputStream:put_uint16(data, cancellable) end

--- # method Gio.DataOutputStream:put_uint32()
---
--- Puts an unsigned 32-bit integer into the stream.
---
--- ---
---
---@param self Gio.DataOutputStream # a `GDataOutputStream`.
---@param data integer # a `guint32`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `true` if `data` was successfully added to the `stream`.
function Gio.DataOutputStream:put_uint32(data, cancellable) end

--- # method Gio.DataOutputStream:put_uint64()
---
--- Puts an unsigned 64-bit integer into the stream.
---
--- ---
---
---@param self Gio.DataOutputStream # a `GDataOutputStream`.
---@param data integer # a `guint64`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `true` if `data` was successfully added to the `stream`.
function Gio.DataOutputStream:put_uint64(data, cancellable) end

--- # method Gio.DataOutputStream:set_byte_order()
---
--- Sets the byte order of the data output stream to `order`.
---
--- ---
---
---@param self Gio.DataOutputStream # a `GDataOutputStream`.
---@param order Gio.DataStreamByteOrder # a %GDataStreamByteOrder.
---@return nil
function Gio.DataOutputStream:set_byte_order(order) end

--- # function Gio.DataOutputStream.new()
---
--- Creates a new data output stream for `base_stream`.
---
--- ---
---
---@param base_stream Gio.OutputStream # a `GOutputStream`.
---@return Gio.DataOutputStream # `GDataOutputStream`.
function Gio.DataOutputStream.new(base_stream) end

--- # record Gio.DataOutputStreamClass
---
---@class Gio.DataOutputStreamClass
---@field parent_class Gio.FilterOutputStreamClass
Gio.DataOutputStreamClass = {}

--- # record Gio.DataOutputStreamPrivate
---
---@class Gio.DataOutputStreamPrivate
Gio.DataOutputStreamPrivate = {}

---@enum Gio.DataStreamByteOrder
Gio.DataStreamByteOrder = {}

---@enum Gio.DataStreamNewlineType
Gio.DataStreamNewlineType = {}

--- # interface Gio.DatagramBased
---
--- A `GDatagramBased` is a networking interface for representing datagram-based
--- communications. It is a more or less direct mapping of the core parts of the
--- BSD socket API in a portable GObject interface. It is implemented by
--- `GSocket`, which wraps the UNIX socket API on UNIX and winsock2 on Windows.
--- 
--- `GDatagramBased` is entirely platform independent, and is intended to be used
--- alongside higher-level networking APIs such as `GIOStream`.
--- 
--- It uses vectored scatter/gather I/O by default, allowing for many messages
--- to be sent or received in a single call. Where possible, implementations of
--- the interface should take advantage of vectored I/O to minimise processing
--- or system calls. For example, `GSocket` uses `recvmmsg()` and `sendmmsg()` where
--- possible. Callers should take advantage of scatter/gather I/O (the use of
--- multiple buffers per message) to avoid unnecessary copying of data to
--- assemble or disassemble a message.
--- 
--- Each `GDatagramBased` operation has a timeout parameter which may be negative
--- for blocking behaviour, zero for non-blocking behaviour, or positive for
--- timeout behaviour. A blocking operation blocks until finished or there is an
--- error. A non-blocking operation will return immediately with a
--- %G_IO_ERROR_WOULD_BLOCK error if it cannot make progress. A timeout operation
--- will block until the operation is complete or the timeout expires; if the
--- timeout expires it will return what progress it made, or
--- %G_IO_ERROR_TIMED_OUT if no progress was made. To know when a call would
--- successfully run you can call `g_datagram_based_condition_check()` or
--- `g_datagram_based_condition_wait()`. You can also use
--- `g_datagram_based_create_source()` and attach it to a `GMainContext` to get
--- callbacks when I/O is possible.
--- 
--- When running a non-blocking operation applications should always be able to
--- handle getting a %G_IO_ERROR_WOULD_BLOCK error even when some other function
--- said that I/O was possible. This can easily happen in case of a race
--- condition in the application, but it can also happen for other reasons. For
--- instance, on Windows a socket is always seen as writable until a write
--- returns %G_IO_ERROR_WOULD_BLOCK.
--- 
--- As with `GSocket`, `GDatagramBaseds` can be either connection oriented (for
--- example, SCTP) or connectionless (for example, UDP). `GDatagramBaseds` must be
--- datagram-based, not stream-based. The interface does not cover connection
--- establishment — use methods on the underlying type to establish a connection
--- before sending and receiving data through the `GDatagramBased` API. For
--- connectionless socket types the target/source address is specified or
--- received in each I/O operation.
--- 
--- Like most other APIs in GLib, `GDatagramBased` is not inherently thread safe.
--- To use a `GDatagramBased` concurrently from multiple threads, you must
--- implement your own locking.
---
--- ---
---
---@class Gio.DatagramBased
Gio.DatagramBased = {}

--- # method Gio.DatagramBased:condition_check()
---
--- Checks on the readiness of `datagram_based` to perform operations. The
--- operations specified in `condition` are checked for and masked against the
--- currently-satisfied conditions on `datagram_based`. The result is returned.
--- 
--- %G_IO_IN will be set in the return value if data is available to read with
--- `g_datagram_based_receive_messages()`, or if the connection is closed remotely
--- (EOS); and if the datagram_based has not been closed locally using some
--- implementation-specific method (such as `g_socket_close()` or
--- `g_socket_shutdown()` with `shutdown_read` set, if it’s a `GSocket`).
--- 
--- If the connection is shut down or closed (by calling `g_socket_close()` or
--- `g_socket_shutdown()` with `shutdown_read` set, if it’s a `GSocket`, for
--- example), all calls to this function will return %G_IO_ERROR_CLOSED.
--- 
--- %G_IO_OUT will be set if it is expected that at least one byte can be sent
--- using `g_datagram_based_send_messages()` without blocking. It will not be set
--- if the datagram_based has been closed locally.
--- 
--- %G_IO_HUP will be set if the connection has been closed locally.
--- 
--- %G_IO_ERR will be set if there was an asynchronous error in transmitting data
--- previously enqueued using `g_datagram_based_send_messages()`.
--- 
--- Note that on Windows, it is possible for an operation to return
--- %G_IO_ERROR_WOULD_BLOCK even immediately after
--- `g_datagram_based_condition_check()` has claimed that the `GDatagramBased` is
--- ready for writing. Rather than calling `g_datagram_based_condition_check()` and
--- then writing to the `GDatagramBased` if it succeeds, it is generally better to
--- simply try writing right away, and try again later if the initial attempt
--- returns %G_IO_ERROR_WOULD_BLOCK.
--- 
--- It is meaningless to specify %G_IO_ERR or %G_IO_HUP in `condition`; these
--- conditions will always be set in the output if they are true. Apart from
--- these flags, the output is guaranteed to be masked by `condition`.
--- 
--- This call never blocks.
---
--- ---
---
---@param self Gio.DatagramBased # a `GDatagramBased`
---@param condition GLib.IOCondition # a `GIOCondition` mask to check
---@return GLib.IOCondition # the `GIOCondition` mask of the current state
function Gio.DatagramBased:condition_check(condition) end

--- # method Gio.DatagramBased:condition_wait()
---
--- Waits for up to `timeout` microseconds for condition to become true on
--- `datagram_based`. If the condition is met, `true` is returned.
--- 
--- If `cancellable` is cancelled before the condition is met, or if `timeout` is
--- reached before the condition is met, then `false` is returned and `error` is
--- set appropriately (%G_IO_ERROR_CANCELLED or %G_IO_ERROR_TIMED_OUT).
---
--- ---
---
---@param self Gio.DatagramBased # a `GDatagramBased`
---@param condition GLib.IOCondition # a `GIOCondition` mask to wait for
---@param timeout integer # the maximum time (in microseconds) to wait, 0 to not block, or -1 to block indefinitely
---@param cancellable? Gio.Cancellable # a `GCancellable`
---@return (boolean|nil) # `true` if the condition was met, `false` otherwise
function Gio.DatagramBased:condition_wait(condition, timeout, cancellable) end

--- # method Gio.DatagramBased:create_source()
---
--- Creates a `GSource` that can be attached to a `GMainContext` to monitor for
--- the availability of the specified `condition` on the `GDatagramBased`. The
--- `GSource` keeps a reference to the `datagram_based`.
--- 
--- The callback on the source is of the `GDatagramBasedSourceFunc` type.
--- 
--- It is meaningless to specify %G_IO_ERR or %G_IO_HUP in `condition`; these
--- conditions will always be reported in the callback if they are true.
--- 
--- If non-`nil`, `cancellable` can be used to cancel the source, which will
--- cause the source to trigger, reporting the current condition (which is
--- likely 0 unless cancellation happened at the same time as a condition
--- change). You can check for this in the callback using
--- `g_cancellable_is_cancelled()`.
---
--- ---
---
---@param self Gio.DatagramBased # a `GDatagramBased`
---@param condition GLib.IOCondition # a `GIOCondition` mask to monitor
---@param cancellable? Gio.Cancellable # a `GCancellable`
---@return GLib.Source # a newly allocated `GSource`
function Gio.DatagramBased:create_source(condition, cancellable) end

--- # method Gio.DatagramBased:receive_messages()
---
--- Receive one or more data messages from `datagram_based` in one go.
--- 
--- `messages` must point to an array of `GInputMessage` structs and
--- `num_messages` must be the length of this array. Each `GInputMessage`
--- contains a pointer to an array of `GInputVector` structs describing the
--- buffers that the data received in each message will be written to.
--- 
--- `flags` modify how all messages are received. The commonly available
--- arguments for this are available in the `GSocketMsgFlags` enum, but the
--- values there are the same as the system values, and the flags
--- are passed in as-is, so you can pass in system-specific flags too. These
--- flags affect the overall receive operation. Flags affecting individual
--- messages are returned in `GInputMessage`.flags.
--- 
--- The other members of `GInputMessage` are treated as described in its
--- documentation.
--- 
--- If `timeout` is negative the call will block until `num_messages` have been
--- received, the connection is closed remotely (EOS), `cancellable` is cancelled,
--- or an error occurs.
--- 
--- If `timeout` is 0 the call will return up to `num_messages` without blocking,
--- or %G_IO_ERROR_WOULD_BLOCK if no messages are queued in the operating system
--- to be received.
--- 
--- If `timeout` is positive the call will block on the same conditions as if
--- `timeout` were negative. If the timeout is reached
--- before any messages are received, %G_IO_ERROR_TIMED_OUT is returned,
--- otherwise it will return the number of messages received before timing out.
--- (Note: This is effectively the behaviour of `MSG_WAITFORONE` with
--- `recvmmsg()`.)
--- 
--- To be notified when messages are available, wait for the %G_IO_IN condition.
--- Note though that you may still receive %G_IO_ERROR_WOULD_BLOCK from
--- `g_datagram_based_receive_messages()` even if you were previously notified of a
--- %G_IO_IN condition.
--- 
--- If the remote peer closes the connection, any messages queued in the
--- underlying receive buffer will be returned, and subsequent calls to
--- `g_datagram_based_receive_messages()` will return 0 (with no error set).
--- 
--- If the connection is shut down or closed (by calling `g_socket_close()` or
--- `g_socket_shutdown()` with `shutdown_read` set, if it’s a `GSocket`, for
--- example), all calls to this function will return %G_IO_ERROR_CLOSED.
--- 
--- On error -1 is returned and `error` is set accordingly. An error will only
--- be returned if zero messages could be received; otherwise the number of
--- messages successfully received before the error will be returned. If
--- `cancellable` is cancelled, %G_IO_ERROR_CANCELLED is returned as with any
--- other error.
---
--- ---
---
---@param self Gio.DatagramBased # a `GDatagramBased`
---@param messages unknown[] # an array of `GInputMessage` structs
---@param num_messages integer # the number of elements in `messages`
---@param flags integer # an int containing `GSocketMsgFlags` flags for the overall operation
---@param timeout integer # the maximum time (in microseconds) to wait, 0 to not block, or -1 to block indefinitely
---@param cancellable? Gio.Cancellable # a %GCancellable
---@return integer # number of messages received, or -1 on error. Note that the number of messages received may be smaller than `num_messages` if `timeout` is zero or positive, if the peer closed the connection, or if `num_messages` was larger than `UIO_MAXIOV` (1024), in which case the caller may re-try to receive the remaining messages.
function Gio.DatagramBased:receive_messages(messages, num_messages, flags, timeout, cancellable) end

--- # method Gio.DatagramBased:send_messages()
---
--- Send one or more data messages from `datagram_based` in one go.
--- 
--- `messages` must point to an array of `GOutputMessage` structs and
--- `num_messages` must be the length of this array. Each `GOutputMessage`
--- contains an address to send the data to, and a pointer to an array of
--- `GOutputVector` structs to describe the buffers that the data to be sent
--- for each message will be gathered from.
--- 
--- `flags` modify how the message is sent. The commonly available arguments
--- for this are available in the `GSocketMsgFlags` enum, but the
--- values there are the same as the system values, and the flags
--- are passed in as-is, so you can pass in system-specific flags too.
--- 
--- The other members of `GOutputMessage` are treated as described in its
--- documentation.
--- 
--- If `timeout` is negative the call will block until `num_messages` have been
--- sent, `cancellable` is cancelled, or an error occurs.
--- 
--- If `timeout` is 0 the call will send up to `num_messages` without blocking,
--- or will return %G_IO_ERROR_WOULD_BLOCK if there is no space to send messages.
--- 
--- If `timeout` is positive the call will block on the same conditions as if
--- `timeout` were negative. If the timeout is reached before any messages are
--- sent, %G_IO_ERROR_TIMED_OUT is returned, otherwise it will return the number
--- of messages sent before timing out.
--- 
--- To be notified when messages can be sent, wait for the %G_IO_OUT condition.
--- Note though that you may still receive %G_IO_ERROR_WOULD_BLOCK from
--- `g_datagram_based_send_messages()` even if you were previously notified of a
--- %G_IO_OUT condition. (On Windows in particular, this is very common due to
--- the way the underlying APIs work.)
--- 
--- If the connection is shut down or closed (by calling `g_socket_close()` or
--- `g_socket_shutdown()` with `shutdown_write` set, if it’s a `GSocket`, for
--- example), all calls to this function will return %G_IO_ERROR_CLOSED.
--- 
--- On error -1 is returned and `error` is set accordingly. An error will only
--- be returned if zero messages could be sent; otherwise the number of messages
--- successfully sent before the error will be returned. If `cancellable` is
--- cancelled, %G_IO_ERROR_CANCELLED is returned as with any other error.
---
--- ---
---
---@param self Gio.DatagramBased # a `GDatagramBased`
---@param messages unknown[] # an array of `GOutputMessage` structs
---@param num_messages integer # the number of elements in `messages`
---@param flags integer # an int containing `GSocketMsgFlags` flags
---@param timeout integer # the maximum time (in microseconds) to wait, 0 to not block, or -1 to block indefinitely
---@param cancellable? Gio.Cancellable # a %GCancellable
---@return integer # number of messages sent, or -1 on error. Note that the number of messages sent may be smaller than `num_messages` if `timeout` is zero or positive, or if `num_messages` was larger than `UIO_MAXIOV` (1024), in which case the caller may re-try to send the remaining messages.
function Gio.DatagramBased:send_messages(messages, num_messages, flags, timeout, cancellable) end

--- # record Gio.DatagramBasedInterface
---
--- Provides an interface for socket-like objects which have datagram semantics,
--- following the Berkeley sockets API. The interface methods are thin wrappers
--- around the corresponding virtual methods, and no pre-processing of inputs is
--- implemented — so implementations of this API must handle all functionality
--- documented in the interface methods.
---
--- ---
---
---@class Gio.DatagramBasedInterface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field receive_messages fun(datagram_based: Gio.DatagramBased, messages: unknown[], num_messages: integer, flags: integer, timeout: integer, cancellable: Gio.Cancellable): integer
---@field send_messages fun(datagram_based: Gio.DatagramBased, messages: unknown[], num_messages: integer, flags: integer, timeout: integer, cancellable: Gio.Cancellable): integer
---@field create_source fun(datagram_based: Gio.DatagramBased, condition: GLib.IOCondition, cancellable: Gio.Cancellable): GLib.Source
---@field condition_check fun(datagram_based: Gio.DatagramBased, condition: GLib.IOCondition): GLib.IOCondition
---@field condition_wait fun(datagram_based: Gio.DatagramBased, condition: GLib.IOCondition, timeout: integer, cancellable: Gio.Cancellable): (boolean|nil)
Gio.DatagramBasedInterface = {}

---@alias Gio.DatagramBasedSourceFunc fun(datagram_based: Gio.DatagramBased, condition: GLib.IOCondition, data: userdata): (boolean|nil)

--- # interface Gio.DebugController
---
--- `GDebugController` is an interface to expose control of debugging features and
--- debug output.
--- 
--- It is implemented on Linux using `GDebugControllerDBus`, which exposes a D-Bus
--- interface to allow authenticated peers to control debug features in this
--- process.
--- 
--- Whether debug output is enabled is exposed as
--- `GDebugController`:debug-enabled. This controls `g_log_set_debug_enabled()` by
--- default. Application code may connect to the `GObject`::notify signal for it
--- to control other parts of its debug infrastructure as necessary.
--- 
--- If your application or service is using the default GLib log writer function,
--- creating one of the built-in implementations of `GDebugController` should be
--- all that’s needed to dynamically enable or disable debug output.
---
--- ---
---
---@class Gio.DebugController
Gio.DebugController = {}

--- # method Gio.DebugController:get_debug_enabled()
---
--- Get the value of `GDebugController`:debug-enabled.
---
--- ---
---
---@param self Gio.DebugController # a `GDebugController`
---@return (boolean|nil) # `true` if debug output should be exposed, `false` otherwise
function Gio.DebugController:get_debug_enabled() end

--- # method Gio.DebugController:set_debug_enabled()
---
--- Set the value of `GDebugController`:debug-enabled.
---
--- ---
---
---@param self Gio.DebugController # a `GDebugController`
---@param debug_enabled (boolean|nil) # `true` if debug output should be exposed, `false` otherwise
---@return nil
function Gio.DebugController:set_debug_enabled(debug_enabled) end

--- # class Gio.DebugControllerDBus
---
--- `GDebugControllerDBus` is an implementation of `GDebugController` which exposes
--- debug settings as a D-Bus object.
--- 
--- It is a `GInitable` object, and will register an object at
--- `/org/gtk/Debugging` on the bus given as
--- `GDebugControllerDBus`:connection once it’s initialized. The object will be
--- unregistered when the last reference to the `GDebugControllerDBus` is dropped.
--- 
--- This D-Bus object can be used by remote processes to enable or disable debug
--- output in this process. Remote processes calling
--- `org.gtk.Debugging.SetDebugE`nabled()`` will affect the value of
--- `GDebugController`:debug-enabled and, by default, `g_log_get_debug_enabled()`.
--- default.
--- 
--- By default, all processes will be able to call `SetDebugE`nabled()``. If this
--- process is privileged, or might expose sensitive information in its debug
--- output, you may want to restrict the ability to enable debug output to
--- privileged users or processes.
--- 
--- One option is to install a D-Bus security policy which restricts access to
--- `SetDebugE`nabled()``, installing something like the following in
--- `$datadir/dbus-1/system.d/`:
--- ```xml
--- <?xml version="1.0"?> <!--*-nxml-*-->
--- <!DOCTYPE busconfig PUBLIC "-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN"
---      "http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd">
--- <busconfig>
---   <policy user="root">
---     <allow send_destination="com.example.MyService" send_interface="org.gtk.Debugging"/>
---   </policy>
---   <policy context="default">
---     <deny send_destination="com.example.MyService" send_interface="org.gtk.Debugging"/>
---   </policy>
--- </busconfig>
--- ```
--- 
--- This will prevent the `SetDebugE`nabled()`` method from being called by all
--- except root. It will not prevent the `DebugEnabled` property from being read,
--- as it’s accessed through the `org.freedesktop.DBus.Properties` interface.
--- 
--- Another option is to use polkit to allow or deny requests on a case-by-case
--- basis, allowing for the possibility of dynamic authorisation. To do this,
--- connect to the `GDebugControllerDBus`::authorize signal and query polkit in
--- it:
--- ```c
---   g_autoptr(GError) child_error = NULL;
---   g_autoptr(GDBusConnection) connection = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, NULL);
---   gulong debug_controller_authorize_id = 0;
--- 
---   // Set up the debug controller.
---   debug_controller = G_DEBUG_CONTROLLER (g_debug_controller_dbus_new (priv->connection, NULL, &child_error));
---   if (debug_controller == NULL)
---     {
---       g_error ("Could not register debug controller on bus: %s"),
---                child_error->message);
---     }
--- 
---   debug_controller_authorize_id = g_signal_connect (debug_controller,
---                                                     "authorize",
---                                                     G_CALLBACK (debug_controller_authorize_cb),
---                                                     self);
--- 
---   static gboolean
---   debug_controller_authorize_cb (GDebugControllerDBus  *debug_controller,
---                                  GDBusMethodInvocation *invocation,
---                                  gpointer               user_data)
---   {
---     g_autoptr(PolkitAuthority) authority = NULL;
---     g_autoptr(PolkitSubject) subject = NULL;
---     g_autoptr(PolkitAuthorizationResult) auth_result = NULL;
---     g_autoptr(GError) local_error = NULL;
---     GDBusMessage *message;
---     GDBusMessageFlags message_flags;
---     PolkitCheckAuthorizationFlags flags = POLKIT_CHECK_AUTHORIZATION_FLAGS_NONE;
--- 
---     message = g_dbus_method_invocation_get_message (invocation);
---     message_flags = g_dbus_message_get_flags (message);
--- 
---     authority = polkit_authority_get_sync (NULL, &local_error);
---     if (authority == NULL)
---       {
---         g_warning ("Failed to get polkit authority: %s", local_error->message);
---         return FALSE;
---       }
--- 
---     if (message_flags & G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION)
---       flags |= POLKIT_CHECK_AUTHORIZATION_FLAGS_ALLOW_USER_INTERACTION;
--- 
---     subject = polkit_system_bus_name_new (g_dbus_method_invocation_get_sender (invocation));
--- 
---     auth_result = polkit_authority_check_authorization_sync (authority,
---                                                              subject,
---                                                              "com.example.MyService.set-debug-enabled",
---                                                              NULL,
---                                                              flags,
---                                                              NULL,
---                                                              &local_error);
---     if (auth_result == NULL)
---       {
---         g_warning ("Failed to get check polkit authorization: %s", local_error->message);
---         return FALSE;
---       }
--- 
---     return polkit_authorization_result_get_is_authorized (auth_result);
---   }
--- ```
---
--- ---
---
---@class Gio.DebugControllerDBus : GObject.Object, Gio.DebugController, Gio.Initable
---@field parent_instance GObject.Object
---@operator call: Gio.DebugControllerDBus
Gio.DebugControllerDBus = {}

--- # method Gio.DebugControllerDBus:stop()
---
--- Stop the debug controller, unregistering its object from the bus.
--- 
--- Any pending method calls to the object will complete successfully, but new
--- ones will return an error. This method will block until all pending
--- `GDebugControllerDBus`::authorize signals have been handled. This is expected
--- to not take long, as it will just be waiting for threads to join. If any
--- `GDebugControllerDBus`::authorize signal handlers are still executing in other
--- threads, this will block until after they have returned.
--- 
--- This method will be called automatically when the final reference to the
--- `GDebugControllerDBus` is dropped. You may want to call it explicitly to know
--- when the controller has been fully removed from the bus, or to break
--- reference count cycles.
--- 
--- Calling this method from within a `GDebugControllerDBus`::authorize signal
--- handler will cause a deadlock and must not be done.
---
--- ---
---
---@param self Gio.DebugControllerDBus # a `GDebugControllerDBus`
---@return nil
function Gio.DebugControllerDBus:stop() end

--- # function Gio.DebugControllerDBus.new()
---
--- Create a new `GDebugControllerDBus` and synchronously initialize it.
--- 
--- Initializing the object will export the debug object on `connection`. The
--- object will remain registered until the last reference to the
--- `GDebugControllerDBus` is dropped.
--- 
--- Initialization may fail if registering the object on `connection` fails.
---
--- ---
---
---@param connection Gio.DBusConnection # a `GDBusConnection` to register the debug object on
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return Gio.DebugControllerDBus # a new `GDebugControllerDBus`, or `nil` on failure
function Gio.DebugControllerDBus.new(connection, cancellable) end

--- # record Gio.DebugControllerDBusClass
---
--- The virtual function table for `GDebugControllerDBus`.
---
--- ---
---
---@class Gio.DebugControllerDBusClass
---@field parent_class GObject.ObjectClass # The parent class.
---@field authorize fun(controller: Gio.DebugControllerDBus, invocation: Gio.DBusMethodInvocation): (boolean|nil)
---@field padding unknown[]
Gio.DebugControllerDBusClass = {}

--- # record Gio.DebugControllerInterface
---
--- The virtual function table for `GDebugController`.
---
--- ---
---
---@class Gio.DebugControllerInterface
---@field g_iface GObject.TypeInterface # The parent interface.
Gio.DebugControllerInterface = {}

--- # class Gio.DesktopAppInfo
---
--- `GDesktopAppInfo` is an implementation of `GAppInfo` based on
--- desktop files.
--- 
--- Note that `<gio/gdesktopappinfo.h>` belongs to the UNIX-specific
--- GIO interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config
--- file when using it.
---
--- ---
---
---@class Gio.DesktopAppInfo : GObject.Object, Gio.AppInfo
---@operator call: Gio.DesktopAppInfo
Gio.DesktopAppInfo = {}

--- # method Gio.DesktopAppInfo:get_action_name()
---
--- Gets the user-visible display name of the "additional application
--- action" specified by `action_name`.
--- 
--- This corresponds to the "Name" key within the keyfile group for the
--- action.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`
---@param action_name string # the name of the action as from `g_desktop_app_info_list_actions()`
---@return string # the locale-specific action name
function Gio.DesktopAppInfo:get_action_name(action_name) end

--- # method Gio.DesktopAppInfo:get_boolean()
---
--- Looks up a boolean value in the keyfile backing `info`.
--- 
--- The `key` is looked up in the "Desktop Entry" group.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`
---@param key string # the key to look up
---@return (boolean|nil) # the boolean value, or `false` if the key is not found
function Gio.DesktopAppInfo:get_boolean(key) end

--- # method Gio.DesktopAppInfo:get_categories()
---
--- Gets the categories from the desktop file.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`
---@return string # The unparsed Categories key from the desktop file; i.e. no attempt is made to split it by ';' or validate it.
function Gio.DesktopAppInfo:get_categories() end

--- # method Gio.DesktopAppInfo:get_filename()
---
--- When `info` was created from a known filename, return it.  In some
--- situations such as the `GDesktopAppInfo` returned from
--- `g_desktop_app_info_new_from_keyfile()`, this function will return `nil`.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`
---@return string # The full path to the file for `info`, or `nil` if not known.
function Gio.DesktopAppInfo:get_filename() end

--- # method Gio.DesktopAppInfo:get_generic_name()
---
--- Gets the generic name from the desktop file.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`
---@return string # The value of the GenericName key
function Gio.DesktopAppInfo:get_generic_name() end

--- # method Gio.DesktopAppInfo:get_is_hidden()
---
--- A desktop file is hidden if the Hidden key in it is
--- set to True.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`.
---@return (boolean|nil) # `true` if hidden, `false` otherwise.
function Gio.DesktopAppInfo:get_is_hidden() end

--- # method Gio.DesktopAppInfo:get_keywords()
---
--- Gets the keywords from the desktop file.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`
---@return unknown[] # The value of the Keywords key
function Gio.DesktopAppInfo:get_keywords() end

--- # method Gio.DesktopAppInfo:get_locale_string()
---
--- Looks up a localized string value in the keyfile backing `info`
--- translated to the current locale.
--- 
--- The `key` is looked up in the "Desktop Entry" group.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`
---@param key string # the key to look up
---@return string # a newly allocated string, or `nil` if the key is not found
function Gio.DesktopAppInfo:get_locale_string(key) end

--- # method Gio.DesktopAppInfo:get_nodisplay()
---
--- Gets the value of the NoDisplay key, which helps determine if the
--- application info should be shown in menus. See
--- %G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY and `g_app_info_should_show()`.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`
---@return (boolean|nil) # The value of the NoDisplay key
function Gio.DesktopAppInfo:get_nodisplay() end

--- # method Gio.DesktopAppInfo:get_show_in()
---
--- Checks if the application info should be shown in menus that list available
--- applications for a specific name of the desktop, based on the
--- `OnlyShowIn` and `NotShowIn` keys.
--- 
--- `desktop_env` should typically be given as `nil`, in which case the
--- `XDG_CURRENT_DESKTOP` environment variable is consulted.  If you want
--- to override the default mechanism then you may specify `desktop_env`,
--- but this is not recommended.
--- 
--- Note that `g_app_info_should_show()` for `info` will include this check (with
--- `nil` for `desktop_env`) as well as additional checks.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`
---@param desktop_env? string # a string specifying a desktop name
---@return (boolean|nil) # `true` if the `info` should be shown in `desktop_env` according to the `OnlyShowIn` and `NotShowIn` keys, `false` otherwise.
function Gio.DesktopAppInfo:get_show_in(desktop_env) end

--- # method Gio.DesktopAppInfo:get_startup_wm_class()
---
--- Retrieves the StartupWMClass field from `info`. This represents the
--- WM_CLASS property of the main window of the application, if launched
--- through `info`.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo` that supports startup notify
---@return string # the startup WM class, or `nil` if none is set in the desktop file.
function Gio.DesktopAppInfo:get_startup_wm_class() end

--- # method Gio.DesktopAppInfo:get_string()
---
--- Looks up a string value in the keyfile backing `info`.
--- 
--- The `key` is looked up in the "Desktop Entry" group.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`
---@param key string # the key to look up
---@return string # a newly allocated string, or `nil` if the key is not found
function Gio.DesktopAppInfo:get_string(key) end

--- # method Gio.DesktopAppInfo:get_string_list()
---
--- Looks up a string list value in the keyfile backing `info`.
--- 
--- The `key` is looked up in the "Desktop Entry" group.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`
---@param key string # the key to look up
---@param length? integer # return location for the number of returned strings, or `nil`
---@return unknown[] # a `nil`-terminated string array or `nil` if the specified key cannot be found. The array should be freed with `g_strfreev()`.
function Gio.DesktopAppInfo:get_string_list(key, length) end

--- # method Gio.DesktopAppInfo:has_key()
---
--- Returns whether `key` exists in the "Desktop Entry" group
--- of the keyfile backing `info`.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`
---@param key string # the key to look up
---@return (boolean|nil) # `true` if the `key` exists
function Gio.DesktopAppInfo:has_key(key) end

--- # method Gio.DesktopAppInfo:launch_action()
---
--- Activates the named application action.
--- 
--- You may only call this function on action names that were
--- returned from `g_desktop_app_info_list_actions()`.
--- 
--- Note that if the main entry of the desktop file indicates that the
--- application supports startup notification, and `launch_context` is
--- non-`nil`, then startup notification will be used when activating the
--- action (and as such, invocation of the action on the receiving side
--- must signal the end of startup notification when it is completed).
--- This is the expected behaviour of applications declaring additional
--- actions, as per the desktop file specification.
--- 
--- As with `g_app_info_launch()` there is no way to detect failures that
--- occur while using this function.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`
---@param action_name string # the name of the action as from `g_desktop_app_info_list_actions()`
---@param launch_context? Gio.AppLaunchContext # a `GAppLaunchContext`
---@return nil
function Gio.DesktopAppInfo:launch_action(action_name, launch_context) end

--- # method Gio.DesktopAppInfo:launch_uris_as_manager()
---
--- This function performs the equivalent of `g_app_info_launch_uris()`,
--- but is intended primarily for operating system components that
--- launch applications.  Ordinary applications should use
--- `g_app_info_launch_uris()`.
--- 
--- If the application is launched via GSpawn, then `spawn_flags`, `user_setup`
--- and `user_setup_data` are used for the call to `g_spawn_async()`.
--- Additionally, `pid_callback` (with `pid_callback_data`) will be called to
--- inform about the PID of the created process. See `g_spawn_async_with_pipes()`
--- for information on certain parameter conditions that can enable an
--- optimized `posix_spawn()` codepath to be used.
--- 
--- If application launching occurs via some other mechanism (eg: D-Bus
--- activation) then `spawn_flags`, `user_setup`, `user_setup_data`,
--- `pid_callback` and `pid_callback_data` are ignored.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`
---@param uris string[] # List of URIs
---@param launch_context? Gio.AppLaunchContext # a `GAppLaunchContext`
---@param spawn_flags GLib.SpawnFlags # `GSpawnFlags`, used for each process
---@param user_setup? GLib.SpawnChildSetupFunc # a `GSpawnChildSetupFunc`, used once for each process.
---@param user_setup_data? userdata # User data for `user_setup`
---@param pid_callback? Gio.DesktopAppLaunchCallback # Callback for child processes
---@param pid_callback_data? userdata # User data for `callback`
---@return (boolean|nil) # `true` on successful launch, `false` otherwise.
function Gio.DesktopAppInfo:launch_uris_as_manager(uris, launch_context, spawn_flags, user_setup, user_setup_data, pid_callback, pid_callback_data) end

--- # method Gio.DesktopAppInfo:launch_uris_as_manager_with_fds()
---
--- Equivalent to `g_desktop_app_info_launch_uris_as_manager()` but allows
--- you to pass in file descriptors for the stdin, stdout and stderr streams
--- of the launched process.
--- 
--- If application launching occurs via some non-spawn mechanism (e.g. D-Bus
--- activation) then `stdin_fd`, `stdout_fd` and `stderr_fd` are ignored.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`
---@param uris string[] # List of URIs
---@param launch_context? Gio.AppLaunchContext # a `GAppLaunchContext`
---@param spawn_flags GLib.SpawnFlags # `GSpawnFlags`, used for each process
---@param user_setup? GLib.SpawnChildSetupFunc # a `GSpawnChildSetupFunc`, used once for each process.
---@param user_setup_data? userdata # User data for `user_setup`
---@param pid_callback? Gio.DesktopAppLaunchCallback # Callback for child processes
---@param pid_callback_data? userdata # User data for `callback`
---@param stdin_fd integer # file descriptor to use for child's stdin, or -1
---@param stdout_fd integer # file descriptor to use for child's stdout, or -1
---@param stderr_fd integer # file descriptor to use for child's stderr, or -1
---@return (boolean|nil) # `true` on successful launch, `false` otherwise.
function Gio.DesktopAppInfo:launch_uris_as_manager_with_fds(uris, launch_context, spawn_flags, user_setup, user_setup_data, pid_callback, pid_callback_data, stdin_fd, stdout_fd, stderr_fd) end

--- # method Gio.DesktopAppInfo:list_actions()
---
--- Returns the list of "additional application actions" supported on the
--- desktop file, as per the desktop file specification.
--- 
--- As per the specification, this is the list of actions that are
--- explicitly listed in the "Actions" key of the [Desktop Entry] group.
---
--- ---
---
---@param self Gio.DesktopAppInfo # a `GDesktopAppInfo`
---@return unknown[] # a list of strings, always non-`nil`
function Gio.DesktopAppInfo:list_actions() end

--- # function Gio.DesktopAppInfo.get_implementations()
---
--- Gets all applications that implement `interface`.
--- 
--- An application implements an interface if that interface is listed in
--- the Implements= line of the desktop file of the application.
---
--- ---
---
---@param interface string # the name of the interface
---@return Gio.DesktopAppInfo[] # a list of `GDesktopAppInfo` objects.
function Gio.DesktopAppInfo.get_implementations(interface) end

--- # function Gio.DesktopAppInfo.search()
---
--- Searches desktop files for ones that match `search_string`.
--- 
--- The return value is an array of strvs.  Each strv contains a list of
--- applications that matched `search_string` with an equal score.  The
--- outer list is sorted by score so that the first strv contains the
--- best-matching applications, and so on.
--- The algorithm for determining matches is undefined and may change at
--- any time.
--- 
--- None of the search results are subjected to the normal validation
--- checks performed by `g_desktop_app_info_new()` (for example, checking that
--- the executable referenced by a result exists), and so it is possible for
--- `g_desktop_app_info_new()` to return `nil` when passed an app ID returned by
--- this function. It is expected that calling code will do this when
--- subsequently creating a `GDesktopAppInfo` for each result.
---
--- ---
---
---@param search_string string # the search string to use
---@return unknown[] # a list of strvs. Free each item with `g_strfreev()` and free the outer list with `g_free()`.
function Gio.DesktopAppInfo.search(search_string) end

--- # function Gio.DesktopAppInfo.set_desktop_env()
---
--- Sets the name of the desktop that the application is running in.
--- This is used by `g_app_info_should_show()` and
--- `g_desktop_app_info_get_show_in()` to evaluate the
--- `OnlyShowIn` and `NotShowIn`
--- desktop entry fields.
--- 
--- Should be called only once; subsequent calls are ignored.
---
--- ---
---
---@param desktop_env string # a string specifying what desktop this is
---@return nil
function Gio.DesktopAppInfo.set_desktop_env(desktop_env) end

--- # function Gio.DesktopAppInfo.new()
---
--- Creates a new `GDesktopAppInfo` based on a desktop file id.
--- 
--- A desktop file id is the basename of the desktop file, including the
--- .desktop extension. GIO is looking for a desktop file with this name
--- in the `applications` subdirectories of the XDG
--- data directories (i.e. the directories specified in the `XDG_DATA_HOME`
--- and `XDG_DATA_DIRS` environment variables). GIO also supports the
--- prefix-to-subdirectory mapping that is described in the
--- [Menu Spec](http://standards.freedesktop.org/menu-spec/latest/)
--- (i.e. a desktop id of kde-foo.desktop will match
--- `/usr/share/applications/kde/foo.desktop`).
---
--- ---
---
---@param desktop_id string # the desktop file id
---@return Gio.DesktopAppInfo # a new `GDesktopAppInfo`, or `nil` if no desktop file with that id exists.
function Gio.DesktopAppInfo.new(desktop_id) end

--- # function Gio.DesktopAppInfo.new_from_filename()
---
--- Creates a new `GDesktopAppInfo`.
---
--- ---
---
---@param filename string # the path of a desktop file, in the GLib filename encoding
---@return Gio.DesktopAppInfo # a new `GDesktopAppInfo` or `nil` on error.
function Gio.DesktopAppInfo.new_from_filename(filename) end

--- # function Gio.DesktopAppInfo.new_from_keyfile()
---
--- Creates a new `GDesktopAppInfo`.
---
--- ---
---
---@param key_file GLib.KeyFile # an opened `GKeyFile`
---@return Gio.DesktopAppInfo # a new `GDesktopAppInfo` or `nil` on error.
function Gio.DesktopAppInfo.new_from_keyfile(key_file) end

--- # record Gio.DesktopAppInfoClass
---
---@class Gio.DesktopAppInfoClass
---@field parent_class GObject.ObjectClass
Gio.DesktopAppInfoClass = {}

--- # interface Gio.DesktopAppInfoLookup
---
--- `GDesktopAppInfoLookup` is an opaque data structure and can only be accessed
--- using the following functions.
---
--- ---
---
---@class Gio.DesktopAppInfoLookup
Gio.DesktopAppInfoLookup = {}

--- # method Gio.DesktopAppInfoLookup:get_default_for_uri_scheme()
---
--- Gets the default application for launching applications
--- using this URI scheme for a particular `GDesktopAppInfoLookup`
--- implementation.
--- 
--- The `GDesktopAppInfoLookup` interface and this function is used
--- to implement `g_app_info_get_default_for_uri_scheme()` backends
--- in a GIO module. There is no reason for applications to use it
--- directly. Applications should use `g_app_info_get_default_for_uri_scheme()`.
---
--- ---
---
---@param self Gio.DesktopAppInfoLookup # a `GDesktopAppInfoLookup`
---@param uri_scheme string # a string containing a URI scheme.
---@return Gio.AppInfo # `GAppInfo` for given `uri_scheme` or `nil` on error.
function Gio.DesktopAppInfoLookup:get_default_for_uri_scheme(uri_scheme) end

--- # record Gio.DesktopAppInfoLookupIface
---
--- Interface that is used by backends to associate default
--- handlers with URI schemes.
---
--- ---
---
---@class Gio.DesktopAppInfoLookupIface
---@field g_iface GObject.TypeInterface
---@field get_default_for_uri_scheme fun(lookup: Gio.DesktopAppInfoLookup, uri_scheme: string): Gio.AppInfo
Gio.DesktopAppInfoLookupIface = {}

---@alias Gio.DesktopAppLaunchCallback fun(appinfo: Gio.DesktopAppInfo, pid: GLib.Pid, user_data: userdata): nil

--- # interface Gio.Drive
---
--- `GDrive` - this represent a piece of hardware connected to the machine.
--- It's generally only created for removable hardware or hardware with
--- removable media.
--- 
--- `GDrive` is a container class for `GVolume` objects that stem from
--- the same piece of media. As such, `GDrive` abstracts a drive with
--- (or without) removable media and provides operations for querying
--- whether media is available, determining whether media change is
--- automatically detected and ejecting the media.
--- 
--- If the `GDrive` reports that media isn't automatically detected, one
--- can poll for media; typically one should not do this periodically
--- as a poll for media operation is potentially expensive and may
--- spin up the drive creating noise.
--- 
--- `GDrive` supports starting and stopping drives with authentication
--- support for the former. This can be used to support a diverse set
--- of use cases including connecting/disconnecting iSCSI devices,
--- powering down external disk enclosures and starting/stopping
--- multi-disk devices such as RAID devices. Note that the actual
--- semantics and side-effects of starting/stopping a `GDrive` may vary
--- according to implementation. To choose the correct verbs in e.g. a
--- file manager, use `g_drive_get_start_stop_type()`.
--- 
--- For porting from GnomeVFS note that there is no equivalent of
--- `GDrive` in that API.
---
--- ---
---
---@class Gio.Drive
Gio.Drive = {}

--- # method Gio.Drive:can_eject()
---
--- Checks if a drive can be ejected.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@return (boolean|nil) # `true` if the `drive` can be ejected, `false` otherwise.
function Gio.Drive:can_eject() end

--- # method Gio.Drive:can_poll_for_media()
---
--- Checks if a drive can be polled for media changes.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@return (boolean|nil) # `true` if the `drive` can be polled for media changes, `false` otherwise.
function Gio.Drive:can_poll_for_media() end

--- # method Gio.Drive:can_start()
---
--- Checks if a drive can be started.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@return (boolean|nil) # `true` if the `drive` can be started, `false` otherwise.
function Gio.Drive:can_start() end

--- # method Gio.Drive:can_start_degraded()
---
--- Checks if a drive can be started degraded.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@return (boolean|nil) # `true` if the `drive` can be started degraded, `false` otherwise.
function Gio.Drive:can_start_degraded() end

--- # method Gio.Drive:can_stop()
---
--- Checks if a drive can be stopped.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@return (boolean|nil) # `true` if the `drive` can be stopped, `false` otherwise.
function Gio.Drive:can_stop() end

--- # method Gio.Drive:eject()
---
--- Asynchronously ejects a drive.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_drive_eject_finish()` to obtain the
--- result of the operation.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@param flags Gio.MountUnmountFlags # flags affecting the unmount if required for eject
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`, or `nil`.
---@param user_data? userdata # user data to pass to `callback`
---@return nil
function Gio.Drive:eject(flags, cancellable, callback, user_data) end

--- # method Gio.Drive:eject_finish()
---
--- Finishes ejecting a drive.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` if the drive has been ejected successfully, `false` otherwise.
function Gio.Drive:eject_finish(result) end

--- # method Gio.Drive:eject_with_operation()
---
--- Ejects a drive. This is an asynchronous operation, and is
--- finished by calling `g_drive_eject_with_operation_finish()` with the `drive`
--- and `GAsyncResult` data returned in the `callback`.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@param flags Gio.MountUnmountFlags # flags affecting the unmount if required for eject
---@param mount_operation? Gio.MountOperation # a `GMountOperation` or `nil` to avoid user interaction.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`, or `nil`.
---@param user_data? userdata # user data passed to `callback`.
---@return nil
function Gio.Drive:eject_with_operation(flags, mount_operation, cancellable, callback, user_data) end

--- # method Gio.Drive:eject_with_operation_finish()
---
--- Finishes ejecting a drive. If any errors occurred during the operation,
--- `error` will be set to contain the errors and `false` will be returned.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` if the drive was successfully ejected. `false` otherwise.
function Gio.Drive:eject_with_operation_finish(result) end

--- # method Gio.Drive:enumerate_identifiers()
---
--- Gets the kinds of identifiers that `drive` has.
--- Use `g_drive_get_identifier()` to obtain the identifiers
--- themselves.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`
---@return unknown[] # a `nil`-terminated array of strings containing kinds of identifiers. Use `g_strfreev()` to free.
function Gio.Drive:enumerate_identifiers() end

--- # method Gio.Drive:get_icon()
---
--- Gets the icon for `drive`.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@return Gio.Icon # `GIcon` for the `drive`. Free the returned object with `g_object_unref()`.
function Gio.Drive:get_icon() end

--- # method Gio.Drive:get_identifier()
---
--- Gets the identifier of the given kind for `drive`. The only
--- identifier currently available is
--- %G_DRIVE_IDENTIFIER_KIND_UNIX_DEVICE.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`
---@param kind string # the kind of identifier to return
---@return string # a newly allocated string containing the requested identifier, or `nil` if the `GDrive` doesn't have this kind of identifier.
function Gio.Drive:get_identifier(kind) end

--- # method Gio.Drive:get_name()
---
--- Gets the name of `drive`.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@return string # a string containing `drive`'s name. The returned string should be freed when no longer needed.
function Gio.Drive:get_name() end

--- # method Gio.Drive:get_sort_key()
---
--- Gets the sort key for `drive`, if any.
---
--- ---
---
---@param self Gio.Drive # A `GDrive`.
---@return string # Sorting key for `drive` or `nil` if no such key is available.
function Gio.Drive:get_sort_key() end

--- # method Gio.Drive:get_start_stop_type()
---
--- Gets a hint about how a drive can be started/stopped.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@return Gio.DriveStartStopType # A value from the `GDriveStartStopType` enumeration.
function Gio.Drive:get_start_stop_type() end

--- # method Gio.Drive:get_symbolic_icon()
---
--- Gets the icon for `drive`.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@return Gio.Icon # symbolic `GIcon` for the `drive`. Free the returned object with `g_object_unref()`.
function Gio.Drive:get_symbolic_icon() end

--- # method Gio.Drive:get_volumes()
---
--- Get a list of mountable volumes for `drive`.
--- 
--- The returned list should be freed with `g_list_free()`, after
--- its elements have been unreffed with `g_object_unref()`.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@return Gio.Volume[] # `GList` containing any `GVolume` objects on the given `drive`.
function Gio.Drive:get_volumes() end

--- # method Gio.Drive:has_media()
---
--- Checks if the `drive` has media. Note that the OS may not be polling
--- the drive for media changes; see `g_drive_is_media_check_automatic()`
--- for more details.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@return (boolean|nil) # `true` if `drive` has media, `false` otherwise.
function Gio.Drive:has_media() end

--- # method Gio.Drive:has_volumes()
---
--- Check if `drive` has any mountable volumes.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@return (boolean|nil) # `true` if the `drive` contains volumes, `false` otherwise.
function Gio.Drive:has_volumes() end

--- # method Gio.Drive:is_media_check_automatic()
---
--- Checks if `drive` is capable of automatically detecting media changes.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@return (boolean|nil) # `true` if the `drive` is capable of automatically detecting media changes, `false` otherwise.
function Gio.Drive:is_media_check_automatic() end

--- # method Gio.Drive:is_media_removable()
---
--- Checks if the `drive` supports removable media.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@return (boolean|nil) # `true` if `drive` supports removable media, `false` otherwise.
function Gio.Drive:is_media_removable() end

--- # method Gio.Drive:is_removable()
---
--- Checks if the `GDrive` and/or its media is considered removable by the user.
--- See `g_drive_is_media_removable()`.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@return (boolean|nil) # `true` if `drive` and/or its media is considered removable, `false` otherwise.
function Gio.Drive:is_removable() end

--- # method Gio.Drive:poll_for_media()
---
--- Asynchronously polls `drive` to see if media has been inserted or removed.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_drive_poll_for_media_finish()` to obtain the
--- result of the operation.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`, or `nil`.
---@param user_data? userdata # user data to pass to `callback`
---@return nil
function Gio.Drive:poll_for_media(cancellable, callback, user_data) end

--- # method Gio.Drive:poll_for_media_finish()
---
--- Finishes an operation started with `g_drive_poll_for_media()` on a drive.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` if the drive has been poll_for_mediaed successfully, `false` otherwise.
function Gio.Drive:poll_for_media_finish(result) end

--- # method Gio.Drive:start()
---
--- Asynchronously starts a drive.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_drive_start_finish()` to obtain the
--- result of the operation.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@param flags Gio.DriveStartFlags # flags affecting the start operation.
---@param mount_operation? Gio.MountOperation # a `GMountOperation` or `nil` to avoid user interaction.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`, or `nil`.
---@param user_data? userdata # user data to pass to `callback`
---@return nil
function Gio.Drive:start(flags, mount_operation, cancellable, callback, user_data) end

--- # method Gio.Drive:start_finish()
---
--- Finishes starting a drive.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` if the drive has been started successfully, `false` otherwise.
function Gio.Drive:start_finish(result) end

--- # method Gio.Drive:stop()
---
--- Asynchronously stops a drive.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_drive_stop_finish()` to obtain the
--- result of the operation.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@param flags Gio.MountUnmountFlags # flags affecting the unmount if required for stopping.
---@param mount_operation? Gio.MountOperation # a `GMountOperation` or `nil` to avoid user interaction.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`, or `nil`.
---@param user_data? userdata # user data to pass to `callback`
---@return nil
function Gio.Drive:stop(flags, mount_operation, cancellable, callback, user_data) end

--- # method Gio.Drive:stop_finish()
---
--- Finishes stopping a drive.
---
--- ---
---
---@param self Gio.Drive # a `GDrive`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` if the drive has been stopped successfully, `false` otherwise.
function Gio.Drive:stop_finish(result) end

--- # record Gio.DriveIface
---
--- Interface for creating `GDrive` implementations.
---
--- ---
---
---@class Gio.DriveIface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field changed fun(drive: Gio.Drive): nil
---@field disconnected fun(drive: Gio.Drive): nil
---@field eject_button fun(drive: Gio.Drive): nil
---@field get_name fun(drive: Gio.Drive): string
---@field get_icon fun(drive: Gio.Drive): Gio.Icon
---@field has_volumes fun(drive: Gio.Drive): (boolean|nil)
---@field get_volumes fun(drive: Gio.Drive): Gio.Volume[]
---@field is_media_removable fun(drive: Gio.Drive): (boolean|nil)
---@field has_media fun(drive: Gio.Drive): (boolean|nil)
---@field is_media_check_automatic fun(drive: Gio.Drive): (boolean|nil)
---@field can_eject fun(drive: Gio.Drive): (boolean|nil)
---@field can_poll_for_media fun(drive: Gio.Drive): (boolean|nil)
---@field eject fun(drive: Gio.Drive, flags: Gio.MountUnmountFlags, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field eject_finish fun(drive: Gio.Drive, result: Gio.AsyncResult): (boolean|nil)
---@field poll_for_media fun(drive: Gio.Drive, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field poll_for_media_finish fun(drive: Gio.Drive, result: Gio.AsyncResult): (boolean|nil)
---@field get_identifier fun(drive: Gio.Drive, kind: string): string
---@field enumerate_identifiers fun(drive: Gio.Drive): unknown[]
---@field get_start_stop_type fun(drive: Gio.Drive): Gio.DriveStartStopType
---@field can_start fun(drive: Gio.Drive): (boolean|nil)
---@field can_start_degraded fun(drive: Gio.Drive): (boolean|nil)
---@field start fun(drive: Gio.Drive, flags: Gio.DriveStartFlags, mount_operation: Gio.MountOperation, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field start_finish fun(drive: Gio.Drive, result: Gio.AsyncResult): (boolean|nil)
---@field can_stop fun(drive: Gio.Drive): (boolean|nil)
---@field stop fun(drive: Gio.Drive, flags: Gio.MountUnmountFlags, mount_operation: Gio.MountOperation, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field stop_finish fun(drive: Gio.Drive, result: Gio.AsyncResult): (boolean|nil)
---@field stop_button fun(drive: Gio.Drive): nil
---@field eject_with_operation fun(drive: Gio.Drive, flags: Gio.MountUnmountFlags, mount_operation: Gio.MountOperation, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field eject_with_operation_finish fun(drive: Gio.Drive, result: Gio.AsyncResult): (boolean|nil)
---@field get_sort_key fun(drive: Gio.Drive): string
---@field get_symbolic_icon fun(drive: Gio.Drive): Gio.Icon
---@field is_removable fun(drive: Gio.Drive): (boolean|nil)
Gio.DriveIface = {}

---@enum Gio.DriveStartFlags
Gio.DriveStartFlags = {}

---@enum Gio.DriveStartStopType
Gio.DriveStartStopType = {}

--- # interface Gio.DtlsClientConnection
---
--- `GDtlsClientConnection` is the client-side subclass of
--- `GDtlsConnection`, representing a client-side DTLS connection.
---
--- ---
---
---@class Gio.DtlsClientConnection
---@operator call: Gio.DtlsClientConnection
Gio.DtlsClientConnection = {}

--- # method Gio.DtlsClientConnection:get_accepted_cas()
---
--- Gets the list of distinguished names of the Certificate Authorities
--- that the server will accept certificates from. This will be set
--- during the TLS handshake if the server requests a certificate.
--- Otherwise, it will be `nil`.
--- 
--- Each item in the list is a `GByteArray` which contains the complete
--- subject DN of the certificate authority.
---
--- ---
---
---@param self Gio.DtlsClientConnection # the `GDtlsClientConnection`
---@return unknown[][] # the list of CA DNs. You should unref each element with `g_byte_array_unref()` and then the free the list with `g_list_free()`.
function Gio.DtlsClientConnection:get_accepted_cas() end

--- # method Gio.DtlsClientConnection:get_server_identity()
---
--- Gets `conn`'s expected server identity
---
--- ---
---
---@param self Gio.DtlsClientConnection # the `GDtlsClientConnection`
---@return Gio.SocketConnectable # a `GSocketConnectable` describing the expected server identity, or `nil` if the expected identity is not known.
function Gio.DtlsClientConnection:get_server_identity() end

--- # method Gio.DtlsClientConnection:get_validation_flags()
---
--- Gets `conn`'s validation flags
--- 
--- This function does not work as originally designed and is impossible
--- to use correctly. See `GDtlsClientConnection`:validation-flags for more
--- information.
---
--- ---
---
---@param self Gio.DtlsClientConnection # the `GDtlsClientConnection`
---@return Gio.TlsCertificateFlags # the validation flags
function Gio.DtlsClientConnection:get_validation_flags() end

--- # method Gio.DtlsClientConnection:set_server_identity()
---
--- Sets `conn`'s expected server identity, which is used both to tell
--- servers on virtual hosts which certificate to present, and also
--- to let `conn` know what name to look for in the certificate when
--- performing %G_TLS_CERTIFICATE_BAD_IDENTITY validation, if enabled.
---
--- ---
---
---@param self Gio.DtlsClientConnection # the `GDtlsClientConnection`
---@param identity Gio.SocketConnectable # a `GSocketConnectable` describing the expected server identity
---@return nil
function Gio.DtlsClientConnection:set_server_identity(identity) end

--- # method Gio.DtlsClientConnection:set_validation_flags()
---
--- Sets `conn`'s validation flags, to override the default set of
--- checks performed when validating a server certificate. By default,
--- %G_TLS_CERTIFICATE_VALIDATE_ALL is used.
--- 
--- This function does not work as originally designed and is impossible
--- to use correctly. See `GDtlsClientConnection`:validation-flags for more
--- information.
---
--- ---
---
---@param self Gio.DtlsClientConnection # the `GDtlsClientConnection`
---@param flags Gio.TlsCertificateFlags # the `GTlsCertificateFlags` to use
---@return nil
function Gio.DtlsClientConnection:set_validation_flags(flags) end

--- # function Gio.DtlsClientConnection.new()
---
--- Creates a new `GDtlsClientConnection` wrapping `base_socket` which is
--- assumed to communicate with the server identified by `server_identity`.
---
--- ---
---
---@param base_socket Gio.DatagramBased # the `GDatagramBased` to wrap
---@param server_identity? Gio.SocketConnectable # the expected identity of the server
---@return Gio.DtlsClientConnection # the new `GDtlsClientConnection`, or `nil` on error
function Gio.DtlsClientConnection.new(base_socket, server_identity) end

--- # record Gio.DtlsClientConnectionInterface
---
--- vtable for a `GDtlsClientConnection` implementation.
---
--- ---
---
---@class Gio.DtlsClientConnectionInterface
---@field g_iface GObject.TypeInterface # The parent interface.
Gio.DtlsClientConnectionInterface = {}

--- # interface Gio.DtlsConnection
---
--- `GDtlsConnection` is the base DTLS connection class type, which wraps
--- a `GDatagramBased` and provides DTLS encryption on top of it. Its
--- subclasses, `GDtlsClientConnection` and `GDtlsServerConnection`,
--- implement client-side and server-side DTLS, respectively.
--- 
--- For TLS support, see `GTlsConnection`.
--- 
--- As DTLS is datagram based, `GDtlsConnection` implements `GDatagramBased`,
--- presenting a datagram-socket-like API for the encrypted connection. This
--- operates over a base datagram connection, which is also a `GDatagramBased`
--- (`GDtlsConnection`:base-socket).
--- 
--- To close a DTLS connection, use `g_dtls_connection_close()`.
--- 
--- Neither `GDtlsServerConnection` or `GDtlsClientConnection` set the peer address
--- on their base `GDatagramBased` if it is a `GSocket` — it is up to the caller to
--- do that if they wish. If they do not, and `g_socket_close()` is called on the
--- base socket, the `GDtlsConnection` will not raise a %G_IO_ERROR_NOT_CONNECTED
--- error on further I/O.
---
--- ---
---
---@class Gio.DtlsConnection
Gio.DtlsConnection = {}

--- # method Gio.DtlsConnection:close()
---
--- Close the DTLS connection. This is equivalent to calling
--- `g_dtls_connection_shutdown()` to shut down both sides of the connection.
--- 
--- Closing a `GDtlsConnection` waits for all buffered but untransmitted data to
--- be sent before it completes. It then sends a `close_notify` DTLS alert to the
--- peer and may wait for a `close_notify` to be received from the peer. It does
--- not close the underlying `GDtlsConnection`:base-socket; that must be closed
--- separately.
--- 
--- Once `conn` is closed, all other operations will return %G_IO_ERROR_CLOSED.
--- Closing a `GDtlsConnection` multiple times will not return an error.
--- 
--- `GDtlsConnections` will be automatically closed when the last reference is
--- dropped, but you might want to call this function to make sure resources are
--- released as early as possible.
--- 
--- If `cancellable` is cancelled, the `GDtlsConnection` may be left
--- partially-closed and any pending untransmitted data may be lost. Call
--- `g_dtls_connection_close()` again to complete closing the `GDtlsConnection`.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return (boolean|nil) # `true` on success, `false` otherwise
function Gio.DtlsConnection:close(cancellable) end

--- # method Gio.DtlsConnection:close_async()
---
--- Asynchronously close the DTLS connection. See `g_dtls_connection_close()` for
--- more information.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # callback to call when the close operation is complete
---@param user_data? userdata # the data to pass to the callback function
---@return nil
function Gio.DtlsConnection:close_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.DtlsConnection:close_finish()
---
--- Finish an asynchronous TLS close operation. See `g_dtls_connection_close()`
--- for more information.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` on success, `false` on failure, in which case `error` will be set
function Gio.DtlsConnection:close_finish(result) end

--- # method Gio.DtlsConnection:emit_accept_certificate()
---
--- Used by `GDtlsConnection` implementations to emit the
--- `GDtlsConnection`::accept-certificate signal.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@param peer_cert Gio.TlsCertificate # the peer's `GTlsCertificate`
---@param errors Gio.TlsCertificateFlags # the problems with `peer_cert`
---@return (boolean|nil) # `true` if one of the signal handlers has returned `true` to accept `peer_cert`
function Gio.DtlsConnection:emit_accept_certificate(peer_cert, errors) end

--- # method Gio.DtlsConnection:get_certificate()
---
--- Gets `conn`'s certificate, as set by
--- `g_dtls_connection_set_certificate()`.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@return Gio.TlsCertificate # `conn`'s certificate, or `nil`
function Gio.DtlsConnection:get_certificate() end

--- # method Gio.DtlsConnection:get_channel_binding_data()
---
--- Query the TLS backend for TLS channel binding data of `type` for `conn`.
--- 
--- This call retrieves TLS channel binding data as specified in RFC
--- [5056](https://tools.ietf.org/html/rfc5056), RFC
--- [5929](https://tools.ietf.org/html/rfc5929), and related RFCs.  The
--- binding data is returned in `data`.  The `data` is resized by the callee
--- using `GByteArray` buffer management and will be freed when the `data`
--- is destroyed by `g_byte_array_unref()`. If `data` is `nil`, it will only
--- check whether TLS backend is able to fetch the data (e.g. whether `type`
--- is supported by the TLS backend). It does not guarantee that the data
--- will be available though.  That could happen if TLS connection does not
--- support `type` or the binding data is not available yet due to additional
--- negotiation or input required.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@param type Gio.TlsChannelBindingType # `GTlsChannelBindingType` type of data to fetch
---@param data? unknown[] # `GByteArray` is filled with the binding data, or `nil`
---@return (boolean|nil) # `true` on success, `false` otherwise
function Gio.DtlsConnection:get_channel_binding_data(type, data) end

--- # method Gio.DtlsConnection:get_ciphersuite_name()
---
--- Returns the name of the current DTLS ciphersuite, or `nil` if the
--- connection has not handshaked or has been closed. Beware that the TLS
--- backend may use any of multiple different naming conventions, because
--- OpenSSL and GnuTLS have their own ciphersuite naming conventions that
--- are different from each other and different from the standard, IANA-
--- registered ciphersuite names. The ciphersuite name is intended to be
--- displayed to the user for informative purposes only, and parsing it
--- is not recommended.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDTlsConnection`
---@return string # The name of the current DTLS ciphersuite, or `nil`
function Gio.DtlsConnection:get_ciphersuite_name() end

--- # method Gio.DtlsConnection:get_database()
---
--- Gets the certificate database that `conn` uses to verify
--- peer certificates. See `g_dtls_connection_set_database()`.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@return Gio.TlsDatabase # the certificate database that `conn` uses or `nil`
function Gio.DtlsConnection:get_database() end

--- # method Gio.DtlsConnection:get_interaction()
---
--- Get the object that will be used to interact with the user. It will be used
--- for things like prompting the user for passwords. If `nil` is returned, then
--- no user interaction will occur for this connection.
---
--- ---
---
---@param self Gio.DtlsConnection # a connection
---@return Gio.TlsInteraction # The interaction object.
function Gio.DtlsConnection:get_interaction() end

--- # method Gio.DtlsConnection:get_negotiated_protocol()
---
--- Gets the name of the application-layer protocol negotiated during
--- the handshake.
--- 
--- If the peer did not use the ALPN extension, or did not advertise a
--- protocol that matched one of `conn`'s protocols, or the TLS backend
--- does not support ALPN, then this will be `nil`. See
--- `g_dtls_connection_set_advertised_protocols()`.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@return string # the negotiated protocol, or `nil`
function Gio.DtlsConnection:get_negotiated_protocol() end

--- # method Gio.DtlsConnection:get_peer_certificate()
---
--- Gets `conn`'s peer's certificate after the handshake has completed
--- or failed. (It is not set during the emission of
--- `GDtlsConnection`::accept-certificate.)
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@return Gio.TlsCertificate # `conn`'s peer's certificate, or `nil`
function Gio.DtlsConnection:get_peer_certificate() end

--- # method Gio.DtlsConnection:get_peer_certificate_errors()
---
--- Gets the errors associated with validating `conn`'s peer's
--- certificate, after the handshake has completed or failed. (It is
--- not set during the emission of `GDtlsConnection`::accept-certificate.)
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@return Gio.TlsCertificateFlags # `conn`'s peer's certificate errors
function Gio.DtlsConnection:get_peer_certificate_errors() end

--- # method Gio.DtlsConnection:get_protocol_version()
---
--- Returns the current DTLS protocol version, which may be
--- %G_TLS_PROTOCOL_VERSION_UNKNOWN if the connection has not handshaked, or
--- has been closed, or if the TLS backend has implemented a protocol version
--- that is not a recognized `GTlsProtocolVersion`.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDTlsConnection`
---@return Gio.TlsProtocolVersion # The current DTLS protocol version
function Gio.DtlsConnection:get_protocol_version() end

--- # method Gio.DtlsConnection:get_rehandshake_mode()
---
--- Gets `conn` rehandshaking mode. See
--- `g_dtls_connection_set_rehandshake_mode()` for details.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@return Gio.TlsRehandshakeMode # %G_TLS_REHANDSHAKE_SAFELY
function Gio.DtlsConnection:get_rehandshake_mode() end

--- # method Gio.DtlsConnection:get_require_close_notify()
---
--- Tests whether or not `conn` expects a proper TLS close notification
--- when the connection is closed. See
--- `g_dtls_connection_set_require_close_notify()` for details.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@return (boolean|nil) # `true` if `conn` requires a proper TLS close notification.
function Gio.DtlsConnection:get_require_close_notify() end

--- # method Gio.DtlsConnection:handshake()
---
--- Attempts a TLS handshake on `conn`.
--- 
--- On the client side, it is never necessary to call this method;
--- although the connection needs to perform a handshake after
--- connecting, `GDtlsConnection` will handle this for you automatically
--- when you try to send or receive data on the connection. You can call
--- `g_dtls_connection_handshake()` manually if you want to know whether
--- the initial handshake succeeded or failed (as opposed to just
--- immediately trying to use `conn` to read or write, in which case,
--- if it fails, it may not be possible to tell if it failed before
--- or after completing the handshake), but beware that servers may reject
--- client authentication after the handshake has completed, so a
--- successful handshake does not indicate the connection will be usable.
--- 
--- Likewise, on the server side, although a handshake is necessary at
--- the beginning of the communication, you do not need to call this
--- function explicitly unless you want clearer error reporting.
--- 
--- Previously, calling `g_dtls_connection_handshake()` after the initial
--- handshake would trigger a rehandshake; however, this usage was
--- deprecated in GLib 2.60 because rehandshaking was removed from the
--- TLS protocol in TLS 1.3. Since GLib 2.64, calling this function after
--- the initial handshake will no longer do anything.
--- 
--- `GDtlsConnection`::accept_certificate may be emitted during the
--- handshake.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return (boolean|nil) # success or failure
function Gio.DtlsConnection:handshake(cancellable) end

--- # method Gio.DtlsConnection:handshake_async()
---
--- Asynchronously performs a TLS handshake on `conn`. See
--- `g_dtls_connection_handshake()` for more information.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # callback to call when the handshake is complete
---@param user_data? userdata # the data to pass to the callback function
---@return nil
function Gio.DtlsConnection:handshake_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.DtlsConnection:handshake_finish()
---
--- Finish an asynchronous TLS handshake operation. See
--- `g_dtls_connection_handshake()` for more information.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` on success, `false` on failure, in which case `error` will be set.
function Gio.DtlsConnection:handshake_finish(result) end

--- # method Gio.DtlsConnection:set_advertised_protocols()
---
--- Sets the list of application-layer protocols to advertise that the
--- caller is willing to speak on this connection. The
--- Application-Layer Protocol Negotiation (ALPN) extension will be
--- used to negotiate a compatible protocol with the peer; use
--- `g_dtls_connection_get_negotiated_protocol()` to find the negotiated
--- protocol after the handshake.  Specifying `nil` for the the value
--- of `protocols` will disable ALPN negotiation.
--- 
--- See [IANA TLS ALPN Protocol IDs](https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml`alpn`-protocol-ids)
--- for a list of registered protocol IDs.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@param protocols? unknown[] # a `nil`-terminated array of ALPN protocol names (eg, "http/1.1", "h2"), or `nil`
---@return nil
function Gio.DtlsConnection:set_advertised_protocols(protocols) end

--- # method Gio.DtlsConnection:set_certificate()
---
--- This sets the certificate that `conn` will present to its peer
--- during the TLS handshake. For a `GDtlsServerConnection`, it is
--- mandatory to set this, and that will normally be done at construct
--- time.
--- 
--- For a `GDtlsClientConnection`, this is optional. If a handshake fails
--- with %G_TLS_ERROR_CERTIFICATE_REQUIRED, that means that the server
--- requires a certificate, and if you try connecting again, you should
--- call this method first. You can call
--- `g_dtls_client_connection_get_accepted_cas()` on the failed connection
--- to get a list of Certificate Authorities that the server will
--- accept certificates from.
--- 
--- (It is also possible that a server will allow the connection with
--- or without a certificate; in that case, if you don't provide a
--- certificate, you can tell that the server requested one by the fact
--- that `g_dtls_client_connection_get_accepted_cas()` will return
--- non-`nil`.)
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@param certificate Gio.TlsCertificate # the certificate to use for `conn`
---@return nil
function Gio.DtlsConnection:set_certificate(certificate) end

--- # method Gio.DtlsConnection:set_database()
---
--- Sets the certificate database that is used to verify peer certificates.
--- This is set to the default database by default. See
--- `g_tls_backend_get_default_database()`. If set to `nil`, then
--- peer certificate validation will always set the
--- %G_TLS_CERTIFICATE_UNKNOWN_CA error (meaning
--- `GDtlsConnection`::accept-certificate will always be emitted on
--- client-side connections, unless that bit is not set in
--- `GDtlsClientConnection`:validation-flags).
--- 
--- There are nonintuitive security implications when using a non-default
--- database. See `GDtlsConnection`:database for details.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@param database? Gio.TlsDatabase # a `GTlsDatabase`
---@return nil
function Gio.DtlsConnection:set_database(database) end

--- # method Gio.DtlsConnection:set_interaction()
---
--- Set the object that will be used to interact with the user. It will be used
--- for things like prompting the user for passwords.
--- 
--- The `interaction` argument will normally be a derived subclass of
--- `GTlsInteraction`. `nil` can also be provided if no user interaction
--- should occur for this connection.
---
--- ---
---
---@param self Gio.DtlsConnection # a connection
---@param interaction? Gio.TlsInteraction # an interaction object, or `nil`
---@return nil
function Gio.DtlsConnection:set_interaction(interaction) end

--- # method Gio.DtlsConnection:set_rehandshake_mode()
---
--- Since GLib 2.64, changing the rehandshake mode is no longer supported
--- and will have no effect. With TLS 1.3, rehandshaking has been removed from
--- the TLS protocol, replaced by separate post-handshake authentication and
--- rekey operations.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@param mode Gio.TlsRehandshakeMode # the rehandshaking mode
---@return nil
function Gio.DtlsConnection:set_rehandshake_mode(mode) end

--- # method Gio.DtlsConnection:set_require_close_notify()
---
--- Sets whether or not `conn` expects a proper TLS close notification
--- before the connection is closed. If this is `true` (the default),
--- then `conn` will expect to receive a TLS close notification from its
--- peer before the connection is closed, and will return a
--- %G_TLS_ERROR_EOF error if the connection is closed without proper
--- notification (since this may indicate a network error, or
--- man-in-the-middle attack).
--- 
--- In some protocols, the application will know whether or not the
--- connection was closed cleanly based on application-level data
--- (because the application-level data includes a length field, or is
--- somehow self-delimiting); in this case, the close notify is
--- redundant and may be omitted. You
--- can use `g_dtls_connection_set_require_close_notify()` to tell `conn`
--- to allow an "unannounced" connection close, in which case the close
--- will show up as a 0-length read, as in a non-TLS
--- `GDatagramBased`, and it is up to the application to check that
--- the data has been fully received.
--- 
--- Note that this only affects the behavior when the peer closes the
--- connection; when the application calls `g_dtls_connection_close_async()` on
--- `conn` itself, this will send a close notification regardless of the
--- setting of this property. If you explicitly want to do an unclean
--- close, you can close `conn`'s `GDtlsConnection`:base-socket rather
--- than closing `conn` itself.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@param require_close_notify (boolean|nil) # whether or not to require close notification
---@return nil
function Gio.DtlsConnection:set_require_close_notify(require_close_notify) end

--- # method Gio.DtlsConnection:shutdown()
---
--- Shut down part or all of a DTLS connection.
--- 
--- If `shutdown_read` is `true` then the receiving side of the connection is shut
--- down, and further reading is disallowed. Subsequent calls to
--- `g_datagram_based_receive_messages()` will return %G_IO_ERROR_CLOSED.
--- 
--- If `shutdown_write` is `true` then the sending side of the connection is shut
--- down, and further writing is disallowed. Subsequent calls to
--- `g_datagram_based_send_messages()` will return %G_IO_ERROR_CLOSED.
--- 
--- It is allowed for both `shutdown_read` and `shutdown_write` to be TRUE — this
--- is equivalent to calling `g_dtls_connection_close()`.
--- 
--- If `cancellable` is cancelled, the `GDtlsConnection` may be left
--- partially-closed and any pending untransmitted data may be lost. Call
--- `g_dtls_connection_shutdown()` again to complete closing the `GDtlsConnection`.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@param shutdown_read (boolean|nil) # `true` to stop reception of incoming datagrams
---@param shutdown_write (boolean|nil) # `true` to stop sending outgoing datagrams
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return (boolean|nil) # `true` on success, `false` otherwise
function Gio.DtlsConnection:shutdown(shutdown_read, shutdown_write, cancellable) end

--- # method Gio.DtlsConnection:shutdown_async()
---
--- Asynchronously shut down part or all of the DTLS connection. See
--- `g_dtls_connection_shutdown()` for more information.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@param shutdown_read (boolean|nil) # `true` to stop reception of incoming datagrams
---@param shutdown_write (boolean|nil) # `true` to stop sending outgoing datagrams
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # callback to call when the shutdown operation is complete
---@param user_data? userdata # the data to pass to the callback function
---@return nil
function Gio.DtlsConnection:shutdown_async(shutdown_read, shutdown_write, io_priority, cancellable, callback, user_data) end

--- # method Gio.DtlsConnection:shutdown_finish()
---
--- Finish an asynchronous TLS shutdown operation. See
--- `g_dtls_connection_shutdown()` for more information.
---
--- ---
---
---@param self Gio.DtlsConnection # a `GDtlsConnection`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` on success, `false` on failure, in which case `error` will be set
function Gio.DtlsConnection:shutdown_finish(result) end

--- # record Gio.DtlsConnectionInterface
---
--- Virtual method table for a `GDtlsConnection` implementation.
---
--- ---
---
---@class Gio.DtlsConnectionInterface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field accept_certificate fun(connection: Gio.DtlsConnection, peer_cert: Gio.TlsCertificate, errors: Gio.TlsCertificateFlags): (boolean|nil)
---@field handshake fun(conn: Gio.DtlsConnection, cancellable: Gio.Cancellable): (boolean|nil)
---@field handshake_async fun(conn: Gio.DtlsConnection, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field handshake_finish fun(conn: Gio.DtlsConnection, result: Gio.AsyncResult): (boolean|nil)
---@field shutdown fun(conn: Gio.DtlsConnection, shutdown_read: (boolean|nil), shutdown_write: (boolean|nil), cancellable: Gio.Cancellable): (boolean|nil)
---@field shutdown_async fun(conn: Gio.DtlsConnection, shutdown_read: (boolean|nil), shutdown_write: (boolean|nil), io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field shutdown_finish fun(conn: Gio.DtlsConnection, result: Gio.AsyncResult): (boolean|nil)
---@field set_advertised_protocols fun(conn: Gio.DtlsConnection, protocols: unknown[]): nil
---@field get_negotiated_protocol fun(conn: Gio.DtlsConnection): string
---@field get_binding_data fun(conn: Gio.DtlsConnection, type: Gio.TlsChannelBindingType, data: unknown[]): (boolean|nil)
Gio.DtlsConnectionInterface = {}

--- # interface Gio.DtlsServerConnection
---
--- `GDtlsServerConnection` is the server-side subclass of `GDtlsConnection`,
--- representing a server-side DTLS connection.
---
--- ---
---
---@class Gio.DtlsServerConnection
---@operator call: Gio.DtlsServerConnection
Gio.DtlsServerConnection = {}

--- # function Gio.DtlsServerConnection.new()
---
--- Creates a new `GDtlsServerConnection` wrapping `base_socket`.
---
--- ---
---
---@param base_socket Gio.DatagramBased # the `GDatagramBased` to wrap
---@param certificate? Gio.TlsCertificate # the default server certificate, or `nil`
---@return Gio.DtlsServerConnection # the new `GDtlsServerConnection`, or `nil` on error
function Gio.DtlsServerConnection.new(base_socket, certificate) end

--- # record Gio.DtlsServerConnectionInterface
---
--- vtable for a `GDtlsServerConnection` implementation.
---
--- ---
---
---@class Gio.DtlsServerConnectionInterface
---@field g_iface GObject.TypeInterface # The parent interface.
Gio.DtlsServerConnectionInterface = {}

--- # class Gio.Emblem
---
--- `GEmblem` is an implementation of `GIcon` that supports
--- having an emblem, which is an icon with additional properties.
--- It can than be added to a `GEmblemedIcon`.
--- 
--- Currently, only metainformation about the emblem's origin is
--- supported. More may be added in the future.
---
--- ---
---
---@class Gio.Emblem : GObject.Object, Gio.Icon
---@operator call: Gio.Emblem
Gio.Emblem = {}

--- # method Gio.Emblem:get_icon()
---
--- Gives back the icon from `emblem`.
---
--- ---
---
---@param self Gio.Emblem # a `GEmblem` from which the icon should be extracted.
---@return Gio.Icon # a `GIcon`. The returned object belongs to the emblem and should not be modified or freed.
function Gio.Emblem:get_icon() end

--- # method Gio.Emblem:get_origin()
---
--- Gets the origin of the emblem.
---
--- ---
---
---@param self Gio.Emblem # a `GEmblem`
---@return Gio.EmblemOrigin # the origin of the emblem
function Gio.Emblem:get_origin() end

--- # function Gio.Emblem.new()
---
--- Creates a new emblem for `icon`.
---
--- ---
---
---@param icon Gio.Icon # a GIcon containing the icon.
---@return Gio.Emblem # a new `GEmblem`.
function Gio.Emblem.new(icon) end

--- # function Gio.Emblem.new_with_origin()
---
--- Creates a new emblem for `icon`.
---
--- ---
---
---@param icon Gio.Icon # a GIcon containing the icon.
---@param origin Gio.EmblemOrigin # a GEmblemOrigin enum defining the emblem's origin
---@return Gio.Emblem # a new `GEmblem`.
function Gio.Emblem.new_with_origin(icon, origin) end

--- # record Gio.EmblemClass
---
---@class Gio.EmblemClass
Gio.EmblemClass = {}

---@enum Gio.EmblemOrigin
Gio.EmblemOrigin = {}

--- # class Gio.EmblemedIcon
---
--- `GEmblemedIcon` is an implementation of `GIcon` that supports
--- adding an emblem to an icon. Adding multiple emblems to an
--- icon is ensured via `g_emblemed_icon_add_emblem()`.
--- 
--- Note that `GEmblemedIcon` allows no control over the position
--- of the emblems. See also `GEmblem` for more information.
---
--- ---
---
---@class Gio.EmblemedIcon : GObject.Object, Gio.Icon
---@field parent_instance GObject.Object
---@field priv Gio.EmblemedIconPrivate
---@operator call: Gio.EmblemedIcon
Gio.EmblemedIcon = {}

--- # method Gio.EmblemedIcon:add_emblem()
---
--- Adds `emblem` to the `GList` of `GEmblems`.
---
--- ---
---
---@param self Gio.EmblemedIcon # a `GEmblemedIcon`
---@param emblem Gio.Emblem # a `GEmblem`
---@return nil
function Gio.EmblemedIcon:add_emblem(emblem) end

--- # method Gio.EmblemedIcon:clear_emblems()
---
--- Removes all the emblems from `icon`.
---
--- ---
---
---@param self Gio.EmblemedIcon # a `GEmblemedIcon`
---@return nil
function Gio.EmblemedIcon:clear_emblems() end

--- # method Gio.EmblemedIcon:get_emblems()
---
--- Gets the list of emblems for the `icon`.
---
--- ---
---
---@param self Gio.EmblemedIcon # a `GEmblemedIcon`
---@return Gio.Emblem[] # a `GList` of `GEmblems` that is owned by `emblemed`
function Gio.EmblemedIcon:get_emblems() end

--- # method Gio.EmblemedIcon:get_icon()
---
--- Gets the main icon for `emblemed`.
---
--- ---
---
---@param self Gio.EmblemedIcon # a `GEmblemedIcon`
---@return Gio.Icon # a `GIcon` that is owned by `emblemed`
function Gio.EmblemedIcon:get_icon() end

--- # function Gio.EmblemedIcon.new()
---
--- Creates a new emblemed icon for `icon` with the emblem `emblem`.
---
--- ---
---
---@param icon Gio.Icon # a `GIcon`
---@param emblem? Gio.Emblem # a `GEmblem`, or `nil`
---@return Gio.EmblemedIcon # a new `GIcon`
function Gio.EmblemedIcon.new(icon, emblem) end

--- # record Gio.EmblemedIconClass
---
---@class Gio.EmblemedIconClass
---@field parent_class GObject.ObjectClass
Gio.EmblemedIconClass = {}

--- # record Gio.EmblemedIconPrivate
---
---@class Gio.EmblemedIconPrivate
Gio.EmblemedIconPrivate = {}

--- # interface Gio.File
---
--- `GFile` is a high level abstraction for manipulating files on a
--- virtual file system. `GFiles` are lightweight, immutable objects
--- that do no I/O upon creation. It is necessary to understand that
--- `GFile` objects do not represent files, merely an identifier for a
--- file. All file content I/O is implemented as streaming operations
--- (see `GInputStream` and `GOutputStream`).
--- 
--- To construct a `GFile`, you can use:
--- - `g_file_new_for_path()` if you have a path.
--- - `g_file_new_for_uri()` if you have a URI.
--- - `g_file_new_for_commandline_arg()` for a command line argument.
--- - `g_file_new_tmp()` to create a temporary file from a template.
--- - `g_file_new_tmp_async()` to asynchronously create a temporary file.
--- - `g_file_new_tmp_dir_async()` to asynchronously create a temporary directory.
--- - `g_file_parse_name()` from a UTF-8 string gotten from `g_file_get_parse_name()`.
--- - `g_file_new_build_filename()` to create a file from path elements.
--- 
--- One way to think of a `GFile` is as an abstraction of a pathname. For
--- normal files the system pathname is what is stored internally, but as
--- `GFiles` are extensible it could also be something else that corresponds
--- to a pathname in a userspace implementation of a filesystem.
--- 
--- `GFiles` make up hierarchies of directories and files that correspond to
--- the files on a filesystem. You can move through the file system with
--- `GFile` using `g_file_get_parent()` to get an identifier for the parent
--- directory, `g_file_get_child()` to get a child within a directory,
--- `g_file_resolve_relative_path()` to resolve a relative path between two
--- `GFiles`. There can be multiple hierarchies, so you may not end up at
--- the same root if you repeatedly call `g_file_get_parent()` on two different
--- files.
--- 
--- All `GFiles` have a basename (get with `g_file_get_basename()`). These names
--- are byte strings that are used to identify the file on the filesystem
--- (relative to its parent directory) and there is no guarantees that they
--- have any particular charset encoding or even make any sense at all. If
--- you want to use filenames in a user interface you should use the display
--- name that you can get by requesting the
--- %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME attribute with `g_file_query_info()`.
--- This is guaranteed to be in UTF-8 and can be used in a user interface.
--- But always store the real basename or the `GFile` to use to actually
--- access the file, because there is no way to go from a display name to
--- the actual name.
--- 
--- Using `GFile` as an identifier has the same weaknesses as using a path
--- in that there may be multiple aliases for the same file. For instance,
--- hard or soft links may cause two different `GFiles` to refer to the same
--- file. Other possible causes for aliases are: case insensitive filesystems,
--- short and long names on FAT/NTFS, or bind mounts in Linux. If you want to
--- check if two `GFiles` point to the same file you can query for the
--- %G_FILE_ATTRIBUTE_ID_FILE attribute. Note that `GFile` does some trivial
--- canonicalization of pathnames passed in, so that trivial differences in
--- the path string used at creation (duplicated slashes, slash at end of
--- path, "." or ".." path segments, etc) does not create different `GFiles`.
--- 
--- Many `GFile` operations have both synchronous and asynchronous versions
--- to suit your application. Asynchronous versions of synchronous functions
--- simply have `_async()` appended to their function names. The asynchronous
--- I/O functions call a `GAsyncReadyCallback` which is then used to finalize
--- the operation, producing a GAsyncResult which is then passed to the
--- function's matching `_finish()` operation.
--- 
--- It is highly recommended to use asynchronous calls when running within a
--- shared main loop, such as in the main thread of an application. This avoids
--- I/O operations blocking other sources on the main loop from being dispatched.
--- Synchronous I/O operations should be performed from worker threads. See the
--- [introduction to asynchronous programming section][async-programming] for
--- more.
--- 
--- Some `GFile` operations almost always take a noticeable amount of time, and
--- so do not have synchronous analogs. Notable cases include:
--- - `g_file_mount_mountable()` to mount a mountable file.
--- - `g_file_unmount_mountable_with_operation()` to unmount a mountable file.
--- - `g_file_eject_mountable_with_operation()` to eject a mountable file.
--- 
--- ## Entity Tags # {`gfile`-etag}
--- 
--- One notable feature of `GFiles` are entity tags, or "etags" for
--- short. Entity tags are somewhat like a more abstract version of the
--- traditional mtime, and can be used to quickly determine if the file
--- has been modified from the version on the file system. See the
--- HTTP 1.1
--- [specification](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html)
--- for HTTP Etag headers, which are a very similar concept.
---
--- ---
---
---@class Gio.File
Gio.File = {}

--- # method Gio.File:append_to()
---
--- Gets an output stream for appending data to the file.
--- If the file doesn't already exist it is created.
--- 
--- By default files created are generally readable by everyone,
--- but if you pass %G_FILE_CREATE_PRIVATE in `flags` the file
--- will be made readable only to the current user, to the level that
--- is supported on the target filesystem.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled
--- by triggering the cancellable object from another thread. If the
--- operation was cancelled, the error %G_IO_ERROR_CANCELLED will be
--- returned.
--- 
--- Some file systems don't allow all file names, and may return an
--- %G_IO_ERROR_INVALID_FILENAME error. If the file is a directory the
--- %G_IO_ERROR_IS_DIRECTORY error will be returned. Other errors are
--- possible too, and depend on what kind of filesystem the file is on.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.FileCreateFlags # a set of `GFileCreateFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.FileOutputStream # a `GFileOutputStream`, or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:append_to(flags, cancellable) end

--- # method Gio.File:append_to_async()
---
--- Asynchronously opens `file` for appending.
--- 
--- For more details, see `g_file_append_to()` which is
--- the synchronous version of this call.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_file_append_to_finish()` to get the result
--- of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.FileCreateFlags # a set of `GFileCreateFlags`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:append_to_async(flags, io_priority, cancellable, callback, user_data) end

--- # method Gio.File:append_to_finish()
---
--- Finishes an asynchronous file append operation started with
--- `g_file_append_to_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param res Gio.AsyncResult # `GAsyncResult`
---@return Gio.FileOutputStream # a valid `GFileOutputStream` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:append_to_finish(res) end

--- # method Gio.File:build_attribute_list_for_copy()
---
--- Prepares the file attribute query string for copying to `file`.
--- 
--- This function prepares an attribute query string to be
--- passed to `g_file_query_info()` to get a list of attributes
--- normally copied with the file (see `g_file_copy_attributes()`
--- for the detailed description). This function is used by the
--- implementation of `g_file_copy_attributes()` and is useful
--- when one needs to query and set the attributes in two
--- stages (e.g., for recursive move of a directory).
---
--- ---
---
---@param self Gio.File # a `GFile` to copy attributes to
---@param flags Gio.FileCopyFlags # a set of `GFileCopyFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return string # an attribute query string for `g_file_query_info()`, or `nil` if an error occurs.
function Gio.File:build_attribute_list_for_copy(flags, cancellable) end

--- # method Gio.File:copy()
---
--- Copies the file `source` to the location specified by `destination`.
--- Can not handle recursive copies of directories.
--- 
--- If the flag %G_FILE_COPY_OVERWRITE is specified an already
--- existing `destination` file is overwritten.
--- 
--- If the flag %G_FILE_COPY_NOFOLLOW_SYMLINKS is specified then symlinks
--- will be copied as symlinks, otherwise the target of the
--- `source` symlink will be copied.
--- 
--- If the flag %G_FILE_COPY_ALL_METADATA is specified then all the metadata
--- that is possible to copy is copied, not just the default subset (which,
--- for instance, does not include the owner, see `GFileInfo`).
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
--- 
--- If `progress_callback` is not `nil`, then the operation can be monitored
--- by setting this to a `GFileProgressCallback` function.
--- `progress_callback_data` will be passed to this function. It is guaranteed
--- that this callback will be called after all data has been transferred with
--- the total number of bytes copied during the operation.
--- 
--- If the `source` file does not exist, then the %G_IO_ERROR_NOT_FOUND error
--- is returned, independent on the status of the `destination`.
--- 
--- If %G_FILE_COPY_OVERWRITE is not specified and the target exists, then
--- the error %G_IO_ERROR_EXISTS is returned.
--- 
--- If trying to overwrite a file over a directory, the %G_IO_ERROR_IS_DIRECTORY
--- error is returned. If trying to overwrite a directory with a directory the
--- %G_IO_ERROR_WOULD_MERGE error is returned.
--- 
--- If the source is a directory and the target does not exist, or
--- %G_FILE_COPY_OVERWRITE is specified and the target is a file, then the
--- %G_IO_ERROR_WOULD_RECURSE error is returned.
--- 
--- If you are interested in copying the `GFile` object itself (not the on-disk
--- file), see `g_file_dup()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param destination Gio.File # destination `GFile`
---@param flags Gio.FileCopyFlags # set of `GFileCopyFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param progress_callback? Gio.FileProgressCallback # function to callback with progress information, or `nil` if progress information is not needed
---@param progress_callback_data? userdata # user data to pass to `progress_callback`
---@return (boolean|nil) # `true` on success, `false` otherwise.
function Gio.File:copy(destination, flags, cancellable, progress_callback, progress_callback_data) end

--- # method Gio.File:copy_async()
---
--- Copies the file `source` to the location specified by `destination`
--- asynchronously. For details of the behaviour, see `g_file_copy()`.
--- 
--- If `progress_callback` is not `nil`, then that function that will be called
--- just like in `g_file_copy()`. The callback will run in the default main context
--- of the thread calling `g_file_copy_async()` — the same context as `callback` is
--- run in.
--- 
--- When the operation is finished, `callback` will be called. You can then call
--- `g_file_copy_finish()` to get the result of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param destination Gio.File # destination `GFile`
---@param flags Gio.FileCopyFlags # set of `GFileCopyFlags`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param progress_callback? Gio.FileProgressCallback # function to callback with progress information, or `nil` if progress information is not needed
---@param progress_callback_data? userdata # user data to pass to `progress_callback`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:copy_async(destination, flags, io_priority, cancellable, progress_callback, progress_callback_data, callback, user_data) end

--- # method Gio.File:copy_attributes()
---
--- Copies the file attributes from `source` to `destination`.
--- 
--- Normally only a subset of the file attributes are copied,
--- those that are copies in a normal file copy operation
--- (which for instance does not include e.g. owner). However
--- if %G_FILE_COPY_ALL_METADATA is specified in `flags`, then
--- all the metadata that is possible to copy is copied. This
--- is useful when implementing move by copy + delete source.
---
--- ---
---
---@param self Gio.File # a `GFile` with attributes
---@param destination Gio.File # a `GFile` to copy attributes to
---@param flags Gio.FileCopyFlags # a set of `GFileCopyFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `true` if the attributes were copied successfully, `false` otherwise.
function Gio.File:copy_attributes(destination, flags, cancellable) end

--- # method Gio.File:copy_finish()
---
--- Finishes copying the file started with `g_file_copy_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # a `true` on success, `false` on error.
function Gio.File:copy_finish(res) end

--- # method Gio.File:create()
---
--- Creates a new file and returns an output stream for writing to it.
--- The file must not already exist.
--- 
--- By default files created are generally readable by everyone,
--- but if you pass %G_FILE_CREATE_PRIVATE in `flags` the file
--- will be made readable only to the current user, to the level
--- that is supported on the target filesystem.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled
--- by triggering the cancellable object from another thread. If the
--- operation was cancelled, the error %G_IO_ERROR_CANCELLED will be
--- returned.
--- 
--- If a file or directory with this name already exists the
--- %G_IO_ERROR_EXISTS error will be returned. Some file systems don't
--- allow all file names, and may return an %G_IO_ERROR_INVALID_FILENAME
--- error, and if the name is to long %G_IO_ERROR_FILENAME_TOO_LONG will
--- be returned. Other errors are possible too, and depend on what kind
--- of filesystem the file is on.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.FileCreateFlags # a set of `GFileCreateFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.FileOutputStream # a `GFileOutputStream` for the newly created file, or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:create(flags, cancellable) end

--- # method Gio.File:create_async()
---
--- Asynchronously creates a new file and returns an output stream
--- for writing to it. The file must not already exist.
--- 
--- For more details, see `g_file_create()` which is
--- the synchronous version of this call.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_file_create_finish()` to get the result
--- of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.FileCreateFlags # a set of `GFileCreateFlags`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:create_async(flags, io_priority, cancellable, callback, user_data) end

--- # method Gio.File:create_finish()
---
--- Finishes an asynchronous file create operation started with
--- `g_file_create_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@return Gio.FileOutputStream # a `GFileOutputStream` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:create_finish(res) end

--- # method Gio.File:create_readwrite()
---
--- Creates a new file and returns a stream for reading and
--- writing to it. The file must not already exist.
--- 
--- By default files created are generally readable by everyone,
--- but if you pass %G_FILE_CREATE_PRIVATE in `flags` the file
--- will be made readable only to the current user, to the level
--- that is supported on the target filesystem.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled
--- by triggering the cancellable object from another thread. If the
--- operation was cancelled, the error %G_IO_ERROR_CANCELLED will be
--- returned.
--- 
--- If a file or directory with this name already exists, the
--- %G_IO_ERROR_EXISTS error will be returned. Some file systems don't
--- allow all file names, and may return an %G_IO_ERROR_INVALID_FILENAME
--- error, and if the name is too long, %G_IO_ERROR_FILENAME_TOO_LONG
--- will be returned. Other errors are possible too, and depend on what
--- kind of filesystem the file is on.
--- 
--- Note that in many non-local file cases read and write streams are
--- not supported, so make sure you really need to do read and write
--- streaming, rather than just opening for reading or writing.
---
--- ---
---
---@param self Gio.File # a `GFile`
---@param flags Gio.FileCreateFlags # a set of `GFileCreateFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.FileIOStream # a `GFileIOStream` for the newly created file, or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:create_readwrite(flags, cancellable) end

--- # method Gio.File:create_readwrite_async()
---
--- Asynchronously creates a new file and returns a stream
--- for reading and writing to it. The file must not already exist.
--- 
--- For more details, see `g_file_create_readwrite()` which is
--- the synchronous version of this call.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_file_create_readwrite_finish()` to get
--- the result of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.FileCreateFlags # a set of `GFileCreateFlags`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:create_readwrite_async(flags, io_priority, cancellable, callback, user_data) end

--- # method Gio.File:create_readwrite_finish()
---
--- Finishes an asynchronous file create operation started with
--- `g_file_create_readwrite_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@return Gio.FileIOStream # a `GFileIOStream` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:create_readwrite_finish(res) end

--- # method Gio.File:delete()
---
--- Deletes a file. If the `file` is a directory, it will only be
--- deleted if it is empty. This has the same semantics as `g_unlink()`.
--- 
--- If `file` doesn’t exist, %G_IO_ERROR_NOT_FOUND will be returned. This allows
--- for deletion to be implemented avoiding
--- [time-of-check to time-of-use races](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use):
--- ```c
--- g_autoptr(GError) local_error = NULL;
--- if (!g_file_delete (my_file, my_cancellable, &local_error) &&
---     !g_error_matches (local_error, G_IO_ERROR, G_IO_ERROR_NOT_FOUND))
---   {
---     // deletion failed for some reason other than the file not existing:
---     // so report the error
---     g_warning ("Failed to delete %s: %s",
---                g_file_peek_path (my_file), local_error->message);
---   }
--- ```
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `true` if the file was deleted. `false` otherwise.
function Gio.File:delete(cancellable) end

--- # method Gio.File:delete_async()
---
--- Asynchronously delete a file. If the `file` is a directory, it will
--- only be deleted if it is empty.  This has the same semantics as
--- `g_unlink()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:delete_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.File:delete_finish()
---
--- Finishes deleting a file started with `g_file_delete_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` if the file was deleted. `false` otherwise.
function Gio.File:delete_finish(result) end

--- # method Gio.File:dup()
---
--- Duplicates a `GFile` handle. This operation does not duplicate
--- the actual file or directory represented by the `GFile`; see
--- `g_file_copy()` if attempting to copy a file.
--- 
--- `g_file_dup()` is useful when a second handle is needed to the same underlying
--- file, for use in a separate thread (`GFile` is not thread-safe). For use
--- within the same thread, use `g_object_ref()` to increment the existing object’s
--- reference count.
--- 
--- This call does no blocking I/O.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@return Gio.File # a new `GFile` that is a duplicate of the given `GFile`.
function Gio.File:dup() end

--- # method Gio.File:eject_mountable()
---
--- Starts an asynchronous eject on a mountable.
--- When this operation has completed, `callback` will be called with
--- `user_user` data, and the operation can be finalized with
--- `g_file_eject_mountable_finish()`.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.MountUnmountFlags # flags affecting the operation
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied, or `nil`
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:eject_mountable(flags, cancellable, callback, user_data) end

--- # method Gio.File:eject_mountable_finish()
---
--- Finishes an asynchronous eject operation started by
--- `g_file_eject_mountable()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` if the `file` was ejected successfully. `false` otherwise.
function Gio.File:eject_mountable_finish(result) end

--- # method Gio.File:eject_mountable_with_operation()
---
--- Starts an asynchronous eject on a mountable.
--- When this operation has completed, `callback` will be called with
--- `user_user` data, and the operation can be finalized with
--- `g_file_eject_mountable_with_operation_finish()`.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.MountUnmountFlags # flags affecting the operation
---@param mount_operation? Gio.MountOperation # a `GMountOperation`, or `nil` to avoid user interaction
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied, or `nil`
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:eject_mountable_with_operation(flags, mount_operation, cancellable, callback, user_data) end

--- # method Gio.File:eject_mountable_with_operation_finish()
---
--- Finishes an asynchronous eject operation started by
--- `g_file_eject_mountable_with_operation()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` if the `file` was ejected successfully. `false` otherwise.
function Gio.File:eject_mountable_with_operation_finish(result) end

--- # method Gio.File:enumerate_children()
---
--- Gets the requested information about the files in a directory.
--- The result is a `GFileEnumerator` object that will give out
--- `GFileInfo` objects for all the files in the directory.
--- 
--- The `attributes` value is a string that specifies the file
--- attributes that should be gathered. It is not an error if
--- it's not possible to read a particular requested attribute
--- from a file - it just won't be set. `attributes` should
--- be a comma-separated list of attributes or attribute wildcards.
--- The wildcard "*" means all attributes, and a wildcard like
--- "standard::*" means all attributes in the standard namespace.
--- An example attribute query be "standard::*,owner::user".
--- The standard attributes are available as defines, like
--- %G_FILE_ATTRIBUTE_STANDARD_NAME. %G_FILE_ATTRIBUTE_STANDARD_NAME should
--- always be specified if you plan to call `g_file_enumerator_get_child()` or
--- `g_file_enumerator_iterate()` on the returned enumerator.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled
--- by triggering the cancellable object from another thread. If the
--- operation was cancelled, the error %G_IO_ERROR_CANCELLED will be
--- returned.
--- 
--- If the file does not exist, the %G_IO_ERROR_NOT_FOUND error will
--- be returned. If the file is not a directory, the %G_IO_ERROR_NOT_DIRECTORY
--- error will be returned. Other errors are possible too.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param attributes string # an attribute query string
---@param flags Gio.FileQueryInfoFlags # a set of `GFileQueryInfoFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.FileEnumerator # A `GFileEnumerator` if successful, `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:enumerate_children(attributes, flags, cancellable) end

--- # method Gio.File:enumerate_children_async()
---
--- Asynchronously gets the requested information about the files
--- in a directory. The result is a `GFileEnumerator` object that will
--- give out `GFileInfo` objects for all the files in the directory.
--- 
--- For more details, see `g_file_enumerate_children()` which is
--- the synchronous version of this call.
--- 
--- When the operation is finished, `callback` will be called. You can
--- then call `g_file_enumerate_children_finish()` to get the result of
--- the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param attributes string # an attribute query string
---@param flags Gio.FileQueryInfoFlags # a set of `GFileQueryInfoFlags`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:enumerate_children_async(attributes, flags, io_priority, cancellable, callback, user_data) end

--- # method Gio.File:enumerate_children_finish()
---
--- Finishes an async enumerate children operation.
--- See `g_file_enumerate_children_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@return Gio.FileEnumerator # a `GFileEnumerator` or `nil` if an error occurred. Free the returned object with `g_object_unref()`.
function Gio.File:enumerate_children_finish(res) end

--- # method Gio.File:equal()
---
--- Checks if the two given `GFiles` refer to the same file.
--- 
--- Note that two `GFiles` that differ can still refer to the same
--- file on the filesystem due to various forms of filename
--- aliasing.
--- 
--- This call does no blocking I/O.
---
--- ---
---
---@param self Gio.File # the first `GFile`
---@param file2 Gio.File # the second `GFile`
---@return (boolean|nil) # `true` if `file1` and `file2` are equal.
function Gio.File:equal(file2) end

--- # method Gio.File:find_enclosing_mount()
---
--- Gets a `GMount` for the `GFile`.
--- 
--- `GMount` is returned only for user interesting locations, see
--- `GVolumeMonitor`. If the `GFileIface` for `file` does not have a `mount`,
--- `error` will be set to %G_IO_ERROR_NOT_FOUND and `nil` `will` be returned.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.Mount # a `GMount` where the `file` is located or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:find_enclosing_mount(cancellable) end

--- # method Gio.File:find_enclosing_mount_async()
---
--- Asynchronously gets the mount for the file.
--- 
--- For more details, see `g_file_find_enclosing_mount()` which is
--- the synchronous version of this call.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_file_find_enclosing_mount_finish()` to
--- get the result of the operation.
---
--- ---
---
---@param self Gio.File # a `GFile`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:find_enclosing_mount_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.File:find_enclosing_mount_finish()
---
--- Finishes an asynchronous find mount request.
--- See `g_file_find_enclosing_mount_async()`.
---
--- ---
---
---@param self Gio.File # a `GFile`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@return Gio.Mount # `GMount` for given `file` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:find_enclosing_mount_finish(res) end

--- # method Gio.File:get_basename()
---
--- Gets the base name (the last component of the path) for a given `GFile`.
--- 
--- If called for the top level of a system (such as the filesystem root
--- or a uri like sftp://host/) it will return a single directory separator
--- (and on Windows, possibly a drive letter).
--- 
--- The base name is a byte string (not UTF-8). It has no defined encoding
--- or rules other than it may not contain zero bytes.  If you want to use
--- filenames in a user interface you should use the display name that you
--- can get by requesting the %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME
--- attribute with `g_file_query_info()`.
--- 
--- This call does no blocking I/O.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@return string # string containing the `GFile`'s base name, or `nil` if given `GFile` is invalid. The returned string should be freed with `g_free()` when no longer needed.
function Gio.File:get_basename() end

--- # method Gio.File:get_child()
---
--- Gets a child of `file` with basename equal to `name`.
--- 
--- Note that the file with that specific name might not exist, but
--- you can still have a `GFile` that points to it. You can use this
--- for instance to create that file.
--- 
--- This call does no blocking I/O.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param name string # string containing the child's basename
---@return Gio.File # a `GFile` to a child specified by `name`. Free the returned object with `g_object_unref()`.
function Gio.File:get_child(name) end

--- # method Gio.File:get_child_for_display_name()
---
--- Gets the child of `file` for a given `display_name` (i.e. a UTF-8
--- version of the name). If this function fails, it returns `nil`
--- and `error` will be set. This is very useful when constructing a
--- `GFile` for a new file and the user entered the filename in the
--- user interface, for instance when you select a directory and
--- type a filename in the file selector.
--- 
--- This call does no blocking I/O.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param display_name string # string to a possible child
---@return Gio.File # a `GFile` to the specified child, or `nil` if the display name couldn't be converted. Free the returned object with `g_object_unref()`.
function Gio.File:get_child_for_display_name(display_name) end

--- # method Gio.File:get_parent()
---
--- Gets the parent directory for the `file`.
--- If the `file` represents the root directory of the
--- file system, then `nil` will be returned.
--- 
--- This call does no blocking I/O.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@return Gio.File # a `GFile` structure to the parent of the given `GFile` or `nil` if there is no parent. Free the returned object with `g_object_unref()`.
function Gio.File:get_parent() end

--- # method Gio.File:get_parse_name()
---
--- Gets the parse name of the `file`.
--- A parse name is a UTF-8 string that describes the
--- file such that one can get the `GFile` back using
--- `g_file_parse_name()`.
--- 
--- This is generally used to show the `GFile` as a nice
--- full-pathname kind of string in a user interface,
--- like in a location entry.
--- 
--- For local files with names that can safely be converted
--- to UTF-8 the pathname is used, otherwise the IRI is used
--- (a form of URI that allows UTF-8 characters unescaped).
--- 
--- This call does no blocking I/O.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@return string # a string containing the `GFile`'s parse name. The returned string should be freed with `g_free()` when no longer needed.
function Gio.File:get_parse_name() end

--- # method Gio.File:get_path()
---
--- Gets the local pathname for `GFile`, if one exists. If non-`nil`, this is
--- guaranteed to be an absolute, canonical path. It might contain symlinks.
--- 
--- This call does no blocking I/O.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@return string # string containing the `GFile`'s path, or `nil` if no such path exists. The returned string should be freed with `g_free()` when no longer needed.
function Gio.File:get_path() end

--- # method Gio.File:get_relative_path()
---
--- Gets the path for `descendant` relative to `parent`.
--- 
--- This call does no blocking I/O.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param descendant Gio.File # input `GFile`
---@return string # string with the relative path from `descendant` to `parent`, or `nil` if `descendant` doesn't have `parent` as prefix. The returned string should be freed with `g_free()` when no longer needed.
function Gio.File:get_relative_path(descendant) end

--- # method Gio.File:get_uri()
---
--- Gets the URI for the `file`.
--- 
--- This call does no blocking I/O.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@return string # a string containing the `GFile`'s URI. If the `GFile` was constructed with an invalid URI, an invalid URI is returned. The returned string should be freed with `g_free()` when no longer needed.
function Gio.File:get_uri() end

--- # method Gio.File:get_uri_scheme()
---
--- Gets the URI scheme for a `GFile`.
--- RFC 3986 decodes the scheme as:
--- ```c
--- URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
--- ```
--- Common schemes include "file", "http", "ftp", etc.
--- 
--- The scheme can be different from the one used to construct the `GFile`,
--- in that it might be replaced with one that is logically equivalent to the `GFile`.
--- 
--- This call does no blocking I/O.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@return string # a string containing the URI scheme for the given `GFile` or `nil` if the `GFile` was constructed with an invalid URI. The returned string should be freed with `g_free()` when no longer needed.
function Gio.File:get_uri_scheme() end

--- # method Gio.File:has_parent()
---
--- Checks if `file` has a parent, and optionally, if it is `parent`.
--- 
--- If `parent` is `nil` then this function returns `true` if `file` has any
--- parent at all.  If `parent` is non-`nil` then `true` is only returned
--- if `file` is an immediate child of `parent`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param parent? Gio.File # the parent to check for, or `nil`
---@return (boolean|nil) # `true` if `file` is an immediate child of `parent` (or any parent in the case that `parent` is `nil`).
function Gio.File:has_parent(parent) end

--- # method Gio.File:has_prefix()
---
--- Checks whether `file` has the prefix specified by `prefix`.
--- 
--- In other words, if the names of initial elements of `file`'s
--- pathname match `prefix`. Only full pathname elements are matched,
--- so a path like /foo is not considered a prefix of /foobar, only
--- of /foo/bar.
--- 
--- A `GFile` is not a prefix of itself. If you want to check for
--- equality, use `g_file_equal()`.
--- 
--- This call does no I/O, as it works purely on names. As such it can
--- sometimes return `false` even if `file` is inside a `prefix` (from a
--- filesystem point of view), because the prefix of `file` is an alias
--- of `prefix`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param prefix Gio.File # input `GFile`
---@return (boolean|nil) # `true` if the `file`'s parent, grandparent, etc is `prefix`, `false` otherwise.
function Gio.File:has_prefix(prefix) end

--- # method Gio.File:has_uri_scheme()
---
--- Checks to see if a `GFile` has a given URI scheme.
--- 
--- This call does no blocking I/O.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param uri_scheme string # a string containing a URI scheme
---@return (boolean|nil) # `true` if `GFile`'s backend supports the given URI scheme, `false` if URI scheme is `nil`, not supported, or `GFile` is invalid.
function Gio.File:has_uri_scheme(uri_scheme) end

--- # method Gio.File:hash()
---
--- Creates a hash value for a `GFile`.
--- 
--- This call does no blocking I/O.
---
--- ---
---
---@param self Gio.File # `gconstpointer` to a `GFile`
---@return integer # 0 if `file` is not a valid `GFile`, otherwise an integer that can be used as hash value for the `GFile`. This function is intended for easily hashing a `GFile` to add to a `GHashTable` or similar data structure.
function Gio.File:hash() end

--- # method Gio.File:is_native()
---
--- Checks to see if a file is native to the platform.
--- 
--- A native file is one expressed in the platform-native filename format,
--- e.g. "C:\Windows" or "/usr/bin/". This does not mean the file is local,
--- as it might be on a locally mounted remote filesystem.
--- 
--- On some systems non-native files may be available using the native
--- filesystem via a userspace filesystem (FUSE), in these cases this call
--- will return `false`, but `g_file_get_path()` will still return a native path.
--- 
--- This call does no blocking I/O.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@return (boolean|nil) # `true` if `file` is native
function Gio.File:is_native() end

--- # method Gio.File:load_bytes()
---
--- Loads the contents of `file` and returns it as `GBytes`.
--- 
--- If `file` is a resource:// based URI, the resulting bytes will reference the
--- embedded resource instead of a copy. Otherwise, this is equivalent to calling
--- `g_file_load_contents()` and `g_bytes_new_take()`.
--- 
--- For resources, `etag_out` will be set to `nil`.
--- 
--- The data contained in the resulting `GBytes` is always zero-terminated, but
--- this is not included in the `GBytes` length. The resulting `GBytes` should be
--- freed with `g_bytes_unref()` when no longer in use.
---
--- ---
---
---@param self Gio.File # a `GFile`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@param etag_out? string # a location to place the current entity tag for the file, or `nil` if the entity tag is not needed
---@return GLib.Bytes # a `GBytes` or `nil` and `error` is set
function Gio.File:load_bytes(cancellable, etag_out) end

--- # method Gio.File:load_bytes_async()
---
--- Asynchronously loads the contents of `file` as `GBytes`.
--- 
--- If `file` is a resource:// based URI, the resulting bytes will reference the
--- embedded resource instead of a copy. Otherwise, this is equivalent to calling
--- `g_file_load_contents_async()` and `g_bytes_new_take()`.
--- 
--- `callback` should call `g_file_load_bytes_finish()` to get the result of this
--- asynchronous operation.
--- 
--- See `g_file_load_bytes()` for more information.
---
--- ---
---
---@param self Gio.File # a `GFile`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:load_bytes_async(cancellable, callback, user_data) end

--- # method Gio.File:load_bytes_finish()
---
--- Completes an asynchronous request to `g_file_load_bytes_async()`.
--- 
--- For resources, `etag_out` will be set to `nil`.
--- 
--- The data contained in the resulting `GBytes` is always zero-terminated, but
--- this is not included in the `GBytes` length. The resulting `GBytes` should be
--- freed with `g_bytes_unref()` when no longer in use.
--- 
--- See `g_file_load_bytes()` for more information.
---
--- ---
---
---@param self Gio.File # a `GFile`
---@param result Gio.AsyncResult # a `GAsyncResult` provided to the callback
---@param etag_out? string # a location to place the current entity tag for the file, or `nil` if the entity tag is not needed
---@return GLib.Bytes # a `GBytes` or `nil` and `error` is set
function Gio.File:load_bytes_finish(result, etag_out) end

--- # method Gio.File:load_contents()
---
--- Loads the content of the file into memory. The data is always
--- zero-terminated, but this is not included in the resultant `length`.
--- The returned `contents` should be freed with `g_free()` when no longer
--- needed.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param contents unknown[] # a location to place the contents of the file
---@param length? integer # a location to place the length of the contents of the file, or `nil` if the length is not needed
---@param etag_out? string # a location to place the current entity tag for the file, or `nil` if the entity tag is not needed
---@return (boolean|nil) # `true` if the `file`'s contents were successfully loaded. `false` if there were errors.
function Gio.File:load_contents(cancellable, contents, length, etag_out) end

--- # method Gio.File:load_contents_async()
---
--- Starts an asynchronous load of the `file`'s contents.
--- 
--- For more details, see `g_file_load_contents()` which is
--- the synchronous version of this call.
--- 
--- When the load operation has completed, `callback` will be called
--- with `user` data. To finish the operation, call
--- `g_file_load_contents_finish()` with the `GAsyncResult` returned by
--- the `callback`.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:load_contents_async(cancellable, callback, user_data) end

--- # method Gio.File:load_contents_finish()
---
--- Finishes an asynchronous load of the `file`'s contents.
--- The contents are placed in `contents`, and `length` is set to the
--- size of the `contents` string. The `contents` should be freed with
--- `g_free()` when no longer needed. If `etag_out` is present, it will be
--- set to the new entity tag for the `file`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@param contents unknown[] # a location to place the contents of the file
---@param length? integer # a location to place the length of the contents of the file, or `nil` if the length is not needed
---@param etag_out? string # a location to place the current entity tag for the file, or `nil` if the entity tag is not needed
---@return (boolean|nil) # `true` if the load was successful. If `false` and `error` is present, it will be set appropriately.
function Gio.File:load_contents_finish(res, contents, length, etag_out) end

--- # method Gio.File:load_partial_contents_finish()
---
--- Finishes an asynchronous partial load operation that was started
--- with `g_file_load_partial_contents_async()`. The data is always
--- zero-terminated, but this is not included in the resultant `length`.
--- The returned `contents` should be freed with `g_free()` when no longer
--- needed.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@param contents unknown[] # a location to place the contents of the file
---@param length? integer # a location to place the length of the contents of the file, or `nil` if the length is not needed
---@param etag_out? string # a location to place the current entity tag for the file, or `nil` if the entity tag is not needed
---@return (boolean|nil) # `true` if the load was successful. If `false` and `error` is present, it will be set appropriately.
function Gio.File:load_partial_contents_finish(res, contents, length, etag_out) end

--- # method Gio.File:make_directory()
---
--- Creates a directory. Note that this will only create a child directory
--- of the immediate parent directory of the path or URI given by the `GFile`.
--- To recursively create directories, see `g_file_make_directory_with_parents()`.
--- This function will fail if the parent directory does not exist, setting
--- `error` to %G_IO_ERROR_NOT_FOUND. If the file system doesn't support
--- creating directories, this function will fail, setting `error` to
--- %G_IO_ERROR_NOT_SUPPORTED.
--- 
--- For a local `GFile` the newly created directory will have the default
--- (current) ownership and permissions of the current process.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `true` on successful creation, `false` otherwise.
function Gio.File:make_directory(cancellable) end

--- # method Gio.File:make_directory_async()
---
--- Asynchronously creates a directory.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:make_directory_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.File:make_directory_finish()
---
--- Finishes an asynchronous directory creation, started with
--- `g_file_make_directory_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` on successful directory creation, `false` otherwise.
function Gio.File:make_directory_finish(result) end

--- # method Gio.File:make_directory_with_parents()
---
--- Creates a directory and any parent directories that may not
--- exist similar to 'mkdir -p'. If the file system does not support
--- creating directories, this function will fail, setting `error` to
--- %G_IO_ERROR_NOT_SUPPORTED. If the directory itself already exists,
--- this function will fail setting `error` to %G_IO_ERROR_EXISTS, unlike
--- the similar `g_mkdir_with_parents()`.
--- 
--- For a local `GFile` the newly created directories will have the default
--- (current) ownership and permissions of the current process.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `true` if all directories have been successfully created, `false` otherwise.
function Gio.File:make_directory_with_parents(cancellable) end

--- # method Gio.File:make_symbolic_link()
---
--- Creates a symbolic link named `file` which contains the string
--- `symlink_value`.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # a `GFile` with the name of the symlink to create
---@param symlink_value string # a string with the path for the target of the new symlink
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `true` on the creation of a new symlink, `false` otherwise.
function Gio.File:make_symbolic_link(symlink_value, cancellable) end

--- # method Gio.File:make_symbolic_link_async()
---
--- Asynchronously creates a symbolic link named `file` which contains the
--- string `symlink_value`.
---
--- ---
---
---@param self Gio.File # a `GFile` with the name of the symlink to create
---@param symlink_value string # a string with the path for the target of the new symlink
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:make_symbolic_link_async(symlink_value, io_priority, cancellable, callback, user_data) end

--- # method Gio.File:make_symbolic_link_finish()
---
--- Finishes an asynchronous symbolic link creation, started with
--- `g_file_make_symbolic_link_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` on successful directory creation, `false` otherwise.
function Gio.File:make_symbolic_link_finish(result) end

--- # method Gio.File:measure_disk_usage_finish()
---
--- Collects the results from an earlier call to
--- `g_file_measure_disk_usage_async()`.  See `g_file_measure_disk_usage()` for
--- more information.
---
--- ---
---
---@param self Gio.File # a `GFile`
---@param result Gio.AsyncResult # the `GAsyncResult` passed to your `GAsyncReadyCallback`
---@param disk_usage? integer # the number of bytes of disk space used
---@param num_dirs? integer # the number of directories encountered
---@param num_files? integer # the number of non-directories encountered
---@return (boolean|nil) # `true` if successful, with the out parameters set. `false` otherwise, with `error` set.
function Gio.File:measure_disk_usage_finish(result, disk_usage, num_dirs, num_files) end

--- # method Gio.File:monitor()
---
--- Obtains a file or directory monitor for the given file,
--- depending on the type of the file.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.FileMonitorFlags # a set of `GFileMonitorFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.FileMonitor # a `GFileMonitor` for the given `file`, or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:monitor(flags, cancellable) end

--- # method Gio.File:monitor_directory()
---
--- Obtains a directory monitor for the given file.
--- This may fail if directory monitoring is not supported.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
--- 
--- It does not make sense for `flags` to contain
--- %G_FILE_MONITOR_WATCH_HARD_LINKS, since hard links can not be made to
--- directories.  It is not possible to monitor all the files in a
--- directory for changes made via hard links; if you want to do this then
--- you must register individual watches with `g_file_monitor()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.FileMonitorFlags # a set of `GFileMonitorFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.FileMonitor # a `GFileMonitor` for the given `file`, or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:monitor_directory(flags, cancellable) end

--- # method Gio.File:monitor_file()
---
--- Obtains a file monitor for the given file. If no file notification
--- mechanism exists, then regular polling of the file is used.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
--- 
--- If `flags` contains %G_FILE_MONITOR_WATCH_HARD_LINKS then the monitor
--- will also attempt to report changes made to the file via another
--- filename (ie, a hard link). Without this flag, you can only rely on
--- changes made through the filename contained in `file` to be
--- reported. Using this flag may result in an increase in resource
--- usage, and may not have any effect depending on the `GFileMonitor`
--- backend and/or filesystem type.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.FileMonitorFlags # a set of `GFileMonitorFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.FileMonitor # a `GFileMonitor` for the given `file`, or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:monitor_file(flags, cancellable) end

--- # method Gio.File:mount_enclosing_volume()
---
--- Starts a `mount_operation`, mounting the volume that contains
--- the file `location`.
--- 
--- When this operation has completed, `callback` will be called with
--- `user_user` data, and the operation can be finalized with
--- `g_file_mount_enclosing_volume_finish()`.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.MountMountFlags # flags affecting the operation
---@param mount_operation? Gio.MountOperation # a `GMountOperation` or `nil` to avoid user interaction
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied, or `nil`
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:mount_enclosing_volume(flags, mount_operation, cancellable, callback, user_data) end

--- # method Gio.File:mount_enclosing_volume_finish()
---
--- Finishes a mount operation started by `g_file_mount_enclosing_volume()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` if successful. If an error has occurred, this function will return `false` and set `error` appropriately if present.
function Gio.File:mount_enclosing_volume_finish(result) end

--- # method Gio.File:mount_mountable()
---
--- Mounts a file of type G_FILE_TYPE_MOUNTABLE.
--- Using `mount_operation`, you can request callbacks when, for instance,
--- passwords are needed during authentication.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_file_mount_mountable_finish()` to get
--- the result of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.MountMountFlags # flags affecting the operation
---@param mount_operation? Gio.MountOperation # a `GMountOperation`, or `nil` to avoid user interaction
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied, or `nil`
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:mount_mountable(flags, mount_operation, cancellable, callback, user_data) end

--- # method Gio.File:mount_mountable_finish()
---
--- Finishes a mount operation. See `g_file_mount_mountable()` for details.
--- 
--- Finish an asynchronous mount operation that was started
--- with `g_file_mount_mountable()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return Gio.File # a `GFile` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:mount_mountable_finish(result) end

--- # method Gio.File:move()
---
--- Tries to move the file or directory `source` to the location specified
--- by `destination`. If native move operations are supported then this is
--- used, otherwise a copy + delete fallback is used. The native
--- implementation may support moving directories (for instance on moves
--- inside the same filesystem), but the fallback code does not.
--- 
--- If the flag %G_FILE_COPY_OVERWRITE is specified an already
--- existing `destination` file is overwritten.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
--- 
--- If `progress_callback` is not `nil`, then the operation can be monitored
--- by setting this to a `GFileProgressCallback` function.
--- `progress_callback_data` will be passed to this function. It is
--- guaranteed that this callback will be called after all data has been
--- transferred with the total number of bytes copied during the operation.
--- 
--- If the `source` file does not exist, then the %G_IO_ERROR_NOT_FOUND
--- error is returned, independent on the status of the `destination`.
--- 
--- If %G_FILE_COPY_OVERWRITE is not specified and the target exists,
--- then the error %G_IO_ERROR_EXISTS is returned.
--- 
--- If trying to overwrite a file over a directory, the %G_IO_ERROR_IS_DIRECTORY
--- error is returned. If trying to overwrite a directory with a directory the
--- %G_IO_ERROR_WOULD_MERGE error is returned.
--- 
--- If the source is a directory and the target does not exist, or
--- %G_FILE_COPY_OVERWRITE is specified and the target is a file, then
--- the %G_IO_ERROR_WOULD_RECURSE error may be returned (if the native
--- move operation isn't available).
---
--- ---
---
---@param self Gio.File # `GFile` pointing to the source location
---@param destination Gio.File # `GFile` pointing to the destination location
---@param flags Gio.FileCopyFlags # set of `GFileCopyFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param progress_callback? Gio.FileProgressCallback # `GFileProgressCallback` function for updates
---@param progress_callback_data? userdata # gpointer to user data for the callback function
---@return (boolean|nil) # `true` on successful move, `false` otherwise.
function Gio.File:move(destination, flags, cancellable, progress_callback, progress_callback_data) end

--- # method Gio.File:move_async()
---
--- Asynchronously moves a file `source` to the location of `destination`. For details of the behaviour, see `g_file_move()`.
--- 
--- If `progress_callback` is not `nil`, then that function that will be called
--- just like in `g_file_move()`. The callback will run in the default main context
--- of the thread calling `g_file_move_async()` — the same context as `callback` is
--- run in.
--- 
--- When the operation is finished, `callback` will be called. You can then call
--- `g_file_move_finish()` to get the result of the operation.
---
--- ---
---
---@param self Gio.File # `GFile` pointing to the source location
---@param destination Gio.File # `GFile` pointing to the destination location
---@param flags Gio.FileCopyFlags # set of `GFileCopyFlags`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param progress_callback? Gio.FileProgressCallback # `GFileProgressCallback` function for updates
---@param progress_callback_data? userdata # gpointer to user data for the callback function
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:move_async(destination, flags, io_priority, cancellable, progress_callback, progress_callback_data, callback, user_data) end

--- # method Gio.File:move_finish()
---
--- Finishes an asynchronous file movement, started with
--- `g_file_move_async()`.
---
--- ---
---
---@param self Gio.File # input source `GFile`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` on successful file move, `false` otherwise.
function Gio.File:move_finish(result) end

--- # method Gio.File:open_readwrite()
---
--- Opens an existing file for reading and writing. The result is
--- a `GFileIOStream` that can be used to read and write the contents
--- of the file.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled
--- by triggering the cancellable object from another thread. If the
--- operation was cancelled, the error %G_IO_ERROR_CANCELLED will be
--- returned.
--- 
--- If the file does not exist, the %G_IO_ERROR_NOT_FOUND error will
--- be returned. If the file is a directory, the %G_IO_ERROR_IS_DIRECTORY
--- error will be returned. Other errors are possible too, and depend on
--- what kind of filesystem the file is on. Note that in many non-local
--- file cases read and write streams are not supported, so make sure you
--- really need to do read and write streaming, rather than just opening
--- for reading or writing.
---
--- ---
---
---@param self Gio.File # `GFile` to open
---@param cancellable? Gio.Cancellable # a `GCancellable`
---@return Gio.FileIOStream # `GFileIOStream` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:open_readwrite(cancellable) end

--- # method Gio.File:open_readwrite_async()
---
--- Asynchronously opens `file` for reading and writing.
--- 
--- For more details, see `g_file_open_readwrite()` which is
--- the synchronous version of this call.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_file_open_readwrite_finish()` to get
--- the result of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:open_readwrite_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.File:open_readwrite_finish()
---
--- Finishes an asynchronous file read operation started with
--- `g_file_open_readwrite_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@return Gio.FileIOStream # a `GFileIOStream` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:open_readwrite_finish(res) end

--- # method Gio.File:peek_path()
---
--- Exactly like `g_file_get_path()`, but caches the result via
--- `g_object_set_qdata_full()`.  This is useful for example in C
--- applications which mix `g_file_*` APIs with native ones.  It
--- also avoids an extra duplicated string when possible, so will be
--- generally more efficient.
--- 
--- This call does no blocking I/O.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@return string # string containing the `GFile`'s path, or `nil` if no such path exists. The returned string is owned by `file`.
function Gio.File:peek_path() end

--- # method Gio.File:poll_mountable()
---
--- Polls a file of type %G_FILE_TYPE_MOUNTABLE.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_file_mount_mountable_finish()` to get
--- the result of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied, or `nil`
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:poll_mountable(cancellable, callback, user_data) end

--- # method Gio.File:poll_mountable_finish()
---
--- Finishes a poll operation. See `g_file_poll_mountable()` for details.
--- 
--- Finish an asynchronous poll operation that was polled
--- with `g_file_poll_mountable()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` if the operation finished successfully. `false` otherwise.
function Gio.File:poll_mountable_finish(result) end

--- # method Gio.File:query_default_handler()
---
--- Returns the `GAppInfo` that is registered as the default
--- application to handle the file specified by `file`.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # a `GFile` to open
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.AppInfo # a `GAppInfo` if the handle was found, `nil` if there were errors. When you are done with it, release it with `g_object_unref()`
function Gio.File:query_default_handler(cancellable) end

--- # method Gio.File:query_default_handler_async()
---
--- Async version of `g_file_query_default_handler()`.
---
--- ---
---
---@param self Gio.File # a `GFile` to open
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is done
---@param user_data? userdata # data to pass to `callback`
---@return nil
function Gio.File:query_default_handler_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.File:query_default_handler_finish()
---
--- Finishes a `g_file_query_default_handler_async()` operation.
---
--- ---
---
---@param self Gio.File # a `GFile` to open
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return Gio.AppInfo # a `GAppInfo` if the handle was found, `nil` if there were errors. When you are done with it, release it with `g_object_unref()`
function Gio.File:query_default_handler_finish(result) end

--- # method Gio.File:query_exists()
---
--- Utility function to check if a particular file exists. This is
--- implemented using `g_file_query_info()` and as such does blocking I/O.
--- 
--- Note that in many cases it is [racy to first check for file existence](https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use)
--- and then execute something based on the outcome of that, because the
--- file might have been created or removed in between the operations. The
--- general approach to handling that is to not check, but just do the
--- operation and handle the errors as they come.
--- 
--- As an example of race-free checking, take the case of reading a file,
--- and if it doesn't exist, creating it. There are two racy versions: read
--- it, and on error create it; and: check if it exists, if not create it.
--- These can both result in two processes creating the file (with perhaps
--- a partially written file as the result). The correct approach is to
--- always try to create the file with `g_file_create()` which will either
--- atomically create the file or fail with a %G_IO_ERROR_EXISTS error.
--- 
--- However, in many cases an existence check is useful in a user interface,
--- for instance to make a menu item sensitive/insensitive, so that you don't
--- have to fool users that something is possible and then just show an error
--- dialog. If you do this, you should make sure to also handle the errors
--- that can happen due to races when you execute the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `true` if the file exists (and can be detected without error), `false` otherwise (or if cancelled).
function Gio.File:query_exists(cancellable) end

--- # method Gio.File:query_file_type()
---
--- Utility function to inspect the `GFileType` of a file. This is
--- implemented using `g_file_query_info()` and as such does blocking I/O.
--- 
--- The primary use case of this method is to check if a file is
--- a regular file, directory, or symlink.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.FileQueryInfoFlags # a set of `GFileQueryInfoFlags` passed to `g_file_query_info()`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.FileType # The `GFileType` of the file and %G_FILE_TYPE_UNKNOWN if the file does not exist
function Gio.File:query_file_type(flags, cancellable) end

--- # method Gio.File:query_filesystem_info()
---
--- Similar to `g_file_query_info()`, but obtains information
--- about the filesystem the `file` is on, rather than the file itself.
--- For instance the amount of space available and the type of
--- the filesystem.
--- 
--- The `attributes` value is a string that specifies the attributes
--- that should be gathered. It is not an error if it's not possible
--- to read a particular requested attribute from a file - it just
--- won't be set. `attributes` should be a comma-separated list of
--- attributes or attribute wildcards. The wildcard "*" means all
--- attributes, and a wildcard like "filesystem::*" means all attributes
--- in the filesystem namespace. The standard namespace for filesystem
--- attributes is "filesystem". Common attributes of interest are
--- %G_FILE_ATTRIBUTE_FILESYSTEM_SIZE (the total size of the filesystem
--- in bytes), %G_FILE_ATTRIBUTE_FILESYSTEM_FREE (number of bytes available),
--- and %G_FILE_ATTRIBUTE_FILESYSTEM_TYPE (type of the filesystem).
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled
--- by triggering the cancellable object from another thread. If the
--- operation was cancelled, the error %G_IO_ERROR_CANCELLED will be
--- returned.
--- 
--- If the file does not exist, the %G_IO_ERROR_NOT_FOUND error will
--- be returned. Other errors are possible too, and depend on what
--- kind of filesystem the file is on.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param attributes string # an attribute query string
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.FileInfo # a `GFileInfo` or `nil` if there was an error. Free the returned object with `g_object_unref()`.
function Gio.File:query_filesystem_info(attributes, cancellable) end

--- # method Gio.File:query_filesystem_info_async()
---
--- Asynchronously gets the requested information about the filesystem
--- that the specified `file` is on. The result is a `GFileInfo` object
--- that contains key-value attributes (such as type or size for the
--- file).
--- 
--- For more details, see `g_file_query_filesystem_info()` which is the
--- synchronous version of this call.
--- 
--- When the operation is finished, `callback` will be called. You can
--- then call `g_file_query_info_finish()` to get the result of the
--- operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param attributes string # an attribute query string
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:query_filesystem_info_async(attributes, io_priority, cancellable, callback, user_data) end

--- # method Gio.File:query_filesystem_info_finish()
---
--- Finishes an asynchronous filesystem info query.
--- See `g_file_query_filesystem_info_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@return Gio.FileInfo # `GFileInfo` for given `file` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:query_filesystem_info_finish(res) end

--- # method Gio.File:query_info()
---
--- Gets the requested information about specified `file`.
--- The result is a `GFileInfo` object that contains key-value
--- attributes (such as the type or size of the file).
--- 
--- The `attributes` value is a string that specifies the file
--- attributes that should be gathered. It is not an error if
--- it's not possible to read a particular requested attribute
--- from a file - it just won't be set. `attributes` should be a
--- comma-separated list of attributes or attribute wildcards.
--- The wildcard "*" means all attributes, and a wildcard like
--- "standard::*" means all attributes in the standard namespace.
--- An example attribute query be "standard::*,owner::user".
--- The standard attributes are available as defines, like
--- %G_FILE_ATTRIBUTE_STANDARD_NAME.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled
--- by triggering the cancellable object from another thread. If the
--- operation was cancelled, the error %G_IO_ERROR_CANCELLED will be
--- returned.
--- 
--- For symlinks, normally the information about the target of the
--- symlink is returned, rather than information about the symlink
--- itself. However if you pass %G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS
--- in `flags` the information about the symlink itself will be returned.
--- Also, for symlinks that point to non-existing files the information
--- about the symlink itself will be returned.
--- 
--- If the file does not exist, the %G_IO_ERROR_NOT_FOUND error will be
--- returned. Other errors are possible too, and depend on what kind of
--- filesystem the file is on.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param attributes string # an attribute query string
---@param flags Gio.FileQueryInfoFlags # a set of `GFileQueryInfoFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.FileInfo # a `GFileInfo` for the given `file`, or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:query_info(attributes, flags, cancellable) end

--- # method Gio.File:query_info_async()
---
--- Asynchronously gets the requested information about specified `file`.
--- The result is a `GFileInfo` object that contains key-value attributes
--- (such as type or size for the file).
--- 
--- For more details, see `g_file_query_info()` which is the synchronous
--- version of this call.
--- 
--- When the operation is finished, `callback` will be called. You can
--- then call `g_file_query_info_finish()` to get the result of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param attributes string # an attribute query string
---@param flags Gio.FileQueryInfoFlags # a set of `GFileQueryInfoFlags`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:query_info_async(attributes, flags, io_priority, cancellable, callback, user_data) end

--- # method Gio.File:query_info_finish()
---
--- Finishes an asynchronous file info query.
--- See `g_file_query_info_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@return Gio.FileInfo # `GFileInfo` for given `file` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:query_info_finish(res) end

--- # method Gio.File:query_settable_attributes()
---
--- Obtain the list of settable attributes for the file.
--- 
--- Returns the type and full attribute name of all the attributes
--- that can be set on this file. This doesn't mean setting it will
--- always succeed though, you might get an access failure, or some
--- specific file may not support a specific attribute.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.FileAttributeInfoList # a `GFileAttributeInfoList` describing the settable attributes. When you are done with it, release it with `g_file_attribute_info_list_unref()`
function Gio.File:query_settable_attributes(cancellable) end

--- # method Gio.File:query_writable_namespaces()
---
--- Obtain the list of attribute namespaces where new attributes
--- can be created by a user. An example of this is extended
--- attributes (in the "xattr" namespace).
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.FileAttributeInfoList # a `GFileAttributeInfoList` describing the writable namespaces. When you are done with it, release it with `g_file_attribute_info_list_unref()`
function Gio.File:query_writable_namespaces(cancellable) end

--- # method Gio.File:read()
---
--- Opens a file for reading. The result is a `GFileInputStream` that
--- can be used to read the contents of the file.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
--- 
--- If the file does not exist, the %G_IO_ERROR_NOT_FOUND error will be
--- returned. If the file is a directory, the %G_IO_ERROR_IS_DIRECTORY
--- error will be returned. Other errors are possible too, and depend
--- on what kind of filesystem the file is on.
---
--- ---
---
---@param self Gio.File # `GFile` to read
---@param cancellable? Gio.Cancellable # a `GCancellable`
---@return Gio.FileInputStream # `GFileInputStream` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:read(cancellable) end

--- # method Gio.File:read_async()
---
--- Asynchronously opens `file` for reading.
--- 
--- For more details, see `g_file_read()` which is
--- the synchronous version of this call.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_file_read_finish()` to get the result
--- of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:read_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.File:read_finish()
---
--- Finishes an asynchronous file read operation started with
--- `g_file_read_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@return Gio.FileInputStream # a `GFileInputStream` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:read_finish(res) end

--- # method Gio.File:replace()
---
--- Returns an output stream for overwriting the file, possibly
--- creating a backup copy of the file first. If the file doesn't exist,
--- it will be created.
--- 
--- This will try to replace the file in the safest way possible so
--- that any errors during the writing will not affect an already
--- existing copy of the file. For instance, for local files it
--- may write to a temporary file and then atomically rename over
--- the destination when the stream is closed.
--- 
--- By default files created are generally readable by everyone,
--- but if you pass %G_FILE_CREATE_PRIVATE in `flags` the file
--- will be made readable only to the current user, to the level that
--- is supported on the target filesystem.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled
--- by triggering the cancellable object from another thread. If the
--- operation was cancelled, the error %G_IO_ERROR_CANCELLED will be
--- returned.
--- 
--- If you pass in a non-`nil` `etag` value and `file` already exists, then
--- this value is compared to the current entity tag of the file, and if
--- they differ an %G_IO_ERROR_WRONG_ETAG error is returned. This
--- generally means that the file has been changed since you last read
--- it. You can get the new etag from `g_file_output_stream_get_etag()`
--- after you've finished writing and closed the `GFileOutputStream`. When
--- you load a new file you can use `g_file_input_stream_query_info()` to
--- get the etag of the file.
--- 
--- If `make_backup` is `true`, this function will attempt to make a
--- backup of the current file before overwriting it. If this fails
--- a %G_IO_ERROR_CANT_CREATE_BACKUP error will be returned. If you
--- want to replace anyway, try again with `make_backup` set to `false`.
--- 
--- If the file is a directory the %G_IO_ERROR_IS_DIRECTORY error will
--- be returned, and if the file is some other form of non-regular file
--- then a %G_IO_ERROR_NOT_REGULAR_FILE error will be returned. Some
--- file systems don't allow all file names, and may return an
--- %G_IO_ERROR_INVALID_FILENAME error, and if the name is to long
--- %G_IO_ERROR_FILENAME_TOO_LONG will be returned. Other errors are
--- possible too, and depend on what kind of filesystem the file is on.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param etag? string # an optional [entity tag][gfile-etag] for the current `GFile`, or `NULL` to ignore
---@param make_backup (boolean|nil) # `true` if a backup should be created
---@param flags Gio.FileCreateFlags # a set of `GFileCreateFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.FileOutputStream # a `GFileOutputStream` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:replace(etag, make_backup, flags, cancellable) end

--- # method Gio.File:replace_async()
---
--- Asynchronously overwrites the file, replacing the contents,
--- possibly creating a backup copy of the file first.
--- 
--- For more details, see `g_file_replace()` which is
--- the synchronous version of this call.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_file_replace_finish()` to get the result
--- of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param etag? string # an [entity tag][gfile-etag] for the current `GFile`, or `nil` to ignore
---@param make_backup (boolean|nil) # `true` if a backup should be created
---@param flags Gio.FileCreateFlags # a set of `GFileCreateFlags`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:replace_async(etag, make_backup, flags, io_priority, cancellable, callback, user_data) end

--- # method Gio.File:replace_contents()
---
--- Replaces the contents of `file` with `contents` of `length` bytes.
--- 
--- If `etag` is specified (not `nil`), any existing file must have that etag,
--- or the error %G_IO_ERROR_WRONG_ETAG will be returned.
--- 
--- If `make_backup` is `true`, this function will attempt to make a backup
--- of `file`. Internally, it uses `g_file_replace()`, so will try to replace the
--- file contents in the safest way possible. For example, atomic renames are
--- used when replacing local files’ contents.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
--- 
--- The returned `new_etag` can be used to verify that the file hasn't
--- changed the next time it is saved over.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param contents unknown[] # a string containing the new contents for `file`
---@param length integer # the length of `contents` in bytes
---@param etag? string # the old [entity-tag][gfile-etag] for the document, or `nil`
---@param make_backup (boolean|nil) # `true` if a backup should be created
---@param flags Gio.FileCreateFlags # a set of `GFileCreateFlags`
---@param new_etag? string # a location to a new [entity tag][gfile-etag] for the document. This should be freed with `g_free()` when no longer needed, or `nil`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `true` if successful. If an error has occurred, this function will return `false` and set `error` appropriately if present.
function Gio.File:replace_contents(contents, length, etag, make_backup, flags, new_etag, cancellable) end

--- # method Gio.File:replace_contents_async()
---
--- Starts an asynchronous replacement of `file` with the given
--- `contents` of `length` bytes. `etag` will replace the document's
--- current entity tag.
--- 
--- When this operation has completed, `callback` will be called with
--- `user_user` data, and the operation can be finalized with
--- `g_file_replace_contents_finish()`.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
--- 
--- If `make_backup` is `true`, this function will attempt to
--- make a backup of `file`.
--- 
--- Note that no copy of `contents` will be made, so it must stay valid
--- until `callback` is called. See `g_file_replace_contents_bytes_async()`
--- for a `GBytes` version that will automatically hold a reference to the
--- contents (without copying) for the duration of the call.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param contents unknown[] # string of contents to replace the file with
---@param length integer # the length of `contents` in bytes
---@param etag? string # a new [entity tag][gfile-etag] for the `file`, or `nil`
---@param make_backup (boolean|nil) # `true` if a backup should be created
---@param flags Gio.FileCreateFlags # a set of `GFileCreateFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:replace_contents_async(contents, length, etag, make_backup, flags, cancellable, callback, user_data) end

--- # method Gio.File:replace_contents_bytes_async()
---
--- Same as `g_file_replace_contents_async()` but takes a `GBytes` input instead.
--- This function will keep a ref on `contents` until the operation is done.
--- Unlike `g_file_replace_contents_async()` this allows forgetting about the
--- content without waiting for the callback.
--- 
--- When this operation has completed, `callback` will be called with
--- `user_user` data, and the operation can be finalized with
--- `g_file_replace_contents_finish()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param contents GLib.Bytes # a `GBytes`
---@param etag? string # a new [entity tag][gfile-etag] for the `file`, or `nil`
---@param make_backup (boolean|nil) # `true` if a backup should be created
---@param flags Gio.FileCreateFlags # a set of `GFileCreateFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:replace_contents_bytes_async(contents, etag, make_backup, flags, cancellable, callback, user_data) end

--- # method Gio.File:replace_contents_finish()
---
--- Finishes an asynchronous replace of the given `file`. See
--- `g_file_replace_contents_async()`. Sets `new_etag` to the new entity
--- tag for the document, if present.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@param new_etag? string # a location of a new [entity tag][gfile-etag] for the document. This should be freed with `g_free()` when it is no longer needed, or `nil`
---@return (boolean|nil) # `true` on success, `false` on failure.
function Gio.File:replace_contents_finish(res, new_etag) end

--- # method Gio.File:replace_finish()
---
--- Finishes an asynchronous file replace operation started with
--- `g_file_replace_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@return Gio.FileOutputStream # a `GFileOutputStream`, or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:replace_finish(res) end

--- # method Gio.File:replace_readwrite()
---
--- Returns an output stream for overwriting the file in readwrite mode,
--- possibly creating a backup copy of the file first. If the file doesn't
--- exist, it will be created.
--- 
--- For details about the behaviour, see `g_file_replace()` which does the
--- same thing but returns an output stream only.
--- 
--- Note that in many non-local file cases read and write streams are not
--- supported, so make sure you really need to do read and write streaming,
--- rather than just opening for reading or writing.
---
--- ---
---
---@param self Gio.File # a `GFile`
---@param etag? string # an optional [entity tag][gfile-etag] for the current `GFile`, or `NULL` to ignore
---@param make_backup (boolean|nil) # `true` if a backup should be created
---@param flags Gio.FileCreateFlags # a set of `GFileCreateFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.FileIOStream # a `GFileIOStream` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:replace_readwrite(etag, make_backup, flags, cancellable) end

--- # method Gio.File:replace_readwrite_async()
---
--- Asynchronously overwrites the file in read-write mode,
--- replacing the contents, possibly creating a backup copy
--- of the file first.
--- 
--- For more details, see `g_file_replace_readwrite()` which is
--- the synchronous version of this call.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_file_replace_readwrite_finish()` to get
--- the result of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param etag? string # an [entity tag][gfile-etag] for the current `GFile`, or `nil` to ignore
---@param make_backup (boolean|nil) # `true` if a backup should be created
---@param flags Gio.FileCreateFlags # a set of `GFileCreateFlags`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:replace_readwrite_async(etag, make_backup, flags, io_priority, cancellable, callback, user_data) end

--- # method Gio.File:replace_readwrite_finish()
---
--- Finishes an asynchronous file replace operation started with
--- `g_file_replace_readwrite_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@return Gio.FileIOStream # a `GFileIOStream`, or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:replace_readwrite_finish(res) end

--- # method Gio.File:resolve_relative_path()
---
--- Resolves a relative path for `file` to an absolute path.
--- 
--- This call does no blocking I/O.
--- 
--- If the `relative_path` is an absolute path name, the resolution
--- is done absolutely (without taking `file` path as base).
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param relative_path string # a given relative path string
---@return Gio.File # a `GFile` for the resolved path.
function Gio.File:resolve_relative_path(relative_path) end

--- # method Gio.File:set_attribute()
---
--- Sets an attribute in the file with attribute name `attribute` to `value_p`.
--- 
--- Some attributes can be unset by setting `type` to
--- %G_FILE_ATTRIBUTE_TYPE_INVALID and `value_p` to `nil`.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param attribute string # a string containing the attribute's name
---@param type Gio.FileAttributeType # The type of the attribute
---@param value_p? userdata # a pointer to the value (or the pointer itself if the type is a pointer type)
---@param flags Gio.FileQueryInfoFlags # a set of `GFileQueryInfoFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `true` if the attribute was set, `false` otherwise.
function Gio.File:set_attribute(attribute, type, value_p, flags, cancellable) end

--- # method Gio.File:set_attribute_byte_string()
---
--- Sets `attribute` of type %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING to `value`.
--- If `attribute` is of a different type, this operation will fail,
--- returning `false`.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param attribute string # a string containing the attribute's name
---@param value string # a string containing the attribute's new value
---@param flags Gio.FileQueryInfoFlags # a `GFileQueryInfoFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `true` if the `attribute` was successfully set to `value` in the `file`, `false` otherwise.
function Gio.File:set_attribute_byte_string(attribute, value, flags, cancellable) end

--- # method Gio.File:set_attribute_int32()
---
--- Sets `attribute` of type %G_FILE_ATTRIBUTE_TYPE_INT32 to `value`.
--- If `attribute` is of a different type, this operation will fail.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param attribute string # a string containing the attribute's name
---@param value integer # a `gint32` containing the attribute's new value
---@param flags Gio.FileQueryInfoFlags # a `GFileQueryInfoFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `true` if the `attribute` was successfully set to `value` in the `file`, `false` otherwise.
function Gio.File:set_attribute_int32(attribute, value, flags, cancellable) end

--- # method Gio.File:set_attribute_int64()
---
--- Sets `attribute` of type %G_FILE_ATTRIBUTE_TYPE_INT64 to `value`.
--- If `attribute` is of a different type, this operation will fail.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param attribute string # a string containing the attribute's name
---@param value integer # a `guint64` containing the attribute's new value
---@param flags Gio.FileQueryInfoFlags # a `GFileQueryInfoFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `true` if the `attribute` was successfully set, `false` otherwise.
function Gio.File:set_attribute_int64(attribute, value, flags, cancellable) end

--- # method Gio.File:set_attribute_string()
---
--- Sets `attribute` of type %G_FILE_ATTRIBUTE_TYPE_STRING to `value`.
--- If `attribute` is of a different type, this operation will fail.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param attribute string # a string containing the attribute's name
---@param value string # a string containing the attribute's value
---@param flags Gio.FileQueryInfoFlags # `GFileQueryInfoFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `true` if the `attribute` was successfully set, `false` otherwise.
function Gio.File:set_attribute_string(attribute, value, flags, cancellable) end

--- # method Gio.File:set_attribute_uint32()
---
--- Sets `attribute` of type %G_FILE_ATTRIBUTE_TYPE_UINT32 to `value`.
--- If `attribute` is of a different type, this operation will fail.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param attribute string # a string containing the attribute's name
---@param value integer # a `guint32` containing the attribute's new value
---@param flags Gio.FileQueryInfoFlags # a `GFileQueryInfoFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `true` if the `attribute` was successfully set to `value` in the `file`, `false` otherwise.
function Gio.File:set_attribute_uint32(attribute, value, flags, cancellable) end

--- # method Gio.File:set_attribute_uint64()
---
--- Sets `attribute` of type %G_FILE_ATTRIBUTE_TYPE_UINT64 to `value`.
--- If `attribute` is of a different type, this operation will fail.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param attribute string # a string containing the attribute's name
---@param value integer # a `guint64` containing the attribute's new value
---@param flags Gio.FileQueryInfoFlags # a `GFileQueryInfoFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `true` if the `attribute` was successfully set to `value` in the `file`, `false` otherwise.
function Gio.File:set_attribute_uint64(attribute, value, flags, cancellable) end

--- # method Gio.File:set_attributes_async()
---
--- Asynchronously sets the attributes of `file` with `info`.
--- 
--- For more details, see `g_file_set_attributes_from_info()`,
--- which is the synchronous version of this call.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_file_set_attributes_finish()` to get
--- the result of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param info Gio.FileInfo # a `GFileInfo`
---@param flags Gio.FileQueryInfoFlags # a `GFileQueryInfoFlags`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`
---@param user_data? userdata # a `gpointer`
---@return nil
function Gio.File:set_attributes_async(info, flags, io_priority, cancellable, callback, user_data) end

--- # method Gio.File:set_attributes_finish()
---
--- Finishes setting an attribute started in `g_file_set_attributes_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@param info Gio.FileInfo # a `GFileInfo`
---@return (boolean|nil) # `true` if the attributes were set correctly, `false` otherwise.
function Gio.File:set_attributes_finish(result, info) end

--- # method Gio.File:set_attributes_from_info()
---
--- Tries to set all attributes in the `GFileInfo` on the target
--- values, not stopping on the first error.
--- 
--- If there is any error during this operation then `error` will
--- be set to the first error. Error on particular fields are flagged
--- by setting the "status" field in the attribute value to
--- %G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING, which means you can
--- also detect further errors.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param info Gio.FileInfo # a `GFileInfo`
---@param flags Gio.FileQueryInfoFlags # `GFileQueryInfoFlags`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `false` if there was any error, `true` otherwise.
function Gio.File:set_attributes_from_info(info, flags, cancellable) end

--- # method Gio.File:set_display_name()
---
--- Renames `file` to the specified display name.
--- 
--- The display name is converted from UTF-8 to the correct encoding
--- for the target filesystem if possible and the `file` is renamed to this.
--- 
--- If you want to implement a rename operation in the user interface the
--- edit name (%G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME) should be used as the
--- initial value in the rename widget, and then the result after editing
--- should be passed to `g_file_set_display_name()`.
--- 
--- On success the resulting converted filename is returned.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param display_name string # a string
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return Gio.File # a `GFile` specifying what `file` was renamed to, or `nil` if there was an error. Free the returned object with `g_object_unref()`.
function Gio.File:set_display_name(display_name, cancellable) end

--- # method Gio.File:set_display_name_async()
---
--- Asynchronously sets the display name for a given `GFile`.
--- 
--- For more details, see `g_file_set_display_name()` which is
--- the synchronous version of this call.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_file_set_display_name_finish()` to get
--- the result of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param display_name string # a string
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:set_display_name_async(display_name, io_priority, cancellable, callback, user_data) end

--- # method Gio.File:set_display_name_finish()
---
--- Finishes setting a display name started with
--- `g_file_set_display_name_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param res Gio.AsyncResult # a `GAsyncResult`
---@return Gio.File # a `GFile` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.File:set_display_name_finish(res) end

--- # method Gio.File:start_mountable()
---
--- Starts a file of type %G_FILE_TYPE_MOUNTABLE.
--- Using `start_operation`, you can request callbacks when, for instance,
--- passwords are needed during authentication.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_file_mount_mountable_finish()` to get
--- the result of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.DriveStartFlags # flags affecting the operation
---@param start_operation? Gio.MountOperation # a `GMountOperation`, or `nil` to avoid user interaction
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied, or `nil`
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:start_mountable(flags, start_operation, cancellable, callback, user_data) end

--- # method Gio.File:start_mountable_finish()
---
--- Finishes a start operation. See `g_file_start_mountable()` for details.
--- 
--- Finish an asynchronous start operation that was started
--- with `g_file_start_mountable()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` if the operation finished successfully. `false` otherwise.
function Gio.File:start_mountable_finish(result) end

--- # method Gio.File:stop_mountable()
---
--- Stops a file of type %G_FILE_TYPE_MOUNTABLE.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_file_stop_mountable_finish()` to get
--- the result of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.MountUnmountFlags # flags affecting the operation
---@param mount_operation? Gio.MountOperation # a `GMountOperation`, or `nil` to avoid user interaction.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied, or `nil`
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:stop_mountable(flags, mount_operation, cancellable, callback, user_data) end

--- # method Gio.File:stop_mountable_finish()
---
--- Finishes a stop operation, see `g_file_stop_mountable()` for details.
--- 
--- Finish an asynchronous stop operation that was started
--- with `g_file_stop_mountable()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` if the operation finished successfully. `false` otherwise.
function Gio.File:stop_mountable_finish(result) end

--- # method Gio.File:supports_thread_contexts()
---
--- Checks if `file` supports
--- [thread-default contexts][g-main-context-push-thread-default-context].
--- If this returns `false`, you cannot perform asynchronous operations on
--- `file` in a thread that has a thread-default context.
---
--- ---
---
---@param self Gio.File # a `GFile`
---@return (boolean|nil) # Whether or not `file` supports thread-default contexts.
function Gio.File:supports_thread_contexts() end

--- # method Gio.File:trash()
---
--- Sends `file` to the "Trashcan", if possible. This is similar to
--- deleting it, but the user can recover it before emptying the trashcan.
--- Not all file systems support trashing, so this call can return the
--- %G_IO_ERROR_NOT_SUPPORTED error. Since GLib 2.66, the `x-gvfs-notrash` unix
--- mount option can be used to disable `g_file_trash()` support for certain
--- mounts, the %G_IO_ERROR_NOT_SUPPORTED error will be returned in that case.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.File # `GFile` to send to trash
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `true` on successful trash, `false` otherwise.
function Gio.File:trash(cancellable) end

--- # method Gio.File:trash_async()
---
--- Asynchronously sends `file` to the Trash location, if possible.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:trash_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.File:trash_finish()
---
--- Finishes an asynchronous file trashing operation, started with
--- `g_file_trash_async()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` on successful trash, `false` otherwise.
function Gio.File:trash_finish(result) end

--- # method Gio.File:unmount_mountable()
---
--- Unmounts a file of type G_FILE_TYPE_MOUNTABLE.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_file_unmount_mountable_finish()` to get
--- the result of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.MountUnmountFlags # flags affecting the operation
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied, or `nil`
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:unmount_mountable(flags, cancellable, callback, user_data) end

--- # method Gio.File:unmount_mountable_finish()
---
--- Finishes an unmount operation, see `g_file_unmount_mountable()` for details.
--- 
--- Finish an asynchronous unmount operation that was started
--- with `g_file_unmount_mountable()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` if the operation finished successfully. `false` otherwise.
function Gio.File:unmount_mountable_finish(result) end

--- # method Gio.File:unmount_mountable_with_operation()
---
--- Unmounts a file of type %G_FILE_TYPE_MOUNTABLE.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_file_unmount_mountable_finish()` to get
--- the result of the operation.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param flags Gio.MountUnmountFlags # flags affecting the operation
---@param mount_operation? Gio.MountOperation # a `GMountOperation`, or `nil` to avoid user interaction
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied, or `nil`
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.File:unmount_mountable_with_operation(flags, mount_operation, cancellable, callback, user_data) end

--- # method Gio.File:unmount_mountable_with_operation_finish()
---
--- Finishes an unmount operation,
--- see `g_file_unmount_mountable_with_operation()` for details.
--- 
--- Finish an asynchronous unmount operation that was started
--- with `g_file_unmount_mountable_with_operation()`.
---
--- ---
---
---@param self Gio.File # input `GFile`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` if the operation finished successfully. `false` otherwise.
function Gio.File:unmount_mountable_with_operation_finish(result) end

--- # function Gio.File.new_for_commandline_arg()
---
--- Creates a `GFile` with the given argument from the command line.
--- The value of `arg` can be either a URI, an absolute path or a
--- relative path resolved relative to the current working directory.
--- This operation never fails, but the returned object might not
--- support any I/O operation if `arg` points to a malformed path.
--- 
--- Note that on Windows, this function expects its argument to be in
--- UTF-8 -- not the system code page.  This means that you
--- should not use this function with string from argv as it is passed
--- to `main()`.  g_win32`_get_command_line()` will return a UTF-8 version of
--- the commandline.  `GApplication` also uses UTF-8 but
--- `g_application_command_line_create_file_for_arg()` may be more useful
--- for you there.  It is also always possible to use this function with
--- `GOptionContext` arguments of type %G_OPTION_ARG_FILENAME.
---
--- ---
---
---@param arg string # a command line string
---@return Gio.File # a new `GFile`. Free the returned object with `g_object_unref()`.
function Gio.File.new_for_commandline_arg(arg) end

--- # function Gio.File.new_for_commandline_arg_and_cwd()
---
--- Creates a `GFile` with the given argument from the command line.
--- 
--- This function is similar to `g_file_new_for_commandline_arg()` except
--- that it allows for passing the current working directory as an
--- argument instead of using the current working directory of the
--- process.
--- 
--- This is useful if the commandline argument was given in a context
--- other than the invocation of the current process.
--- 
--- See also `g_application_command_line_create_file_for_arg()`.
---
--- ---
---
---@param arg string # a command line string
---@param cwd string # the current working directory of the commandline
---@return Gio.File # a new `GFile`
function Gio.File.new_for_commandline_arg_and_cwd(arg, cwd) end

--- # function Gio.File.new_for_path()
---
--- Constructs a `GFile` for a given path. This operation never
--- fails, but the returned object might not support any I/O
--- operation if `path` is malformed.
---
--- ---
---
---@param path string # a string containing a relative or absolute path. The string must be encoded in the glib filename encoding.
---@return Gio.File # a new `GFile` for the given `path`. Free the returned object with `g_object_unref()`.
function Gio.File.new_for_path(path) end

--- # function Gio.File.new_for_uri()
---
--- Constructs a `GFile` for a given URI. This operation never
--- fails, but the returned object might not support any I/O
--- operation if `uri` is malformed or if the uri type is
--- not supported.
---
--- ---
---
---@param uri string # a UTF-8 string containing a URI
---@return Gio.File # a new `GFile` for the given `uri`. Free the returned object with `g_object_unref()`.
function Gio.File.new_for_uri(uri) end

--- # function Gio.File.new_tmp()
---
--- Opens a file in the preferred directory for temporary files (as
--- returned by `g_get_tmp_dir()`) and returns a `GFile` and
--- `GFileIOStream` pointing to it.
--- 
--- `tmpl` should be a string in the GLib file name encoding
--- containing a sequence of six 'X' characters, and containing no
--- directory components. If it is `nil`, a default template is used.
--- 
--- Unlike the other `GFile` constructors, this will return `nil` if
--- a temporary file could not be created.
---
--- ---
---
---@param tmpl? string # Template for the file name, as in `g_file_open_tmp()`, or `nil` for a default template
---@param iostream Gio.FileIOStream # on return, a `GFileIOStream` for the created file
---@return Gio.File # a new `GFile`. Free the returned object with `g_object_unref()`.
function Gio.File.new_tmp(tmpl, iostream) end

--- # function Gio.File.new_tmp_async()
---
--- Asynchronously opens a file in the preferred directory for temporary files
---  (as returned by `g_get_tmp_dir()`) as `g_file_new_tmp()`.
--- 
--- `tmpl` should be a string in the GLib file name encoding
--- containing a sequence of six 'X' characters, and containing no
--- directory components. If it is `nil`, a default template is used.
---
--- ---
---
---@param tmpl? string # Template for the file name, as in `g_file_open_tmp()`, or `nil` for a default template
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is done
---@param user_data? userdata # data to pass to `callback`
---@return nil
function Gio.File.new_tmp_async(tmpl, io_priority, cancellable, callback, user_data) end

--- # function Gio.File.new_tmp_dir_async()
---
--- Asynchronously creates a directory in the preferred directory for
--- temporary files (as returned by `g_get_tmp_dir()`) as `g_dir_make_tmp()`.
--- 
--- `tmpl` should be a string in the GLib file name encoding
--- containing a sequence of six 'X' characters, and containing no
--- directory components. If it is `nil`, a default template is used.
---
--- ---
---
---@param tmpl? string # Template for the file name, as in `g_dir_make_tmp()`, or `nil` for a default template
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is done
---@param user_data? userdata # data to pass to `callback`
---@return nil
function Gio.File.new_tmp_dir_async(tmpl, io_priority, cancellable, callback, user_data) end

--- # function Gio.File.new_tmp_dir_finish()
---
--- Finishes a temporary directory creation started by
--- `g_file_new_tmp_dir_async()`.
---
--- ---
---
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return Gio.File # a new `GFile`. Free the returned object with `g_object_unref()`.
function Gio.File.new_tmp_dir_finish(result) end

--- # function Gio.File.new_tmp_finish()
---
--- Finishes a temporary file creation started by `g_file_new_tmp_async()`.
---
--- ---
---
---@param result Gio.AsyncResult # a `GAsyncResult`
---@param iostream Gio.FileIOStream # on return, a `GFileIOStream` for the created file
---@return Gio.File # a new `GFile`. Free the returned object with `g_object_unref()`.
function Gio.File.new_tmp_finish(result, iostream) end

--- # function Gio.File.parse_name()
---
--- Constructs a `GFile` with the given `parse_name` (i.e. something
--- given by `g_file_get_parse_name()`). This operation never fails,
--- but the returned object might not support any I/O operation if
--- the `parse_name` cannot be parsed.
---
--- ---
---
---@param parse_name string # a file name or path to be parsed
---@return Gio.File # a new `GFile`.
function Gio.File.parse_name(parse_name) end

--- # record Gio.FileAttributeInfo
---
--- Information about a specific attribute.
---
--- ---
---
---@class Gio.FileAttributeInfo
---@field name string # the name of the attribute.
---@field type Gio.FileAttributeType # the `GFileAttributeType` type of the attribute.
---@field flags Gio.FileAttributeInfoFlags # a set of `GFileAttributeInfoFlags`.
Gio.FileAttributeInfo = {}

---@enum Gio.FileAttributeInfoFlags
Gio.FileAttributeInfoFlags = {}

--- # record Gio.FileAttributeInfoList
---
--- Acts as a lightweight registry for possible valid file attributes.
--- The registry stores Key-Value pair formats as `GFileAttributeInfos`.
---
--- ---
---
---@class Gio.FileAttributeInfoList
---@field infos Gio.FileAttributeInfo # an array of `GFileAttributeInfos`.
---@field n_infos integer # the number of values in the array.
---@operator call: Gio.FileAttributeInfoList
Gio.FileAttributeInfoList = {}

--- # method Gio.FileAttributeInfoList:add()
---
--- Adds a new attribute with `name` to the `list`, setting
--- its `type` and `flags`.
---
--- ---
---
---@param self Gio.FileAttributeInfoList # a `GFileAttributeInfoList`.
---@param name string # the name of the attribute to add.
---@param type Gio.FileAttributeType # the `GFileAttributeType` for the attribute.
---@param flags Gio.FileAttributeInfoFlags # `GFileAttributeInfoFlags` for the attribute.
---@return nil
function Gio.FileAttributeInfoList:add(name, type, flags) end

--- # method Gio.FileAttributeInfoList:dup()
---
--- Makes a duplicate of a file attribute info list.
---
--- ---
---
---@param self Gio.FileAttributeInfoList # a `GFileAttributeInfoList` to duplicate.
---@return Gio.FileAttributeInfoList # a copy of the given `list`.
function Gio.FileAttributeInfoList:dup() end

--- # method Gio.FileAttributeInfoList:lookup()
---
--- Gets the file attribute with the name `name` from `list`.
---
--- ---
---
---@param self Gio.FileAttributeInfoList # a `GFileAttributeInfoList`.
---@param name string # the name of the attribute to look up.
---@return Gio.FileAttributeInfo # a `GFileAttributeInfo` for the `name`, or `nil` if an attribute isn't found.
function Gio.FileAttributeInfoList:lookup(name) end

--- # method Gio.FileAttributeInfoList:ref()
---
--- References a file attribute info list.
---
--- ---
---
---@param self Gio.FileAttributeInfoList # a `GFileAttributeInfoList` to reference.
---@return Gio.FileAttributeInfoList # `GFileAttributeInfoList` or `nil` on error.
function Gio.FileAttributeInfoList:ref() end

--- # method Gio.FileAttributeInfoList:unref()
---
--- Removes a reference from the given `list`. If the reference count
--- falls to zero, the `list` is deleted.
---
--- ---
---
---@param self Gio.FileAttributeInfoList # The `GFileAttributeInfoList` to unreference.
---@return nil
function Gio.FileAttributeInfoList:unref() end

--- # function Gio.FileAttributeInfoList.new()
---
--- Creates a new file attribute info list.
---
--- ---
---
---@return Gio.FileAttributeInfoList # a `GFileAttributeInfoList`.
function Gio.FileAttributeInfoList.new() end

--- # record Gio.FileAttributeMatcher
---
--- Determines if a string matches a file attribute.
---
--- ---
---
---@class Gio.FileAttributeMatcher
---@operator call: Gio.FileAttributeMatcher
Gio.FileAttributeMatcher = {}

--- # method Gio.FileAttributeMatcher:enumerate_namespace()
---
--- Checks if the matcher will match all of the keys in a given namespace.
--- This will always return `true` if a wildcard character is in use (e.g. if
--- matcher was created with "standard::*" and `ns` is "standard", or if matcher was created
--- using "*" and namespace is anything.)
--- 
--- TODO: this is awkwardly worded.
---
--- ---
---
---@param self Gio.FileAttributeMatcher # a `GFileAttributeMatcher`.
---@param ns string # a string containing a file attribute namespace.
---@return (boolean|nil) # `true` if the matcher matches all of the entries in the given `ns`, `false` otherwise.
function Gio.FileAttributeMatcher:enumerate_namespace(ns) end

--- # method Gio.FileAttributeMatcher:enumerate_next()
---
--- Gets the next matched attribute from a `GFileAttributeMatcher`.
---
--- ---
---
---@param self Gio.FileAttributeMatcher # a `GFileAttributeMatcher`.
---@return string # a string containing the next attribute or, `nil` if no more attribute exist.
function Gio.FileAttributeMatcher:enumerate_next() end

--- # method Gio.FileAttributeMatcher:matches()
---
--- Checks if an attribute will be matched by an attribute matcher. If
--- the matcher was created with the "*" matching string, this function
--- will always return `true`.
---
--- ---
---
---@param self Gio.FileAttributeMatcher # a `GFileAttributeMatcher`.
---@param attribute string # a file attribute key.
---@return (boolean|nil) # `true` if `attribute` matches `matcher`. `false` otherwise.
function Gio.FileAttributeMatcher:matches(attribute) end

--- # method Gio.FileAttributeMatcher:matches_only()
---
--- Checks if an attribute matcher only matches a given attribute. Always
--- returns `false` if "*" was used when creating the matcher.
---
--- ---
---
---@param self Gio.FileAttributeMatcher # a `GFileAttributeMatcher`.
---@param attribute string # a file attribute key.
---@return (boolean|nil) # `true` if the matcher only matches `attribute`. `false` otherwise.
function Gio.FileAttributeMatcher:matches_only(attribute) end

--- # method Gio.FileAttributeMatcher:ref()
---
--- References a file attribute matcher.
---
--- ---
---
---@param self Gio.FileAttributeMatcher # a `GFileAttributeMatcher`.
---@return Gio.FileAttributeMatcher # a `GFileAttributeMatcher`.
function Gio.FileAttributeMatcher:ref() end

--- # method Gio.FileAttributeMatcher:subtract()
---
--- Subtracts all attributes of `subtract` from `matcher` and returns
--- a matcher that supports those attributes.
--- 
--- Note that currently it is not possible to remove a single
--- attribute when the `matcher` matches the whole namespace - or remove
--- a namespace or attribute when the matcher matches everything. This
--- is a limitation of the current implementation, but may be fixed
--- in the future.
---
--- ---
---
---@param self? Gio.FileAttributeMatcher # Matcher to subtract from
---@param subtract? Gio.FileAttributeMatcher # The matcher to subtract
---@return Gio.FileAttributeMatcher # A file attribute matcher matching all attributes of `matcher` that are not matched by `subtract`
function Gio.FileAttributeMatcher:subtract(subtract) end

--- # method Gio.FileAttributeMatcher:to_string()
---
--- Prints what the matcher is matching against. The format will be
--- equal to the format passed to `g_file_attribute_matcher_new()`.
--- The output however, might not be identical, as the matcher may
--- decide to use a different order or omit needless parts.
---
--- ---
---
---@param self? Gio.FileAttributeMatcher # a `GFileAttributeMatcher`.
---@return string # a string describing the attributes the matcher matches against or `nil` if `matcher` was `nil`.
function Gio.FileAttributeMatcher:to_string() end

--- # method Gio.FileAttributeMatcher:unref()
---
--- Unreferences `matcher`. If the reference count falls below 1,
--- the `matcher` is automatically freed.
---
--- ---
---
---@param self Gio.FileAttributeMatcher # a `GFileAttributeMatcher`.
---@return nil
function Gio.FileAttributeMatcher:unref() end

--- # function Gio.FileAttributeMatcher.new()
---
--- Creates a new file attribute matcher, which matches attributes
--- against a given string. `GFileAttributeMatchers` are reference
--- counted structures, and are created with a reference count of 1. If
--- the number of references falls to 0, the `GFileAttributeMatcher` is
--- automatically destroyed.
--- 
--- The `attributes` string should be formatted with specific keys separated
--- from namespaces with a double colon. Several "namespace::key" strings may be
--- concatenated with a single comma (e.g. "standard::type,standard::is-hidden").
--- The wildcard "*" may be used to match all keys and namespaces, or
--- "namespace::*" will match all keys in a given namespace.
--- 
--- ## Examples of file attribute matcher strings and results
--- 
--- - `"*"`: matches all attributes.
--- - `"standard::is-hidden"`: matches only the key is-hidden in the
---   standard namespace.
--- - `"standard::type,unix::*"`: matches the type key in the standard
---   namespace and all keys in the unix namespace.
---
--- ---
---
---@param attributes string # an attribute string to match.
---@return Gio.FileAttributeMatcher # a `GFileAttributeMatcher`
function Gio.FileAttributeMatcher.new(attributes) end

---@enum Gio.FileAttributeStatus
Gio.FileAttributeStatus = {}

---@enum Gio.FileAttributeType
Gio.FileAttributeType = {}

---@enum Gio.FileCopyFlags
Gio.FileCopyFlags = {}

---@enum Gio.FileCreateFlags
Gio.FileCreateFlags = {}

--- # interface Gio.FileDescriptorBased
---
--- `GFileDescriptorBased` is implemented by streams (implementations of
--- `GInputStream` or `GOutputStream`) that are based on file descriptors.
--- 
--- Note that `<gio/gfiledescriptorbased.h>` belongs to the UNIX-specific
--- GIO interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config
--- file when using it.
---
--- ---
---
---@class Gio.FileDescriptorBased
Gio.FileDescriptorBased = {}

--- # method Gio.FileDescriptorBased:get_fd()
---
--- Gets the underlying file descriptor.
---
--- ---
---
---@param self Gio.FileDescriptorBased # a `GFileDescriptorBased`.
---@return integer # The file descriptor
function Gio.FileDescriptorBased:get_fd() end

--- # record Gio.FileDescriptorBasedIface
---
--- An interface for file descriptor based io objects.
---
--- ---
---
---@class Gio.FileDescriptorBasedIface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field get_fd fun(fd_based: Gio.FileDescriptorBased): integer
Gio.FileDescriptorBasedIface = {}

--- # class Gio.FileEnumerator
---
--- `GFileEnumerator` allows you to operate on a set of `GFiles`,
--- returning a `GFileInfo` structure for each file enumerated (e.g.
--- `g_file_enumerate_children()` will return a `GFileEnumerator` for each
--- of the children within a directory).
--- 
--- To get the next file's information from a `GFileEnumerator`, use
--- `g_file_enumerator_next_file()` or its asynchronous version,
--- `g_file_enumerator_next_files_async()`. Note that the asynchronous
--- version will return a list of `GFileInfos`, whereas the
--- synchronous will only return the next file in the enumerator.
--- 
--- The ordering of returned files is unspecified for non-Unix
--- platforms; for more information, see `g_dir_read_name()`.  On Unix,
--- when operating on local files, returned files will be sorted by
--- inode number.  Effectively you can assume that the ordering of
--- returned files will be stable between successive calls (and
--- applications) assuming the directory is unchanged.
--- 
--- If your application needs a specific ordering, such as by name or
--- modification time, you will have to implement that in your
--- application code.
--- 
--- To close a `GFileEnumerator`, use `g_file_enumerator_close()`, or
--- its asynchronous version, `g_file_enumerator_close_async()`. Once
--- a `GFileEnumerator` is closed, no further actions may be performed
--- on it, and it should be freed with `g_object_unref()`.
---
--- ---
---
---@class Gio.FileEnumerator : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.FileEnumeratorPrivate
Gio.FileEnumerator = {}

--- # method Gio.FileEnumerator:close()
---
--- Releases all resources used by this enumerator, making the
--- enumerator return %G_IO_ERROR_CLOSED on all calls.
--- 
--- This will be automatically called when the last reference
--- is dropped, but you might want to call this function to make
--- sure resources are released as early as possible.
---
--- ---
---
---@param self Gio.FileEnumerator # a `GFileEnumerator`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `TRUE` on success or `FALSE` on error.
function Gio.FileEnumerator:close(cancellable) end

--- # method Gio.FileEnumerator:close_async()
---
--- Asynchronously closes the file enumerator.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned in
--- `g_file_enumerator_close_finish()`.
---
--- ---
---
---@param self Gio.FileEnumerator # a `GFileEnumerator`.
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.FileEnumerator:close_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.FileEnumerator:close_finish()
---
--- Finishes closing a file enumerator, started from `g_file_enumerator_close_async()`.
--- 
--- If the file enumerator was already closed when `g_file_enumerator_close_async()`
--- was called, then this function will report %G_IO_ERROR_CLOSED in `error`, and
--- return `false`. If the file enumerator had pending operation when the close
--- operation was started, then this function will report %G_IO_ERROR_PENDING, and
--- return `false`.  If `cancellable` was not `nil`, then the operation may have been
--- cancelled by triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and `false` will be
--- returned.
---
--- ---
---
---@param self Gio.FileEnumerator # a `GFileEnumerator`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` if the close operation has finished successfully.
function Gio.FileEnumerator:close_finish(result) end

--- # method Gio.FileEnumerator:get_child()
---
--- Return a new `GFile` which refers to the file named by `info` in the source
--- directory of `enumerator`.  This function is primarily intended to be used
--- inside loops with `g_file_enumerator_next_file()`.
--- 
--- To use this, %G_FILE_ATTRIBUTE_STANDARD_NAME must have been listed in the
--- attributes list used when creating the `GFileEnumerator`.
--- 
--- This is a convenience method that's equivalent to:
--- ```c
---   gchar *name = g_file_info_get_name (info);
---   GFile *child = g_file_get_child (g_file_enumerator_get_container (enumr),
---                                    name);
--- ```
---
--- ---
---
---@param self Gio.FileEnumerator # a `GFileEnumerator`
---@param info Gio.FileInfo # a `GFileInfo` gotten from `g_file_enumerator_next_file()` or the async equivalents.
---@return Gio.File # a `GFile` for the `GFileInfo` passed it.
function Gio.FileEnumerator:get_child(info) end

--- # method Gio.FileEnumerator:get_container()
---
--- Get the `GFile` container which is being enumerated.
---
--- ---
---
---@param self Gio.FileEnumerator # a `GFileEnumerator`
---@return Gio.File # the `GFile` which is being enumerated.
function Gio.FileEnumerator:get_container() end

--- # method Gio.FileEnumerator:has_pending()
---
--- Checks if the file enumerator has pending operations.
---
--- ---
---
---@param self Gio.FileEnumerator # a `GFileEnumerator`.
---@return (boolean|nil) # `true` if the `enumerator` has pending operations.
function Gio.FileEnumerator:has_pending() end

--- # method Gio.FileEnumerator:is_closed()
---
--- Checks if the file enumerator has been closed.
---
--- ---
---
---@param self Gio.FileEnumerator # a `GFileEnumerator`.
---@return (boolean|nil) # `true` if the `enumerator` is closed.
function Gio.FileEnumerator:is_closed() end

--- # method Gio.FileEnumerator:iterate()
---
--- This is a version of `g_file_enumerator_next_file()` that's easier to
--- use correctly from C programs.  With `g_file_enumerator_next_file()`,
--- the gboolean return value signifies "end of iteration or error", which
--- requires allocation of a temporary `GError`.
--- 
--- In contrast, with this function, a `false` return from
--- `g_file_enumerator_iterate()` *always* means
--- "error".  End of iteration is signaled by `out_info` or `out_child` being `nil`.
--- 
--- Another crucial difference is that the references for `out_info` and
--- `out_child` are owned by `direnum` (they are cached as hidden
--- properties).  You must not unref them in your own code.  This makes
--- memory management significantly easier for C code in combination
--- with loops.
--- 
--- Finally, this function optionally allows retrieving a `GFile` as
--- well.
--- 
--- You must specify at least one of `out_info` or `out_child`.
--- 
--- The code pattern for correctly using `g_file_enumerator_iterate()` from C
--- is:
--- 
--- ```c
--- direnum = g_file_enumerate_children (file, ...);
--- while (TRUE)
---   {
---     GFileInfo *info;
---     if (!g_file_enumerator_iterate (direnum, &info, NULL, cancellable, error))
---       goto out;
---     if (!info)
---       break;
---     ... do stuff with "info"; do not unref it! ...
---   }
--- 
--- out:
---   g_object_unref (direnum); // Note: frees the last `info`
--- ```
---
--- ---
---
---@param self Gio.FileEnumerator # an open `GFileEnumerator`
---@param out_info? Gio.FileInfo # Output location for the next `GFileInfo`, or `nil`
---@param out_child? Gio.File # Output location for the next `GFile`, or `nil`
---@param cancellable? Gio.Cancellable # a `GCancellable`
---@return (boolean|nil)
function Gio.FileEnumerator:iterate(out_info, out_child, cancellable) end

--- # method Gio.FileEnumerator:next_file()
---
--- Returns information for the next file in the enumerated object.
--- Will block until the information is available. The `GFileInfo`
--- returned from this function will contain attributes that match the
--- attribute string that was passed when the `GFileEnumerator` was created.
--- 
--- See the documentation of `GFileEnumerator` for information about the
--- order of returned files.
--- 
--- On error, returns `nil` and sets `error` to the error. If the
--- enumerator is at the end, `nil` will be returned and `error` will
--- be unset.
---
--- ---
---
---@param self Gio.FileEnumerator # a `GFileEnumerator`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return Gio.FileInfo # A `GFileInfo` or `nil` on error or end of enumerator. Free the returned object with `g_object_unref()` when no longer needed.
function Gio.FileEnumerator:next_file(cancellable) end

--- # method Gio.FileEnumerator:next_files_async()
---
--- Request information for a number of files from the enumerator asynchronously.
--- When all i/o for the operation is finished the `callback` will be called with
--- the requested information.
--- 
--- See the documentation of `GFileEnumerator` for information about the
--- order of returned files.
--- 
--- The callback can be called with less than `num_files` files in case of error
--- or at the end of the enumerator. In case of a partial error the callback will
--- be called with any succeeding items and no error, and on the next request the
--- error will be reported. If a request is cancelled the callback will be called
--- with %G_IO_ERROR_CANCELLED.
--- 
--- During an async request no other sync and async calls are allowed, and will
--- result in %G_IO_ERROR_PENDING errors.
--- 
--- Any outstanding i/o request with higher priority (lower numerical value) will
--- be executed before an outstanding request with lower priority. Default
--- priority is %G_PRIORITY_DEFAULT.
---
--- ---
---
---@param self Gio.FileEnumerator # a `GFileEnumerator`.
---@param num_files integer # the number of file info objects to request
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.FileEnumerator:next_files_async(num_files, io_priority, cancellable, callback, user_data) end

--- # method Gio.FileEnumerator:next_files_finish()
---
--- Finishes the asynchronous operation started with `g_file_enumerator_next_files_async()`.
---
--- ---
---
---@param self Gio.FileEnumerator # a `GFileEnumerator`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return Gio.FileInfo[] # a `GList` of `GFileInfos`. You must free the list with `g_list_free()` and unref the infos with `g_object_unref()` when you're done with them.
function Gio.FileEnumerator:next_files_finish(result) end

--- # method Gio.FileEnumerator:set_pending()
---
--- Sets the file enumerator as having pending operations.
---
--- ---
---
---@param self Gio.FileEnumerator # a `GFileEnumerator`.
---@param pending (boolean|nil) # a boolean value.
---@return nil
function Gio.FileEnumerator:set_pending(pending) end

--- # record Gio.FileEnumeratorClass
---
---@class Gio.FileEnumeratorClass
---@field parent_class GObject.ObjectClass
---@field next_file fun(enumerator: Gio.FileEnumerator, cancellable: Gio.Cancellable): Gio.FileInfo
---@field close_fn fun(enumerator: Gio.FileEnumerator, cancellable: Gio.Cancellable): (boolean|nil)
---@field next_files_async fun(enumerator: Gio.FileEnumerator, num_files: integer, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field next_files_finish fun(enumerator: Gio.FileEnumerator, result: Gio.AsyncResult): Gio.FileInfo[]
---@field close_async fun(enumerator: Gio.FileEnumerator, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field close_finish fun(enumerator: Gio.FileEnumerator, result: Gio.AsyncResult): (boolean|nil)
Gio.FileEnumeratorClass = {}

--- # record Gio.FileEnumeratorPrivate
---
---@class Gio.FileEnumeratorPrivate
Gio.FileEnumeratorPrivate = {}

--- # class Gio.FileIOStream
---
--- GFileIOStream provides io streams that both read and write to the same
--- file handle.
--- 
--- GFileIOStream implements `GSeekable`, which allows the io
--- stream to jump to arbitrary positions in the file and to truncate
--- the file, provided the filesystem of the file supports these
--- operations.
--- 
--- To find the position of a file io stream, use
--- `g_seekable_tell()`.
--- 
--- To find out if a file io stream supports seeking, use `g_seekable_can_seek()`.
--- To position a file io stream, use `g_seekable_seek()`.
--- To find out if a file io stream supports truncating, use
--- `g_seekable_can_truncate()`. To truncate a file io
--- stream, use `g_seekable_truncate()`.
--- 
--- The default implementation of all the `GFileIOStream` operations
--- and the implementation of `GSeekable` just call into the same operations
--- on the output stream.
---
--- ---
---
---@class Gio.FileIOStream : Gio.IOStream, Gio.Seekable
---@field parent_instance Gio.IOStream
---@field priv Gio.FileIOStreamPrivate
Gio.FileIOStream = {}

--- # method Gio.FileIOStream:get_etag()
---
--- Gets the entity tag for the file when it has been written.
--- This must be called after the stream has been written
--- and closed, as the etag can change while writing.
---
--- ---
---
---@param self Gio.FileIOStream # a `GFileIOStream`.
---@return string # the entity tag for the stream.
function Gio.FileIOStream:get_etag() end

--- # method Gio.FileIOStream:query_info()
---
--- Queries a file io stream for the given `attributes`.
--- This function blocks while querying the stream. For the asynchronous
--- version of this function, see `g_file_io_stream_query_info_async()`.
--- While the stream is blocked, the stream will set the pending flag
--- internally, and any other operations on the stream will fail with
--- %G_IO_ERROR_PENDING.
--- 
--- Can fail if the stream was already closed (with `error` being set to
--- %G_IO_ERROR_CLOSED), the stream has pending operations (with `error` being
--- set to %G_IO_ERROR_PENDING), or if querying info is not supported for
--- the stream's interface (with `error` being set to %G_IO_ERROR_NOT_SUPPORTED). I
--- all cases of failure, `nil` will be returned.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and `nil` will
--- be returned.
---
--- ---
---
---@param self Gio.FileIOStream # a `GFileIOStream`.
---@param attributes string # a file attribute query string.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return Gio.FileInfo # a `GFileInfo` for the `stream`, or `nil` on error.
function Gio.FileIOStream:query_info(attributes, cancellable) end

--- # method Gio.FileIOStream:query_info_async()
---
--- Asynchronously queries the `stream` for a `GFileInfo`. When completed,
--- `callback` will be called with a `GAsyncResult` which can be used to
--- finish the operation with `g_file_io_stream_query_info_finish()`.
--- 
--- For the synchronous version of this function, see
--- `g_file_io_stream_query_info()`.
---
--- ---
---
---@param self Gio.FileIOStream # a `GFileIOStream`.
---@param attributes string # a file attribute query string.
---@param io_priority integer # the [I/O priority][gio-GIOScheduler] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.FileIOStream:query_info_async(attributes, io_priority, cancellable, callback, user_data) end

--- # method Gio.FileIOStream:query_info_finish()
---
--- Finalizes the asynchronous query started
--- by `g_file_io_stream_query_info_async()`.
---
--- ---
---
---@param self Gio.FileIOStream # a `GFileIOStream`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return Gio.FileInfo # A `GFileInfo` for the finished query.
function Gio.FileIOStream:query_info_finish(result) end

--- # record Gio.FileIOStreamClass
---
---@class Gio.FileIOStreamClass
---@field parent_class Gio.IOStreamClass
---@field tell fun(stream: Gio.FileIOStream): integer
---@field can_seek fun(stream: Gio.FileIOStream): (boolean|nil)
---@field seek fun(stream: Gio.FileIOStream, offset: integer, type: GLib.SeekType, cancellable: Gio.Cancellable): (boolean|nil)
---@field can_truncate fun(stream: Gio.FileIOStream): (boolean|nil)
---@field truncate_fn fun(stream: Gio.FileIOStream, size: integer, cancellable: Gio.Cancellable): (boolean|nil)
---@field query_info fun(stream: Gio.FileIOStream, attributes: string, cancellable: Gio.Cancellable): Gio.FileInfo
---@field query_info_async fun(stream: Gio.FileIOStream, attributes: string, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field query_info_finish fun(stream: Gio.FileIOStream, result: Gio.AsyncResult): Gio.FileInfo
---@field get_etag fun(stream: Gio.FileIOStream): string
Gio.FileIOStreamClass = {}

--- # record Gio.FileIOStreamPrivate
---
---@class Gio.FileIOStreamPrivate
Gio.FileIOStreamPrivate = {}

--- # class Gio.FileIcon
---
--- `GFileIcon` specifies an icon by pointing to an image file
--- to be used as icon.
---
--- ---
---
---@class Gio.FileIcon : GObject.Object, Gio.Icon, Gio.LoadableIcon
---@operator call: Gio.FileIcon
Gio.FileIcon = {}

--- # method Gio.FileIcon:get_file()
---
--- Gets the `GFile` associated with the given `icon`.
---
--- ---
---
---@param self Gio.FileIcon # a `GIcon`.
---@return Gio.File # a `GFile`.
function Gio.FileIcon:get_file() end

--- # function Gio.FileIcon.new()
---
--- Creates a new icon for a file.
---
--- ---
---
---@param file Gio.File # a `GFile`.
---@return Gio.FileIcon # a `GIcon` for the given `file`, or `nil` on error.
function Gio.FileIcon.new(file) end

--- # record Gio.FileIconClass
---
---@class Gio.FileIconClass
Gio.FileIconClass = {}

--- # record Gio.FileIface
---
--- An interface for writing VFS file handles.
---
--- ---
---
---@class Gio.FileIface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field dup fun(file: Gio.File): Gio.File
---@field hash fun(file: Gio.File): integer
---@field equal fun(file1: Gio.File, file2: Gio.File): (boolean|nil)
---@field is_native fun(file: Gio.File): (boolean|nil)
---@field has_uri_scheme fun(file: Gio.File, uri_scheme: string): (boolean|nil)
---@field get_uri_scheme fun(file: Gio.File): string
---@field get_basename fun(file: Gio.File): string
---@field get_path fun(file: Gio.File): string
---@field get_uri fun(file: Gio.File): string
---@field get_parse_name fun(file: Gio.File): string
---@field get_parent fun(file: Gio.File): Gio.File
---@field prefix_matches fun(prefix: Gio.File, file: Gio.File): (boolean|nil)
---@field get_relative_path fun(parent: Gio.File, descendant: Gio.File): string
---@field resolve_relative_path fun(file: Gio.File, relative_path: string): Gio.File
---@field get_child_for_display_name fun(file: Gio.File, display_name: string): Gio.File
---@field enumerate_children fun(file: Gio.File, attributes: string, flags: Gio.FileQueryInfoFlags, cancellable: Gio.Cancellable): Gio.FileEnumerator
---@field enumerate_children_async fun(file: Gio.File, attributes: string, flags: Gio.FileQueryInfoFlags, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field enumerate_children_finish fun(file: Gio.File, res: Gio.AsyncResult): Gio.FileEnumerator
---@field query_info fun(file: Gio.File, attributes: string, flags: Gio.FileQueryInfoFlags, cancellable: Gio.Cancellable): Gio.FileInfo
---@field query_info_async fun(file: Gio.File, attributes: string, flags: Gio.FileQueryInfoFlags, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field query_info_finish fun(file: Gio.File, res: Gio.AsyncResult): Gio.FileInfo
---@field query_filesystem_info fun(file: Gio.File, attributes: string, cancellable: Gio.Cancellable): Gio.FileInfo
---@field query_filesystem_info_async fun(file: Gio.File, attributes: string, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field query_filesystem_info_finish fun(file: Gio.File, res: Gio.AsyncResult): Gio.FileInfo
---@field find_enclosing_mount fun(file: Gio.File, cancellable: Gio.Cancellable): Gio.Mount
---@field find_enclosing_mount_async fun(file: Gio.File, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field find_enclosing_mount_finish fun(file: Gio.File, res: Gio.AsyncResult): Gio.Mount
---@field set_display_name fun(file: Gio.File, display_name: string, cancellable: Gio.Cancellable): Gio.File
---@field set_display_name_async fun(file: Gio.File, display_name: string, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field set_display_name_finish fun(file: Gio.File, res: Gio.AsyncResult): Gio.File
---@field query_settable_attributes fun(file: Gio.File, cancellable: Gio.Cancellable): Gio.FileAttributeInfoList
---@field query_writable_namespaces fun(file: Gio.File, cancellable: Gio.Cancellable): Gio.FileAttributeInfoList
---@field set_attribute fun(file: Gio.File, attribute: string, type: Gio.FileAttributeType, value_p: userdata, flags: Gio.FileQueryInfoFlags, cancellable: Gio.Cancellable): (boolean|nil)
---@field set_attributes_from_info fun(file: Gio.File, info: Gio.FileInfo, flags: Gio.FileQueryInfoFlags, cancellable: Gio.Cancellable): (boolean|nil)
---@field set_attributes_async fun(file: Gio.File, info: Gio.FileInfo, flags: Gio.FileQueryInfoFlags, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field set_attributes_finish fun(file: Gio.File, result: Gio.AsyncResult, info: Gio.FileInfo): (boolean|nil)
---@field read_fn fun(file: Gio.File, cancellable: Gio.Cancellable): Gio.FileInputStream
---@field read_async fun(file: Gio.File, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field read_finish fun(file: Gio.File, res: Gio.AsyncResult): Gio.FileInputStream
---@field append_to fun(file: Gio.File, flags: Gio.FileCreateFlags, cancellable: Gio.Cancellable): Gio.FileOutputStream
---@field append_to_async fun(file: Gio.File, flags: Gio.FileCreateFlags, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field append_to_finish fun(file: Gio.File, res: Gio.AsyncResult): Gio.FileOutputStream
---@field create fun(file: Gio.File, flags: Gio.FileCreateFlags, cancellable: Gio.Cancellable): Gio.FileOutputStream
---@field create_async fun(file: Gio.File, flags: Gio.FileCreateFlags, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field create_finish fun(file: Gio.File, res: Gio.AsyncResult): Gio.FileOutputStream
---@field replace fun(file: Gio.File, etag: string, make_backup: (boolean|nil), flags: Gio.FileCreateFlags, cancellable: Gio.Cancellable): Gio.FileOutputStream
---@field replace_async fun(file: Gio.File, etag: string, make_backup: (boolean|nil), flags: Gio.FileCreateFlags, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field replace_finish fun(file: Gio.File, res: Gio.AsyncResult): Gio.FileOutputStream
---@field delete_file fun(file: Gio.File, cancellable: Gio.Cancellable): (boolean|nil)
---@field delete_file_async fun(file: Gio.File, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field delete_file_finish fun(file: Gio.File, result: Gio.AsyncResult): (boolean|nil)
---@field trash fun(file: Gio.File, cancellable: Gio.Cancellable): (boolean|nil)
---@field trash_async fun(file: Gio.File, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field trash_finish fun(file: Gio.File, result: Gio.AsyncResult): (boolean|nil)
---@field make_directory fun(file: Gio.File, cancellable: Gio.Cancellable): (boolean|nil)
---@field make_directory_async fun(file: Gio.File, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field make_directory_finish fun(file: Gio.File, result: Gio.AsyncResult): (boolean|nil)
---@field make_symbolic_link fun(file: Gio.File, symlink_value: string, cancellable: Gio.Cancellable): (boolean|nil)
---@field make_symbolic_link_async fun(file: Gio.File, symlink_value: string, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field make_symbolic_link_finish fun(file: Gio.File, result: Gio.AsyncResult): (boolean|nil)
---@field copy fun(source: Gio.File, destination: Gio.File, flags: Gio.FileCopyFlags, cancellable: Gio.Cancellable, progress_callback: Gio.FileProgressCallback, progress_callback_data: userdata): (boolean|nil)
---@field copy_async fun(source: Gio.File, destination: Gio.File, flags: Gio.FileCopyFlags, io_priority: integer, cancellable: Gio.Cancellable, progress_callback: Gio.FileProgressCallback, progress_callback_data: userdata, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field copy_finish fun(file: Gio.File, res: Gio.AsyncResult): (boolean|nil)
---@field move fun(source: Gio.File, destination: Gio.File, flags: Gio.FileCopyFlags, cancellable: Gio.Cancellable, progress_callback: Gio.FileProgressCallback, progress_callback_data: userdata): (boolean|nil)
---@field move_async fun(source: Gio.File, destination: Gio.File, flags: Gio.FileCopyFlags, io_priority: integer, cancellable: Gio.Cancellable, progress_callback: Gio.FileProgressCallback, progress_callback_data: userdata, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field move_finish fun(file: Gio.File, result: Gio.AsyncResult): (boolean|nil)
---@field mount_mountable fun(file: Gio.File, flags: Gio.MountMountFlags, mount_operation: Gio.MountOperation, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field mount_mountable_finish fun(file: Gio.File, result: Gio.AsyncResult): Gio.File
---@field unmount_mountable fun(file: Gio.File, flags: Gio.MountUnmountFlags, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field unmount_mountable_finish fun(file: Gio.File, result: Gio.AsyncResult): (boolean|nil)
---@field eject_mountable fun(file: Gio.File, flags: Gio.MountUnmountFlags, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field eject_mountable_finish fun(file: Gio.File, result: Gio.AsyncResult): (boolean|nil)
---@field mount_enclosing_volume fun(location: Gio.File, flags: Gio.MountMountFlags, mount_operation: Gio.MountOperation, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field mount_enclosing_volume_finish fun(location: Gio.File, result: Gio.AsyncResult): (boolean|nil)
---@field monitor_dir fun(file: Gio.File, flags: Gio.FileMonitorFlags, cancellable: Gio.Cancellable): Gio.FileMonitor
---@field monitor_file fun(file: Gio.File, flags: Gio.FileMonitorFlags, cancellable: Gio.Cancellable): Gio.FileMonitor
---@field open_readwrite fun(file: Gio.File, cancellable: Gio.Cancellable): Gio.FileIOStream
---@field open_readwrite_async fun(file: Gio.File, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field open_readwrite_finish fun(file: Gio.File, res: Gio.AsyncResult): Gio.FileIOStream
---@field create_readwrite fun(file: Gio.File, flags: Gio.FileCreateFlags, cancellable: Gio.Cancellable): Gio.FileIOStream
---@field create_readwrite_async fun(file: Gio.File, flags: Gio.FileCreateFlags, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field create_readwrite_finish fun(file: Gio.File, res: Gio.AsyncResult): Gio.FileIOStream
---@field replace_readwrite fun(file: Gio.File, etag: string, make_backup: (boolean|nil), flags: Gio.FileCreateFlags, cancellable: Gio.Cancellable): Gio.FileIOStream
---@field replace_readwrite_async fun(file: Gio.File, etag: string, make_backup: (boolean|nil), flags: Gio.FileCreateFlags, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field replace_readwrite_finish fun(file: Gio.File, res: Gio.AsyncResult): Gio.FileIOStream
---@field start_mountable fun(file: Gio.File, flags: Gio.DriveStartFlags, start_operation: Gio.MountOperation, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field start_mountable_finish fun(file: Gio.File, result: Gio.AsyncResult): (boolean|nil)
---@field stop_mountable fun(file: Gio.File, flags: Gio.MountUnmountFlags, mount_operation: Gio.MountOperation, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field stop_mountable_finish fun(file: Gio.File, result: Gio.AsyncResult): (boolean|nil)
---@field supports_thread_contexts (boolean|nil) # a boolean that indicates whether the `GFile` implementation supports thread-default contexts. Since 2.22.
---@field unmount_mountable_with_operation fun(file: Gio.File, flags: Gio.MountUnmountFlags, mount_operation: Gio.MountOperation, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field unmount_mountable_with_operation_finish fun(file: Gio.File, result: Gio.AsyncResult): (boolean|nil)
---@field eject_mountable_with_operation fun(file: Gio.File, flags: Gio.MountUnmountFlags, mount_operation: Gio.MountOperation, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field eject_mountable_with_operation_finish fun(file: Gio.File, result: Gio.AsyncResult): (boolean|nil)
---@field poll_mountable fun(file: Gio.File, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field poll_mountable_finish fun(file: Gio.File, result: Gio.AsyncResult): (boolean|nil)
---@field measure_disk_usage_finish fun(file: Gio.File, result: Gio.AsyncResult, disk_usage: integer, num_dirs: integer, num_files: integer): (boolean|nil)
Gio.FileIface = {}

--- # class Gio.FileInfo
---
--- Functionality for manipulating basic metadata for files. `GFileInfo`
--- implements methods for getting information that all files should
--- contain, and allows for manipulation of extended attributes.
--- 
--- See [GFileAttribute][gio-GFileAttribute] for more information on how
--- GIO handles file attributes.
--- 
--- To obtain a `GFileInfo` for a `GFile`, use `g_file_query_info()` (or its
--- async variant). To obtain a `GFileInfo` for a file input or output
--- stream, use `g_file_input_stream_query_info()` or
--- `g_file_output_stream_query_info()` (or their async variants).
--- 
--- To change the actual attributes of a file, you should then set the
--- attribute in the `GFileInfo` and call `g_file_set_attributes_from_info()`
--- or `g_file_set_attributes_async()` on a GFile.
--- 
--- However, not all attributes can be changed in the file. For instance,
--- the actual size of a file cannot be changed via `g_file_info_set_size()`.
--- You may call `g_file_query_settable_attributes()` and
--- `g_file_query_writable_namespaces()` to discover the settable attributes
--- of a particular file at runtime.
--- 
--- The direct accessors, such as `g_file_info_get_name()`, are slightly more
--- optimized than the generic attribute accessors, such as
--- `g_file_info_get_attribute_byte_string()`.This optimization will matter
--- only if calling the API in a tight loop.
--- 
--- It is an error to call these accessors without specifying their required file
--- attributes when creating the `GFileInfo`. Use `g_file_info_has_attribute()` or
--- `g_file_info_list_attributes()` to check what attributes are specified for a
--- `GFileInfo`.
--- 
--- `GFileAttributeMatcher` allows for searching through a `GFileInfo` for
--- attributes.
---
--- ---
---
---@class Gio.FileInfo : GObject.Object
---@operator call: Gio.FileInfo
Gio.FileInfo = {}

--- # method Gio.FileInfo:clear_status()
---
--- Clears the status information from `info`.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return nil
function Gio.FileInfo:clear_status() end

--- # method Gio.FileInfo:copy_into()
---
--- First clears all of the [GFileAttribute][gio-GFileAttribute] of `dest_info`,
--- and then copies all of the file attributes from `src_info` to `dest_info`.
---
--- ---
---
---@param self Gio.FileInfo # source to copy attributes from.
---@param dest_info Gio.FileInfo # destination to copy attributes to.
---@return nil
function Gio.FileInfo:copy_into(dest_info) end

--- # method Gio.FileInfo:dup()
---
--- Duplicates a file info structure.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return Gio.FileInfo # a duplicate `GFileInfo` of `other`.
function Gio.FileInfo:dup() end

--- # method Gio.FileInfo:get_access_date_time()
---
--- Gets the access time of the current `info` and returns it as a
--- `GDateTime`.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_TIME_ACCESS. If %G_FILE_ATTRIBUTE_TIME_ACCESS_USEC is
--- provided, the resulting `GDateTime` will additionally have microsecond
--- precision.
--- 
--- If nanosecond precision is needed, %G_FILE_ATTRIBUTE_TIME_ACCESS_NSEC must
--- be queried separately using g_file_info_get_attribute_uint32().
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return GLib.DateTime # access time, or `nil` if unknown
function Gio.FileInfo:get_access_date_time() end

--- # method Gio.FileInfo:get_attribute_as_string()
---
--- Gets the value of an attribute, formatted as a string.
--- This escapes things as needed to make the string valid
--- UTF-8.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@return string # a UTF-8 string associated with the given `attribute`, or `nil` if the attribute wasn’t set. When you're done with the string it must be freed with `g_free()`.
function Gio.FileInfo:get_attribute_as_string(attribute) end

--- # method Gio.FileInfo:get_attribute_boolean()
---
--- Gets the value of a boolean attribute. If the attribute does not
--- contain a boolean value, `false` will be returned.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@return (boolean|nil) # the boolean value contained within the attribute.
function Gio.FileInfo:get_attribute_boolean(attribute) end

--- # method Gio.FileInfo:get_attribute_byte_string()
---
--- Gets the value of a byte string attribute. If the attribute does
--- not contain a byte string, `nil` will be returned.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@return string # the contents of the `attribute` value as a byte string, or `nil` otherwise.
function Gio.FileInfo:get_attribute_byte_string(attribute) end

--- # method Gio.FileInfo:get_attribute_data()
---
--- Gets the attribute type, value and status for an attribute key.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`
---@param attribute string # a file attribute key
---@param type? Gio.FileAttributeType # return location for the attribute type, or `nil`
---@param value_pp? userdata # return location for the attribute value, or `nil`; the attribute value will not be `nil`
---@param status? Gio.FileAttributeStatus # return location for the attribute status, or `nil`
---@return (boolean|nil) # `true` if `info` has an attribute named `attribute`, `false` otherwise.
function Gio.FileInfo:get_attribute_data(attribute, type, value_pp, status) end

--- # method Gio.FileInfo:get_attribute_int32()
---
--- Gets a signed 32-bit integer contained within the attribute. If the
--- attribute does not contain a signed 32-bit integer, or is invalid,
--- 0 will be returned.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@return integer # a signed 32-bit integer from the attribute.
function Gio.FileInfo:get_attribute_int32(attribute) end

--- # method Gio.FileInfo:get_attribute_int64()
---
--- Gets a signed 64-bit integer contained within the attribute. If the
--- attribute does not contain a signed 64-bit integer, or is invalid,
--- 0 will be returned.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@return integer # a signed 64-bit integer from the attribute.
function Gio.FileInfo:get_attribute_int64(attribute) end

--- # method Gio.FileInfo:get_attribute_object()
---
--- Gets the value of a `GObject` attribute. If the attribute does
--- not contain a `GObject`, `nil` will be returned.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@return GObject.Object # a `GObject` associated with the given `attribute`, or `nil` otherwise.
function Gio.FileInfo:get_attribute_object(attribute) end

--- # method Gio.FileInfo:get_attribute_status()
---
--- Gets the attribute status for an attribute key.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`
---@param attribute string # a file attribute key
---@return Gio.FileAttributeStatus # a `GFileAttributeStatus` for the given `attribute`, or %G_FILE_ATTRIBUTE_STATUS_UNSET if the key is invalid.
function Gio.FileInfo:get_attribute_status(attribute) end

--- # method Gio.FileInfo:get_attribute_string()
---
--- Gets the value of a string attribute. If the attribute does
--- not contain a string, `nil` will be returned.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@return string # the contents of the `attribute` value as a UTF-8 string, or `nil` otherwise.
function Gio.FileInfo:get_attribute_string(attribute) end

--- # method Gio.FileInfo:get_attribute_stringv()
---
--- Gets the value of a stringv attribute. If the attribute does
--- not contain a stringv, `nil` will be returned.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@return unknown[] # the contents of the `attribute` value as a stringv, or `nil` otherwise. Do not free. These returned strings are UTF-8.
function Gio.FileInfo:get_attribute_stringv(attribute) end

--- # method Gio.FileInfo:get_attribute_type()
---
--- Gets the attribute type for an attribute key.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@return Gio.FileAttributeType # a `GFileAttributeType` for the given `attribute`, or %G_FILE_ATTRIBUTE_TYPE_INVALID if the key is not set.
function Gio.FileInfo:get_attribute_type(attribute) end

--- # method Gio.FileInfo:get_attribute_uint32()
---
--- Gets an unsigned 32-bit integer contained within the attribute. If the
--- attribute does not contain an unsigned 32-bit integer, or is invalid,
--- 0 will be returned.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@return integer # an unsigned 32-bit integer from the attribute.
function Gio.FileInfo:get_attribute_uint32(attribute) end

--- # method Gio.FileInfo:get_attribute_uint64()
---
--- Gets a unsigned 64-bit integer contained within the attribute. If the
--- attribute does not contain an unsigned 64-bit integer, or is invalid,
--- 0 will be returned.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@return integer # a unsigned 64-bit integer from the attribute.
function Gio.FileInfo:get_attribute_uint64(attribute) end

--- # method Gio.FileInfo:get_content_type()
---
--- Gets the file's content type.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return string # a string containing the file's content type, or `nil` if unknown.
function Gio.FileInfo:get_content_type() end

--- # method Gio.FileInfo:get_creation_date_time()
---
--- Gets the creation time of the current `info` and returns it as a
--- `GDateTime`.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_TIME_CREATED. If %G_FILE_ATTRIBUTE_TIME_CREATED_USEC is
--- provided, the resulting `GDateTime` will additionally have microsecond
--- precision.
--- 
--- If nanosecond precision is needed, %G_FILE_ATTRIBUTE_TIME_CREATED_NSEC must
--- be queried separately using g_file_info_get_attribute_uint32().
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return GLib.DateTime # creation time, or `nil` if unknown
function Gio.FileInfo:get_creation_date_time() end

--- # method Gio.FileInfo:get_deletion_date()
---
--- Returns the `GDateTime` representing the deletion date of the file, as
--- available in %G_FILE_ATTRIBUTE_TRASH_DELETION_DATE. If the
--- %G_FILE_ATTRIBUTE_TRASH_DELETION_DATE attribute is unset, `nil` is returned.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return GLib.DateTime # a `GDateTime`, or `nil`.
function Gio.FileInfo:get_deletion_date() end

--- # method Gio.FileInfo:get_display_name()
---
--- Gets a display name for a file. This is guaranteed to always be set.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return string # a string containing the display name.
function Gio.FileInfo:get_display_name() end

--- # method Gio.FileInfo:get_edit_name()
---
--- Gets the edit name for a file.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return string # a string containing the edit name.
function Gio.FileInfo:get_edit_name() end

--- # method Gio.FileInfo:get_etag()
---
--- Gets the [entity tag][gfile-etag] for a given
--- `GFileInfo`. See %G_FILE_ATTRIBUTE_ETAG_VALUE.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_ETAG_VALUE.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return string # a string containing the value of the "etag:value" attribute.
function Gio.FileInfo:get_etag() end

--- # method Gio.FileInfo:get_file_type()
---
--- Gets a file's type (whether it is a regular file, symlink, etc).
--- This is different from the file's content type, see `g_file_info_get_content_type()`.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_STANDARD_TYPE.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return Gio.FileType # a `GFileType` for the given file.
function Gio.FileInfo:get_file_type() end

--- # method Gio.FileInfo:get_icon()
---
--- Gets the icon for a file.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_STANDARD_ICON.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return Gio.Icon # `GIcon` for the given `info`.
function Gio.FileInfo:get_icon() end

--- # method Gio.FileInfo:get_is_backup()
---
--- Checks if a file is a backup file.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return (boolean|nil) # `true` if file is a backup file, `false` otherwise.
function Gio.FileInfo:get_is_backup() end

--- # method Gio.FileInfo:get_is_hidden()
---
--- Checks if a file is hidden.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return (boolean|nil) # `true` if the file is a hidden file, `false` otherwise.
function Gio.FileInfo:get_is_hidden() end

--- # method Gio.FileInfo:get_is_symlink()
---
--- Checks if a file is a symlink.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return (boolean|nil) # `true` if the given `info` is a symlink.
function Gio.FileInfo:get_is_symlink() end

--- # method Gio.FileInfo:get_modification_date_time()
---
--- Gets the modification time of the current `info` and returns it as a
--- `GDateTime`.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_TIME_MODIFIED. If %G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC is
--- provided, the resulting `GDateTime` will additionally have microsecond
--- precision.
--- 
--- If nanosecond precision is needed, %G_FILE_ATTRIBUTE_TIME_MODIFIED_NSEC must
--- be queried separately using g_file_info_get_attribute_uint32().
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return GLib.DateTime # modification time, or `nil` if unknown
function Gio.FileInfo:get_modification_date_time() end

--- # method Gio.FileInfo:get_modification_time()
---
--- Gets the modification time of the current `info` and sets it
--- in `result`.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_TIME_MODIFIED. If %G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC is
--- provided it will be used too.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param result GLib.TimeVal # a `GTimeVal`.
---@return nil
function Gio.FileInfo:get_modification_time(result) end

--- # method Gio.FileInfo:get_name()
---
--- Gets the name for a file. This is guaranteed to always be set.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_STANDARD_NAME.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return string # a string containing the file name.
function Gio.FileInfo:get_name() end

--- # method Gio.FileInfo:get_size()
---
--- Gets the file's size (in bytes). The size is retrieved through the value of
--- the %G_FILE_ATTRIBUTE_STANDARD_SIZE attribute and is converted
--- from `guint64` to `goffset` before returning the result.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_STANDARD_SIZE.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return integer # a `goffset` containing the file's size (in bytes).
function Gio.FileInfo:get_size() end

--- # method Gio.FileInfo:get_sort_order()
---
--- Gets the value of the sort_order attribute from the `GFileInfo`.
--- See %G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return integer # a `gint32` containing the value of the "standard::sort_order" attribute.
function Gio.FileInfo:get_sort_order() end

--- # method Gio.FileInfo:get_symbolic_icon()
---
--- Gets the symbolic icon for a file.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return Gio.Icon # `GIcon` for the given `info`.
function Gio.FileInfo:get_symbolic_icon() end

--- # method Gio.FileInfo:get_symlink_target()
---
--- Gets the symlink target for a given `GFileInfo`.
--- 
--- It is an error to call this if the `GFileInfo` does not contain
--- %G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@return string # a string containing the symlink target.
function Gio.FileInfo:get_symlink_target() end

--- # method Gio.FileInfo:has_attribute()
---
--- Checks if a file info structure has an attribute named `attribute`.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@return (boolean|nil) # `true` if `info` has an attribute named `attribute`, `false` otherwise.
function Gio.FileInfo:has_attribute(attribute) end

--- # method Gio.FileInfo:has_namespace()
---
--- Checks if a file info structure has an attribute in the
--- specified `name_space`.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param name_space string # a file attribute namespace.
---@return (boolean|nil) # `true` if `info` has an attribute in `name_space`, `false` otherwise.
function Gio.FileInfo:has_namespace(name_space) end

--- # method Gio.FileInfo:list_attributes()
---
--- Lists the file info structure's attributes.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param name_space? string # a file attribute key's namespace, or `nil` to list all attributes.
---@return unknown[] # a null-terminated array of strings of all of the possible attribute types for the given `name_space`, or `nil` on error.
function Gio.FileInfo:list_attributes(name_space) end

--- # method Gio.FileInfo:remove_attribute()
---
--- Removes all cases of `attribute` from `info` if it exists.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@return nil
function Gio.FileInfo:remove_attribute(attribute) end

--- # method Gio.FileInfo:set_access_date_time()
---
--- Sets the %G_FILE_ATTRIBUTE_TIME_ACCESS and
--- %G_FILE_ATTRIBUTE_TIME_ACCESS_USEC attributes in the file info to the
--- given date/time value.
--- 
--- %G_FILE_ATTRIBUTE_TIME_ACCESS_NSEC will be cleared.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param atime GLib.DateTime # a `GDateTime`.
---@return nil
function Gio.FileInfo:set_access_date_time(atime) end

--- # method Gio.FileInfo:set_attribute()
---
--- Sets the `attribute` to contain the given value, if possible. To unset the
--- attribute, use %G_FILE_ATTRIBUTE_TYPE_INVALID for `type`.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@param type Gio.FileAttributeType # a `GFileAttributeType`
---@param value_p userdata # pointer to the value
---@return nil
function Gio.FileInfo:set_attribute(attribute, type, value_p) end

--- # method Gio.FileInfo:set_attribute_boolean()
---
--- Sets the `attribute` to contain the given `attr_value`,
--- if possible.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@param attr_value (boolean|nil) # a boolean value.
---@return nil
function Gio.FileInfo:set_attribute_boolean(attribute, attr_value) end

--- # method Gio.FileInfo:set_attribute_byte_string()
---
--- Sets the `attribute` to contain the given `attr_value`,
--- if possible.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@param attr_value string # a byte string.
---@return nil
function Gio.FileInfo:set_attribute_byte_string(attribute, attr_value) end

--- # method Gio.FileInfo:set_attribute_int32()
---
--- Sets the `attribute` to contain the given `attr_value`,
--- if possible.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@param attr_value integer # a signed 32-bit integer
---@return nil
function Gio.FileInfo:set_attribute_int32(attribute, attr_value) end

--- # method Gio.FileInfo:set_attribute_int64()
---
--- Sets the `attribute` to contain the given `attr_value`,
--- if possible.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # attribute name to set.
---@param attr_value integer # int64 value to set attribute to.
---@return nil
function Gio.FileInfo:set_attribute_int64(attribute, attr_value) end

--- # method Gio.FileInfo:set_attribute_mask()
---
--- Sets `mask` on `info` to match specific attribute types.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param mask Gio.FileAttributeMatcher # a `GFileAttributeMatcher`.
---@return nil
function Gio.FileInfo:set_attribute_mask(mask) end

--- # method Gio.FileInfo:set_attribute_object()
---
--- Sets the `attribute` to contain the given `attr_value`,
--- if possible.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@param attr_value GObject.Object # a `GObject`.
---@return nil
function Gio.FileInfo:set_attribute_object(attribute, attr_value) end

--- # method Gio.FileInfo:set_attribute_status()
---
--- Sets the attribute status for an attribute key. This is only
--- needed by external code that implement `g_file_set_attributes_from_info()`
--- or similar functions.
--- 
--- The attribute must exist in `info` for this to work. Otherwise `false`
--- is returned and `info` is unchanged.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`
---@param attribute string # a file attribute key
---@param status Gio.FileAttributeStatus # a `GFileAttributeStatus`
---@return (boolean|nil) # `true` if the status was changed, `false` if the key was not set.
function Gio.FileInfo:set_attribute_status(attribute, status) end

--- # method Gio.FileInfo:set_attribute_string()
---
--- Sets the `attribute` to contain the given `attr_value`,
--- if possible.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@param attr_value string # a UTF-8 string.
---@return nil
function Gio.FileInfo:set_attribute_string(attribute, attr_value) end

--- # method Gio.FileInfo:set_attribute_stringv()
---
--- Sets the `attribute` to contain the given `attr_value`,
--- if possible.
--- 
--- Sinze: 2.22
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key
---@param attr_value unknown[] # a `nil` terminated array of UTF-8 strings.
---@return nil
function Gio.FileInfo:set_attribute_stringv(attribute, attr_value) end

--- # method Gio.FileInfo:set_attribute_uint32()
---
--- Sets the `attribute` to contain the given `attr_value`,
--- if possible.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@param attr_value integer # an unsigned 32-bit integer.
---@return nil
function Gio.FileInfo:set_attribute_uint32(attribute, attr_value) end

--- # method Gio.FileInfo:set_attribute_uint64()
---
--- Sets the `attribute` to contain the given `attr_value`,
--- if possible.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param attribute string # a file attribute key.
---@param attr_value integer # an unsigned 64-bit integer.
---@return nil
function Gio.FileInfo:set_attribute_uint64(attribute, attr_value) end

--- # method Gio.FileInfo:set_content_type()
---
--- Sets the content type attribute for a given `GFileInfo`.
--- See %G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param content_type string # a content type. See [GContentType][gio-GContentType]
---@return nil
function Gio.FileInfo:set_content_type(content_type) end

--- # method Gio.FileInfo:set_creation_date_time()
---
--- Sets the %G_FILE_ATTRIBUTE_TIME_CREATED and
--- %G_FILE_ATTRIBUTE_TIME_CREATED_USEC attributes in the file info to the
--- given date/time value.
--- 
--- %G_FILE_ATTRIBUTE_TIME_CREATED_NSEC will be cleared.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param creation_time GLib.DateTime # a `GDateTime`.
---@return nil
function Gio.FileInfo:set_creation_date_time(creation_time) end

--- # method Gio.FileInfo:set_display_name()
---
--- Sets the display name for the current `GFileInfo`.
--- See %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param display_name string # a string containing a display name.
---@return nil
function Gio.FileInfo:set_display_name(display_name) end

--- # method Gio.FileInfo:set_edit_name()
---
--- Sets the edit name for the current file.
--- See %G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param edit_name string # a string containing an edit name.
---@return nil
function Gio.FileInfo:set_edit_name(edit_name) end

--- # method Gio.FileInfo:set_file_type()
---
--- Sets the file type in a `GFileInfo` to `type`.
--- See %G_FILE_ATTRIBUTE_STANDARD_TYPE.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param type Gio.FileType # a `GFileType`.
---@return nil
function Gio.FileInfo:set_file_type(type) end

--- # method Gio.FileInfo:set_icon()
---
--- Sets the icon for a given `GFileInfo`.
--- See %G_FILE_ATTRIBUTE_STANDARD_ICON.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param icon Gio.Icon # a `GIcon`.
---@return nil
function Gio.FileInfo:set_icon(icon) end

--- # method Gio.FileInfo:set_is_hidden()
---
--- Sets the "is_hidden" attribute in a `GFileInfo` according to `is_hidden`.
--- See %G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param is_hidden (boolean|nil) # a `gboolean`.
---@return nil
function Gio.FileInfo:set_is_hidden(is_hidden) end

--- # method Gio.FileInfo:set_is_symlink()
---
--- Sets the "is_symlink" attribute in a `GFileInfo` according to `is_symlink`.
--- See %G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param is_symlink (boolean|nil) # a `gboolean`.
---@return nil
function Gio.FileInfo:set_is_symlink(is_symlink) end

--- # method Gio.FileInfo:set_modification_date_time()
---
--- Sets the %G_FILE_ATTRIBUTE_TIME_MODIFIED and
--- %G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC attributes in the file info to the
--- given date/time value.
--- 
--- %G_FILE_ATTRIBUTE_TIME_MODIFIED_NSEC will be cleared.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param mtime GLib.DateTime # a `GDateTime`.
---@return nil
function Gio.FileInfo:set_modification_date_time(mtime) end

--- # method Gio.FileInfo:set_modification_time()
---
--- Sets the %G_FILE_ATTRIBUTE_TIME_MODIFIED and
--- %G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC attributes in the file info to the
--- given time value.
--- 
--- %G_FILE_ATTRIBUTE_TIME_MODIFIED_NSEC will be cleared.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param mtime GLib.TimeVal # a `GTimeVal`.
---@return nil
function Gio.FileInfo:set_modification_time(mtime) end

--- # method Gio.FileInfo:set_name()
---
--- Sets the name attribute for the current `GFileInfo`.
--- See %G_FILE_ATTRIBUTE_STANDARD_NAME.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param name string # a string containing a name.
---@return nil
function Gio.FileInfo:set_name(name) end

--- # method Gio.FileInfo:set_size()
---
--- Sets the %G_FILE_ATTRIBUTE_STANDARD_SIZE attribute in the file info
--- to the given size.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param size integer # a `goffset` containing the file's size.
---@return nil
function Gio.FileInfo:set_size(size) end

--- # method Gio.FileInfo:set_sort_order()
---
--- Sets the sort order attribute in the file info structure. See
--- %G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param sort_order integer # a sort order integer.
---@return nil
function Gio.FileInfo:set_sort_order(sort_order) end

--- # method Gio.FileInfo:set_symbolic_icon()
---
--- Sets the symbolic icon for a given `GFileInfo`.
--- See %G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param icon Gio.Icon # a `GIcon`.
---@return nil
function Gio.FileInfo:set_symbolic_icon(icon) end

--- # method Gio.FileInfo:set_symlink_target()
---
--- Sets the %G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET attribute in the file info
--- to the given symlink target.
---
--- ---
---
---@param self Gio.FileInfo # a `GFileInfo`.
---@param symlink_target string # a static string containing a path to a symlink target.
---@return nil
function Gio.FileInfo:set_symlink_target(symlink_target) end

--- # method Gio.FileInfo:unset_attribute_mask()
---
--- Unsets a mask set by `g_file_info_set_attribute_mask()`, if one
--- is set.
---
--- ---
---
---@param self Gio.FileInfo # `GFileInfo`.
---@return nil
function Gio.FileInfo:unset_attribute_mask() end

--- # function Gio.FileInfo.new()
---
--- Creates a new file info structure.
---
--- ---
---
---@return Gio.FileInfo # a `GFileInfo`.
function Gio.FileInfo.new() end

--- # record Gio.FileInfoClass
---
---@class Gio.FileInfoClass
Gio.FileInfoClass = {}

--- # class Gio.FileInputStream
---
--- GFileInputStream provides input streams that take their
--- content from a file.
--- 
--- GFileInputStream implements `GSeekable`, which allows the input
--- stream to jump to arbitrary positions in the file, provided the
--- filesystem of the file allows it. To find the position of a file
--- input stream, use `g_seekable_tell()`. To find out if a file input
--- stream supports seeking, use `g_seekable_can_seek()`.
--- To position a file input stream, use `g_seekable_seek()`.
---
--- ---
---
---@class Gio.FileInputStream : Gio.InputStream, Gio.Seekable
---@field parent_instance Gio.InputStream
---@field priv Gio.FileInputStreamPrivate
Gio.FileInputStream = {}

--- # method Gio.FileInputStream:query_info()
---
--- Queries a file input stream the given `attributes`. This function blocks
--- while querying the stream. For the asynchronous (non-blocking) version
--- of this function, see `g_file_input_stream_query_info_async()`. While the
--- stream is blocked, the stream will set the pending flag internally, and
--- any other operations on the stream will fail with %G_IO_ERROR_PENDING.
---
--- ---
---
---@param self Gio.FileInputStream # a `GFileInputStream`.
---@param attributes string # a file attribute query string.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return Gio.FileInfo # a `GFileInfo`, or `nil` on error.
function Gio.FileInputStream:query_info(attributes, cancellable) end

--- # method Gio.FileInputStream:query_info_async()
---
--- Queries the stream information asynchronously.
--- When the operation is finished `callback` will be called.
--- You can then call `g_file_input_stream_query_info_finish()`
--- to get the result of the operation.
--- 
--- For the synchronous version of this function,
--- see `g_file_input_stream_query_info()`.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be set
---
--- ---
---
---@param self Gio.FileInputStream # a `GFileInputStream`.
---@param attributes string # a file attribute query string.
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.FileInputStream:query_info_async(attributes, io_priority, cancellable, callback, user_data) end

--- # method Gio.FileInputStream:query_info_finish()
---
--- Finishes an asynchronous info query operation.
---
--- ---
---
---@param self Gio.FileInputStream # a `GFileInputStream`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return Gio.FileInfo # `GFileInfo`.
function Gio.FileInputStream:query_info_finish(result) end

--- # record Gio.FileInputStreamClass
---
---@class Gio.FileInputStreamClass
---@field parent_class Gio.InputStreamClass
---@field tell fun(stream: Gio.FileInputStream): integer
---@field can_seek fun(stream: Gio.FileInputStream): (boolean|nil)
---@field seek fun(stream: Gio.FileInputStream, offset: integer, type: GLib.SeekType, cancellable: Gio.Cancellable): (boolean|nil)
---@field query_info fun(stream: Gio.FileInputStream, attributes: string, cancellable: Gio.Cancellable): Gio.FileInfo
---@field query_info_async fun(stream: Gio.FileInputStream, attributes: string, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field query_info_finish fun(stream: Gio.FileInputStream, result: Gio.AsyncResult): Gio.FileInfo
Gio.FileInputStreamClass = {}

--- # record Gio.FileInputStreamPrivate
---
---@class Gio.FileInputStreamPrivate
Gio.FileInputStreamPrivate = {}

---@enum Gio.FileMeasureFlags
Gio.FileMeasureFlags = {}

---@alias Gio.FileMeasureProgressCallback fun(reporting: (boolean|nil), current_size: integer, num_dirs: integer, num_files: integer, data: userdata): nil

--- # class Gio.FileMonitor
---
--- Monitors a file or directory for changes.
--- 
--- To obtain a `GFileMonitor` for a file or directory, use
--- `g_file_monitor()`, `g_file_monitor_file()`, or
--- `g_file_monitor_directory()`.
--- 
--- To get informed about changes to the file or directory you are
--- monitoring, connect to the `GFileMonitor`::changed signal. The
--- signal will be emitted in the
--- [thread-default main context][g-main-context-push-thread-default]
--- of the thread that the monitor was created in
--- (though if the global default main context is blocked, this may
--- cause notifications to be blocked even if the thread-default
--- context is still running).
---
--- ---
---
---@class Gio.FileMonitor : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.FileMonitorPrivate
Gio.FileMonitor = {}

--- # method Gio.FileMonitor:cancel()
---
--- Cancels a file monitor.
---
--- ---
---
---@param self Gio.FileMonitor # a `GFileMonitor`.
---@return (boolean|nil) # always `true`
function Gio.FileMonitor:cancel() end

--- # method Gio.FileMonitor:emit_event()
---
--- Emits the `GFileMonitor`::changed signal if a change
--- has taken place. Should be called from file monitor
--- implementations only.
--- 
--- Implementations are responsible to call this method from the
--- [thread-default main context][g-main-context-push-thread-default] of the
--- thread that the monitor was created in.
---
--- ---
---
---@param self Gio.FileMonitor # a `GFileMonitor`.
---@param child Gio.File # a `GFile`.
---@param other_file Gio.File # a `GFile`.
---@param event_type Gio.FileMonitorEvent # a set of `GFileMonitorEvent` flags.
---@return nil
function Gio.FileMonitor:emit_event(child, other_file, event_type) end

--- # method Gio.FileMonitor:is_cancelled()
---
--- Returns whether the monitor is canceled.
---
--- ---
---
---@param self Gio.FileMonitor # a `GFileMonitor`
---@return (boolean|nil) # `true` if monitor is canceled. `false` otherwise.
function Gio.FileMonitor:is_cancelled() end

--- # method Gio.FileMonitor:set_rate_limit()
---
--- Sets the rate limit to which the `monitor` will report
--- consecutive change events to the same file.
---
--- ---
---
---@param self Gio.FileMonitor # a `GFileMonitor`.
---@param limit_msecs integer # a non-negative integer with the limit in milliseconds to poll for changes
---@return nil
function Gio.FileMonitor:set_rate_limit(limit_msecs) end

--- # record Gio.FileMonitorClass
---
---@class Gio.FileMonitorClass
---@field parent_class GObject.ObjectClass
---@field changed fun(monitor: Gio.FileMonitor, file: Gio.File, other_file: Gio.File, event_type: Gio.FileMonitorEvent): nil
---@field cancel fun(monitor: Gio.FileMonitor): (boolean|nil)
Gio.FileMonitorClass = {}

---@enum Gio.FileMonitorEvent
Gio.FileMonitorEvent = {}

---@enum Gio.FileMonitorFlags
Gio.FileMonitorFlags = {}

--- # record Gio.FileMonitorPrivate
---
---@class Gio.FileMonitorPrivate
Gio.FileMonitorPrivate = {}

--- # class Gio.FileOutputStream
---
--- GFileOutputStream provides output streams that write their
--- content to a file.
--- 
--- GFileOutputStream implements `GSeekable`, which allows the output
--- stream to jump to arbitrary positions in the file and to truncate
--- the file, provided the filesystem of the file supports these
--- operations.
--- 
--- To find the position of a file output stream, use `g_seekable_tell()`.
--- To find out if a file output stream supports seeking, use
--- `g_seekable_can_seek()`.To position a file output stream, use
--- `g_seekable_seek()`. To find out if a file output stream supports
--- truncating, use `g_seekable_can_truncate()`. To truncate a file output
--- stream, use `g_seekable_truncate()`.
---
--- ---
---
---@class Gio.FileOutputStream : Gio.OutputStream, Gio.Seekable
---@field parent_instance Gio.OutputStream
---@field priv Gio.FileOutputStreamPrivate
Gio.FileOutputStream = {}

--- # method Gio.FileOutputStream:get_etag()
---
--- Gets the entity tag for the file when it has been written.
--- This must be called after the stream has been written
--- and closed, as the etag can change while writing.
---
--- ---
---
---@param self Gio.FileOutputStream # a `GFileOutputStream`.
---@return string # the entity tag for the stream.
function Gio.FileOutputStream:get_etag() end

--- # method Gio.FileOutputStream:query_info()
---
--- Queries a file output stream for the given `attributes`.
--- This function blocks while querying the stream. For the asynchronous
--- version of this function, see `g_file_output_stream_query_info_async()`.
--- While the stream is blocked, the stream will set the pending flag
--- internally, and any other operations on the stream will fail with
--- %G_IO_ERROR_PENDING.
--- 
--- Can fail if the stream was already closed (with `error` being set to
--- %G_IO_ERROR_CLOSED), the stream has pending operations (with `error` being
--- set to %G_IO_ERROR_PENDING), or if querying info is not supported for
--- the stream's interface (with `error` being set to %G_IO_ERROR_NOT_SUPPORTED). In
--- all cases of failure, `nil` will be returned.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and `nil` will
--- be returned.
---
--- ---
---
---@param self Gio.FileOutputStream # a `GFileOutputStream`.
---@param attributes string # a file attribute query string.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return Gio.FileInfo # a `GFileInfo` for the `stream`, or `nil` on error.
function Gio.FileOutputStream:query_info(attributes, cancellable) end

--- # method Gio.FileOutputStream:query_info_async()
---
--- Asynchronously queries the `stream` for a `GFileInfo`. When completed,
--- `callback` will be called with a `GAsyncResult` which can be used to
--- finish the operation with `g_file_output_stream_query_info_finish()`.
--- 
--- For the synchronous version of this function, see
--- `g_file_output_stream_query_info()`.
---
--- ---
---
---@param self Gio.FileOutputStream # a `GFileOutputStream`.
---@param attributes string # a file attribute query string.
---@param io_priority integer # the [I/O priority][gio-GIOScheduler] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.FileOutputStream:query_info_async(attributes, io_priority, cancellable, callback, user_data) end

--- # method Gio.FileOutputStream:query_info_finish()
---
--- Finalizes the asynchronous query started
--- by `g_file_output_stream_query_info_async()`.
---
--- ---
---
---@param self Gio.FileOutputStream # a `GFileOutputStream`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return Gio.FileInfo # A `GFileInfo` for the finished query.
function Gio.FileOutputStream:query_info_finish(result) end

--- # record Gio.FileOutputStreamClass
---
---@class Gio.FileOutputStreamClass
---@field parent_class Gio.OutputStreamClass
---@field tell fun(stream: Gio.FileOutputStream): integer
---@field can_seek fun(stream: Gio.FileOutputStream): (boolean|nil)
---@field seek fun(stream: Gio.FileOutputStream, offset: integer, type: GLib.SeekType, cancellable: Gio.Cancellable): (boolean|nil)
---@field can_truncate fun(stream: Gio.FileOutputStream): (boolean|nil)
---@field truncate_fn fun(stream: Gio.FileOutputStream, size: integer, cancellable: Gio.Cancellable): (boolean|nil)
---@field query_info fun(stream: Gio.FileOutputStream, attributes: string, cancellable: Gio.Cancellable): Gio.FileInfo
---@field query_info_async fun(stream: Gio.FileOutputStream, attributes: string, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field query_info_finish fun(stream: Gio.FileOutputStream, result: Gio.AsyncResult): Gio.FileInfo
---@field get_etag fun(stream: Gio.FileOutputStream): string
Gio.FileOutputStreamClass = {}

--- # record Gio.FileOutputStreamPrivate
---
---@class Gio.FileOutputStreamPrivate
Gio.FileOutputStreamPrivate = {}

---@alias Gio.FileProgressCallback fun(current_num_bytes: integer, total_num_bytes: integer, data: userdata): nil

---@enum Gio.FileQueryInfoFlags
Gio.FileQueryInfoFlags = {}

---@alias Gio.FileReadMoreCallback fun(file_contents: string, file_size: integer, callback_data: userdata): (boolean|nil)

---@enum Gio.FileType
Gio.FileType = {}

--- # class Gio.FilenameCompleter
---
--- Completes partial file and directory names given a partial string by
--- looking in the file system for clues. Can return a list of possible
--- completion strings for widget implementations.
---
--- ---
---
---@class Gio.FilenameCompleter : GObject.Object
---@operator call: Gio.FilenameCompleter
Gio.FilenameCompleter = {}

--- # method Gio.FilenameCompleter:get_completion_suffix()
---
--- Obtains a completion for `initial_text` from `completer`.
---
--- ---
---
---@param self Gio.FilenameCompleter # the filename completer.
---@param initial_text string # text to be completed.
---@return string # a completed string, or `nil` if no completion exists. This string is not owned by GIO, so remember to `g_free()` it when finished.
function Gio.FilenameCompleter:get_completion_suffix(initial_text) end

--- # method Gio.FilenameCompleter:get_completions()
---
--- Gets an array of completion strings for a given initial text.
---
--- ---
---
---@param self Gio.FilenameCompleter # the filename completer.
---@param initial_text string # text to be completed.
---@return unknown[] # array of strings with possible completions for `initial_text`. This array must be freed by `g_strfreev()` when finished.
function Gio.FilenameCompleter:get_completions(initial_text) end

--- # method Gio.FilenameCompleter:set_dirs_only()
---
--- If `dirs_only` is `true`, `completer` will only
--- complete directory names, and not file names.
---
--- ---
---
---@param self Gio.FilenameCompleter # the filename completer.
---@param dirs_only (boolean|nil) # a `gboolean`.
---@return nil
function Gio.FilenameCompleter:set_dirs_only(dirs_only) end

--- # function Gio.FilenameCompleter.new()
---
--- Creates a new filename completer.
---
--- ---
---
---@return Gio.FilenameCompleter # a `GFilenameCompleter`.
function Gio.FilenameCompleter.new() end

--- # record Gio.FilenameCompleterClass
---
---@class Gio.FilenameCompleterClass
---@field parent_class GObject.ObjectClass
---@field got_completion_data fun(filename_completer: Gio.FilenameCompleter): nil
Gio.FilenameCompleterClass = {}

---@enum Gio.FilesystemPreviewType
Gio.FilesystemPreviewType = {}

--- # class Gio.FilterInputStream
---
--- Base class for input stream implementations that perform some
--- kind of filtering operation on a base stream. Typical examples
--- of filtering operations are character set conversion, compression
--- and byte order flipping.
---
--- ---
---
---@class Gio.FilterInputStream : Gio.InputStream
---@field parent_instance Gio.InputStream
---@field base_stream Gio.InputStream
Gio.FilterInputStream = {}

--- # method Gio.FilterInputStream:get_base_stream()
---
--- Gets the base stream for the filter stream.
---
--- ---
---
---@param self Gio.FilterInputStream # a `GFilterInputStream`.
---@return Gio.InputStream # a `GInputStream`.
function Gio.FilterInputStream:get_base_stream() end

--- # method Gio.FilterInputStream:get_close_base_stream()
---
--- Returns whether the base stream will be closed when `stream` is
--- closed.
---
--- ---
---
---@param self Gio.FilterInputStream # a `GFilterInputStream`.
---@return (boolean|nil) # `true` if the base stream will be closed.
function Gio.FilterInputStream:get_close_base_stream() end

--- # method Gio.FilterInputStream:set_close_base_stream()
---
--- Sets whether the base stream will be closed when `stream` is closed.
---
--- ---
---
---@param self Gio.FilterInputStream # a `GFilterInputStream`.
---@param close_base (boolean|nil) # `true` to close the base stream.
---@return nil
function Gio.FilterInputStream:set_close_base_stream(close_base) end

--- # record Gio.FilterInputStreamClass
---
---@class Gio.FilterInputStreamClass
---@field parent_class Gio.InputStreamClass
Gio.FilterInputStreamClass = {}

--- # class Gio.FilterOutputStream
---
--- Base class for output stream implementations that perform some
--- kind of filtering operation on a base stream. Typical examples
--- of filtering operations are character set conversion, compression
--- and byte order flipping.
---
--- ---
---
---@class Gio.FilterOutputStream : Gio.OutputStream
---@field parent_instance Gio.OutputStream
---@field base_stream Gio.OutputStream
Gio.FilterOutputStream = {}

--- # method Gio.FilterOutputStream:get_base_stream()
---
--- Gets the base stream for the filter stream.
---
--- ---
---
---@param self Gio.FilterOutputStream # a `GFilterOutputStream`.
---@return Gio.OutputStream # a `GOutputStream`.
function Gio.FilterOutputStream:get_base_stream() end

--- # method Gio.FilterOutputStream:get_close_base_stream()
---
--- Returns whether the base stream will be closed when `stream` is
--- closed.
---
--- ---
---
---@param self Gio.FilterOutputStream # a `GFilterOutputStream`.
---@return (boolean|nil) # `true` if the base stream will be closed.
function Gio.FilterOutputStream:get_close_base_stream() end

--- # method Gio.FilterOutputStream:set_close_base_stream()
---
--- Sets whether the base stream will be closed when `stream` is closed.
---
--- ---
---
---@param self Gio.FilterOutputStream # a `GFilterOutputStream`.
---@param close_base (boolean|nil) # `true` to close the base stream.
---@return nil
function Gio.FilterOutputStream:set_close_base_stream(close_base) end

--- # record Gio.FilterOutputStreamClass
---
---@class Gio.FilterOutputStreamClass
---@field parent_class Gio.OutputStreamClass
Gio.FilterOutputStreamClass = {}

---@enum Gio.IOErrorEnum
Gio.IOErrorEnum = {}

--- # record Gio.IOExtension
---
--- `GIOExtension` is an opaque data structure and can only be accessed
--- using the following functions.
---
--- ---
---
---@class Gio.IOExtension
Gio.IOExtension = {}

--- # method Gio.IOExtension:get_name()
---
--- Gets the name under which `extension` was registered.
--- 
--- Note that the same type may be registered as extension
--- for multiple extension points, under different names.
---
--- ---
---
---@param self Gio.IOExtension # a `GIOExtension`
---@return string # the name of `extension`.
function Gio.IOExtension:get_name() end

--- # method Gio.IOExtension:get_priority()
---
--- Gets the priority with which `extension` was registered.
---
--- ---
---
---@param self Gio.IOExtension # a `GIOExtension`
---@return integer # the priority of `extension`
function Gio.IOExtension:get_priority() end

--- # method Gio.IOExtension:get_type()
---
--- Gets the type associated with `extension`.
---
--- ---
---
---@param self Gio.IOExtension # a `GIOExtension`
---@return Gio.GType # the type of `extension`
function Gio.IOExtension:get_type() end

--- # record Gio.IOExtensionPoint
---
--- `GIOExtensionPoint` is an opaque data structure and can only be accessed
--- using the following functions.
---
--- ---
---
---@class Gio.IOExtensionPoint
Gio.IOExtensionPoint = {}

--- # method Gio.IOExtensionPoint:get_extension_by_name()
---
--- Finds a `GIOExtension` for an extension point by name.
---
--- ---
---
---@param self Gio.IOExtensionPoint # a `GIOExtensionPoint`
---@param name string # the name of the extension to get
---@return Gio.IOExtension # the `GIOExtension` for `extension_point` that has the given name, or `nil` if there is no extension with that name
function Gio.IOExtensionPoint:get_extension_by_name(name) end

--- # method Gio.IOExtensionPoint:get_extensions()
---
--- Gets a list of all extensions that implement this extension point.
--- The list is sorted by priority, beginning with the highest priority.
---
--- ---
---
---@param self Gio.IOExtensionPoint # a `GIOExtensionPoint`
---@return Gio.IOExtension[] # a `GList` of `GIOExtensions`. The list is owned by GIO and should not be modified.
function Gio.IOExtensionPoint:get_extensions() end

--- # method Gio.IOExtensionPoint:get_required_type()
---
--- Gets the required type for `extension_point`.
---
--- ---
---
---@param self Gio.IOExtensionPoint # a `GIOExtensionPoint`
---@return Gio.GType # the `GType` that all implementations must have, or %G_TYPE_INVALID if the extension point has no required type
function Gio.IOExtensionPoint:get_required_type() end

--- # method Gio.IOExtensionPoint:set_required_type()
---
--- Sets the required type for `extension_point` to `type`.
--- All implementations must henceforth have this type.
---
--- ---
---
---@param self Gio.IOExtensionPoint # a `GIOExtensionPoint`
---@param type Gio.GType # the `GType` to require
---@return nil
function Gio.IOExtensionPoint:set_required_type(type) end

--- # function Gio.IOExtensionPoint.implement()
---
--- Registers `type` as extension for the extension point with name
--- `extension_point_name`.
--- 
--- If `type` has already been registered as an extension for this
--- extension point, the existing `GIOExtension` object is returned.
---
--- ---
---
---@param extension_point_name string # the name of the extension point
---@param type Gio.GType # the `GType` to register as extension
---@param extension_name string # the name for the extension
---@param priority integer # the priority for the extension
---@return Gio.IOExtension # a `GIOExtension` object for `GType`
function Gio.IOExtensionPoint.implement(extension_point_name, type, extension_name, priority) end

--- # function Gio.IOExtensionPoint.lookup()
---
--- Looks up an existing extension point.
---
--- ---
---
---@param name string # the name of the extension point
---@return Gio.IOExtensionPoint # the `GIOExtensionPoint`, or `nil` if there is no registered extension point with the given name.
function Gio.IOExtensionPoint.lookup(name) end

--- # function Gio.IOExtensionPoint.register()
---
--- Registers an extension point.
---
--- ---
---
---@param name string # The name of the extension point
---@return Gio.IOExtensionPoint # the new `GIOExtensionPoint`. This object is owned by GIO and should not be freed.
function Gio.IOExtensionPoint.register(name) end

--- # class Gio.IOModule
---
--- Provides an interface and default functions for loading and unloading
--- modules. This is used internally to make GIO extensible, but can also
--- be used by others to implement module loading.
---
--- ---
---
---@class Gio.IOModule : GObject.TypeModule, Gio.GObject.TypePlugin
---@operator call: Gio.IOModule
Gio.IOModule = {}

--- # function Gio.IOModule.query()
---
--- Optional API for GIO modules to implement.
--- 
--- Should return a list of all the extension points that may be
--- implemented in this module.
--- 
--- This method will not be called in normal use, however it may be
--- called when probing existing modules and recording which extension
--- points that this model is used for. This means we won't have to
--- load and initialize this module unless its needed.
--- 
--- If this function is not implemented by the module the module will
--- always be loaded, initialized and then unloaded on application
--- startup so that it can register its extension points during init.
--- 
--- Note that a module need not actually implement all the extension
--- points that `g_io_module_query()` returns, since the exact list of
--- extension may depend on runtime issues. However all extension
--- points actually implemented must be returned by `g_io_module_query()`
--- (if defined).
--- 
--- When installing a module that implements `g_io_module_query()` you must
--- run gio-querymodules in order to build the cache files required for
--- lazy loading.
--- 
--- Since 2.56, this function should be named `g_io_<modulename>_query`, where
--- `modulename` is the plugin’s filename with the `lib` or `libgio` prefix and
--- everything after the first dot removed, and with `-` replaced with `_`
--- throughout. For example, `libgiognutls-helper.so` becomes `gnutls_helper`.
--- Using the new symbol names avoids name clashes when building modules
--- statically. The old symbol names continue to be supported, but cannot be used
--- for static builds.
---
--- ---
---
---@return unknown[] # A `nil`-terminated array of strings, listing the supported extension points of the module. The array must be suitable for freeing with `g_strfreev()`.
function Gio.IOModule.query() end

--- # function Gio.IOModule.new()
---
--- Creates a new GIOModule that will load the specific
--- shared library when in use.
---
--- ---
---
---@param filename string # filename of the shared library module.
---@return Gio.IOModule # a `GIOModule` from given `filename`, or `nil` on error.
function Gio.IOModule.new(filename) end

--- # record Gio.IOModuleClass
---
---@class Gio.IOModuleClass
Gio.IOModuleClass = {}

--- # record Gio.IOModuleScope
---
--- Represents a scope for loading IO modules. A scope can be used for blocking
--- duplicate modules, or blocking a module you don't want to load.
--- 
--- The scope can be used with `g_io_modules_load_all_in_directory_with_scope()`
--- or `g_io_modules_scan_all_in_directory_with_scope()`.
---
--- ---
---
---@class Gio.IOModuleScope
Gio.IOModuleScope = {}

--- # method Gio.IOModuleScope:block()
---
--- Block modules with the given `basename` from being loaded when
--- this scope is used with `g_io_modules_scan_all_in_directory_with_scope()`
--- or `g_io_modules_load_all_in_directory_with_scope()`.
---
--- ---
---
---@param self Gio.IOModuleScope # a module loading scope
---@param basename string # the basename to block
---@return nil
function Gio.IOModuleScope:block(basename) end

--- # method Gio.IOModuleScope:free()
---
--- Free a module scope.
---
--- ---
---
---@param self Gio.IOModuleScope # a module loading scope
---@return nil
function Gio.IOModuleScope:free() end

---@enum Gio.IOModuleScopeFlags
Gio.IOModuleScopeFlags = {}

--- # record Gio.IOSchedulerJob
---
--- Opaque class for defining and scheduling IO jobs.
---
--- ---
---
---@class Gio.IOSchedulerJob
Gio.IOSchedulerJob = {}

--- # method Gio.IOSchedulerJob:send_to_mainloop()
---
--- Used from an I/O job to send a callback to be run in the thread
--- that the job was started from, waiting for the result (and thus
--- blocking the I/O job).
---
--- ---
---
---@param self Gio.IOSchedulerJob # a `GIOSchedulerJob`
---@param func GLib.SourceFunc # a `GSourceFunc` callback that will be called in the original thread
---@param user_data? userdata # data to pass to `func`
---@param notify? GLib.DestroyNotify # a `GDestroyNotify` for `user_data`, or `nil`
---@return (boolean|nil) # The return value of `func`
function Gio.IOSchedulerJob:send_to_mainloop(func, user_data, notify) end

--- # method Gio.IOSchedulerJob:send_to_mainloop_async()
---
--- Used from an I/O job to send a callback to be run asynchronously in
--- the thread that the job was started from. The callback will be run
--- when the main loop is available, but at that time the I/O job might
--- have finished. The return value from the callback is ignored.
--- 
--- Note that if you are passing the `user_data` from `g_io_scheduler_push_job()`
--- on to this function you have to ensure that it is not freed before
--- `func` is called, either by passing `nil` as `notify` to
--- `g_io_scheduler_push_job()` or by using refcounting for `user_data`.
---
--- ---
---
---@param self Gio.IOSchedulerJob # a `GIOSchedulerJob`
---@param func GLib.SourceFunc # a `GSourceFunc` callback that will be called in the original thread
---@param user_data? userdata # data to pass to `func`
---@param notify? GLib.DestroyNotify # a `GDestroyNotify` for `user_data`, or `nil`
---@return nil
function Gio.IOSchedulerJob:send_to_mainloop_async(func, user_data, notify) end

---@alias Gio.IOSchedulerJobFunc fun(job: Gio.IOSchedulerJob, cancellable: Gio.Cancellable, data: userdata): (boolean|nil)

--- # class Gio.IOStream
---
--- GIOStream represents an object that has both read and write streams.
--- Generally the two streams act as separate input and output streams,
--- but they share some common resources and state. For instance, for
--- seekable streams, both streams may use the same position.
--- 
--- Examples of `GIOStream` objects are `GSocketConnection`, which represents
--- a two-way network connection; and `GFileIOStream`, which represents a
--- file handle opened in read-write mode.
--- 
--- To do the actual reading and writing you need to get the substreams
--- with `g_io_stream_get_input_stream()` and `g_io_stream_get_output_stream()`.
--- 
--- The `GIOStream` object owns the input and the output streams, not the other
--- way around, so keeping the substreams alive will not keep the `GIOStream`
--- object alive. If the `GIOStream` object is freed it will be closed, thus
--- closing the substreams, so even if the substreams stay alive they will
--- always return %G_IO_ERROR_CLOSED for all operations.
--- 
--- To close a stream use `g_io_stream_close()` which will close the common
--- stream object and also the individual substreams. You can also close
--- the substreams themselves. In most cases this only marks the
--- substream as closed, so further I/O on it fails but common state in the
--- `GIOStream` may still be open. However, some streams may support
--- "half-closed" states where one direction of the stream is actually shut down.
--- 
--- Operations on `GIOStreams` cannot be started while another operation on the
--- `GIOStream` or its substreams is in progress. Specifically, an application can
--- read from the `GInputStream` and write to the `GOutputStream` simultaneously
--- (either in separate threads, or as asynchronous operations in the same
--- thread), but an application cannot start any `GIOStream` operation while there
--- is a `GIOStream`, `GInputStream` or `GOutputStream` operation in progress, and
--- an application can’t start any `GInputStream` or `GOutputStream` operation
--- while there is a `GIOStream` operation in progress.
--- 
--- This is a product of individual stream operations being associated with a
--- given `GMainContext` (the thread-default context at the time the operation was
--- started), rather than entire streams being associated with a single
--- `GMainContext`.
--- 
--- GIO may run operations on `GIOStreams` from other (worker) threads, and this
--- may be exposed to application code in the behaviour of wrapper streams, such
--- as `GBufferedInputStream` or `GTlsConnection`. With such wrapper APIs,
--- application code may only run operations on the base (wrapped) stream when
--- the wrapper stream is idle. Note that the semantics of such operations may
--- not be well-defined due to the state the wrapper stream leaves the base
--- stream in (though they are guaranteed not to crash).
---
--- ---
---
---@class Gio.IOStream : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.IOStreamPrivate
Gio.IOStream = {}

--- # method Gio.IOStream:clear_pending()
---
--- Clears the pending flag on `stream`.
---
--- ---
---
---@param self Gio.IOStream # a `GIOStream`
---@return nil
function Gio.IOStream:clear_pending() end

--- # method Gio.IOStream:close()
---
--- Closes the stream, releasing resources related to it. This will also
--- close the individual input and output streams, if they are not already
--- closed.
--- 
--- Once the stream is closed, all other operations will return
--- %G_IO_ERROR_CLOSED. Closing a stream multiple times will not
--- return an error.
--- 
--- Closing a stream will automatically flush any outstanding buffers
--- in the stream.
--- 
--- Streams will be automatically closed when the last reference
--- is dropped, but you might want to call this function to make sure
--- resources are released as early as possible.
--- 
--- Some streams might keep the backing store of the stream (e.g. a file
--- descriptor) open after the stream is closed. See the documentation for
--- the individual stream for details.
--- 
--- On failure the first error that happened will be reported, but the
--- close operation will finish as much as possible. A stream that failed
--- to close will still return %G_IO_ERROR_CLOSED for all operations.
--- Still, it is important to check and report the error to the user,
--- otherwise there might be a loss of data as all data might not be written.
--- 
--- If `cancellable` is not NULL, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
--- Cancelling a close will still leave the stream closed, but some streams
--- can use a faster close that doesn't block to e.g. check errors.
--- 
--- The default implementation of this method just calls close on the
--- individual input/output streams.
---
--- ---
---
---@param self Gio.IOStream # a `GIOStream`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return (boolean|nil) # `true` on success, `false` on failure
function Gio.IOStream:close(cancellable) end

--- # method Gio.IOStream:close_async()
---
--- Requests an asynchronous close of the stream, releasing resources
--- related to it. When the operation is finished `callback` will be
--- called. You can then call `g_io_stream_close_finish()` to get
--- the result of the operation.
--- 
--- For behaviour details see `g_io_stream_close()`.
--- 
--- The asynchronous methods have a default fallback that uses threads
--- to implement asynchronicity, so they are optional for inheriting
--- classes. However, if you override one you must override all.
---
--- ---
---
---@param self Gio.IOStream # a `GIOStream`
---@param io_priority integer # the io priority of the request
---@param cancellable? Gio.Cancellable # optional cancellable object
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.IOStream:close_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.IOStream:close_finish()
---
--- Closes a stream.
---
--- ---
---
---@param self Gio.IOStream # a `GIOStream`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` if stream was successfully closed, `false` otherwise.
function Gio.IOStream:close_finish(result) end

--- # method Gio.IOStream:get_input_stream()
---
--- Gets the input stream for this object. This is used
--- for reading.
---
--- ---
---
---@param self Gio.IOStream # a `GIOStream`
---@return Gio.InputStream # a `GInputStream`, owned by the `GIOStream`. Do not free.
function Gio.IOStream:get_input_stream() end

--- # method Gio.IOStream:get_output_stream()
---
--- Gets the output stream for this object. This is used for
--- writing.
---
--- ---
---
---@param self Gio.IOStream # a `GIOStream`
---@return Gio.OutputStream # a `GOutputStream`, owned by the `GIOStream`. Do not free.
function Gio.IOStream:get_output_stream() end

--- # method Gio.IOStream:has_pending()
---
--- Checks if a stream has pending actions.
---
--- ---
---
---@param self Gio.IOStream # a `GIOStream`
---@return (boolean|nil) # `true` if `stream` has pending actions.
function Gio.IOStream:has_pending() end

--- # method Gio.IOStream:is_closed()
---
--- Checks if a stream is closed.
---
--- ---
---
---@param self Gio.IOStream # a `GIOStream`
---@return (boolean|nil) # `true` if the stream is closed.
function Gio.IOStream:is_closed() end

--- # method Gio.IOStream:set_pending()
---
--- Sets `stream` to have actions pending. If the pending flag is
--- already set or `stream` is closed, it will return `false` and set
--- `error`.
---
--- ---
---
---@param self Gio.IOStream # a `GIOStream`
---@return (boolean|nil) # `true` if pending was previously unset and is now set.
function Gio.IOStream:set_pending() end

--- # method Gio.IOStream:splice_async()
---
--- Asynchronously splice the output stream of `stream1` to the input stream of
--- `stream2`, and splice the output stream of `stream2` to the input stream of
--- `stream1`.
--- 
--- When the operation is finished `callback` will be called.
--- You can then call `g_io_stream_splice_finish()` to get the
--- result of the operation.
---
--- ---
---
---@param self Gio.IOStream # a `GIOStream`.
---@param stream2 Gio.IOStream # a `GIOStream`.
---@param flags Gio.IOStreamSpliceFlags # a set of `GIOStreamSpliceFlags`.
---@param io_priority integer # the io priority of the request.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`.
---@param user_data? userdata # user data passed to `callback`.
---@return nil
function Gio.IOStream:splice_async(stream2, flags, io_priority, cancellable, callback, user_data) end

--- # function Gio.IOStream.splice_finish()
---
--- Finishes an asynchronous io stream splice operation.
---
--- ---
---
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` on success, `false` otherwise.
function Gio.IOStream.splice_finish(result) end

--- # record Gio.IOStreamAdapter
---
---@class Gio.IOStreamAdapter
Gio.IOStreamAdapter = {}

--- # record Gio.IOStreamClass
---
---@class Gio.IOStreamClass
---@field parent_class GObject.ObjectClass
---@field get_input_stream fun(stream: Gio.IOStream): Gio.InputStream
---@field get_output_stream fun(stream: Gio.IOStream): Gio.OutputStream
---@field close_fn fun(stream: Gio.IOStream, cancellable: Gio.Cancellable): (boolean|nil)
---@field close_async fun(stream: Gio.IOStream, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field close_finish fun(stream: Gio.IOStream, result: Gio.AsyncResult): (boolean|nil)
Gio.IOStreamClass = {}

--- # record Gio.IOStreamPrivate
---
---@class Gio.IOStreamPrivate
Gio.IOStreamPrivate = {}

---@enum Gio.IOStreamSpliceFlags
Gio.IOStreamSpliceFlags = {}

--- # interface Gio.Icon
---
--- `GIcon` is a very minimal interface for icons. It provides functions
--- for checking the equality of two icons, hashing of icons and
--- serializing an icon to and from strings.
--- 
--- `GIcon` does not provide the actual pixmap for the icon as this is out
--- of GIO's scope, however implementations of `GIcon` may contain the name
--- of an icon (see `GThemedIcon`), or the path to an icon (see `GLoadableIcon`).
--- 
--- To obtain a hash of a `GIcon`, see `g_icon_hash()`.
--- 
--- To check if two `GIcons` are equal, see `g_icon_equal()`.
--- 
--- For serializing a `GIcon`, use `g_icon_serialize()` and
--- `g_icon_deserialize()`.
--- 
--- If you want to consume `GIcon` (for example, in a toolkit) you must
--- be prepared to handle at least the three following cases:
--- `GLoadableIcon`, `GThemedIcon` and `GEmblemedIcon`.  It may also make
--- sense to have fast-paths for other cases (like handling `GdkPixbuf`
--- directly, for example) but all compliant `GIcon` implementations
--- outside of GIO must implement `GLoadableIcon`.
--- 
--- If your application or library provides one or more `GIcon`
--- implementations you need to ensure that your new implementation also
--- implements `GLoadableIcon`.  Additionally, you must provide an
--- implementation of `g_icon_serialize()` that gives a result that is
--- understood by `g_icon_deserialize()`, yielding one of the built-in icon
--- types.
---
--- ---
---
---@class Gio.Icon
Gio.Icon = {}

--- # method Gio.Icon:equal()
---
--- Checks if two icons are equal.
---
--- ---
---
---@param self? Gio.Icon # pointer to the first `GIcon`.
---@param icon2? Gio.Icon # pointer to the second `GIcon`.
---@return (boolean|nil) # `true` if `icon1` is equal to `icon2`. `false` otherwise.
function Gio.Icon:equal(icon2) end

--- # method Gio.Icon:hash()
---
--- Gets a hash for an icon.
---
--- ---
---
---@param self Gio.Icon # `gconstpointer` to an icon object.
---@return integer # a `guint` containing a hash for the `icon`, suitable for use in a `GHashTable` or similar data structure.
function Gio.Icon:hash() end

--- # method Gio.Icon:serialize()
---
--- Serializes a `GIcon` into a `GVariant`. An equivalent `GIcon` can be retrieved
--- back by calling `g_icon_deserialize()` on the returned value.
--- As serialization will avoid using raw icon data when possible, it only
--- makes sense to transfer the `GVariant` between processes on the same machine,
--- (as opposed to over the network), and within the same file system namespace.
---
--- ---
---
---@param self Gio.Icon # a `GIcon`
---@return GLib.Variant # a `GVariant`, or `nil` when serialization fails. The `GVariant` will not be floating.
function Gio.Icon:serialize() end

--- # method Gio.Icon:to_string()
---
--- Generates a textual representation of `icon` that can be used for
--- serialization such as when passing `icon` to a different process or
--- saving it to persistent storage. Use `g_icon_new_for_string()` to
--- get `icon` back from the returned string.
--- 
--- The encoding of the returned string is proprietary to `GIcon` except
--- in the following two cases
--- 
--- - If `icon` is a `GFileIcon`, the returned string is a native path
---   (such as `/path/to/my icon.png`) without escaping
---   if the `GFile` for `icon` is a native file.  If the file is not
---   native, the returned string is the result of `g_file_get_uri()`
---   (such as `sftp://path/to/my%20icon.png`).
--- 
--- - If `icon` is a `GThemedIcon` with exactly one name and no fallbacks,
---   the encoding is simply the name (such as `network-server`).
---
--- ---
---
---@param self Gio.Icon # a `GIcon`.
---@return string # An allocated NUL-terminated UTF8 string or `nil` if `icon` can't be serialized. Use `g_free()` to free.
function Gio.Icon:to_string() end

--- # function Gio.Icon.deserialize()
---
--- Deserializes a `GIcon` previously serialized using `g_icon_serialize()`.
---
--- ---
---
---@param value GLib.Variant # a `GVariant` created with `g_icon_serialize()`
---@return Gio.Icon # a `GIcon`, or `nil` when deserialization fails.
function Gio.Icon.deserialize(value) end

--- # function Gio.Icon.new_for_string()
---
--- Generate a `GIcon` instance from `str`. This function can fail if
--- `str` is not valid - see `g_icon_to_string()` for discussion.
--- 
--- If your application or library provides one or more `GIcon`
--- implementations you need to ensure that each `GType` is registered
--- with the type system prior to calling `g_icon_new_for_string()`.
---
--- ---
---
---@param str string # A string obtained via `g_icon_to_string()`.
---@return Gio.Icon # An object implementing the `GIcon` interface or `nil` if `error` is set.
function Gio.Icon.new_for_string(str) end

--- # record Gio.IconIface
---
--- GIconIface is used to implement GIcon types for various
--- different systems. See `GThemedIcon` and `GLoadableIcon` for
--- examples of how to implement this interface.
---
--- ---
---
---@class Gio.IconIface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field hash fun(icon: Gio.Icon): integer
---@field equal fun(icon1: Gio.Icon, icon2: Gio.Icon): (boolean|nil)
---@field to_tokens fun(icon: Gio.Icon, tokens: unknown[], out_version: integer): (boolean|nil)
---@field serialize fun(icon: Gio.Icon): GLib.Variant
Gio.IconIface = {}

--- # class Gio.InetAddress
---
--- `GInetAddress` represents an IPv4 or IPv6 internet address. Use
--- `g_resolver_lookup_by_name()` or `g_resolver_lookup_by_name_async()` to
--- look up the `GInetAddress` for a hostname. Use
--- `g_resolver_lookup_by_address()` or
--- `g_resolver_lookup_by_address_async()` to look up the hostname for a
--- `GInetAddress`.
--- 
--- To actually connect to a remote host, you will need a
--- `GInetSocketAddress` (which includes a `GInetAddress` as well as a
--- port number).
---
--- ---
---
---@class Gio.InetAddress : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.InetAddressPrivate
Gio.InetAddress = {}

--- # method Gio.InetAddress:equal()
---
--- Checks if two `GInetAddress` instances are equal, e.g. the same address.
---
--- ---
---
---@param self Gio.InetAddress # A `GInetAddress`.
---@param other_address Gio.InetAddress # Another `GInetAddress`.
---@return (boolean|nil) # `true` if `address` and `other_address` are equal, `false` otherwise.
function Gio.InetAddress:equal(other_address) end

--- # method Gio.InetAddress:get_family()
---
--- Gets `address`'s family
---
--- ---
---
---@param self Gio.InetAddress # a `GInetAddress`
---@return Gio.SocketFamily # `address`'s family
function Gio.InetAddress:get_family() end

--- # method Gio.InetAddress:get_is_any()
---
--- Tests whether `address` is the "any" address for its family.
---
--- ---
---
---@param self Gio.InetAddress # a `GInetAddress`
---@return (boolean|nil) # `true` if `address` is the "any" address for its family.
function Gio.InetAddress:get_is_any() end

--- # method Gio.InetAddress:get_is_link_local()
---
--- Tests whether `address` is a link-local address (that is, if it
--- identifies a host on a local network that is not connected to the
--- Internet).
---
--- ---
---
---@param self Gio.InetAddress # a `GInetAddress`
---@return (boolean|nil) # `true` if `address` is a link-local address.
function Gio.InetAddress:get_is_link_local() end

--- # method Gio.InetAddress:get_is_loopback()
---
--- Tests whether `address` is the loopback address for its family.
---
--- ---
---
---@param self Gio.InetAddress # a `GInetAddress`
---@return (boolean|nil) # `true` if `address` is the loopback address for its family.
function Gio.InetAddress:get_is_loopback() end

--- # method Gio.InetAddress:get_is_mc_global()
---
--- Tests whether `address` is a global multicast address.
---
--- ---
---
---@param self Gio.InetAddress # a `GInetAddress`
---@return (boolean|nil) # `true` if `address` is a global multicast address.
function Gio.InetAddress:get_is_mc_global() end

--- # method Gio.InetAddress:get_is_mc_link_local()
---
--- Tests whether `address` is a link-local multicast address.
---
--- ---
---
---@param self Gio.InetAddress # a `GInetAddress`
---@return (boolean|nil) # `true` if `address` is a link-local multicast address.
function Gio.InetAddress:get_is_mc_link_local() end

--- # method Gio.InetAddress:get_is_mc_node_local()
---
--- Tests whether `address` is a node-local multicast address.
---
--- ---
---
---@param self Gio.InetAddress # a `GInetAddress`
---@return (boolean|nil) # `true` if `address` is a node-local multicast address.
function Gio.InetAddress:get_is_mc_node_local() end

--- # method Gio.InetAddress:get_is_mc_org_local()
---
--- Tests whether `address` is an organization-local multicast address.
---
--- ---
---
---@param self Gio.InetAddress # a `GInetAddress`
---@return (boolean|nil) # `true` if `address` is an organization-local multicast address.
function Gio.InetAddress:get_is_mc_org_local() end

--- # method Gio.InetAddress:get_is_mc_site_local()
---
--- Tests whether `address` is a site-local multicast address.
---
--- ---
---
---@param self Gio.InetAddress # a `GInetAddress`
---@return (boolean|nil) # `true` if `address` is a site-local multicast address.
function Gio.InetAddress:get_is_mc_site_local() end

--- # method Gio.InetAddress:get_is_multicast()
---
--- Tests whether `address` is a multicast address.
---
--- ---
---
---@param self Gio.InetAddress # a `GInetAddress`
---@return (boolean|nil) # `true` if `address` is a multicast address.
function Gio.InetAddress:get_is_multicast() end

--- # method Gio.InetAddress:get_is_site_local()
---
--- Tests whether `address` is a site-local address such as 10.0.0.1
--- (that is, the address identifies a host on a local network that can
--- not be reached directly from the Internet, but which may have
--- outgoing Internet connectivity via a NAT or firewall).
---
--- ---
---
---@param self Gio.InetAddress # a `GInetAddress`
---@return (boolean|nil) # `true` if `address` is a site-local address.
function Gio.InetAddress:get_is_site_local() end

--- # method Gio.InetAddress:get_native_size()
---
--- Gets the size of the native raw binary address for `address`. This
--- is the size of the data that you get from `g_inet_address_to_bytes()`.
---
--- ---
---
---@param self Gio.InetAddress # a `GInetAddress`
---@return integer # the number of bytes used for the native version of `address`.
function Gio.InetAddress:get_native_size() end

--- # method Gio.InetAddress:to_string()
---
--- Converts `address` to string form.
---
--- ---
---
---@param self Gio.InetAddress # a `GInetAddress`
---@return string # a representation of `address` as a string, which should be freed after use.
function Gio.InetAddress:to_string() end

--- # function Gio.InetAddress.new_any()
---
--- Creates a `GInetAddress` for the "any" address (unassigned/"don't
--- care") for `family`.
---
--- ---
---
---@param family Gio.SocketFamily # the address family
---@return Gio.InetAddress # a new `GInetAddress` corresponding to the "any" address for `family`. Free the returned object with `g_object_unref()`.
function Gio.InetAddress.new_any(family) end

--- # function Gio.InetAddress.new_from_bytes()
---
--- Creates a new `GInetAddress` from the given `family` and `bytes`.
--- `bytes` should be 4 bytes for %G_SOCKET_FAMILY_IPV4 and 16 bytes for
--- %G_SOCKET_FAMILY_IPV6.
---
--- ---
---
---@param bytes unknown[] # raw address data
---@param family Gio.SocketFamily # the address family of `bytes`
---@return Gio.InetAddress # a new `GInetAddress` corresponding to `family` and `bytes`. Free the returned object with `g_object_unref()`.
function Gio.InetAddress.new_from_bytes(bytes, family) end

--- # function Gio.InetAddress.new_from_string()
---
--- Parses `string` as an IP address and creates a new `GInetAddress`.
---
--- ---
---
---@param string string # a string representation of an IP address
---@return Gio.InetAddress # a new `GInetAddress` corresponding to `string`, or `nil` if `string` could not be parsed. Free the returned object with `g_object_unref()`.
function Gio.InetAddress.new_from_string(string) end

--- # function Gio.InetAddress.new_loopback()
---
--- Creates a `GInetAddress` for the loopback address for `family`.
---
--- ---
---
---@param family Gio.SocketFamily # the address family
---@return Gio.InetAddress # a new `GInetAddress` corresponding to the loopback address for `family`. Free the returned object with `g_object_unref()`.
function Gio.InetAddress.new_loopback(family) end

--- # record Gio.InetAddressClass
---
---@class Gio.InetAddressClass
---@field parent_class GObject.ObjectClass
---@field to_string fun(address: Gio.InetAddress): string
---@field to_bytes fun(address: Gio.InetAddress): integer
Gio.InetAddressClass = {}

--- # class Gio.InetAddressMask
---
--- `GInetAddressMask` represents a range of IPv4 or IPv6 addresses
--- described by a base address and a length indicating how many bits
--- of the base address are relevant for matching purposes. These are
--- often given in string form. Eg, "10.0.0.0/8", or "fe80::/10".
---
--- ---
---
---@class Gio.InetAddressMask : GObject.Object, Gio.Initable
---@field parent_instance GObject.Object
---@field priv Gio.InetAddressMaskPrivate
---@operator call: Gio.InetAddressMask
Gio.InetAddressMask = {}

--- # method Gio.InetAddressMask:equal()
---
--- Tests if `mask` and `mask2` are the same mask.
---
--- ---
---
---@param self Gio.InetAddressMask # a `GInetAddressMask`
---@param mask2 Gio.InetAddressMask # another `GInetAddressMask`
---@return (boolean|nil) # whether `mask` and `mask2` are the same mask
function Gio.InetAddressMask:equal(mask2) end

--- # method Gio.InetAddressMask:get_address()
---
--- Gets `mask`'s base address
---
--- ---
---
---@param self Gio.InetAddressMask # a `GInetAddressMask`
---@return Gio.InetAddress # `mask`'s base address
function Gio.InetAddressMask:get_address() end

--- # method Gio.InetAddressMask:get_family()
---
--- Gets the `GSocketFamily` of `mask`'s address
---
--- ---
---
---@param self Gio.InetAddressMask # a `GInetAddressMask`
---@return Gio.SocketFamily # the `GSocketFamily` of `mask`'s address
function Gio.InetAddressMask:get_family() end

--- # method Gio.InetAddressMask:get_length()
---
--- Gets `mask`'s length
---
--- ---
---
---@param self Gio.InetAddressMask # a `GInetAddressMask`
---@return integer # `mask`'s length
function Gio.InetAddressMask:get_length() end

--- # method Gio.InetAddressMask:matches()
---
--- Tests if `address` falls within the range described by `mask`.
---
--- ---
---
---@param self Gio.InetAddressMask # a `GInetAddressMask`
---@param address Gio.InetAddress # a `GInetAddress`
---@return (boolean|nil) # whether `address` falls within the range described by `mask`.
function Gio.InetAddressMask:matches(address) end

--- # method Gio.InetAddressMask:to_string()
---
--- Converts `mask` back to its corresponding string form.
---
--- ---
---
---@param self Gio.InetAddressMask # a `GInetAddressMask`
---@return string # a string corresponding to `mask`.
function Gio.InetAddressMask:to_string() end

--- # function Gio.InetAddressMask.new()
---
--- Creates a new `GInetAddressMask` representing all addresses whose
--- first `length` bits match `addr`.
---
--- ---
---
---@param addr Gio.InetAddress # a `GInetAddress`
---@param length integer # number of bits of `addr` to use
---@return Gio.InetAddressMask # a new `GInetAddressMask`, or `nil` on error
function Gio.InetAddressMask.new(addr, length) end

--- # function Gio.InetAddressMask.new_from_string()
---
--- Parses `mask_string` as an IP address and (optional) length, and
--- creates a new `GInetAddressMask`. The length, if present, is
--- delimited by a "/". If it is not present, then the length is
--- assumed to be the full length of the address.
---
--- ---
---
---@param mask_string string # an IP address or address/length string
---@return Gio.InetAddressMask # a new `GInetAddressMask` corresponding to `string`, or `nil` on error.
function Gio.InetAddressMask.new_from_string(mask_string) end

--- # record Gio.InetAddressMaskClass
---
---@class Gio.InetAddressMaskClass
---@field parent_class GObject.ObjectClass
Gio.InetAddressMaskClass = {}

--- # record Gio.InetAddressMaskPrivate
---
---@class Gio.InetAddressMaskPrivate
Gio.InetAddressMaskPrivate = {}

--- # record Gio.InetAddressPrivate
---
---@class Gio.InetAddressPrivate
Gio.InetAddressPrivate = {}

--- # class Gio.InetSocketAddress
---
--- An IPv4 or IPv6 socket address; that is, the combination of a
--- `GInetAddress` and a port number.
---
--- ---
---
---@class Gio.InetSocketAddress : Gio.SocketAddress, Gio.SocketConnectable
---@field parent_instance Gio.SocketAddress
---@field priv Gio.InetSocketAddressPrivate
---@operator call: Gio.InetSocketAddress
Gio.InetSocketAddress = {}

--- # method Gio.InetSocketAddress:get_address()
---
--- Gets `address`'s `GInetAddress`.
---
--- ---
---
---@param self Gio.InetSocketAddress # a `GInetSocketAddress`
---@return Gio.InetAddress # the `GInetAddress` for `address`, which must be `g_object_ref()`'d if it will be stored
function Gio.InetSocketAddress:get_address() end

--- # method Gio.InetSocketAddress:get_flowinfo()
---
--- Gets the `sin6_flowinfo` field from `address`,
--- which must be an IPv6 address.
---
--- ---
---
---@param self Gio.InetSocketAddress # a %G_SOCKET_FAMILY_IPV6 `GInetSocketAddress`
---@return integer # the flowinfo field
function Gio.InetSocketAddress:get_flowinfo() end

--- # method Gio.InetSocketAddress:get_port()
---
--- Gets `address`'s port.
---
--- ---
---
---@param self Gio.InetSocketAddress # a `GInetSocketAddress`
---@return integer # the port for `address`
function Gio.InetSocketAddress:get_port() end

--- # method Gio.InetSocketAddress:get_scope_id()
---
--- Gets the `sin6_scope_id` field from `address`,
--- which must be an IPv6 address.
---
--- ---
---
---@param self Gio.InetSocketAddress # a %G_SOCKET_FAMILY_IPV6 `GInetAddress`
---@return integer # the scope id field
function Gio.InetSocketAddress:get_scope_id() end

--- # function Gio.InetSocketAddress.new()
---
--- Creates a new `GInetSocketAddress` for `address` and `port`.
---
--- ---
---
---@param address Gio.InetAddress # a `GInetAddress`
---@param port integer # a port number
---@return Gio.SocketAddress # a new `GInetSocketAddress`
function Gio.InetSocketAddress.new(address, port) end

--- # function Gio.InetSocketAddress.new_from_string()
---
--- Creates a new `GInetSocketAddress` for `address` and `port`.
--- 
--- If `address` is an IPv6 address, it can also contain a scope ID
--- (separated from the address by a `%`).
---
--- ---
---
---@param address string # the string form of an IP address
---@param port integer # a port number
---@return Gio.SocketAddress # a new `GInetSocketAddress`, or `nil` if `address` cannot be parsed.
function Gio.InetSocketAddress.new_from_string(address, port) end

--- # record Gio.InetSocketAddressClass
---
---@class Gio.InetSocketAddressClass
---@field parent_class Gio.SocketAddressClass
Gio.InetSocketAddressClass = {}

--- # record Gio.InetSocketAddressPrivate
---
---@class Gio.InetSocketAddressPrivate
Gio.InetSocketAddressPrivate = {}

--- # interface Gio.Initable
---
--- `GInitable` is implemented by objects that can fail during
--- initialization. If an object implements this interface then
--- it must be initialized as the first thing after construction,
--- either via `g_initable_init()` or `g_async_initable_init_async()`
--- (the latter is only available if it also implements `GAsyncInitable`).
--- 
--- If the object is not initialized, or initialization returns with an
--- error, then all operations on the object except `g_object_ref()` and
--- `g_object_unref()` are considered to be invalid, and have undefined
--- behaviour. They will often fail with `g_critical()` or `g_warning()`, but
--- this must not be relied on.
--- 
--- Users of objects implementing this are not intended to use
--- the interface method directly, instead it will be used automatically
--- in various ways. For C applications you generally just call
--- `g_initable_new()` directly, or indirectly via a `foo_thing_new()` wrapper.
--- This will call `g_initable_init()` under the cover, returning `nil` and
--- setting a `GError` on failure (at which point the instance is
--- unreferenced).
--- 
--- For bindings in languages where the native constructor supports
--- exceptions the binding could check for objects implementing %GInitable
--- during normal construction and automatically initialize them, throwing
--- an exception on failure.
---
--- ---
---
---@class Gio.Initable
Gio.Initable = {}

--- # method Gio.Initable:init()
---
--- Initializes the object implementing the interface.
--- 
--- This method is intended for language bindings. If writing in C,
--- `g_initable_new()` should typically be used instead.
--- 
--- The object must be initialized before any real use after initial
--- construction, either with this function or `g_async_initable_init_async()`.
--- 
--- Implementations may also support cancellation. If `cancellable` is not `nil`,
--- then initialization can be cancelled by triggering the cancellable object
--- from another thread. If the operation was cancelled, the error
--- %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not `nil` and
--- the object doesn't support cancellable initialization the error
--- %G_IO_ERROR_NOT_SUPPORTED will be returned.
--- 
--- If the object is not initialized, or initialization returns with an
--- error, then all operations on the object except `g_object_ref()` and
--- `g_object_unref()` are considered to be invalid, and have undefined
--- behaviour. See the [introduction][ginitable] for more details.
--- 
--- Callers should not assume that a class which implements `GInitable` can be
--- initialized multiple times, unless the class explicitly documents itself as
--- supporting this. Generally, a class’ implementation of `init()` can assume
--- (and assert) that it will only be called once. Previously, this documentation
--- recommended all `GInitable` implementations should be idempotent; that
--- recommendation was relaxed in GLib 2.54.
--- 
--- If a class explicitly supports being initialized multiple times, it is
--- recommended that the method is idempotent: multiple calls with the same
--- arguments should return the same results. Only the first call initializes
--- the object; further calls return the result of the first call.
--- 
--- One reason why a class might need to support idempotent initialization is if
--- it is designed to be used via the singleton pattern, with a
--- `GObjectClass`.constructor that sometimes returns an existing instance.
--- In this pattern, a caller would expect to be able to call `g_initable_init()`
--- on the result of `g_object_new()`, regardless of whether it is in fact a new
--- instance.
---
--- ---
---
---@param self Gio.Initable # a `GInitable`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `true` if successful. If an error has occurred, this function will return `false` and set `error` appropriately if present.
function Gio.Initable:init(cancellable) end

--- # function Gio.Initable.newv()
---
--- Helper function for constructing `GInitable` object. This is
--- similar to `g_object_newv()` but also initializes the object
--- and returns `nil`, setting an error on failure.
---
--- ---
---
---@param object_type Gio.GType # a `GType` supporting `GInitable`.
---@param n_parameters integer # the number of parameters in `parameters`
---@param parameters unknown[] # the parameters to use to construct the object
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return GObject.Object # a newly allocated `GObject`, or `nil` on error
function Gio.Initable.newv(object_type, n_parameters, parameters, cancellable) end

--- # record Gio.InitableIface
---
--- Provides an interface for initializing object such that initialization
--- may fail.
---
--- ---
---
---@class Gio.InitableIface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field init fun(initable: Gio.Initable, cancellable: Gio.Cancellable): (boolean|nil)
Gio.InitableIface = {}

--- # record Gio.InputMessage
---
--- Structure used for scatter/gather data input when receiving multiple
--- messages or packets in one go. You generally pass in an array of empty
--- `GInputVectors` and the operation will use all the buffers as if they
--- were one buffer, and will set `bytes_received` to the total number of bytes
--- received across all `GInputVectors`.
--- 
--- This structure closely mirrors `struct mmsghdr` and `struct msghdr` from
--- the POSIX sockets API (see `man 2 recvmmsg`).
--- 
--- If `address` is non-`nil` then it is set to the source address the message
--- was received from, and the caller must free it afterwards.
--- 
--- If `control_messages` is non-`nil` then it is set to an array of control
--- messages received with the message (if any), and the caller must free it
--- afterwards. `num_control_messages` is set to the number of elements in
--- this array, which may be zero.
--- 
--- Flags relevant to this message will be returned in `flags`. For example,
--- `MSG_EOR` or `MSG_TRUNC`.
---
--- ---
---
---@class Gio.InputMessage
---@field address Gio.SocketAddress # return location for a `GSocketAddress`, or `nil`
---@field vectors unknown[] # pointer to an array of input vectors
---@field num_vectors integer # the number of input vectors pointed to by `vectors`
---@field bytes_received integer # will be set to the number of bytes that have been received
---@field flags integer # collection of `GSocketMsgFlags` for the received message, outputted by the call
---@field control_messages unknown[] # return location for a caller-allocated array of `GSocketControlMessages`, or `nil`
---@field num_control_messages integer # return location for the number of elements in `control_messages`
Gio.InputMessage = {}

--- # class Gio.InputStream
---
--- `GInputStream` has functions to read from a stream (`g_input_stream_read()`),
--- to close a stream (`g_input_stream_close()`) and to skip some content
--- (`g_input_stream_skip()`).
--- 
--- To copy the content of an input stream to an output stream without
--- manually handling the reads and writes, use `g_output_stream_splice()`.
--- 
--- See the documentation for `GIOStream` for details of thread safety of
--- streaming APIs.
--- 
--- All of these functions have async variants too.
---
--- ---
---
---@class Gio.InputStream : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.InputStreamPrivate
Gio.InputStream = {}

--- # method Gio.InputStream:clear_pending()
---
--- Clears the pending flag on `stream`.
---
--- ---
---
---@param self Gio.InputStream # input stream
---@return nil
function Gio.InputStream:clear_pending() end

--- # method Gio.InputStream:close()
---
--- Closes the stream, releasing resources related to it.
--- 
--- Once the stream is closed, all other operations will return %G_IO_ERROR_CLOSED.
--- Closing a stream multiple times will not return an error.
--- 
--- Streams will be automatically closed when the last reference
--- is dropped, but you might want to call this function to make sure
--- resources are released as early as possible.
--- 
--- Some streams might keep the backing store of the stream (e.g. a file descriptor)
--- open after the stream is closed. See the documentation for the individual
--- stream for details.
--- 
--- On failure the first error that happened will be reported, but the close
--- operation will finish as much as possible. A stream that failed to
--- close will still return %G_IO_ERROR_CLOSED for all operations. Still, it
--- is important to check and report the error to the user.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
--- Cancelling a close will still leave the stream closed, but some streams
--- can use a faster close that doesn't block to e.g. check errors.
---
--- ---
---
---@param self Gio.InputStream # A `GInputStream`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `true` on success, `false` on failure
function Gio.InputStream:close(cancellable) end

--- # method Gio.InputStream:close_async()
---
--- Requests an asynchronous closes of the stream, releasing resources related to it.
--- When the operation is finished `callback` will be called.
--- You can then call `g_input_stream_close_finish()` to get the result of the
--- operation.
--- 
--- For behaviour details see `g_input_stream_close()`.
--- 
--- The asynchronous methods have a default fallback that uses threads to implement
--- asynchronicity, so they are optional for inheriting classes. However, if you
--- override one you must override all.
---
--- ---
---
---@param self Gio.InputStream # A `GInputStream`.
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional cancellable object
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.InputStream:close_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.InputStream:close_finish()
---
--- Finishes closing a stream asynchronously, started from `g_input_stream_close_async()`.
---
--- ---
---
---@param self Gio.InputStream # a `GInputStream`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` if the stream was closed successfully.
function Gio.InputStream:close_finish(result) end

--- # method Gio.InputStream:has_pending()
---
--- Checks if an input stream has pending actions.
---
--- ---
---
---@param self Gio.InputStream # input stream.
---@return (boolean|nil) # `true` if `stream` has pending actions.
function Gio.InputStream:has_pending() end

--- # method Gio.InputStream:is_closed()
---
--- Checks if an input stream is closed.
---
--- ---
---
---@param self Gio.InputStream # input stream.
---@return (boolean|nil) # `true` if the stream is closed.
function Gio.InputStream:is_closed() end

--- # method Gio.InputStream:read()
---
--- Tries to read `count` bytes from the stream into the buffer starting at
--- `buffer`. Will block during this read.
--- 
--- If count is zero returns zero and does nothing. A value of `count`
--- larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.
--- 
--- On success, the number of bytes read into the buffer is returned.
--- It is not an error if this is not the same as the requested size, as it
--- can happen e.g. near the end of a file. Zero is returned on end of file
--- (or if `count` is zero),  but never otherwise.
--- 
--- The returned `buffer` is not a nul-terminated string, it can contain nul bytes
--- at any position, and this function doesn't nul-terminate the `buffer`.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
--- operation was partially finished when the operation was cancelled the
--- partial result will be returned, without an error.
--- 
--- On error -1 is returned and `error` is set accordingly.
---
--- ---
---
---@param self Gio.InputStream # a `GInputStream`.
---@param buffer unknown[] # a buffer to read data into (which should be at least count bytes long).
---@param count integer # the number of bytes that will be read from the stream
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return integer # Number of bytes read, or -1 on error, or 0 on end of file.
function Gio.InputStream:read(buffer, count, cancellable) end

--- # method Gio.InputStream:read_all()
---
--- Tries to read `count` bytes from the stream into the buffer starting at
--- `buffer`. Will block during this read.
--- 
--- This function is similar to `g_input_stream_read()`, except it tries to
--- read as many bytes as requested, only stopping on an error or end of stream.
--- 
--- On a successful read of `count` bytes, or if we reached the end of the
--- stream,  `true` is returned, and `bytes_read` is set to the number of bytes
--- read into `buffer`.
--- 
--- If there is an error during the operation `false` is returned and `error`
--- is set to indicate the error status.
--- 
--- As a special exception to the normal conventions for functions that
--- use `GError`, if this function returns `false` (and sets `error`) then
--- `bytes_read` will be set to the number of bytes that were successfully
--- read before the error was encountered.  This functionality is only
--- available from C.  If you need it from another language then you must
--- write your own loop around `g_input_stream_read()`.
---
--- ---
---
---@param self Gio.InputStream # a `GInputStream`.
---@param buffer unknown[] # a buffer to read data into (which should be at least count bytes long).
---@param count integer # the number of bytes that will be read from the stream
---@param bytes_read integer # location to store the number of bytes that was read from the stream
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `true` on success, `false` if there was an error
function Gio.InputStream:read_all(buffer, count, bytes_read, cancellable) end

--- # method Gio.InputStream:read_all_async()
---
--- Request an asynchronous read of `count` bytes from the stream into the
--- buffer starting at `buffer`.
--- 
--- This is the asynchronous equivalent of `g_input_stream_read_all()`.
--- 
--- Call `g_input_stream_read_all_finish()` to collect the result.
--- 
--- Any outstanding I/O request with higher priority (lower numerical
--- value) will be executed before an outstanding request with lower
--- priority. Default priority is %G_PRIORITY_DEFAULT.
---
--- ---
---
---@param self Gio.InputStream # A `GInputStream`
---@param buffer unknown[] # a buffer to read data into (which should be at least count bytes long)
---@param count integer # the number of bytes that will be read from the stream
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.InputStream:read_all_async(buffer, count, io_priority, cancellable, callback, user_data) end

--- # method Gio.InputStream:read_all_finish()
---
--- Finishes an asynchronous stream read operation started with
--- `g_input_stream_read_all_async()`.
--- 
--- As a special exception to the normal conventions for functions that
--- use `GError`, if this function returns `false` (and sets `error`) then
--- `bytes_read` will be set to the number of bytes that were successfully
--- read before the error was encountered.  This functionality is only
--- available from C.  If you need it from another language then you must
--- write your own loop around `g_input_stream_read_async()`.
---
--- ---
---
---@param self Gio.InputStream # a `GInputStream`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@param bytes_read integer # location to store the number of bytes that was read from the stream
---@return (boolean|nil) # `true` on success, `false` if there was an error
function Gio.InputStream:read_all_finish(result, bytes_read) end

--- # method Gio.InputStream:read_async()
---
--- Request an asynchronous read of `count` bytes from the stream into the buffer
--- starting at `buffer`. When the operation is finished `callback` will be called.
--- You can then call `g_input_stream_read_finish()` to get the result of the
--- operation.
--- 
--- During an async request no other sync and async calls are allowed on `stream`, and will
--- result in %G_IO_ERROR_PENDING errors.
--- 
--- A value of `count` larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.
--- 
--- On success, the number of bytes read into the buffer will be passed to the
--- callback. It is not an error if this is not the same as the requested size, as it
--- can happen e.g. near the end of a file, but generally we try to read
--- as many bytes as requested. Zero is returned on end of file
--- (or if `count` is zero),  but never otherwise.
--- 
--- Any outstanding i/o request with higher priority (lower numerical value) will
--- be executed before an outstanding request with lower priority. Default
--- priority is %G_PRIORITY_DEFAULT.
--- 
--- The asynchronous methods have a default fallback that uses threads to implement
--- asynchronicity, so they are optional for inheriting classes. However, if you
--- override one you must override all.
---
--- ---
---
---@param self Gio.InputStream # A `GInputStream`.
---@param buffer unknown[] # a buffer to read data into (which should be at least count bytes long).
---@param count integer # the number of bytes that will be read from the stream
---@param io_priority integer # the [I/O priority][io-priority] of the request.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.InputStream:read_async(buffer, count, io_priority, cancellable, callback, user_data) end

--- # method Gio.InputStream:read_bytes()
---
--- Like `g_input_stream_read()`, this tries to read `count` bytes from
--- the stream in a blocking fashion. However, rather than reading into
--- a user-supplied buffer, this will create a new `GBytes` containing
--- the data that was read. This may be easier to use from language
--- bindings.
--- 
--- If count is zero, returns a zero-length `GBytes` and does nothing. A
--- value of `count` larger than %G_MAXSSIZE will cause a
--- %G_IO_ERROR_INVALID_ARGUMENT error.
--- 
--- On success, a new `GBytes` is returned. It is not an error if the
--- size of this object is not the same as the requested size, as it
--- can happen e.g. near the end of a file. A zero-length `GBytes` is
--- returned on end of file (or if `count` is zero), but never
--- otherwise.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
--- operation was partially finished when the operation was cancelled the
--- partial result will be returned, without an error.
--- 
--- On error `nil` is returned and `error` is set accordingly.
---
--- ---
---
---@param self Gio.InputStream # a `GInputStream`.
---@param count integer # maximum number of bytes that will be read from the stream. Common values include 4096 and 8192.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return GLib.Bytes # a new `GBytes`, or `nil` on error
function Gio.InputStream:read_bytes(count, cancellable) end

--- # method Gio.InputStream:read_bytes_async()
---
--- Request an asynchronous read of `count` bytes from the stream into a
--- new `GBytes`. When the operation is finished `callback` will be
--- called. You can then call `g_input_stream_read_bytes_finish()` to get the
--- result of the operation.
--- 
--- During an async request no other sync and async calls are allowed
--- on `stream`, and will result in %G_IO_ERROR_PENDING errors.
--- 
--- A value of `count` larger than %G_MAXSSIZE will cause a
--- %G_IO_ERROR_INVALID_ARGUMENT error.
--- 
--- On success, the new `GBytes` will be passed to the callback. It is
--- not an error if this is smaller than the requested size, as it can
--- happen e.g. near the end of a file, but generally we try to read as
--- many bytes as requested. Zero is returned on end of file (or if
--- `count` is zero), but never otherwise.
--- 
--- Any outstanding I/O request with higher priority (lower numerical
--- value) will be executed before an outstanding request with lower
--- priority. Default priority is %G_PRIORITY_DEFAULT.
---
--- ---
---
---@param self Gio.InputStream # A `GInputStream`.
---@param count integer # the number of bytes that will be read from the stream
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.InputStream:read_bytes_async(count, io_priority, cancellable, callback, user_data) end

--- # method Gio.InputStream:read_bytes_finish()
---
--- Finishes an asynchronous stream read-into-`GBytes` operation.
---
--- ---
---
---@param self Gio.InputStream # a `GInputStream`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return GLib.Bytes # the newly-allocated `GBytes`, or `nil` on error
function Gio.InputStream:read_bytes_finish(result) end

--- # method Gio.InputStream:read_finish()
---
--- Finishes an asynchronous stream read operation.
---
--- ---
---
---@param self Gio.InputStream # a `GInputStream`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return integer # number of bytes read in, or -1 on error, or 0 on end of file.
function Gio.InputStream:read_finish(result) end

--- # method Gio.InputStream:set_pending()
---
--- Sets `stream` to have actions pending. If the pending flag is
--- already set or `stream` is closed, it will return `false` and set
--- `error`.
---
--- ---
---
---@param self Gio.InputStream # input stream
---@return (boolean|nil) # `true` if pending was previously unset and is now set.
function Gio.InputStream:set_pending() end

--- # method Gio.InputStream:skip()
---
--- Tries to skip `count` bytes from the stream. Will block during the operation.
--- 
--- This is identical to `g_input_stream_read()`, from a behaviour standpoint,
--- but the bytes that are skipped are not returned to the user. Some
--- streams have an implementation that is more efficient than reading the data.
--- 
--- This function is optional for inherited classes, as the default implementation
--- emulates it using read.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
--- operation was partially finished when the operation was cancelled the
--- partial result will be returned, without an error.
---
--- ---
---
---@param self Gio.InputStream # a `GInputStream`.
---@param count integer # the number of bytes that will be skipped from the stream
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return integer # Number of bytes skipped, or -1 on error
function Gio.InputStream:skip(count, cancellable) end

--- # method Gio.InputStream:skip_async()
---
--- Request an asynchronous skip of `count` bytes from the stream.
--- When the operation is finished `callback` will be called.
--- You can then call `g_input_stream_skip_finish()` to get the result
--- of the operation.
--- 
--- During an async request no other sync and async calls are allowed,
--- and will result in %G_IO_ERROR_PENDING errors.
--- 
--- A value of `count` larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.
--- 
--- On success, the number of bytes skipped will be passed to the callback.
--- It is not an error if this is not the same as the requested size, as it
--- can happen e.g. near the end of a file, but generally we try to skip
--- as many bytes as requested. Zero is returned on end of file
--- (or if `count` is zero), but never otherwise.
--- 
--- Any outstanding i/o request with higher priority (lower numerical value)
--- will be executed before an outstanding request with lower priority.
--- Default priority is %G_PRIORITY_DEFAULT.
--- 
--- The asynchronous methods have a default fallback that uses threads to
--- implement asynchronicity, so they are optional for inheriting classes.
--- However, if you override one, you must override all.
---
--- ---
---
---@param self Gio.InputStream # A `GInputStream`.
---@param count integer # the number of bytes that will be skipped from the stream
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.InputStream:skip_async(count, io_priority, cancellable, callback, user_data) end

--- # method Gio.InputStream:skip_finish()
---
--- Finishes a stream skip operation.
---
--- ---
---
---@param self Gio.InputStream # a `GInputStream`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return integer # the size of the bytes skipped, or `-1` on error.
function Gio.InputStream:skip_finish(result) end

--- # record Gio.InputStreamClass
---
---@class Gio.InputStreamClass
---@field parent_class GObject.ObjectClass
---@field read_fn fun(stream: Gio.InputStream, buffer: userdata, count: integer, cancellable: Gio.Cancellable): integer
---@field skip fun(stream: Gio.InputStream, count: integer, cancellable: Gio.Cancellable): integer
---@field close_fn fun(stream: Gio.InputStream, cancellable: Gio.Cancellable): (boolean|nil)
---@field read_async fun(stream: Gio.InputStream, buffer: unknown[], count: integer, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field read_finish fun(stream: Gio.InputStream, result: Gio.AsyncResult): integer
---@field skip_async fun(stream: Gio.InputStream, count: integer, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field skip_finish fun(stream: Gio.InputStream, result: Gio.AsyncResult): integer
---@field close_async fun(stream: Gio.InputStream, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field close_finish fun(stream: Gio.InputStream, result: Gio.AsyncResult): (boolean|nil)
Gio.InputStreamClass = {}

--- # record Gio.InputStreamPrivate
---
---@class Gio.InputStreamPrivate
Gio.InputStreamPrivate = {}

--- # record Gio.InputVector
---
--- Structure used for scatter/gather data input.
--- You generally pass in an array of `GInputVectors`
--- and the operation will store the read data starting in the
--- first buffer, switching to the next as needed.
---
--- ---
---
---@class Gio.InputVector
---@field buffer userdata # Pointer to a buffer where data will be written.
---@field size integer # the available size in `buffer`.
Gio.InputVector = {}

--- # interface Gio.ListModel
---
--- `GListModel` is an interface that represents a mutable list of
--- `GObjects`. Its main intention is as a model for various widgets in
--- user interfaces, such as list views, but it can also be used as a
--- convenient method of returning lists of data, with support for
--- updates.
--- 
--- Each object in the list may also report changes in itself via some
--- mechanism (normally the `GObject`::notify signal).  Taken together
--- with the `GListModel`::items-changed signal, this provides for a list
--- that can change its membership, and in which the members can change
--- their individual properties.
--- 
--- A good example would be the list of visible wireless network access
--- points, where each access point can report dynamic properties such as
--- signal strength.
--- 
--- It is important to note that the `GListModel` itself does not report
--- changes to the individual items.  It only reports changes to the list
--- membership.  If you want to observe changes to the objects themselves
--- then you need to connect signals to the objects that you are
--- interested in.
--- 
--- All items in a `GListModel` are of (or derived from) the same type.
--- `g_list_model_get_item_type()` returns that type.  The type may be an
--- interface, in which case all objects in the list must implement it.
--- 
--- The semantics are close to that of an array:
--- `g_list_model_get_n_items()` returns the number of items in the list and
--- `g_list_model_get_item()` returns an item at a (0-based) position. In
--- order to allow implementations to calculate the list length lazily,
--- you can also iterate over items: starting from 0, repeatedly call
--- `g_list_model_get_item()` until it returns `nil`.
--- 
--- An implementation may create objects lazily, but must take care to
--- return the same object for a given position until all references to
--- it are gone.
--- 
--- On the other side, a consumer is expected only to hold references on
--- objects that are currently "user visible", in order to facilitate the
--- maximum level of laziness in the implementation of the list and to
--- reduce the required number of signal connections at a given time.
--- 
--- This interface is intended only to be used from a single thread.  The
--- thread in which it is appropriate to use it depends on the particular
--- implementation, but typically it will be from the thread that owns
--- the [thread-default main context][g-main-context-push-thread-default]
--- in effect at the time that the model was created.
--- 
--- Over time, it has established itself as good practice for listmodel
--- implementations to provide properties `item-type` and `n-items` to
--- ease working with them. While it is not required, it is recommended
--- that implementations provide these two properties. They should return
--- the values of `g_list_model_get_item_type()` and `g_list_model_get_n_items()`
--- respectively and be defined as such:
--- ```c
--- properties[PROP_ITEM_TYPE] =
---   g_param_spec_gtype ("item-type", "", "", G_TYPE_OBJECT,
---                       G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
--- properties[PROP_N_ITEMS] =
---   g_param_spec_uint ("n-items", "", "", 0, G_MAXUINT, 0,
---                      G_PARAM_READABLE | G_PARAM_STATIC_STRINGS);
--- ```
---
--- ---
---
---@class Gio.ListModel
Gio.ListModel = {}

--- # method Gio.ListModel:get_item_type()
---
--- Gets the type of the items in `list`.
--- 
--- All items returned from `g_list_model_get_item()` are of the type
--- returned by this function, or a subtype, or if the type is an
--- interface, they are an implementation of that interface.
--- 
--- The item type of a `GListModel` can not change during the life of the
--- model.
---
--- ---
---
---@param self Gio.ListModel # a `GListModel`
---@return Gio.GType # the `GType` of the items contained in `list`.
function Gio.ListModel:get_item_type() end

--- # method Gio.ListModel:get_n_items()
---
--- Gets the number of items in `list`.
--- 
--- Depending on the model implementation, calling this function may be
--- less efficient than iterating the list with increasing values for
--- `position` until `g_list_model_get_item()` returns `nil`.
---
--- ---
---
---@param self Gio.ListModel # a `GListModel`
---@return integer # the number of items in `list`.
function Gio.ListModel:get_n_items() end

--- # method Gio.ListModel:get_item()
---
--- Get the item at `position`.
--- 
--- If `position` is greater than the number of items in `list`, `nil` is
--- returned.
--- 
--- `nil` is never returned for an index that is smaller than the length
--- of the list.
--- 
--- This function is meant to be used by language bindings in place
--- of `g_list_model_get_item()`.
--- 
--- See also: `g_list_model_get_n_items()`
---
--- ---
---
---@param self Gio.ListModel # a `GListModel`
---@param position integer # the position of the item to fetch
---@return GObject.Object # the object at `position`.
function Gio.ListModel:get_item(position) end

--- # method Gio.ListModel:items_changed()
---
--- Emits the `GListModel`::items-changed signal on `list`.
--- 
--- This function should only be called by classes implementing
--- `GListModel`. It has to be called after the internal representation
--- of `list` has been updated, because handlers connected to this signal
--- might query the new state of the list.
--- 
--- Implementations must only make changes to the model (as visible to
--- its consumer) in places that will not cause problems for that
--- consumer.  For models that are driven directly by a write API (such
--- as `GListStore`), changes can be reported in response to uses of that
--- API.  For models that represent remote data, changes should only be
--- made from a fresh mainloop dispatch.  It is particularly not
--- permitted to make changes in response to a call to the `GListModel`
--- consumer API.
--- 
--- Stated another way: in general, it is assumed that code making a
--- series of accesses to the model via the API, without returning to the
--- mainloop, and without calling other code, will continue to view the
--- same contents of the model.
---
--- ---
---
---@param self Gio.ListModel # a `GListModel`
---@param position integer # the position at which `list` changed
---@param removed integer # the number of items removed
---@param added integer # the number of items added
---@return nil
function Gio.ListModel:items_changed(position, removed, added) end

--- # record Gio.ListModelInterface
---
--- The virtual function table for `GListModel`.
---
--- ---
---
---@class Gio.ListModelInterface
---@field g_iface GObject.TypeInterface # parent `GTypeInterface`
---@field get_item_type fun(list: Gio.ListModel): Gio.GType
---@field get_n_items fun(list: Gio.ListModel): integer
---@field get_item fun(list: Gio.ListModel, position: integer): GObject.Object
Gio.ListModelInterface = {}

--- # class Gio.ListStore
---
--- `GListStore` is a simple implementation of `GListModel` that stores all
--- items in memory.
--- 
--- It provides insertions, deletions, and lookups in logarithmic time
--- with a fast path for the common case of iterating the list linearly.
---
--- ---
---
---@class Gio.ListStore : GObject.Object, Gio.ListModel
---@operator call: Gio.ListStore
Gio.ListStore = {}

--- # method Gio.ListStore:append()
---
--- Appends `item` to `store`. `item` must be of type `GListStore`:item-type.
--- 
--- This function takes a ref on `item`.
--- 
--- Use `g_list_store_splice()` to append multiple items at the same time
--- efficiently.
---
--- ---
---
---@param self Gio.ListStore # a `GListStore`
---@param item GObject.Object # the new item
---@return nil
function Gio.ListStore:append(item) end

--- # method Gio.ListStore:find()
---
--- Looks up the given `item` in the list store by looping over the items until
--- the first occurrence of `item`. If `item` was not found, then `position` will
--- not be set, and this method will return `false`.
--- 
--- If you need to compare the two items with a custom comparison function, use
--- `g_list_store_find_with_equal_func()` with a custom `GEqualFunc` instead.
---
--- ---
---
---@param self Gio.ListStore # a `GListStore`
---@param item GObject.Object # an item
---@param position? integer # the first position of `item`, if it was found.
---@return (boolean|nil) # Whether `store` contains `item`. If it was found, `position` will be set to the position where `item` occurred for the first time.
function Gio.ListStore:find(item, position) end

--- # method Gio.ListStore:find_with_equal_func()
---
--- Looks up the given `item` in the list store by looping over the items and
--- comparing them with `equal_func` until the first occurrence of `item` which
--- matches. If `item` was not found, then `position` will not be set, and this
--- method will return `false`.
--- 
--- `item` is always passed as second parameter to `equal_func`.
--- 
--- Since GLib 2.76 it is possible to pass `NULL` for `item`.
---
--- ---
---
---@param self Gio.ListStore # a `GListStore`
---@param item? GObject.Object # an item
---@param equal_func GLib.EqualFunc # A custom equality check function
---@param position? integer # the first position of `item`, if it was found.
---@return (boolean|nil) # Whether `store` contains `item`. If it was found, `position` will be set to the position where `item` occurred for the first time.
function Gio.ListStore:find_with_equal_func(item, equal_func, position) end

--- # method Gio.ListStore:find_with_equal_func_full()
---
--- Like `g_list_store_find_with_equal_func()` but with an additional `user_data`
--- that is passed to `equal_func`.
--- 
--- `item` is always passed as second parameter to `equal_func`.
--- 
--- Since GLib 2.76 it is possible to pass `NULL` for `item`.
---
--- ---
---
---@param self Gio.ListStore # a `GListStore`
---@param item? GObject.Object # an item
---@param equal_func GLib.EqualFuncFull # A custom equality check function
---@param user_data? userdata # user data for `equal_func`
---@param position? integer # the first position of `item`, if it was found.
---@return (boolean|nil) # Whether `store` contains `item`. If it was found, `position` will be set to the position where `item` occurred for the first time.
function Gio.ListStore:find_with_equal_func_full(item, equal_func, user_data, position) end

--- # method Gio.ListStore:insert()
---
--- Inserts `item` into `store` at `position`. `item` must be of type
--- `GListStore`:item-type or derived from it. `position` must be smaller
--- than the length of the list, or equal to it to append.
--- 
--- This function takes a ref on `item`.
--- 
--- Use `g_list_store_splice()` to insert multiple items at the same time
--- efficiently.
---
--- ---
---
---@param self Gio.ListStore # a `GListStore`
---@param position integer # the position at which to insert the new item
---@param item GObject.Object # the new item
---@return nil
function Gio.ListStore:insert(position, item) end

--- # method Gio.ListStore:insert_sorted()
---
--- Inserts `item` into `store` at a position to be determined by the
--- `compare_func`.
--- 
--- The list must already be sorted before calling this function or the
--- result is undefined.  Usually you would approach this by only ever
--- inserting items by way of this function.
--- 
--- This function takes a ref on `item`.
---
--- ---
---
---@param self Gio.ListStore # a `GListStore`
---@param item GObject.Object # the new item
---@param compare_func GLib.CompareDataFunc # pairwise comparison function for sorting
---@param user_data? userdata # user data for `compare_func`
---@return integer # the position at which `item` was inserted
function Gio.ListStore:insert_sorted(item, compare_func, user_data) end

--- # method Gio.ListStore:remove()
---
--- Removes the item from `store` that is at `position`. `position` must be
--- smaller than the current length of the list.
--- 
--- Use `g_list_store_splice()` to remove multiple items at the same time
--- efficiently.
---
--- ---
---
---@param self Gio.ListStore # a `GListStore`
---@param position integer # the position of the item that is to be removed
---@return nil
function Gio.ListStore:remove(position) end

--- # method Gio.ListStore:remove_all()
---
--- Removes all items from `store`.
---
--- ---
---
---@param self Gio.ListStore # a `GListStore`
---@return nil
function Gio.ListStore:remove_all() end

--- # method Gio.ListStore:sort()
---
--- Sort the items in `store` according to `compare_func`.
---
--- ---
---
---@param self Gio.ListStore # a `GListStore`
---@param compare_func GLib.CompareDataFunc # pairwise comparison function for sorting
---@param user_data? userdata # user data for `compare_func`
---@return nil
function Gio.ListStore:sort(compare_func, user_data) end

--- # method Gio.ListStore:splice()
---
--- Changes `store` by removing `n_removals` items and adding `n_additions`
--- items to it. `additions` must contain `n_additions` items of type
--- `GListStore`:item-type.  `nil` is not permitted.
--- 
--- This function is more efficient than `g_list_store_insert()` and
--- `g_list_store_remove()`, because it only emits
--- `GListModel`::items-changed once for the change.
--- 
--- This function takes a ref on each item in `additions`.
--- 
--- The parameters `position` and `n_removals` must be correct (ie:
--- `position` + `n_removals` must be less than or equal to the length of
--- the list at the time this function is called).
---
--- ---
---
---@param self Gio.ListStore # a `GListStore`
---@param position integer # the position at which to make the change
---@param n_removals integer # the number of items to remove
---@param additions unknown[] # the items to add
---@param n_additions integer # the number of items to add
---@return nil
function Gio.ListStore:splice(position, n_removals, additions, n_additions) end

--- # function Gio.ListStore.new()
---
--- Creates a new `GListStore` with items of type `item_type`. `item_type`
--- must be a subclass of `GObject`.
---
--- ---
---
---@param item_type Gio.GType # the `GType` of items in the list
---@return Gio.ListStore # a new `GListStore`
function Gio.ListStore.new(item_type) end

--- # record Gio.ListStoreClass
---
---@class Gio.ListStoreClass
---@field parent_class GObject.ObjectClass
Gio.ListStoreClass = {}

--- # interface Gio.LoadableIcon
---
--- Extends the `GIcon` interface and adds the ability to
--- load icons from streams.
---
--- ---
---
---@class Gio.LoadableIcon
Gio.LoadableIcon = {}

--- # method Gio.LoadableIcon:load()
---
--- Loads a loadable icon. For the asynchronous version of this function,
--- see `g_loadable_icon_load_async()`.
---
--- ---
---
---@param self Gio.LoadableIcon # a `GLoadableIcon`.
---@param size integer # an integer.
---@param type? string # a location to store the type of the loaded icon, `nil` to ignore.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return Gio.InputStream # a `GInputStream` to read the icon from.
function Gio.LoadableIcon:load(size, type, cancellable) end

--- # method Gio.LoadableIcon:load_async()
---
--- Loads an icon asynchronously. To finish this function, see
--- `g_loadable_icon_load_finish()`. For the synchronous, blocking
--- version of this function, see `g_loadable_icon_load()`.
---
--- ---
---
---@param self Gio.LoadableIcon # a `GLoadableIcon`.
---@param size integer # an integer.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.LoadableIcon:load_async(size, cancellable, callback, user_data) end

--- # method Gio.LoadableIcon:load_finish()
---
--- Finishes an asynchronous icon load started in `g_loadable_icon_load_async()`.
---
--- ---
---
---@param self Gio.LoadableIcon # a `GLoadableIcon`.
---@param res Gio.AsyncResult # a `GAsyncResult`.
---@param type? string # a location to store the type of the loaded icon, `nil` to ignore.
---@return Gio.InputStream # a `GInputStream` to read the icon from.
function Gio.LoadableIcon:load_finish(res, type) end

--- # record Gio.LoadableIconIface
---
--- Interface for icons that can be loaded as a stream.
---
--- ---
---
---@class Gio.LoadableIconIface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field load fun(icon: Gio.LoadableIcon, size: integer, type: string, cancellable: Gio.Cancellable): Gio.InputStream
---@field load_async fun(icon: Gio.LoadableIcon, size: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field load_finish fun(icon: Gio.LoadableIcon, res: Gio.AsyncResult, type: string): Gio.InputStream
Gio.LoadableIconIface = {}

--- # class Gio.MemoryInputStream
---
--- `GMemoryInputStream` is a class for using arbitrary
--- memory chunks as input for GIO streaming input operations.
--- 
--- As of GLib 2.34, `GMemoryInputStream` implements
--- `GPollableInputStream`.
---
--- ---
---
---@class Gio.MemoryInputStream : Gio.InputStream, Gio.PollableInputStream, Gio.Seekable
---@field parent_instance Gio.InputStream
---@field priv Gio.MemoryInputStreamPrivate
---@operator call: Gio.MemoryInputStream
Gio.MemoryInputStream = {}

--- # method Gio.MemoryInputStream:add_bytes()
---
--- Appends `bytes` to data that can be read from the input stream.
---
--- ---
---
---@param self Gio.MemoryInputStream # a `GMemoryInputStream`
---@param bytes GLib.Bytes # input data
---@return nil
function Gio.MemoryInputStream:add_bytes(bytes) end

--- # method Gio.MemoryInputStream:add_data()
---
--- Appends `data` to data that can be read from the input stream
---
--- ---
---
---@param self Gio.MemoryInputStream # a `GMemoryInputStream`
---@param data unknown[] # input data
---@param len integer # length of the data, may be -1 if `data` is a nul-terminated string
---@param destroy? GLib.DestroyNotify # function that is called to free `data`, or `nil`
---@return nil
function Gio.MemoryInputStream:add_data(data, len, destroy) end

--- # function Gio.MemoryInputStream.new()
---
--- Creates a new empty `GMemoryInputStream`.
---
--- ---
---
---@return Gio.InputStream # a new `GInputStream`
function Gio.MemoryInputStream.new() end

--- # function Gio.MemoryInputStream.new_from_bytes()
---
--- Creates a new `GMemoryInputStream` with data from the given `bytes`.
---
--- ---
---
---@param bytes GLib.Bytes # a `GBytes`
---@return Gio.InputStream # new `GInputStream` read from `bytes`
function Gio.MemoryInputStream.new_from_bytes(bytes) end

--- # function Gio.MemoryInputStream.new_from_data()
---
--- Creates a new `GMemoryInputStream` with data in memory of a given size.
---
--- ---
---
---@param data unknown[] # input data
---@param len integer # length of the data, may be -1 if `data` is a nul-terminated string
---@param destroy? GLib.DestroyNotify # function that is called to free `data`, or `nil`
---@return Gio.InputStream # new `GInputStream` read from `data` of `len` bytes.
function Gio.MemoryInputStream.new_from_data(data, len, destroy) end

--- # record Gio.MemoryInputStreamClass
---
---@class Gio.MemoryInputStreamClass
---@field parent_class Gio.InputStreamClass
Gio.MemoryInputStreamClass = {}

--- # record Gio.MemoryInputStreamPrivate
---
---@class Gio.MemoryInputStreamPrivate
Gio.MemoryInputStreamPrivate = {}

--- # interface Gio.MemoryMonitor
---
--- `GMemoryMonitor` will monitor system memory and suggest to the application
--- when to free memory so as to leave more room for other applications.
--- It is implemented on Linux using the [Low Memory Monitor](https://gitlab.freedesktop.org/hadess/low-memory-monitor/)
--- ([API documentation](https://hadess.pages.freedesktop.org/low-memory-monitor/)).
--- 
--- There is also an implementation for use inside Flatpak sandboxes.
--- 
--- Possible actions to take when the signal is received are:
--- 
---  - Free caches
---  - Save files that haven't been looked at in a while to disk, ready to be reopened when needed
---  - Run a garbage collection cycle
---  - Try and compress fragmented allocations
---  - Exit on idle if the process has no reason to stay around
---  - Call [`malloc_trim(3)`](man:malloc_trim) to return cached heap pages to
---    the kernel (if supported by your libc)
--- 
--- Note that some actions may not always improve system performance, and so
--- should be profiled for your application. ``malloc_trim()``, for example, may
--- make future heap allocations slower (due to releasing cached heap pages back
--- to the kernel).
--- 
--- See `GMemoryMonitorWarningLevel` for details on the various warning levels.
--- 
--- ```c
--- static void
--- warning_cb (GMemoryMonitor *m, GMemoryMonitorWarningLevel level)
--- {
---   g_debug ("Warning level: %d", level);
---   if (warning_level > G_MEMORY_MONITOR_WARNING_LEVEL_LOW)
---     drop_caches ();
--- }
--- 
--- static GMemoryMonitor *
--- monitor_low_memory (void)
--- {
---   GMemoryMonitor *m;
---   m = g_memory_monitor_dup_default ();
---   g_signal_connect (G_OBJECT (m), "low-memory-warning",
---                     G_CALLBACK (warning_cb), NULL);
---   return m;
--- }
--- ```
--- 
--- Don't forget to disconnect the `GMemoryMonitor`::low-memory-warning
--- signal, and unref the `GMemoryMonitor` itself when exiting.
---
--- ---
---
---@class Gio.MemoryMonitor
Gio.MemoryMonitor = {}

--- # function Gio.MemoryMonitor.dup_default()
---
--- Gets a reference to the default `GMemoryMonitor` for the system.
---
--- ---
---
---@return Gio.MemoryMonitor # a new reference to the default `GMemoryMonitor`
function Gio.MemoryMonitor.dup_default() end

--- # record Gio.MemoryMonitorInterface
---
--- The virtual function table for `GMemoryMonitor`.
---
--- ---
---
---@class Gio.MemoryMonitorInterface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field low_memory_warning fun(monitor: Gio.MemoryMonitor, level: Gio.MemoryMonitorWarningLevel): nil
Gio.MemoryMonitorInterface = {}

---@enum Gio.MemoryMonitorWarningLevel
Gio.MemoryMonitorWarningLevel = {}

--- # class Gio.MemoryOutputStream
---
--- `GMemoryOutputStream` is a class for using arbitrary
--- memory chunks as output for GIO streaming output operations.
--- 
--- As of GLib 2.34, `GMemoryOutputStream` trivially implements
--- `GPollableOutputStream`: it always polls as ready.
---
--- ---
---
---@class Gio.MemoryOutputStream : Gio.OutputStream, Gio.PollableOutputStream, Gio.Seekable
---@field parent_instance Gio.OutputStream
---@field priv Gio.MemoryOutputStreamPrivate
Gio.MemoryOutputStream = {}

--- # method Gio.MemoryOutputStream:get_data()
---
--- Gets any loaded data from the `ostream`.
--- 
--- Note that the returned pointer may become invalid on the next
--- write or truncate operation on the stream.
---
--- ---
---
---@param self Gio.MemoryOutputStream # a `GMemoryOutputStream`
---@return userdata # pointer to the stream's data, or `nil` if the data has been stolen
function Gio.MemoryOutputStream:get_data() end

--- # method Gio.MemoryOutputStream:get_data_size()
---
--- Returns the number of bytes from the start up to including the last
--- byte written in the stream that has not been truncated away.
---
--- ---
---
---@param self Gio.MemoryOutputStream # a `GMemoryOutputStream`
---@return integer # the number of bytes written to the stream
function Gio.MemoryOutputStream:get_data_size() end

--- # method Gio.MemoryOutputStream:get_size()
---
--- Gets the size of the currently allocated data area (available from
--- `g_memory_output_stream_get_data()`).
--- 
--- You probably don't want to use this function on resizable streams.
--- See `g_memory_output_stream_get_data_size()` instead.  For resizable
--- streams the size returned by this function is an implementation
--- detail and may be change at any time in response to operations on the
--- stream.
--- 
--- If the stream is fixed-sized (ie: no realloc was passed to
--- `g_memory_output_stream_new()`) then this is the maximum size of the
--- stream and further writes will return %G_IO_ERROR_NO_SPACE.
--- 
--- In any case, if you want the number of bytes currently written to the
--- stream, use `g_memory_output_stream_get_data_size()`.
---
--- ---
---
---@param self Gio.MemoryOutputStream # a `GMemoryOutputStream`
---@return integer # the number of bytes allocated for the data buffer
function Gio.MemoryOutputStream:get_size() end

--- # method Gio.MemoryOutputStream:steal_as_bytes()
---
--- Returns data from the `ostream` as a `GBytes`. `ostream` must be
--- closed before calling this function.
---
--- ---
---
---@param self Gio.MemoryOutputStream # a `GMemoryOutputStream`
---@return GLib.Bytes # the stream's data
function Gio.MemoryOutputStream:steal_as_bytes() end

--- # method Gio.MemoryOutputStream:steal_data()
---
--- Gets any loaded data from the `ostream`. Ownership of the data
--- is transferred to the caller; when no longer needed it must be
--- freed using the free function set in `ostream`'s
--- `GMemoryOutputStream`:destroy-function property.
--- 
--- `ostream` must be closed before calling this function.
---
--- ---
---
---@param self Gio.MemoryOutputStream # a `GMemoryOutputStream`
---@return userdata # the stream's data, or `nil` if it has previously been stolen
function Gio.MemoryOutputStream:steal_data() end

--- # function Gio.MemoryOutputStream.new_resizable()
---
--- Creates a new `GMemoryOutputStream`, using `g_realloc()` and `g_free()`
--- for memory allocation.
---
--- ---
---
---@return Gio.OutputStream
function Gio.MemoryOutputStream.new_resizable() end

--- # record Gio.MemoryOutputStreamClass
---
---@class Gio.MemoryOutputStreamClass
---@field parent_class Gio.OutputStreamClass
Gio.MemoryOutputStreamClass = {}

--- # record Gio.MemoryOutputStreamPrivate
---
---@class Gio.MemoryOutputStreamPrivate
Gio.MemoryOutputStreamPrivate = {}

--- # class Gio.Menu
---
--- `GMenu` is a simple implementation of `GMenuModel`.
--- You populate a `GMenu` by adding `GMenuItem` instances to it.
--- 
--- There are some convenience functions to allow you to directly
--- add items (avoiding `GMenuItem`) for the common cases. To add
--- a regular item, use `g_menu_insert()`. To add a section, use
--- `g_menu_insert_section()`. To add a submenu, use
--- `g_menu_insert_submenu()`.
---
--- ---
---
---@class Gio.Menu : Gio.MenuModel
---@operator call: Gio.Menu
Gio.Menu = {}

--- # method Gio.Menu:append()
---
--- Convenience function for appending a normal menu item to the end of
--- `menu`.  Combine `g_menu_item_new()` and `g_menu_insert_item()` for a more
--- flexible alternative.
---
--- ---
---
---@param self Gio.Menu # a `GMenu`
---@param label? string # the section label, or `nil`
---@param detailed_action? string # the detailed action string, or `nil`
---@return nil
function Gio.Menu:append(label, detailed_action) end

--- # method Gio.Menu:append_item()
---
--- Appends `item` to the end of `menu`.
--- 
--- See `g_menu_insert_item()` for more information.
---
--- ---
---
---@param self Gio.Menu # a `GMenu`
---@param item Gio.MenuItem # a `GMenuItem` to append
---@return nil
function Gio.Menu:append_item(item) end

--- # method Gio.Menu:append_section()
---
--- Convenience function for appending a section menu item to the end of
--- `menu`.  Combine `g_menu_item_new_section()` and `g_menu_insert_item()` for a
--- more flexible alternative.
---
--- ---
---
---@param self Gio.Menu # a `GMenu`
---@param label? string # the section label, or `nil`
---@param section Gio.MenuModel # a `GMenuModel` with the items of the section
---@return nil
function Gio.Menu:append_section(label, section) end

--- # method Gio.Menu:append_submenu()
---
--- Convenience function for appending a submenu menu item to the end of
--- `menu`.  Combine `g_menu_item_new_submenu()` and `g_menu_insert_item()` for a
--- more flexible alternative.
---
--- ---
---
---@param self Gio.Menu # a `GMenu`
---@param label? string # the section label, or `nil`
---@param submenu Gio.MenuModel # a `GMenuModel` with the items of the submenu
---@return nil
function Gio.Menu:append_submenu(label, submenu) end

--- # method Gio.Menu:freeze()
---
--- Marks `menu` as frozen.
--- 
--- After the menu is frozen, it is an error to attempt to make any
--- changes to it.  In effect this means that the `GMenu` API must no
--- longer be used.
--- 
--- This function causes `g_menu_model_is_mutable()` to begin returning
--- `false`, which has some positive performance implications.
---
--- ---
---
---@param self Gio.Menu # a `GMenu`
---@return nil
function Gio.Menu:freeze() end

--- # method Gio.Menu:insert()
---
--- Convenience function for inserting a normal menu item into `menu`.
--- Combine `g_menu_item_new()` and `g_menu_insert_item()` for a more flexible
--- alternative.
---
--- ---
---
---@param self Gio.Menu # a `GMenu`
---@param position integer # the position at which to insert the item
---@param label? string # the section label, or `nil`
---@param detailed_action? string # the detailed action string, or `nil`
---@return nil
function Gio.Menu:insert(position, label, detailed_action) end

--- # method Gio.Menu:insert_item()
---
--- Inserts `item` into `menu`.
--- 
--- The "insertion" is actually done by copying all of the attribute and
--- link values of `item` and using them to form a new item within `menu`.
--- As such, `item` itself is not really inserted, but rather, a menu item
--- that is exactly the same as the one presently described by `item`.
--- 
--- This means that `item` is essentially useless after the insertion
--- occurs.  Any changes you make to it are ignored unless it is inserted
--- again (at which point its updated values will be copied).
--- 
--- You should probably just free `item` once you're done.
--- 
--- There are many convenience functions to take care of common cases.
--- See `g_menu_insert()`, `g_menu_insert_section()` and
--- `g_menu_insert_submenu()` as well as "prepend" and "append" variants of
--- each of these functions.
---
--- ---
---
---@param self Gio.Menu # a `GMenu`
---@param position integer # the position at which to insert the item
---@param item Gio.MenuItem # the `GMenuItem` to insert
---@return nil
function Gio.Menu:insert_item(position, item) end

--- # method Gio.Menu:insert_section()
---
--- Convenience function for inserting a section menu item into `menu`.
--- Combine `g_menu_item_new_section()` and `g_menu_insert_item()` for a more
--- flexible alternative.
---
--- ---
---
---@param self Gio.Menu # a `GMenu`
---@param position integer # the position at which to insert the item
---@param label? string # the section label, or `nil`
---@param section Gio.MenuModel # a `GMenuModel` with the items of the section
---@return nil
function Gio.Menu:insert_section(position, label, section) end

--- # method Gio.Menu:insert_submenu()
---
--- Convenience function for inserting a submenu menu item into `menu`.
--- Combine `g_menu_item_new_submenu()` and `g_menu_insert_item()` for a more
--- flexible alternative.
---
--- ---
---
---@param self Gio.Menu # a `GMenu`
---@param position integer # the position at which to insert the item
---@param label? string # the section label, or `nil`
---@param submenu Gio.MenuModel # a `GMenuModel` with the items of the submenu
---@return nil
function Gio.Menu:insert_submenu(position, label, submenu) end

--- # method Gio.Menu:prepend()
---
--- Convenience function for prepending a normal menu item to the start
--- of `menu`.  Combine `g_menu_item_new()` and `g_menu_insert_item()` for a more
--- flexible alternative.
---
--- ---
---
---@param self Gio.Menu # a `GMenu`
---@param label? string # the section label, or `nil`
---@param detailed_action? string # the detailed action string, or `nil`
---@return nil
function Gio.Menu:prepend(label, detailed_action) end

--- # method Gio.Menu:prepend_item()
---
--- Prepends `item` to the start of `menu`.
--- 
--- See `g_menu_insert_item()` for more information.
---
--- ---
---
---@param self Gio.Menu # a `GMenu`
---@param item Gio.MenuItem # a `GMenuItem` to prepend
---@return nil
function Gio.Menu:prepend_item(item) end

--- # method Gio.Menu:prepend_section()
---
--- Convenience function for prepending a section menu item to the start
--- of `menu`.  Combine `g_menu_item_new_section()` and `g_menu_insert_item()` for
--- a more flexible alternative.
---
--- ---
---
---@param self Gio.Menu # a `GMenu`
---@param label? string # the section label, or `nil`
---@param section Gio.MenuModel # a `GMenuModel` with the items of the section
---@return nil
function Gio.Menu:prepend_section(label, section) end

--- # method Gio.Menu:prepend_submenu()
---
--- Convenience function for prepending a submenu menu item to the start
--- of `menu`.  Combine `g_menu_item_new_submenu()` and `g_menu_insert_item()` for
--- a more flexible alternative.
---
--- ---
---
---@param self Gio.Menu # a `GMenu`
---@param label? string # the section label, or `nil`
---@param submenu Gio.MenuModel # a `GMenuModel` with the items of the submenu
---@return nil
function Gio.Menu:prepend_submenu(label, submenu) end

--- # method Gio.Menu:remove()
---
--- Removes an item from the menu.
--- 
--- `position` gives the index of the item to remove.
--- 
--- It is an error if position is not in range the range from 0 to one
--- less than the number of items in the menu.
--- 
--- It is not possible to remove items by identity since items are added
--- to the menu simply by copying their links and attributes (ie:
--- identity of the item itself is not preserved).
---
--- ---
---
---@param self Gio.Menu # a `GMenu`
---@param position integer # the position of the item to remove
---@return nil
function Gio.Menu:remove(position) end

--- # method Gio.Menu:remove_all()
---
--- Removes all items in the menu.
---
--- ---
---
---@param self Gio.Menu # a `GMenu`
---@return nil
function Gio.Menu:remove_all() end

--- # function Gio.Menu.new()
---
--- Creates a new `GMenu`.
--- 
--- The new menu has no items.
---
--- ---
---
---@return Gio.Menu # a new `GMenu`
function Gio.Menu.new() end

--- # class Gio.MenuAttributeIter
---
--- `GMenuAttributeIter` is an opaque structure type.  You must access it
--- using the functions below.
---
--- ---
---
---@class Gio.MenuAttributeIter : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.MenuAttributeIterPrivate
Gio.MenuAttributeIter = {}

--- # method Gio.MenuAttributeIter:get_name()
---
--- Gets the name of the attribute at the current iterator position, as
--- a string.
--- 
--- The iterator is not advanced.
---
--- ---
---
---@param self Gio.MenuAttributeIter # a `GMenuAttributeIter`
---@return string # the name of the attribute
function Gio.MenuAttributeIter:get_name() end

--- # method Gio.MenuAttributeIter:get_next()
---
--- This function combines `g_menu_attribute_iter_next()` with
--- `g_menu_attribute_iter_get_name()` and `g_menu_attribute_iter_get_value()`.
--- 
--- First the iterator is advanced to the next (possibly first) attribute.
--- If that fails, then `false` is returned and there are no other
--- effects.
--- 
--- If successful, `name` and `value` are set to the name and value of the
--- attribute that has just been advanced to.  At this point,
--- `g_menu_attribute_iter_get_name()` and `g_menu_attribute_iter_get_value()` will
--- return the same values again.
--- 
--- The value returned in `name` remains valid for as long as the iterator
--- remains at the current position.  The value returned in `value` must
--- be unreffed using `g_variant_unref()` when it is no longer in use.
---
--- ---
---
---@param self Gio.MenuAttributeIter # a `GMenuAttributeIter`
---@param out_name? string # the type of the attribute
---@param value? GLib.Variant # the attribute value
---@return (boolean|nil) # `true` on success, or `false` if there is no additional attribute
function Gio.MenuAttributeIter:get_next(out_name, value) end

--- # method Gio.MenuAttributeIter:get_value()
---
--- Gets the value of the attribute at the current iterator position.
--- 
--- The iterator is not advanced.
---
--- ---
---
---@param self Gio.MenuAttributeIter # a `GMenuAttributeIter`
---@return GLib.Variant # the value of the current attribute
function Gio.MenuAttributeIter:get_value() end

--- # method Gio.MenuAttributeIter:next()
---
--- Attempts to advance the iterator to the next (possibly first)
--- attribute.
--- 
--- `true` is returned on success, or `false` if there are no more
--- attributes.
--- 
--- You must call this function when you first acquire the iterator
--- to advance it to the first attribute (and determine if the first
--- attribute exists at all).
---
--- ---
---
---@param self Gio.MenuAttributeIter # a `GMenuAttributeIter`
---@return (boolean|nil) # `true` on success, or `false` when there are no more attributes
function Gio.MenuAttributeIter:next() end

--- # record Gio.MenuAttributeIterClass
---
---@class Gio.MenuAttributeIterClass
---@field parent_class GObject.ObjectClass
---@field get_next fun(iter: Gio.MenuAttributeIter, out_name: string, value: GLib.Variant): (boolean|nil)
Gio.MenuAttributeIterClass = {}

--- # record Gio.MenuAttributeIterPrivate
---
---@class Gio.MenuAttributeIterPrivate
Gio.MenuAttributeIterPrivate = {}

--- # class Gio.MenuItem
---
--- `GMenuItem` is an opaque structure type.  You must access it using the
--- functions below.
---
--- ---
---
---@class Gio.MenuItem : GObject.Object
---@operator call: Gio.MenuItem
Gio.MenuItem = {}

--- # method Gio.MenuItem:get_attribute_value()
---
--- Queries the named `attribute` on `menu_item`.
--- 
--- If `expected_type` is specified and the attribute does not have this
--- type, `nil` is returned.  `nil` is also returned if the attribute
--- simply does not exist.
---
--- ---
---
---@param self Gio.MenuItem # a `GMenuItem`
---@param attribute string # the attribute name to query
---@param expected_type? GLib.VariantType # the expected type of the attribute
---@return GLib.Variant # the attribute value, or `nil`
function Gio.MenuItem:get_attribute_value(attribute, expected_type) end

--- # method Gio.MenuItem:get_link()
---
--- Queries the named `link` on `menu_item`.
---
--- ---
---
---@param self Gio.MenuItem # a `GMenuItem`
---@param link string # the link name to query
---@return Gio.MenuModel # the link, or `nil`
function Gio.MenuItem:get_link(link) end

--- # method Gio.MenuItem:set_action_and_target_value()
---
--- Sets or unsets the "action" and "target" attributes of `menu_item`.
--- 
--- If `action` is `nil` then both the "action" and "target" attributes
--- are unset (and `target_value` is ignored).
--- 
--- If `action` is non-`nil` then the "action" attribute is set.  The
--- "target" attribute is then set to the value of `target_value` if it is
--- non-`nil` or unset otherwise.
--- 
--- Normal menu items (ie: not submenu, section or other custom item
--- types) are expected to have the "action" attribute set to identify
--- the action that they are associated with.  The state type of the
--- action help to determine the disposition of the menu item.  See
--- `GAction` and `GActionGroup` for an overview of actions.
--- 
--- In general, clicking on the menu item will result in activation of
--- the named action with the "target" attribute given as the parameter
--- to the action invocation.  If the "target" attribute is not set then
--- the action is invoked with no parameter.
--- 
--- If the action has no state then the menu item is usually drawn as a
--- plain menu item (ie: with no additional decoration).
--- 
--- If the action has a boolean state then the menu item is usually drawn
--- as a toggle menu item (ie: with a checkmark or equivalent
--- indication).  The item should be marked as 'toggled' or 'checked'
--- when the boolean state is `true`.
--- 
--- If the action has a string state then the menu item is usually drawn
--- as a radio menu item (ie: with a radio bullet or equivalent
--- indication).  The item should be marked as 'selected' when the string
--- state is equal to the value of the `target` property.
--- 
--- See `g_menu_item_set_action_and_target()` or
--- `g_menu_item_set_detailed_action()` for two equivalent calls that are
--- probably more convenient for most uses.
---
--- ---
---
---@param self Gio.MenuItem # a `GMenuItem`
---@param action? string # the name of the action for this item
---@param target_value? GLib.Variant # a `GVariant` to use as the action target
---@return nil
function Gio.MenuItem:set_action_and_target_value(action, target_value) end

--- # method Gio.MenuItem:set_attribute_value()
---
--- Sets or unsets an attribute on `menu_item`.
--- 
--- The attribute to set or unset is specified by `attribute`. This
--- can be one of the standard attribute names %G_MENU_ATTRIBUTE_LABEL,
--- %G_MENU_ATTRIBUTE_ACTION, %G_MENU_ATTRIBUTE_TARGET, or a custom
--- attribute name.
--- Attribute names are restricted to lowercase characters, numbers
--- and '-'. Furthermore, the names must begin with a lowercase character,
--- must not end with a '-', and must not contain consecutive dashes.
--- 
--- must consist only of lowercase
--- ASCII characters, digits and '-'.
--- 
--- If `value` is non-`nil` then it is used as the new value for the
--- attribute.  If `value` is `nil` then the attribute is unset. If
--- the `value` `GVariant` is floating, it is consumed.
--- 
--- See also `g_menu_item_set_attribute()` for a more convenient way to do
--- the same.
---
--- ---
---
---@param self Gio.MenuItem # a `GMenuItem`
---@param attribute string # the attribute to set
---@param value? GLib.Variant # a `GVariant` to use as the value, or `nil`
---@return nil
function Gio.MenuItem:set_attribute_value(attribute, value) end

--- # method Gio.MenuItem:set_detailed_action()
---
--- Sets the "action" and possibly the "target" attribute of `menu_item`.
--- 
--- The format of `detailed_action` is the same format parsed by
--- `g_action_parse_detailed_name()`.
--- 
--- See `g_menu_item_set_action_and_target()` or
--- `g_menu_item_set_action_and_target_value()` for more flexible (but
--- slightly less convenient) alternatives.
--- 
--- See also `g_menu_item_set_action_and_target_value()` for a description of
--- the semantics of the action and target attributes.
---
--- ---
---
---@param self Gio.MenuItem # a `GMenuItem`
---@param detailed_action string # the "detailed" action string
---@return nil
function Gio.MenuItem:set_detailed_action(detailed_action) end

--- # method Gio.MenuItem:set_icon()
---
--- Sets (or unsets) the icon on `menu_item`.
--- 
--- This call is the same as calling `g_icon_serialize()` and using the
--- result as the value to `g_menu_item_set_attribute_value()` for
--- %G_MENU_ATTRIBUTE_ICON.
--- 
--- This API is only intended for use with "noun" menu items; things like
--- bookmarks or applications in an "Open With" menu.  Don't use it on
--- menu items corresponding to verbs (eg: stock icons for 'Save' or
--- 'Quit').
--- 
--- If `icon` is `nil` then the icon is unset.
---
--- ---
---
---@param self Gio.MenuItem # a `GMenuItem`
---@param icon Gio.Icon # a `GIcon`, or `nil`
---@return nil
function Gio.MenuItem:set_icon(icon) end

--- # method Gio.MenuItem:set_label()
---
--- Sets or unsets the "label" attribute of `menu_item`.
--- 
--- If `label` is non-`nil` it is used as the label for the menu item.  If
--- it is `nil` then the label attribute is unset.
---
--- ---
---
---@param self Gio.MenuItem # a `GMenuItem`
---@param label? string # the label to set, or `nil` to unset
---@return nil
function Gio.MenuItem:set_label(label) end

--- # method Gio.MenuItem:set_link()
---
--- Creates a link from `menu_item` to `model` if non-`nil`, or unsets it.
--- 
--- Links are used to establish a relationship between a particular menu
--- item and another menu.  For example, %G_MENU_LINK_SUBMENU is used to
--- associate a submenu with a particular menu item, and %G_MENU_LINK_SECTION
--- is used to create a section. Other types of link can be used, but there
--- is no guarantee that clients will be able to make sense of them.
--- Link types are restricted to lowercase characters, numbers
--- and '-'. Furthermore, the names must begin with a lowercase character,
--- must not end with a '-', and must not contain consecutive dashes.
---
--- ---
---
---@param self Gio.MenuItem # a `GMenuItem`
---@param link string # type of link to establish or unset
---@param model? Gio.MenuModel # the `GMenuModel` to link to (or `nil` to unset)
---@return nil
function Gio.MenuItem:set_link(link, model) end

--- # method Gio.MenuItem:set_section()
---
--- Sets or unsets the "section" link of `menu_item` to `section`.
--- 
--- The effect of having one menu appear as a section of another is
--- exactly as it sounds: the items from `section` become a direct part of
--- the menu that `menu_item` is added to.  See `g_menu_item_new_section()`
--- for more information about what it means for a menu item to be a
--- section.
---
--- ---
---
---@param self Gio.MenuItem # a `GMenuItem`
---@param section? Gio.MenuModel # a `GMenuModel`, or `nil`
---@return nil
function Gio.MenuItem:set_section(section) end

--- # method Gio.MenuItem:set_submenu()
---
--- Sets or unsets the "submenu" link of `menu_item` to `submenu`.
--- 
--- If `submenu` is non-`nil`, it is linked to.  If it is `nil` then the
--- link is unset.
--- 
--- The effect of having one menu appear as a submenu of another is
--- exactly as it sounds.
---
--- ---
---
---@param self Gio.MenuItem # a `GMenuItem`
---@param submenu? Gio.MenuModel # a `GMenuModel`, or `nil`
---@return nil
function Gio.MenuItem:set_submenu(submenu) end

--- # function Gio.MenuItem.new()
---
--- Creates a new `GMenuItem`.
--- 
--- If `label` is non-`nil` it is used to set the "label" attribute of the
--- new item.
--- 
--- If `detailed_action` is non-`nil` it is used to set the "action" and
--- possibly the "target" attribute of the new item.  See
--- `g_menu_item_set_detailed_action()` for more information.
---
--- ---
---
---@param label? string # the section label, or `nil`
---@param detailed_action? string # the detailed action string, or `nil`
---@return Gio.MenuItem # a new `GMenuItem`
function Gio.MenuItem.new(label, detailed_action) end

--- # function Gio.MenuItem.new_from_model()
---
--- Creates a `GMenuItem` as an exact copy of an existing menu item in a
--- `GMenuModel`.
--- 
--- `item_index` must be valid (ie: be sure to call
--- `g_menu_model_get_n_items()` first).
---
--- ---
---
---@param model Gio.MenuModel # a `GMenuModel`
---@param item_index integer # the index of an item in `model`
---@return Gio.MenuItem # a new `GMenuItem`.
function Gio.MenuItem.new_from_model(model, item_index) end

--- # function Gio.MenuItem.new_section()
---
--- Creates a new `GMenuItem` representing a section.
--- 
--- This is a convenience API around `g_menu_item_new()` and
--- `g_menu_item_set_section()`.
--- 
--- The effect of having one menu appear as a section of another is
--- exactly as it sounds: the items from `section` become a direct part of
--- the menu that `menu_item` is added to.
--- 
--- Visual separation is typically displayed between two non-empty
--- sections.  If `label` is non-`nil` then it will be encorporated into
--- this visual indication.  This allows for labeled subsections of a
--- menu.
--- 
--- As a simple example, consider a typical "Edit" menu from a simple
--- program.  It probably contains an "Undo" and "Redo" item, followed by
--- a separator, followed by "Cut", "Copy" and "Paste".
--- 
--- This would be accomplished by creating three `GMenu` instances.  The
--- first would be populated with the "Undo" and "Redo" items, and the
--- second with the "Cut", "Copy" and "Paste" items.  The first and
--- second menus would then be added as submenus of the third.  In XML
--- format, this would look something like the following:
--- ```c
--- <menu id='edit-menu'>
---   <section>
---     <item label='Undo'/>
---     <item label='Redo'/>
---   </section>
---   <section>
---     <item label='Cut'/>
---     <item label='Copy'/>
---     <item label='Paste'/>
---   </section>
--- </menu>
--- ```
--- 
--- The following example is exactly equivalent.  It is more illustrative
--- of the exact relationship between the menus and items (keeping in
--- mind that the 'link' element defines a new menu that is linked to the
--- containing one).  The style of the second example is more verbose and
--- difficult to read (and therefore not recommended except for the
--- purpose of understanding what is really going on).
--- ```c
--- <menu id='edit-menu'>
---   <item>
---     <link name='section'>
---       <item label='Undo'/>
---       <item label='Redo'/>
---     </link>
---   </item>
---   <item>
---     <link name='section'>
---       <item label='Cut'/>
---       <item label='Copy'/>
---       <item label='Paste'/>
---     </link>
---   </item>
--- </menu>
--- ```
---
--- ---
---
---@param label? string # the section label, or `nil`
---@param section Gio.MenuModel # a `GMenuModel` with the items of the section
---@return Gio.MenuItem # a new `GMenuItem`
function Gio.MenuItem.new_section(label, section) end

--- # function Gio.MenuItem.new_submenu()
---
--- Creates a new `GMenuItem` representing a submenu.
--- 
--- This is a convenience API around `g_menu_item_new()` and
--- `g_menu_item_set_submenu()`.
---
--- ---
---
---@param label? string # the section label, or `nil`
---@param submenu Gio.MenuModel # a `GMenuModel` with the items of the submenu
---@return Gio.MenuItem # a new `GMenuItem`
function Gio.MenuItem.new_submenu(label, submenu) end

--- # class Gio.MenuLinkIter
---
--- `GMenuLinkIter` is an opaque structure type.  You must access it using
--- the functions below.
---
--- ---
---
---@class Gio.MenuLinkIter : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.MenuLinkIterPrivate
Gio.MenuLinkIter = {}

--- # method Gio.MenuLinkIter:get_name()
---
--- Gets the name of the link at the current iterator position.
--- 
--- The iterator is not advanced.
---
--- ---
---
---@param self Gio.MenuLinkIter # a `GMenuLinkIter`
---@return string # the type of the link
function Gio.MenuLinkIter:get_name() end

--- # method Gio.MenuLinkIter:get_next()
---
--- This function combines `g_menu_link_iter_next()` with
--- `g_menu_link_iter_get_name()` and `g_menu_link_iter_get_value()`.
--- 
--- First the iterator is advanced to the next (possibly first) link.
--- If that fails, then `false` is returned and there are no other effects.
--- 
--- If successful, `out_link` and `value` are set to the name and `GMenuModel`
--- of the link that has just been advanced to.  At this point,
--- `g_menu_link_iter_get_name()` and `g_menu_link_iter_get_value()` will return the
--- same values again.
--- 
--- The value returned in `out_link` remains valid for as long as the iterator
--- remains at the current position.  The value returned in `value` must
--- be unreffed using `g_object_unref()` when it is no longer in use.
---
--- ---
---
---@param self Gio.MenuLinkIter # a `GMenuLinkIter`
---@param out_link? string # the name of the link
---@param value? Gio.MenuModel # the linked `GMenuModel`
---@return (boolean|nil) # `true` on success, or `false` if there is no additional link
function Gio.MenuLinkIter:get_next(out_link, value) end

--- # method Gio.MenuLinkIter:get_value()
---
--- Gets the linked `GMenuModel` at the current iterator position.
--- 
--- The iterator is not advanced.
---
--- ---
---
---@param self Gio.MenuLinkIter # a `GMenuLinkIter`
---@return Gio.MenuModel # the `GMenuModel` that is linked to
function Gio.MenuLinkIter:get_value() end

--- # method Gio.MenuLinkIter:next()
---
--- Attempts to advance the iterator to the next (possibly first)
--- link.
--- 
--- `true` is returned on success, or `false` if there are no more links.
--- 
--- You must call this function when you first acquire the iterator to
--- advance it to the first link (and determine if the first link exists
--- at all).
---
--- ---
---
---@param self Gio.MenuLinkIter # a `GMenuLinkIter`
---@return (boolean|nil) # `true` on success, or `false` when there are no more links
function Gio.MenuLinkIter:next() end

--- # record Gio.MenuLinkIterClass
---
---@class Gio.MenuLinkIterClass
---@field parent_class GObject.ObjectClass
---@field get_next fun(iter: Gio.MenuLinkIter, out_link: string, value: Gio.MenuModel): (boolean|nil)
Gio.MenuLinkIterClass = {}

--- # record Gio.MenuLinkIterPrivate
---
---@class Gio.MenuLinkIterPrivate
Gio.MenuLinkIterPrivate = {}

--- # class Gio.MenuModel
---
--- `GMenuModel` represents the contents of a menu -- an ordered list of
--- menu items. The items are associated with actions, which can be
--- activated through them. Items can be grouped in sections, and may
--- have submenus associated with them. Both items and sections usually
--- have some representation data, such as labels or icons. The type of
--- the associated action (ie whether it is stateful, and what kind of
--- state it has) can influence the representation of the item.
--- 
--- The conceptual model of menus in `GMenuModel` is hierarchical:
--- sections and submenus are again represented by `GMenuModels`.
--- Menus themselves do not define their own roles. Rather, the role
--- of a particular `GMenuModel` is defined by the item that references
--- it (or, in the case of the 'root' menu, is defined by the context
--- in which it is used).
--- 
--- As an example, consider the visible portions of this menu:
--- 
--- ## An example menu # {`menu`-example}
--- 
--- ![](menu-example.png)
--- 
--- There are 8 "menus" visible in the screenshot: one menubar, two
--- submenus and 5 sections:
--- 
--- - the toplevel menubar (containing 4 items)
--- - the View submenu (containing 3 sections)
--- - the first section of the View submenu (containing 2 items)
--- - the second section of the View submenu (containing 1 item)
--- - the final section of the View submenu (containing 1 item)
--- - the Highlight Mode submenu (containing 2 sections)
--- - the Sources section (containing 2 items)
--- - the Markup section (containing 2 items)
--- 
--- The [example][menu-model] illustrates the conceptual connection between
--- these 8 menus. Each large block in the figure represents a menu and the
--- smaller blocks within the large block represent items in that menu. Some
--- items contain references to other menus.
--- 
--- ## A menu example # {`menu`-model}
--- 
--- ![](menu-model.png)
--- 
--- Notice that the separators visible in the [example][menu-example]
--- appear nowhere in the [menu model][menu-model]. This is because
--- separators are not explicitly represented in the menu model. Instead,
--- a separator is inserted between any two non-empty sections of a menu.
--- Section items can have labels just like any other item. In that case,
--- a display system may show a section header instead of a separator.
--- 
--- The motivation for this abstract model of application controls is
--- that modern user interfaces tend to make these controls available
--- outside the application. Examples include global menus, jumplists,
--- dash boards, etc. To support such uses, it is necessary to 'export'
--- information about actions and their representation in menus, which
--- is exactly what the [GActionGroup exporter][gio-GActionGroup-exporter]
--- and the [GMenuModel exporter][gio-GMenuModel-exporter] do for
--- `GActionGroup` and `GMenuModel`. The client-side counterparts to
--- make use of the exported information are `GDBusActionGroup` and
--- `GDBusMenuModel`.
--- 
--- The API of `GMenuModel` is very generic, with iterators for the
--- attributes and links of an item, see `g_menu_model_iterate_item_attributes()`
--- and `g_menu_model_iterate_item_links()`. The 'standard' attributes and
--- link types have predefined names: %G_MENU_ATTRIBUTE_LABEL,
--- %G_MENU_ATTRIBUTE_ACTION, %G_MENU_ATTRIBUTE_TARGET, %G_MENU_LINK_SECTION
--- and %G_MENU_LINK_SUBMENU.
--- 
--- Items in a `GMenuModel` represent active controls if they refer to
--- an action that can get activated when the user interacts with the
--- menu item. The reference to the action is encoded by the string id
--- in the %G_MENU_ATTRIBUTE_ACTION attribute. An action id uniquely
--- identifies an action in an action group. Which action group(s) provide
--- actions depends on the context in which the menu model is used.
--- E.g. when the model is exported as the application menu of a
--- `GtkApplication`, actions can be application-wide or window-specific
--- (and thus come from two different action groups). By convention, the
--- application-wide actions have names that start with "app.", while the
--- names of window-specific actions start with "win.".
--- 
--- While a wide variety of stateful actions is possible, the following
--- is the minimum that is expected to be supported by all users of exported
--- menu information:
--- - an action with no parameter type and no state
--- - an action with no parameter type and boolean state
--- - an action with string parameter type and string state
--- 
--- ## Stateless
--- 
--- A stateless action typically corresponds to an ordinary menu item.
--- 
--- Selecting such a menu item will activate the action (with no parameter).
--- 
--- ## Boolean State
--- 
--- An action with a boolean state will most typically be used with a "toggle"
--- or "switch" menu item. The state can be set directly, but activating the
--- action (with no parameter) results in the state being toggled.
--- 
--- Selecting a toggle menu item will activate the action. The menu item should
--- be rendered as "checked" when the state is true.
--- 
--- ## String Parameter and State
--- 
--- Actions with string parameters and state will most typically be used to
--- represent an enumerated choice over the items available for a group of
--- radio menu items. Activating the action with a string parameter is
--- equivalent to setting that parameter as the state.
--- 
--- Radio menu items, in addition to being associated with the action, will
--- have a target value. Selecting that menu item will result in activation
--- of the action with the target value as the parameter. The menu item should
--- be rendered as "selected" when the state of the action is equal to the
--- target value of the menu item.
---
--- ---
---
---@class Gio.MenuModel : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.MenuModelPrivate
Gio.MenuModel = {}

--- # method Gio.MenuModel:get_item_attribute_value()
---
--- Queries the item at position `item_index` in `model` for the attribute
--- specified by `attribute`.
--- 
--- If `expected_type` is non-`nil` then it specifies the expected type of
--- the attribute.  If it is `nil` then any type will be accepted.
--- 
--- If the attribute exists and matches `expected_type` (or if the
--- expected type is unspecified) then the value is returned.
--- 
--- If the attribute does not exist, or does not match the expected type
--- then `nil` is returned.
---
--- ---
---
---@param self Gio.MenuModel # a `GMenuModel`
---@param item_index integer # the index of the item
---@param attribute string # the attribute to query
---@param expected_type? GLib.VariantType # the expected type of the attribute, or `nil`
---@return GLib.Variant # the value of the attribute
function Gio.MenuModel:get_item_attribute_value(item_index, attribute, expected_type) end

--- # method Gio.MenuModel:get_item_link()
---
--- Queries the item at position `item_index` in `model` for the link
--- specified by `link`.
--- 
--- If the link exists, the linked `GMenuModel` is returned.  If the link
--- does not exist, `nil` is returned.
---
--- ---
---
---@param self Gio.MenuModel # a `GMenuModel`
---@param item_index integer # the index of the item
---@param link string # the link to query
---@return Gio.MenuModel # the linked `GMenuModel`, or `nil`
function Gio.MenuModel:get_item_link(item_index, link) end

--- # method Gio.MenuModel:get_n_items()
---
--- Query the number of items in `model`.
---
--- ---
---
---@param self Gio.MenuModel # a `GMenuModel`
---@return integer # the number of items
function Gio.MenuModel:get_n_items() end

--- # method Gio.MenuModel:is_mutable()
---
--- Queries if `model` is mutable.
--- 
--- An immutable `GMenuModel` will never emit the `GMenuModel`::items-changed
--- signal. Consumers of the model may make optimisations accordingly.
---
--- ---
---
---@param self Gio.MenuModel # a `GMenuModel`
---@return (boolean|nil) # `true` if the model is mutable (ie: "items-changed" may be emitted).
function Gio.MenuModel:is_mutable() end

--- # method Gio.MenuModel:items_changed()
---
--- Requests emission of the `GMenuModel`::items-changed signal on `model`.
--- 
--- This function should never be called except by `GMenuModel`
--- subclasses.  Any other calls to this function will very likely lead
--- to a violation of the interface of the model.
--- 
--- The implementation should update its internal representation of the
--- menu before emitting the signal.  The implementation should further
--- expect to receive queries about the new state of the menu (and
--- particularly added menu items) while signal handlers are running.
--- 
--- The implementation must dispatch this call directly from a mainloop
--- entry and not in response to calls -- particularly those from the
--- `GMenuModel` API.  Said another way: the menu must not change while
--- user code is running without returning to the mainloop.
---
--- ---
---
---@param self Gio.MenuModel # a `GMenuModel`
---@param position integer # the position of the change
---@param removed integer # the number of items removed
---@param added integer # the number of items added
---@return nil
function Gio.MenuModel:items_changed(position, removed, added) end

--- # method Gio.MenuModel:iterate_item_attributes()
---
--- Creates a `GMenuAttributeIter` to iterate over the attributes of
--- the item at position `item_index` in `model`.
--- 
--- You must free the iterator with `g_object_unref()` when you are done.
---
--- ---
---
---@param self Gio.MenuModel # a `GMenuModel`
---@param item_index integer # the index of the item
---@return Gio.MenuAttributeIter # a new `GMenuAttributeIter`
function Gio.MenuModel:iterate_item_attributes(item_index) end

--- # method Gio.MenuModel:iterate_item_links()
---
--- Creates a `GMenuLinkIter` to iterate over the links of the item at
--- position `item_index` in `model`.
--- 
--- You must free the iterator with `g_object_unref()` when you are done.
---
--- ---
---
---@param self Gio.MenuModel # a `GMenuModel`
---@param item_index integer # the index of the item
---@return Gio.MenuLinkIter # a new `GMenuLinkIter`
function Gio.MenuModel:iterate_item_links(item_index) end

--- # record Gio.MenuModelClass
---
---@class Gio.MenuModelClass
---@field parent_class GObject.ObjectClass
---@field is_mutable fun(model: Gio.MenuModel): (boolean|nil)
---@field get_n_items fun(model: Gio.MenuModel): integer
---@field get_item_attributes fun(model: Gio.MenuModel, item_index: integer, attributes: table<string, GLib.Variant>): nil
---@field iterate_item_attributes fun(model: Gio.MenuModel, item_index: integer): Gio.MenuAttributeIter
---@field get_item_attribute_value fun(model: Gio.MenuModel, item_index: integer, attribute: string, expected_type: GLib.VariantType): GLib.Variant
---@field get_item_links fun(model: Gio.MenuModel, item_index: integer, links: table<string, Gio.MenuModel>): nil
---@field iterate_item_links fun(model: Gio.MenuModel, item_index: integer): Gio.MenuLinkIter
---@field get_item_link fun(model: Gio.MenuModel, item_index: integer, link: string): Gio.MenuModel
Gio.MenuModelClass = {}

--- # record Gio.MenuModelPrivate
---
---@class Gio.MenuModelPrivate
Gio.MenuModelPrivate = {}

--- # interface Gio.Mount
---
--- The `GMount` interface represents user-visible mounts. Note, when
--- porting from GnomeVFS, `GMount` is the moral equivalent of `GnomeVFSVolume`.
--- 
--- `GMount` is a "mounted" filesystem that you can access. Mounted is in
--- quotes because it's not the same as a unix mount, it might be a gvfs
--- mount, but you can still access the files on it if you use GIO. Might or
--- might not be related to a volume object.
--- 
--- Unmounting a `GMount` instance is an asynchronous operation. For
--- more information about asynchronous operations, see `GAsyncResult`
--- and `GTask`. To unmount a `GMount` instance, first call
--- `g_mount_unmount_with_operation()` with (at least) the `GMount` instance and a
--- `GAsyncReadyCallback`.  The callback will be fired when the
--- operation has resolved (either with success or failure), and a
--- `GAsyncResult` structure will be passed to the callback.  That
--- callback should then call `g_mount_unmount_with_operation_finish()` with the `GMount`
--- and the `GAsyncResult` data to see if the operation was completed
--- successfully.  If an `error` is present when `g_mount_unmount_with_operation_finish()`
--- is called, then it will be filled with any error information.
---
--- ---
---
---@class Gio.Mount
Gio.Mount = {}

--- # method Gio.Mount:can_eject()
---
--- Checks if `mount` can be ejected.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@return (boolean|nil) # `true` if the `mount` can be ejected.
function Gio.Mount:can_eject() end

--- # method Gio.Mount:can_unmount()
---
--- Checks if `mount` can be unmounted.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@return (boolean|nil) # `true` if the `mount` can be unmounted.
function Gio.Mount:can_unmount() end

--- # method Gio.Mount:eject()
---
--- Ejects a mount. This is an asynchronous operation, and is
--- finished by calling `g_mount_eject_finish()` with the `mount`
--- and `GAsyncResult` data returned in the `callback`.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@param flags Gio.MountUnmountFlags # flags affecting the unmount if required for eject
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`, or `nil`.
---@param user_data? userdata # user data passed to `callback`.
---@return nil
function Gio.Mount:eject(flags, cancellable, callback, user_data) end

--- # method Gio.Mount:eject_finish()
---
--- Finishes ejecting a mount. If any errors occurred during the operation,
--- `error` will be set to contain the errors and `false` will be returned.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` if the mount was successfully ejected. `false` otherwise.
function Gio.Mount:eject_finish(result) end

--- # method Gio.Mount:eject_with_operation()
---
--- Ejects a mount. This is an asynchronous operation, and is
--- finished by calling `g_mount_eject_with_operation_finish()` with the `mount`
--- and `GAsyncResult` data returned in the `callback`.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@param flags Gio.MountUnmountFlags # flags affecting the unmount if required for eject
---@param mount_operation? Gio.MountOperation # a `GMountOperation` or `nil` to avoid user interaction.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`, or `nil`.
---@param user_data? userdata # user data passed to `callback`.
---@return nil
function Gio.Mount:eject_with_operation(flags, mount_operation, cancellable, callback, user_data) end

--- # method Gio.Mount:eject_with_operation_finish()
---
--- Finishes ejecting a mount. If any errors occurred during the operation,
--- `error` will be set to contain the errors and `false` will be returned.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` if the mount was successfully ejected. `false` otherwise.
function Gio.Mount:eject_with_operation_finish(result) end

--- # method Gio.Mount:get_default_location()
---
--- Gets the default location of `mount`. The default location of the given
--- `mount` is a path that reflects the main entry point for the user (e.g.
--- the home directory, or the root of the volume).
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@return Gio.File # a `GFile`. The returned object should be unreffed with `g_object_unref()` when no longer needed.
function Gio.Mount:get_default_location() end

--- # method Gio.Mount:get_drive()
---
--- Gets the drive for the `mount`.
--- 
--- This is a convenience method for getting the `GVolume` and then
--- using that object to get the `GDrive`.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@return Gio.Drive # a `GDrive` or `nil` if `mount` is not associated with a volume or a drive. The returned object should be unreffed with `g_object_unref()` when no longer needed.
function Gio.Mount:get_drive() end

--- # method Gio.Mount:get_icon()
---
--- Gets the icon for `mount`.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@return Gio.Icon # a `GIcon`. The returned object should be unreffed with `g_object_unref()` when no longer needed.
function Gio.Mount:get_icon() end

--- # method Gio.Mount:get_name()
---
--- Gets the name of `mount`.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@return string # the name for the given `mount`. The returned string should be freed with `g_free()` when no longer needed.
function Gio.Mount:get_name() end

--- # method Gio.Mount:get_root()
---
--- Gets the root directory on `mount`.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@return Gio.File # a `GFile`. The returned object should be unreffed with `g_object_unref()` when no longer needed.
function Gio.Mount:get_root() end

--- # method Gio.Mount:get_sort_key()
---
--- Gets the sort key for `mount`, if any.
---
--- ---
---
---@param self Gio.Mount # A `GMount`.
---@return string # Sorting key for `mount` or `nil` if no such key is available.
function Gio.Mount:get_sort_key() end

--- # method Gio.Mount:get_symbolic_icon()
---
--- Gets the symbolic icon for `mount`.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@return Gio.Icon # a `GIcon`. The returned object should be unreffed with `g_object_unref()` when no longer needed.
function Gio.Mount:get_symbolic_icon() end

--- # method Gio.Mount:get_uuid()
---
--- Gets the UUID for the `mount`. The reference is typically based on
--- the file system UUID for the mount in question and should be
--- considered an opaque string. Returns `nil` if there is no UUID
--- available.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@return string # the UUID for `mount` or `nil` if no UUID can be computed. The returned string should be freed with `g_free()` when no longer needed.
function Gio.Mount:get_uuid() end

--- # method Gio.Mount:get_volume()
---
--- Gets the volume for the `mount`.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@return Gio.Volume # a `GVolume` or `nil` if `mount` is not associated with a volume. The returned object should be unreffed with `g_object_unref()` when no longer needed.
function Gio.Mount:get_volume() end

--- # method Gio.Mount:guess_content_type()
---
--- Tries to guess the type of content stored on `mount`. Returns one or
--- more textual identifiers of well-known content types (typically
--- prefixed with "x-content/"), e.g. x-content/image-dcf for camera
--- memory cards. See the
--- [shared-mime-info](http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec)
--- specification for more on x-content types.
--- 
--- This is an asynchronous operation (see
--- `g_mount_guess_content_type_sync()` for the synchronous version), and
--- is finished by calling `g_mount_guess_content_type_finish()` with the
--- `mount` and `GAsyncResult` data returned in the `callback`.
---
--- ---
---
---@param self Gio.Mount # a `GMount`
---@param force_rescan (boolean|nil) # Whether to force a rescan of the content. Otherwise a cached result will be used if available
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`
---@param user_data? userdata # user data passed to `callback`
---@return nil
function Gio.Mount:guess_content_type(force_rescan, cancellable, callback, user_data) end

--- # method Gio.Mount:guess_content_type_finish()
---
--- Finishes guessing content types of `mount`. If any errors occurred
--- during the operation, `error` will be set to contain the errors and
--- `false` will be returned. In particular, you may get an
--- %G_IO_ERROR_NOT_SUPPORTED if the mount does not support content
--- guessing.
---
--- ---
---
---@param self Gio.Mount # a `GMount`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return unknown[] # a `nil`-terminated array of content types or `nil` on error. Caller should free this array with `g_strfreev()` when done with it.
function Gio.Mount:guess_content_type_finish(result) end

--- # method Gio.Mount:guess_content_type_sync()
---
--- Tries to guess the type of content stored on `mount`. Returns one or
--- more textual identifiers of well-known content types (typically
--- prefixed with "x-content/"), e.g. x-content/image-dcf for camera
--- memory cards. See the
--- [shared-mime-info](http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec)
--- specification for more on x-content types.
--- 
--- This is a synchronous operation and as such may block doing IO;
--- see `g_mount_guess_content_type()` for the asynchronous version.
---
--- ---
---
---@param self Gio.Mount # a `GMount`
---@param force_rescan (boolean|nil) # Whether to force a rescan of the content. Otherwise a cached result will be used if available
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return unknown[] # a `nil`-terminated array of content types or `nil` on error. Caller should free this array with `g_strfreev()` when done with it.
function Gio.Mount:guess_content_type_sync(force_rescan, cancellable) end

--- # method Gio.Mount:is_shadowed()
---
--- Determines if `mount` is shadowed. Applications or libraries should
--- avoid displaying `mount` in the user interface if it is shadowed.
--- 
--- A mount is said to be shadowed if there exists one or more user
--- visible objects (currently `GMount` objects) with a root that is
--- inside the root of `mount`.
--- 
--- One application of shadow mounts is when exposing a single file
--- system that is used to address several logical volumes. In this
--- situation, a `GVolumeMonitor` implementation would create two
--- `GVolume` objects (for example, one for the camera functionality of
--- the device and one for a SD card reader on the device) with
--- activation URIs `gphoto2://[usb:001,002]/store1/`
--- and `gphoto2://[usb:001,002]/store2/`. When the
--- underlying mount (with root
--- `gphoto2://[usb:001,002]/`) is mounted, said
--- `GVolumeMonitor` implementation would create two `GMount` objects
--- (each with their root matching the corresponding volume activation
--- root) that would shadow the original mount.
--- 
--- The proxy monitor in GVfs 2.26 and later, automatically creates and
--- manage shadow mounts (and shadows the underlying mount) if the
--- activation root on a `GVolume` is set.
---
--- ---
---
---@param self Gio.Mount # A `GMount`.
---@return (boolean|nil) # `true` if `mount` is shadowed.
function Gio.Mount:is_shadowed() end

--- # method Gio.Mount:remount()
---
--- Remounts a mount. This is an asynchronous operation, and is
--- finished by calling `g_mount_remount_finish()` with the `mount`
--- and `GAsyncResults` data returned in the `callback`.
--- 
--- Remounting is useful when some setting affecting the operation
--- of the volume has been changed, as these may need a remount to
--- take affect. While this is semantically equivalent with unmounting
--- and then remounting not all backends might need to actually be
--- unmounted.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@param flags Gio.MountMountFlags # flags affecting the operation
---@param mount_operation? Gio.MountOperation # a `GMountOperation` or `nil` to avoid user interaction.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`, or `nil`.
---@param user_data? userdata # user data passed to `callback`.
---@return nil
function Gio.Mount:remount(flags, mount_operation, cancellable, callback, user_data) end

--- # method Gio.Mount:remount_finish()
---
--- Finishes remounting a mount. If any errors occurred during the operation,
--- `error` will be set to contain the errors and `false` will be returned.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` if the mount was successfully remounted. `false` otherwise.
function Gio.Mount:remount_finish(result) end

--- # method Gio.Mount:shadow()
---
--- Increments the shadow count on `mount`. Usually used by
--- `GVolumeMonitor` implementations when creating a shadow mount for
--- `mount`, see `g_mount_is_shadowed()` for more information. The caller
--- will need to emit the `GMount`::changed signal on `mount` manually.
---
--- ---
---
---@param self Gio.Mount # A `GMount`.
---@return nil
function Gio.Mount:shadow() end

--- # method Gio.Mount:unmount()
---
--- Unmounts a mount. This is an asynchronous operation, and is
--- finished by calling `g_mount_unmount_finish()` with the `mount`
--- and `GAsyncResult` data returned in the `callback`.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@param flags Gio.MountUnmountFlags # flags affecting the operation
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`, or `nil`.
---@param user_data? userdata # user data passed to `callback`.
---@return nil
function Gio.Mount:unmount(flags, cancellable, callback, user_data) end

--- # method Gio.Mount:unmount_finish()
---
--- Finishes unmounting a mount. If any errors occurred during the operation,
--- `error` will be set to contain the errors and `false` will be returned.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` if the mount was successfully unmounted. `false` otherwise.
function Gio.Mount:unmount_finish(result) end

--- # method Gio.Mount:unmount_with_operation()
---
--- Unmounts a mount. This is an asynchronous operation, and is
--- finished by calling `g_mount_unmount_with_operation_finish()` with the `mount`
--- and `GAsyncResult` data returned in the `callback`.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@param flags Gio.MountUnmountFlags # flags affecting the operation
---@param mount_operation? Gio.MountOperation # a `GMountOperation` or `nil` to avoid user interaction.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`, or `nil`.
---@param user_data? userdata # user data passed to `callback`.
---@return nil
function Gio.Mount:unmount_with_operation(flags, mount_operation, cancellable, callback, user_data) end

--- # method Gio.Mount:unmount_with_operation_finish()
---
--- Finishes unmounting a mount. If any errors occurred during the operation,
--- `error` will be set to contain the errors and `false` will be returned.
---
--- ---
---
---@param self Gio.Mount # a `GMount`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` if the mount was successfully unmounted. `false` otherwise.
function Gio.Mount:unmount_with_operation_finish(result) end

--- # method Gio.Mount:unshadow()
---
--- Decrements the shadow count on `mount`. Usually used by
--- `GVolumeMonitor` implementations when destroying a shadow mount for
--- `mount`, see `g_mount_is_shadowed()` for more information. The caller
--- will need to emit the `GMount`::changed signal on `mount` manually.
---
--- ---
---
---@param self Gio.Mount # A `GMount`.
---@return nil
function Gio.Mount:unshadow() end

--- # record Gio.MountIface
---
--- Interface for implementing operations for mounts.
---
--- ---
---
---@class Gio.MountIface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field changed fun(mount: Gio.Mount): nil
---@field unmounted fun(mount: Gio.Mount): nil
---@field get_root fun(mount: Gio.Mount): Gio.File
---@field get_name fun(mount: Gio.Mount): string
---@field get_icon fun(mount: Gio.Mount): Gio.Icon
---@field get_uuid fun(mount: Gio.Mount): string
---@field get_volume fun(mount: Gio.Mount): Gio.Volume
---@field get_drive fun(mount: Gio.Mount): Gio.Drive
---@field can_unmount fun(mount: Gio.Mount): (boolean|nil)
---@field can_eject fun(mount: Gio.Mount): (boolean|nil)
---@field unmount fun(mount: Gio.Mount, flags: Gio.MountUnmountFlags, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field unmount_finish fun(mount: Gio.Mount, result: Gio.AsyncResult): (boolean|nil)
---@field eject fun(mount: Gio.Mount, flags: Gio.MountUnmountFlags, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field eject_finish fun(mount: Gio.Mount, result: Gio.AsyncResult): (boolean|nil)
---@field remount fun(mount: Gio.Mount, flags: Gio.MountMountFlags, mount_operation: Gio.MountOperation, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field remount_finish fun(mount: Gio.Mount, result: Gio.AsyncResult): (boolean|nil)
---@field guess_content_type fun(mount: Gio.Mount, force_rescan: (boolean|nil), cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field guess_content_type_finish fun(mount: Gio.Mount, result: Gio.AsyncResult): unknown[]
---@field guess_content_type_sync fun(mount: Gio.Mount, force_rescan: (boolean|nil), cancellable: Gio.Cancellable): unknown[]
---@field pre_unmount fun(mount: Gio.Mount): nil
---@field unmount_with_operation fun(mount: Gio.Mount, flags: Gio.MountUnmountFlags, mount_operation: Gio.MountOperation, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field unmount_with_operation_finish fun(mount: Gio.Mount, result: Gio.AsyncResult): (boolean|nil)
---@field eject_with_operation fun(mount: Gio.Mount, flags: Gio.MountUnmountFlags, mount_operation: Gio.MountOperation, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field eject_with_operation_finish fun(mount: Gio.Mount, result: Gio.AsyncResult): (boolean|nil)
---@field get_default_location fun(mount: Gio.Mount): Gio.File
---@field get_sort_key fun(mount: Gio.Mount): string
---@field get_symbolic_icon fun(mount: Gio.Mount): Gio.Icon
Gio.MountIface = {}

---@enum Gio.MountMountFlags
Gio.MountMountFlags = {}

--- # class Gio.MountOperation
---
--- `GMountOperation` provides a mechanism for interacting with the user.
--- It can be used for authenticating mountable operations, such as loop
--- mounting files, hard drive partitions or server locations. It can
--- also be used to ask the user questions or show a list of applications
--- preventing unmount or eject operations from completing.
--- 
--- Note that `GMountOperation` is used for more than just `GMount`
--- objects – for example it is also used in `g_drive_start()` and
--- `g_drive_stop()`.
--- 
--- Users should instantiate a subclass of this that implements all the
--- various callbacks to show the required dialogs, such as
--- `GtkMountOperation`. If no user interaction is desired (for example
--- when automounting filesystems at login time), usually `nil` can be
--- passed, see each method taking a `GMountOperation` for details.
--- 
--- The term ‘TCRYPT’ is used to mean ‘compatible with TrueCrypt and VeraCrypt’.
--- [TrueCrypt](https://en.wikipedia.org/wiki/TrueCrypt) is a discontinued system for
--- encrypting file containers, partitions or whole disks, typically used with Windows.
--- [VeraCrypt](https://www.veracrypt.fr/) is a maintained fork of TrueCrypt with various
--- improvements and auditing fixes.
---
--- ---
---
---@class Gio.MountOperation : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.MountOperationPrivate
---@operator call: Gio.MountOperation
Gio.MountOperation = {}

--- # method Gio.MountOperation:get_anonymous()
---
--- Check to see whether the mount operation is being used
--- for an anonymous user.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@return (boolean|nil) # `true` if mount operation is anonymous.
function Gio.MountOperation:get_anonymous() end

--- # method Gio.MountOperation:get_choice()
---
--- Gets a choice from the mount operation.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@return integer # an integer containing an index of the user's choice from the choice's list, or `0`.
function Gio.MountOperation:get_choice() end

--- # method Gio.MountOperation:get_domain()
---
--- Gets the domain of the mount operation.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@return string # a string set to the domain.
function Gio.MountOperation:get_domain() end

--- # method Gio.MountOperation:get_is_tcrypt_hidden_volume()
---
--- Check to see whether the mount operation is being used
--- for a TCRYPT hidden volume.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@return (boolean|nil) # `true` if mount operation is for hidden volume.
function Gio.MountOperation:get_is_tcrypt_hidden_volume() end

--- # method Gio.MountOperation:get_is_tcrypt_system_volume()
---
--- Check to see whether the mount operation is being used
--- for a TCRYPT system volume.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@return (boolean|nil) # `true` if mount operation is for system volume.
function Gio.MountOperation:get_is_tcrypt_system_volume() end

--- # method Gio.MountOperation:get_password()
---
--- Gets a password from the mount operation.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@return string # a string containing the password within `op`.
function Gio.MountOperation:get_password() end

--- # method Gio.MountOperation:get_password_save()
---
--- Gets the state of saving passwords for the mount operation.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@return Gio.PasswordSave # a `GPasswordSave` flag.
function Gio.MountOperation:get_password_save() end

--- # method Gio.MountOperation:get_pim()
---
--- Gets a PIM from the mount operation.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@return integer # The VeraCrypt PIM within `op`.
function Gio.MountOperation:get_pim() end

--- # method Gio.MountOperation:get_username()
---
--- Get the user name from the mount operation.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@return string # a string containing the user name.
function Gio.MountOperation:get_username() end

--- # method Gio.MountOperation:reply()
---
--- Emits the `GMountOperation`::reply signal.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`
---@param result Gio.MountOperationResult # a `GMountOperationResult`
---@return nil
function Gio.MountOperation:reply(result) end

--- # method Gio.MountOperation:set_anonymous()
---
--- Sets the mount operation to use an anonymous user if `anonymous` is `true`.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@param anonymous (boolean|nil) # boolean value.
---@return nil
function Gio.MountOperation:set_anonymous(anonymous) end

--- # method Gio.MountOperation:set_choice()
---
--- Sets a default choice for the mount operation.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@param choice integer # an integer.
---@return nil
function Gio.MountOperation:set_choice(choice) end

--- # method Gio.MountOperation:set_domain()
---
--- Sets the mount operation's domain.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@param domain? string # the domain to set.
---@return nil
function Gio.MountOperation:set_domain(domain) end

--- # method Gio.MountOperation:set_is_tcrypt_hidden_volume()
---
--- Sets the mount operation to use a hidden volume if `hidden_volume` is `true`.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@param hidden_volume (boolean|nil) # boolean value.
---@return nil
function Gio.MountOperation:set_is_tcrypt_hidden_volume(hidden_volume) end

--- # method Gio.MountOperation:set_is_tcrypt_system_volume()
---
--- Sets the mount operation to use a system volume if `system_volume` is `true`.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@param system_volume (boolean|nil) # boolean value.
---@return nil
function Gio.MountOperation:set_is_tcrypt_system_volume(system_volume) end

--- # method Gio.MountOperation:set_password()
---
--- Sets the mount operation's password to `password`.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@param password? string # password to set.
---@return nil
function Gio.MountOperation:set_password(password) end

--- # method Gio.MountOperation:set_password_save()
---
--- Sets the state of saving passwords for the mount operation.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@param save Gio.PasswordSave # a set of `GPasswordSave` flags.
---@return nil
function Gio.MountOperation:set_password_save(save) end

--- # method Gio.MountOperation:set_pim()
---
--- Sets the mount operation's PIM to `pim`.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@param pim integer # an unsigned integer.
---@return nil
function Gio.MountOperation:set_pim(pim) end

--- # method Gio.MountOperation:set_username()
---
--- Sets the user name within `op` to `username`.
---
--- ---
---
---@param self Gio.MountOperation # a `GMountOperation`.
---@param username? string # input username.
---@return nil
function Gio.MountOperation:set_username(username) end

--- # function Gio.MountOperation.new()
---
--- Creates a new mount operation.
---
--- ---
---
---@return Gio.MountOperation # a `GMountOperation`.
function Gio.MountOperation.new() end

--- # record Gio.MountOperationClass
---
---@class Gio.MountOperationClass
---@field parent_class GObject.ObjectClass
---@field ask_password fun(op: Gio.MountOperation, message: string, default_user: string, default_domain: string, flags: Gio.AskPasswordFlags): nil
---@field ask_question fun(op: Gio.MountOperation, message: string, choices: unknown[]): nil
---@field reply fun(op: Gio.MountOperation, result: Gio.MountOperationResult): nil
---@field aborted fun(op: Gio.MountOperation): nil
---@field show_processes fun(op: Gio.MountOperation, message: string, processes: unknown[], choices: unknown[]): nil
---@field show_unmount_progress fun(op: Gio.MountOperation, message: string, time_left: integer, bytes_left: integer): nil
Gio.MountOperationClass = {}

--- # record Gio.MountOperationPrivate
---
---@class Gio.MountOperationPrivate
Gio.MountOperationPrivate = {}

---@enum Gio.MountOperationResult
Gio.MountOperationResult = {}

---@enum Gio.MountUnmountFlags
Gio.MountUnmountFlags = {}

--- # class Gio.NativeSocketAddress
---
--- A socket address of some unknown native type.
---
--- ---
---
---@class Gio.NativeSocketAddress : Gio.SocketAddress, Gio.SocketConnectable
---@field parent_instance Gio.SocketAddress
---@field priv Gio.NativeSocketAddressPrivate
---@operator call: Gio.NativeSocketAddress
Gio.NativeSocketAddress = {}

--- # function Gio.NativeSocketAddress.new()
---
--- Creates a new `GNativeSocketAddress` for `native` and `len`.
---
--- ---
---
---@param native? userdata # a native address object
---@param len integer # the length of `native`, in bytes
---@return Gio.SocketAddress # a new `GNativeSocketAddress`
function Gio.NativeSocketAddress.new(native, len) end

--- # record Gio.NativeSocketAddressClass
---
---@class Gio.NativeSocketAddressClass
---@field parent_class Gio.SocketAddressClass
Gio.NativeSocketAddressClass = {}

--- # record Gio.NativeSocketAddressPrivate
---
---@class Gio.NativeSocketAddressPrivate
Gio.NativeSocketAddressPrivate = {}

--- # class Gio.NativeVolumeMonitor
---
---@class Gio.NativeVolumeMonitor : Gio.VolumeMonitor
---@field parent_instance Gio.VolumeMonitor
Gio.NativeVolumeMonitor = {}

--- # record Gio.NativeVolumeMonitorClass
---
---@class Gio.NativeVolumeMonitorClass
---@field parent_class Gio.VolumeMonitorClass
Gio.NativeVolumeMonitorClass = {}

--- # class Gio.NetworkAddress
---
--- `GNetworkAddress` provides an easy way to resolve a hostname and
--- then attempt to connect to that host, handling the possibility of
--- multiple IP addresses and multiple address families.
--- 
--- The enumeration results of resolved addresses *may* be cached as long
--- as this object is kept alive which may have unexpected results if
--- alive for too long.
--- 
--- See `GSocketConnectable` for an example of using the connectable
--- interface.
---
--- ---
---
---@class Gio.NetworkAddress : GObject.Object, Gio.SocketConnectable
---@field parent_instance GObject.Object
---@field priv Gio.NetworkAddressPrivate
---@operator call: Gio.NetworkAddress
Gio.NetworkAddress = {}

--- # method Gio.NetworkAddress:get_hostname()
---
--- Gets `addr`'s hostname. This might be either UTF-8 or ASCII-encoded,
--- depending on what `addr` was created with.
---
--- ---
---
---@param self Gio.NetworkAddress # a `GNetworkAddress`
---@return string # `addr`'s hostname
function Gio.NetworkAddress:get_hostname() end

--- # method Gio.NetworkAddress:get_port()
---
--- Gets `addr`'s port number
---
--- ---
---
---@param self Gio.NetworkAddress # a `GNetworkAddress`
---@return integer # `addr`'s port (which may be 0)
function Gio.NetworkAddress:get_port() end

--- # method Gio.NetworkAddress:get_scheme()
---
--- Gets `addr`'s scheme
---
--- ---
---
---@param self Gio.NetworkAddress # a `GNetworkAddress`
---@return string # `addr`'s scheme (`nil` if not built from URI)
function Gio.NetworkAddress:get_scheme() end

--- # function Gio.NetworkAddress.parse()
---
--- Creates a new `GSocketConnectable` for connecting to the given
--- `hostname` and `port`. May fail and return `nil` in case
--- parsing `host_and_port` fails.
--- 
--- `host_and_port` may be in any of a number of recognised formats; an IPv6
--- address, an IPv4 address, or a domain name (in which case a DNS
--- lookup is performed). Quoting with [] is supported for all address
--- types. A port override may be specified in the usual way with a
--- colon.
--- 
--- If no port is specified in `host_and_port` then `default_port` will be
--- used as the port number to connect to.
--- 
--- In general, `host_and_port` is expected to be provided by the user
--- (allowing them to give the hostname, and a port override if necessary)
--- and `default_port` is expected to be provided by the application.
--- 
--- (The port component of `host_and_port` can also be specified as a
--- service name rather than as a numeric port, but this functionality
--- is deprecated, because it depends on the contents of /etc/services,
--- which is generally quite sparse on platforms other than Linux.)
---
--- ---
---
---@param host_and_port string # the hostname and optionally a port
---@param default_port integer # the default port if not in `host_and_port`
---@return Gio.NetworkAddress # the new `GNetworkAddress`, or `nil` on error
function Gio.NetworkAddress.parse(host_and_port, default_port) end

--- # function Gio.NetworkAddress.parse_uri()
---
--- Creates a new `GSocketConnectable` for connecting to the given
--- `uri`. May fail and return `nil` in case parsing `uri` fails.
--- 
--- Using this rather than `g_network_address_new()` or
--- `g_network_address_parse()` allows `GSocketClient` to determine
--- when to use application-specific proxy protocols.
---
--- ---
---
---@param uri string # the hostname and optionally a port
---@param default_port integer # The default port if none is found in the URI
---@return Gio.NetworkAddress # the new `GNetworkAddress`, or `nil` on error
function Gio.NetworkAddress.parse_uri(uri, default_port) end

--- # function Gio.NetworkAddress.new()
---
--- Creates a new `GSocketConnectable` for connecting to the given
--- `hostname` and `port`.
--- 
--- Note that depending on the configuration of the machine, a
--- `hostname` of `localhost` may refer to the IPv4 loopback address
--- only, or to both IPv4 and IPv6; use
--- `g_network_address_new_loopback()` to create a `GNetworkAddress` that
--- is guaranteed to resolve to both addresses.
---
--- ---
---
---@param hostname string # the hostname
---@param port integer # the port
---@return Gio.NetworkAddress # the new `GNetworkAddress`
function Gio.NetworkAddress.new(hostname, port) end

--- # function Gio.NetworkAddress.new_loopback()
---
--- Creates a new `GSocketConnectable` for connecting to the local host
--- over a loopback connection to the given `port`. This is intended for
--- use in connecting to local services which may be running on IPv4 or
--- IPv6.
--- 
--- The connectable will return IPv4 and IPv6 loopback addresses,
--- regardless of how the host resolves `localhost`. By contrast,
--- `g_network_address_new()` will often only return an IPv4 address when
--- resolving `localhost`, and an IPv6 address for `localhost6`.
--- 
--- `g_network_address_get_hostname()` will always return `localhost` for
--- a `GNetworkAddress` created with this constructor.
---
--- ---
---
---@param port integer # the port
---@return Gio.NetworkAddress # the new `GNetworkAddress`
function Gio.NetworkAddress.new_loopback(port) end

--- # record Gio.NetworkAddressClass
---
---@class Gio.NetworkAddressClass
---@field parent_class GObject.ObjectClass
Gio.NetworkAddressClass = {}

--- # record Gio.NetworkAddressPrivate
---
---@class Gio.NetworkAddressPrivate
Gio.NetworkAddressPrivate = {}

---@enum Gio.NetworkConnectivity
Gio.NetworkConnectivity = {}

--- # interface Gio.NetworkMonitor
---
--- `GNetworkMonitor` provides an easy-to-use cross-platform API
--- for monitoring network connectivity. On Linux, the available
--- implementations are based on the kernel's netlink interface and
--- on NetworkManager.
--- 
--- There is also an implementation for use inside Flatpak sandboxes.
---
--- ---
---
---@class Gio.NetworkMonitor
Gio.NetworkMonitor = {}

--- # method Gio.NetworkMonitor:can_reach()
---
--- Attempts to determine whether or not the host pointed to by
--- `connectable` can be reached, without actually trying to connect to
--- it.
--- 
--- This may return `true` even when `GNetworkMonitor`:network-available
--- is `false`, if, for example, `monitor` can determine that
--- `connectable` refers to a host on a local network.
--- 
--- If `monitor` believes that an attempt to connect to `connectable`
--- will succeed, it will return `true`. Otherwise, it will return
--- `false` and set `error` to an appropriate error (such as
--- %G_IO_ERROR_HOST_UNREACHABLE).
--- 
--- Note that although this does not attempt to connect to
--- `connectable`, it may still block for a brief period of time (eg,
--- trying to do multicast DNS on the local network), so if you do not
--- want to block, you should use `g_network_monitor_can_reach_async()`.
---
--- ---
---
---@param self Gio.NetworkMonitor # a `GNetworkMonitor`
---@param connectable Gio.SocketConnectable # a `GSocketConnectable`
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return (boolean|nil) # `true` if `connectable` is reachable, `false` if not.
function Gio.NetworkMonitor:can_reach(connectable, cancellable) end

--- # method Gio.NetworkMonitor:can_reach_async()
---
--- Asynchronously attempts to determine whether or not the host
--- pointed to by `connectable` can be reached, without actually
--- trying to connect to it.
--- 
--- For more details, see `g_network_monitor_can_reach()`.
--- 
--- When the operation is finished, `callback` will be called.
--- You can then call `g_network_monitor_can_reach_finish()`
--- to get the result of the operation.
---
--- ---
---
---@param self Gio.NetworkMonitor # a `GNetworkMonitor`
---@param connectable Gio.SocketConnectable # a `GSocketConnectable`
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.NetworkMonitor:can_reach_async(connectable, cancellable, callback, user_data) end

--- # method Gio.NetworkMonitor:can_reach_finish()
---
--- Finishes an async network connectivity test.
--- See `g_network_monitor_can_reach_async()`.
---
--- ---
---
---@param self Gio.NetworkMonitor # a `GNetworkMonitor`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` if network is reachable, `false` if not.
function Gio.NetworkMonitor:can_reach_finish(result) end

--- # method Gio.NetworkMonitor:get_connectivity()
---
--- Gets a more detailed networking state than
--- `g_network_monitor_get_network_available()`.
--- 
--- If `GNetworkMonitor`:network-available is `false`, then the
--- connectivity state will be %G_NETWORK_CONNECTIVITY_LOCAL.
--- 
--- If `GNetworkMonitor`:network-available is `true`, then the
--- connectivity state will be %G_NETWORK_CONNECTIVITY_FULL (if there
--- is full Internet connectivity), %G_NETWORK_CONNECTIVITY_LIMITED (if
--- the host has a default route, but appears to be unable to actually
--- reach the full Internet), or %G_NETWORK_CONNECTIVITY_PORTAL (if the
--- host is trapped behind a "captive portal" that requires some sort
--- of login or acknowledgement before allowing full Internet access).
--- 
--- Note that in the case of %G_NETWORK_CONNECTIVITY_LIMITED and
--- %G_NETWORK_CONNECTIVITY_PORTAL, it is possible that some sites are
--- reachable but others are not. In this case, applications can
--- attempt to connect to remote servers, but should gracefully fall
--- back to their "offline" behavior if the connection attempt fails.
---
--- ---
---
---@param self Gio.NetworkMonitor # the `GNetworkMonitor`
---@return Gio.NetworkConnectivity # the network connectivity state
function Gio.NetworkMonitor:get_connectivity() end

--- # method Gio.NetworkMonitor:get_network_available()
---
--- Checks if the network is available. "Available" here means that the
--- system has a default route available for at least one of IPv4 or
--- IPv6. It does not necessarily imply that the public Internet is
--- reachable. See `GNetworkMonitor`:network-available for more details.
---
--- ---
---
---@param self Gio.NetworkMonitor # the `GNetworkMonitor`
---@return (boolean|nil) # whether the network is available
function Gio.NetworkMonitor:get_network_available() end

--- # method Gio.NetworkMonitor:get_network_metered()
---
--- Checks if the network is metered.
--- See `GNetworkMonitor`:network-metered for more details.
---
--- ---
---
---@param self Gio.NetworkMonitor # the `GNetworkMonitor`
---@return (boolean|nil) # whether the connection is metered
function Gio.NetworkMonitor:get_network_metered() end

--- # function Gio.NetworkMonitor.get_default()
---
--- Gets the default `GNetworkMonitor` for the system.
---
--- ---
---
---@return Gio.NetworkMonitor # a `GNetworkMonitor`, which will be a dummy object if no network monitor is available
function Gio.NetworkMonitor.get_default() end

--- # record Gio.NetworkMonitorInterface
---
--- The virtual function table for `GNetworkMonitor`.
---
--- ---
---
---@class Gio.NetworkMonitorInterface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field network_changed fun(monitor: Gio.NetworkMonitor, network_available: (boolean|nil)): nil
---@field can_reach fun(monitor: Gio.NetworkMonitor, connectable: Gio.SocketConnectable, cancellable: Gio.Cancellable): (boolean|nil)
---@field can_reach_async fun(monitor: Gio.NetworkMonitor, connectable: Gio.SocketConnectable, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field can_reach_finish fun(monitor: Gio.NetworkMonitor, result: Gio.AsyncResult): (boolean|nil)
Gio.NetworkMonitorInterface = {}

--- # class Gio.NetworkService
---
--- Like `GNetworkAddress` does with hostnames, `GNetworkService`
--- provides an easy way to resolve a SRV record, and then attempt to
--- connect to one of the hosts that implements that service, handling
--- service priority/weighting, multiple IP addresses, and multiple
--- address families.
--- 
--- See `GSrvTarget` for more information about SRV records, and see
--- `GSocketConnectable` for an example of using the connectable
--- interface.
---
--- ---
---
---@class Gio.NetworkService : GObject.Object, Gio.SocketConnectable
---@field parent_instance GObject.Object
---@field priv Gio.NetworkServicePrivate
---@operator call: Gio.NetworkService
Gio.NetworkService = {}

--- # method Gio.NetworkService:get_domain()
---
--- Gets the domain that `srv` serves. This might be either UTF-8 or
--- ASCII-encoded, depending on what `srv` was created with.
---
--- ---
---
---@param self Gio.NetworkService # a `GNetworkService`
---@return string # `srv`'s domain name
function Gio.NetworkService:get_domain() end

--- # method Gio.NetworkService:get_protocol()
---
--- Gets `srv`'s protocol name (eg, "tcp").
---
--- ---
---
---@param self Gio.NetworkService # a `GNetworkService`
---@return string # `srv`'s protocol name
function Gio.NetworkService:get_protocol() end

--- # method Gio.NetworkService:get_scheme()
---
--- Gets the URI scheme used to resolve proxies. By default, the service name
--- is used as scheme.
---
--- ---
---
---@param self Gio.NetworkService # a `GNetworkService`
---@return string # `srv`'s scheme name
function Gio.NetworkService:get_scheme() end

--- # method Gio.NetworkService:get_service()
---
--- Gets `srv`'s service name (eg, "ldap").
---
--- ---
---
---@param self Gio.NetworkService # a `GNetworkService`
---@return string # `srv`'s service name
function Gio.NetworkService:get_service() end

--- # method Gio.NetworkService:set_scheme()
---
--- Set's the URI scheme used to resolve proxies. By default, the service name
--- is used as scheme.
---
--- ---
---
---@param self Gio.NetworkService # a `GNetworkService`
---@param scheme string # a URI scheme
---@return nil
function Gio.NetworkService:set_scheme(scheme) end

--- # function Gio.NetworkService.new()
---
--- Creates a new `GNetworkService` representing the given `service`,
--- `protocol`, and `domain`. This will initially be unresolved; use the
--- `GSocketConnectable` interface to resolve it.
---
--- ---
---
---@param service string # the service type to look up (eg, "ldap")
---@param protocol string # the networking protocol to use for `service` (eg, "tcp")
---@param domain string # the DNS domain to look up the service in
---@return Gio.NetworkService # a new `GNetworkService`
function Gio.NetworkService.new(service, protocol, domain) end

--- # record Gio.NetworkServiceClass
---
---@class Gio.NetworkServiceClass
---@field parent_class GObject.ObjectClass
Gio.NetworkServiceClass = {}

--- # record Gio.NetworkServicePrivate
---
---@class Gio.NetworkServicePrivate
Gio.NetworkServicePrivate = {}

--- # class Gio.Notification
---
--- `GNotification` is a mechanism for creating a notification to be shown
--- to the user -- typically as a pop-up notification presented by the
--- desktop environment shell.
--- 
--- The key difference between `GNotification` and other similar APIs is
--- that, if supported by the desktop environment, notifications sent
--- with `GNotification` will persist after the application has exited,
--- and even across system reboots.
--- 
--- Since the user may click on a notification while the application is
--- not running, applications using `GNotification` should be able to be
--- started as a D-Bus service, using `GApplication`.
--- 
--- In order for `GNotification` to work, the application must have installed
--- a `.desktop` file. For example:
--- ```c
---  [Desktop Entry]
---   Name=Test Application
---   Comment=Description of what Test Application does
---   Exec=gnome-test-application
---   Icon=org.gnome.TestApplication
---   Terminal=false
---   Type=Application
---   Categories=GNOME;GTK;TestApplication Category;
---   StartupNotify=true
---   DBusActivatable=true
---   X-GNOME-UsesNotifications=true
--- ```
--- 
--- The `X-GNOME-UsesNotifications` key indicates to GNOME Control Center
--- that this application uses notifications, so it can be listed in the
--- Control Center’s ‘Notifications’ panel.
--- 
--- The `.desktop` file must be named as `org.gnome.TestApplication.desktop`,
--- where `org.gnome.TestApplication` is the ID passed to `g_application_new()`.
--- 
--- User interaction with a notification (either the default action, or
--- buttons) must be associated with actions on the application (ie:
--- "app." actions).  It is not possible to route user interaction
--- through the notification itself, because the object will not exist if
--- the application is autostarted as a result of a notification being
--- clicked.
--- 
--- A notification can be sent with `g_application_send_notification()`.
---
--- ---
---
---@class Gio.Notification : GObject.Object
---@operator call: Gio.Notification
Gio.Notification = {}

--- # method Gio.Notification:add_button()
---
--- Adds a button to `notification` that activates the action in
--- `detailed_action` when clicked. That action must be an
--- application-wide action (starting with "app."). If `detailed_action`
--- contains a target, the action will be activated with that target as
--- its parameter.
--- 
--- See `g_action_parse_detailed_name()` for a description of the format
--- for `detailed_action`.
---
--- ---
---
---@param self Gio.Notification # a `GNotification`
---@param label string # label of the button
---@param detailed_action string # a detailed action name
---@return nil
function Gio.Notification:add_button(label, detailed_action) end

--- # method Gio.Notification:add_button_with_target()
---
--- Adds a button to `notification` that activates `action` when clicked.
--- `action` must be an application-wide action (it must start with "app.").
--- 
--- If `target` is non-`nil`, `action` will be activated with `target` as
--- its parameter.
---
--- ---
---
---@param self Gio.Notification # a `GNotification`
---@param label string # label of the button
---@param action string # an action name
---@param target? GLib.Variant # a `GVariant` to use as `action`'s parameter, or `nil`
---@return nil
function Gio.Notification:add_button_with_target(label, action, target) end

--- # method Gio.Notification:set_body()
---
--- Sets the body of `notification` to `body`.
---
--- ---
---
---@param self Gio.Notification # a `GNotification`
---@param body? string # the new body for `notification`, or `nil`
---@return nil
function Gio.Notification:set_body(body) end

--- # method Gio.Notification:set_category()
---
--- Sets the type of `notification` to `category`. Categories have a main
--- type like `email`, `im` or `device` and can have a detail separated
--- by a `.`, e.g. `im.received` or `email.arrived`. Setting the category
--- helps the notification server to select proper feedback to the user.
--- 
--- Standard categories are [listed in the specification](https://specifications.freedesktop.org/notification-spec/latest/ar01s06.html).
---
--- ---
---
---@param self Gio.Notification # a `GNotification`
---@param category? string # the category for `notification`, or `nil` for no category
---@return nil
function Gio.Notification:set_category(category) end

--- # method Gio.Notification:set_default_action()
---
--- Sets the default action of `notification` to `detailed_action`. This
--- action is activated when the notification is clicked on.
--- 
--- The action in `detailed_action` must be an application-wide action (it
--- must start with "app."). If `detailed_action` contains a target, the
--- given action will be activated with that target as its parameter.
--- See `g_action_parse_detailed_name()` for a description of the format
--- for `detailed_action`.
--- 
--- When no default action is set, the application that the notification
--- was sent on is activated.
---
--- ---
---
---@param self Gio.Notification # a `GNotification`
---@param detailed_action string # a detailed action name
---@return nil
function Gio.Notification:set_default_action(detailed_action) end

--- # method Gio.Notification:set_default_action_and_target()
---
--- Sets the default action of `notification` to `action`. This action is
--- activated when the notification is clicked on. It must be an
--- application-wide action (start with "app.").
--- 
--- If `target` is non-`nil`, `action` will be activated with `target` as
--- its parameter. If `target` is floating, it will be consumed.
--- 
--- When no default action is set, the application that the notification
--- was sent on is activated.
---
--- ---
---
---@param self Gio.Notification # a `GNotification`
---@param action string # an action name
---@param target? GLib.Variant # a `GVariant` to use as `action`'s parameter, or `nil`
---@return nil
function Gio.Notification:set_default_action_and_target(action, target) end

--- # method Gio.Notification:set_icon()
---
--- Sets the icon of `notification` to `icon`.
---
--- ---
---
---@param self Gio.Notification # a `GNotification`
---@param icon Gio.Icon # the icon to be shown in `notification`, as a `GIcon`
---@return nil
function Gio.Notification:set_icon(icon) end

--- # method Gio.Notification:set_priority()
---
--- Sets the priority of `notification` to `priority`. See
--- `GNotificationPriority` for possible values.
---
--- ---
---
---@param self Gio.Notification # a `GNotification`
---@param priority Gio.NotificationPriority # a `GNotificationPriority`
---@return nil
function Gio.Notification:set_priority(priority) end

--- # method Gio.Notification:set_title()
---
--- Sets the title of `notification` to `title`.
---
--- ---
---
---@param self Gio.Notification # a `GNotification`
---@param title string # the new title for `notification`
---@return nil
function Gio.Notification:set_title(title) end

--- # method Gio.Notification:set_urgent()
---
--- Deprecated in favor of `g_notification_set_priority()`.
---
--- ---
---
---@param self Gio.Notification # a `GNotification`
---@param urgent (boolean|nil) # `true` if `notification` is urgent
---@return nil
function Gio.Notification:set_urgent(urgent) end

--- # function Gio.Notification.new()
---
--- Creates a new `GNotification` with `title` as its title.
--- 
--- After populating `notification` with more details, it can be sent to
--- the desktop shell with `g_application_send_notification()`. Changing
--- any properties after this call will not have any effect until
--- resending `notification`.
---
--- ---
---
---@param title string # the title of the notification
---@return Gio.Notification # a new `GNotification` instance
function Gio.Notification.new(title) end

---@enum Gio.NotificationPriority
Gio.NotificationPriority = {}

--- # record Gio.OutputMessage
---
--- Structure used for scatter/gather data output when sending multiple
--- messages or packets in one go. You generally pass in an array of
--- `GOutputVectors` and the operation will use all the buffers as if they
--- were one buffer.
--- 
--- If `address` is `nil` then the message is sent to the default receiver
--- (as previously set by `g_socket_connect()`).
---
--- ---
---
---@class Gio.OutputMessage
---@field address Gio.SocketAddress # a `GSocketAddress`, or `nil`
---@field vectors Gio.OutputVector # pointer to an array of output vectors
---@field num_vectors integer # the number of output vectors pointed to by `vectors`.
---@field bytes_sent integer # initialize to 0. Will be set to the number of bytes that have been sent
---@field control_messages unknown[] # a pointer to an array of `GSocketControlMessages`, or `nil`.
---@field num_control_messages integer # number of elements in `control_messages`.
Gio.OutputMessage = {}

--- # class Gio.OutputStream
---
--- `GOutputStream` has functions to write to a stream (`g_output_stream_write()`),
--- to close a stream (`g_output_stream_close()`) and to flush pending writes
--- (`g_output_stream_flush()`).
--- 
--- To copy the content of an input stream to an output stream without
--- manually handling the reads and writes, use `g_output_stream_splice()`.
--- 
--- See the documentation for `GIOStream` for details of thread safety of
--- streaming APIs.
--- 
--- All of these functions have async variants too.
---
--- ---
---
---@class Gio.OutputStream : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.OutputStreamPrivate
Gio.OutputStream = {}

--- # method Gio.OutputStream:clear_pending()
---
--- Clears the pending flag on `stream`.
---
--- ---
---
---@param self Gio.OutputStream # output stream
---@return nil
function Gio.OutputStream:clear_pending() end

--- # method Gio.OutputStream:close()
---
--- Closes the stream, releasing resources related to it.
--- 
--- Once the stream is closed, all other operations will return %G_IO_ERROR_CLOSED.
--- Closing a stream multiple times will not return an error.
--- 
--- Closing a stream will automatically flush any outstanding buffers in the
--- stream.
--- 
--- Streams will be automatically closed when the last reference
--- is dropped, but you might want to call this function to make sure
--- resources are released as early as possible.
--- 
--- Some streams might keep the backing store of the stream (e.g. a file descriptor)
--- open after the stream is closed. See the documentation for the individual
--- stream for details.
--- 
--- On failure the first error that happened will be reported, but the close
--- operation will finish as much as possible. A stream that failed to
--- close will still return %G_IO_ERROR_CLOSED for all operations. Still, it
--- is important to check and report the error to the user, otherwise
--- there might be a loss of data as all data might not be written.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
--- Cancelling a close will still leave the stream closed, but there some streams
--- can use a faster close that doesn't block to e.g. check errors. On
--- cancellation (as with any error) there is no guarantee that all written
--- data will reach the target.
---
--- ---
---
---@param self Gio.OutputStream # A `GOutputStream`.
---@param cancellable? Gio.Cancellable # optional cancellable object
---@return (boolean|nil) # `true` on success, `false` on failure
function Gio.OutputStream:close(cancellable) end

--- # method Gio.OutputStream:close_async()
---
--- Requests an asynchronous close of the stream, releasing resources
--- related to it. When the operation is finished `callback` will be
--- called. You can then call `g_output_stream_close_finish()` to get
--- the result of the operation.
--- 
--- For behaviour details see `g_output_stream_close()`.
--- 
--- The asynchronous methods have a default fallback that uses threads
--- to implement asynchronicity, so they are optional for inheriting
--- classes. However, if you override one you must override all.
---
--- ---
---
---@param self Gio.OutputStream # A `GOutputStream`.
---@param io_priority integer # the io priority of the request.
---@param cancellable? Gio.Cancellable # optional cancellable object
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.OutputStream:close_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.OutputStream:close_finish()
---
--- Closes an output stream.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` if stream was successfully closed, `false` otherwise.
function Gio.OutputStream:close_finish(result) end

--- # method Gio.OutputStream:flush()
---
--- Forces a write of all user-space buffered data for the given
--- `stream`. Will block during the operation. Closing the stream will
--- implicitly cause a flush.
--- 
--- This function is optional for inherited classes.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@param cancellable? Gio.Cancellable # optional cancellable object
---@return (boolean|nil) # `true` on success, `false` on error
function Gio.OutputStream:flush(cancellable) end

--- # method Gio.OutputStream:flush_async()
---
--- Forces an asynchronous write of all user-space buffered data for
--- the given `stream`.
--- For behaviour details see `g_output_stream_flush()`.
--- 
--- When the operation is finished `callback` will be
--- called. You can then call `g_output_stream_flush_finish()` to get the
--- result of the operation.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@param io_priority integer # the io priority of the request.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.OutputStream:flush_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.OutputStream:flush_finish()
---
--- Finishes flushing an output stream.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@param result Gio.AsyncResult # a GAsyncResult.
---@return (boolean|nil) # `true` if flush operation succeeded, `false` otherwise.
function Gio.OutputStream:flush_finish(result) end

--- # method Gio.OutputStream:has_pending()
---
--- Checks if an output stream has pending actions.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@return (boolean|nil) # `true` if `stream` has pending actions.
function Gio.OutputStream:has_pending() end

--- # method Gio.OutputStream:is_closed()
---
--- Checks if an output stream has already been closed.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@return (boolean|nil) # `true` if `stream` is closed. `false` otherwise.
function Gio.OutputStream:is_closed() end

--- # method Gio.OutputStream:is_closing()
---
--- Checks if an output stream is being closed. This can be
--- used inside e.g. a flush implementation to see if the
--- flush (or other i/o operation) is called from within
--- the closing operation.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@return (boolean|nil) # `true` if `stream` is being closed. `false` otherwise.
function Gio.OutputStream:is_closing() end

--- # method Gio.OutputStream:set_pending()
---
--- Sets `stream` to have actions pending. If the pending flag is
--- already set or `stream` is closed, it will return `false` and set
--- `error`.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@return (boolean|nil) # `true` if pending was previously unset and is now set.
function Gio.OutputStream:set_pending() end

--- # method Gio.OutputStream:splice()
---
--- Splices an input stream into an output stream.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@param source Gio.InputStream # a `GInputStream`.
---@param flags Gio.OutputStreamSpliceFlags # a set of `GOutputStreamSpliceFlags`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return integer # a `gssize` containing the size of the data spliced, or -1 if an error occurred. Note that if the number of bytes spliced is greater than %G_MAXSSIZE, then that will be returned, and there is no way to determine the actual number of bytes spliced.
function Gio.OutputStream:splice(source, flags, cancellable) end

--- # method Gio.OutputStream:splice_async()
---
--- Splices a stream asynchronously.
--- When the operation is finished `callback` will be called.
--- You can then call `g_output_stream_splice_finish()` to get the
--- result of the operation.
--- 
--- For the synchronous, blocking version of this function, see
--- `g_output_stream_splice()`.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@param source Gio.InputStream # a `GInputStream`.
---@param flags Gio.OutputStreamSpliceFlags # a set of `GOutputStreamSpliceFlags`.
---@param io_priority integer # the io priority of the request.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`.
---@param user_data? userdata # user data passed to `callback`.
---@return nil
function Gio.OutputStream:splice_async(source, flags, io_priority, cancellable, callback, user_data) end

--- # method Gio.OutputStream:splice_finish()
---
--- Finishes an asynchronous stream splice operation.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return integer # a `gssize` of the number of bytes spliced. Note that if the number of bytes spliced is greater than %G_MAXSSIZE, then that will be returned, and there is no way to determine the actual number of bytes spliced.
function Gio.OutputStream:splice_finish(result) end

--- # method Gio.OutputStream:write()
---
--- Tries to write `count` bytes from `buffer` into the stream. Will block
--- during the operation.
--- 
--- If count is 0, returns 0 and does nothing. A value of `count`
--- larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.
--- 
--- On success, the number of bytes written to the stream is returned.
--- It is not an error if this is not the same as the requested size, as it
--- can happen e.g. on a partial I/O error, or if there is not enough
--- storage in the stream. All writes block until at least one byte
--- is written or an error occurs; 0 is never returned (unless
--- `count` is 0).
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
--- operation was partially finished when the operation was cancelled the
--- partial result will be returned, without an error.
--- 
--- On error -1 is returned and `error` is set accordingly.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@param buffer unknown[] # the buffer containing the data to write.
---@param count integer # the number of bytes to write
---@param cancellable? Gio.Cancellable # optional cancellable object
---@return integer # Number of bytes written, or -1 on error
function Gio.OutputStream:write(buffer, count, cancellable) end

--- # method Gio.OutputStream:write_all()
---
--- Tries to write `count` bytes from `buffer` into the stream. Will block
--- during the operation.
--- 
--- This function is similar to `g_output_stream_write()`, except it tries to
--- write as many bytes as requested, only stopping on an error.
--- 
--- On a successful write of `count` bytes, `true` is returned, and `bytes_written`
--- is set to `count`.
--- 
--- If there is an error during the operation `false` is returned and `error`
--- is set to indicate the error status.
--- 
--- As a special exception to the normal conventions for functions that
--- use `GError`, if this function returns `false` (and sets `error`) then
--- `bytes_written` will be set to the number of bytes that were
--- successfully written before the error was encountered.  This
--- functionality is only available from C.  If you need it from another
--- language then you must write your own loop around
--- `g_output_stream_write()`.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@param buffer unknown[] # the buffer containing the data to write.
---@param count integer # the number of bytes to write
---@param bytes_written? integer # location to store the number of bytes that was written to the stream
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `true` on success, `false` if there was an error
function Gio.OutputStream:write_all(buffer, count, bytes_written, cancellable) end

--- # method Gio.OutputStream:write_all_async()
---
--- Request an asynchronous write of `count` bytes from `buffer` into
--- the stream. When the operation is finished `callback` will be called.
--- You can then call `g_output_stream_write_all_finish()` to get the result of the
--- operation.
--- 
--- This is the asynchronous version of `g_output_stream_write_all()`.
--- 
--- Call `g_output_stream_write_all_finish()` to collect the result.
--- 
--- Any outstanding I/O request with higher priority (lower numerical
--- value) will be executed before an outstanding request with lower
--- priority. Default priority is %G_PRIORITY_DEFAULT.
--- 
--- Note that no copy of `buffer` will be made, so it must stay valid
--- until `callback` is called.
---
--- ---
---
---@param self Gio.OutputStream # A `GOutputStream`
---@param buffer unknown[] # the buffer containing the data to write
---@param count integer # the number of bytes to write
---@param io_priority integer # the io priority of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.OutputStream:write_all_async(buffer, count, io_priority, cancellable, callback, user_data) end

--- # method Gio.OutputStream:write_all_finish()
---
--- Finishes an asynchronous stream write operation started with
--- `g_output_stream_write_all_async()`.
--- 
--- As a special exception to the normal conventions for functions that
--- use `GError`, if this function returns `false` (and sets `error`) then
--- `bytes_written` will be set to the number of bytes that were
--- successfully written before the error was encountered.  This
--- functionality is only available from C.  If you need it from another
--- language then you must write your own loop around
--- `g_output_stream_write_async()`.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@param bytes_written? integer # location to store the number of bytes that was written to the stream
---@return (boolean|nil) # `true` on success, `false` if there was an error
function Gio.OutputStream:write_all_finish(result, bytes_written) end

--- # method Gio.OutputStream:write_async()
---
--- Request an asynchronous write of `count` bytes from `buffer` into
--- the stream. When the operation is finished `callback` will be called.
--- You can then call `g_output_stream_write_finish()` to get the result of the
--- operation.
--- 
--- During an async request no other sync and async calls are allowed,
--- and will result in %G_IO_ERROR_PENDING errors.
--- 
--- A value of `count` larger than %G_MAXSSIZE will cause a
--- %G_IO_ERROR_INVALID_ARGUMENT error.
--- 
--- On success, the number of bytes written will be passed to the
--- `callback`. It is not an error if this is not the same as the
--- requested size, as it can happen e.g. on a partial I/O error,
--- but generally we try to write as many bytes as requested.
--- 
--- You are guaranteed that this method will never fail with
--- %G_IO_ERROR_WOULD_BLOCK - if `stream` can't accept more data, the
--- method will just wait until this changes.
--- 
--- Any outstanding I/O request with higher priority (lower numerical
--- value) will be executed before an outstanding request with lower
--- priority. Default priority is %G_PRIORITY_DEFAULT.
--- 
--- The asynchronous methods have a default fallback that uses threads
--- to implement asynchronicity, so they are optional for inheriting
--- classes. However, if you override one you must override all.
--- 
--- For the synchronous, blocking version of this function, see
--- `g_output_stream_write()`.
--- 
--- Note that no copy of `buffer` will be made, so it must stay valid
--- until `callback` is called. See `g_output_stream_write_bytes_async()`
--- for a `GBytes` version that will automatically hold a reference to
--- the contents (without copying) for the duration of the call.
---
--- ---
---
---@param self Gio.OutputStream # A `GOutputStream`.
---@param buffer unknown[] # the buffer containing the data to write.
---@param count integer # the number of bytes to write
---@param io_priority integer # the io priority of the request.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.OutputStream:write_async(buffer, count, io_priority, cancellable, callback, user_data) end

--- # method Gio.OutputStream:write_bytes()
---
--- A wrapper function for `g_output_stream_write()` which takes a
--- `GBytes` as input.  This can be more convenient for use by language
--- bindings or in other cases where the refcounted nature of `GBytes`
--- is helpful over a bare pointer interface.
--- 
--- However, note that this function may still perform partial writes,
--- just like `g_output_stream_write()`.  If that occurs, to continue
--- writing, you will need to create a new `GBytes` containing just the
--- remaining bytes, using `g_bytes_new_from_bytes()`. Passing the same
--- `GBytes` instance multiple times potentially can result in duplicated
--- data in the output stream.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@param bytes GLib.Bytes # the `GBytes` to write
---@param cancellable? Gio.Cancellable # optional cancellable object
---@return integer # Number of bytes written, or -1 on error
function Gio.OutputStream:write_bytes(bytes, cancellable) end

--- # method Gio.OutputStream:write_bytes_async()
---
--- This function is similar to `g_output_stream_write_async()`, but
--- takes a `GBytes` as input.  Due to the refcounted nature of `GBytes`,
--- this allows the stream to avoid taking a copy of the data.
--- 
--- However, note that this function may still perform partial writes,
--- just like `g_output_stream_write_async()`. If that occurs, to continue
--- writing, you will need to create a new `GBytes` containing just the
--- remaining bytes, using `g_bytes_new_from_bytes()`. Passing the same
--- `GBytes` instance multiple times potentially can result in duplicated
--- data in the output stream.
--- 
--- For the synchronous, blocking version of this function, see
--- `g_output_stream_write_bytes()`.
---
--- ---
---
---@param self Gio.OutputStream # A `GOutputStream`.
---@param bytes GLib.Bytes # The bytes to write
---@param io_priority integer # the io priority of the request.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.OutputStream:write_bytes_async(bytes, io_priority, cancellable, callback, user_data) end

--- # method Gio.OutputStream:write_bytes_finish()
---
--- Finishes a stream write-from-`GBytes` operation.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return integer # a `gssize` containing the number of bytes written to the stream.
function Gio.OutputStream:write_bytes_finish(result) end

--- # method Gio.OutputStream:write_finish()
---
--- Finishes a stream write operation.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return integer # a `gssize` containing the number of bytes written to the stream.
function Gio.OutputStream:write_finish(result) end

--- # method Gio.OutputStream:writev()
---
--- Tries to write the bytes contained in the `n_vectors` `vectors` into the
--- stream. Will block during the operation.
--- 
--- If `n_vectors` is 0 or the sum of all bytes in `vectors` is 0, returns 0 and
--- does nothing.
--- 
--- On success, the number of bytes written to the stream is returned.
--- It is not an error if this is not the same as the requested size, as it
--- can happen e.g. on a partial I/O error, or if there is not enough
--- storage in the stream. All writes block until at least one byte
--- is written or an error occurs; 0 is never returned (unless
--- `n_vectors` is 0 or the sum of all bytes in `vectors` is 0).
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
--- operation was partially finished when the operation was cancelled the
--- partial result will be returned, without an error.
--- 
--- Some implementations of `g_output_stream_writev()` may have limitations on the
--- aggregate buffer size, and will return %G_IO_ERROR_INVALID_ARGUMENT if these
--- are exceeded. For example, when writing to a local file on UNIX platforms,
--- the aggregate buffer size must not exceed %G_MAXSSIZE bytes.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@param vectors unknown[] # the buffer containing the `GOutputVectors` to write.
---@param n_vectors integer # the number of vectors to write
---@param bytes_written? integer # location to store the number of bytes that were written to the stream
---@param cancellable? Gio.Cancellable # optional cancellable object
---@return (boolean|nil) # `true` on success, `false` if there was an error
function Gio.OutputStream:writev(vectors, n_vectors, bytes_written, cancellable) end

--- # method Gio.OutputStream:writev_all()
---
--- Tries to write the bytes contained in the `n_vectors` `vectors` into the
--- stream. Will block during the operation.
--- 
--- This function is similar to `g_output_stream_writev()`, except it tries to
--- write as many bytes as requested, only stopping on an error.
--- 
--- On a successful write of all `n_vectors` vectors, `true` is returned, and
--- `bytes_written` is set to the sum of all the sizes of `vectors`.
--- 
--- If there is an error during the operation `false` is returned and `error`
--- is set to indicate the error status.
--- 
--- As a special exception to the normal conventions for functions that
--- use `GError`, if this function returns `false` (and sets `error`) then
--- `bytes_written` will be set to the number of bytes that were
--- successfully written before the error was encountered.  This
--- functionality is only available from C. If you need it from another
--- language then you must write your own loop around
--- `g_output_stream_write()`.
--- 
--- The content of the individual elements of `vectors` might be changed by this
--- function.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@param vectors unknown[] # the buffer containing the `GOutputVectors` to write.
---@param n_vectors integer # the number of vectors to write
---@param bytes_written? integer # location to store the number of bytes that were written to the stream
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `true` on success, `false` if there was an error
function Gio.OutputStream:writev_all(vectors, n_vectors, bytes_written, cancellable) end

--- # method Gio.OutputStream:writev_all_async()
---
--- Request an asynchronous write of the bytes contained in the `n_vectors` `vectors` into
--- the stream. When the operation is finished `callback` will be called.
--- You can then call `g_output_stream_writev_all_finish()` to get the result of the
--- operation.
--- 
--- This is the asynchronous version of `g_output_stream_writev_all()`.
--- 
--- Call `g_output_stream_writev_all_finish()` to collect the result.
--- 
--- Any outstanding I/O request with higher priority (lower numerical
--- value) will be executed before an outstanding request with lower
--- priority. Default priority is %G_PRIORITY_DEFAULT.
--- 
--- Note that no copy of `vectors` will be made, so it must stay valid
--- until `callback` is called. The content of the individual elements
--- of `vectors` might be changed by this function.
---
--- ---
---
---@param self Gio.OutputStream # A `GOutputStream`
---@param vectors unknown[] # the buffer containing the `GOutputVectors` to write.
---@param n_vectors integer # the number of vectors to write
---@param io_priority integer # the I/O priority of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.OutputStream:writev_all_async(vectors, n_vectors, io_priority, cancellable, callback, user_data) end

--- # method Gio.OutputStream:writev_all_finish()
---
--- Finishes an asynchronous stream write operation started with
--- `g_output_stream_writev_all_async()`.
--- 
--- As a special exception to the normal conventions for functions that
--- use `GError`, if this function returns `false` (and sets `error`) then
--- `bytes_written` will be set to the number of bytes that were
--- successfully written before the error was encountered.  This
--- functionality is only available from C.  If you need it from another
--- language then you must write your own loop around
--- `g_output_stream_writev_async()`.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@param bytes_written? integer # location to store the number of bytes that were written to the stream
---@return (boolean|nil) # `true` on success, `false` if there was an error
function Gio.OutputStream:writev_all_finish(result, bytes_written) end

--- # method Gio.OutputStream:writev_async()
---
--- Request an asynchronous write of the bytes contained in `n_vectors` `vectors` into
--- the stream. When the operation is finished `callback` will be called.
--- You can then call `g_output_stream_writev_finish()` to get the result of the
--- operation.
--- 
--- During an async request no other sync and async calls are allowed,
--- and will result in %G_IO_ERROR_PENDING errors.
--- 
--- On success, the number of bytes written will be passed to the
--- `callback`. It is not an error if this is not the same as the
--- requested size, as it can happen e.g. on a partial I/O error,
--- but generally we try to write as many bytes as requested.
--- 
--- You are guaranteed that this method will never fail with
--- %G_IO_ERROR_WOULD_BLOCK — if `stream` can't accept more data, the
--- method will just wait until this changes.
--- 
--- Any outstanding I/O request with higher priority (lower numerical
--- value) will be executed before an outstanding request with lower
--- priority. Default priority is %G_PRIORITY_DEFAULT.
--- 
--- The asynchronous methods have a default fallback that uses threads
--- to implement asynchronicity, so they are optional for inheriting
--- classes. However, if you override one you must override all.
--- 
--- For the synchronous, blocking version of this function, see
--- `g_output_stream_writev()`.
--- 
--- Note that no copy of `vectors` will be made, so it must stay valid
--- until `callback` is called.
---
--- ---
---
---@param self Gio.OutputStream # A `GOutputStream`.
---@param vectors unknown[] # the buffer containing the `GOutputVectors` to write.
---@param n_vectors integer # the number of vectors to write
---@param io_priority integer # the I/O priority of the request.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # callback to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.OutputStream:writev_async(vectors, n_vectors, io_priority, cancellable, callback, user_data) end

--- # method Gio.OutputStream:writev_finish()
---
--- Finishes a stream writev operation.
---
--- ---
---
---@param self Gio.OutputStream # a `GOutputStream`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@param bytes_written? integer # location to store the number of bytes that were written to the stream
---@return (boolean|nil) # `true` on success, `false` if there was an error
function Gio.OutputStream:writev_finish(result, bytes_written) end

--- # record Gio.OutputStreamClass
---
---@class Gio.OutputStreamClass
---@field parent_class GObject.ObjectClass
---@field write_fn fun(stream: Gio.OutputStream, buffer: unknown[], count: integer, cancellable: Gio.Cancellable): integer
---@field splice fun(stream: Gio.OutputStream, source: Gio.InputStream, flags: Gio.OutputStreamSpliceFlags, cancellable: Gio.Cancellable): integer
---@field flush fun(stream: Gio.OutputStream, cancellable: Gio.Cancellable): (boolean|nil)
---@field close_fn fun(stream: Gio.OutputStream, cancellable: Gio.Cancellable): (boolean|nil)
---@field write_async fun(stream: Gio.OutputStream, buffer: unknown[], count: integer, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field write_finish fun(stream: Gio.OutputStream, result: Gio.AsyncResult): integer
---@field splice_async fun(stream: Gio.OutputStream, source: Gio.InputStream, flags: Gio.OutputStreamSpliceFlags, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field splice_finish fun(stream: Gio.OutputStream, result: Gio.AsyncResult): integer
---@field flush_async fun(stream: Gio.OutputStream, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field flush_finish fun(stream: Gio.OutputStream, result: Gio.AsyncResult): (boolean|nil)
---@field close_async fun(stream: Gio.OutputStream, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field close_finish fun(stream: Gio.OutputStream, result: Gio.AsyncResult): (boolean|nil)
---@field writev_fn fun(stream: Gio.OutputStream, vectors: unknown[], n_vectors: integer, bytes_written: integer, cancellable: Gio.Cancellable): (boolean|nil)
---@field writev_async fun(stream: Gio.OutputStream, vectors: unknown[], n_vectors: integer, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field writev_finish fun(stream: Gio.OutputStream, result: Gio.AsyncResult, bytes_written: integer): (boolean|nil)
Gio.OutputStreamClass = {}

--- # record Gio.OutputStreamPrivate
---
---@class Gio.OutputStreamPrivate
Gio.OutputStreamPrivate = {}

---@enum Gio.OutputStreamSpliceFlags
Gio.OutputStreamSpliceFlags = {}

--- # record Gio.OutputVector
---
--- Structure used for scatter/gather data output.
--- You generally pass in an array of `GOutputVectors`
--- and the operation will use all the buffers as if they were
--- one buffer.
---
--- ---
---
---@class Gio.OutputVector
---@field buffer userdata # Pointer to a buffer of data to read.
---@field size integer # the size of `buffer`.
Gio.OutputVector = {}

---@enum Gio.PasswordSave
Gio.PasswordSave = {}

--- # class Gio.Permission
---
--- A `GPermission` represents the status of the caller's permission to
--- perform a certain action.
--- 
--- You can query if the action is currently allowed and if it is
--- possible to acquire the permission so that the action will be allowed
--- in the future.
--- 
--- There is also an API to actually acquire the permission and one to
--- release it.
--- 
--- As an example, a `GPermission` might represent the ability for the
--- user to write to a `GSettings` object.  This `GPermission` object could
--- then be used to decide if it is appropriate to show a "Click here to
--- unlock" button in a dialog and to provide the mechanism to invoke
--- when that button is clicked.
---
--- ---
---
---@class Gio.Permission : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.PermissionPrivate
Gio.Permission = {}

--- # method Gio.Permission:acquire()
---
--- Attempts to acquire the permission represented by `permission`.
--- 
--- The precise method by which this happens depends on the permission
--- and the underlying authentication mechanism.  A simple example is
--- that a dialog may appear asking the user to enter their password.
--- 
--- You should check with `g_permission_get_can_acquire()` before calling
--- this function.
--- 
--- If the permission is acquired then `true` is returned.  Otherwise,
--- `false` is returned and `error` is set appropriately.
--- 
--- This call is blocking, likely for a very long time (in the case that
--- user interaction is required).  See `g_permission_acquire_async()` for
--- the non-blocking version.
---
--- ---
---
---@param self Gio.Permission # a `GPermission` instance
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return (boolean|nil) # `true` if the permission was successfully acquired
function Gio.Permission:acquire(cancellable) end

--- # method Gio.Permission:acquire_async()
---
--- Attempts to acquire the permission represented by `permission`.
--- 
--- This is the first half of the asynchronous version of
--- `g_permission_acquire()`.
---
--- ---
---
---@param self Gio.Permission # a `GPermission` instance
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # the `GAsyncReadyCallback` to call when done
---@param user_data? userdata # the user data to pass to `callback`
---@return nil
function Gio.Permission:acquire_async(cancellable, callback, user_data) end

--- # method Gio.Permission:acquire_finish()
---
--- Collects the result of attempting to acquire the permission
--- represented by `permission`.
--- 
--- This is the second half of the asynchronous version of
--- `g_permission_acquire()`.
---
--- ---
---
---@param self Gio.Permission # a `GPermission` instance
---@param result Gio.AsyncResult # the `GAsyncResult` given to the `GAsyncReadyCallback`
---@return (boolean|nil) # `true` if the permission was successfully acquired
function Gio.Permission:acquire_finish(result) end

--- # method Gio.Permission:get_allowed()
---
--- Gets the value of the 'allowed' property.  This property is `true` if
--- the caller currently has permission to perform the action that
--- `permission` represents the permission to perform.
---
--- ---
---
---@param self Gio.Permission # a `GPermission` instance
---@return (boolean|nil) # the value of the 'allowed' property
function Gio.Permission:get_allowed() end

--- # method Gio.Permission:get_can_acquire()
---
--- Gets the value of the 'can-acquire' property.  This property is `true`
--- if it is generally possible to acquire the permission by calling
--- `g_permission_acquire()`.
---
--- ---
---
---@param self Gio.Permission # a `GPermission` instance
---@return (boolean|nil) # the value of the 'can-acquire' property
function Gio.Permission:get_can_acquire() end

--- # method Gio.Permission:get_can_release()
---
--- Gets the value of the 'can-release' property.  This property is `true`
--- if it is generally possible to release the permission by calling
--- `g_permission_release()`.
---
--- ---
---
---@param self Gio.Permission # a `GPermission` instance
---@return (boolean|nil) # the value of the 'can-release' property
function Gio.Permission:get_can_release() end

--- # method Gio.Permission:impl_update()
---
--- This function is called by the `GPermission` implementation to update
--- the properties of the permission.  You should never call this
--- function except from a `GPermission` implementation.
--- 
--- GObject notify signals are generated, as appropriate.
---
--- ---
---
---@param self Gio.Permission # a `GPermission` instance
---@param allowed (boolean|nil) # the new value for the 'allowed' property
---@param can_acquire (boolean|nil) # the new value for the 'can-acquire' property
---@param can_release (boolean|nil) # the new value for the 'can-release' property
---@return nil
function Gio.Permission:impl_update(allowed, can_acquire, can_release) end

--- # method Gio.Permission:release()
---
--- Attempts to release the permission represented by `permission`.
--- 
--- The precise method by which this happens depends on the permission
--- and the underlying authentication mechanism.  In most cases the
--- permission will be dropped immediately without further action.
--- 
--- You should check with `g_permission_get_can_release()` before calling
--- this function.
--- 
--- If the permission is released then `true` is returned.  Otherwise,
--- `false` is returned and `error` is set appropriately.
--- 
--- This call is blocking, likely for a very long time (in the case that
--- user interaction is required).  See `g_permission_release_async()` for
--- the non-blocking version.
---
--- ---
---
---@param self Gio.Permission # a `GPermission` instance
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return (boolean|nil) # `true` if the permission was successfully released
function Gio.Permission:release(cancellable) end

--- # method Gio.Permission:release_async()
---
--- Attempts to release the permission represented by `permission`.
--- 
--- This is the first half of the asynchronous version of
--- `g_permission_release()`.
---
--- ---
---
---@param self Gio.Permission # a `GPermission` instance
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # the `GAsyncReadyCallback` to call when done
---@param user_data? userdata # the user data to pass to `callback`
---@return nil
function Gio.Permission:release_async(cancellable, callback, user_data) end

--- # method Gio.Permission:release_finish()
---
--- Collects the result of attempting to release the permission
--- represented by `permission`.
--- 
--- This is the second half of the asynchronous version of
--- `g_permission_release()`.
---
--- ---
---
---@param self Gio.Permission # a `GPermission` instance
---@param result Gio.AsyncResult # the `GAsyncResult` given to the `GAsyncReadyCallback`
---@return (boolean|nil) # `true` if the permission was successfully released
function Gio.Permission:release_finish(result) end

--- # record Gio.PermissionClass
---
---@class Gio.PermissionClass
---@field parent_class GObject.ObjectClass
---@field acquire fun(permission: Gio.Permission, cancellable: Gio.Cancellable): (boolean|nil)
---@field acquire_async fun(permission: Gio.Permission, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field acquire_finish fun(permission: Gio.Permission, result: Gio.AsyncResult): (boolean|nil)
---@field release fun(permission: Gio.Permission, cancellable: Gio.Cancellable): (boolean|nil)
---@field release_async fun(permission: Gio.Permission, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field release_finish fun(permission: Gio.Permission, result: Gio.AsyncResult): (boolean|nil)
---@field reserved unknown[]
Gio.PermissionClass = {}

--- # record Gio.PermissionPrivate
---
---@class Gio.PermissionPrivate
Gio.PermissionPrivate = {}

--- # interface Gio.PollableInputStream
---
--- `GPollableInputStream` is implemented by `GInputStreams` that
--- can be polled for readiness to read. This can be used when
--- interfacing with a non-GIO API that expects
--- UNIX-file-descriptor-style asynchronous I/O rather than GIO-style.
---
--- ---
---
---@class Gio.PollableInputStream
Gio.PollableInputStream = {}

--- # method Gio.PollableInputStream:can_poll()
---
--- Checks if `stream` is actually pollable. Some classes may implement
--- `GPollableInputStream` but have only certain instances of that class
--- be pollable. If this method returns `false`, then the behavior of
--- other `GPollableInputStream` methods is undefined.
--- 
--- For any given stream, the value returned by this method is constant;
--- a stream cannot switch from pollable to non-pollable or vice versa.
---
--- ---
---
---@param self Gio.PollableInputStream # a `GPollableInputStream`.
---@return (boolean|nil) # `true` if `stream` is pollable, `false` if not.
function Gio.PollableInputStream:can_poll() end

--- # method Gio.PollableInputStream:create_source()
---
--- Creates a `GSource` that triggers when `stream` can be read, or
--- `cancellable` is triggered or an error occurs. The callback on the
--- source is of the `GPollableSourceFunc` type.
--- 
--- As with `g_pollable_input_stream_is_readable()`, it is possible that
--- the stream may not actually be readable even after the source
--- triggers, so you should use `g_pollable_input_stream_read_nonblocking()`
--- rather than `g_input_stream_read()` from the callback.
---
--- ---
---
---@param self Gio.PollableInputStream # a `GPollableInputStream`.
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return GLib.Source # a new `GSource`
function Gio.PollableInputStream:create_source(cancellable) end

--- # method Gio.PollableInputStream:is_readable()
---
--- Checks if `stream` can be read.
--- 
--- Note that some stream types may not be able to implement this 100%
--- reliably, and it is possible that a call to `g_input_stream_read()`
--- after this returns `true` would still block. To guarantee
--- non-blocking behavior, you should always use
--- `g_pollable_input_stream_read_nonblocking()`, which will return a
--- %G_IO_ERROR_WOULD_BLOCK error rather than blocking.
---
--- ---
---
---@param self Gio.PollableInputStream # a `GPollableInputStream`.
---@return (boolean|nil) # `true` if `stream` is readable, `false` if not. If an error has occurred on `stream`, this will result in `g_pollable_input_stream_is_readable()` returning `true`, and the next attempt to read will return the error.
function Gio.PollableInputStream:is_readable() end

--- # method Gio.PollableInputStream:read_nonblocking()
---
--- Attempts to read up to `count` bytes from `stream` into `buffer`, as
--- with `g_input_stream_read()`. If `stream` is not currently readable,
--- this will immediately return %G_IO_ERROR_WOULD_BLOCK, and you can
--- use `g_pollable_input_stream_create_source()` to create a `GSource`
--- that will be triggered when `stream` is readable.
--- 
--- Note that since this method never blocks, you cannot actually
--- use `cancellable` to cancel it. However, it will return an error
--- if `cancellable` has already been cancelled when you call, which
--- may happen if you call this method after a source triggers due
--- to having been cancelled.
---
--- ---
---
---@param self Gio.PollableInputStream # a `GPollableInputStream`
---@param buffer unknown[] # a buffer to read data into (which should be at least `count` bytes long).
---@param count integer # the number of bytes you want to read
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return integer # the number of bytes read, or -1 on error (including %G_IO_ERROR_WOULD_BLOCK).
function Gio.PollableInputStream:read_nonblocking(buffer, count, cancellable) end

--- # record Gio.PollableInputStreamInterface
---
--- The interface for pollable input streams.
--- 
--- The default implementation of `can_poll` always returns `true`.
--- 
--- The default implementation of `read_nonblocking` calls
--- `g_pollable_input_stream_is_readable()`, and then calls
--- `g_input_stream_read()` if it returns `true`. This means you only need
--- to override it if it is possible that your `is_readable`
--- implementation may return `true` when the stream is not actually
--- readable.
---
--- ---
---
---@class Gio.PollableInputStreamInterface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field can_poll fun(stream: Gio.PollableInputStream): (boolean|nil)
---@field is_readable fun(stream: Gio.PollableInputStream): (boolean|nil)
---@field create_source fun(stream: Gio.PollableInputStream, cancellable: Gio.Cancellable): GLib.Source
---@field read_nonblocking fun(stream: Gio.PollableInputStream, buffer: unknown[], count: integer): integer
Gio.PollableInputStreamInterface = {}

--- # interface Gio.PollableOutputStream
---
--- `GPollableOutputStream` is implemented by `GOutputStreams` that
--- can be polled for readiness to write. This can be used when
--- interfacing with a non-GIO API that expects
--- UNIX-file-descriptor-style asynchronous I/O rather than GIO-style.
---
--- ---
---
---@class Gio.PollableOutputStream
Gio.PollableOutputStream = {}

--- # method Gio.PollableOutputStream:can_poll()
---
--- Checks if `stream` is actually pollable. Some classes may implement
--- `GPollableOutputStream` but have only certain instances of that
--- class be pollable. If this method returns `false`, then the behavior
--- of other `GPollableOutputStream` methods is undefined.
--- 
--- For any given stream, the value returned by this method is constant;
--- a stream cannot switch from pollable to non-pollable or vice versa.
---
--- ---
---
---@param self Gio.PollableOutputStream # a `GPollableOutputStream`.
---@return (boolean|nil) # `true` if `stream` is pollable, `false` if not.
function Gio.PollableOutputStream:can_poll() end

--- # method Gio.PollableOutputStream:create_source()
---
--- Creates a `GSource` that triggers when `stream` can be written, or
--- `cancellable` is triggered or an error occurs. The callback on the
--- source is of the `GPollableSourceFunc` type.
--- 
--- As with `g_pollable_output_stream_is_writable()`, it is possible that
--- the stream may not actually be writable even after the source
--- triggers, so you should use `g_pollable_output_stream_write_nonblocking()`
--- rather than `g_output_stream_write()` from the callback.
---
--- ---
---
---@param self Gio.PollableOutputStream # a `GPollableOutputStream`.
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return GLib.Source # a new `GSource`
function Gio.PollableOutputStream:create_source(cancellable) end

--- # method Gio.PollableOutputStream:is_writable()
---
--- Checks if `stream` can be written.
--- 
--- Note that some stream types may not be able to implement this 100%
--- reliably, and it is possible that a call to `g_output_stream_write()`
--- after this returns `true` would still block. To guarantee
--- non-blocking behavior, you should always use
--- `g_pollable_output_stream_write_nonblocking()`, which will return a
--- %G_IO_ERROR_WOULD_BLOCK error rather than blocking.
---
--- ---
---
---@param self Gio.PollableOutputStream # a `GPollableOutputStream`.
---@return (boolean|nil) # `true` if `stream` is writable, `false` if not. If an error has occurred on `stream`, this will result in `g_pollable_output_stream_is_writable()` returning `true`, and the next attempt to write will return the error.
function Gio.PollableOutputStream:is_writable() end

--- # method Gio.PollableOutputStream:write_nonblocking()
---
--- Attempts to write up to `count` bytes from `buffer` to `stream`, as
--- with `g_output_stream_write()`. If `stream` is not currently writable,
--- this will immediately return %G_IO_ERROR_WOULD_BLOCK, and you can
--- use `g_pollable_output_stream_create_source()` to create a `GSource`
--- that will be triggered when `stream` is writable.
--- 
--- Note that since this method never blocks, you cannot actually
--- use `cancellable` to cancel it. However, it will return an error
--- if `cancellable` has already been cancelled when you call, which
--- may happen if you call this method after a source triggers due
--- to having been cancelled.
--- 
--- Also note that if %G_IO_ERROR_WOULD_BLOCK is returned some underlying
--- transports like D/TLS require that you re-send the same `buffer` and
--- `count` in the next write call.
---
--- ---
---
---@param self Gio.PollableOutputStream # a `GPollableOutputStream`
---@param buffer unknown[] # a buffer to write data from
---@param count integer # the number of bytes you want to write
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return integer # the number of bytes written, or -1 on error (including %G_IO_ERROR_WOULD_BLOCK).
function Gio.PollableOutputStream:write_nonblocking(buffer, count, cancellable) end

--- # method Gio.PollableOutputStream:writev_nonblocking()
---
--- Attempts to write the bytes contained in the `n_vectors` `vectors` to `stream`,
--- as with `g_output_stream_writev()`. If `stream` is not currently writable,
--- this will immediately return %`G_POLLABLE_RETURN_WOULD_BLOCK`, and you can
--- use `g_pollable_output_stream_create_source()` to create a `GSource`
--- that will be triggered when `stream` is writable. `error` will *not* be
--- set in that case.
--- 
--- Note that since this method never blocks, you cannot actually
--- use `cancellable` to cancel it. However, it will return an error
--- if `cancellable` has already been cancelled when you call, which
--- may happen if you call this method after a source triggers due
--- to having been cancelled.
--- 
--- Also note that if %G_POLLABLE_RETURN_WOULD_BLOCK is returned some underlying
--- transports like D/TLS require that you re-send the same `vectors` and
--- `n_vectors` in the next write call.
---
--- ---
---
---@param self Gio.PollableOutputStream # a `GPollableOutputStream`
---@param vectors unknown[] # the buffer containing the `GOutputVectors` to write.
---@param n_vectors integer # the number of vectors to write
---@param bytes_written? integer # location to store the number of bytes that were written to the stream
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return Gio.PollableReturn # %`G_POLLABLE_RETURN_OK` on success, %G_POLLABLE_RETURN_WOULD_BLOCK if the stream is not currently writable (and `error` is *not* set), or %G_POLLABLE_RETURN_FAILED if there was an error in which case `error` will be set.
function Gio.PollableOutputStream:writev_nonblocking(vectors, n_vectors, bytes_written, cancellable) end

--- # record Gio.PollableOutputStreamInterface
---
--- The interface for pollable output streams.
--- 
--- The default implementation of `can_poll` always returns `true`.
--- 
--- The default implementation of `write_nonblocking` calls
--- `g_pollable_output_stream_is_writable()`, and then calls
--- `g_output_stream_write()` if it returns `true`. This means you only
--- need to override it if it is possible that your `is_writable`
--- implementation may return `true` when the stream is not actually
--- writable.
--- 
--- The default implementation of `writev_nonblocking` calls
--- `g_pollable_output_stream_write_nonblocking()` for each vector, and converts
--- its return value and error (if set) to a `GPollableReturn`. You should
--- override this where possible to avoid having to allocate a `GError` to return
--- %G_IO_ERROR_WOULD_BLOCK.
---
--- ---
---
---@class Gio.PollableOutputStreamInterface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field can_poll fun(stream: Gio.PollableOutputStream): (boolean|nil)
---@field is_writable fun(stream: Gio.PollableOutputStream): (boolean|nil)
---@field create_source fun(stream: Gio.PollableOutputStream, cancellable: Gio.Cancellable): GLib.Source
---@field write_nonblocking fun(stream: Gio.PollableOutputStream, buffer: unknown[], count: integer): integer
---@field writev_nonblocking fun(stream: Gio.PollableOutputStream, vectors: unknown[], n_vectors: integer, bytes_written: integer): Gio.PollableReturn
Gio.PollableOutputStreamInterface = {}

---@enum Gio.PollableReturn
Gio.PollableReturn = {}

---@alias Gio.PollableSourceFunc fun(pollable_stream: GObject.Object, data: userdata): (boolean|nil)

--- # interface Gio.PowerProfileMonitor
---
--- `GPowerProfileMonitor` makes it possible for applications as well as OS components
--- to monitor system power profiles and act upon them. It currently only exports
--- whether the system is in “Power Saver” mode (known as “Low Power” mode on
--- some systems).
--- 
--- When in “Low Power” mode, it is recommended that applications:
--- - disable automatic downloads;
--- - reduce the rate of refresh from online sources such as calendar or
---   email synchronisation;
--- - reduce the use of expensive visual effects.
--- 
--- It is also likely that OS components providing services to applications will
--- lower their own background activity, for the sake of the system.
--- 
--- There are a variety of tools that exist for power consumption analysis, but those
--- usually depend on the OS and hardware used. On Linux, one could use `upower` to
--- monitor the battery discharge rate, `powertop` to check on the background activity
--- or activity at all), `sysprof` to inspect CPU usage, and `intel_gpu_time` to
--- profile GPU usage.
--- 
--- Don't forget to disconnect the `GPowerProfileMonitor`::notify::power-saver-enabled
--- signal, and unref the `GPowerProfileMonitor` itself when exiting.
---
--- ---
---
---@class Gio.PowerProfileMonitor
Gio.PowerProfileMonitor = {}

--- # method Gio.PowerProfileMonitor:get_power_saver_enabled()
---
--- Gets whether the system is in “Power Saver” mode.
--- 
--- You are expected to listen to the
--- `GPowerProfileMonitor`::notify::power-saver-enabled signal to know when the profile has
--- changed.
---
--- ---
---
---@param self Gio.PowerProfileMonitor # a `GPowerProfileMonitor`
---@return (boolean|nil) # Whether the system is in “Power Saver” mode.
function Gio.PowerProfileMonitor:get_power_saver_enabled() end

--- # function Gio.PowerProfileMonitor.dup_default()
---
--- Gets a reference to the default `GPowerProfileMonitor` for the system.
---
--- ---
---
---@return Gio.PowerProfileMonitor # a new reference to the default `GPowerProfileMonitor`
function Gio.PowerProfileMonitor.dup_default() end

--- # record Gio.PowerProfileMonitorInterface
---
--- The virtual function table for `GPowerProfileMonitor`.
---
--- ---
---
---@class Gio.PowerProfileMonitorInterface
---@field g_iface GObject.TypeInterface # The parent interface.
Gio.PowerProfileMonitorInterface = {}

--- # class Gio.PropertyAction
---
--- A `GPropertyAction` is a way to get a `GAction` with a state value
--- reflecting and controlling the value of a `GObject` property.
--- 
--- The state of the action will correspond to the value of the property.
--- Changing it will change the property (assuming the requested value
--- matches the requirements as specified in the `GParamSpec`).
--- 
--- Only the most common types are presently supported.  Booleans are
--- mapped to booleans, strings to strings, signed/unsigned integers to
--- int32/uint32 and floats and doubles to doubles.
--- 
--- If the property is an enum then the state will be string-typed and
--- conversion will automatically be performed between the enum value and
--- "nick" string as per the `GEnumValue` table.
--- 
--- Flags types are not currently supported.
--- 
--- Properties of object types, boxed types and pointer types are not
--- supported and probably never will be.
--- 
--- Properties of `GVariant` types are not currently supported.
--- 
--- If the property is boolean-valued then the action will have a NULL
--- parameter type, and activating the action (with no parameter) will
--- toggle the value of the property.
--- 
--- In all other cases, the parameter type will correspond to the type of
--- the property.
--- 
--- The general idea here is to reduce the number of locations where a
--- particular piece of state is kept (and therefore has to be synchronised
--- between). `GPropertyAction` does not have a separate state that is kept
--- in sync with the property value -- its state is the property value.
--- 
--- For example, it might be useful to create a `GAction` corresponding to
--- the "visible-child-name" property of a `GtkStack` so that the current
--- page can be switched from a menu.  The active radio indication in the
--- menu is then directly determined from the active page of the
--- `GtkStack`.
--- 
--- An anti-example would be binding the "active-id" property on a
--- `GtkComboBox`.  This is because the state of the combobox itself is
--- probably uninteresting and is actually being used to control
--- something else.
--- 
--- Another anti-example would be to bind to the "visible-child-name"
--- property of a `GtkStack` if this value is actually stored in
--- `GSettings`.  In that case, the real source of the value is
--- `GSettings`.  If you want a `GAction` to control a setting stored in
--- `GSettings`, see `g_settings_create_action()` instead, and possibly
--- combine its use with `g_settings_bind()`.
---
--- ---
---
---@class Gio.PropertyAction : GObject.Object, Gio.Action
---@operator call: Gio.PropertyAction
Gio.PropertyAction = {}

--- # function Gio.PropertyAction.new()
---
--- Creates a `GAction` corresponding to the value of property
--- `property_name` on `object`.
--- 
--- The property must be existent and readable and writable (and not
--- construct-only).
--- 
--- This function takes a reference on `object` and doesn't release it
--- until the action is destroyed.
---
--- ---
---
---@param name string # the name of the action to create
---@param object GObject.Object # the object that has the property to wrap
---@param property_name string # the name of the property
---@return Gio.PropertyAction # a new `GPropertyAction`
function Gio.PropertyAction.new(name, object, property_name) end

--- # interface Gio.Proxy
---
--- A `GProxy` handles connecting to a remote host via a given type of
--- proxy server. It is implemented by the 'gio-proxy' extension point.
--- The extensions are named after their proxy protocol name. As an
--- example, a SOCKS5 proxy implementation can be retrieved with the
--- name 'socks5' using the function
--- `g_io_extension_point_get_extension_by_name()`.
---
--- ---
---
---@class Gio.Proxy
Gio.Proxy = {}

--- # method Gio.Proxy:connect()
---
--- Given `connection` to communicate with a proxy (eg, a
--- `GSocketConnection` that is connected to the proxy server), this
--- does the necessary handshake to connect to `proxy_address`, and if
--- required, wraps the `GIOStream` to handle proxy payload.
---
--- ---
---
---@param self Gio.Proxy # a `GProxy`
---@param connection Gio.IOStream # a `GIOStream`
---@param proxy_address Gio.ProxyAddress # a `GProxyAddress`
---@param cancellable? Gio.Cancellable # a `GCancellable`
---@return Gio.IOStream # a `GIOStream` that will replace `connection`. This might be the same as `connection`, in which case a reference will be added.
function Gio.Proxy:connect(connection, proxy_address, cancellable) end

--- # method Gio.Proxy:connect_async()
---
--- Asynchronous version of `g_proxy_connect()`.
---
--- ---
---
---@param self Gio.Proxy # a `GProxy`
---@param connection Gio.IOStream # a `GIOStream`
---@param proxy_address Gio.ProxyAddress # a `GProxyAddress`
---@param cancellable? Gio.Cancellable # a `GCancellable`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`
---@param user_data? userdata # callback data
---@return nil
function Gio.Proxy:connect_async(connection, proxy_address, cancellable, callback, user_data) end

--- # method Gio.Proxy:connect_finish()
---
--- See `g_proxy_connect()`.
---
--- ---
---
---@param self Gio.Proxy # a `GProxy`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return Gio.IOStream # a `GIOStream`.
function Gio.Proxy:connect_finish(result) end

--- # method Gio.Proxy:supports_hostname()
---
--- Some proxy protocols expect to be passed a hostname, which they
--- will resolve to an IP address themselves. Others, like SOCKS4, do
--- not allow this. This function will return `false` if `proxy` is
--- implementing such a protocol. When `false` is returned, the caller
--- should resolve the destination hostname first, and then pass a
--- `GProxyAddress` containing the stringified IP address to
--- `g_proxy_connect()` or `g_proxy_connect_async()`.
---
--- ---
---
---@param self Gio.Proxy # a `GProxy`
---@return (boolean|nil) # `true` if hostname resolution is supported.
function Gio.Proxy:supports_hostname() end

--- # function Gio.Proxy.get_default_for_protocol()
---
--- Find the `gio-proxy` extension point for a proxy implementation that supports
--- the specified protocol.
---
--- ---
---
---@param protocol string # the proxy protocol name (e.g. http, socks, etc)
---@return Gio.Proxy # return a `GProxy` or NULL if protocol is not supported.
function Gio.Proxy.get_default_for_protocol(protocol) end

--- # class Gio.ProxyAddress
---
--- Support for proxied `GInetSocketAddress`.
---
--- ---
---
---@class Gio.ProxyAddress : Gio.InetSocketAddress, Gio.SocketConnectable
---@field parent_instance Gio.InetSocketAddress
---@field priv Gio.ProxyAddressPrivate
---@operator call: Gio.ProxyAddress
Gio.ProxyAddress = {}

--- # method Gio.ProxyAddress:get_destination_hostname()
---
--- Gets `proxy`'s destination hostname; that is, the name of the host
--- that will be connected to via the proxy, not the name of the proxy
--- itself.
---
--- ---
---
---@param self Gio.ProxyAddress # a `GProxyAddress`
---@return string # the `proxy`'s destination hostname
function Gio.ProxyAddress:get_destination_hostname() end

--- # method Gio.ProxyAddress:get_destination_port()
---
--- Gets `proxy`'s destination port; that is, the port on the
--- destination host that will be connected to via the proxy, not the
--- port number of the proxy itself.
---
--- ---
---
---@param self Gio.ProxyAddress # a `GProxyAddress`
---@return integer # the `proxy`'s destination port
function Gio.ProxyAddress:get_destination_port() end

--- # method Gio.ProxyAddress:get_destination_protocol()
---
--- Gets the protocol that is being spoken to the destination
--- server; eg, "http" or "ftp".
---
--- ---
---
---@param self Gio.ProxyAddress # a `GProxyAddress`
---@return string # the `proxy`'s destination protocol
function Gio.ProxyAddress:get_destination_protocol() end

--- # method Gio.ProxyAddress:get_password()
---
--- Gets `proxy`'s password.
---
--- ---
---
---@param self Gio.ProxyAddress # a `GProxyAddress`
---@return string # the `proxy`'s password
function Gio.ProxyAddress:get_password() end

--- # method Gio.ProxyAddress:get_protocol()
---
--- Gets `proxy`'s protocol. eg, "socks" or "http"
---
--- ---
---
---@param self Gio.ProxyAddress # a `GProxyAddress`
---@return string # the `proxy`'s protocol
function Gio.ProxyAddress:get_protocol() end

--- # method Gio.ProxyAddress:get_uri()
---
--- Gets the proxy URI that `proxy` was constructed from.
---
--- ---
---
---@param self Gio.ProxyAddress # a `GProxyAddress`
---@return string # the `proxy`'s URI, or `nil` if unknown
function Gio.ProxyAddress:get_uri() end

--- # method Gio.ProxyAddress:get_username()
---
--- Gets `proxy`'s username.
---
--- ---
---
---@param self Gio.ProxyAddress # a `GProxyAddress`
---@return string # the `proxy`'s username
function Gio.ProxyAddress:get_username() end

--- # function Gio.ProxyAddress.new()
---
--- Creates a new `GProxyAddress` for `inetaddr` with `protocol` that should
--- tunnel through `dest_hostname` and `dest_port`.
--- 
--- (Note that this method doesn't set the `GProxyAddress`:uri or
--- `GProxyAddress`:destination-protocol fields; use `g_object_new()`
--- directly if you want to set those.)
---
--- ---
---
---@param inetaddr Gio.InetAddress # The proxy server `GInetAddress`.
---@param port integer # The proxy server port.
---@param protocol string # The proxy protocol to support, in lower case (e.g. socks, http).
---@param dest_hostname string # The destination hostname the proxy should tunnel to.
---@param dest_port integer # The destination port to tunnel to.
---@param username? string # The username to authenticate to the proxy server (or `nil`).
---@param password? string # The password to authenticate to the proxy server (or `nil`).
---@return Gio.SocketAddress # a new `GProxyAddress`
function Gio.ProxyAddress.new(inetaddr, port, protocol, dest_hostname, dest_port, username, password) end

--- # record Gio.ProxyAddressClass
---
--- Class structure for `GProxyAddress`.
---
--- ---
---
---@class Gio.ProxyAddressClass
---@field parent_class Gio.InetSocketAddressClass
Gio.ProxyAddressClass = {}

--- # class Gio.ProxyAddressEnumerator
---
--- `GProxyAddressEnumerator` is a wrapper around `GSocketAddressEnumerator` which
--- takes the `GSocketAddress` instances returned by the `GSocketAddressEnumerator`
--- and wraps them in `GProxyAddress` instances, using the given
--- `GProxyAddressEnumerator`:proxy-resolver.
--- 
--- This enumerator will be returned (for example, by
--- `g_socket_connectable_enumerate()`) as appropriate when a proxy is configured;
--- there should be no need to manually wrap a `GSocketAddressEnumerator` instance
--- with one.
---
--- ---
---
---@class Gio.ProxyAddressEnumerator : Gio.SocketAddressEnumerator
---@field parent_instance Gio.SocketAddressEnumerator
---@field priv Gio.ProxyAddressEnumeratorPrivate
Gio.ProxyAddressEnumerator = {}

--- # record Gio.ProxyAddressEnumeratorClass
---
--- Class structure for `GProxyAddressEnumerator`.
---
--- ---
---
---@class Gio.ProxyAddressEnumeratorClass
---@field parent_class Gio.SocketAddressEnumeratorClass
Gio.ProxyAddressEnumeratorClass = {}

--- # record Gio.ProxyAddressEnumeratorPrivate
---
---@class Gio.ProxyAddressEnumeratorPrivate
Gio.ProxyAddressEnumeratorPrivate = {}

--- # record Gio.ProxyAddressPrivate
---
---@class Gio.ProxyAddressPrivate
Gio.ProxyAddressPrivate = {}

--- # record Gio.ProxyInterface
---
--- Provides an interface for handling proxy connection and payload.
---
--- ---
---
---@class Gio.ProxyInterface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field connect fun(proxy: Gio.Proxy, connection: Gio.IOStream, proxy_address: Gio.ProxyAddress, cancellable: Gio.Cancellable): Gio.IOStream
---@field connect_async fun(proxy: Gio.Proxy, connection: Gio.IOStream, proxy_address: Gio.ProxyAddress, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field connect_finish fun(proxy: Gio.Proxy, result: Gio.AsyncResult): Gio.IOStream
---@field supports_hostname fun(proxy: Gio.Proxy): (boolean|nil)
Gio.ProxyInterface = {}

--- # interface Gio.ProxyResolver
---
--- `GProxyResolver` provides synchronous and asynchronous network proxy
--- resolution. `GProxyResolver` is used within `GSocketClient` through
--- the method `g_socket_connectable_proxy_enumerate()`.
--- 
--- Implementations of `GProxyResolver` based on libproxy and GNOME settings can
--- be found in glib-networking. GIO comes with an implementation for use inside
--- Flatpak portals.
---
--- ---
---
---@class Gio.ProxyResolver
Gio.ProxyResolver = {}

--- # method Gio.ProxyResolver:is_supported()
---
--- Checks if `resolver` can be used on this system. (This is used
--- internally; `g_proxy_resolver_get_default()` will only return a proxy
--- resolver that returns `true` for this method.)
---
--- ---
---
---@param self Gio.ProxyResolver # a `GProxyResolver`
---@return (boolean|nil) # `true` if `resolver` is supported.
function Gio.ProxyResolver:is_supported() end

--- # method Gio.ProxyResolver:lookup()
---
--- Looks into the system proxy configuration to determine what proxy,
--- if any, to use to connect to `uri`. The returned proxy URIs are of
--- the form `<protocol>://[user[:password]@]host[:port]` or
--- `direct://`, where <protocol> could be http, rtsp, socks
--- or other proxying protocol.
--- 
--- If you don't know what network protocol is being used on the
--- socket, you should use `none` as the URI protocol.
--- In this case, the resolver might still return a generic proxy type
--- (such as SOCKS), but would not return protocol-specific proxy types
--- (such as http).
--- 
--- `direct://` is used when no proxy is needed.
--- Direct connection should not be attempted unless it is part of the
--- returned array of proxies.
---
--- ---
---
---@param self Gio.ProxyResolver # a `GProxyResolver`
---@param uri string # a URI representing the destination to connect to
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return unknown[] # A NULL-terminated array of proxy URIs. Must be freed with `g_strfreev()`.
function Gio.ProxyResolver:lookup(uri, cancellable) end

--- # method Gio.ProxyResolver:lookup_async()
---
--- Asynchronous lookup of proxy. See `g_proxy_resolver_lookup()` for more
--- details.
---
--- ---
---
---@param self Gio.ProxyResolver # a `GProxyResolver`
---@param uri string # a URI representing the destination to connect to
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # callback to call after resolution completes
---@param user_data? userdata # data for `callback`
---@return nil
function Gio.ProxyResolver:lookup_async(uri, cancellable, callback, user_data) end

--- # method Gio.ProxyResolver:lookup_finish()
---
--- Call this function to obtain the array of proxy URIs when
--- `g_proxy_resolver_lookup_async()` is complete. See
--- `g_proxy_resolver_lookup()` for more details.
---
--- ---
---
---@param self Gio.ProxyResolver # a `GProxyResolver`
---@param result Gio.AsyncResult # the result passed to your `GAsyncReadyCallback`
---@return unknown[] # A NULL-terminated array of proxy URIs. Must be freed with `g_strfreev()`.
function Gio.ProxyResolver:lookup_finish(result) end

--- # function Gio.ProxyResolver.get_default()
---
--- Gets the default `GProxyResolver` for the system.
---
--- ---
---
---@return Gio.ProxyResolver # the default `GProxyResolver`, which will be a dummy object if no proxy resolver is available
function Gio.ProxyResolver.get_default() end

--- # record Gio.ProxyResolverInterface
---
--- The virtual function table for `GProxyResolver`.
---
--- ---
---
---@class Gio.ProxyResolverInterface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field is_supported fun(resolver: Gio.ProxyResolver): (boolean|nil)
---@field lookup fun(resolver: Gio.ProxyResolver, uri: string, cancellable: Gio.Cancellable): unknown[]
---@field lookup_async fun(resolver: Gio.ProxyResolver, uri: string, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field lookup_finish fun(resolver: Gio.ProxyResolver, result: Gio.AsyncResult): unknown[]
Gio.ProxyResolverInterface = {}

---@alias Gio.ReallocFunc fun(data: userdata, size: integer): userdata

--- # interface Gio.RemoteActionGroup
---
--- The GRemoteActionGroup interface is implemented by `GActionGroup`
--- instances that either transmit action invocations to other processes
--- or receive action invocations in the local process from other
--- processes.
--- 
--- The interface has `_full` variants of the two
--- methods on `GActionGroup` used to activate actions:
--- `g_action_group_activate_action()` and
--- `g_action_group_change_action_state()`. These variants allow a
--- "platform data" `GVariant` to be specified: a dictionary providing
--- context for the action invocation (for example: timestamps, startup
--- notification IDs, etc).
--- 
--- `GDBusActionGroup` implements `GRemoteActionGroup`.  This provides a
--- mechanism to send platform data for action invocations over D-Bus.
--- 
--- Additionally, `g_dbus_connection_export_action_group()` will check if
--- the exported `GActionGroup` implements `GRemoteActionGroup` and use the
--- `_full` variants of the calls if available.  This
--- provides a mechanism by which to receive platform data for action
--- invocations that arrive by way of D-Bus.
---
--- ---
---
---@class Gio.RemoteActionGroup
Gio.RemoteActionGroup = {}

--- # method Gio.RemoteActionGroup:activate_action_full()
---
--- Activates the remote action.
--- 
--- This is the same as `g_action_group_activate_action()` except that it
--- allows for provision of "platform data" to be sent along with the
--- activation request.  This typically contains details such as the user
--- interaction timestamp or startup notification information.
--- 
--- `platform_data` must be non-`nil` and must have the type
--- %G_VARIANT_TYPE_VARDICT.  If it is floating, it will be consumed.
---
--- ---
---
---@param self Gio.RemoteActionGroup # a `GDBusActionGroup`
---@param action_name string # the name of the action to activate
---@param parameter? GLib.Variant # the optional parameter to the activation
---@param platform_data GLib.Variant # the platform data to send
---@return nil
function Gio.RemoteActionGroup:activate_action_full(action_name, parameter, platform_data) end

--- # method Gio.RemoteActionGroup:change_action_state_full()
---
--- Changes the state of a remote action.
--- 
--- This is the same as `g_action_group_change_action_state()` except that
--- it allows for provision of "platform data" to be sent along with the
--- state change request.  This typically contains details such as the
--- user interaction timestamp or startup notification information.
--- 
--- `platform_data` must be non-`nil` and must have the type
--- %G_VARIANT_TYPE_VARDICT.  If it is floating, it will be consumed.
---
--- ---
---
---@param self Gio.RemoteActionGroup # a `GRemoteActionGroup`
---@param action_name string # the name of the action to change the state of
---@param value GLib.Variant # the new requested value for the state
---@param platform_data GLib.Variant # the platform data to send
---@return nil
function Gio.RemoteActionGroup:change_action_state_full(action_name, value, platform_data) end

--- # record Gio.RemoteActionGroupInterface
---
--- The virtual function table for `GRemoteActionGroup`.
---
--- ---
---
---@class Gio.RemoteActionGroupInterface
---@field g_iface GObject.TypeInterface
---@field activate_action_full fun(remote: Gio.RemoteActionGroup, action_name: string, parameter: GLib.Variant, platform_data: GLib.Variant): nil
---@field change_action_state_full fun(remote: Gio.RemoteActionGroup, action_name: string, value: GLib.Variant, platform_data: GLib.Variant): nil
Gio.RemoteActionGroupInterface = {}

--- # class Gio.Resolver
---
--- `GResolver` provides cancellable synchronous and asynchronous DNS
--- resolution, for hostnames (`g_resolver_lookup_by_address()`,
--- `g_resolver_lookup_by_name()` and their async variants) and SRV
--- (service) records (`g_resolver_lookup_service()`).
--- 
--- `GNetworkAddress` and `GNetworkService` provide wrappers around
--- `GResolver` functionality that also implement `GSocketConnectable`,
--- making it easy to connect to a remote host/service.
---
--- ---
---
---@class Gio.Resolver : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.ResolverPrivate
Gio.Resolver = {}

--- # method Gio.Resolver:lookup_by_address()
---
--- Synchronously reverse-resolves `address` to determine its
--- associated hostname.
--- 
--- If the DNS resolution fails, `error` (if non-`nil`) will be set to
--- a value from `GResolverError`.
--- 
--- If `cancellable` is non-`nil`, it can be used to cancel the
--- operation, in which case `error` (if non-`nil`) will be set to
--- %G_IO_ERROR_CANCELLED.
---
--- ---
---
---@param self Gio.Resolver # a `GResolver`
---@param address Gio.InetAddress # the address to reverse-resolve
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return string # a hostname (either ASCII-only, or in ASCII-encoded form), or `nil` on error.
function Gio.Resolver:lookup_by_address(address, cancellable) end

--- # method Gio.Resolver:lookup_by_address_async()
---
--- Begins asynchronously reverse-resolving `address` to determine its
--- associated hostname, and eventually calls `callback`, which must
--- call `g_resolver_lookup_by_address_finish()` to get the final result.
---
--- ---
---
---@param self Gio.Resolver # a `GResolver`
---@param address Gio.InetAddress # the address to reverse-resolve
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # callback to call after resolution completes
---@param user_data? userdata # data for `callback`
---@return nil
function Gio.Resolver:lookup_by_address_async(address, cancellable, callback, user_data) end

--- # method Gio.Resolver:lookup_by_address_finish()
---
--- Retrieves the result of a previous call to
--- `g_resolver_lookup_by_address_async()`.
--- 
--- If the DNS resolution failed, `error` (if non-`nil`) will be set to
--- a value from `GResolverError`. If the operation was cancelled,
--- `error` will be set to %G_IO_ERROR_CANCELLED.
---
--- ---
---
---@param self Gio.Resolver # a `GResolver`
---@param result Gio.AsyncResult # the result passed to your `GAsyncReadyCallback`
---@return string # a hostname (either ASCII-only, or in ASCII-encoded form), or `nil` on error.
function Gio.Resolver:lookup_by_address_finish(result) end

--- # method Gio.Resolver:lookup_by_name()
---
--- Synchronously resolves `hostname` to determine its associated IP
--- address(es). `hostname` may be an ASCII-only or UTF-8 hostname, or
--- the textual form of an IP address (in which case this just becomes
--- a wrapper around `g_inet_address_new_from_string()`).
--- 
--- On success, `g_resolver_lookup_by_name()` will return a non-empty `GList` of
--- `GInetAddress`, sorted in order of preference and guaranteed to not
--- contain duplicates. That is, if using the result to connect to
--- `hostname`, you should attempt to connect to the first address
--- first, then the second if the first fails, etc. If you are using
--- the result to listen on a socket, it is appropriate to add each
--- result using e.g. `g_socket_listener_add_address()`.
--- 
--- If the DNS resolution fails, `error` (if non-`nil`) will be set to a
--- value from `GResolverError` and `nil` will be returned.
--- 
--- If `cancellable` is non-`nil`, it can be used to cancel the
--- operation, in which case `error` (if non-`nil`) will be set to
--- %G_IO_ERROR_CANCELLED.
--- 
--- If you are planning to connect to a socket on the resolved IP
--- address, it may be easier to create a `GNetworkAddress` and use its
--- `GSocketConnectable` interface.
---
--- ---
---
---@param self Gio.Resolver # a `GResolver`
---@param hostname string # the hostname to look up
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return Gio.InetAddress[] # a non-empty `GList` of `GInetAddress`, or `nil` on error. You must unref each of the addresses and free the list when you are done with it. (You can use `g_resolver_free_addresses()` to do this.)
function Gio.Resolver:lookup_by_name(hostname, cancellable) end

--- # method Gio.Resolver:lookup_by_name_async()
---
--- Begins asynchronously resolving `hostname` to determine its
--- associated IP address(es), and eventually calls `callback`, which
--- must call `g_resolver_lookup_by_name_finish()` to get the result.
--- See `g_resolver_lookup_by_name()` for more details.
---
--- ---
---
---@param self Gio.Resolver # a `GResolver`
---@param hostname string # the hostname to look up the address of
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # callback to call after resolution completes
---@param user_data? userdata # data for `callback`
---@return nil
function Gio.Resolver:lookup_by_name_async(hostname, cancellable, callback, user_data) end

--- # method Gio.Resolver:lookup_by_name_finish()
---
--- Retrieves the result of a call to
--- `g_resolver_lookup_by_name_async()`.
--- 
--- If the DNS resolution failed, `error` (if non-`nil`) will be set to
--- a value from `GResolverError`. If the operation was cancelled,
--- `error` will be set to %G_IO_ERROR_CANCELLED.
---
--- ---
---
---@param self Gio.Resolver # a `GResolver`
---@param result Gio.AsyncResult # the result passed to your `GAsyncReadyCallback`
---@return Gio.InetAddress[] # a `GList` of `GInetAddress`, or `nil` on error. See `g_resolver_lookup_by_name()` for more details.
function Gio.Resolver:lookup_by_name_finish(result) end

--- # method Gio.Resolver:lookup_by_name_with_flags()
---
--- This differs from `g_resolver_lookup_by_name()` in that you can modify
--- the lookup behavior with `flags`. For example this can be used to limit
--- results with %G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY.
---
--- ---
---
---@param self Gio.Resolver # a `GResolver`
---@param hostname string # the hostname to look up
---@param flags Gio.ResolverNameLookupFlags # extra `GResolverNameLookupFlags` for the lookup
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return Gio.InetAddress[] # a non-empty `GList` of `GInetAddress`, or `nil` on error. You must unref each of the addresses and free the list when you are done with it. (You can use `g_resolver_free_addresses()` to do this.)
function Gio.Resolver:lookup_by_name_with_flags(hostname, flags, cancellable) end

--- # method Gio.Resolver:lookup_by_name_with_flags_async()
---
--- Begins asynchronously resolving `hostname` to determine its
--- associated IP address(es), and eventually calls `callback`, which
--- must call `g_resolver_lookup_by_name_with_flags_finish()` to get the result.
--- See `g_resolver_lookup_by_name()` for more details.
---
--- ---
---
---@param self Gio.Resolver # a `GResolver`
---@param hostname string # the hostname to look up the address of
---@param flags Gio.ResolverNameLookupFlags # extra `GResolverNameLookupFlags` for the lookup
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # callback to call after resolution completes
---@param user_data? userdata # data for `callback`
---@return nil
function Gio.Resolver:lookup_by_name_with_flags_async(hostname, flags, cancellable, callback, user_data) end

--- # method Gio.Resolver:lookup_by_name_with_flags_finish()
---
--- Retrieves the result of a call to
--- `g_resolver_lookup_by_name_with_flags_async()`.
--- 
--- If the DNS resolution failed, `error` (if non-`nil`) will be set to
--- a value from `GResolverError`. If the operation was cancelled,
--- `error` will be set to %G_IO_ERROR_CANCELLED.
---
--- ---
---
---@param self Gio.Resolver # a `GResolver`
---@param result Gio.AsyncResult # the result passed to your `GAsyncReadyCallback`
---@return Gio.InetAddress[] # a `GList` of `GInetAddress`, or `nil` on error. See `g_resolver_lookup_by_name()` for more details.
function Gio.Resolver:lookup_by_name_with_flags_finish(result) end

--- # method Gio.Resolver:lookup_records()
---
--- Synchronously performs a DNS record lookup for the given `rrname` and returns
--- a list of records as `GVariant` tuples. See `GResolverRecordType` for
--- information on what the records contain for each `record_type`.
--- 
--- If the DNS resolution fails, `error` (if non-`nil`) will be set to
--- a value from `GResolverError` and `nil` will be returned.
--- 
--- If `cancellable` is non-`nil`, it can be used to cancel the
--- operation, in which case `error` (if non-`nil`) will be set to
--- %G_IO_ERROR_CANCELLED.
---
--- ---
---
---@param self Gio.Resolver # a `GResolver`
---@param rrname string # the DNS name to look up the record for
---@param record_type Gio.ResolverRecordType # the type of DNS record to look up
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return GLib.Variant[] # a non-empty `GList` of `GVariant`, or `nil` on error. You must free each of the records and the list when you are done with it. (You can use `g_list_free_full()` with `g_variant_unref()` to do this.)
function Gio.Resolver:lookup_records(rrname, record_type, cancellable) end

--- # method Gio.Resolver:lookup_records_async()
---
--- Begins asynchronously performing a DNS lookup for the given
--- `rrname`, and eventually calls `callback`, which must call
--- `g_resolver_lookup_records_finish()` to get the final result. See
--- `g_resolver_lookup_records()` for more details.
---
--- ---
---
---@param self Gio.Resolver # a `GResolver`
---@param rrname string # the DNS name to look up the record for
---@param record_type Gio.ResolverRecordType # the type of DNS record to look up
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # callback to call after resolution completes
---@param user_data? userdata # data for `callback`
---@return nil
function Gio.Resolver:lookup_records_async(rrname, record_type, cancellable, callback, user_data) end

--- # method Gio.Resolver:lookup_records_finish()
---
--- Retrieves the result of a previous call to
--- `g_resolver_lookup_records_async()`. Returns a non-empty list of records as
--- `GVariant` tuples. See `GResolverRecordType` for information on what the
--- records contain.
--- 
--- If the DNS resolution failed, `error` (if non-`nil`) will be set to
--- a value from `GResolverError`. If the operation was cancelled,
--- `error` will be set to %G_IO_ERROR_CANCELLED.
---
--- ---
---
---@param self Gio.Resolver # a `GResolver`
---@param result Gio.AsyncResult # the result passed to your `GAsyncReadyCallback`
---@return GLib.Variant[] # a non-empty `GList` of `GVariant`, or `nil` on error. You must free each of the records and the list when you are done with it. (You can use `g_list_free_full()` with `g_variant_unref()` to do this.)
function Gio.Resolver:lookup_records_finish(result) end

--- # method Gio.Resolver:lookup_service()
---
--- Synchronously performs a DNS SRV lookup for the given `service` and
--- `protocol` in the given `domain` and returns an array of `GSrvTarget`.
--- `domain` may be an ASCII-only or UTF-8 hostname. Note also that the
--- `service` and `protocol` arguments do not include the leading underscore
--- that appears in the actual DNS entry.
--- 
--- On success, `g_resolver_lookup_service()` will return a non-empty `GList` of
--- `GSrvTarget`, sorted in order of preference. (That is, you should
--- attempt to connect to the first target first, then the second if
--- the first fails, etc.)
--- 
--- If the DNS resolution fails, `error` (if non-`nil`) will be set to
--- a value from `GResolverError` and `nil` will be returned.
--- 
--- If `cancellable` is non-`nil`, it can be used to cancel the
--- operation, in which case `error` (if non-`nil`) will be set to
--- %G_IO_ERROR_CANCELLED.
--- 
--- If you are planning to connect to the service, it is usually easier
--- to create a `GNetworkService` and use its `GSocketConnectable`
--- interface.
---
--- ---
---
---@param self Gio.Resolver # a `GResolver`
---@param service string # the service type to look up (eg, "ldap")
---@param protocol string # the networking protocol to use for `service` (eg, "tcp")
---@param domain string # the DNS domain to look up the service in
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return Gio.SrvTarget[] # a non-empty `GList` of `GSrvTarget`, or `nil` on error. You must free each of the targets and the list when you are done with it. (You can use `g_resolver_free_targets()` to do this.)
function Gio.Resolver:lookup_service(service, protocol, domain, cancellable) end

--- # method Gio.Resolver:lookup_service_async()
---
--- Begins asynchronously performing a DNS SRV lookup for the given
--- `service` and `protocol` in the given `domain`, and eventually calls
--- `callback`, which must call `g_resolver_lookup_service_finish()` to
--- get the final result. See `g_resolver_lookup_service()` for more
--- details.
---
--- ---
---
---@param self Gio.Resolver # a `GResolver`
---@param service string # the service type to look up (eg, "ldap")
---@param protocol string # the networking protocol to use for `service` (eg, "tcp")
---@param domain string # the DNS domain to look up the service in
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # callback to call after resolution completes
---@param user_data? userdata # data for `callback`
---@return nil
function Gio.Resolver:lookup_service_async(service, protocol, domain, cancellable, callback, user_data) end

--- # method Gio.Resolver:lookup_service_finish()
---
--- Retrieves the result of a previous call to
--- `g_resolver_lookup_service_async()`.
--- 
--- If the DNS resolution failed, `error` (if non-`nil`) will be set to
--- a value from `GResolverError`. If the operation was cancelled,
--- `error` will be set to %G_IO_ERROR_CANCELLED.
---
--- ---
---
---@param self Gio.Resolver # a `GResolver`
---@param result Gio.AsyncResult # the result passed to your `GAsyncReadyCallback`
---@return Gio.SrvTarget[] # a non-empty `GList` of `GSrvTarget`, or `nil` on error. See `g_resolver_lookup_service()` for more details.
function Gio.Resolver:lookup_service_finish(result) end

--- # method Gio.Resolver:set_default()
---
--- Sets `resolver` to be the application's default resolver (reffing
--- `resolver`, and unreffing the previous default resolver, if any).
--- Future calls to `g_resolver_get_default()` will return this resolver.
--- 
--- This can be used if an application wants to perform any sort of DNS
--- caching or "pinning"; it can implement its own `GResolver` that
--- calls the original default resolver for DNS operations, and
--- implements its own cache policies on top of that, and then set
--- itself as the default resolver for all later code to use.
---
--- ---
---
---@param self Gio.Resolver # the new default `GResolver`
---@return nil
function Gio.Resolver:set_default() end

--- # function Gio.Resolver.get_default()
---
--- Gets the default `GResolver`. You should unref it when you are done
--- with it. `GResolver` may use its reference count as a hint about how
--- many threads it should allocate for concurrent DNS resolutions.
---
--- ---
---
---@return Gio.Resolver # the default `GResolver`.
function Gio.Resolver.get_default() end

--- # record Gio.ResolverClass
---
---@class Gio.ResolverClass
---@field parent_class GObject.ObjectClass
---@field reload fun(resolver: Gio.Resolver): nil
---@field lookup_by_name fun(resolver: Gio.Resolver, hostname: string, cancellable: Gio.Cancellable): Gio.InetAddress[]
---@field lookup_by_name_async fun(resolver: Gio.Resolver, hostname: string, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field lookup_by_name_finish fun(resolver: Gio.Resolver, result: Gio.AsyncResult): Gio.InetAddress[]
---@field lookup_by_address fun(resolver: Gio.Resolver, address: Gio.InetAddress, cancellable: Gio.Cancellable): string
---@field lookup_by_address_async fun(resolver: Gio.Resolver, address: Gio.InetAddress, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field lookup_by_address_finish fun(resolver: Gio.Resolver, result: Gio.AsyncResult): string
---@field lookup_service_async fun(resolver: Gio.Resolver, rrname: string, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field lookup_service_finish fun(resolver: Gio.Resolver, result: Gio.AsyncResult): Gio.SrvTarget[]
---@field lookup_records fun(resolver: Gio.Resolver, rrname: string, record_type: Gio.ResolverRecordType, cancellable: Gio.Cancellable): GLib.Variant[]
---@field lookup_records_async fun(resolver: Gio.Resolver, rrname: string, record_type: Gio.ResolverRecordType, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field lookup_records_finish fun(resolver: Gio.Resolver, result: Gio.AsyncResult): GLib.Variant[]
---@field lookup_by_name_with_flags_async fun(resolver: Gio.Resolver, hostname: string, flags: Gio.ResolverNameLookupFlags, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field lookup_by_name_with_flags_finish fun(resolver: Gio.Resolver, result: Gio.AsyncResult): Gio.InetAddress[]
---@field lookup_by_name_with_flags fun(resolver: Gio.Resolver, hostname: string, flags: Gio.ResolverNameLookupFlags, cancellable: Gio.Cancellable): Gio.InetAddress[]
Gio.ResolverClass = {}

---@enum Gio.ResolverError
Gio.ResolverError = {}

---@enum Gio.ResolverNameLookupFlags
Gio.ResolverNameLookupFlags = {}

--- # record Gio.ResolverPrivate
---
---@class Gio.ResolverPrivate
Gio.ResolverPrivate = {}

---@enum Gio.ResolverRecordType
Gio.ResolverRecordType = {}

--- # record Gio.Resource
---
--- Applications and libraries often contain binary or textual data that is
--- really part of the application, rather than user data. For instance
--- `GtkBuilder` .ui files, splashscreen images, GMenu markup XML, CSS files,
--- icons, etc. These are often shipped as files in `$datadir/appname`, or
--- manually included as literal strings in the code.
--- 
--- The `GResource` API and the [glib-compile-resources][glib-compile-resources] program
--- provide a convenient and efficient alternative to this which has some nice properties. You
--- maintain the files as normal files, so its easy to edit them, but during the build the files
--- are combined into a binary bundle that is linked into the executable. This means that loading
--- the resource files are efficient (as they are already in memory, shared with other instances) and
--- simple (no need to check for things like I/O errors or locate the files in the filesystem). It
--- also makes it easier to create relocatable applications.
--- 
--- Resource files can also be marked as compressed. Such files will be included in the resource bundle
--- in a compressed form, but will be automatically uncompressed when the resource is used. This
--- is very useful e.g. for larger text files that are parsed once (or rarely) and then thrown away.
--- 
--- Resource files can also be marked to be preprocessed, by setting the value of the
--- `preprocess` attribute to a comma-separated list of preprocessing options.
--- The only options currently supported are:
--- 
--- `xml-stripblanks` which will use the xmllint command
--- to strip ignorable whitespace from the XML file. For this to work,
--- the `XMLLINT` environment variable must be set to the full path to
--- the xmllint executable, or xmllint must be in the `PATH`; otherwise
--- the preprocessing step is skipped.
--- 
--- `to-pixdata` (deprecated since gdk-pixbuf 2.32) which will use the
--- `gdk-pixbuf-pixdata` command to convert images to the `GdkPixdata` format,
--- which allows you to create pixbufs directly using the data inside the
--- resource file, rather than an (uncompressed) copy of it. For this, the
--- `gdk-pixbuf-pixdata` program must be in the `PATH`, or the
--- `GDK_PIXBUF_PIXDATA` environment variable must be set to the full path to the
--- `gdk-pixbuf-pixdata` executable; otherwise the resource compiler will abort.
--- `to-pixdata` has been deprecated since gdk-pixbuf 2.32, as `GResource`
--- supports embedding modern image formats just as well. Instead of using it,
--- embed a PNG or SVG file in your `GResource`.
--- 
--- `json-stripblanks` which will use the `json-glib-format` command to strip
--- ignorable whitespace from the JSON file. For this to work, the
--- `JSON_GLIB_FORMAT` environment variable must be set to the full path to the
--- `json-glib-format` executable, or it must be in the `PATH`;
--- otherwise the preprocessing step is skipped. In addition, at least version
--- 1.6 of `json-glib-format` is required.
--- 
--- Resource files will be exported in the GResource namespace using the
--- combination of the given `prefix` and the filename from the `file` element.
--- The `alias` attribute can be used to alter the filename to expose them at a
--- different location in the resource namespace. Typically, this is used to
--- include files from a different source directory without exposing the source
--- directory in the resource namespace, as in the example below.
--- 
--- Resource bundles are created by the [glib-compile-resources][glib-compile-resources] program
--- which takes an XML file that describes the bundle, and a set of files that the XML references. These
--- are combined into a binary resource bundle.
--- 
--- An example resource description:
--- ```c
--- <?xml version="1.0" encoding="UTF-8"?>
--- <gresources>
---   <gresource prefix="/org/gtk/Example">
---     <file>data/splashscreen.png</file>
---     <file compressed="true">dialog.ui</file>
---     <file preprocess="xml-stripblanks">menumarkup.xml</file>
---     <file alias="example.css">data/example.css</file>
---   </gresource>
--- </gresources>
--- ```
--- 
--- This will create a resource bundle with the following files:
--- ```c
--- /org/gtk/Example/data/splashscreen.png
--- /org/gtk/Example/dialog.ui
--- /org/gtk/Example/menumarkup.xml
--- /org/gtk/Example/example.css
--- ```
--- 
--- Note that all resources in the process share the same namespace, so use Java-style
--- path prefixes (like in the above example) to avoid conflicts.
--- 
--- You can then use [glib-compile-resources][glib-compile-resources] to compile the XML to a
--- binary bundle that you can load with `g_resource_load()`. However, its more common to use the --generate-source and
--- --generate-header arguments to create a source file and header to link directly into your application.
--- This will generate ``get_resource()``, ``register_resource()`` and
--- ``unregister_resource()`` functions, prefixed by the `--c-name` argument passed
--- to [glib-compile-resources][glib-compile-resources]. ``get_resource()`` returns
--- the generated `GResource` object. The register and unregister functions
--- register the resource so its files can be accessed using
--- `g_resources_lookup_data()`.
--- 
--- Once a `GResource` has been created and registered all the data in it can be accessed globally in the process by
--- using API calls like `g_resources_open_stream()` to stream the data or `g_resources_lookup_data()` to get a direct pointer
--- to the data. You can also use URIs like "resource:///org/gtk/Example/data/splashscreen.png" with `GFile` to access
--- the resource data.
--- 
--- Some higher-level APIs, such as `GtkApplication`, will automatically load
--- resources from certain well-known paths in the resource namespace as a
--- convenience. See the documentation for those APIs for details.
--- 
--- There are two forms of the generated source, the default version uses the compiler support for constructor
--- and destructor functions (where available) to automatically create and register the `GResource` on startup
--- or library load time. If you pass `--manual-register`, two functions to register/unregister the resource are created
--- instead. This requires an explicit initialization call in your application/library, but it works on all platforms,
--- even on the minor ones where constructors are not supported. (Constructor support is available for at least Win32, Mac OS and Linux.)
--- 
--- Note that resource data can point directly into the data segment of e.g. a library, so if you are unloading libraries
--- during runtime you need to be very careful with keeping around pointers to data from a resource, as this goes away
--- when the library is unloaded. However, in practice this is not generally a problem, since most resource accesses
--- are for your own resources, and resource data is often used once, during parsing, and then released.
--- 
--- When debugging a program or testing a change to an installed version, it is often useful to be able to
--- replace resources in the program or library, without recompiling, for debugging or quick hacking and testing
--- purposes. Since GLib 2.50, it is possible to use the `G_RESOURCE_OVERLAYS` environment variable to selectively overlay
--- resources with replacements from the filesystem.  It is a %G_SEARCHPATH_SEPARATOR-separated list of substitutions to perform
--- during resource lookups. It is ignored when running in a setuid process.
--- 
--- A substitution has the form
--- 
--- ```c
---    /org/gtk/libgtk=/home/desrt/gtk-overlay
--- ```
--- 
--- The part before the `=` is the resource subpath for which the overlay applies.  The part after is a
--- filesystem path which contains files and subdirectories as you would like to be loaded as resources with the
--- equivalent names.
--- 
--- In the example above, if an application tried to load a resource with the resource path
--- `/org/gtk/libgtk/ui/gtkdialog.ui` then GResource would check the filesystem path
--- `/home/desrt/gtk-overlay/ui/gtkdialog.ui`.  If a file was found there, it would be used instead.  This is an
--- overlay, not an outright replacement, which means that if a file is not found at that path, the built-in
--- version will be used instead.  Whiteouts are not currently supported.
--- 
--- Substitutions must start with a slash, and must not contain a trailing slash before the '='.  The path after
--- the slash should ideally be absolute, but this is not strictly required.  It is possible to overlay the
--- location of a single resource with an individual file.
---
--- ---
---
---@class Gio.Resource
Gio.Resource = {}

--- # method Gio.Resource:_register()
---
--- Registers the resource with the process-global set of resources.
--- Once a resource is registered the files in it can be accessed
--- with the global resource lookup functions like `g_resources_lookup_data()`.
---
--- ---
---
---@param self Gio.Resource # A `GResource`
---@return nil
function Gio.Resource:_register() end

--- # method Gio.Resource:_unregister()
---
--- Unregisters the resource from the process-global set of resources.
---
--- ---
---
---@param self Gio.Resource # A `GResource`
---@return nil
function Gio.Resource:_unregister() end

--- # method Gio.Resource:enumerate_children()
---
--- Returns all the names of children at the specified `path` in the resource.
--- The return result is a `nil` terminated list of strings which should
--- be released with `g_strfreev()`.
--- 
--- If `path` is invalid or does not exist in the `GResource`,
--- %G_RESOURCE_ERROR_NOT_FOUND will be returned.
--- 
--- `lookup_flags` controls the behaviour of the lookup.
---
--- ---
---
---@param self Gio.Resource # A `GResource`
---@param path string # A pathname inside the resource
---@param lookup_flags Gio.ResourceLookupFlags # A `GResourceLookupFlags`
---@return unknown[] # an array of constant strings
function Gio.Resource:enumerate_children(path, lookup_flags) end

--- # method Gio.Resource:get_info()
---
--- Looks for a file at the specified `path` in the resource and
--- if found returns information about it.
--- 
--- `lookup_flags` controls the behaviour of the lookup.
---
--- ---
---
---@param self Gio.Resource # A `GResource`
---@param path string # A pathname inside the resource
---@param lookup_flags Gio.ResourceLookupFlags # A `GResourceLookupFlags`
---@param size? integer # a location to place the length of the contents of the file, or `nil` if the length is not needed
---@param flags? integer # a location to place the flags about the file, or `nil` if the length is not needed
---@return (boolean|nil) # `true` if the file was found. `false` if there were errors
function Gio.Resource:get_info(path, lookup_flags, size, flags) end

--- # method Gio.Resource:lookup_data()
---
--- Looks for a file at the specified `path` in the resource and
--- returns a `GBytes` that lets you directly access the data in
--- memory.
--- 
--- The data is always followed by a zero byte, so you
--- can safely use the data as a C string. However, that byte
--- is not included in the size of the GBytes.
--- 
--- For uncompressed resource files this is a pointer directly into
--- the resource bundle, which is typically in some readonly data section
--- in the program binary. For compressed files we allocate memory on
--- the heap and automatically uncompress the data.
--- 
--- `lookup_flags` controls the behaviour of the lookup.
---
--- ---
---
---@param self Gio.Resource # A `GResource`
---@param path string # A pathname inside the resource
---@param lookup_flags Gio.ResourceLookupFlags # A `GResourceLookupFlags`
---@return GLib.Bytes # `GBytes` or `nil` on error. Free the returned object with `g_bytes_unref()`
function Gio.Resource:lookup_data(path, lookup_flags) end

--- # method Gio.Resource:open_stream()
---
--- Looks for a file at the specified `path` in the resource and
--- returns a `GInputStream` that lets you read the data.
--- 
--- `lookup_flags` controls the behaviour of the lookup.
---
--- ---
---
---@param self Gio.Resource # A `GResource`
---@param path string # A pathname inside the resource
---@param lookup_flags Gio.ResourceLookupFlags # A `GResourceLookupFlags`
---@return Gio.InputStream # `GInputStream` or `nil` on error. Free the returned object with `g_object_unref()`
function Gio.Resource:open_stream(path, lookup_flags) end

--- # method Gio.Resource:ref()
---
--- Atomically increments the reference count of `resource` by one. This
--- function is MT-safe and may be called from any thread.
---
--- ---
---
---@param self Gio.Resource # A `GResource`
---@return Gio.Resource # The passed in `GResource`
function Gio.Resource:ref() end

--- # method Gio.Resource:unref()
---
--- Atomically decrements the reference count of `resource` by one. If the
--- reference count drops to 0, all memory allocated by the resource is
--- released. This function is MT-safe and may be called from any
--- thread.
---
--- ---
---
---@param self Gio.Resource # A `GResource`
---@return nil
function Gio.Resource:unref() end

--- # function Gio.Resource.load()
---
--- Loads a binary resource bundle and creates a `GResource` representation of it, allowing
--- you to query it for data.
--- 
--- If you want to use this resource in the global resource namespace you need
--- to register it with `g_resources_register()`.
--- 
--- If `filename` is empty or the data in it is corrupt,
--- %G_RESOURCE_ERROR_INTERNAL will be returned. If `filename` doesn’t exist, or
--- there is an error in reading it, an error from `g_mapped_file_new()` will be
--- returned.
---
--- ---
---
---@param filename string # the path of a filename to load, in the GLib filename encoding
---@return Gio.Resource # a new `GResource`, or `nil` on error
function Gio.Resource.load(filename) end

--- # function Gio.Resource.new_from_data()
---
--- Creates a GResource from a reference to the binary resource bundle.
--- This will keep a reference to `data` while the resource lives, so
--- the data should not be modified or freed.
--- 
--- If you want to use this resource in the global resource namespace you need
--- to register it with `g_resources_register()`.
--- 
--- Note: `data` must be backed by memory that is at least pointer aligned.
--- Otherwise this function will internally create a copy of the memory since
--- GLib 2.56, or in older versions fail and exit the process.
--- 
--- If `data` is empty or corrupt, %G_RESOURCE_ERROR_INTERNAL will be returned.
---
--- ---
---
---@param data GLib.Bytes # A `GBytes`
---@return Gio.Resource # a new `GResource`, or `nil` on error
function Gio.Resource.new_from_data(data) end

---@enum Gio.ResourceError
Gio.ResourceError = {}

---@enum Gio.ResourceFlags
Gio.ResourceFlags = {}

---@enum Gio.ResourceLookupFlags
Gio.ResourceLookupFlags = {}

--- # interface Gio.Seekable
---
--- `GSeekable` is implemented by streams (implementations of
--- `GInputStream` or `GOutputStream`) that support seeking.
--- 
--- Seekable streams largely fall into two categories: resizable and
--- fixed-size.
--- 
--- `GSeekable` on fixed-sized streams is approximately the same as POSIX
--- `lseek()` on a block device (for example: attempting to seek past the
--- end of the device is an error).  Fixed streams typically cannot be
--- truncated.
--- 
--- `GSeekable` on resizable streams is approximately the same as POSIX
--- `lseek()` on a normal file.  Seeking past the end and writing data will
--- usually cause the stream to resize by introducing zero bytes.
---
--- ---
---
---@class Gio.Seekable
Gio.Seekable = {}

--- # method Gio.Seekable:can_seek()
---
--- Tests if the stream supports the `GSeekableIface`.
---
--- ---
---
---@param self Gio.Seekable # a `GSeekable`.
---@return (boolean|nil) # `true` if `seekable` can be seeked. `false` otherwise.
function Gio.Seekable:can_seek() end

--- # method Gio.Seekable:can_truncate()
---
--- Tests if the length of the stream can be adjusted with
--- `g_seekable_truncate()`.
---
--- ---
---
---@param self Gio.Seekable # a `GSeekable`.
---@return (boolean|nil) # `true` if the stream can be truncated, `false` otherwise.
function Gio.Seekable:can_truncate() end

--- # method Gio.Seekable:seek()
---
--- Seeks in the stream by the given `offset`, modified by `type`.
--- 
--- Attempting to seek past the end of the stream will have different
--- results depending on if the stream is fixed-sized or resizable.  If
--- the stream is resizable then seeking past the end and then writing
--- will result in zeros filling the empty space.  Seeking past the end
--- of a resizable stream and reading will result in EOF.  Seeking past
--- the end of a fixed-sized stream will fail.
--- 
--- Any operation that would result in a negative offset will fail.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.Seekable # a `GSeekable`.
---@param offset integer # a `goffset`.
---@param type GLib.SeekType # a `GSeekType`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `true` if successful. If an error has occurred, this function will return `false` and set `error` appropriately if present.
function Gio.Seekable:seek(offset, type, cancellable) end

--- # method Gio.Seekable:tell()
---
--- Tells the current position within the stream.
---
--- ---
---
---@param self Gio.Seekable # a `GSeekable`.
---@return integer # the (positive or zero) offset from the beginning of the buffer, zero if the target is not seekable.
function Gio.Seekable:tell() end

--- # method Gio.Seekable:truncate()
---
--- Sets the length of the stream to `offset`. If the stream was previously
--- larger than `offset`, the extra data is discarded. If the stream was
--- previously shorter than `offset`, it is extended with NUL ('\0') bytes.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
--- operation was partially finished when the operation was cancelled the
--- partial result will be returned, without an error.
---
--- ---
---
---@param self Gio.Seekable # a `GSeekable`.
---@param offset integer # new length for `seekable`, in bytes.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `true` if successful. If an error has occurred, this function will return `false` and set `error` appropriately if present.
function Gio.Seekable:truncate(offset, cancellable) end

--- # record Gio.SeekableIface
---
--- Provides an interface for implementing seekable functionality on I/O Streams.
---
--- ---
---
---@class Gio.SeekableIface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field tell fun(seekable: Gio.Seekable): integer
---@field can_seek fun(seekable: Gio.Seekable): (boolean|nil)
---@field seek fun(seekable: Gio.Seekable, offset: integer, type: GLib.SeekType, cancellable: Gio.Cancellable): (boolean|nil)
---@field can_truncate fun(seekable: Gio.Seekable): (boolean|nil)
---@field truncate_fn fun(seekable: Gio.Seekable, offset: integer, cancellable: Gio.Cancellable): (boolean|nil)
Gio.SeekableIface = {}

--- # class Gio.Settings
---
--- The `GSettings` class provides a convenient API for storing and retrieving
--- application settings.
--- 
--- Reads and writes can be considered to be non-blocking.  Reading
--- settings with `GSettings` is typically extremely fast: on
--- approximately the same order of magnitude (but slower than) a
--- `GHashTable` lookup.  Writing settings is also extremely fast in terms
--- of time to return to your application, but can be extremely expensive
--- for other threads and other processes.  Many settings backends
--- (including dconf) have lazy initialisation which means in the common
--- case of the user using their computer without modifying any settings
--- a lot of work can be avoided.  For dconf, the D-Bus service doesn't
--- even need to be started in this case.  For this reason, you should
--- only ever modify `GSettings` keys in response to explicit user action.
--- Particular care should be paid to ensure that modifications are not
--- made during startup -- for example, when setting the initial value
--- of preferences widgets.  The built-in `g_settings_bind()` functionality
--- is careful not to write settings in response to notify signals as a
--- result of modifications that it makes to widgets.
--- 
--- When creating a GSettings instance, you have to specify a schema
--- that describes the keys in your settings and their types and default
--- values, as well as some other information.
--- 
--- Normally, a schema has a fixed path that determines where the settings
--- are stored in the conceptual global tree of settings. However, schemas
--- can also be '[relocatable][gsettings-relocatable]', i.e. not equipped with
--- a fixed path. This is
--- useful e.g. when the schema describes an 'account', and you want to be
--- able to store a arbitrary number of accounts.
--- 
--- Paths must start with and end with a forward slash character ('/')
--- and must not contain two sequential slash characters.  Paths should
--- be chosen based on a domain name associated with the program or
--- library to which the settings belong.  Examples of paths are
--- "/org/gtk/settings/file-chooser/" and "/ca/desrt/dconf-editor/".
--- Paths should not start with "/apps/", "/desktop/" or "/system/" as
--- they often did in GConf.
--- 
--- Unlike other configuration systems (like GConf), GSettings does not
--- restrict keys to basic types like strings and numbers. GSettings stores
--- values as `GVariant`, and allows any `GVariantType` for keys. Key names
--- are restricted to lowercase characters, numbers and '-'. Furthermore,
--- the names must begin with a lowercase character, must not end
--- with a '-', and must not contain consecutive dashes.
--- 
--- Similar to GConf, the default values in GSettings schemas can be
--- localized, but the localized values are stored in gettext catalogs
--- and looked up with the domain that is specified in the
--- `gettext-domain` attribute of the <schemalist> or <schema>
--- elements and the category that is specified in the `l10n` attribute of
--- the <default> element. The string which is translated includes all text in
--- the <default> element, including any surrounding quotation marks.
--- 
--- The `l10n` attribute must be set to `messages` or `time`, and sets the
--- [locale category for
--- translation](https://www.gnu.org/software/gettext/manual/html_node/Aspects.html`index`-locale-categories-1).
--- The `messages` category should be used by default; use `time` for
--- translatable date or time formats. A translation comment can be added as an
--- XML comment immediately above the <default> element — it is recommended to
--- add these comments to aid translators understand the meaning and
--- implications of the default value. An optional translation `context`
--- attribute can be set on the <default> element to disambiguate multiple
--- defaults which use the same string.
--- 
--- For example:
--- ```c
---  <!-- Translators: A list of words which are not allowed to be typed, in
---       GVariant serialization syntax.
---       See: https://developer.gnome.org/glib/stable/gvariant-text.html -->
---  <default l10n='messages' context='Banned words'>['bad', 'words']</default>
--- ```
--- 
--- Translations of default values must remain syntactically valid serialized
--- `GVariants` (e.g. retaining any surrounding quotation marks) or runtime
--- errors will occur.
--- 
--- GSettings uses schemas in a compact binary form that is created
--- by the [glib-compile-schemas][glib-compile-schemas]
--- utility. The input is a schema description in an XML format.
--- 
--- A DTD for the gschema XML format can be found here:
--- [gschema.dtd](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/gschema.dtd)
--- 
--- The [glib-compile-schemas][glib-compile-schemas] tool expects schema
--- files to have the extension `.gschema.xml`.
--- 
--- At runtime, schemas are identified by their id (as specified in the
--- id attribute of the <schema> element). The convention for schema
--- ids is to use a dotted name, similar in style to a D-Bus bus name,
--- e.g. "org.gnome.SessionManager". In particular, if the settings are
--- for a specific service that owns a D-Bus bus name, the D-Bus bus name
--- and schema id should match. For schemas which deal with settings not
--- associated with one named application, the id should not use
--- StudlyCaps, e.g. "org.gnome.font-rendering".
--- 
--- In addition to `GVariant` types, keys can have types that have
--- enumerated types. These can be described by a <choice>,
--- <enum> or <flags> element, as seen in the
--- [example][schema-enumerated]. The underlying type of such a key
--- is string, but you can use `g_settings_get_enum()`, `g_settings_set_enum()`,
--- `g_settings_get_flags()`, `g_settings_set_flags()` access the numeric values
--- corresponding to the string value of enum and flags keys.
--- 
--- An example for default value:
--- ```c
--- <schemalist>
---   <schema id="org.gtk.Test" path="/org/gtk/Test/" gettext-domain="test">
--- 
---     <key name="greeting" type="s">
---       <default l10n="messages">"Hello, earthlings"</default>
---       <summary>A greeting</summary>
---       <description>
---         Greeting of the invading martians
---       </description>
---     </key>
--- 
---     <key name="box" type="(ii)">
---       <default>(20,30)</default>
---     </key>
--- 
---     <key name="empty-string" type="s">
---       <default>""</default>
---       <summary>Empty strings have to be provided in GVariant form</summary>
---     </key>
--- 
---   </schema>
--- </schemalist>
--- ```
--- 
--- An example for ranges, choices and enumerated types:
--- ```c
--- <schemalist>
--- 
---   <enum id="org.gtk.Test.myenum">
---     <value nick="first" value="1"/>
---     <value nick="second" value="2"/>
---   </enum>
--- 
---   <flags id="org.gtk.Test.myflags">
---     <value nick="flag1" value="1"/>
---     <value nick="flag2" value="2"/>
---     <value nick="flag3" value="4"/>
---   </flags>
--- 
---   <schema id="org.gtk.Test">
--- 
---     <key name="key-with-range" type="i">
---       <range min="1" max="100"/>
---       <default>10</default>
---     </key>
--- 
---     <key name="key-with-choices" type="s">
---       <choices>
---         <choice value='Elisabeth'/>
---         <choice value='Annabeth'/>
---         <choice value='Joe'/>
---       </choices>
---       <aliases>
---         <alias value='Anna' target='Annabeth'/>
---         <alias value='Beth' target='Elisabeth'/>
---       </aliases>
---       <default>'Joe'</default>
---     </key>
--- 
---     <key name='enumerated-key' enum='org.gtk.Test.myenum'>
---       <default>'first'</default>
---     </key>
--- 
---     <key name='flags-key' flags='org.gtk.Test.myflags'>
---       <default>["flag1","flag2"]</default>
---     </key>
---   </schema>
--- </schemalist>
--- ```
--- 
--- ## Vendor overrides
--- 
--- Default values are defined in the schemas that get installed by
--- an application. Sometimes, it is necessary for a vendor or distributor
--- to adjust these defaults. Since patching the XML source for the schema
--- is inconvenient and error-prone,
--- [glib-compile-schemas][glib-compile-schemas] reads so-called vendor
--- override' files. These are keyfiles in the same directory as the XML
--- schema sources which can override default values. The schema id serves
--- as the group name in the key file, and the values are expected in
--- serialized GVariant form, as in the following example:
--- ```c
---     [org.gtk.Example]
---     key1='string'
---     key2=1.5
--- ```
--- 
--- glib-compile-schemas expects schema files to have the extension
--- `.gschema.override`.
--- 
--- ## Binding
--- 
--- A very convenient feature of GSettings lets you bind `GObject` properties
--- directly to settings, using `g_settings_bind()`. Once a GObject property
--- has been bound to a setting, changes on either side are automatically
--- propagated to the other side. GSettings handles details like mapping
--- between GObject and GVariant types, and preventing infinite cycles.
--- 
--- This makes it very easy to hook up a preferences dialog to the
--- underlying settings. To make this even more convenient, GSettings
--- looks for a boolean property with the name "sensitivity" and
--- automatically binds it to the writability of the bound setting.
--- If this 'magic' gets in the way, it can be suppressed with the
--- %G_SETTINGS_BIND_NO_SENSITIVITY flag.
--- 
--- ## Relocatable schemas # {`gsettings`-relocatable}
--- 
--- A relocatable schema is one with no `path` attribute specified on its
--- <schema> element. By using `g_settings_new_with_path()`, a `GSettings` object
--- can be instantiated for a relocatable schema, assigning a path to the
--- instance. Paths passed to `g_settings_new_with_path()` will typically be
--- constructed dynamically from a constant prefix plus some form of instance
--- identifier; but they must still be valid GSettings paths. Paths could also
--- be constant and used with a globally installed schema originating from a
--- dependency library.
--- 
--- For example, a relocatable schema could be used to store geometry information
--- for different windows in an application. If the schema ID was
--- `org.foo.MyApp.Window`, it could be instantiated for paths
--- `/org/foo/MyApp/main/`, `/org/foo/MyApp/document-1/`,
--- `/org/foo/MyApp/document-2/`, etc. If any of the paths are well-known
--- they can be specified as <child> elements in the parent schema, e.g.:
--- ```c
--- <schema id="org.foo.MyApp" path="/org/foo/MyApp/">
---   <child name="main" schema="org.foo.MyApp.Window"/>
--- </schema>
--- ```
--- 
--- ## Build system integration # {`gsettings`-build-system}
--- 
--- GSettings comes with autotools integration to simplify compiling and
--- installing schemas. To add GSettings support to an application, add the
--- following to your `configure.ac`:
--- ```c
--- GLIB_GSETTINGS
--- ```
--- 
--- In the appropriate `Makefile.am`, use the following snippet to compile and
--- install the named schema:
--- ```c
--- gsettings_SCHEMAS = org.foo.MyApp.gschema.xml
--- EXTRA_DIST = $(gsettings_SCHEMAS)
--- 
--- `GSETTINGS_RULES`@
--- ```
--- 
--- No changes are needed to the build system to mark a schema XML file for
--- translation. Assuming it sets the `gettext-domain` attribute, a schema may
--- be marked for translation by adding it to `POTFILES.in`, assuming gettext
--- 0.19 is in use (the preferred method for translation):
--- ```c
--- data/org.foo.MyApp.gschema.xml
--- ```
--- 
--- Alternatively, if intltool 0.50.1 is in use:
--- ```c
--- [type: gettext/gsettings]data/org.foo.MyApp.gschema.xml
--- ```
--- 
--- GSettings will use gettext to look up translations for the <summary> and
--- <description> elements, and also any <default> elements which have a `l10n`
--- attribute set. Translations must not be included in the `.gschema.xml` file
--- by the build system, for example by using intltool XML rules with a
--- `.gschema.xml.in` template.
--- 
--- If an enumerated type defined in a C header file is to be used in a GSettings
--- schema, it can either be defined manually using an <enum> element in the
--- schema XML, or it can be extracted automatically from the C header. This
--- approach is preferred, as it ensures the two representations are always
--- synchronised. To do so, add the following to the relevant `Makefile.am`:
--- ```c
--- gsettings_ENUM_NAMESPACE = org.foo.MyApp
--- gsettings_ENUM_FILES = my-app-enums.h my-app-misc.h
--- ```
--- 
--- `gsettings_ENUM_NAMESPACE` specifies the schema namespace for the enum files,
--- which are specified in `gsettings_ENUM_FILES`. This will generate a
--- `org.foo.MyApp.enums.xml` file containing the extracted enums, which will be
--- automatically included in the schema compilation, install and uninstall
--- rules. It should not be committed to version control or included in
--- `EXTRA_DIST`.
---
--- ---
---
---@class Gio.Settings : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.SettingsPrivate
---@operator call: Gio.Settings
Gio.Settings = {}

--- # method Gio.Settings:apply()
---
--- Applies any changes that have been made to the settings.  This
--- function does nothing unless `settings` is in 'delay-apply' mode;
--- see `g_settings_delay()`.  In the normal case settings are always
--- applied immediately.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` instance
---@return nil
function Gio.Settings:apply() end

--- # method Gio.Settings:bind()
---
--- Create a binding between the `key` in the `settings` object
--- and the property `property` of `object`.
--- 
--- The binding uses the default GIO mapping functions to map
--- between the settings and property values. These functions
--- handle booleans, numeric types and string types in a
--- straightforward way. Use `g_settings_bind_with_mapping()` if
--- you need a custom mapping, or map between types that are not
--- supported by the default mapping functions.
--- 
--- Unless the `flags` include %G_SETTINGS_BIND_NO_SENSITIVITY, this
--- function also establishes a binding between the writability of
--- `key` and the "sensitive" property of `object` (if `object` has
--- a boolean property by that name). See `g_settings_bind_writable()`
--- for more details about writable bindings.
--- 
--- Note that the lifecycle of the binding is tied to `object`,
--- and that you can have only one binding per object property.
--- If you bind the same property twice on the same object, the second
--- binding overrides the first one.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the key to bind
---@param object GObject.Object # a `GObject`
---@param property string # the name of the property to bind
---@param flags Gio.SettingsBindFlags # flags for the binding
---@return nil
function Gio.Settings:bind(key, object, property, flags) end

--- # method Gio.Settings:bind_writable()
---
--- Create a binding between the writability of `key` in the
--- `settings` object and the property `property` of `object`.
--- The property must be boolean; "sensitive" or "visible"
--- properties of widgets are the most likely candidates.
--- 
--- Writable bindings are always uni-directional; changes of the
--- writability of the setting will be propagated to the object
--- property, not the other way.
--- 
--- When the `inverted` argument is `true`, the binding inverts the
--- value as it passes from the setting to the object, i.e. `property`
--- will be set to `true` if the key is not writable.
--- 
--- Note that the lifecycle of the binding is tied to `object`,
--- and that you can have only one binding per object property.
--- If you bind the same property twice on the same object, the second
--- binding overrides the first one.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the key to bind
---@param object GObject.Object # a `GObject`
---@param property string # the name of a boolean property to bind
---@param inverted (boolean|nil) # whether to 'invert' the value
---@return nil
function Gio.Settings:bind_writable(key, object, property, inverted) end

--- # method Gio.Settings:create_action()
---
--- Creates a `GAction` corresponding to a given `GSettings` key.
--- 
--- The action has the same name as the key.
--- 
--- The value of the key becomes the state of the action and the action
--- is enabled when the key is writable.  Changing the state of the
--- action results in the key being written to.  Changes to the value or
--- writability of the key cause appropriate change notifications to be
--- emitted for the action.
--- 
--- For boolean-valued keys, action activations take no parameter and
--- result in the toggling of the value.  For all other types,
--- activations take the new value for the key (which must have the
--- correct type).
---
--- ---
---
---@param self Gio.Settings # a `GSettings`
---@param key string # the name of a key in `settings`
---@return Gio.Action # a new `GAction`
function Gio.Settings:create_action(key) end

--- # method Gio.Settings:delay()
---
--- Changes the `GSettings` object into 'delay-apply' mode. In this
--- mode, changes to `settings` are not immediately propagated to the
--- backend, but kept locally until `g_settings_apply()` is called.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@return nil
function Gio.Settings:delay() end

--- # method Gio.Settings:get_boolean()
---
--- Gets the value that is stored at `key` in `settings`.
--- 
--- A convenience variant of `g_settings_get()` for booleans.
--- 
--- It is a programmer error to give a `key` that isn't specified as
--- having a boolean type in the schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the key to get the value for
---@return (boolean|nil) # a boolean
function Gio.Settings:get_boolean(key) end

--- # method Gio.Settings:get_child()
---
--- Creates a child settings object which has a base path of
--- `base-path/`name``, where `base-path` is the base path of
--- `settings`.
--- 
--- The schema for the child settings object must have been declared
--- in the schema of `settings` using a `<child>` element.
--- 
--- The created child settings object will inherit the `GSettings`:delay-apply
--- mode from `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param name string # the name of the child schema
---@return Gio.Settings # a 'child' settings object
function Gio.Settings:get_child(name) end

--- # method Gio.Settings:get_default_value()
---
--- Gets the "default value" of a key.
--- 
--- This is the value that would be read if `g_settings_reset()` were to be
--- called on the key.
--- 
--- Note that this may be a different value than returned by
--- `g_settings_schema_key_get_default_value()` if the system administrator
--- has provided a default value.
--- 
--- Comparing the return values of `g_settings_get_default_value()` and
--- `g_settings_get_value()` is not sufficient for determining if a value
--- has been set because the user may have explicitly set the value to
--- something that happens to be equal to the default.  The difference
--- here is that if the default changes in the future, the user's key
--- will still be set.
--- 
--- This function may be useful for adding an indication to a UI of what
--- the default value was before the user set it.
--- 
--- It is a programmer error to give a `key` that isn't contained in the
--- schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the key to get the default value for
---@return GLib.Variant # the default value
function Gio.Settings:get_default_value(key) end

--- # method Gio.Settings:get_double()
---
--- Gets the value that is stored at `key` in `settings`.
--- 
--- A convenience variant of `g_settings_get()` for doubles.
--- 
--- It is a programmer error to give a `key` that isn't specified as
--- having a 'double' type in the schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the key to get the value for
---@return number # a double
function Gio.Settings:get_double(key) end

--- # method Gio.Settings:get_enum()
---
--- Gets the value that is stored in `settings` for `key` and converts it
--- to the enum value that it represents.
--- 
--- In order to use this function the type of the value must be a string
--- and it must be marked in the schema file as an enumerated type.
--- 
--- It is a programmer error to give a `key` that isn't contained in the
--- schema for `settings` or is not marked as an enumerated type.
--- 
--- If the value stored in the configuration database is not a valid
--- value for the enumerated type then this function will return the
--- default value.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the key to get the value for
---@return integer # the enum value
function Gio.Settings:get_enum(key) end

--- # method Gio.Settings:get_flags()
---
--- Gets the value that is stored in `settings` for `key` and converts it
--- to the flags value that it represents.
--- 
--- In order to use this function the type of the value must be an array
--- of strings and it must be marked in the schema file as a flags type.
--- 
--- It is a programmer error to give a `key` that isn't contained in the
--- schema for `settings` or is not marked as a flags type.
--- 
--- If the value stored in the configuration database is not a valid
--- value for the flags type then this function will return the default
--- value.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the key to get the value for
---@return integer # the flags value
function Gio.Settings:get_flags(key) end

--- # method Gio.Settings:get_has_unapplied()
---
--- Returns whether the `GSettings` object has any unapplied
--- changes.  This can only be the case if it is in 'delayed-apply' mode.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@return (boolean|nil) # `true` if `settings` has unapplied changes
function Gio.Settings:get_has_unapplied() end

--- # method Gio.Settings:get_int()
---
--- Gets the value that is stored at `key` in `settings`.
--- 
--- A convenience variant of `g_settings_get()` for 32-bit integers.
--- 
--- It is a programmer error to give a `key` that isn't specified as
--- having a int32 type in the schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the key to get the value for
---@return integer # an integer
function Gio.Settings:get_int(key) end

--- # method Gio.Settings:get_int64()
---
--- Gets the value that is stored at `key` in `settings`.
--- 
--- A convenience variant of `g_settings_get()` for 64-bit integers.
--- 
--- It is a programmer error to give a `key` that isn't specified as
--- having a int64 type in the schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the key to get the value for
---@return integer # a 64-bit integer
function Gio.Settings:get_int64(key) end

--- # method Gio.Settings:get_mapped()
---
--- Gets the value that is stored at `key` in `settings`, subject to
--- application-level validation/mapping.
--- 
--- You should use this function when the application needs to perform
--- some processing on the value of the key (for example, parsing).  The
--- `mapping` function performs that processing.  If the function
--- indicates that the processing was unsuccessful (due to a parse error,
--- for example) then the mapping is tried again with another value.
--- 
--- This allows a robust 'fall back to defaults' behaviour to be
--- implemented somewhat automatically.
--- 
--- The first value that is tried is the user's setting for the key.  If
--- the mapping function fails to map this value, other values may be
--- tried in an unspecified order (system or site defaults, translated
--- schema default values, untranslated schema default values, etc).
--- 
--- If the mapping function fails for all possible values, one additional
--- attempt is made: the mapping function is called with a `nil` value.
--- If the mapping function still indicates failure at this point then
--- the application will be aborted.
--- 
--- The result parameter for the `mapping` function is pointed to a
--- `gpointer` which is initially set to `nil`.  The same pointer is given
--- to each invocation of `mapping`.  The final value of that `gpointer` is
--- what is returned by this function.  `nil` is valid; it is returned
--- just as any other value would be.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the key to get the value for
---@param mapping Gio.SettingsGetMapping # the function to map the value in the settings database to the value used by the application
---@param user_data? userdata # user data for `mapping`
---@return userdata # the result, which may be `nil`
function Gio.Settings:get_mapped(key, mapping, user_data) end

--- # method Gio.Settings:get_range()
---
--- Queries the range of a key.
---
--- ---
---
---@param self Gio.Settings # a `GSettings`
---@param key string # the key to query the range of
---@return GLib.Variant
function Gio.Settings:get_range(key) end

--- # method Gio.Settings:get_string()
---
--- Gets the value that is stored at `key` in `settings`.
--- 
--- A convenience variant of `g_settings_get()` for strings.
--- 
--- It is a programmer error to give a `key` that isn't specified as
--- having a string type in the schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the key to get the value for
---@return string # a newly-allocated string
function Gio.Settings:get_string(key) end

--- # method Gio.Settings:get_strv()
---
--- A convenience variant of `g_settings_get()` for string arrays.
--- 
--- It is a programmer error to give a `key` that isn't specified as
--- having an array of strings type in the schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the key to get the value for
---@return unknown[] # a newly-allocated, `nil`-terminated array of strings, the value that is stored at `key` in `settings`.
function Gio.Settings:get_strv(key) end

--- # method Gio.Settings:get_uint()
---
--- Gets the value that is stored at `key` in `settings`.
--- 
--- A convenience variant of `g_settings_get()` for 32-bit unsigned
--- integers.
--- 
--- It is a programmer error to give a `key` that isn't specified as
--- having a uint32 type in the schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the key to get the value for
---@return integer # an unsigned integer
function Gio.Settings:get_uint(key) end

--- # method Gio.Settings:get_uint64()
---
--- Gets the value that is stored at `key` in `settings`.
--- 
--- A convenience variant of `g_settings_get()` for 64-bit unsigned
--- integers.
--- 
--- It is a programmer error to give a `key` that isn't specified as
--- having a uint64 type in the schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the key to get the value for
---@return integer # a 64-bit unsigned integer
function Gio.Settings:get_uint64(key) end

--- # method Gio.Settings:get_user_value()
---
--- Checks the "user value" of a key, if there is one.
--- 
--- The user value of a key is the last value that was set by the user.
--- 
--- After calling `g_settings_reset()` this function should always return
--- `nil` (assuming something is not wrong with the system
--- configuration).
--- 
--- It is possible that `g_settings_get_value()` will return a different
--- value than this function.  This can happen in the case that the user
--- set a value for a key that was subsequently locked down by the system
--- administrator -- this function will return the user's old value.
--- 
--- This function may be useful for adding a "reset" option to a UI or
--- for providing indication that a particular value has been changed.
--- 
--- It is a programmer error to give a `key` that isn't contained in the
--- schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the key to get the user value for
---@return GLib.Variant # the user's value, if set
function Gio.Settings:get_user_value(key) end

--- # method Gio.Settings:get_value()
---
--- Gets the value that is stored in `settings` for `key`.
--- 
--- It is a programmer error to give a `key` that isn't contained in the
--- schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the key to get the value for
---@return GLib.Variant # a new `GVariant`
function Gio.Settings:get_value(key) end

--- # method Gio.Settings:is_writable()
---
--- Finds out if a key can be written or not
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param name string # the name of a key
---@return (boolean|nil) # `true` if the key `name` is writable
function Gio.Settings:is_writable(name) end

--- # method Gio.Settings:list_children()
---
--- Gets the list of children on `settings`.
--- 
--- The list is exactly the list of strings for which it is not an error
--- to call `g_settings_get_child()`.
--- 
--- There is little reason to call this function from "normal" code, since
--- you should already know what children are in your schema. This function
--- may still be useful there for introspection reasons, however.
--- 
--- You should free the return value with `g_strfreev()` when you are done
--- with it.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@return unknown[] # a list of the children on `settings`, in no defined order
function Gio.Settings:list_children() end

--- # method Gio.Settings:list_keys()
---
--- Introspects the list of keys on `settings`.
--- 
--- You should probably not be calling this function from "normal" code
--- (since you should already know what keys are in your schema).  This
--- function is intended for introspection reasons.
--- 
--- You should free the return value with `g_strfreev()` when you are done
--- with it.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@return unknown[] # a list of the keys on `settings`, in no defined order
function Gio.Settings:list_keys() end

--- # method Gio.Settings:range_check()
---
--- Checks if the given `value` is of the correct type and within the
--- permitted range for `key`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings`
---@param key string # the key to check
---@param value GLib.Variant # the value to check
---@return (boolean|nil) # `true` if `value` is valid for `key`
function Gio.Settings:range_check(key, value) end

--- # method Gio.Settings:reset()
---
--- Resets `key` to its default value.
--- 
--- This call resets the key, as much as possible, to its default value.
--- That might be the value specified in the schema or the one set by the
--- administrator.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the name of a key
---@return nil
function Gio.Settings:reset(key) end

--- # method Gio.Settings:revert()
---
--- Reverts all non-applied changes to the settings.  This function
--- does nothing unless `settings` is in 'delay-apply' mode; see
--- `g_settings_delay()`.  In the normal case settings are always applied
--- immediately.
--- 
--- Change notifications will be emitted for affected keys.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` instance
---@return nil
function Gio.Settings:revert() end

--- # method Gio.Settings:set_boolean()
---
--- Sets `key` in `settings` to `value`.
--- 
--- A convenience variant of `g_settings_set()` for booleans.
--- 
--- It is a programmer error to give a `key` that isn't specified as
--- having a boolean type in the schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the name of the key to set
---@param value (boolean|nil) # the value to set it to
---@return (boolean|nil) # `true` if setting the key succeeded, `false` if the key was not writable
function Gio.Settings:set_boolean(key, value) end

--- # method Gio.Settings:set_double()
---
--- Sets `key` in `settings` to `value`.
--- 
--- A convenience variant of `g_settings_set()` for doubles.
--- 
--- It is a programmer error to give a `key` that isn't specified as
--- having a 'double' type in the schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the name of the key to set
---@param value number # the value to set it to
---@return (boolean|nil) # `true` if setting the key succeeded, `false` if the key was not writable
function Gio.Settings:set_double(key, value) end

--- # method Gio.Settings:set_enum()
---
--- Looks up the enumerated type nick for `value` and writes it to `key`,
--- within `settings`.
--- 
--- It is a programmer error to give a `key` that isn't contained in the
--- schema for `settings` or is not marked as an enumerated type, or for
--- `value` not to be a valid value for the named type.
--- 
--- After performing the write, accessing `key` directly with
--- `g_settings_get_string()` will return the 'nick' associated with
--- `value`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # a key, within `settings`
---@param value integer # an enumerated value
---@return (boolean|nil) # `true`, if the set succeeds
function Gio.Settings:set_enum(key, value) end

--- # method Gio.Settings:set_flags()
---
--- Looks up the flags type nicks for the bits specified by `value`, puts
--- them in an array of strings and writes the array to `key`, within
--- `settings`.
--- 
--- It is a programmer error to give a `key` that isn't contained in the
--- schema for `settings` or is not marked as a flags type, or for `value`
--- to contain any bits that are not value for the named type.
--- 
--- After performing the write, accessing `key` directly with
--- `g_settings_get_strv()` will return an array of 'nicks'; one for each
--- bit in `value`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # a key, within `settings`
---@param value integer # a flags value
---@return (boolean|nil) # `true`, if the set succeeds
function Gio.Settings:set_flags(key, value) end

--- # method Gio.Settings:set_int()
---
--- Sets `key` in `settings` to `value`.
--- 
--- A convenience variant of `g_settings_set()` for 32-bit integers.
--- 
--- It is a programmer error to give a `key` that isn't specified as
--- having a int32 type in the schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the name of the key to set
---@param value integer # the value to set it to
---@return (boolean|nil) # `true` if setting the key succeeded, `false` if the key was not writable
function Gio.Settings:set_int(key, value) end

--- # method Gio.Settings:set_int64()
---
--- Sets `key` in `settings` to `value`.
--- 
--- A convenience variant of `g_settings_set()` for 64-bit integers.
--- 
--- It is a programmer error to give a `key` that isn't specified as
--- having a int64 type in the schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the name of the key to set
---@param value integer # the value to set it to
---@return (boolean|nil) # `true` if setting the key succeeded, `false` if the key was not writable
function Gio.Settings:set_int64(key, value) end

--- # method Gio.Settings:set_string()
---
--- Sets `key` in `settings` to `value`.
--- 
--- A convenience variant of `g_settings_set()` for strings.
--- 
--- It is a programmer error to give a `key` that isn't specified as
--- having a string type in the schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the name of the key to set
---@param value string # the value to set it to
---@return (boolean|nil) # `true` if setting the key succeeded, `false` if the key was not writable
function Gio.Settings:set_string(key, value) end

--- # method Gio.Settings:set_strv()
---
--- Sets `key` in `settings` to `value`.
--- 
--- A convenience variant of `g_settings_set()` for string arrays.  If
--- `value` is `nil`, then `key` is set to be the empty array.
--- 
--- It is a programmer error to give a `key` that isn't specified as
--- having an array of strings type in the schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the name of the key to set
---@param value? unknown[] # the value to set it to, or `nil`
---@return (boolean|nil) # `true` if setting the key succeeded, `false` if the key was not writable
function Gio.Settings:set_strv(key, value) end

--- # method Gio.Settings:set_uint()
---
--- Sets `key` in `settings` to `value`.
--- 
--- A convenience variant of `g_settings_set()` for 32-bit unsigned
--- integers.
--- 
--- It is a programmer error to give a `key` that isn't specified as
--- having a uint32 type in the schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the name of the key to set
---@param value integer # the value to set it to
---@return (boolean|nil) # `true` if setting the key succeeded, `false` if the key was not writable
function Gio.Settings:set_uint(key, value) end

--- # method Gio.Settings:set_uint64()
---
--- Sets `key` in `settings` to `value`.
--- 
--- A convenience variant of `g_settings_set()` for 64-bit unsigned
--- integers.
--- 
--- It is a programmer error to give a `key` that isn't specified as
--- having a uint64 type in the schema for `settings`.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the name of the key to set
---@param value integer # the value to set it to
---@return (boolean|nil) # `true` if setting the key succeeded, `false` if the key was not writable
function Gio.Settings:set_uint64(key, value) end

--- # method Gio.Settings:set_value()
---
--- Sets `key` in `settings` to `value`.
--- 
--- It is a programmer error to give a `key` that isn't contained in the
--- schema for `settings` or for `value` to have the incorrect type, per
--- the schema.
--- 
--- If `value` is floating then this function consumes the reference.
---
--- ---
---
---@param self Gio.Settings # a `GSettings` object
---@param key string # the name of the key to set
---@param value GLib.Variant # a `GVariant` of the correct type
---@return (boolean|nil) # `true` if setting the key succeeded, `false` if the key was not writable
function Gio.Settings:set_value(key, value) end

--- # function Gio.Settings.list_relocatable_schemas()
---
--- Deprecated.
---
--- ---
---
---@return unknown[] # a list of relocatable `GSettings` schemas that are available, in no defined order. The list must not be modified or freed.
function Gio.Settings.list_relocatable_schemas() end

--- # function Gio.Settings.list_schemas()
---
--- Deprecated.
---
--- ---
---
---@return unknown[] # a list of `GSettings` schemas that are available, in no defined order. The list must not be modified or freed.
function Gio.Settings.list_schemas() end

--- # function Gio.Settings.sync()
---
--- Ensures that all pending operations are complete for the default backend.
--- 
--- Writes made to a `GSettings` are handled asynchronously.  For this
--- reason, it is very unlikely that the changes have it to disk by the
--- time `g_settings_set()` returns.
--- 
--- This call will block until all of the writes have made it to the
--- backend.  Since the mainloop is not running, no change notifications
--- will be dispatched during this call (but some may be queued by the
--- time the call is done).
---
--- ---
---
---@return nil
function Gio.Settings.sync() end

--- # function Gio.Settings.unbind()
---
--- Removes an existing binding for `property` on `object`.
--- 
--- Note that bindings are automatically removed when the
--- object is finalized, so it is rarely necessary to call this
--- function.
---
--- ---
---
---@param object GObject.Object # the object
---@param property string # the property whose binding is removed
---@return nil
function Gio.Settings.unbind(object, property) end

--- # function Gio.Settings.new()
---
--- Creates a new `GSettings` object with the schema specified by
--- `schema_id`.
--- 
--- It is an error for the schema to not exist: schemas are an
--- essential part of a program, as they provide type information.
--- If schemas need to be dynamically loaded (for example, from an
--- optional runtime dependency), `g_settings_schema_source_lookup()`
--- can be used to test for their existence before loading them.
--- 
--- Signals on the newly created `GSettings` object will be dispatched
--- via the thread-default `GMainContext` in effect at the time of the
--- call to `g_settings_new()`.  The new `GSettings` will hold a reference
--- on the context.  See `g_main_context_push_thread_default()`.
---
--- ---
---
---@param schema_id string # the id of the schema
---@return Gio.Settings # a new `GSettings` object
function Gio.Settings.new(schema_id) end

--- # function Gio.Settings.new_full()
---
--- Creates a new `GSettings` object with a given schema, backend and
--- path.
--- 
--- It should be extremely rare that you ever want to use this function.
--- It is made available for advanced use-cases (such as plugin systems
--- that want to provide access to schemas loaded from custom locations,
--- etc).
--- 
--- At the most basic level, a `GSettings` object is a pure composition of
--- 4 things: a `GSettingsSchema`, a `GSettingsBackend`, a path within that
--- backend, and a `GMainContext` to which signals are dispatched.
--- 
--- This constructor therefore gives you full control over constructing
--- `GSettings` instances.  The first 3 parameters are given directly as
--- `schema`, `backend` and `path`, and the main context is taken from the
--- thread-default (as per `g_settings_new()`).
--- 
--- If `backend` is `nil` then the default backend is used.
--- 
--- If `path` is `nil` then the path from the schema is used.  It is an
--- error if `path` is `nil` and the schema has no path of its own or if
--- `path` is non-`nil` and not equal to the path that the schema does
--- have.
---
--- ---
---
---@param schema Gio.SettingsSchema # a `GSettingsSchema`
---@param backend? Gio.SettingsBackend # a `GSettingsBackend`
---@param path? string # the path to use
---@return Gio.Settings # a new `GSettings` object
function Gio.Settings.new_full(schema, backend, path) end

--- # function Gio.Settings.new_with_backend()
---
--- Creates a new `GSettings` object with the schema specified by
--- `schema_id` and a given `GSettingsBackend`.
--- 
--- Creating a `GSettings` object with a different backend allows accessing
--- settings from a database other than the usual one. For example, it may make
--- sense to pass a backend corresponding to the "defaults" settings database on
--- the system to get a settings object that modifies the system default
--- settings instead of the settings for this user.
---
--- ---
---
---@param schema_id string # the id of the schema
---@param backend Gio.SettingsBackend # the `GSettingsBackend` to use
---@return Gio.Settings # a new `GSettings` object
function Gio.Settings.new_with_backend(schema_id, backend) end

--- # function Gio.Settings.new_with_backend_and_path()
---
--- Creates a new `GSettings` object with the schema specified by
--- `schema_id` and a given `GSettingsBackend` and path.
--- 
--- This is a mix of `g_settings_new_with_backend()` and
--- `g_settings_new_with_path()`.
---
--- ---
---
---@param schema_id string # the id of the schema
---@param backend Gio.SettingsBackend # the `GSettingsBackend` to use
---@param path string # the path to use
---@return Gio.Settings # a new `GSettings` object
function Gio.Settings.new_with_backend_and_path(schema_id, backend, path) end

--- # function Gio.Settings.new_with_path()
---
--- Creates a new `GSettings` object with the relocatable schema specified
--- by `schema_id` and a given path.
--- 
--- You only need to do this if you want to directly create a settings
--- object with a schema that doesn't have a specified path of its own.
--- That's quite rare.
--- 
--- It is a programmer error to call this function for a schema that
--- has an explicitly specified path.
--- 
--- It is a programmer error if `path` is not a valid path.  A valid path
--- begins and ends with '/' and does not contain two consecutive '/'
--- characters.
---
--- ---
---
---@param schema_id string # the id of the schema
---@param path string # the path to use
---@return Gio.Settings # a new `GSettings` object
function Gio.Settings.new_with_path(schema_id, path) end

--- # class Gio.SettingsBackend
---
--- The `GSettingsBackend` interface defines a generic interface for
--- non-strictly-typed data that is stored in a hierarchy. To implement
--- an alternative storage backend for `GSettings`, you need to implement
--- the `GSettingsBackend` interface and then make it implement the
--- extension point %G_SETTINGS_BACKEND_EXTENSION_POINT_NAME.
--- 
--- The interface defines methods for reading and writing values, a
--- method for determining if writing of certain values will fail
--- (lockdown) and a change notification mechanism.
--- 
--- The semantics of the interface are very precisely defined and
--- implementations must carefully adhere to the expectations of
--- callers that are documented on each of the interface methods.
--- 
--- Some of the `GSettingsBackend` functions accept or return a `GTree`.
--- These trees always have strings as keys and `GVariant` as values.
--- `g_settings_backend_create_tree()` is a convenience function to create
--- suitable trees.
--- 
--- The `GSettingsBackend` API is exported to allow third-party
--- implementations, but does not carry the same stability guarantees
--- as the public GIO API. For this reason, you have to define the
--- C preprocessor symbol %G_SETTINGS_ENABLE_BACKEND before including
--- `gio/gsettingsbackend.h`.
---
--- ---
---
---@class Gio.SettingsBackend : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.SettingsBackendPrivate
Gio.SettingsBackend = {}

--- # method Gio.SettingsBackend:changed()
---
--- Signals that a single key has possibly changed.  Backend
--- implementations should call this if a key has possibly changed its
--- value.
--- 
--- `key` must be a valid key (ie starting with a slash, not containing
--- '//', and not ending with a slash).
--- 
--- The implementation must call this function during any call to
--- `g_settings_backend_write()`, before the call returns (except in the
--- case that no keys are actually changed and it cares to detect this
--- fact).  It may not rely on the existence of a mainloop for
--- dispatching the signal later.
--- 
--- The implementation may call this function at any other time it likes
--- in response to other events (such as changes occurring outside of the
--- program).  These calls may originate from a mainloop or may originate
--- in response to any other action (including from calls to
--- `g_settings_backend_write()`).
--- 
--- In the case that this call is in response to a call to
--- `g_settings_backend_write()` then `origin_tag` must be set to the same
--- value that was passed to that call.
---
--- ---
---
---@param self Gio.SettingsBackend # a `GSettingsBackend` implementation
---@param key string # the name of the key
---@param origin_tag? userdata # the origin tag
---@return nil
function Gio.SettingsBackend:changed(key, origin_tag) end

--- # method Gio.SettingsBackend:changed_tree()
---
--- This call is a convenience wrapper.  It gets the list of changes from
--- `tree`, computes the longest common prefix and calls
--- `g_settings_backend_changed()`.
---
--- ---
---
---@param self Gio.SettingsBackend # a `GSettingsBackend` implementation
---@param tree GLib.Tree # a `GTree` containing the changes
---@param origin_tag? userdata # the origin tag
---@return nil
function Gio.SettingsBackend:changed_tree(tree, origin_tag) end

--- # method Gio.SettingsBackend:keys_changed()
---
--- Signals that a list of keys have possibly changed.  Backend
--- implementations should call this if keys have possibly changed their
--- values.
--- 
--- `path` must be a valid path (ie starting and ending with a slash and
--- not containing '//').  Each string in `items` must form a valid key
--- name when `path` is prefixed to it (ie: each item must not start or
--- end with '/' and must not contain '//').
--- 
--- The meaning of this signal is that any of the key names resulting
--- from the contatenation of `path` with each item in `items` may have
--- changed.
--- 
--- The same rules for when notifications must occur apply as per
--- `g_settings_backend_changed()`.  These two calls can be used
--- interchangeably if exactly one item has changed (although in that
--- case `g_settings_backend_changed()` is definitely preferred).
--- 
--- For efficiency reasons, the implementation should strive for `path` to
--- be as long as possible (ie: the longest common prefix of all of the
--- keys that were changed) but this is not strictly required.
---
--- ---
---
---@param self Gio.SettingsBackend # a `GSettingsBackend` implementation
---@param path string # the path containing the changes
---@param items unknown[] # the `nil`-terminated list of changed keys
---@param origin_tag? userdata # the origin tag
---@return nil
function Gio.SettingsBackend:keys_changed(path, items, origin_tag) end

--- # method Gio.SettingsBackend:path_changed()
---
--- Signals that all keys below a given path may have possibly changed.
--- Backend implementations should call this if an entire path of keys
--- have possibly changed their values.
--- 
--- `path` must be a valid path (ie starting and ending with a slash and
--- not containing '//').
--- 
--- The meaning of this signal is that any of the key which has a name
--- starting with `path` may have changed.
--- 
--- The same rules for when notifications must occur apply as per
--- `g_settings_backend_changed()`.  This call might be an appropriate
--- reasponse to a 'reset' call but implementations are also free to
--- explicitly list the keys that were affected by that call if they can
--- easily do so.
--- 
--- For efficiency reasons, the implementation should strive for `path` to
--- be as long as possible (ie: the longest common prefix of all of the
--- keys that were changed) but this is not strictly required.  As an
--- example, if this function is called with the path of "/" then every
--- single key in the application will be notified of a possible change.
---
--- ---
---
---@param self Gio.SettingsBackend # a `GSettingsBackend` implementation
---@param path string # the path containing the changes
---@param origin_tag? userdata # the origin tag
---@return nil
function Gio.SettingsBackend:path_changed(path, origin_tag) end

--- # method Gio.SettingsBackend:path_writable_changed()
---
--- Signals that the writability of all keys below a given path may have
--- changed.
--- 
--- Since GSettings performs no locking operations for itself, this call
--- will always be made in response to external events.
---
--- ---
---
---@param self Gio.SettingsBackend # a `GSettingsBackend` implementation
---@param path string # the name of the path
---@return nil
function Gio.SettingsBackend:path_writable_changed(path) end

--- # method Gio.SettingsBackend:writable_changed()
---
--- Signals that the writability of a single key has possibly changed.
--- 
--- Since GSettings performs no locking operations for itself, this call
--- will always be made in response to external events.
---
--- ---
---
---@param self Gio.SettingsBackend # a `GSettingsBackend` implementation
---@param key string # the name of the key
---@return nil
function Gio.SettingsBackend:writable_changed(key) end

--- # function Gio.SettingsBackend.flatten_tree()
---
--- Calculate the longest common prefix of all keys in a tree and write
--- out an array of the key names relative to that prefix and,
--- optionally, the value to store at each of those keys.
--- 
--- You must free the value returned in `path`, `keys` and `values` using
--- `g_free()`.  You should not attempt to free or unref the contents of
--- `keys` or `values`.
---
--- ---
---
---@param tree GLib.Tree # a `GTree` containing the changes
---@param path string # the location to save the path
---@param keys unknown[] # the location to save the relative keys
---@param values? unknown[] # the location to save the values, or `nil`
---@return nil
function Gio.SettingsBackend.flatten_tree(tree, path, keys, values) end

--- # function Gio.SettingsBackend.get_default()
---
--- Returns the default `GSettingsBackend`. It is possible to override
--- the default by setting the `GSETTINGS_BACKEND` environment variable
--- to the name of a settings backend.
--- 
--- The user gets a reference to the backend.
---
--- ---
---
---@return Gio.SettingsBackend # the default `GSettingsBackend`, which will be a dummy (memory) settings backend if no other settings backend is available.
function Gio.SettingsBackend.get_default() end

--- # record Gio.SettingsBackendClass
---
--- Class structure for `GSettingsBackend`.
---
--- ---
---
---@class Gio.SettingsBackendClass
---@field parent_class GObject.ObjectClass
---@field read fun(backend: Gio.SettingsBackend, key: string, expected_type: GLib.VariantType, default_value: (boolean|nil)): GLib.Variant
---@field get_writable fun(backend: Gio.SettingsBackend, key: string): (boolean|nil)
---@field write fun(backend: Gio.SettingsBackend, key: string, value: GLib.Variant, origin_tag: userdata): (boolean|nil)
---@field write_tree fun(backend: Gio.SettingsBackend, tree: GLib.Tree, origin_tag: userdata): (boolean|nil)
---@field reset fun(backend: Gio.SettingsBackend, key: string, origin_tag: userdata): nil
---@field subscribe fun(backend: Gio.SettingsBackend, name: string): nil
---@field unsubscribe fun(backend: Gio.SettingsBackend, name: string): nil
---@field sync fun(backend: Gio.SettingsBackend): nil
---@field read_user_value fun(backend: Gio.SettingsBackend, key: string, expected_type: GLib.VariantType): GLib.Variant
---@field padding unknown[]
Gio.SettingsBackendClass = {}

--- # record Gio.SettingsBackendPrivate
---
---@class Gio.SettingsBackendPrivate
Gio.SettingsBackendPrivate = {}

---@enum Gio.SettingsBindFlags
Gio.SettingsBindFlags = {}

---@alias Gio.SettingsBindGetMapping fun(value: GObject.Value, variant: GLib.Variant, user_data: userdata): (boolean|nil)

---@alias Gio.SettingsBindSetMapping fun(value: GObject.Value, expected_type: GLib.VariantType, user_data: userdata): GLib.Variant

--- # record Gio.SettingsClass
---
---@class Gio.SettingsClass
---@field parent_class GObject.ObjectClass
---@field writable_changed fun(settings: Gio.Settings, key: string): nil
---@field changed fun(settings: Gio.Settings, key: string): nil
---@field writable_change_event fun(settings: Gio.Settings, key: GLib.Quark): (boolean|nil)
---@field change_event fun(settings: Gio.Settings, keys: GLib.Quark, n_keys: integer): (boolean|nil)
---@field padding unknown[]
Gio.SettingsClass = {}

---@alias Gio.SettingsGetMapping fun(value: GLib.Variant, result: userdata, user_data: userdata): (boolean|nil)

--- # record Gio.SettingsPrivate
---
---@class Gio.SettingsPrivate
Gio.SettingsPrivate = {}

--- # record Gio.SettingsSchema
---
--- The `GSettingsSchemaSource` and `GSettingsSchema` APIs provide a
--- mechanism for advanced control over the loading of schemas and a
--- mechanism for introspecting their content.
--- 
--- Plugin loading systems that wish to provide plugins a way to access
--- settings face the problem of how to make the schemas for these
--- settings visible to GSettings.  Typically, a plugin will want to ship
--- the schema along with itself and it won't be installed into the
--- standard system directories for schemas.
--- 
--- `GSettingsSchemaSource` provides a mechanism for dealing with this by
--- allowing the creation of a new 'schema source' from which schemas can
--- be acquired.  This schema source can then become part of the metadata
--- associated with the plugin and queried whenever the plugin requires
--- access to some settings.
--- 
--- Consider the following example:
--- 
--- ```c
--- typedef struct
--- {
---    ...
---    GSettingsSchemaSource *schema_source;
---    ...
--- } Plugin;
--- 
--- Plugin *
--- initialise_plugin (const gchar *dir)
--- {
---   Plugin *plugin;
--- 
---   ...
--- 
---   plugin->schema_source =
---     g_settings_schema_source_new_from_directory (dir,
---       g_settings_schema_source_get_default (), FALSE, NULL);
--- 
---   ...
--- 
---   return plugin;
--- }
--- 
--- ...
--- 
--- GSettings *
--- plugin_get_settings (Plugin      *plugin,
---                      const gchar *schema_id)
--- {
---   GSettingsSchema *schema;
--- 
---   if (schema_id == NULL)
---     schema_id = plugin->identifier;
--- 
---   schema = g_settings_schema_source_lookup (plugin->schema_source,
---                                             schema_id, FALSE);
--- 
---   if (schema == NULL)
---     {
---       ... disable the plugin or abort, etc ...
---     }
--- 
---   return g_settings_new_full (schema, NULL, NULL);
--- }
--- ```
--- 
--- The code above shows how hooks should be added to the code that
--- initialises (or enables) the plugin to create the schema source and
--- how an API can be added to the plugin system to provide a convenient
--- way for the plugin to access its settings, using the schemas that it
--- ships.
--- 
--- From the standpoint of the plugin, it would need to ensure that it
--- ships a gschemas.compiled file as part of itself, and then simply do
--- the following:
--- 
--- ```c
--- {
---   GSettings *settings;
---   gint some_value;
--- 
---   settings = plugin_get_settings (self, NULL);
---   some_value = g_settings_get_int (settings, "some-value");
---   ...
--- }
--- ```
--- 
--- It's also possible that the plugin system expects the schema source
--- files (ie: .gschema.xml files) instead of a gschemas.compiled file.
--- In that case, the plugin loading system must compile the schemas for
--- itself before attempting to create the settings source.
---
--- ---
---
---@class Gio.SettingsSchema
Gio.SettingsSchema = {}

--- # method Gio.SettingsSchema:get_id()
---
--- Get the ID of `schema`.
---
--- ---
---
---@param self Gio.SettingsSchema # a `GSettingsSchema`
---@return string # the ID
function Gio.SettingsSchema:get_id() end

--- # method Gio.SettingsSchema:get_key()
---
--- Gets the key named `name` from `schema`.
--- 
--- It is a programmer error to request a key that does not exist.  See
--- `g_settings_schema_list_keys()`.
---
--- ---
---
---@param self Gio.SettingsSchema # a `GSettingsSchema`
---@param name string # the name of a key
---@return Gio.SettingsSchemaKey # the `GSettingsSchemaKey` for `name`
function Gio.SettingsSchema:get_key(name) end

--- # method Gio.SettingsSchema:get_path()
---
--- Gets the path associated with `schema`, or `nil`.
--- 
--- Schemas may be single-instance or relocatable.  Single-instance
--- schemas correspond to exactly one set of keys in the backend
--- database: those located at the path returned by this function.
--- 
--- Relocatable schemas can be referenced by other schemas and can
--- therefore describe multiple sets of keys at different locations.  For
--- relocatable schemas, this function will return `nil`.
---
--- ---
---
---@param self Gio.SettingsSchema # a `GSettingsSchema`
---@return string # the path of the schema, or `nil`
function Gio.SettingsSchema:get_path() end

--- # method Gio.SettingsSchema:has_key()
---
--- Checks if `schema` has a key named `name`.
---
--- ---
---
---@param self Gio.SettingsSchema # a `GSettingsSchema`
---@param name string # the name of a key
---@return (boolean|nil) # `true` if such a key exists
function Gio.SettingsSchema:has_key(name) end

--- # method Gio.SettingsSchema:list_children()
---
--- Gets the list of children in `schema`.
--- 
--- You should free the return value with `g_strfreev()` when you are done
--- with it.
---
--- ---
---
---@param self Gio.SettingsSchema # a `GSettingsSchema`
---@return unknown[] # a list of the children on `settings`, in no defined order
function Gio.SettingsSchema:list_children() end

--- # method Gio.SettingsSchema:list_keys()
---
--- Introspects the list of keys on `schema`.
--- 
--- You should probably not be calling this function from "normal" code
--- (since you should already know what keys are in your schema).  This
--- function is intended for introspection reasons.
---
--- ---
---
---@param self Gio.SettingsSchema # a `GSettingsSchema`
---@return unknown[] # a list of the keys on `schema`, in no defined order
function Gio.SettingsSchema:list_keys() end

--- # method Gio.SettingsSchema:ref()
---
--- Increase the reference count of `schema`, returning a new reference.
---
--- ---
---
---@param self Gio.SettingsSchema # a `GSettingsSchema`
---@return Gio.SettingsSchema # a new reference to `schema`
function Gio.SettingsSchema:ref() end

--- # method Gio.SettingsSchema:unref()
---
--- Decrease the reference count of `schema`, possibly freeing it.
---
--- ---
---
---@param self Gio.SettingsSchema # a `GSettingsSchema`
---@return nil
function Gio.SettingsSchema:unref() end

--- # record Gio.SettingsSchemaKey
---
--- `GSettingsSchemaKey` is an opaque data structure and can only be accessed
--- using the following functions.
---
--- ---
---
---@class Gio.SettingsSchemaKey
Gio.SettingsSchemaKey = {}

--- # method Gio.SettingsSchemaKey:get_default_value()
---
--- Gets the default value for `key`.
--- 
--- Note that this is the default value according to the schema.  System
--- administrator defaults and lockdown are not visible via this API.
---
--- ---
---
---@param self Gio.SettingsSchemaKey # a `GSettingsSchemaKey`
---@return GLib.Variant # the default value for the key
function Gio.SettingsSchemaKey:get_default_value() end

--- # method Gio.SettingsSchemaKey:get_description()
---
--- Gets the description for `key`.
--- 
--- If no description has been provided in the schema for `key`, returns
--- `nil`.
--- 
--- The description can be one sentence to several paragraphs in length.
--- Paragraphs are delimited with a double newline.  Descriptions can be
--- translated and the value returned from this function is is the
--- current locale.
--- 
--- This function is slow.  The summary and description information for
--- the schemas is not stored in the compiled schema database so this
--- function has to parse all of the source XML files in the schema
--- directory.
---
--- ---
---
---@param self Gio.SettingsSchemaKey # a `GSettingsSchemaKey`
---@return string # the description for `key`, or `nil`
function Gio.SettingsSchemaKey:get_description() end

--- # method Gio.SettingsSchemaKey:get_name()
---
--- Gets the name of `key`.
---
--- ---
---
---@param self Gio.SettingsSchemaKey # a `GSettingsSchemaKey`
---@return string # the name of `key`.
function Gio.SettingsSchemaKey:get_name() end

--- # method Gio.SettingsSchemaKey:get_range()
---
--- Queries the range of a key.
--- 
--- This function will return a `GVariant` that fully describes the range
--- of values that are valid for `key`.
--- 
--- The type of `GVariant` returned is `(sv)`. The string describes
--- the type of range restriction in effect. The type and meaning of
--- the value contained in the variant depends on the string.
--- 
--- If the string is `'type'` then the variant contains an empty array.
--- The element type of that empty array is the expected type of value
--- and all values of that type are valid.
--- 
--- If the string is `'enum'` then the variant contains an array
--- enumerating the possible values. Each item in the array is
--- a possible valid value and no other values are valid.
--- 
--- If the string is `'flags'` then the variant contains an array. Each
--- item in the array is a value that may appear zero or one times in an
--- array to be used as the value for this key. For example, if the
--- variant contained the array `['x', 'y']` then the valid values for
--- the key would be `[]`, `['x']`, `['y']`, `['x', 'y']` and
--- `['y', 'x']`.
--- 
--- Finally, if the string is `'range'` then the variant contains a pair
--- of like-typed values -- the minimum and maximum permissible values
--- for this key.
--- 
--- This information should not be used by normal programs.  It is
--- considered to be a hint for introspection purposes.  Normal programs
--- should already know what is permitted by their own schema.  The
--- format may change in any way in the future -- but particularly, new
--- forms may be added to the possibilities described above.
--- 
--- You should free the returned value with `g_variant_unref()` when it is
--- no longer needed.
---
--- ---
---
---@param self Gio.SettingsSchemaKey # a `GSettingsSchemaKey`
---@return GLib.Variant # a `GVariant` describing the range
function Gio.SettingsSchemaKey:get_range() end

--- # method Gio.SettingsSchemaKey:get_summary()
---
--- Gets the summary for `key`.
--- 
--- If no summary has been provided in the schema for `key`, returns
--- `nil`.
--- 
--- The summary is a short description of the purpose of the key; usually
--- one short sentence.  Summaries can be translated and the value
--- returned from this function is is the current locale.
--- 
--- This function is slow.  The summary and description information for
--- the schemas is not stored in the compiled schema database so this
--- function has to parse all of the source XML files in the schema
--- directory.
---
--- ---
---
---@param self Gio.SettingsSchemaKey # a `GSettingsSchemaKey`
---@return string # the summary for `key`, or `nil`
function Gio.SettingsSchemaKey:get_summary() end

--- # method Gio.SettingsSchemaKey:get_value_type()
---
--- Gets the `GVariantType` of `key`.
---
--- ---
---
---@param self Gio.SettingsSchemaKey # a `GSettingsSchemaKey`
---@return GLib.VariantType # the type of `key`
function Gio.SettingsSchemaKey:get_value_type() end

--- # method Gio.SettingsSchemaKey:range_check()
---
--- Checks if the given `value` is within the
--- permitted range for `key`.
--- 
--- It is a programmer error if `value` is not of the correct type — you
--- must check for this first.
---
--- ---
---
---@param self Gio.SettingsSchemaKey # a `GSettingsSchemaKey`
---@param value GLib.Variant # the value to check
---@return (boolean|nil) # `true` if `value` is valid for `key`
function Gio.SettingsSchemaKey:range_check(value) end

--- # method Gio.SettingsSchemaKey:ref()
---
--- Increase the reference count of `key`, returning a new reference.
---
--- ---
---
---@param self Gio.SettingsSchemaKey # a `GSettingsSchemaKey`
---@return Gio.SettingsSchemaKey # a new reference to `key`
function Gio.SettingsSchemaKey:ref() end

--- # method Gio.SettingsSchemaKey:unref()
---
--- Decrease the reference count of `key`, possibly freeing it.
---
--- ---
---
---@param self Gio.SettingsSchemaKey # a `GSettingsSchemaKey`
---@return nil
function Gio.SettingsSchemaKey:unref() end

--- # record Gio.SettingsSchemaSource
---
--- This is an opaque structure type.  You may not access it directly.
---
--- ---
---
---@class Gio.SettingsSchemaSource
Gio.SettingsSchemaSource = {}

--- # method Gio.SettingsSchemaSource:list_schemas()
---
--- Lists the schemas in a given source.
--- 
--- If `recursive` is `true` then include parent sources.  If `false` then
--- only include the schemas from one source (ie: one directory).  You
--- probably want `true`.
--- 
--- Non-relocatable schemas are those for which you can call
--- `g_settings_new()`.  Relocatable schemas are those for which you must
--- use `g_settings_new_with_path()`.
--- 
--- Do not call this function from normal programs.  This is designed for
--- use by database editors, commandline tools, etc.
---
--- ---
---
---@param self Gio.SettingsSchemaSource # a `GSettingsSchemaSource`
---@param recursive (boolean|nil) # if we should recurse
---@param non_relocatable unknown[] # the list of non-relocatable schemas, in no defined order
---@param relocatable unknown[] # the list of relocatable schemas, in no defined order
---@return nil
function Gio.SettingsSchemaSource:list_schemas(recursive, non_relocatable, relocatable) end

--- # method Gio.SettingsSchemaSource:lookup()
---
--- Looks up a schema with the identifier `schema_id` in `source`.
--- 
--- This function is not required for normal uses of `GSettings` but it
--- may be useful to authors of plugin management systems or to those who
--- want to introspect the content of schemas.
--- 
--- If the schema isn't found directly in `source` and `recursive` is `true`
--- then the parent sources will also be checked.
--- 
--- If the schema isn't found, `nil` is returned.
---
--- ---
---
---@param self Gio.SettingsSchemaSource # a `GSettingsSchemaSource`
---@param schema_id string # a schema ID
---@param recursive (boolean|nil) # `true` if the lookup should be recursive
---@return Gio.SettingsSchema # a new `GSettingsSchema`
function Gio.SettingsSchemaSource:lookup(schema_id, recursive) end

--- # method Gio.SettingsSchemaSource:ref()
---
--- Increase the reference count of `source`, returning a new reference.
---
--- ---
---
---@param self Gio.SettingsSchemaSource # a `GSettingsSchemaSource`
---@return Gio.SettingsSchemaSource # a new reference to `source`
function Gio.SettingsSchemaSource:ref() end

--- # method Gio.SettingsSchemaSource:unref()
---
--- Decrease the reference count of `source`, possibly freeing it.
---
--- ---
---
---@param self Gio.SettingsSchemaSource # a `GSettingsSchemaSource`
---@return nil
function Gio.SettingsSchemaSource:unref() end

--- # function Gio.SettingsSchemaSource.get_default()
---
--- Gets the default system schema source.
--- 
--- This function is not required for normal uses of `GSettings` but it
--- may be useful to authors of plugin management systems or to those who
--- want to introspect the content of schemas.
--- 
--- If no schemas are installed, `nil` will be returned.
--- 
--- The returned source may actually consist of multiple schema sources
--- from different directories, depending on which directories were given
--- in `XDG_DATA_DIRS` and `GSETTINGS_SCHEMA_DIR`. For this reason, all
--- lookups performed against the default source should probably be done
--- recursively.
---
--- ---
---
---@return Gio.SettingsSchemaSource # the default schema source
function Gio.SettingsSchemaSource.get_default() end

--- # function Gio.SettingsSchemaSource.new_from_directory()
---
--- Attempts to create a new schema source corresponding to the contents
--- of the given directory.
--- 
--- This function is not required for normal uses of `GSettings` but it
--- may be useful to authors of plugin management systems.
--- 
--- The directory should contain a file called `gschemas.compiled` as
--- produced by the [glib-compile-schemas][glib-compile-schemas] tool.
--- 
--- If `trusted` is `true` then `gschemas.compiled` is trusted not to be
--- corrupted. This assumption has a performance advantage, but can result
--- in crashes or inconsistent behaviour in the case of a corrupted file.
--- Generally, you should set `trusted` to `true` for files installed by the
--- system and to `false` for files in the home directory.
--- 
--- In either case, an empty file or some types of corruption in the file will
--- result in %G_FILE_ERROR_INVAL being returned.
--- 
--- If `parent` is non-`nil` then there are two effects.
--- 
--- First, if `g_settings_schema_source_lookup()` is called with the
--- `recursive` flag set to `true` and the schema can not be found in the
--- source, the lookup will recurse to the parent.
--- 
--- Second, any references to other schemas specified within this
--- source (ie: `child` or `extends`) references may be resolved
--- from the `parent`.
--- 
--- For this second reason, except in very unusual situations, the
--- `parent` should probably be given as the default schema source, as
--- returned by `g_settings_schema_source_get_default()`.
---
--- ---
---
---@param directory string # the filename of a directory
---@param parent? Gio.SettingsSchemaSource # a `GSettingsSchemaSource`, or `nil`
---@param trusted (boolean|nil) # `true`, if the directory is trusted
---@return Gio.SettingsSchemaSource
function Gio.SettingsSchemaSource.new_from_directory(directory, parent, trusted) end

--- # class Gio.SimpleAction
---
--- A `GSimpleAction` is the obvious simple implementation of the `GAction`
--- interface. This is the easiest way to create an action for purposes of
--- adding it to a `GSimpleActionGroup`.
--- 
--- See also `GtkAction`.
---
--- ---
---
---@class Gio.SimpleAction : GObject.Object, Gio.Action
---@operator call: Gio.SimpleAction
Gio.SimpleAction = {}

--- # method Gio.SimpleAction:set_enabled()
---
--- Sets the action as enabled or not.
--- 
--- An action must be enabled in order to be activated or in order to
--- have its state changed from outside callers.
--- 
--- This should only be called by the implementor of the action.  Users
--- of the action should not attempt to modify its enabled flag.
---
--- ---
---
---@param self Gio.SimpleAction # a `GSimpleAction`
---@param enabled (boolean|nil) # whether the action is enabled
---@return nil
function Gio.SimpleAction:set_enabled(enabled) end

--- # method Gio.SimpleAction:set_state()
---
--- Sets the state of the action.
--- 
--- This directly updates the 'state' property to the given value.
--- 
--- This should only be called by the implementor of the action.  Users
--- of the action should not attempt to directly modify the 'state'
--- property.  Instead, they should call `g_action_change_state()` to
--- request the change.
--- 
--- If the `value` GVariant is floating, it is consumed.
---
--- ---
---
---@param self Gio.SimpleAction # a `GSimpleAction`
---@param value GLib.Variant # the new `GVariant` for the state
---@return nil
function Gio.SimpleAction:set_state(value) end

--- # method Gio.SimpleAction:set_state_hint()
---
--- Sets the state hint for the action.
--- 
--- See `g_action_get_state_hint()` for more information about
--- action state hints.
---
--- ---
---
---@param self Gio.SimpleAction # a `GSimpleAction`
---@param state_hint? GLib.Variant # a `GVariant` representing the state hint
---@return nil
function Gio.SimpleAction:set_state_hint(state_hint) end

--- # function Gio.SimpleAction.new()
---
--- Creates a new action.
--- 
--- The created action is stateless. See `g_simple_action_new_stateful()` to create
--- an action that has state.
---
--- ---
---
---@param name string # the name of the action
---@param parameter_type? GLib.VariantType # the type of parameter that will be passed to handlers for the `GSimpleAction`::activate signal, or `nil` for no parameter
---@return Gio.SimpleAction # a new `GSimpleAction`
function Gio.SimpleAction.new(name, parameter_type) end

--- # function Gio.SimpleAction.new_stateful()
---
--- Creates a new stateful action.
--- 
--- All future state values must have the same `GVariantType` as the initial
--- `state`.
--- 
--- If the `state` `GVariant` is floating, it is consumed.
---
--- ---
---
---@param name string # the name of the action
---@param parameter_type? GLib.VariantType # the type of the parameter that will be passed to handlers for the `GSimpleAction`::activate signal, or `nil` for no parameter
---@param state GLib.Variant # the initial state of the action
---@return Gio.SimpleAction # a new `GSimpleAction`
function Gio.SimpleAction.new_stateful(name, parameter_type, state) end

--- # class Gio.SimpleActionGroup
---
--- `GSimpleActionGroup` is a hash table filled with `GAction` objects,
--- implementing the `GActionGroup` and `GActionMap` interfaces.
---
--- ---
---
---@class Gio.SimpleActionGroup : GObject.Object, Gio.ActionGroup, Gio.ActionMap
---@field parent_instance GObject.Object
---@field priv Gio.SimpleActionGroupPrivate
---@operator call: Gio.SimpleActionGroup
Gio.SimpleActionGroup = {}

--- # method Gio.SimpleActionGroup:add_entries()
---
--- A convenience function for creating multiple `GSimpleAction` instances
--- and adding them to the action group.
---
--- ---
---
---@param self Gio.SimpleActionGroup # a `GSimpleActionGroup`
---@param entries unknown[] # a pointer to the first item in an array of `GActionEntry` structs
---@param n_entries integer # the length of `entries`, or -1
---@param user_data? userdata # the user data for signal connections
---@return nil
function Gio.SimpleActionGroup:add_entries(entries, n_entries, user_data) end

--- # method Gio.SimpleActionGroup:insert()
---
--- Adds an action to the action group.
--- 
--- If the action group already contains an action with the same name as
--- `action` then the old action is dropped from the group.
--- 
--- The action group takes its own reference on `action`.
---
--- ---
---
---@param self Gio.SimpleActionGroup # a `GSimpleActionGroup`
---@param action Gio.Action # a `GAction`
---@return nil
function Gio.SimpleActionGroup:insert(action) end

--- # method Gio.SimpleActionGroup:lookup()
---
--- Looks up the action with the name `action_name` in the group.
--- 
--- If no such action exists, returns `nil`.
---
--- ---
---
---@param self Gio.SimpleActionGroup # a `GSimpleActionGroup`
---@param action_name string # the name of an action
---@return Gio.Action # a `GAction`, or `nil`
function Gio.SimpleActionGroup:lookup(action_name) end

--- # method Gio.SimpleActionGroup:remove()
---
--- Removes the named action from the action group.
--- 
--- If no action of this name is in the group then nothing happens.
---
--- ---
---
---@param self Gio.SimpleActionGroup # a `GSimpleActionGroup`
---@param action_name string # the name of the action
---@return nil
function Gio.SimpleActionGroup:remove(action_name) end

--- # function Gio.SimpleActionGroup.new()
---
--- Creates a new, empty, `GSimpleActionGroup`.
---
--- ---
---
---@return Gio.SimpleActionGroup # a new `GSimpleActionGroup`
function Gio.SimpleActionGroup.new() end

--- # record Gio.SimpleActionGroupClass
---
---@class Gio.SimpleActionGroupClass
---@field parent_class GObject.ObjectClass
---@field padding unknown[]
Gio.SimpleActionGroupClass = {}

--- # record Gio.SimpleActionGroupPrivate
---
---@class Gio.SimpleActionGroupPrivate
Gio.SimpleActionGroupPrivate = {}

--- # class Gio.SimpleAsyncResult
---
--- As of GLib 2.46, `GSimpleAsyncResult` is deprecated in favor of
--- `GTask`, which provides a simpler API.
--- 
--- `GSimpleAsyncResult` implements `GAsyncResult`.
--- 
--- GSimpleAsyncResult handles `GAsyncReadyCallbacks`, error
--- reporting, operation cancellation and the final state of an operation,
--- completely transparent to the application. Results can be returned
--- as a pointer e.g. for functions that return data that is collected
--- asynchronously, a boolean value for checking the success or failure
--- of an operation, or a `gssize` for operations which return the number
--- of bytes modified by the operation; all of the simple return cases
--- are covered.
--- 
--- Most of the time, an application will not need to know of the details
--- of this API; it is handled transparently, and any necessary operations
--- are handled by `GAsyncResult`'s interface. However, if implementing a
--- new GIO module, for writing language bindings, or for complex
--- applications that need better control of how asynchronous operations
--- are completed, it is important to understand this functionality.
--- 
--- GSimpleAsyncResults are tagged with the calling function to ensure
--- that asynchronous functions and their finishing functions are used
--- together correctly.
--- 
--- To create a new `GSimpleAsyncResult`, call `g_simple_async_result_new()`.
--- If the result needs to be created for a `GError`, use
--- `g_simple_async_result_new_from_error()` or
--- `g_simple_async_result_new_take_error()`. If a `GError` is not available
--- (e.g. the asynchronous operation's doesn't take a `GError` argument),
--- but the result still needs to be created for an error condition, use
--- `g_simple_async_result_new_error()` (or `g_simple_async_result_set_error_va()`
--- if your application or binding requires passing a variable argument list
--- directly), and the error can then be propagated through the use of
--- `g_simple_async_result_propagate_error()`.
--- 
--- An asynchronous operation can be made to ignore a cancellation event by
--- calling `g_simple_async_result_set_handle_cancellation()` with a
--- `GSimpleAsyncResult` for the operation and `false`. This is useful for
--- operations that are dangerous to cancel, such as close (which would
--- cause a leak if cancelled before being run).
--- 
--- GSimpleAsyncResult can integrate into GLib's event loop, `GMainLoop`,
--- or it can use `GThreads`.
--- `g_simple_async_result_complete()` will finish an I/O task directly
--- from the point where it is called. `g_simple_async_result_complete_in_idle()`
--- will finish it from an idle handler in the
--- [thread-default main context][g-main-context-push-thread-default]
--- where the `GSimpleAsyncResult` was created.
--- `g_simple_async_result_run_in_thread()` will run the job in a
--- separate thread and then use
--- `g_simple_async_result_complete_in_idle()` to deliver the result.
--- 
--- To set the results of an asynchronous function,
--- `g_simple_async_result_set_op_res_gpointer()`,
--- `g_simple_async_result_set_op_res_gboolean()`, and
--- `g_simple_async_result_set_op_res_gssize()`
--- are provided, setting the operation's result to a gpointer, gboolean, or
--- gssize, respectively.
--- 
--- Likewise, to get the result of an asynchronous function,
--- `g_simple_async_result_get_op_res_gpointer()`,
--- `g_simple_async_result_get_op_res_gboolean()`, and
--- `g_simple_async_result_get_op_res_gssize()` are
--- provided, getting the operation's result as a gpointer, gboolean, and
--- gssize, respectively.
--- 
--- For the details of the requirements implementations must respect, see
--- `GAsyncResult`.  A typical implementation of an asynchronous operation
--- using GSimpleAsyncResult looks something like this:
--- 
--- ```c
--- static void
--- baked_cb (Cake    *cake,
---           gpointer user_data)
--- {
---   // In this example, this callback is not given a reference to the cake,
---   // so the GSimpleAsyncResult has to take a reference to it.
---   GSimpleAsyncResult *result = user_data;
--- 
---   if (cake == NULL)
---     g_simple_async_result_set_error (result,
---                                      BAKER_ERRORS,
---                                      BAKER_ERROR_NO_FLOUR,
---                                      "Go to the supermarket");
---   else
---     g_simple_async_result_set_op_res_gpointer (result,
---                                                g_object_ref (cake),
---                                                g_object_unref);
--- 
--- 
---   // In this example, we assume that baked_cb is called as a callback from
---   // the mainloop, so it's safe to complete the operation synchronously here.
---   // If, however, _baker_prepare_cake () might call its callback without
---   // first returning to the mainloop — inadvisable, but some APIs do so —
---   // we would need to use `g_simple_async_result_complete_in_idle()`.
---   g_simple_async_result_complete (result);
---   g_object_unref (result);
--- }
--- 
--- void
--- baker_bake_cake_async (Baker              *self,
---                        guint               radius,
---                        GAsyncReadyCallback callback,
---                        gpointer            user_data)
--- {
---   GSimpleAsyncResult *simple;
---   Cake               *cake;
--- 
---   if (radius < 3)
---     {
---       g_simple_async_report_error_in_idle (G_OBJECT (self),
---                                            callback,
---                                            user_data,
---                                            BAKER_ERRORS,
---                                            BAKER_ERROR_TOO_SMALL,
---                                            "%ucm radius cakes are silly",
---                                            radius);
---       return;
---     }
--- 
---   simple = g_simple_async_result_new (G_OBJECT (self),
---                                       callback,
---                                       user_data,
---                                       baker_bake_cake_async);
---   cake = _baker_get_cached_cake (self, radius);
--- 
---   if (cake != NULL)
---     {
---       g_simple_async_result_set_op_res_gpointer (simple,
---                                                  g_object_ref (cake),
---                                                  g_object_unref);
---       g_simple_async_result_complete_in_idle (simple);
---       g_object_unref (simple);
---       // Drop the reference returned by `_baker_get_cached_cake()`;
---       // the GSimpleAsyncResult has taken its own reference.
---       g_object_unref (cake);
---       return;
---     }
--- 
---   _baker_prepare_cake (self, radius, baked_cb, simple);
--- }
--- 
--- Cake *
--- baker_bake_cake_finish (Baker        *self,
---                         GAsyncResult *result,
---                         GError      **error)
--- {
---   GSimpleAsyncResult *simple;
---   Cake               *cake;
--- 
---   g_return_val_if_fail (g_simple_async_result_is_valid (result,
---                                                         G_OBJECT (self),
---                                                         baker_bake_cake_async),
---                         NULL);
--- 
---   simple = (GSimpleAsyncResult *) result;
--- 
---   if (g_simple_async_result_propagate_error (simple, error))
---     return NULL;
--- 
---   cake = CAKE (g_simple_async_result_get_op_res_gpointer (simple));
---   return g_object_ref (cake);
--- }
--- ```
---
--- ---
---
---@class Gio.SimpleAsyncResult : GObject.Object, Gio.AsyncResult
---@operator call: Gio.SimpleAsyncResult
Gio.SimpleAsyncResult = {}

--- # method Gio.SimpleAsyncResult:complete()
---
--- Completes an asynchronous I/O job immediately. Must be called in
--- the thread where the asynchronous result was to be delivered, as it
--- invokes the callback directly. If you are in a different thread use
--- `g_simple_async_result_complete_in_idle()`.
--- 
--- Calling this function takes a reference to `simple` for as long as
--- is needed to complete the call.
---
--- ---
---
---@param self Gio.SimpleAsyncResult # a `GSimpleAsyncResult`.
---@return nil
function Gio.SimpleAsyncResult:complete() end

--- # method Gio.SimpleAsyncResult:complete_in_idle()
---
--- Completes an asynchronous function in an idle handler in the
--- [thread-default main context][g-main-context-push-thread-default]
--- of the thread that `simple` was initially created in
--- (and re-pushes that context around the invocation of the callback).
--- 
--- Calling this function takes a reference to `simple` for as long as
--- is needed to complete the call.
---
--- ---
---
---@param self Gio.SimpleAsyncResult # a `GSimpleAsyncResult`.
---@return nil
function Gio.SimpleAsyncResult:complete_in_idle() end

--- # method Gio.SimpleAsyncResult:get_op_res_gboolean()
---
--- Gets the operation result boolean from within the asynchronous result.
---
--- ---
---
---@param self Gio.SimpleAsyncResult # a `GSimpleAsyncResult`.
---@return (boolean|nil) # `true` if the operation's result was `true`, `false` if the operation's result was `false`.
function Gio.SimpleAsyncResult:get_op_res_gboolean() end

--- # method Gio.SimpleAsyncResult:get_op_res_gssize()
---
--- Gets a gssize from the asynchronous result.
---
--- ---
---
---@param self Gio.SimpleAsyncResult # a `GSimpleAsyncResult`.
---@return integer # a gssize returned from the asynchronous function.
function Gio.SimpleAsyncResult:get_op_res_gssize() end

--- # method Gio.SimpleAsyncResult:propagate_error()
---
--- Propagates an error from within the simple asynchronous result to
--- a given destination.
--- 
--- If the `GCancellable` given to a prior call to
--- `g_simple_async_result_set_check_cancellable()` is cancelled then this
--- function will return `true` with `dest` set appropriately.
---
--- ---
---
---@param self Gio.SimpleAsyncResult # a `GSimpleAsyncResult`.
---@return (boolean|nil) # `true` if the error was propagated to `dest`. `false` otherwise.
function Gio.SimpleAsyncResult:propagate_error() end

--- # method Gio.SimpleAsyncResult:set_check_cancellable()
---
--- Sets a `GCancellable` to check before dispatching results.
--- 
--- This function has one very specific purpose: the provided cancellable
--- is checked at the time of `g_simple_async_result_propagate_error()` If
--- it is cancelled, these functions will return an "Operation was
--- cancelled" error (%G_IO_ERROR_CANCELLED).
--- 
--- Implementors of cancellable asynchronous functions should use this in
--- order to provide a guarantee to their callers that cancelling an
--- async operation will reliably result in an error being returned for
--- that operation (even if a positive result for the operation has
--- already been sent as an idle to the main context to be dispatched).
--- 
--- The checking described above is done regardless of any call to the
--- unrelated `g_simple_async_result_set_handle_cancellation()` function.
---
--- ---
---
---@param self Gio.SimpleAsyncResult # a `GSimpleAsyncResult`
---@param check_cancellable? Gio.Cancellable # a `GCancellable` to check, or `nil` to unset
---@return nil
function Gio.SimpleAsyncResult:set_check_cancellable(check_cancellable) end

--- # method Gio.SimpleAsyncResult:set_from_error()
---
--- Sets the result from a `GError`.
---
--- ---
---
---@param self Gio.SimpleAsyncResult # a `GSimpleAsyncResult`.
---@param error GLib.Error # `GError`.
---@return nil
function Gio.SimpleAsyncResult:set_from_error(error) end

--- # method Gio.SimpleAsyncResult:set_handle_cancellation()
---
--- Sets whether to handle cancellation within the asynchronous operation.
--- 
--- This function has nothing to do with
--- `g_simple_async_result_set_check_cancellable()`.  It only refers to the
--- `GCancellable` passed to `g_simple_async_result_run_in_thread()`.
---
--- ---
---
---@param self Gio.SimpleAsyncResult # a `GSimpleAsyncResult`.
---@param handle_cancellation (boolean|nil) # a `gboolean`.
---@return nil
function Gio.SimpleAsyncResult:set_handle_cancellation(handle_cancellation) end

--- # method Gio.SimpleAsyncResult:set_op_res_gboolean()
---
--- Sets the operation result to a boolean within the asynchronous result.
---
--- ---
---
---@param self Gio.SimpleAsyncResult # a `GSimpleAsyncResult`.
---@param op_res (boolean|nil) # a `gboolean`.
---@return nil
function Gio.SimpleAsyncResult:set_op_res_gboolean(op_res) end

--- # method Gio.SimpleAsyncResult:set_op_res_gssize()
---
--- Sets the operation result within the asynchronous result to
--- the given `op_res`.
---
--- ---
---
---@param self Gio.SimpleAsyncResult # a `GSimpleAsyncResult`.
---@param op_res integer # a `gssize`.
---@return nil
function Gio.SimpleAsyncResult:set_op_res_gssize(op_res) end

--- # function Gio.SimpleAsyncResult.is_valid()
---
--- Ensures that the data passed to the _finish function of an async
--- operation is consistent.  Three checks are performed.
--- 
--- First, `result` is checked to ensure that it is really a
--- `GSimpleAsyncResult`.  Second, `source` is checked to ensure that it
--- matches the source object of `result`.  Third, `source_tag` is
--- checked to ensure that it is equal to the `source_tag` argument given
--- to `g_simple_async_result_new()` (which, by convention, is a pointer
--- to the _async function corresponding to the _finish function from
--- which this function is called).  (Alternatively, if either
--- `source_tag` or `result`'s source tag is `nil`, then the source tag
--- check is skipped.)
---
--- ---
---
---@param result Gio.AsyncResult # the `GAsyncResult` passed to the _finish function.
---@param source? GObject.Object # the `GObject` passed to the _finish function.
---@param source_tag? userdata # the asynchronous function.
---@return (boolean|nil) # `TRUE` if all checks passed or `FALSE` if any failed.
function Gio.SimpleAsyncResult.is_valid(result, source, source_tag) end

--- # function Gio.SimpleAsyncResult.new()
---
--- Creates a `GSimpleAsyncResult`.
--- 
--- The common convention is to create the `GSimpleAsyncResult` in the
--- function that starts the asynchronous operation and use that same
--- function as the `source_tag`.
--- 
--- If your operation supports cancellation with `GCancellable` (which it
--- probably should) then you should provide the user's cancellable to
--- `g_simple_async_result_set_check_cancellable()` immediately after
--- this function returns.
---
--- ---
---
---@param source_object? GObject.Object # a `GObject`, or `nil`.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`.
---@param user_data? userdata # user data passed to `callback`.
---@param source_tag? userdata # the asynchronous function.
---@return Gio.SimpleAsyncResult # a `GSimpleAsyncResult`.
function Gio.SimpleAsyncResult.new(source_object, callback, user_data, source_tag) end

--- # function Gio.SimpleAsyncResult.new_from_error()
---
--- Creates a `GSimpleAsyncResult` from an error condition.
---
--- ---
---
---@param source_object? GObject.Object # a `GObject`, or `nil`.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`.
---@param user_data? userdata # user data passed to `callback`.
---@param error GLib.Error # a `GError`
---@return Gio.SimpleAsyncResult # a `GSimpleAsyncResult`.
function Gio.SimpleAsyncResult.new_from_error(source_object, callback, user_data, error) end

--- # record Gio.SimpleAsyncResultClass
---
---@class Gio.SimpleAsyncResultClass
Gio.SimpleAsyncResultClass = {}

---@alias Gio.SimpleAsyncThreadFunc fun(res: Gio.SimpleAsyncResult, object: GObject.Object, cancellable: Gio.Cancellable): nil

--- # class Gio.SimpleIOStream
---
--- GSimpleIOStream creates a `GIOStream` from an arbitrary `GInputStream` and
--- `GOutputStream`. This allows any pair of input and output streams to be used
--- with `GIOStream` methods.
--- 
--- This is useful when you obtained a `GInputStream` and a `GOutputStream`
--- by other means, for instance creating them with platform specific methods as
--- `g_unix_input_stream_new()` or g_win32`_input_stream_new()`, and you want
--- to take advantage of the methods provided by `GIOStream`.
---
--- ---
---
---@class Gio.SimpleIOStream : Gio.IOStream
---@operator call: Gio.SimpleIOStream
Gio.SimpleIOStream = {}

--- # function Gio.SimpleIOStream.new()
---
--- Creates a new `GSimpleIOStream` wrapping `input_stream` and `output_stream`.
--- See also `GIOStream`.
---
--- ---
---
---@param input_stream Gio.InputStream # a `GInputStream`.
---@param output_stream Gio.OutputStream # a `GOutputStream`.
---@return Gio.IOStream # a new `GSimpleIOStream` instance.
function Gio.SimpleIOStream.new(input_stream, output_stream) end

--- # class Gio.SimplePermission
---
--- `GSimplePermission` is a trivial implementation of `GPermission` that
--- represents a permission that is either always or never allowed.  The
--- value is given at construction and doesn't change.
--- 
--- Calling request or release will result in errors.
---
--- ---
---
---@class Gio.SimplePermission : Gio.Permission
---@operator call: Gio.SimplePermission
Gio.SimplePermission = {}

--- # function Gio.SimplePermission.new()
---
--- Creates a new `GPermission` instance that represents an action that is
--- either always or never allowed.
---
--- ---
---
---@param allowed (boolean|nil) # `true` if the action is allowed
---@return Gio.Permission # the `GSimplePermission`, as a `GPermission`
function Gio.SimplePermission.new(allowed) end

--- # class Gio.SimpleProxyResolver
---
--- `GSimpleProxyResolver` is a simple `GProxyResolver` implementation
--- that handles a single default proxy, multiple URI-scheme-specific
--- proxies, and a list of hosts that proxies should not be used for.
--- 
--- `GSimpleProxyResolver` is never the default proxy resolver, but it
--- can be used as the base class for another proxy resolver
--- implementation, or it can be created and used manually, such as
--- with `g_socket_client_set_proxy_resolver()`.
---
--- ---
---
---@class Gio.SimpleProxyResolver : GObject.Object, Gio.ProxyResolver
---@field parent_instance GObject.Object
---@field priv Gio.SimpleProxyResolverPrivate
---@operator call: Gio.SimpleProxyResolver
Gio.SimpleProxyResolver = {}

--- # method Gio.SimpleProxyResolver:set_default_proxy()
---
--- Sets the default proxy on `resolver`, to be used for any URIs that
--- don't match `GSimpleProxyResolver`:ignore-hosts or a proxy set
--- via `g_simple_proxy_resolver_set_uri_proxy()`.
--- 
--- If `default_proxy` starts with "socks://",
--- `GSimpleProxyResolver` will treat it as referring to all three of
--- the socks5, socks4a, and socks4 proxy types.
---
--- ---
---
---@param self Gio.SimpleProxyResolver # a `GSimpleProxyResolver`
---@param default_proxy? string # the default proxy to use
---@return nil
function Gio.SimpleProxyResolver:set_default_proxy(default_proxy) end

--- # method Gio.SimpleProxyResolver:set_ignore_hosts()
---
--- Sets the list of ignored hosts.
--- 
--- See `GSimpleProxyResolver`:ignore-hosts for more details on how the
--- `ignore_hosts` argument is interpreted.
---
--- ---
---
---@param self Gio.SimpleProxyResolver # a `GSimpleProxyResolver`
---@param ignore_hosts unknown[] # `nil`-terminated list of hosts/IP addresses to not use a proxy for
---@return nil
function Gio.SimpleProxyResolver:set_ignore_hosts(ignore_hosts) end

--- # method Gio.SimpleProxyResolver:set_uri_proxy()
---
--- Adds a URI-scheme-specific proxy to `resolver`; URIs whose scheme
--- matches `uri_scheme` (and which don't match
--- `GSimpleProxyResolver`:ignore-hosts) will be proxied via `proxy`.
--- 
--- As with `GSimpleProxyResolver`:default-proxy, if `proxy` starts with
--- "socks://", `GSimpleProxyResolver` will treat it
--- as referring to all three of the socks5, socks4a, and socks4 proxy
--- types.
---
--- ---
---
---@param self Gio.SimpleProxyResolver # a `GSimpleProxyResolver`
---@param uri_scheme string # the URI scheme to add a proxy for
---@param proxy string # the proxy to use for `uri_scheme`
---@return nil
function Gio.SimpleProxyResolver:set_uri_proxy(uri_scheme, proxy) end

--- # function Gio.SimpleProxyResolver.new()
---
--- Creates a new `GSimpleProxyResolver`. See
--- `GSimpleProxyResolver`:default-proxy and
--- `GSimpleProxyResolver`:ignore-hosts for more details on how the
--- arguments are interpreted.
---
--- ---
---
---@param default_proxy? string # the default proxy to use, eg "socks://192.168.1.1"
---@param ignore_hosts? unknown[] # an optional list of hosts/IP addresses to not use a proxy for.
---@return Gio.ProxyResolver # a new `GSimpleProxyResolver`
function Gio.SimpleProxyResolver.new(default_proxy, ignore_hosts) end

--- # record Gio.SimpleProxyResolverClass
---
---@class Gio.SimpleProxyResolverClass
---@field parent_class GObject.ObjectClass
Gio.SimpleProxyResolverClass = {}

--- # record Gio.SimpleProxyResolverPrivate
---
---@class Gio.SimpleProxyResolverPrivate
Gio.SimpleProxyResolverPrivate = {}

--- # class Gio.Socket
---
--- A `GSocket` is a low-level networking primitive. It is a more or less
--- direct mapping of the BSD socket API in a portable GObject based API.
--- It supports both the UNIX socket implementations and winsock2 on Windows.
--- 
--- `GSocket` is the platform independent base upon which the higher level
--- network primitives are based. Applications are not typically meant to
--- use it directly, but rather through classes like `GSocketClient`,
--- `GSocketService` and `GSocketConnection`. However there may be cases where
--- direct use of `GSocket` is useful.
--- 
--- `GSocket` implements the `GInitable` interface, so if it is manually constructed
--- by e.g. `g_object_new()` you must call `g_initable_init()` and check the
--- results before using the object. This is done automatically in
--- `g_socket_new()` and `g_socket_new_from_fd()`, so these functions can return
--- `nil`.
--- 
--- Sockets operate in two general modes, blocking or non-blocking. When
--- in blocking mode all operations (which don’t take an explicit blocking
--- parameter) block until the requested operation
--- is finished or there is an error. In non-blocking mode all calls that
--- would block return immediately with a %G_IO_ERROR_WOULD_BLOCK error.
--- To know when a call would successfully run you can call `g_socket_condition_check()`,
--- or `g_socket_condition_wait()`. You can also use `g_socket_create_source()` and
--- attach it to a `GMainContext` to get callbacks when I/O is possible.
--- Note that all sockets are always set to non blocking mode in the system, and
--- blocking mode is emulated in GSocket.
--- 
--- When working in non-blocking mode applications should always be able to
--- handle getting a %G_IO_ERROR_WOULD_BLOCK error even when some other
--- function said that I/O was possible. This can easily happen in case
--- of a race condition in the application, but it can also happen for other
--- reasons. For instance, on Windows a socket is always seen as writable
--- until a write returns %G_IO_ERROR_WOULD_BLOCK.
--- 
--- `GSockets` can be either connection oriented or datagram based.
--- For connection oriented types you must first establish a connection by
--- either connecting to an address or accepting a connection from another
--- address. For connectionless socket types the target/source address is
--- specified or received in each I/O operation.
--- 
--- All socket file descriptors are set to be close-on-exec.
--- 
--- Note that creating a `GSocket` causes the signal %SIGPIPE to be
--- ignored for the remainder of the program. If you are writing a
--- command-line utility that uses `GSocket`, you may need to take into
--- account the fact that your program will not automatically be killed
--- if it tries to write to %stdout after it has been closed.
--- 
--- Like most other APIs in GLib, `GSocket` is not inherently thread safe. To use
--- a `GSocket` concurrently from multiple threads, you must implement your own
--- locking.
---
--- ---
---
---@class Gio.Socket : GObject.Object, Gio.DatagramBased, Gio.Initable
---@field parent_instance GObject.Object
---@field priv Gio.SocketPrivate
---@operator call: Gio.Socket
Gio.Socket = {}

--- # method Gio.Socket:accept()
---
--- Accept incoming connections on a connection-based socket. This removes
--- the first outstanding connection request from the listening socket and
--- creates a `GSocket` object for it.
--- 
--- The `socket` must be bound to a local address with `g_socket_bind()` and
--- must be listening for incoming connections (`g_socket_listen()`).
--- 
--- If there are no outstanding connections then the operation will block
--- or return %G_IO_ERROR_WOULD_BLOCK if non-blocking I/O is enabled.
--- To be notified of an incoming connection, wait for the %G_IO_IN condition.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@param cancellable? Gio.Cancellable # a %GCancellable or `nil`
---@return Gio.Socket # a new `GSocket`, or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.Socket:accept(cancellable) end

--- # method Gio.Socket:bind()
---
--- When a socket is created it is attached to an address family, but it
--- doesn't have an address in this family. `g_socket_bind()` assigns the
--- address (sometimes called name) of the socket.
--- 
--- It is generally required to bind to a local address before you can
--- receive connections. (See `g_socket_listen()` and `g_socket_accept()` ).
--- In certain situations, you may also want to bind a socket that will be
--- used to initiate connections, though this is not normally required.
--- 
--- If `socket` is a TCP socket, then `allow_reuse` controls the setting
--- of the `SO_REUSEADDR` socket option; normally it should be `true` for
--- server sockets (sockets that you will eventually call
--- `g_socket_accept()` on), and `false` for client sockets. (Failing to
--- set this flag on a server socket may cause `g_socket_bind()` to return
--- %G_IO_ERROR_ADDRESS_IN_USE if the server program is stopped and then
--- immediately restarted.)
--- 
--- If `socket` is a UDP socket, then `allow_reuse` determines whether or
--- not other UDP sockets can be bound to the same address at the same
--- time. In particular, you can have several UDP sockets bound to the
--- same address, and they will all receive all of the multicast and
--- broadcast packets sent to that address. (The behavior of unicast
--- UDP packets to an address with multiple listeners is not defined.)
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@param address Gio.SocketAddress # a `GSocketAddress` specifying the local address.
---@param allow_reuse (boolean|nil) # whether to allow reusing this address
---@return (boolean|nil) # `true` on success, `false` on error.
function Gio.Socket:bind(address, allow_reuse) end

--- # method Gio.Socket:check_connect_result()
---
--- Checks and resets the pending connect error for the socket.
--- This is used to check for errors when `g_socket_connect()` is
--- used in non-blocking mode.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@return (boolean|nil) # `true` if no error, `false` otherwise, setting `error` to the error
function Gio.Socket:check_connect_result() end

--- # method Gio.Socket:close()
---
--- Closes the socket, shutting down any active connection.
--- 
--- Closing a socket does not wait for all outstanding I/O operations
--- to finish, so the caller should not rely on them to be guaranteed
--- to complete even if the close returns with no error.
--- 
--- Once the socket is closed, all other operations will return
--- %G_IO_ERROR_CLOSED. Closing a socket multiple times will not
--- return an error.
--- 
--- Sockets will be automatically closed when the last reference
--- is dropped, but you might want to call this function to make sure
--- resources are released as early as possible.
--- 
--- Beware that due to the way that TCP works, it is possible for
--- recently-sent data to be lost if either you close a socket while the
--- %G_IO_IN condition is set, or else if the remote connection tries to
--- send something to you after you close the socket but before it has
--- finished reading all of the data you sent. There is no easy generic
--- way to avoid this problem; the easiest fix is to design the network
--- protocol such that the client will never send data "out of turn".
--- Another solution is for the server to half-close the connection by
--- calling `g_socket_shutdown()` with only the `shutdown_write` flag set,
--- and then wait for the client to notice this and close its side of the
--- connection, after which the server can safely call `g_socket_close()`.
--- (This is what `GTcpConnection` does if you call
--- `g_tcp_connection_set_graceful_disconnect()`. But of course, this
--- only works if the client will close its connection after the server
--- does.)
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@return (boolean|nil) # `true` on success, `false` on error
function Gio.Socket:close() end

--- # method Gio.Socket:condition_check()
---
--- Checks on the readiness of `socket` to perform operations.
--- The operations specified in `condition` are checked for and masked
--- against the currently-satisfied conditions on `socket`. The result
--- is returned.
--- 
--- Note that on Windows, it is possible for an operation to return
--- %G_IO_ERROR_WOULD_BLOCK even immediately after
--- `g_socket_condition_check()` has claimed that the socket is ready for
--- writing. Rather than calling `g_socket_condition_check()` and then
--- writing to the socket if it succeeds, it is generally better to
--- simply try writing to the socket right away, and try again later if
--- the initial attempt returns %G_IO_ERROR_WOULD_BLOCK.
--- 
--- It is meaningless to specify %G_IO_ERR or %G_IO_HUP in condition;
--- these conditions will always be set in the output if they are true.
--- 
--- This call never blocks.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param condition GLib.IOCondition # a `GIOCondition` mask to check
---@return GLib.IOCondition # the `GIOCondition` mask of the current state
function Gio.Socket:condition_check(condition) end

--- # method Gio.Socket:condition_timed_wait()
---
--- Waits for up to `timeout_us` microseconds for `condition` to become true
--- on `socket`. If the condition is met, `true` is returned.
--- 
--- If `cancellable` is cancelled before the condition is met, or if
--- `timeout_us` (or the socket's `GSocket`:timeout) is reached before the
--- condition is met, then `false` is returned and `error`, if non-`nil`,
--- is set to the appropriate value (%G_IO_ERROR_CANCELLED or
--- %G_IO_ERROR_TIMED_OUT).
--- 
--- If you don't want a timeout, use `g_socket_condition_wait()`.
--- (Alternatively, you can pass -1 for `timeout_us`.)
--- 
--- Note that although `timeout_us` is in microseconds for consistency with
--- other GLib APIs, this function actually only has millisecond
--- resolution, and the behavior is undefined if `timeout_us` is not an
--- exact number of milliseconds.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param condition GLib.IOCondition # a `GIOCondition` mask to wait for
---@param timeout_us integer # the maximum time (in microseconds) to wait, or -1
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return (boolean|nil) # `true` if the condition was met, `false` otherwise
function Gio.Socket:condition_timed_wait(condition, timeout_us, cancellable) end

--- # method Gio.Socket:condition_wait()
---
--- Waits for `condition` to become true on `socket`. When the condition
--- is met, `true` is returned.
--- 
--- If `cancellable` is cancelled before the condition is met, or if the
--- socket has a timeout set and it is reached before the condition is
--- met, then `false` is returned and `error`, if non-`nil`, is set to
--- the appropriate value (%G_IO_ERROR_CANCELLED or
--- %G_IO_ERROR_TIMED_OUT).
--- 
--- See also `g_socket_condition_timed_wait()`.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param condition GLib.IOCondition # a `GIOCondition` mask to wait for
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return (boolean|nil) # `true` if the condition was met, `false` otherwise
function Gio.Socket:condition_wait(condition, cancellable) end

--- # method Gio.Socket:connect()
---
--- Connect the socket to the specified remote address.
--- 
--- For connection oriented socket this generally means we attempt to make
--- a connection to the `address`. For a connection-less socket it sets
--- the default address for `g_socket_send()` and discards all incoming datagrams
--- from other sources.
--- 
--- Generally connection oriented sockets can only connect once, but
--- connection-less sockets can connect multiple times to change the
--- default address.
--- 
--- If the connect call needs to do network I/O it will block, unless
--- non-blocking I/O is enabled. Then %G_IO_ERROR_PENDING is returned
--- and the user can be notified of the connection finishing by waiting
--- for the G_IO_OUT condition. The result of the connection must then be
--- checked with `g_socket_check_connect_result()`.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@param address Gio.SocketAddress # a `GSocketAddress` specifying the remote address.
---@param cancellable? Gio.Cancellable # a %GCancellable or `nil`
---@return (boolean|nil) # `true` if connected, `false` on error.
function Gio.Socket:connect(address, cancellable) end

--- # method Gio.Socket:connection_factory_create_connection()
---
--- Creates a `GSocketConnection` subclass of the right type for
--- `socket`.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@return Gio.SocketConnection # a `GSocketConnection`
function Gio.Socket:connection_factory_create_connection() end

--- # method Gio.Socket:get_available_bytes()
---
--- Get the amount of data pending in the OS input buffer, without blocking.
--- 
--- If `socket` is a UDP or SCTP socket, this will return the size of
--- just the next packet, even if additional packets are buffered after
--- that one.
--- 
--- Note that on Windows, this function is rather inefficient in the
--- UDP case, and so if you know any plausible upper bound on the size
--- of the incoming packet, it is better to just do a
--- `g_socket_receive()` with a buffer of that size, rather than calling
--- `g_socket_get_available_bytes()` first and then doing a receive of
--- exactly the right size.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@return integer # the number of bytes that can be read from the socket without blocking or truncating, or -1 on error.
function Gio.Socket:get_available_bytes() end

--- # method Gio.Socket:get_blocking()
---
--- Gets the blocking mode of the socket. For details on blocking I/O,
--- see `g_socket_set_blocking()`.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return (boolean|nil) # `true` if blocking I/O is used, `false` otherwise.
function Gio.Socket:get_blocking() end

--- # method Gio.Socket:get_broadcast()
---
--- Gets the broadcast setting on `socket`; if `true`,
--- it is possible to send packets to broadcast
--- addresses.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return (boolean|nil) # the broadcast setting on `socket`
function Gio.Socket:get_broadcast() end

--- # method Gio.Socket:get_credentials()
---
--- Returns the credentials of the foreign process connected to this
--- socket, if any (e.g. it is only supported for %G_SOCKET_FAMILY_UNIX
--- sockets).
--- 
--- If this operation isn't supported on the OS, the method fails with
--- the %G_IO_ERROR_NOT_SUPPORTED error. On Linux this is implemented
--- by reading the %SO_PEERCRED option on the underlying socket.
--- 
--- This method can be expected to be available on the following platforms:
--- 
--- - Linux since GLib 2.26
--- - OpenBSD since GLib 2.30
--- - Solaris, Illumos and OpenSolaris since GLib 2.40
--- - NetBSD since GLib 2.42
--- - macOS, tvOS, iOS since GLib 2.66
--- 
--- Other ways to obtain credentials from a foreign peer includes the
--- `GUnixCredentialsMessage` type and
--- `g_unix_connection_send_credentials()` /
--- `g_unix_connection_receive_credentials()` functions.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return Gio.Credentials # `nil` if `error` is set, otherwise a `GCredentials` object that must be freed with `g_object_unref()`.
function Gio.Socket:get_credentials() end

--- # method Gio.Socket:get_family()
---
--- Gets the socket family of the socket.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return Gio.SocketFamily # a `GSocketFamily`
function Gio.Socket:get_family() end

--- # method Gio.Socket:get_fd()
---
--- Returns the underlying OS socket object. On unix this
--- is a socket file descriptor, and on Windows this is
--- a Winsock2 SOCKET handle. This may be useful for
--- doing platform specific or otherwise unusual operations
--- on the socket.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return integer # the file descriptor of the socket.
function Gio.Socket:get_fd() end

--- # method Gio.Socket:get_keepalive()
---
--- Gets the keepalive mode of the socket. For details on this,
--- see `g_socket_set_keepalive()`.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return (boolean|nil) # `true` if keepalive is active, `false` otherwise.
function Gio.Socket:get_keepalive() end

--- # method Gio.Socket:get_listen_backlog()
---
--- Gets the listen backlog setting of the socket. For details on this,
--- see `g_socket_set_listen_backlog()`.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return integer # the maximum number of pending connections.
function Gio.Socket:get_listen_backlog() end

--- # method Gio.Socket:get_local_address()
---
--- Try to get the local address of a bound socket. This is only
--- useful if the socket has been bound to a local address,
--- either explicitly or implicitly when connecting.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return Gio.SocketAddress # a `GSocketAddress` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.Socket:get_local_address() end

--- # method Gio.Socket:get_multicast_loopback()
---
--- Gets the multicast loopback setting on `socket`; if `true` (the
--- default), outgoing multicast packets will be looped back to
--- multicast listeners on the same host.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return (boolean|nil) # the multicast loopback setting on `socket`
function Gio.Socket:get_multicast_loopback() end

--- # method Gio.Socket:get_multicast_ttl()
---
--- Gets the multicast time-to-live setting on `socket`; see
--- `g_socket_set_multicast_ttl()` for more details.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return integer # the multicast time-to-live setting on `socket`
function Gio.Socket:get_multicast_ttl() end

--- # method Gio.Socket:get_option()
---
--- Gets the value of an integer-valued option on `socket`, as with
--- `getsockopt()`. (If you need to fetch a  non-integer-valued option,
--- you will need to call `getsockopt()` directly.)
--- 
--- The [<gio/gnetworking.h>][gio-gnetworking.h]
--- header pulls in system headers that will define most of the
--- standard/portable socket options. For unusual socket protocols or
--- platform-dependent options, you may need to include additional
--- headers.
--- 
--- Note that even for socket options that are a single byte in size,
--- `value` is still a pointer to a `gint` variable, not a `guchar`;
--- `g_socket_get_option()` will handle the conversion internally.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param level integer # the "API level" of the option (eg, `SOL_SOCKET`)
---@param optname integer # the "name" of the option (eg, `SO_BROADCAST`)
---@param value integer # return location for the option value
---@return (boolean|nil) # success or failure. On failure, `error` will be set, and the system error value (`errno` or WSAGetLastE`rror()`) will still be set to the result of the `getsockopt()` call.
function Gio.Socket:get_option(level, optname, value) end

--- # method Gio.Socket:get_protocol()
---
--- Gets the socket protocol id the socket was created with.
--- In case the protocol is unknown, -1 is returned.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return Gio.SocketProtocol # a protocol id, or -1 if unknown
function Gio.Socket:get_protocol() end

--- # method Gio.Socket:get_remote_address()
---
--- Try to get the remote address of a connected socket. This is only
--- useful for connection oriented sockets that have been connected.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return Gio.SocketAddress # a `GSocketAddress` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.Socket:get_remote_address() end

--- # method Gio.Socket:get_socket_type()
---
--- Gets the socket type of the socket.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return Gio.SocketType # a `GSocketType`
function Gio.Socket:get_socket_type() end

--- # method Gio.Socket:get_timeout()
---
--- Gets the timeout setting of the socket. For details on this, see
--- `g_socket_set_timeout()`.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return integer # the timeout in seconds
function Gio.Socket:get_timeout() end

--- # method Gio.Socket:get_ttl()
---
--- Gets the unicast time-to-live setting on `socket`; see
--- `g_socket_set_ttl()` for more details.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return integer # the time-to-live setting on `socket`
function Gio.Socket:get_ttl() end

--- # method Gio.Socket:is_closed()
---
--- Checks whether a socket is closed.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@return (boolean|nil) # `true` if socket is closed, `false` otherwise
function Gio.Socket:is_closed() end

--- # method Gio.Socket:is_connected()
---
--- Check whether the socket is connected. This is only useful for
--- connection-oriented sockets.
--- 
--- If using `g_socket_shutdown()`, this function will return `true` until the
--- socket has been shut down for reading and writing. If you do a non-blocking
--- connect, this function will not return `true` until after you call
--- `g_socket_check_connect_result()`.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return (boolean|nil) # `true` if socket is connected, `false` otherwise.
function Gio.Socket:is_connected() end

--- # method Gio.Socket:join_multicast_group()
---
--- Registers `socket` to receive multicast messages sent to `group`.
--- `socket` must be a %G_SOCKET_TYPE_DATAGRAM socket, and must have
--- been bound to an appropriate interface and port with
--- `g_socket_bind()`.
--- 
--- If `iface` is `nil`, the system will automatically pick an interface
--- to bind to based on `group`.
--- 
--- If `source_specific` is `true`, source-specific multicast as defined
--- in RFC 4604 is used. Note that on older platforms this may fail
--- with a %G_IO_ERROR_NOT_SUPPORTED error.
--- 
--- To bind to a given source-specific multicast address, use
--- `g_socket_join_multicast_group_ssm()` instead.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@param group Gio.InetAddress # a `GInetAddress` specifying the group address to join.
---@param source_specific (boolean|nil) # `true` if source-specific multicast should be used
---@param iface? string # Name of the interface to use, or `nil`
---@return (boolean|nil) # `true` on success, `false` on error.
function Gio.Socket:join_multicast_group(group, source_specific, iface) end

--- # method Gio.Socket:join_multicast_group_ssm()
---
--- Registers `socket` to receive multicast messages sent to `group`.
--- `socket` must be a %G_SOCKET_TYPE_DATAGRAM socket, and must have
--- been bound to an appropriate interface and port with
--- `g_socket_bind()`.
--- 
--- If `iface` is `nil`, the system will automatically pick an interface
--- to bind to based on `group`.
--- 
--- If `source_specific` is not `nil`, use source-specific multicast as
--- defined in RFC 4604. Note that on older platforms this may fail
--- with a %G_IO_ERROR_NOT_SUPPORTED error.
--- 
--- Note that this function can be called multiple times for the same
--- `group` with different `source_specific` in order to receive multicast
--- packets from more than one source.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@param group Gio.InetAddress # a `GInetAddress` specifying the group address to join.
---@param source_specific? Gio.InetAddress # a `GInetAddress` specifying the source-specific multicast address or `nil` to ignore.
---@param iface? string # Name of the interface to use, or `nil`
---@return (boolean|nil) # `true` on success, `false` on error.
function Gio.Socket:join_multicast_group_ssm(group, source_specific, iface) end

--- # method Gio.Socket:leave_multicast_group()
---
--- Removes `socket` from the multicast group defined by `group`, `iface`,
--- and `source_specific` (which must all have the same values they had
--- when you joined the group).
--- 
--- `socket` remains bound to its address and port, and can still receive
--- unicast messages after calling this.
--- 
--- To unbind to a given source-specific multicast address, use
--- `g_socket_leave_multicast_group_ssm()` instead.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@param group Gio.InetAddress # a `GInetAddress` specifying the group address to leave.
---@param source_specific (boolean|nil) # `true` if source-specific multicast was used
---@param iface? string # Interface used
---@return (boolean|nil) # `true` on success, `false` on error.
function Gio.Socket:leave_multicast_group(group, source_specific, iface) end

--- # method Gio.Socket:leave_multicast_group_ssm()
---
--- Removes `socket` from the multicast group defined by `group`, `iface`,
--- and `source_specific` (which must all have the same values they had
--- when you joined the group).
--- 
--- `socket` remains bound to its address and port, and can still receive
--- unicast messages after calling this.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@param group Gio.InetAddress # a `GInetAddress` specifying the group address to leave.
---@param source_specific? Gio.InetAddress # a `GInetAddress` specifying the source-specific multicast address or `nil` to ignore.
---@param iface? string # Name of the interface to use, or `nil`
---@return (boolean|nil) # `true` on success, `false` on error.
function Gio.Socket:leave_multicast_group_ssm(group, source_specific, iface) end

--- # method Gio.Socket:listen()
---
--- Marks the socket as a server socket, i.e. a socket that is used
--- to accept incoming requests using `g_socket_accept()`.
--- 
--- Before calling this the socket must be bound to a local address using
--- `g_socket_bind()`.
--- 
--- To set the maximum amount of outstanding clients, use
--- `g_socket_set_listen_backlog()`.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@return (boolean|nil) # `true` on success, `false` on error.
function Gio.Socket:listen() end

--- # method Gio.Socket:receive()
---
--- Receive data (up to `size` bytes) from a socket. This is mainly used by
--- connection-oriented sockets; it is identical to `g_socket_receive_from()`
--- with `address` set to `nil`.
--- 
--- For %G_SOCKET_TYPE_DATAGRAM and %G_SOCKET_TYPE_SEQPACKET sockets,
--- `g_socket_receive()` will always read either 0 or 1 complete messages from
--- the socket. If the received message is too large to fit in `buffer`, then
--- the data beyond `size` bytes will be discarded, without any explicit
--- indication that this has occurred.
--- 
--- For %G_SOCKET_TYPE_STREAM sockets, `g_socket_receive()` can return any
--- number of bytes, up to `size`. If more than `size` bytes have been
--- received, the additional data will be returned in future calls to
--- `g_socket_receive()`.
--- 
--- If the socket is in blocking mode the call will block until there
--- is some data to receive, the connection is closed, or there is an
--- error. If there is no data available and the socket is in
--- non-blocking mode, a %G_IO_ERROR_WOULD_BLOCK error will be
--- returned. To be notified when data is available, wait for the
--- %G_IO_IN condition.
--- 
--- On error -1 is returned and `error` is set accordingly.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param buffer unknown[] # a buffer to read data into (which should be at least `size` bytes long).
---@param size integer # the number of bytes you want to read from the socket
---@param cancellable? Gio.Cancellable # a %GCancellable or `nil`
---@return integer # Number of bytes read, or 0 if the connection was closed by the peer, or -1 on error
function Gio.Socket:receive(buffer, size, cancellable) end

--- # method Gio.Socket:receive_from()
---
--- Receive data (up to `size` bytes) from a socket.
--- 
--- If `address` is non-`nil` then `address` will be set equal to the
--- source address of the received packet.
--- `address` is owned by the caller.
--- 
--- See `g_socket_receive()` for additional information.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param address? Gio.SocketAddress # a pointer to a `GSocketAddress` pointer, or `nil`
---@param buffer unknown[] # a buffer to read data into (which should be at least `size` bytes long).
---@param size integer # the number of bytes you want to read from the socket
---@param cancellable? Gio.Cancellable # a %GCancellable or `nil`
---@return integer # Number of bytes read, or 0 if the connection was closed by the peer, or -1 on error
function Gio.Socket:receive_from(address, buffer, size, cancellable) end

--- # method Gio.Socket:receive_message()
---
--- Receive data from a socket.  For receiving multiple messages, see
--- `g_socket_receive_messages()`; for easier use, see
--- `g_socket_receive()` and `g_socket_receive_from()`.
--- 
--- If `address` is non-`nil` then `address` will be set equal to the
--- source address of the received packet.
--- `address` is owned by the caller.
--- 
--- `vector` must point to an array of `GInputVector` structs and
--- `num_vectors` must be the length of this array.  These structs
--- describe the buffers that received data will be scattered into.
--- If `num_vectors` is -1, then `vectors` is assumed to be terminated
--- by a `GInputVector` with a `nil` buffer pointer.
--- 
--- As a special case, if `num_vectors` is 0 (in which case, `vectors`
--- may of course be `nil`), then a single byte is received and
--- discarded. This is to facilitate the common practice of sending a
--- single '\0' byte for the purposes of transferring ancillary data.
--- 
--- `messages`, if non-`nil`, will be set to point to a newly-allocated
--- array of `GSocketControlMessage` instances or `nil` if no such
--- messages was received. These correspond to the control messages
--- received from the kernel, one `GSocketControlMessage` per message
--- from the kernel. This array is `nil`-terminated and must be freed
--- by the caller using `g_free()` after calling `g_object_unref()` on each
--- element. If `messages` is `nil`, any control messages received will
--- be discarded.
--- 
--- `num_messages`, if non-`nil`, will be set to the number of control
--- messages received.
--- 
--- If both `messages` and `num_messages` are non-`nil`, then
--- `num_messages` gives the number of `GSocketControlMessage` instances
--- in `messages` (ie: not including the `nil` terminator).
--- 
--- `flags` is an in/out parameter. The commonly available arguments
--- for this are available in the `GSocketMsgFlags` enum, but the
--- values there are the same as the system values, and the flags
--- are passed in as-is, so you can pass in system-specific flags too
--- (and `g_socket_receive_message()` may pass system-specific flags out).
--- Flags passed in to the parameter affect the receive operation; flags returned
--- out of it are relevant to the specific returned message.
--- 
--- As with `g_socket_receive()`, data may be discarded if `socket` is
--- %G_SOCKET_TYPE_DATAGRAM or %G_SOCKET_TYPE_SEQPACKET and you do not
--- provide enough buffer space to read a complete message. You can pass
--- %G_SOCKET_MSG_PEEK in `flags` to peek at the current message without
--- removing it from the receive queue, but there is no portable way to find
--- out the length of the message other than by reading it into a
--- sufficiently-large buffer.
--- 
--- If the socket is in blocking mode the call will block until there
--- is some data to receive, the connection is closed, or there is an
--- error. If there is no data available and the socket is in
--- non-blocking mode, a %G_IO_ERROR_WOULD_BLOCK error will be
--- returned. To be notified when data is available, wait for the
--- %G_IO_IN condition.
--- 
--- On error -1 is returned and `error` is set accordingly.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param address? Gio.SocketAddress # a pointer to a `GSocketAddress` pointer, or `nil`
---@param vectors unknown[] # an array of `GInputVector` structs
---@param num_vectors integer # the number of elements in `vectors`, or -1
---@param messages? unknown[] # a pointer which may be filled with an array of `GSocketControlMessages`, or `nil`
---@param num_messages integer # a pointer which will be filled with the number of elements in `messages`, or `nil`
---@param flags integer # a pointer to an int containing `GSocketMsgFlags` flags, which may additionally contain [other platform specific flags](http://man7.org/linux/man-pages/man2/recv.2.html)
---@param cancellable? Gio.Cancellable # a %GCancellable or `nil`
---@return integer # Number of bytes read, or 0 if the connection was closed by the peer, or -1 on error
function Gio.Socket:receive_message(address, vectors, num_vectors, messages, num_messages, flags, cancellable) end

--- # method Gio.Socket:receive_messages()
---
--- Receive multiple data messages from `socket` in one go.  This is the most
--- complicated and fully-featured version of this call. For easier use, see
--- `g_socket_receive()`, `g_socket_receive_from()`, and `g_socket_receive_message()`.
--- 
--- `messages` must point to an array of `GInputMessage` structs and
--- `num_messages` must be the length of this array. Each `GInputMessage`
--- contains a pointer to an array of `GInputVector` structs describing the
--- buffers that the data received in each message will be written to. Using
--- multiple `GInputVectors` is more memory-efficient than manually copying data
--- out of a single buffer to multiple sources, and more system-call-efficient
--- than making multiple calls to `g_socket_receive()`, such as in scenarios where
--- a lot of data packets need to be received (e.g. high-bandwidth video
--- streaming over RTP/UDP).
--- 
--- `flags` modify how all messages are received. The commonly available
--- arguments for this are available in the `GSocketMsgFlags` enum, but the
--- values there are the same as the system values, and the flags
--- are passed in as-is, so you can pass in system-specific flags too. These
--- flags affect the overall receive operation. Flags affecting individual
--- messages are returned in `GInputMessage`.flags.
--- 
--- The other members of `GInputMessage` are treated as described in its
--- documentation.
--- 
--- If `GSocket`:blocking is `true` the call will block until `num_messages` have
--- been received, or the end of the stream is reached.
--- 
--- If `GSocket`:blocking is `false` the call will return up to `num_messages`
--- without blocking, or %G_IO_ERROR_WOULD_BLOCK if no messages are queued in the
--- operating system to be received.
--- 
--- In blocking mode, if `GSocket`:timeout is positive and is reached before any
--- messages are received, %G_IO_ERROR_TIMED_OUT is returned, otherwise up to
--- `num_messages` are returned. (Note: This is effectively the
--- behaviour of `MSG_WAITFORONE` with `recvmmsg()`.)
--- 
--- To be notified when messages are available, wait for the
--- %G_IO_IN condition. Note though that you may still receive
--- %G_IO_ERROR_WOULD_BLOCK from `g_socket_receive_messages()` even if you were
--- previously notified of a %G_IO_IN condition.
--- 
--- If the remote peer closes the connection, any messages queued in the
--- operating system will be returned, and subsequent calls to
--- `g_socket_receive_messages()` will return 0 (with no error set).
--- 
--- On error -1 is returned and `error` is set accordingly. An error will only
--- be returned if zero messages could be received; otherwise the number of
--- messages successfully received before the error will be returned.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param messages unknown[] # an array of `GInputMessage` structs
---@param num_messages integer # the number of elements in `messages`
---@param flags integer # an int containing `GSocketMsgFlags` flags for the overall operation, which may additionally contain [other platform specific flags](http://man7.org/linux/man-pages/man2/recv.2.html)
---@param cancellable? Gio.Cancellable # a %GCancellable or `nil`
---@return integer # number of messages received, or -1 on error. Note that the number of messages received may be smaller than `num_messages` if in non-blocking mode, if the peer closed the connection, or if `num_messages` was larger than `UIO_MAXIOV` (1024), in which case the caller may re-try to receive the remaining messages.
function Gio.Socket:receive_messages(messages, num_messages, flags, cancellable) end

--- # method Gio.Socket:receive_with_blocking()
---
--- This behaves exactly the same as `g_socket_receive()`, except that
--- the choice of blocking or non-blocking behavior is determined by
--- the `blocking` argument rather than by `socket`'s properties.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param buffer unknown[] # a buffer to read data into (which should be at least `size` bytes long).
---@param size integer # the number of bytes you want to read from the socket
---@param blocking (boolean|nil) # whether to do blocking or non-blocking I/O
---@param cancellable? Gio.Cancellable # a %GCancellable or `nil`
---@return integer # Number of bytes read, or 0 if the connection was closed by the peer, or -1 on error
function Gio.Socket:receive_with_blocking(buffer, size, blocking, cancellable) end

--- # method Gio.Socket:send()
---
--- Tries to send `size` bytes from `buffer` on the socket. This is
--- mainly used by connection-oriented sockets; it is identical to
--- `g_socket_send_to()` with `address` set to `nil`.
--- 
--- If the socket is in blocking mode the call will block until there is
--- space for the data in the socket queue. If there is no space available
--- and the socket is in non-blocking mode a %G_IO_ERROR_WOULD_BLOCK error
--- will be returned. To be notified when space is available, wait for the
--- %G_IO_OUT condition. Note though that you may still receive
--- %G_IO_ERROR_WOULD_BLOCK from `g_socket_send()` even if you were previously
--- notified of a %G_IO_OUT condition. (On Windows in particular, this is
--- very common due to the way the underlying APIs work.)
--- 
--- On error -1 is returned and `error` is set accordingly.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param buffer unknown[] # the buffer containing the data to send.
---@param size integer # the number of bytes to send
---@param cancellable? Gio.Cancellable # a %GCancellable or `nil`
---@return integer # Number of bytes written (which may be less than `size`), or -1 on error
function Gio.Socket:send(buffer, size, cancellable) end

--- # method Gio.Socket:send_message()
---
--- Send data to `address` on `socket`.  For sending multiple messages see
--- `g_socket_send_messages()`; for easier use, see
--- `g_socket_send()` and `g_socket_send_to()`.
--- 
--- If `address` is `nil` then the message is sent to the default receiver
--- (set by `g_socket_connect()`).
--- 
--- `vectors` must point to an array of `GOutputVector` structs and
--- `num_vectors` must be the length of this array. (If `num_vectors` is -1,
--- then `vectors` is assumed to be terminated by a `GOutputVector` with a
--- `nil` buffer pointer.) The `GOutputVector` structs describe the buffers
--- that the sent data will be gathered from. Using multiple
--- `GOutputVectors` is more memory-efficient than manually copying
--- data from multiple sources into a single buffer, and more
--- network-efficient than making multiple calls to `g_socket_send()`.
--- 
--- `messages`, if non-`nil`, is taken to point to an array of `num_messages`
--- `GSocketControlMessage` instances. These correspond to the control
--- messages to be sent on the socket.
--- If `num_messages` is -1 then `messages` is treated as a `nil`-terminated
--- array.
--- 
--- `flags` modify how the message is sent. The commonly available arguments
--- for this are available in the `GSocketMsgFlags` enum, but the
--- values there are the same as the system values, and the flags
--- are passed in as-is, so you can pass in system-specific flags too.
--- 
--- If the socket is in blocking mode the call will block until there is
--- space for the data in the socket queue. If there is no space available
--- and the socket is in non-blocking mode a %G_IO_ERROR_WOULD_BLOCK error
--- will be returned. To be notified when space is available, wait for the
--- %G_IO_OUT condition. Note though that you may still receive
--- %G_IO_ERROR_WOULD_BLOCK from `g_socket_send()` even if you were previously
--- notified of a %G_IO_OUT condition. (On Windows in particular, this is
--- very common due to the way the underlying APIs work.)
--- 
--- The sum of the sizes of each `GOutputVector` in vectors must not be
--- greater than %G_MAXSSIZE. If the message can be larger than this,
--- then it is mandatory to use the `g_socket_send_message_with_timeout()`
--- function.
--- 
--- On error -1 is returned and `error` is set accordingly.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param address? Gio.SocketAddress # a `GSocketAddress`, or `nil`
---@param vectors unknown[] # an array of `GOutputVector` structs
---@param num_vectors integer # the number of elements in `vectors`, or -1
---@param messages? unknown[] # a pointer to an array of `GSocketControlMessages`, or `nil`.
---@param num_messages integer # number of elements in `messages`, or -1.
---@param flags integer # an int containing `GSocketMsgFlags` flags, which may additionally contain [other platform specific flags](http://man7.org/linux/man-pages/man2/recv.2.html)
---@param cancellable? Gio.Cancellable # a %GCancellable or `nil`
---@return integer # Number of bytes written (which may be less than `size`), or -1 on error
function Gio.Socket:send_message(address, vectors, num_vectors, messages, num_messages, flags, cancellable) end

--- # method Gio.Socket:send_message_with_timeout()
---
--- This behaves exactly the same as `g_socket_send_message()`, except that
--- the choice of timeout behavior is determined by the `timeout_us` argument
--- rather than by `socket`'s properties.
--- 
--- On error %G_POLLABLE_RETURN_FAILED is returned and `error` is set accordingly, or
--- if the socket is currently not writable %G_POLLABLE_RETURN_WOULD_BLOCK is
--- returned. `bytes_written` will contain 0 in both cases.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param address? Gio.SocketAddress # a `GSocketAddress`, or `nil`
---@param vectors unknown[] # an array of `GOutputVector` structs
---@param num_vectors integer # the number of elements in `vectors`, or -1
---@param messages? unknown[] # a pointer to an array of `GSocketControlMessages`, or `nil`.
---@param num_messages integer # number of elements in `messages`, or -1.
---@param flags integer # an int containing `GSocketMsgFlags` flags, which may additionally contain [other platform specific flags](http://man7.org/linux/man-pages/man2/recv.2.html)
---@param timeout_us integer # the maximum time (in microseconds) to wait, or -1
---@param bytes_written? integer # location to store the number of bytes that were written to the socket
---@param cancellable? Gio.Cancellable # a %GCancellable or `nil`
---@return Gio.PollableReturn # %G_POLLABLE_RETURN_OK if all data was successfully written, %G_POLLABLE_RETURN_WOULD_BLOCK if the socket is currently not writable, or %G_POLLABLE_RETURN_FAILED if an error happened and `error` is set.
function Gio.Socket:send_message_with_timeout(address, vectors, num_vectors, messages, num_messages, flags, timeout_us, bytes_written, cancellable) end

--- # method Gio.Socket:send_messages()
---
--- Send multiple data messages from `socket` in one go.  This is the most
--- complicated and fully-featured version of this call. For easier use, see
--- `g_socket_send()`, `g_socket_send_to()`, and `g_socket_send_message()`.
--- 
--- `messages` must point to an array of `GOutputMessage` structs and
--- `num_messages` must be the length of this array. Each `GOutputMessage`
--- contains an address to send the data to, and a pointer to an array of
--- `GOutputVector` structs to describe the buffers that the data to be sent
--- for each message will be gathered from. Using multiple `GOutputVectors` is
--- more memory-efficient than manually copying data from multiple sources
--- into a single buffer, and more network-efficient than making multiple
--- calls to `g_socket_send()`. Sending multiple messages in one go avoids the
--- overhead of making a lot of syscalls in scenarios where a lot of data
--- packets need to be sent (e.g. high-bandwidth video streaming over RTP/UDP),
--- or where the same data needs to be sent to multiple recipients.
--- 
--- `flags` modify how the message is sent. The commonly available arguments
--- for this are available in the `GSocketMsgFlags` enum, but the
--- values there are the same as the system values, and the flags
--- are passed in as-is, so you can pass in system-specific flags too.
--- 
--- If the socket is in blocking mode the call will block until there is
--- space for all the data in the socket queue. If there is no space available
--- and the socket is in non-blocking mode a %G_IO_ERROR_WOULD_BLOCK error
--- will be returned if no data was written at all, otherwise the number of
--- messages sent will be returned. To be notified when space is available,
--- wait for the %G_IO_OUT condition. Note though that you may still receive
--- %G_IO_ERROR_WOULD_BLOCK from `g_socket_send()` even if you were previously
--- notified of a %G_IO_OUT condition. (On Windows in particular, this is
--- very common due to the way the underlying APIs work.)
--- 
--- On error -1 is returned and `error` is set accordingly. An error will only
--- be returned if zero messages could be sent; otherwise the number of messages
--- successfully sent before the error will be returned.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param messages unknown[] # an array of `GOutputMessage` structs
---@param num_messages integer # the number of elements in `messages`
---@param flags integer # an int containing `GSocketMsgFlags` flags, which may additionally contain [other platform specific flags](http://man7.org/linux/man-pages/man2/recv.2.html)
---@param cancellable? Gio.Cancellable # a %GCancellable or `nil`
---@return integer # number of messages sent, or -1 on error. Note that the number of messages sent may be smaller than `num_messages` if the socket is non-blocking or if `num_messages` was larger than UIO_MAXIOV (1024), in which case the caller may re-try to send the remaining messages.
function Gio.Socket:send_messages(messages, num_messages, flags, cancellable) end

--- # method Gio.Socket:send_to()
---
--- Tries to send `size` bytes from `buffer` to `address`. If `address` is
--- `nil` then the message is sent to the default receiver (set by
--- `g_socket_connect()`).
--- 
--- See `g_socket_send()` for additional information.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param address? Gio.SocketAddress # a `GSocketAddress`, or `nil`
---@param buffer unknown[] # the buffer containing the data to send.
---@param size integer # the number of bytes to send
---@param cancellable? Gio.Cancellable # a %GCancellable or `nil`
---@return integer # Number of bytes written (which may be less than `size`), or -1 on error
function Gio.Socket:send_to(address, buffer, size, cancellable) end

--- # method Gio.Socket:send_with_blocking()
---
--- This behaves exactly the same as `g_socket_send()`, except that
--- the choice of blocking or non-blocking behavior is determined by
--- the `blocking` argument rather than by `socket`'s properties.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param buffer unknown[] # the buffer containing the data to send.
---@param size integer # the number of bytes to send
---@param blocking (boolean|nil) # whether to do blocking or non-blocking I/O
---@param cancellable? Gio.Cancellable # a %GCancellable or `nil`
---@return integer # Number of bytes written (which may be less than `size`), or -1 on error
function Gio.Socket:send_with_blocking(buffer, size, blocking, cancellable) end

--- # method Gio.Socket:set_blocking()
---
--- Sets the blocking mode of the socket. In blocking mode
--- all operations (which don’t take an explicit blocking parameter) block until
--- they succeed or there is an error. In
--- non-blocking mode all functions return results immediately or
--- with a %G_IO_ERROR_WOULD_BLOCK error.
--- 
--- All sockets are created in blocking mode. However, note that the
--- platform level socket is always non-blocking, and blocking mode
--- is a GSocket level feature.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@param blocking (boolean|nil) # Whether to use blocking I/O or not.
---@return nil
function Gio.Socket:set_blocking(blocking) end

--- # method Gio.Socket:set_broadcast()
---
--- Sets whether `socket` should allow sending to broadcast addresses.
--- This is `false` by default.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@param broadcast (boolean|nil) # whether `socket` should allow sending to broadcast addresses
---@return nil
function Gio.Socket:set_broadcast(broadcast) end

--- # method Gio.Socket:set_keepalive()
---
--- Sets or unsets the %SO_KEEPALIVE flag on the underlying socket. When
--- this flag is set on a socket, the system will attempt to verify that the
--- remote socket endpoint is still present if a sufficiently long period of
--- time passes with no data being exchanged. If the system is unable to
--- verify the presence of the remote endpoint, it will automatically close
--- the connection.
--- 
--- This option is only functional on certain kinds of sockets. (Notably,
--- %G_SOCKET_PROTOCOL_TCP sockets.)
--- 
--- The exact time between pings is system- and protocol-dependent, but will
--- normally be at least two hours. Most commonly, you would set this flag
--- on a server socket if you want to allow clients to remain idle for long
--- periods of time, but also want to ensure that connections are eventually
--- garbage-collected if clients crash or become unreachable.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@param keepalive (boolean|nil) # Value for the keepalive flag
---@return nil
function Gio.Socket:set_keepalive(keepalive) end

--- # method Gio.Socket:set_listen_backlog()
---
--- Sets the maximum number of outstanding connections allowed
--- when listening on this socket. If more clients than this are
--- connecting to the socket and the application is not handling them
--- on time then the new connections will be refused.
--- 
--- Note that this must be called before `g_socket_listen()` and has no
--- effect if called after that.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@param backlog integer # the maximum number of pending connections.
---@return nil
function Gio.Socket:set_listen_backlog(backlog) end

--- # method Gio.Socket:set_multicast_loopback()
---
--- Sets whether outgoing multicast packets will be received by sockets
--- listening on that multicast address on the same host. This is `true`
--- by default.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@param loopback (boolean|nil) # whether `socket` should receive messages sent to its multicast groups from the local host
---@return nil
function Gio.Socket:set_multicast_loopback(loopback) end

--- # method Gio.Socket:set_multicast_ttl()
---
--- Sets the time-to-live for outgoing multicast datagrams on `socket`.
--- By default, this is 1, meaning that multicast packets will not leave
--- the local network.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@param ttl integer # the time-to-live value for all multicast datagrams on `socket`
---@return nil
function Gio.Socket:set_multicast_ttl(ttl) end

--- # method Gio.Socket:set_option()
---
--- Sets the value of an integer-valued option on `socket`, as with
--- `setsockopt()`. (If you need to set a non-integer-valued option,
--- you will need to call `setsockopt()` directly.)
--- 
--- The [<gio/gnetworking.h>][gio-gnetworking.h]
--- header pulls in system headers that will define most of the
--- standard/portable socket options. For unusual socket protocols or
--- platform-dependent options, you may need to include additional
--- headers.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param level integer # the "API level" of the option (eg, `SOL_SOCKET`)
---@param optname integer # the "name" of the option (eg, `SO_BROADCAST`)
---@param value integer # the value to set the option to
---@return (boolean|nil) # success or failure. On failure, `error` will be set, and the system error value (`errno` or WSAGetLastE`rror()`) will still be set to the result of the `setsockopt()` call.
function Gio.Socket:set_option(level, optname, value) end

--- # method Gio.Socket:set_timeout()
---
--- Sets the time in seconds after which I/O operations on `socket` will
--- time out if they have not yet completed.
--- 
--- On a blocking socket, this means that any blocking `GSocket`
--- operation will time out after `timeout` seconds of inactivity,
--- returning %G_IO_ERROR_TIMED_OUT.
--- 
--- On a non-blocking socket, calls to `g_socket_condition_wait()` will
--- also fail with %G_IO_ERROR_TIMED_OUT after the given time. Sources
--- created with `g_socket_create_source()` will trigger after
--- `timeout` seconds of inactivity, with the requested condition
--- set, at which point calling `g_socket_receive()`, `g_socket_send()`,
--- `g_socket_check_connect_result()`, etc, will fail with
--- %G_IO_ERROR_TIMED_OUT.
--- 
--- If `timeout` is 0 (the default), operations will never time out
--- on their own.
--- 
--- Note that if an I/O operation is interrupted by a signal, this may
--- cause the timeout to be reset.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@param timeout integer # the timeout for `socket`, in seconds, or 0 for none
---@return nil
function Gio.Socket:set_timeout(timeout) end

--- # method Gio.Socket:set_ttl()
---
--- Sets the time-to-live for outgoing unicast packets on `socket`.
--- By default the platform-specific default value is used.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`.
---@param ttl integer # the time-to-live value for all unicast packets on `socket`
---@return nil
function Gio.Socket:set_ttl(ttl) end

--- # method Gio.Socket:shutdown()
---
--- Shut down part or all of a full-duplex connection.
--- 
--- If `shutdown_read` is `true` then the receiving side of the connection
--- is shut down, and further reading is disallowed.
--- 
--- If `shutdown_write` is `true` then the sending side of the connection
--- is shut down, and further writing is disallowed.
--- 
--- It is allowed for both `shutdown_read` and `shutdown_write` to be `true`.
--- 
--- One example where it is useful to shut down only one side of a connection is
--- graceful disconnect for TCP connections where you close the sending side,
--- then wait for the other side to close the connection, thus ensuring that the
--- other side saw all sent data.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@param shutdown_read (boolean|nil) # whether to shut down the read side
---@param shutdown_write (boolean|nil) # whether to shut down the write side
---@return (boolean|nil) # `true` on success, `false` on error
function Gio.Socket:shutdown(shutdown_read, shutdown_write) end

--- # method Gio.Socket:speaks_ipv4()
---
--- Checks if a socket is capable of speaking IPv4.
--- 
--- IPv4 sockets are capable of speaking IPv4.  On some operating systems
--- and under some combinations of circumstances IPv6 sockets are also
--- capable of speaking IPv4.  See RFC 3493 section 3.7 for more
--- information.
--- 
--- No other types of sockets are currently considered as being capable
--- of speaking IPv4.
---
--- ---
---
---@param self Gio.Socket # a `GSocket`
---@return (boolean|nil) # `true` if this socket can be used with IPv4.
function Gio.Socket:speaks_ipv4() end

--- # function Gio.Socket.new()
---
--- Creates a new `GSocket` with the defined family, type and protocol.
--- If `protocol` is 0 (%G_SOCKET_PROTOCOL_DEFAULT) the default protocol type
--- for the family and type is used.
--- 
--- The `protocol` is a family and type specific int that specifies what
--- kind of protocol to use. `GSocketProtocol` lists several common ones.
--- Many families only support one protocol, and use 0 for this, others
--- support several and using 0 means to use the default protocol for
--- the family and type.
--- 
--- The protocol id is passed directly to the operating
--- system, so you can use protocols not listed in `GSocketProtocol` if you
--- know the protocol number used for it.
---
--- ---
---
---@param family Gio.SocketFamily # the socket family to use, e.g. %G_SOCKET_FAMILY_IPV4.
---@param type Gio.SocketType # the socket type to use.
---@param protocol Gio.SocketProtocol # the id of the protocol to use, or 0 for default.
---@return Gio.Socket # a `GSocket` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.Socket.new(family, type, protocol) end

--- # function Gio.Socket.new_from_fd()
---
--- Creates a new `GSocket` from a native file descriptor
--- or winsock SOCKET handle.
--- 
--- This reads all the settings from the file descriptor so that
--- all properties should work. Note that the file descriptor
--- will be set to non-blocking mode, independent on the blocking
--- mode of the `GSocket`.
--- 
--- On success, the returned `GSocket` takes ownership of `fd`. On failure, the
--- caller must close `fd` themselves.
--- 
--- Since GLib 2.46, it is no longer a fatal error to call this on a non-socket
--- descriptor.  Instead, a GError will be set with code %G_IO_ERROR_FAILED
---
--- ---
---
---@param fd integer # a native socket file descriptor.
---@return Gio.Socket # a `GSocket` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.Socket.new_from_fd(fd) end

--- # class Gio.SocketAddress
---
--- `GSocketAddress` is the equivalent of struct sockaddr in the BSD
--- sockets API. This is an abstract class; use `GInetSocketAddress`
--- for internet sockets, or `GUnixSocketAddress` for UNIX domain sockets.
---
--- ---
---
---@class Gio.SocketAddress : GObject.Object, Gio.SocketConnectable
---@field parent_instance GObject.Object
Gio.SocketAddress = {}

--- # method Gio.SocketAddress:get_family()
---
--- Gets the socket family type of `address`.
---
--- ---
---
---@param self Gio.SocketAddress # a `GSocketAddress`
---@return Gio.SocketFamily # the socket family type of `address`
function Gio.SocketAddress:get_family() end

--- # method Gio.SocketAddress:get_native_size()
---
--- Gets the size of `address`'s native struct sockaddr.
--- You can use this to allocate memory to pass to
--- `g_socket_address_to_native()`.
---
--- ---
---
---@param self Gio.SocketAddress # a `GSocketAddress`
---@return integer # the size of the native struct sockaddr that `address` represents
function Gio.SocketAddress:get_native_size() end

--- # method Gio.SocketAddress:to_native()
---
--- Converts a `GSocketAddress` to a native struct sockaddr, which can
--- be passed to low-level functions like `connect()` or `bind()`.
--- 
--- If not enough space is available, a %G_IO_ERROR_NO_SPACE error
--- is returned. If the address type is not known on the system
--- then a %G_IO_ERROR_NOT_SUPPORTED error is returned.
---
--- ---
---
---@param self Gio.SocketAddress # a `GSocketAddress`
---@param dest? userdata # a pointer to a memory location that will contain the native struct sockaddr
---@param destlen integer # the size of `dest`. Must be at least as large as `g_socket_address_get_native_size()`
---@return (boolean|nil) # `true` if `dest` was filled in, `false` on error
function Gio.SocketAddress:to_native(dest, destlen) end

--- # function Gio.SocketAddress.new_from_native()
---
--- Creates a `GSocketAddress` subclass corresponding to the native
--- struct sockaddr `native`.
---
--- ---
---
---@param native userdata # a pointer to a struct sockaddr
---@param len integer # the size of the memory location pointed to by `native`
---@return Gio.SocketAddress # a new `GSocketAddress` if `native` could successfully be converted, otherwise `nil`
function Gio.SocketAddress.new_from_native(native, len) end

--- # record Gio.SocketAddressClass
---
---@class Gio.SocketAddressClass
---@field parent_class GObject.ObjectClass
---@field get_family fun(address: Gio.SocketAddress): Gio.SocketFamily
---@field get_native_size fun(address: Gio.SocketAddress): integer
---@field to_native fun(address: Gio.SocketAddress, dest: userdata, destlen: integer): (boolean|nil)
Gio.SocketAddressClass = {}

--- # class Gio.SocketAddressEnumerator
---
--- `GSocketAddressEnumerator` is an enumerator type for `GSocketAddress`
--- instances. It is returned by enumeration functions such as
--- `g_socket_connectable_enumerate()`, which returns a `GSocketAddressEnumerator`
--- to list each `GSocketAddress` which could be used to connect to that
--- `GSocketConnectable`.
--- 
--- Enumeration is typically a blocking operation, so the asynchronous methods
--- `g_socket_address_enumerator_next_async()` and
--- `g_socket_address_enumerator_next_finish()` should be used where possible.
--- 
--- Each `GSocketAddressEnumerator` can only be enumerated once. Once
--- `g_socket_address_enumerator_next()` has returned `nil`, further
--- enumeration with that `GSocketAddressEnumerator` is not possible, and it can
--- be unreffed.
---
--- ---
---
---@class Gio.SocketAddressEnumerator : GObject.Object
---@field parent_instance GObject.Object
Gio.SocketAddressEnumerator = {}

--- # method Gio.SocketAddressEnumerator:next()
---
--- Retrieves the next `GSocketAddress` from `enumerator`. Note that this
--- may block for some amount of time. (Eg, a `GNetworkAddress` may need
--- to do a DNS lookup before it can return an address.) Use
--- `g_socket_address_enumerator_next_async()` if you need to avoid
--- blocking.
--- 
--- If `enumerator` is expected to yield addresses, but for some reason
--- is unable to (eg, because of a DNS error), then the first call to
--- `g_socket_address_enumerator_next()` will return an appropriate error
--- in *`error`. However, if the first call to
--- `g_socket_address_enumerator_next()` succeeds, then any further
--- internal errors (other than `cancellable` being triggered) will be
--- ignored.
---
--- ---
---
---@param self Gio.SocketAddressEnumerator # a `GSocketAddressEnumerator`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return Gio.SocketAddress # a `GSocketAddress` (owned by the caller), or `nil` on error (in which case *`error` will be set) or if there are no more addresses.
function Gio.SocketAddressEnumerator:next(cancellable) end

--- # method Gio.SocketAddressEnumerator:next_async()
---
--- Asynchronously retrieves the next `GSocketAddress` from `enumerator`
--- and then calls `callback`, which must call
--- `g_socket_address_enumerator_next_finish()` to get the result.
--- 
--- It is an error to call this multiple times before the previous callback has finished.
---
--- ---
---
---@param self Gio.SocketAddressEnumerator # a `GSocketAddressEnumerator`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.SocketAddressEnumerator:next_async(cancellable, callback, user_data) end

--- # method Gio.SocketAddressEnumerator:next_finish()
---
--- Retrieves the result of a completed call to
--- `g_socket_address_enumerator_next_async()`. See
--- `g_socket_address_enumerator_next()` for more information about
--- error handling.
---
--- ---
---
---@param self Gio.SocketAddressEnumerator # a `GSocketAddressEnumerator`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return Gio.SocketAddress # a `GSocketAddress` (owned by the caller), or `nil` on error (in which case *`error` will be set) or if there are no more addresses.
function Gio.SocketAddressEnumerator:next_finish(result) end

--- # record Gio.SocketAddressEnumeratorClass
---
--- Class structure for `GSocketAddressEnumerator`.
---
--- ---
---
---@class Gio.SocketAddressEnumeratorClass
---@field parent_class GObject.ObjectClass
---@field next fun(enumerator: Gio.SocketAddressEnumerator, cancellable: Gio.Cancellable): Gio.SocketAddress
---@field next_async fun(enumerator: Gio.SocketAddressEnumerator, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field next_finish fun(enumerator: Gio.SocketAddressEnumerator, result: Gio.AsyncResult): Gio.SocketAddress
Gio.SocketAddressEnumeratorClass = {}

--- # record Gio.SocketClass
---
---@class Gio.SocketClass
---@field parent_class GObject.ObjectClass
Gio.SocketClass = {}

--- # class Gio.SocketClient
---
--- `GSocketClient` is a lightweight high-level utility class for connecting to
--- a network host using a connection oriented socket type.
--- 
--- You create a `GSocketClient` object, set any options you want, and then
--- call a sync or async connect operation, which returns a `GSocketConnection`
--- subclass on success.
--- 
--- The type of the `GSocketConnection` object returned depends on the type of
--- the underlying socket that is in use. For instance, for a TCP/IP connection
--- it will be a `GTcpConnection`.
--- 
--- As `GSocketClient` is a lightweight object, you don't need to cache it. You
--- can just create a new one any time you need one.
---
--- ---
---
---@class Gio.SocketClient : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.SocketClientPrivate
---@operator call: Gio.SocketClient
Gio.SocketClient = {}

--- # method Gio.SocketClient:add_application_proxy()
---
--- Enable proxy protocols to be handled by the application. When the
--- indicated proxy protocol is returned by the `GProxyResolver`,
--- `GSocketClient` will consider this protocol as supported but will
--- not try to find a `GProxy` instance to handle handshaking. The
--- application must check for this case by calling
--- `g_socket_connection_get_remote_address()` on the returned
--- `GSocketConnection`, and seeing if it's a `GProxyAddress` of the
--- appropriate type, to determine whether or not it needs to handle
--- the proxy handshaking itself.
--- 
--- This should be used for proxy protocols that are dialects of
--- another protocol such as HTTP proxy. It also allows cohabitation of
--- proxy protocols that are reused between protocols. A good example
--- is HTTP. It can be used to proxy HTTP, FTP and Gopher and can also
--- be use as generic socket proxy through the HTTP CONNECT method.
--- 
--- When the proxy is detected as being an application proxy, TLS handshake
--- will be skipped. This is required to let the application do the proxy
--- specific handshake.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`
---@param protocol string # The proxy protocol
---@return nil
function Gio.SocketClient:add_application_proxy(protocol) end

--- # method Gio.SocketClient:connect()
---
--- Tries to resolve the `connectable` and make a network connection to it.
--- 
--- Upon a successful connection, a new `GSocketConnection` is constructed
--- and returned.  The caller owns this new object and must drop their
--- reference to it when finished with it.
--- 
--- The type of the `GSocketConnection` object returned depends on the type of
--- the underlying socket that is used. For instance, for a TCP/IP connection
--- it will be a `GTcpConnection`.
--- 
--- The socket created will be the same family as the address that the
--- `connectable` resolves to, unless family is set with `g_socket_client_set_family()`
--- or indirectly via `g_socket_client_set_local_address()`. The socket type
--- defaults to %G_SOCKET_TYPE_STREAM but can be set with
--- `g_socket_client_set_socket_type()`.
--- 
--- If a local address is specified with `g_socket_client_set_local_address()` the
--- socket will be bound to this address before connecting.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@param connectable Gio.SocketConnectable # a `GSocketConnectable` specifying the remote address.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return Gio.SocketConnection # a `GSocketConnection` on success, `nil` on error.
function Gio.SocketClient:connect(connectable, cancellable) end

--- # method Gio.SocketClient:connect_async()
---
--- This is the asynchronous version of `g_socket_client_connect()`.
--- 
--- You may wish to prefer the asynchronous version even in synchronous
--- command line programs because, since 2.60, it implements
--- [RFC 8305](https://tools.ietf.org/html/rfc8305) "Happy Eyeballs"
--- recommendations to work around long connection timeouts in networks
--- where IPv6 is broken by performing an IPv4 connection simultaneously
--- without waiting for IPv6 to time out, which is not supported by the
--- synchronous call. (This is not an API guarantee, and may change in
--- the future.)
--- 
--- When the operation is finished `callback` will be
--- called. You can then call `g_socket_client_connect_finish()` to get
--- the result of the operation.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`
---@param connectable Gio.SocketConnectable # a `GSocketConnectable` specifying the remote address.
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`
---@param user_data? userdata # user data for the callback
---@return nil
function Gio.SocketClient:connect_async(connectable, cancellable, callback, user_data) end

--- # method Gio.SocketClient:connect_finish()
---
--- Finishes an async connect operation. See `g_socket_client_connect_async()`
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return Gio.SocketConnection # a `GSocketConnection` on success, `nil` on error.
function Gio.SocketClient:connect_finish(result) end

--- # method Gio.SocketClient:connect_to_host()
---
--- This is a helper function for `g_socket_client_connect()`.
--- 
--- Attempts to create a TCP connection to the named host.
--- 
--- `host_and_port` may be in any of a number of recognized formats; an IPv6
--- address, an IPv4 address, or a domain name (in which case a DNS
--- lookup is performed).  Quoting with [] is supported for all address
--- types.  A port override may be specified in the usual way with a
--- colon.  Ports may be given as decimal numbers or symbolic names (in
--- which case an /etc/services lookup is performed).
--- 
--- If no port override is given in `host_and_port` then `default_port` will be
--- used as the port number to connect to.
--- 
--- In general, `host_and_port` is expected to be provided by the user (allowing
--- them to give the hostname, and a port override if necessary) and
--- `default_port` is expected to be provided by the application.
--- 
--- In the case that an IP address is given, a single connection
--- attempt is made.  In the case that a name is given, multiple
--- connection attempts may be made, in turn and according to the
--- number of address records in DNS, until a connection succeeds.
--- 
--- Upon a successful connection, a new `GSocketConnection` is constructed
--- and returned.  The caller owns this new object and must drop their
--- reference to it when finished with it.
--- 
--- In the event of any failure (DNS error, service not found, no hosts
--- connectable) `nil` is returned and `error` (if non-`nil`) is set
--- accordingly.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`
---@param host_and_port string # the name and optionally port of the host to connect to
---@param default_port integer # the default port to connect to
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return Gio.SocketConnection # a `GSocketConnection` on success, `nil` on error.
function Gio.SocketClient:connect_to_host(host_and_port, default_port, cancellable) end

--- # method Gio.SocketClient:connect_to_host_async()
---
--- This is the asynchronous version of `g_socket_client_connect_to_host()`.
--- 
--- When the operation is finished `callback` will be
--- called. You can then call `g_socket_client_connect_to_host_finish()` to get
--- the result of the operation.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`
---@param host_and_port string # the name and optionally the port of the host to connect to
---@param default_port integer # the default port to connect to
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`
---@param user_data? userdata # user data for the callback
---@return nil
function Gio.SocketClient:connect_to_host_async(host_and_port, default_port, cancellable, callback, user_data) end

--- # method Gio.SocketClient:connect_to_host_finish()
---
--- Finishes an async connect operation. See `g_socket_client_connect_to_host_async()`
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return Gio.SocketConnection # a `GSocketConnection` on success, `nil` on error.
function Gio.SocketClient:connect_to_host_finish(result) end

--- # method Gio.SocketClient:connect_to_service()
---
--- Attempts to create a TCP connection to a service.
--- 
--- This call looks up the SRV record for `service` at `domain` for the
--- "tcp" protocol.  It then attempts to connect, in turn, to each of
--- the hosts providing the service until either a connection succeeds
--- or there are no hosts remaining.
--- 
--- Upon a successful connection, a new `GSocketConnection` is constructed
--- and returned.  The caller owns this new object and must drop their
--- reference to it when finished with it.
--- 
--- In the event of any failure (DNS error, service not found, no hosts
--- connectable) `nil` is returned and `error` (if non-`nil`) is set
--- accordingly.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketConnection`
---@param domain string # a domain name
---@param service string # the name of the service to connect to
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return Gio.SocketConnection # a `GSocketConnection` if successful, or `nil` on error
function Gio.SocketClient:connect_to_service(domain, service, cancellable) end

--- # method Gio.SocketClient:connect_to_service_async()
---
--- This is the asynchronous version of
--- `g_socket_client_connect_to_service()`.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`
---@param domain string # a domain name
---@param service string # the name of the service to connect to
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`
---@param user_data? userdata # user data for the callback
---@return nil
function Gio.SocketClient:connect_to_service_async(domain, service, cancellable, callback, user_data) end

--- # method Gio.SocketClient:connect_to_service_finish()
---
--- Finishes an async connect operation. See `g_socket_client_connect_to_service_async()`
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return Gio.SocketConnection # a `GSocketConnection` on success, `nil` on error.
function Gio.SocketClient:connect_to_service_finish(result) end

--- # method Gio.SocketClient:connect_to_uri()
---
--- This is a helper function for `g_socket_client_connect()`.
--- 
--- Attempts to create a TCP connection with a network URI.
--- 
--- `uri` may be any valid URI containing an "authority" (hostname/port)
--- component. If a port is not specified in the URI, `default_port`
--- will be used. TLS will be negotiated if `GSocketClient`:tls is `true`.
--- (`GSocketClient` does not know to automatically assume TLS for
--- certain URI schemes.)
--- 
--- Using this rather than `g_socket_client_connect()` or
--- `g_socket_client_connect_to_host()` allows `GSocketClient` to
--- determine when to use application-specific proxy protocols.
--- 
--- Upon a successful connection, a new `GSocketConnection` is constructed
--- and returned.  The caller owns this new object and must drop their
--- reference to it when finished with it.
--- 
--- In the event of any failure (DNS error, service not found, no hosts
--- connectable) `nil` is returned and `error` (if non-`nil`) is set
--- accordingly.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`
---@param uri string # A network URI
---@param default_port integer # the default port to connect to
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return Gio.SocketConnection # a `GSocketConnection` on success, `nil` on error.
function Gio.SocketClient:connect_to_uri(uri, default_port, cancellable) end

--- # method Gio.SocketClient:connect_to_uri_async()
---
--- This is the asynchronous version of `g_socket_client_connect_to_uri()`.
--- 
--- When the operation is finished `callback` will be
--- called. You can then call `g_socket_client_connect_to_uri_finish()` to get
--- the result of the operation.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`
---@param uri string # a network uri
---@param default_port integer # the default port to connect to
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`
---@param user_data? userdata # user data for the callback
---@return nil
function Gio.SocketClient:connect_to_uri_async(uri, default_port, cancellable, callback, user_data) end

--- # method Gio.SocketClient:connect_to_uri_finish()
---
--- Finishes an async connect operation. See `g_socket_client_connect_to_uri_async()`
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return Gio.SocketConnection # a `GSocketConnection` on success, `nil` on error.
function Gio.SocketClient:connect_to_uri_finish(result) end

--- # method Gio.SocketClient:get_enable_proxy()
---
--- Gets the proxy enable state; see `g_socket_client_set_enable_proxy()`
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@return (boolean|nil) # whether proxying is enabled
function Gio.SocketClient:get_enable_proxy() end

--- # method Gio.SocketClient:get_family()
---
--- Gets the socket family of the socket client.
--- 
--- See `g_socket_client_set_family()` for details.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@return Gio.SocketFamily # a `GSocketFamily`
function Gio.SocketClient:get_family() end

--- # method Gio.SocketClient:get_local_address()
---
--- Gets the local address of the socket client.
--- 
--- See `g_socket_client_set_local_address()` for details.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@return Gio.SocketAddress # a `GSocketAddress` or `nil`. Do not free.
function Gio.SocketClient:get_local_address() end

--- # method Gio.SocketClient:get_protocol()
---
--- Gets the protocol name type of the socket client.
--- 
--- See `g_socket_client_set_protocol()` for details.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`
---@return Gio.SocketProtocol # a `GSocketProtocol`
function Gio.SocketClient:get_protocol() end

--- # method Gio.SocketClient:get_proxy_resolver()
---
--- Gets the `GProxyResolver` being used by `client`. Normally, this will
--- be the resolver returned by `g_proxy_resolver_get_default()`, but you
--- can override it with `g_socket_client_set_proxy_resolver()`.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@return Gio.ProxyResolver # The `GProxyResolver` being used by `client`.
function Gio.SocketClient:get_proxy_resolver() end

--- # method Gio.SocketClient:get_socket_type()
---
--- Gets the socket type of the socket client.
--- 
--- See `g_socket_client_set_socket_type()` for details.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@return Gio.SocketType # a `GSocketFamily`
function Gio.SocketClient:get_socket_type() end

--- # method Gio.SocketClient:get_timeout()
---
--- Gets the I/O timeout time for sockets created by `client`.
--- 
--- See `g_socket_client_set_timeout()` for details.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`
---@return integer # the timeout in seconds
function Gio.SocketClient:get_timeout() end

--- # method Gio.SocketClient:get_tls()
---
--- Gets whether `client` creates TLS connections. See
--- `g_socket_client_set_tls()` for details.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@return (boolean|nil) # whether `client` uses TLS
function Gio.SocketClient:get_tls() end

--- # method Gio.SocketClient:get_tls_validation_flags()
---
--- Gets the TLS validation flags used creating TLS connections via
--- `client`.
--- 
--- This function does not work as originally designed and is impossible
--- to use correctly. See `GSocketClient`:tls-validation-flags for more
--- information.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@return Gio.TlsCertificateFlags # the TLS validation flags
function Gio.SocketClient:get_tls_validation_flags() end

--- # method Gio.SocketClient:set_enable_proxy()
---
--- Sets whether or not `client` attempts to make connections via a
--- proxy server. When enabled (the default), `GSocketClient` will use a
--- `GProxyResolver` to determine if a proxy protocol such as SOCKS is
--- needed, and automatically do the necessary proxy negotiation.
--- 
--- See also `g_socket_client_set_proxy_resolver()`.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@param enable (boolean|nil) # whether to enable proxies
---@return nil
function Gio.SocketClient:set_enable_proxy(enable) end

--- # method Gio.SocketClient:set_family()
---
--- Sets the socket family of the socket client.
--- If this is set to something other than %G_SOCKET_FAMILY_INVALID
--- then the sockets created by this object will be of the specified
--- family.
--- 
--- This might be useful for instance if you want to force the local
--- connection to be an ipv4 socket, even though the address might
--- be an ipv6 mapped to ipv4 address.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@param family Gio.SocketFamily # a `GSocketFamily`
---@return nil
function Gio.SocketClient:set_family(family) end

--- # method Gio.SocketClient:set_local_address()
---
--- Sets the local address of the socket client.
--- The sockets created by this object will bound to the
--- specified address (if not `nil`) before connecting.
--- 
--- This is useful if you want to ensure that the local
--- side of the connection is on a specific port, or on
--- a specific interface.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@param address? Gio.SocketAddress # a `GSocketAddress`, or `nil`
---@return nil
function Gio.SocketClient:set_local_address(address) end

--- # method Gio.SocketClient:set_protocol()
---
--- Sets the protocol of the socket client.
--- The sockets created by this object will use of the specified
--- protocol.
--- 
--- If `protocol` is %G_SOCKET_PROTOCOL_DEFAULT that means to use the default
--- protocol for the socket family and type.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@param protocol Gio.SocketProtocol # a `GSocketProtocol`
---@return nil
function Gio.SocketClient:set_protocol(protocol) end

--- # method Gio.SocketClient:set_proxy_resolver()
---
--- Overrides the `GProxyResolver` used by `client`. You can call this if
--- you want to use specific proxies, rather than using the system
--- default proxy settings.
--- 
--- Note that whether or not the proxy resolver is actually used
--- depends on the setting of `GSocketClient`:enable-proxy, which is not
--- changed by this function (but which is `true` by default)
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@param proxy_resolver? Gio.ProxyResolver # a `GProxyResolver`, or `nil` for the default.
---@return nil
function Gio.SocketClient:set_proxy_resolver(proxy_resolver) end

--- # method Gio.SocketClient:set_socket_type()
---
--- Sets the socket type of the socket client.
--- The sockets created by this object will be of the specified
--- type.
--- 
--- It doesn't make sense to specify a type of %G_SOCKET_TYPE_DATAGRAM,
--- as GSocketClient is used for connection oriented services.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@param type Gio.SocketType # a `GSocketType`
---@return nil
function Gio.SocketClient:set_socket_type(type) end

--- # method Gio.SocketClient:set_timeout()
---
--- Sets the I/O timeout for sockets created by `client`. `timeout` is a
--- time in seconds, or 0 for no timeout (the default).
--- 
--- The timeout value affects the initial connection attempt as well,
--- so setting this may cause calls to `g_socket_client_connect()`, etc,
--- to fail with %G_IO_ERROR_TIMED_OUT.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@param timeout integer # the timeout
---@return nil
function Gio.SocketClient:set_timeout(timeout) end

--- # method Gio.SocketClient:set_tls()
---
--- Sets whether `client` creates TLS (aka SSL) connections. If `tls` is
--- `true`, `client` will wrap its connections in a `GTlsClientConnection`
--- and perform a TLS handshake when connecting.
--- 
--- Note that since `GSocketClient` must return a `GSocketConnection`,
--- but `GTlsClientConnection` is not a `GSocketConnection`, this
--- actually wraps the resulting `GTlsClientConnection` in a
--- `GTcpWrapperConnection` when returning it. You can use
--- `g_tcp_wrapper_connection_get_base_io_stream()` on the return value
--- to extract the `GTlsClientConnection`.
--- 
--- If you need to modify the behavior of the TLS handshake (eg, by
--- setting a client-side certificate to use, or connecting to the
--- `GTlsConnection`::accept-certificate signal), you can connect to
--- `client`'s `GSocketClient`::event signal and wait for it to be
--- emitted with %G_SOCKET_CLIENT_TLS_HANDSHAKING, which will give you
--- a chance to see the `GTlsClientConnection` before the handshake
--- starts.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@param tls (boolean|nil) # whether to use TLS
---@return nil
function Gio.SocketClient:set_tls(tls) end

--- # method Gio.SocketClient:set_tls_validation_flags()
---
--- Sets the TLS validation flags used when creating TLS connections
--- via `client`. The default value is %G_TLS_CERTIFICATE_VALIDATE_ALL.
--- 
--- This function does not work as originally designed and is impossible
--- to use correctly. See `GSocketClient`:tls-validation-flags for more
--- information.
---
--- ---
---
---@param self Gio.SocketClient # a `GSocketClient`.
---@param flags Gio.TlsCertificateFlags # the validation flags
---@return nil
function Gio.SocketClient:set_tls_validation_flags(flags) end

--- # function Gio.SocketClient.new()
---
--- Creates a new `GSocketClient` with the default options.
---
--- ---
---
---@return Gio.SocketClient # a `GSocketClient`. Free the returned object with `g_object_unref()`.
function Gio.SocketClient.new() end

--- # record Gio.SocketClientClass
---
---@class Gio.SocketClientClass
---@field parent_class GObject.ObjectClass
---@field event fun(client: Gio.SocketClient, event: Gio.SocketClientEvent, connectable: Gio.SocketConnectable, connection: Gio.IOStream): nil
Gio.SocketClientClass = {}

---@enum Gio.SocketClientEvent
Gio.SocketClientEvent = {}

--- # record Gio.SocketClientPrivate
---
---@class Gio.SocketClientPrivate
Gio.SocketClientPrivate = {}

--- # interface Gio.SocketConnectable
---
--- Objects that describe one or more potential socket endpoints
--- implement `GSocketConnectable`. Callers can then use
--- `g_socket_connectable_enumerate()` to get a `GSocketAddressEnumerator`
--- to try out each socket address in turn until one succeeds, as shown
--- in the sample code below.
--- 
--- ```c
--- MyConnectionType *
--- connect_to_host (const char    *hostname,
---                  guint16        port,
---                  GCancellable  *cancellable,
---                  GError       **error)
--- {
---   MyConnection *conn = NULL;
---   GSocketConnectable *addr;
---   GSocketAddressEnumerator *enumerator;
---   GSocketAddress *sockaddr;
---   GError *conn_error = NULL;
--- 
---   addr = g_network_address_new (hostname, port);
---   enumerator = g_socket_connectable_enumerate (addr);
---   g_object_unref (addr);
--- 
---   // Try each sockaddr until we succeed. Record the first connection error,
---   // but not any further ones (since they'll probably be basically the same
---   // as the first).
---   while (!conn && (sockaddr = g_socket_address_enumerator_next (enumerator, cancellable, error))
---     {
---       conn = connect_to_sockaddr (sockaddr, conn_error ? NULL : &conn_error);
---       g_object_unref (sockaddr);
---     }
---   g_object_unref (enumerator);
--- 
---   if (conn)
---     {
---       if (conn_error)
---         {
---           // We couldn't connect to the first address, but we succeeded
---           // in connecting to a later address.
---           g_error_free (conn_error);
---         }
---       return conn;
---     }
---   else if (error)
---     {
---       /// Either initial lookup failed, or else the caller cancelled us.
---       if (conn_error)
---         g_error_free (conn_error);
---       return NULL;
---     }
---   else
---     {
---       g_error_propagate (error, conn_error);
---       return NULL;
---     }
--- }
--- ```
---
--- ---
---
---@class Gio.SocketConnectable
Gio.SocketConnectable = {}

--- # method Gio.SocketConnectable:enumerate()
---
--- Creates a `GSocketAddressEnumerator` for `connectable`.
---
--- ---
---
---@param self Gio.SocketConnectable # a `GSocketConnectable`
---@return Gio.SocketAddressEnumerator # a new `GSocketAddressEnumerator`.
function Gio.SocketConnectable:enumerate() end

--- # method Gio.SocketConnectable:proxy_enumerate()
---
--- Creates a `GSocketAddressEnumerator` for `connectable` that will
--- return a `GProxyAddress` for each of its addresses that you must connect
--- to via a proxy.
--- 
--- If `connectable` does not implement
--- `g_socket_connectable_proxy_enumerate()`, this will fall back to
--- calling `g_socket_connectable_enumerate()`.
---
--- ---
---
---@param self Gio.SocketConnectable # a `GSocketConnectable`
---@return Gio.SocketAddressEnumerator # a new `GSocketAddressEnumerator`.
function Gio.SocketConnectable:proxy_enumerate() end

--- # method Gio.SocketConnectable:to_string()
---
--- Format a `GSocketConnectable` as a string. This is a human-readable format for
--- use in debugging output, and is not a stable serialization format. It is not
--- suitable for use in user interfaces as it exposes too much information for a
--- user.
--- 
--- If the `GSocketConnectable` implementation does not support string formatting,
--- the implementation’s type name will be returned as a fallback.
---
--- ---
---
---@param self Gio.SocketConnectable # a `GSocketConnectable`
---@return string # the formatted string
function Gio.SocketConnectable:to_string() end

--- # record Gio.SocketConnectableIface
---
--- Provides an interface for returning a `GSocketAddressEnumerator`
--- and `GProxyAddressEnumerator`
---
--- ---
---
---@class Gio.SocketConnectableIface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field enumerate fun(connectable: Gio.SocketConnectable): Gio.SocketAddressEnumerator
---@field proxy_enumerate fun(connectable: Gio.SocketConnectable): Gio.SocketAddressEnumerator
---@field to_string fun(connectable: Gio.SocketConnectable): string
Gio.SocketConnectableIface = {}

--- # class Gio.SocketConnection
---
--- `GSocketConnection` is a `GIOStream` for a connected socket. They
--- can be created either by `GSocketClient` when connecting to a host,
--- or by `GSocketListener` when accepting a new client.
--- 
--- The type of the `GSocketConnection` object returned from these calls
--- depends on the type of the underlying socket that is in use. For
--- instance, for a TCP/IP connection it will be a `GTcpConnection`.
--- 
--- Choosing what type of object to construct is done with the socket
--- connection factory, and it is possible for 3rd parties to register
--- custom socket connection types for specific combination of socket
--- family/type/protocol using `g_socket_connection_factory_register_type()`.
--- 
--- To close a `GSocketConnection`, use `g_io_stream_close()`. Closing both
--- substreams of the `GIOStream` separately will not close the underlying
--- `GSocket`.
---
--- ---
---
---@class Gio.SocketConnection : Gio.IOStream
---@field parent_instance Gio.IOStream
---@field priv Gio.SocketConnectionPrivate
Gio.SocketConnection = {}

--- # method Gio.SocketConnection:connect()
---
--- Connect `connection` to the specified remote address.
---
--- ---
---
---@param self Gio.SocketConnection # a `GSocketConnection`
---@param address Gio.SocketAddress # a `GSocketAddress` specifying the remote address.
---@param cancellable? Gio.Cancellable # a %GCancellable or `nil`
---@return (boolean|nil) # `true` if the connection succeeded, `false` on error
function Gio.SocketConnection:connect(address, cancellable) end

--- # method Gio.SocketConnection:connect_async()
---
--- Asynchronously connect `connection` to the specified remote address.
--- 
--- This clears the `GSocket`:blocking flag on `connection`'s underlying
--- socket if it is currently set.
--- 
--- Use `g_socket_connection_connect_finish()` to retrieve the result.
---
--- ---
---
---@param self Gio.SocketConnection # a `GSocketConnection`
---@param address Gio.SocketAddress # a `GSocketAddress` specifying the remote address.
---@param cancellable? Gio.Cancellable # a %GCancellable or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`
---@param user_data? userdata # user data for the callback
---@return nil
function Gio.SocketConnection:connect_async(address, cancellable, callback, user_data) end

--- # method Gio.SocketConnection:connect_finish()
---
--- Gets the result of a `g_socket_connection_connect_async()` call.
---
--- ---
---
---@param self Gio.SocketConnection # a `GSocketConnection`
---@param result Gio.AsyncResult # the `GAsyncResult`
---@return (boolean|nil) # `true` if the connection succeeded, `false` on error
function Gio.SocketConnection:connect_finish(result) end

--- # method Gio.SocketConnection:get_local_address()
---
--- Try to get the local address of a socket connection.
---
--- ---
---
---@param self Gio.SocketConnection # a `GSocketConnection`
---@return Gio.SocketAddress # a `GSocketAddress` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.SocketConnection:get_local_address() end

--- # method Gio.SocketConnection:get_remote_address()
---
--- Try to get the remote address of a socket connection.
--- 
--- Since GLib 2.40, when used with `g_socket_client_connect()` or
--- `g_socket_client_connect_async()`, during emission of
--- %G_SOCKET_CLIENT_CONNECTING, this function will return the remote
--- address that will be used for the connection.  This allows
--- applications to print e.g. "Connecting to example.com
--- (10.42.77.3)...".
---
--- ---
---
---@param self Gio.SocketConnection # a `GSocketConnection`
---@return Gio.SocketAddress # a `GSocketAddress` or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.SocketConnection:get_remote_address() end

--- # method Gio.SocketConnection:get_socket()
---
--- Gets the underlying `GSocket` object of the connection.
--- This can be useful if you want to do something unusual on it
--- not supported by the `GSocketConnection` APIs.
---
--- ---
---
---@param self Gio.SocketConnection # a `GSocketConnection`
---@return Gio.Socket # a `GSocket` or `nil` on error.
function Gio.SocketConnection:get_socket() end

--- # method Gio.SocketConnection:is_connected()
---
--- Checks if `connection` is connected. This is equivalent to calling
--- `g_socket_is_connected()` on `connection`'s underlying `GSocket`.
---
--- ---
---
---@param self Gio.SocketConnection # a `GSocketConnection`
---@return (boolean|nil) # whether `connection` is connected
function Gio.SocketConnection:is_connected() end

--- # function Gio.SocketConnection.factory_lookup_type()
---
--- Looks up the `GType` to be used when creating socket connections on
--- sockets with the specified `family`, `type` and `protocol_id`.
--- 
--- If no type is registered, the `GSocketConnection` base type is returned.
---
--- ---
---
---@param family Gio.SocketFamily # a `GSocketFamily`
---@param type Gio.SocketType # a `GSocketType`
---@param protocol_id integer # a protocol id
---@return Gio.GType # a `GType`
function Gio.SocketConnection.factory_lookup_type(family, type, protocol_id) end

--- # function Gio.SocketConnection.factory_register_type()
---
--- Looks up the `GType` to be used when creating socket connections on
--- sockets with the specified `family`, `type` and `protocol`.
--- 
--- If no type is registered, the `GSocketConnection` base type is returned.
---
--- ---
---
---@param g_type Gio.GType # a `GType`, inheriting from %G_TYPE_SOCKET_CONNECTION
---@param family Gio.SocketFamily # a `GSocketFamily`
---@param type Gio.SocketType # a `GSocketType`
---@param protocol integer # a protocol id
---@return nil
function Gio.SocketConnection.factory_register_type(g_type, family, type, protocol) end

--- # record Gio.SocketConnectionClass
---
---@class Gio.SocketConnectionClass
---@field parent_class Gio.IOStreamClass
Gio.SocketConnectionClass = {}

--- # record Gio.SocketConnectionPrivate
---
---@class Gio.SocketConnectionPrivate
Gio.SocketConnectionPrivate = {}

--- # class Gio.SocketControlMessage
---
--- A `GSocketControlMessage` is a special-purpose utility message that
--- can be sent to or received from a `GSocket`. These types of
--- messages are often called "ancillary data".
--- 
--- The message can represent some sort of special instruction to or
--- information from the socket or can represent a special kind of
--- transfer to the peer (for example, sending a file descriptor over
--- a UNIX socket).
--- 
--- These messages are sent with `g_socket_send_message()` and received
--- with `g_socket_receive_message()`.
--- 
--- To extend the set of control message that can be sent, subclass this
--- class and override the get_size, get_level, get_type and serialize
--- methods.
--- 
--- To extend the set of control messages that can be received, subclass
--- this class and implement the deserialize method. Also, make sure your
--- class is registered with the GType typesystem before calling
--- `g_socket_receive_message()` to read such a message.
---
--- ---
---
---@class Gio.SocketControlMessage : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.SocketControlMessagePrivate
Gio.SocketControlMessage = {}

--- # method Gio.SocketControlMessage:get_level()
---
--- Returns the "level" (i.e. the originating protocol) of the control message.
--- This is often SOL_SOCKET.
---
--- ---
---
---@param self Gio.SocketControlMessage # a `GSocketControlMessage`
---@return integer # an integer describing the level
function Gio.SocketControlMessage:get_level() end

--- # method Gio.SocketControlMessage:get_msg_type()
---
--- Returns the protocol specific type of the control message.
--- For instance, for UNIX fd passing this would be SCM_RIGHTS.
---
--- ---
---
---@param self Gio.SocketControlMessage # a `GSocketControlMessage`
---@return integer # an integer describing the type of control message
function Gio.SocketControlMessage:get_msg_type() end

--- # method Gio.SocketControlMessage:get_size()
---
--- Returns the space required for the control message, not including
--- headers or alignment.
---
--- ---
---
---@param self Gio.SocketControlMessage # a `GSocketControlMessage`
---@return integer # The number of bytes required.
function Gio.SocketControlMessage:get_size() end

--- # method Gio.SocketControlMessage:serialize()
---
--- Converts the data in the message to bytes placed in the
--- message.
--- 
--- `data` is guaranteed to have enough space to fit the size
--- returned by `g_socket_control_message_get_size()` on this
--- object.
---
--- ---
---
---@param self Gio.SocketControlMessage # a `GSocketControlMessage`
---@param data userdata # A buffer to write data to
---@return nil
function Gio.SocketControlMessage:serialize(data) end

--- # function Gio.SocketControlMessage.deserialize()
---
--- Tries to deserialize a socket control message of a given
--- `level` and `type`. This will ask all known (to GType) subclasses
--- of `GSocketControlMessage` if they can understand this kind
--- of message and if so deserialize it into a `GSocketControlMessage`.
--- 
--- If there is no implementation for this kind of control message, `nil`
--- will be returned.
---
--- ---
---
---@param level integer # a socket level
---@param type integer # a socket control message type for the given `level`
---@param size integer # the size of the data in bytes
---@param data unknown[] # pointer to the message data
---@return Gio.SocketControlMessage # the deserialized message or `nil`
function Gio.SocketControlMessage.deserialize(level, type, size, data) end

--- # record Gio.SocketControlMessageClass
---
--- Class structure for `GSocketControlMessage`.
---
--- ---
---
---@class Gio.SocketControlMessageClass
---@field parent_class GObject.ObjectClass
---@field get_size fun(message: Gio.SocketControlMessage): integer
---@field get_level fun(message: Gio.SocketControlMessage): integer
---@field get_type fun(message: Gio.SocketControlMessage): integer
---@field serialize fun(message: Gio.SocketControlMessage, data: userdata): nil
Gio.SocketControlMessageClass = {}

--- # record Gio.SocketControlMessagePrivate
---
---@class Gio.SocketControlMessagePrivate
Gio.SocketControlMessagePrivate = {}

---@enum Gio.SocketFamily
Gio.SocketFamily = {}

--- # class Gio.SocketListener
---
--- A `GSocketListener` is an object that keeps track of a set
--- of server sockets and helps you accept sockets from any of the
--- socket, either sync or async.
--- 
--- Add addresses and ports to listen on using `g_socket_listener_add_address()`
--- and `g_socket_listener_add_inet_port()`. These will be listened on until
--- `g_socket_listener_close()` is called. Dropping your final reference to the
--- `GSocketListener` will not cause `g_socket_listener_close()` to be called
--- implicitly, as some references to the `GSocketListener` may be held
--- internally.
--- 
--- If you want to implement a network server, also look at `GSocketService`
--- and `GThreadedSocketService` which are subclasses of `GSocketListener`
--- that make this even easier.
---
--- ---
---
---@class Gio.SocketListener : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.SocketListenerPrivate
---@operator call: Gio.SocketListener
Gio.SocketListener = {}

--- # method Gio.SocketListener:accept()
---
--- Blocks waiting for a client to connect to any of the sockets added
--- to the listener. Returns a `GSocketConnection` for the socket that was
--- accepted.
--- 
--- If `source_object` is not `nil` it will be filled out with the source
--- object specified when the corresponding socket or address was added
--- to the listener.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.SocketListener # a `GSocketListener`
---@param source_object? GObject.Object # location where `GObject` pointer will be stored, or `nil`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return Gio.SocketConnection # a `GSocketConnection` on success, `nil` on error.
function Gio.SocketListener:accept(source_object, cancellable) end

--- # method Gio.SocketListener:accept_async()
---
--- This is the asynchronous version of `g_socket_listener_accept()`.
--- 
--- When the operation is finished `callback` will be
--- called. You can then call `g_socket_listener_accept_finish()`
--- to get the result of the operation.
---
--- ---
---
---@param self Gio.SocketListener # a `GSocketListener`
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`
---@param user_data? userdata # user data for the callback
---@return nil
function Gio.SocketListener:accept_async(cancellable, callback, user_data) end

--- # method Gio.SocketListener:accept_finish()
---
--- Finishes an async accept operation. See `g_socket_listener_accept_async()`
---
--- ---
---
---@param self Gio.SocketListener # a `GSocketListener`
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@param source_object? GObject.Object # Optional `GObject` identifying this source
---@return Gio.SocketConnection # a `GSocketConnection` on success, `nil` on error.
function Gio.SocketListener:accept_finish(result, source_object) end

--- # method Gio.SocketListener:accept_socket()
---
--- Blocks waiting for a client to connect to any of the sockets added
--- to the listener. Returns the `GSocket` that was accepted.
--- 
--- If you want to accept the high-level `GSocketConnection`, not a `GSocket`,
--- which is often the case, then you should use `g_socket_listener_accept()`
--- instead.
--- 
--- If `source_object` is not `nil` it will be filled out with the source
--- object specified when the corresponding socket or address was added
--- to the listener.
--- 
--- If `cancellable` is not `nil`, then the operation can be cancelled by
--- triggering the cancellable object from another thread. If the operation
--- was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
---
--- ---
---
---@param self Gio.SocketListener # a `GSocketListener`
---@param source_object? GObject.Object # location where `GObject` pointer will be stored, or `nil`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return Gio.Socket # a `GSocket` on success, `nil` on error.
function Gio.SocketListener:accept_socket(source_object, cancellable) end

--- # method Gio.SocketListener:accept_socket_async()
---
--- This is the asynchronous version of `g_socket_listener_accept_socket()`.
--- 
--- When the operation is finished `callback` will be
--- called. You can then call `g_socket_listener_accept_socket_finish()`
--- to get the result of the operation.
---
--- ---
---
---@param self Gio.SocketListener # a `GSocketListener`
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`
---@param user_data? userdata # user data for the callback
---@return nil
function Gio.SocketListener:accept_socket_async(cancellable, callback, user_data) end

--- # method Gio.SocketListener:accept_socket_finish()
---
--- Finishes an async accept operation. See `g_socket_listener_accept_socket_async()`
---
--- ---
---
---@param self Gio.SocketListener # a `GSocketListener`
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@param source_object? GObject.Object # Optional `GObject` identifying this source
---@return Gio.Socket # a `GSocket` on success, `nil` on error.
function Gio.SocketListener:accept_socket_finish(result, source_object) end

--- # method Gio.SocketListener:add_address()
---
--- Creates a socket of type `type` and protocol `protocol`, binds
--- it to `address` and adds it to the set of sockets we're accepting
--- sockets from.
--- 
--- Note that adding an IPv6 address, depending on the platform,
--- may or may not result in a listener that also accepts IPv4
--- connections.  For more deterministic behavior, see
--- `g_socket_listener_add_inet_port()`.
--- 
--- `source_object` will be passed out in the various calls
--- to accept to identify this particular source, which is
--- useful if you're listening on multiple addresses and do
--- different things depending on what address is connected to.
--- 
--- If successful and `effective_address` is non-`nil` then it will
--- be set to the address that the binding actually occurred at.  This
--- is helpful for determining the port number that was used for when
--- requesting a binding to port 0 (ie: "any port").  This address, if
--- requested, belongs to the caller and must be freed.
--- 
--- Call `g_socket_listener_close()` to stop listening on `address`; this will not
--- be done automatically when you drop your final reference to `listener`, as
--- references may be held internally.
---
--- ---
---
---@param self Gio.SocketListener # a `GSocketListener`
---@param address Gio.SocketAddress # a `GSocketAddress`
---@param type Gio.SocketType # a `GSocketType`
---@param protocol Gio.SocketProtocol # a `GSocketProtocol`
---@param source_object? GObject.Object # Optional `GObject` identifying this source
---@param effective_address? Gio.SocketAddress # location to store the address that was bound to, or `nil`.
---@return (boolean|nil) # `true` on success, `false` on error.
function Gio.SocketListener:add_address(address, type, protocol, source_object, effective_address) end

--- # method Gio.SocketListener:add_any_inet_port()
---
--- Listens for TCP connections on any available port number for both
--- IPv6 and IPv4 (if each is available).
--- 
--- This is useful if you need to have a socket for incoming connections
--- but don't care about the specific port number.
--- 
--- `source_object` will be passed out in the various calls
--- to accept to identify this particular source, which is
--- useful if you're listening on multiple addresses and do
--- different things depending on what address is connected to.
---
--- ---
---
---@param self Gio.SocketListener # a `GSocketListener`
---@param source_object? GObject.Object # Optional `GObject` identifying this source
---@return integer # the port number, or 0 in case of failure.
function Gio.SocketListener:add_any_inet_port(source_object) end

--- # method Gio.SocketListener:add_inet_port()
---
--- Helper function for `g_socket_listener_add_address()` that
--- creates a TCP/IP socket listening on IPv4 and IPv6 (if
--- supported) on the specified port on all interfaces.
--- 
--- `source_object` will be passed out in the various calls
--- to accept to identify this particular source, which is
--- useful if you're listening on multiple addresses and do
--- different things depending on what address is connected to.
--- 
--- Call `g_socket_listener_close()` to stop listening on `port`; this will not
--- be done automatically when you drop your final reference to `listener`, as
--- references may be held internally.
---
--- ---
---
---@param self Gio.SocketListener # a `GSocketListener`
---@param port integer # an IP port number (non-zero)
---@param source_object? GObject.Object # Optional `GObject` identifying this source
---@return (boolean|nil) # `true` on success, `false` on error.
function Gio.SocketListener:add_inet_port(port, source_object) end

--- # method Gio.SocketListener:add_socket()
---
--- Adds `socket` to the set of sockets that we try to accept
--- new clients from. The socket must be bound to a local
--- address and listened to.
--- 
--- `source_object` will be passed out in the various calls
--- to accept to identify this particular source, which is
--- useful if you're listening on multiple addresses and do
--- different things depending on what address is connected to.
--- 
--- The `socket` will not be automatically closed when the `listener` is finalized
--- unless the listener held the final reference to the socket. Before GLib 2.42,
--- the `socket` was automatically closed on finalization of the `listener`, even
--- if references to it were held elsewhere.
---
--- ---
---
---@param self Gio.SocketListener # a `GSocketListener`
---@param socket Gio.Socket # a listening `GSocket`
---@param source_object? GObject.Object # Optional `GObject` identifying this source
---@return (boolean|nil) # `true` on success, `false` on error.
function Gio.SocketListener:add_socket(socket, source_object) end

--- # method Gio.SocketListener:close()
---
--- Closes all the sockets in the listener.
---
--- ---
---
---@param self Gio.SocketListener # a `GSocketListener`
---@return nil
function Gio.SocketListener:close() end

--- # method Gio.SocketListener:set_backlog()
---
--- Sets the listen backlog on the sockets in the listener. This must be called
--- before adding any sockets, addresses or ports to the `GSocketListener` (for
--- example, by calling `g_socket_listener_add_inet_port()`) to be effective.
--- 
--- See `g_socket_set_listen_backlog()` for details
---
--- ---
---
---@param self Gio.SocketListener # a `GSocketListener`
---@param listen_backlog integer # an integer
---@return nil
function Gio.SocketListener:set_backlog(listen_backlog) end

--- # function Gio.SocketListener.new()
---
--- Creates a new `GSocketListener` with no sockets to listen for.
--- New listeners can be added with e.g. `g_socket_listener_add_address()`
--- or `g_socket_listener_add_inet_port()`.
---
--- ---
---
---@return Gio.SocketListener # a new `GSocketListener`.
function Gio.SocketListener.new() end

--- # record Gio.SocketListenerClass
---
--- Class structure for `GSocketListener`.
---
--- ---
---
---@class Gio.SocketListenerClass
---@field parent_class GObject.ObjectClass
---@field changed fun(listener: Gio.SocketListener): nil
---@field event fun(listener: Gio.SocketListener, event: Gio.SocketListenerEvent, socket: Gio.Socket): nil
Gio.SocketListenerClass = {}

---@enum Gio.SocketListenerEvent
Gio.SocketListenerEvent = {}

--- # record Gio.SocketListenerPrivate
---
---@class Gio.SocketListenerPrivate
Gio.SocketListenerPrivate = {}

---@enum Gio.SocketMsgFlags
Gio.SocketMsgFlags = {}

--- # record Gio.SocketPrivate
---
---@class Gio.SocketPrivate
Gio.SocketPrivate = {}

---@enum Gio.SocketProtocol
Gio.SocketProtocol = {}

--- # class Gio.SocketService
---
--- A `GSocketService` is an object that represents a service that
--- is provided to the network or over local sockets.  When a new
--- connection is made to the service the `GSocketService`::incoming
--- signal is emitted.
--- 
--- A `GSocketService` is a subclass of `GSocketListener` and you need
--- to add the addresses you want to accept connections on with the
--- `GSocketListener` APIs.
--- 
--- There are two options for implementing a network service based on
--- `GSocketService`. The first is to create the service using
--- `g_socket_service_new()` and to connect to the `GSocketService`::incoming
--- signal. The second is to subclass `GSocketService` and override the
--- default signal handler implementation.
--- 
--- In either case, the handler must immediately return, or else it
--- will block additional incoming connections from being serviced.
--- If you are interested in writing connection handlers that contain
--- blocking code then see `GThreadedSocketService`.
--- 
--- The socket service runs on the main loop of the
--- [thread-default context][g-main-context-push-thread-default-context]
--- of the thread it is created in, and is not
--- threadsafe in general. However, the calls to start and stop the
--- service are thread-safe so these can be used from threads that
--- handle incoming clients.
---
--- ---
---
---@class Gio.SocketService : Gio.SocketListener
---@field parent_instance Gio.SocketListener
---@field priv Gio.SocketServicePrivate
---@operator call: Gio.SocketService
Gio.SocketService = {}

--- # method Gio.SocketService:is_active()
---
--- Check whether the service is active or not. An active
--- service will accept new clients that connect, while
--- a non-active service will let connecting clients queue
--- up until the service is started.
---
--- ---
---
---@param self Gio.SocketService # a `GSocketService`
---@return (boolean|nil) # `true` if the service is active, `false` otherwise
function Gio.SocketService:is_active() end

--- # method Gio.SocketService:start()
---
--- Restarts the service, i.e. start accepting connections
--- from the added sockets when the mainloop runs. This only needs
--- to be called after the service has been stopped from
--- `g_socket_service_stop()`.
--- 
--- This call is thread-safe, so it may be called from a thread
--- handling an incoming client request.
---
--- ---
---
---@param self Gio.SocketService # a `GSocketService`
---@return nil
function Gio.SocketService:start() end

--- # method Gio.SocketService:stop()
---
--- Stops the service, i.e. stops accepting connections
--- from the added sockets when the mainloop runs.
--- 
--- This call is thread-safe, so it may be called from a thread
--- handling an incoming client request.
--- 
--- Note that this only stops accepting new connections; it does not
--- close the listening sockets, and you can call
--- `g_socket_service_start()` again later to begin listening again. To
--- close the listening sockets, call `g_socket_listener_close()`. (This
--- will happen automatically when the `GSocketService` is finalized.)
--- 
--- This must be called before calling `g_socket_listener_close()` as
--- the socket service will start accepting connections immediately
--- when a new socket is added.
---
--- ---
---
---@param self Gio.SocketService # a `GSocketService`
---@return nil
function Gio.SocketService:stop() end

--- # function Gio.SocketService.new()
---
--- Creates a new `GSocketService` with no sockets to listen for.
--- New listeners can be added with e.g. `g_socket_listener_add_address()`
--- or `g_socket_listener_add_inet_port()`.
--- 
--- New services are created active, there is no need to call
--- `g_socket_service_start()`, unless `g_socket_service_stop()` has been
--- called before.
---
--- ---
---
---@return Gio.SocketService # a new `GSocketService`.
function Gio.SocketService.new() end

--- # record Gio.SocketServiceClass
---
--- Class structure for `GSocketService`.
---
--- ---
---
---@class Gio.SocketServiceClass
---@field parent_class Gio.SocketListenerClass
---@field incoming fun(service: Gio.SocketService, connection: Gio.SocketConnection, source_object: GObject.Object): (boolean|nil)
Gio.SocketServiceClass = {}

--- # record Gio.SocketServicePrivate
---
---@class Gio.SocketServicePrivate
Gio.SocketServicePrivate = {}

---@alias Gio.SocketSourceFunc fun(socket: Gio.Socket, condition: GLib.IOCondition, data: userdata): (boolean|nil)

---@enum Gio.SocketType
Gio.SocketType = {}

--- # record Gio.SrvTarget
---
--- SRV (service) records are used by some network protocols to provide
--- service-specific aliasing and load-balancing. For example, XMPP
--- (Jabber) uses SRV records to locate the XMPP server for a domain;
--- rather than connecting directly to "example.com" or assuming a
--- specific server hostname like "xmpp.example.com", an XMPP client
--- would look up the "xmpp-client" SRV record for "example.com", and
--- then connect to whatever host was pointed to by that record.
--- 
--- You can use `g_resolver_lookup_service()` or
--- `g_resolver_lookup_service_async()` to find the `GSrvTargets`
--- for a given service. However, if you are simply planning to connect
--- to the remote service, you can use `GNetworkService`'s
--- `GSocketConnectable` interface and not need to worry about
--- `GSrvTarget` at all.
---
--- ---
---
---@class Gio.SrvTarget
---@operator call: Gio.SrvTarget
Gio.SrvTarget = {}

--- # method Gio.SrvTarget:copy()
---
--- Copies `target`
---
--- ---
---
---@param self Gio.SrvTarget # a `GSrvTarget`
---@return Gio.SrvTarget # a copy of `target`
function Gio.SrvTarget:copy() end

--- # method Gio.SrvTarget:free()
---
--- Frees `target`
---
--- ---
---
---@param self Gio.SrvTarget # a `GSrvTarget`
---@return nil
function Gio.SrvTarget:free() end

--- # method Gio.SrvTarget:get_hostname()
---
--- Gets `target`'s hostname (in ASCII form; if you are going to present
--- this to the user, you should use `g_hostname_is_ascii_encoded()` to
--- check if it contains encoded Unicode segments, and use
--- `g_hostname_to_unicode()` to convert it if it does.)
---
--- ---
---
---@param self Gio.SrvTarget # a `GSrvTarget`
---@return string # `target`'s hostname
function Gio.SrvTarget:get_hostname() end

--- # method Gio.SrvTarget:get_port()
---
--- Gets `target`'s port
---
--- ---
---
---@param self Gio.SrvTarget # a `GSrvTarget`
---@return integer # `target`'s port
function Gio.SrvTarget:get_port() end

--- # method Gio.SrvTarget:get_priority()
---
--- Gets `target`'s priority. You should not need to look at this;
--- `GResolver` already sorts the targets according to the algorithm in
--- RFC 2782.
---
--- ---
---
---@param self Gio.SrvTarget # a `GSrvTarget`
---@return integer # `target`'s priority
function Gio.SrvTarget:get_priority() end

--- # method Gio.SrvTarget:get_weight()
---
--- Gets `target`'s weight. You should not need to look at this;
--- `GResolver` already sorts the targets according to the algorithm in
--- RFC 2782.
---
--- ---
---
---@param self Gio.SrvTarget # a `GSrvTarget`
---@return integer # `target`'s weight
function Gio.SrvTarget:get_weight() end

--- # function Gio.SrvTarget.new()
---
--- Creates a new `GSrvTarget` with the given parameters.
--- 
--- You should not need to use this; normally `GSrvTargets` are
--- created by `GResolver`.
---
--- ---
---
---@param hostname string # the host that the service is running on
---@param port integer # the port that the service is running on
---@param priority integer # the target's priority
---@param weight integer # the target's weight
---@return Gio.SrvTarget # a new `GSrvTarget`.
function Gio.SrvTarget.new(hostname, port, priority, weight) end

--- # record Gio.StaticResource
---
--- `GStaticResource` is an opaque data structure and can only be accessed
--- using the following functions.
---
--- ---
---
---@class Gio.StaticResource
---@field data integer
---@field data_len integer
---@field resource Gio.Resource
---@field next Gio.StaticResource
---@field padding userdata
Gio.StaticResource = {}

--- # method Gio.StaticResource:fini()
---
--- Finalized a GResource initialized by `g_static_resource_init()`.
--- 
--- This is normally used by code generated by
--- [glib-compile-resources][glib-compile-resources]
--- and is not typically used by other code.
---
--- ---
---
---@param self Gio.StaticResource # pointer to a static `GStaticResource`
---@return nil
function Gio.StaticResource:fini() end

--- # method Gio.StaticResource:get_resource()
---
--- Gets the GResource that was registered by a call to `g_static_resource_init()`.
--- 
--- This is normally used by code generated by
--- [glib-compile-resources][glib-compile-resources]
--- and is not typically used by other code.
---
--- ---
---
---@param self Gio.StaticResource # pointer to a static `GStaticResource`
---@return Gio.Resource # a `GResource`
function Gio.StaticResource:get_resource() end

--- # method Gio.StaticResource:init()
---
--- Initializes a GResource from static data using a
--- GStaticResource.
--- 
--- This is normally used by code generated by
--- [glib-compile-resources][glib-compile-resources]
--- and is not typically used by other code.
---
--- ---
---
---@param self Gio.StaticResource # pointer to a static `GStaticResource`
---@return nil
function Gio.StaticResource:init() end

--- # class Gio.Subprocess
---
--- `GSubprocess` allows the creation of and interaction with child
--- processes.
--- 
--- Processes can be communicated with using standard GIO-style APIs (ie:
--- `GInputStream`, `GOutputStream`).  There are GIO-style APIs to wait for
--- process termination (ie: cancellable and with an asynchronous
--- variant).
--- 
--- There is an API to force a process to terminate, as well as a
--- race-free API for sending UNIX signals to a subprocess.
--- 
--- One major advantage that GIO brings over the core GLib library is
--- comprehensive API for asynchronous I/O, such
--- `g_output_stream_splice_async()`.  This makes GSubprocess
--- significantly more powerful and flexible than equivalent APIs in
--- some other languages such as the `subprocess.py`
--- included with Python.  For example, using `GSubprocess` one could
--- create two child processes, reading standard output from the first,
--- processing it, and writing to the input stream of the second, all
--- without blocking the main loop.
--- 
--- A powerful `g_subprocess_communicate()` API is provided similar to the
--- ``communicate()`` method of `subprocess.py`. This enables very easy
--- interaction with a subprocess that has been opened with pipes.
--- 
--- `GSubprocess` defaults to tight control over the file descriptors open
--- in the child process, avoiding dangling-fd issues that are caused by
--- a simple `fork()`/`exec()`.  The only open file descriptors in the
--- spawned process are ones that were explicitly specified by the
--- `GSubprocess` API (unless %G_SUBPROCESS_FLAGS_INHERIT_FDS was
--- specified).
--- 
--- `GSubprocess` will quickly reap all child processes as they exit,
--- avoiding "zombie processes" remaining around for long periods of
--- time.  `g_subprocess_wait()` can be used to wait for this to happen,
--- but it will happen even without the call being explicitly made.
--- 
--- As a matter of principle, `GSubprocess` has no API that accepts
--- shell-style space-separated strings.  It will, however, match the
--- typical shell behaviour of searching the PATH for executables that do
--- not contain a directory separator in their name. By default, the `PATH`
--- of the current process is used.  You can specify
--- %G_SUBPROCESS_FLAGS_SEARCH_PATH_FROM_ENVP to use the `PATH` of the
--- launcher environment instead.
--- 
--- `GSubprocess` attempts to have a very simple API for most uses (ie:
--- spawning a subprocess with arguments and support for most typical
--- kinds of input and output redirection).  See `g_subprocess_new()`. The
--- `GSubprocessLauncher` API is provided for more complicated cases
--- (advanced types of redirection, environment variable manipulation,
--- change of working directory, child setup functions, etc).
--- 
--- A typical use of `GSubprocess` will involve calling
--- `g_subprocess_new()`, followed by `g_subprocess_wait_async()` or
--- `g_subprocess_wait()`.  After the process exits, the status can be
--- checked using functions such as `g_subprocess_get_if_exited()` (which
--- are similar to the familiar WIFEXITED-style POSIX macros).
---
--- ---
---
---@class Gio.Subprocess : GObject.Object, Gio.Initable
---@operator call: Gio.Subprocess
Gio.Subprocess = {}

--- # method Gio.Subprocess:communicate()
---
--- Communicate with the subprocess until it terminates, and all input
--- and output has been completed.
--- 
--- If `stdin_buf` is given, the subprocess must have been created with
--- %G_SUBPROCESS_FLAGS_STDIN_PIPE.  The given data is fed to the
--- stdin of the subprocess and the pipe is closed (ie: EOF).
--- 
--- At the same time (as not to cause blocking when dealing with large
--- amounts of data), if %G_SUBPROCESS_FLAGS_STDOUT_PIPE or
--- %G_SUBPROCESS_FLAGS_STDERR_PIPE were used, reads from those
--- streams.  The data that was read is returned in `stdout` and/or
--- the `stderr`.
--- 
--- If the subprocess was created with %G_SUBPROCESS_FLAGS_STDOUT_PIPE,
--- `stdout_buf` will contain the data read from stdout.  Otherwise, for
--- subprocesses not created with %G_SUBPROCESS_FLAGS_STDOUT_PIPE,
--- `stdout_buf` will be set to `nil`.  Similar provisions apply to
--- `stderr_buf` and %G_SUBPROCESS_FLAGS_STDERR_PIPE.
--- 
--- As usual, any output variable may be given as `nil` to ignore it.
--- 
--- If you desire the stdout and stderr data to be interleaved, create
--- the subprocess with %G_SUBPROCESS_FLAGS_STDOUT_PIPE and
--- %G_SUBPROCESS_FLAGS_STDERR_MERGE.  The merged result will be returned
--- in `stdout_buf` and `stderr_buf` will be set to `nil`.
--- 
--- In case of any error (including cancellation), `false` will be
--- returned with `error` set.  Some or all of the stdin data may have
--- been written.  Any stdout or stderr data that has been read will be
--- discarded. None of the out variables (aside from `error`) will have
--- been set to anything in particular and should not be inspected.
--- 
--- In the case that `true` is returned, the subprocess has exited and the
--- exit status inspection APIs (eg: `g_subprocess_get_if_exited()`,
--- `g_subprocess_get_exit_status()`) may be used.
--- 
--- You should not attempt to use any of the subprocess pipes after
--- starting this function, since they may be left in strange states,
--- even if the operation was cancelled.  You should especially not
--- attempt to interact with the pipes while the operation is in progress
--- (either from another thread or if using the asynchronous version).
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@param stdin_buf? GLib.Bytes # data to send to the stdin of the subprocess, or `nil`
---@param cancellable? Gio.Cancellable # a `GCancellable`
---@param stdout_buf? GLib.Bytes # data read from the subprocess stdout
---@param stderr_buf? GLib.Bytes # data read from the subprocess stderr
---@return (boolean|nil) # `true` if successful
function Gio.Subprocess:communicate(stdin_buf, cancellable, stdout_buf, stderr_buf) end

--- # method Gio.Subprocess:communicate_async()
---
--- Asynchronous version of `g_subprocess_communicate()`.  Complete
--- invocation with `g_subprocess_communicate_finish()`.
---
--- ---
---
---@param self Gio.Subprocess # Self
---@param stdin_buf? GLib.Bytes # Input data, or `nil`
---@param cancellable? Gio.Cancellable # Cancellable
---@param callback? Gio.AsyncReadyCallback # Callback
---@param user_data? userdata # User data
---@return nil
function Gio.Subprocess:communicate_async(stdin_buf, cancellable, callback, user_data) end

--- # method Gio.Subprocess:communicate_finish()
---
--- Complete an invocation of `g_subprocess_communicate_async()`.
---
--- ---
---
---@param self Gio.Subprocess # Self
---@param result Gio.AsyncResult # Result
---@param stdout_buf? GLib.Bytes # Return location for stdout data
---@param stderr_buf? GLib.Bytes # Return location for stderr data
---@return (boolean|nil)
function Gio.Subprocess:communicate_finish(result, stdout_buf, stderr_buf) end

--- # method Gio.Subprocess:communicate_utf8()
---
--- Like `g_subprocess_communicate()`, but validates the output of the
--- process as UTF-8, and returns it as a regular NUL terminated string.
--- 
--- On error, `stdout_buf` and `stderr_buf` will be set to undefined values and
--- should not be used.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@param stdin_buf? string # data to send to the stdin of the subprocess, or `nil`
---@param cancellable? Gio.Cancellable # a `GCancellable`
---@param stdout_buf? string # data read from the subprocess stdout
---@param stderr_buf? string # data read from the subprocess stderr
---@return (boolean|nil)
function Gio.Subprocess:communicate_utf8(stdin_buf, cancellable, stdout_buf, stderr_buf) end

--- # method Gio.Subprocess:communicate_utf8_async()
---
--- Asynchronous version of g_subprocess_communicate_utf8().  Complete
--- invocation with g_subprocess_communicate_utf8`_finish()`.
---
--- ---
---
---@param self Gio.Subprocess # Self
---@param stdin_buf? string # Input data, or `nil`
---@param cancellable? Gio.Cancellable # Cancellable
---@param callback? Gio.AsyncReadyCallback # Callback
---@param user_data? userdata # User data
---@return nil
function Gio.Subprocess:communicate_utf8_async(stdin_buf, cancellable, callback, user_data) end

--- # method Gio.Subprocess:communicate_utf8_finish()
---
--- Complete an invocation of g_subprocess_communicate_utf8`_async()`.
---
--- ---
---
---@param self Gio.Subprocess # Self
---@param result Gio.AsyncResult # Result
---@param stdout_buf? string # Return location for stdout data
---@param stderr_buf? string # Return location for stderr data
---@return (boolean|nil)
function Gio.Subprocess:communicate_utf8_finish(result, stdout_buf, stderr_buf) end

--- # method Gio.Subprocess:force_exit()
---
--- Use an operating-system specific method to attempt an immediate,
--- forceful termination of the process.  There is no mechanism to
--- determine whether or not the request itself was successful;
--- however, you can use `g_subprocess_wait()` to monitor the status of
--- the process after calling this function.
--- 
--- On Unix, this function sends %SIGKILL.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@return nil
function Gio.Subprocess:force_exit() end

--- # method Gio.Subprocess:get_exit_status()
---
--- Check the exit status of the subprocess, given that it exited
--- normally.  This is the value passed to the `exit()` system call or the
--- return value from main.
--- 
--- This is equivalent to the system WEXITSTATUS macro.
--- 
--- It is an error to call this function before `g_subprocess_wait()` and
--- unless `g_subprocess_get_if_exited()` returned `true`.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@return integer # the exit status
function Gio.Subprocess:get_exit_status() end

--- # method Gio.Subprocess:get_identifier()
---
--- On UNIX, returns the process ID as a decimal string.
--- On Windows, returns the result of GetProcessI`d()` also as a string.
--- If the subprocess has terminated, this will return `nil`.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@return string # the subprocess identifier, or `nil` if the subprocess has terminated
function Gio.Subprocess:get_identifier() end

--- # method Gio.Subprocess:get_if_exited()
---
--- Check if the given subprocess exited normally (ie: by way of `exit()`
--- or return from `main()`).
--- 
--- This is equivalent to the system WIFEXITED macro.
--- 
--- It is an error to call this function before `g_subprocess_wait()` has
--- returned.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@return (boolean|nil) # `true` if the case of a normal exit
function Gio.Subprocess:get_if_exited() end

--- # method Gio.Subprocess:get_if_signaled()
---
--- Check if the given subprocess terminated in response to a signal.
--- 
--- This is equivalent to the system WIFSIGNALED macro.
--- 
--- It is an error to call this function before `g_subprocess_wait()` has
--- returned.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@return (boolean|nil) # `true` if the case of termination due to a signal
function Gio.Subprocess:get_if_signaled() end

--- # method Gio.Subprocess:get_status()
---
--- Gets the raw status code of the process, as from `waitpid()`.
--- 
--- This value has no particular meaning, but it can be used with the
--- macros defined by the system headers such as WIFEXITED.  It can also
--- be used with `g_spawn_check_wait_status()`.
--- 
--- It is more likely that you want to use `g_subprocess_get_if_exited()`
--- followed by `g_subprocess_get_exit_status()`.
--- 
--- It is an error to call this function before `g_subprocess_wait()` has
--- returned.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@return integer # the (meaningless) `waitpid()` exit status from the kernel
function Gio.Subprocess:get_status() end

--- # method Gio.Subprocess:get_stderr_pipe()
---
--- Gets the `GInputStream` from which to read the stderr output of
--- `subprocess`.
--- 
--- The process must have been created with %G_SUBPROCESS_FLAGS_STDERR_PIPE,
--- otherwise `nil` will be returned.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@return Gio.InputStream # the stderr pipe
function Gio.Subprocess:get_stderr_pipe() end

--- # method Gio.Subprocess:get_stdin_pipe()
---
--- Gets the `GOutputStream` that you can write to in order to give data
--- to the stdin of `subprocess`.
--- 
--- The process must have been created with %G_SUBPROCESS_FLAGS_STDIN_PIPE and
--- not %G_SUBPROCESS_FLAGS_STDIN_INHERIT, otherwise `nil` will be returned.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@return Gio.OutputStream # the stdout pipe
function Gio.Subprocess:get_stdin_pipe() end

--- # method Gio.Subprocess:get_stdout_pipe()
---
--- Gets the `GInputStream` from which to read the stdout output of
--- `subprocess`.
--- 
--- The process must have been created with %G_SUBPROCESS_FLAGS_STDOUT_PIPE,
--- otherwise `nil` will be returned.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@return Gio.InputStream # the stdout pipe
function Gio.Subprocess:get_stdout_pipe() end

--- # method Gio.Subprocess:get_successful()
---
--- Checks if the process was "successful".  A process is considered
--- successful if it exited cleanly with an exit status of 0, either by
--- way of the `exit()` system call or return from `main()`.
--- 
--- It is an error to call this function before `g_subprocess_wait()` has
--- returned.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@return (boolean|nil) # `true` if the process exited cleanly with a exit status of 0
function Gio.Subprocess:get_successful() end

--- # method Gio.Subprocess:get_term_sig()
---
--- Get the signal number that caused the subprocess to terminate, given
--- that it terminated due to a signal.
--- 
--- This is equivalent to the system WTERMSIG macro.
--- 
--- It is an error to call this function before `g_subprocess_wait()` and
--- unless `g_subprocess_get_if_signaled()` returned `true`.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@return integer # the signal causing termination
function Gio.Subprocess:get_term_sig() end

--- # method Gio.Subprocess:send_signal()
---
--- Sends the UNIX signal `signal_num` to the subprocess, if it is still
--- running.
--- 
--- This API is race-free.  If the subprocess has terminated, it will not
--- be signalled.
--- 
--- This API is not available on Windows.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@param signal_num integer # the signal number to send
---@return nil
function Gio.Subprocess:send_signal(signal_num) end

--- # method Gio.Subprocess:wait()
---
--- Synchronously wait for the subprocess to terminate.
--- 
--- After the process terminates you can query its exit status with
--- functions such as `g_subprocess_get_if_exited()` and
--- `g_subprocess_get_exit_status()`.
--- 
--- This function does not fail in the case of the subprocess having
--- abnormal termination.  See `g_subprocess_wait_check()` for that.
--- 
--- Cancelling `cancellable` doesn't kill the subprocess.  Call
--- `g_subprocess_force_exit()` if it is desirable.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@param cancellable? Gio.Cancellable # a `GCancellable`
---@return (boolean|nil) # `true` on success, `false` if `cancellable` was cancelled
function Gio.Subprocess:wait(cancellable) end

--- # method Gio.Subprocess:wait_async()
---
--- Wait for the subprocess to terminate.
--- 
--- This is the asynchronous version of `g_subprocess_wait()`.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the operation is complete
---@param user_data? userdata # user_data for `callback`
---@return nil
function Gio.Subprocess:wait_async(cancellable, callback, user_data) end

--- # method Gio.Subprocess:wait_check()
---
--- Combines `g_subprocess_wait()` with `g_spawn_check_wait_status()`.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@param cancellable? Gio.Cancellable # a `GCancellable`
---@return (boolean|nil) # `true` on success, `false` if process exited abnormally, or `cancellable` was cancelled
function Gio.Subprocess:wait_check(cancellable) end

--- # method Gio.Subprocess:wait_check_async()
---
--- Combines `g_subprocess_wait_async()` with `g_spawn_check_wait_status()`.
--- 
--- This is the asynchronous version of `g_subprocess_wait_check()`.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the operation is complete
---@param user_data? userdata # user_data for `callback`
---@return nil
function Gio.Subprocess:wait_check_async(cancellable, callback, user_data) end

--- # method Gio.Subprocess:wait_check_finish()
---
--- Collects the result of a previous call to
--- `g_subprocess_wait_check_async()`.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@param result Gio.AsyncResult # the `GAsyncResult` passed to your `GAsyncReadyCallback`
---@return (boolean|nil) # `true` if successful, or `false` with `error` set
function Gio.Subprocess:wait_check_finish(result) end

--- # method Gio.Subprocess:wait_finish()
---
--- Collects the result of a previous call to
--- `g_subprocess_wait_async()`.
---
--- ---
---
---@param self Gio.Subprocess # a `GSubprocess`
---@param result Gio.AsyncResult # the `GAsyncResult` passed to your `GAsyncReadyCallback`
---@return (boolean|nil) # `true` if successful, or `false` with `error` set
function Gio.Subprocess:wait_finish(result) end

--- # function Gio.Subprocess.new()
---
--- Create a new process with the given flags and argument list.
--- 
--- The argument list is expected to be `nil`-terminated.
---
--- ---
---
---@param argv unknown[] # commandline arguments for the subprocess
---@param flags Gio.SubprocessFlags # flags that define the behaviour of the subprocess
---@return Gio.Subprocess # A newly created `GSubprocess`, or `nil` on error (and `error` will be set)
function Gio.Subprocess.new(argv, flags) end

---@enum Gio.SubprocessFlags
Gio.SubprocessFlags = {}

--- # class Gio.SubprocessLauncher
---
--- This class contains a set of options for launching child processes,
--- such as where its standard input and output will be directed, the
--- argument list, the environment, and more.
--- 
--- While the `GSubprocess` class has high level functions covering
--- popular cases, use of this class allows access to more advanced
--- options.  It can also be used to launch multiple subprocesses with
--- a similar configuration.
---
--- ---
---
---@class Gio.SubprocessLauncher : GObject.Object
---@operator call: Gio.SubprocessLauncher
Gio.SubprocessLauncher = {}

--- # method Gio.SubprocessLauncher:close()
---
--- Closes all the file descriptors previously passed to the object with
--- `g_subprocess_launcher_take_fd()`, `g_subprocess_launcher_take_stderr_fd()`, etc.
--- 
--- After calling this method, any subsequent calls to `g_subprocess_launcher_spawn()` or `g_subprocess_launcher_spawnv()` will
--- return %G_IO_ERROR_CLOSED. This method is idempotent if
--- called more than once.
--- 
--- This function is called automatically when the `GSubprocessLauncher`
--- is disposed, but is provided separately so that garbage collected
--- language bindings can call it earlier to guarantee when FDs are closed.
---
--- ---
---
---@param self Gio.SubprocessLauncher # a `GSubprocessLauncher`
---@return nil
function Gio.SubprocessLauncher:close() end

--- # method Gio.SubprocessLauncher:getenv()
---
--- Returns the value of the environment variable `variable` in the
--- environment of processes launched from this launcher.
--- 
--- On UNIX, the returned string can be an arbitrary byte string.
--- On Windows, it will be UTF-8.
---
--- ---
---
---@param self Gio.SubprocessLauncher # a `GSubprocessLauncher`
---@param variable string # the environment variable to get
---@return string # the value of the environment variable, `nil` if unset
function Gio.SubprocessLauncher:getenv(variable) end

--- # method Gio.SubprocessLauncher:set_cwd()
---
--- Sets the current working directory that processes will be launched
--- with.
--- 
--- By default processes are launched with the current working directory
--- of the launching process at the time of launch.
---
--- ---
---
---@param self Gio.SubprocessLauncher # a `GSubprocessLauncher`
---@param cwd string # the cwd for launched processes
---@return nil
function Gio.SubprocessLauncher:set_cwd(cwd) end

--- # method Gio.SubprocessLauncher:set_environ()
---
--- Replace the entire environment of processes launched from this
--- launcher with the given 'environ' variable.
--- 
--- Typically you will build this variable by using `g_listenv()` to copy
--- the process 'environ' and using the functions `g_environ_setenv()`,
--- `g_environ_unsetenv()`, etc.
--- 
--- As an alternative, you can use `g_subprocess_launcher_setenv()`,
--- `g_subprocess_launcher_unsetenv()`, etc.
--- 
--- Pass an empty array to set an empty environment. Pass `nil` to inherit the
--- parent process’ environment. As of GLib 2.54, the parent process’ environment
--- will be copied when `g_subprocess_launcher_set_environ()` is called.
--- Previously, it was copied when the subprocess was executed. This means the
--- copied environment may now be modified (using `g_subprocess_launcher_setenv()`,
--- etc.) before launching the subprocess.
--- 
--- On UNIX, all strings in this array can be arbitrary byte strings.
--- On Windows, they should be in UTF-8.
---
--- ---
---
---@param self Gio.SubprocessLauncher # a `GSubprocessLauncher`
---@param env unknown[] # the replacement environment
---@return nil
function Gio.SubprocessLauncher:set_environ(env) end

--- # method Gio.SubprocessLauncher:set_flags()
---
--- Sets the flags on the launcher.
--- 
--- The default flags are %G_SUBPROCESS_FLAGS_NONE.
--- 
--- You may not set flags that specify conflicting options for how to
--- handle a particular stdio stream (eg: specifying both
--- %G_SUBPROCESS_FLAGS_STDIN_PIPE and
--- %G_SUBPROCESS_FLAGS_STDIN_INHERIT).
--- 
--- You may also not set a flag that conflicts with a previous call to a
--- function like `g_subprocess_launcher_set_stdin_file_path()` or
--- `g_subprocess_launcher_take_stdout_fd()`.
---
--- ---
---
---@param self Gio.SubprocessLauncher # a `GSubprocessLauncher`
---@param flags Gio.SubprocessFlags # `GSubprocessFlags`
---@return nil
function Gio.SubprocessLauncher:set_flags(flags) end

--- # method Gio.SubprocessLauncher:set_stderr_file_path()
---
--- Sets the file path to use as the stderr for spawned processes.
--- 
--- If `path` is `nil` then any previously given path is unset.
--- 
--- The file will be created or truncated when the process is spawned, as
--- would be the case if using '2>' at the shell.
--- 
--- If you want to send both stdout and stderr to the same file then use
--- %G_SUBPROCESS_FLAGS_STDERR_MERGE.
--- 
--- You may not set a stderr file path if a stderr fd is already set or
--- if the launcher flags contain any flags directing stderr elsewhere.
--- 
--- This feature is only available on UNIX.
---
--- ---
---
---@param self Gio.SubprocessLauncher # a `GSubprocessLauncher`
---@param path? string # a filename or `nil`
---@return nil
function Gio.SubprocessLauncher:set_stderr_file_path(path) end

--- # method Gio.SubprocessLauncher:set_stdin_file_path()
---
--- Sets the file path to use as the stdin for spawned processes.
--- 
--- If `path` is `nil` then any previously given path is unset.
--- 
--- The file must exist or spawning the process will fail.
--- 
--- You may not set a stdin file path if a stdin fd is already set or if
--- the launcher flags contain any flags directing stdin elsewhere.
--- 
--- This feature is only available on UNIX.
---
--- ---
---
---@param self Gio.SubprocessLauncher # a `GSubprocessLauncher`
---@param path string
---@return nil
function Gio.SubprocessLauncher:set_stdin_file_path(path) end

--- # method Gio.SubprocessLauncher:set_stdout_file_path()
---
--- Sets the file path to use as the stdout for spawned processes.
--- 
--- If `path` is `nil` then any previously given path is unset.
--- 
--- The file will be created or truncated when the process is spawned, as
--- would be the case if using '>' at the shell.
--- 
--- You may not set a stdout file path if a stdout fd is already set or
--- if the launcher flags contain any flags directing stdout elsewhere.
--- 
--- This feature is only available on UNIX.
---
--- ---
---
---@param self Gio.SubprocessLauncher # a `GSubprocessLauncher`
---@param path? string # a filename or `nil`
---@return nil
function Gio.SubprocessLauncher:set_stdout_file_path(path) end

--- # method Gio.SubprocessLauncher:setenv()
---
--- Sets the environment variable `variable` in the environment of
--- processes launched from this launcher.
--- 
--- On UNIX, both the variable's name and value can be arbitrary byte
--- strings, except that the variable's name cannot contain '='.
--- On Windows, they should be in UTF-8.
---
--- ---
---
---@param self Gio.SubprocessLauncher # a `GSubprocessLauncher`
---@param variable string # the environment variable to set, must not contain '='
---@param value string # the new value for the variable
---@param overwrite (boolean|nil) # whether to change the variable if it already exists
---@return nil
function Gio.SubprocessLauncher:setenv(variable, value, overwrite) end

--- # method Gio.SubprocessLauncher:spawnv()
---
--- Creates a `GSubprocess` given a provided array of arguments.
---
--- ---
---
---@param self Gio.SubprocessLauncher # a `GSubprocessLauncher`
---@param argv unknown[] # Command line arguments
---@return Gio.Subprocess # A new `GSubprocess`, or `nil` on error (and `error` will be set)
function Gio.SubprocessLauncher:spawnv(argv) end

--- # method Gio.SubprocessLauncher:take_fd()
---
--- Transfer an arbitrary file descriptor from parent process to the
--- child.  This function takes ownership of the `source_fd`; it will be closed
--- in the parent when `self` is freed.
--- 
--- By default, all file descriptors from the parent will be closed.
--- This function allows you to create (for example) a custom ``pipe()`` or
--- ``socketpair()`` before launching the process, and choose the target
--- descriptor in the child.
--- 
--- An example use case is GNUPG, which has a command line argument
--- `--passphrase-fd` providing a file descriptor number where it expects
--- the passphrase to be written.
---
--- ---
---
---@param self Gio.SubprocessLauncher # a `GSubprocessLauncher`
---@param source_fd integer # File descriptor in parent process
---@param target_fd integer # Target descriptor for child process
---@return nil
function Gio.SubprocessLauncher:take_fd(source_fd, target_fd) end

--- # method Gio.SubprocessLauncher:take_stderr_fd()
---
--- Sets the file descriptor to use as the stderr for spawned processes.
--- 
--- If `fd` is -1 then any previously given fd is unset.
--- 
--- Note that the default behaviour is to pass stderr through to the
--- stderr of the parent process.
--- 
--- The passed `fd` belongs to the `GSubprocessLauncher`.  It will be
--- automatically closed when the launcher is finalized.  The file
--- descriptor will also be closed on the child side when executing the
--- spawned process.
--- 
--- You may not set a stderr fd if a stderr file path is already set or
--- if the launcher flags contain any flags directing stderr elsewhere.
--- 
--- This feature is only available on UNIX.
---
--- ---
---
---@param self Gio.SubprocessLauncher # a `GSubprocessLauncher`
---@param fd integer # a file descriptor, or -1
---@return nil
function Gio.SubprocessLauncher:take_stderr_fd(fd) end

--- # method Gio.SubprocessLauncher:take_stdin_fd()
---
--- Sets the file descriptor to use as the stdin for spawned processes.
--- 
--- If `fd` is -1 then any previously given fd is unset.
--- 
--- Note that if your intention is to have the stdin of the calling
--- process inherited by the child then %G_SUBPROCESS_FLAGS_STDIN_INHERIT
--- is a better way to go about doing that.
--- 
--- The passed `fd` is noted but will not be touched in the current
--- process.  It is therefore necessary that it be kept open by the
--- caller until the subprocess is spawned.  The file descriptor will
--- also not be explicitly closed on the child side, so it must be marked
--- O_CLOEXEC if that's what you want.
--- 
--- You may not set a stdin fd if a stdin file path is already set or if
--- the launcher flags contain any flags directing stdin elsewhere.
--- 
--- This feature is only available on UNIX.
---
--- ---
---
---@param self Gio.SubprocessLauncher # a `GSubprocessLauncher`
---@param fd integer # a file descriptor, or -1
---@return nil
function Gio.SubprocessLauncher:take_stdin_fd(fd) end

--- # method Gio.SubprocessLauncher:take_stdout_fd()
---
--- Sets the file descriptor to use as the stdout for spawned processes.
--- 
--- If `fd` is -1 then any previously given fd is unset.
--- 
--- Note that the default behaviour is to pass stdout through to the
--- stdout of the parent process.
--- 
--- The passed `fd` is noted but will not be touched in the current
--- process.  It is therefore necessary that it be kept open by the
--- caller until the subprocess is spawned.  The file descriptor will
--- also not be explicitly closed on the child side, so it must be marked
--- O_CLOEXEC if that's what you want.
--- 
--- You may not set a stdout fd if a stdout file path is already set or
--- if the launcher flags contain any flags directing stdout elsewhere.
--- 
--- This feature is only available on UNIX.
---
--- ---
---
---@param self Gio.SubprocessLauncher # a `GSubprocessLauncher`
---@param fd integer # a file descriptor, or -1
---@return nil
function Gio.SubprocessLauncher:take_stdout_fd(fd) end

--- # method Gio.SubprocessLauncher:unsetenv()
---
--- Removes the environment variable `variable` from the environment of
--- processes launched from this launcher.
--- 
--- On UNIX, the variable's name can be an arbitrary byte string not
--- containing '='. On Windows, it should be in UTF-8.
---
--- ---
---
---@param self Gio.SubprocessLauncher # a `GSubprocessLauncher`
---@param variable string # the environment variable to unset, must not contain '='
---@return nil
function Gio.SubprocessLauncher:unsetenv(variable) end

--- # function Gio.SubprocessLauncher.new()
---
--- Creates a new `GSubprocessLauncher`.
--- 
--- The launcher is created with the default options.  A copy of the
--- environment of the calling process is made at the time of this call
--- and will be used as the environment that the process is launched in.
---
--- ---
---
---@param flags Gio.SubprocessFlags # `GSubprocessFlags`
---@return Gio.SubprocessLauncher
function Gio.SubprocessLauncher.new(flags) end

--- # class Gio.Task
---
--- A `GTask` represents and manages a cancellable "task".
--- 
--- ## Asynchronous operations
--- 
--- The most common usage of `GTask` is as a `GAsyncResult`, to
--- manage data during an asynchronous operation. You call
--- `g_task_new()` in the "start" method, followed by
--- `g_task_set_task_data()` and the like if you need to keep some
--- additional data associated with the task, and then pass the
--- task object around through your asynchronous operation.
--- Eventually, you will call a method such as
--- `g_task_return_pointer()` or `g_task_return_error()`, which will
--- save the value you give it and then invoke the task's callback
--- function in the
--- [thread-default main context][g-main-context-push-thread-default]
--- where it was created (waiting until the next iteration of the main
--- loop first, if necessary). The caller will pass the `GTask` back to
--- the operation's finish function (as a `GAsyncResult`), and you can
--- use `g_task_propagate_pointer()` or the like to extract the
--- return value.
--- 
--- Using `GTask` requires the thread-default `GMainContext` from when the
--- `GTask` was constructed to be running at least until the task has completed
--- and its data has been freed.
--- 
--- If a `GTask` has been constructed and its callback set, it is an error to
--- not call `g_task_return_*()` on it. GLib will warn at runtime if this happens
--- (since 2.76).
--- 
--- Here is an example for using GTask as a GAsyncResult:
--- ```c
---     typedef struct {
---       CakeFrostingType frosting;
---       char *message;
---     } DecorationData;
--- 
---     static void
---     decoration_data_free (DecorationData *decoration)
---     {
---       g_free (decoration->message);
---       g_slice_free (DecorationData, decoration);
---     }
--- 
---     static void
---     baked_cb (Cake     *cake,
---               gpointer  user_data)
---     {
---       GTask *task = user_data;
---       DecorationData *decoration = g_task_get_task_data (task);
---       GError *error = NULL;
--- 
---       if (cake == NULL)
---         {
---           g_task_return_new_error (task, BAKER_ERROR, BAKER_ERROR_NO_FLOUR,
---                                    "Go to the supermarket");
---           g_object_unref (task);
---           return;
---         }
--- 
---       if (!cake_decorate (cake, decoration->frosting, decoration->message, &error))
---         {
---           g_object_unref (cake);
---           // `g_task_return_error()` takes ownership of error
---           g_task_return_error (task, error);
---           g_object_unref (task);
---           return;
---         }
--- 
---       g_task_return_pointer (task, cake, g_object_unref);
---       g_object_unref (task);
---     }
--- 
---     void
---     baker_bake_cake_async (Baker               *self,
---                            guint                radius,
---                            CakeFlavor           flavor,
---                            CakeFrostingType     frosting,
---                            const char          *message,
---                            GCancellable        *cancellable,
---                            GAsyncReadyCallback  callback,
---                            gpointer             user_data)
---     {
---       GTask *task;
---       DecorationData *decoration;
---       Cake  *cake;
--- 
---       task = g_task_new (self, cancellable, callback, user_data);
---       if (radius < 3)
---         {
---           g_task_return_new_error (task, BAKER_ERROR, BAKER_ERROR_TOO_SMALL,
---                                    "%ucm radius cakes are silly",
---                                    radius);
---           g_object_unref (task);
---           return;
---         }
--- 
---       cake = _baker_get_cached_cake (self, radius, flavor, frosting, message);
---       if (cake != NULL)
---         {
---           // `_baker_get_cached_cake()` returns a reffed cake
---           g_task_return_pointer (task, cake, g_object_unref);
---           g_object_unref (task);
---           return;
---         }
--- 
---       decoration = g_slice_new (DecorationData);
---       decoration->frosting = frosting;
---       decoration->message = g_strdup (message);
---       g_task_set_task_data (task, decoration, (GDestroyNotify) decoration_data_free);
--- 
---       _baker_begin_cake (self, radius, flavor, cancellable, baked_cb, task);
---     }
--- 
---     Cake *
---     baker_bake_cake_finish (Baker         *self,
---                             GAsyncResult  *result,
---                             GError       **error)
---     {
---       g_return_val_if_fail (g_task_is_valid (result, self), NULL);
--- 
---       return g_task_propagate_pointer (G_TASK (result), error);
---     }
--- ```
--- 
--- ## Chained asynchronous operations
--- 
--- `GTask` also tries to simplify asynchronous operations that
--- internally chain together several smaller asynchronous
--- operations. `g_task_get_cancellable()`, `g_task_get_context()`,
--- and `g_task_get_priority()` allow you to get back the task's
--- `GCancellable`, `GMainContext`, and [I/O priority][io-priority]
--- when starting a new subtask, so you don't have to keep track
--- of them yourself. `g_task_attach_source()` simplifies the case
--- of waiting for a source to fire (automatically using the correct
--- `GMainContext` and priority).
--- 
--- Here is an example for chained asynchronous operations:
---   ```c
---     typedef struct {
---       Cake *cake;
---       CakeFrostingType frosting;
---       char *message;
---     } BakingData;
--- 
---     static void
---     decoration_data_free (BakingData *bd)
---     {
---       if (bd->cake)
---         g_object_unref (bd->cake);
---       g_free (bd->message);
---       g_slice_free (BakingData, bd);
---     }
--- 
---     static void
---     decorated_cb (Cake         *cake,
---                   GAsyncResult *result,
---                   gpointer      user_data)
---     {
---       GTask *task = user_data;
---       GError *error = NULL;
--- 
---       if (!cake_decorate_finish (cake, result, &error))
---         {
---           g_object_unref (cake);
---           g_task_return_error (task, error);
---           g_object_unref (task);
---           return;
---         }
--- 
---       // `baking_data_free()` will drop its ref on the cake, so we have to
---       // take another here to give to the caller.
---       g_task_return_pointer (task, g_object_ref (cake), g_object_unref);
---       g_object_unref (task);
---     }
--- 
---     static gboolean
---     decorator_ready (gpointer user_data)
---     {
---       GTask *task = user_data;
---       BakingData *bd = g_task_get_task_data (task);
--- 
---       cake_decorate_async (bd->cake, bd->frosting, bd->message,
---                            g_task_get_cancellable (task),
---                            decorated_cb, task);
--- 
---       return G_SOURCE_REMOVE;
---     }
--- 
---     static void
---     baked_cb (Cake     *cake,
---               gpointer  user_data)
---     {
---       GTask *task = user_data;
---       BakingData *bd = g_task_get_task_data (task);
---       GError *error = NULL;
--- 
---       if (cake == NULL)
---         {
---           g_task_return_new_error (task, BAKER_ERROR, BAKER_ERROR_NO_FLOUR,
---                                    "Go to the supermarket");
---           g_object_unref (task);
---           return;
---         }
--- 
---       bd->cake = cake;
--- 
---       // Bail out now if the user has already cancelled
---       if (g_task_return_error_if_cancelled (task))
---         {
---           g_object_unref (task);
---           return;
---         }
--- 
---       if (cake_decorator_available (cake))
---         decorator_ready (task);
---       else
---         {
---           GSource *source;
--- 
---           source = cake_decorator_wait_source_new (cake);
---           // Attach `source` to `task`'s GMainContext and have it call
---           // `decorator_ready()` when it is ready.
---           g_task_attach_source (task, source, decorator_ready);
---           g_source_unref (source);
---         }
---     }
--- 
---     void
---     baker_bake_cake_async (Baker               *self,
---                            guint                radius,
---                            CakeFlavor           flavor,
---                            CakeFrostingType     frosting,
---                            const char          *message,
---                            gint                 priority,
---                            GCancellable        *cancellable,
---                            GAsyncReadyCallback  callback,
---                            gpointer             user_data)
---     {
---       GTask *task;
---       BakingData *bd;
--- 
---       task = g_task_new (self, cancellable, callback, user_data);
---       g_task_set_priority (task, priority);
--- 
---       bd = g_slice_new0 (BakingData);
---       bd->frosting = frosting;
---       bd->message = g_strdup (message);
---       g_task_set_task_data (task, bd, (GDestroyNotify) baking_data_free);
--- 
---       _baker_begin_cake (self, radius, flavor, cancellable, baked_cb, task);
---     }
--- 
---     Cake *
---     baker_bake_cake_finish (Baker         *self,
---                             GAsyncResult  *result,
---                             GError       **error)
---     {
---       g_return_val_if_fail (g_task_is_valid (result, self), NULL);
--- 
---       return g_task_propagate_pointer (G_TASK (result), error);
---     }
--- ```
--- 
--- ## Asynchronous operations from synchronous ones
--- 
--- You can use `g_task_run_in_thread()` to turn a synchronous
--- operation into an asynchronous one, by running it in a thread.
--- When it completes, the result will be dispatched to the
--- [thread-default main context][g-main-context-push-thread-default]
--- where the `GTask` was created.
--- 
--- Running a task in a thread:
---   ```c
---     typedef struct {
---       guint radius;
---       CakeFlavor flavor;
---       CakeFrostingType frosting;
---       char *message;
---     } CakeData;
--- 
---     static void
---     cake_data_free (CakeData *cake_data)
---     {
---       g_free (cake_data->message);
---       g_slice_free (CakeData, cake_data);
---     }
--- 
---     static void
---     bake_cake_thread (GTask         *task,
---                       gpointer       source_object,
---                       gpointer       task_data,
---                       GCancellable  *cancellable)
---     {
---       Baker *self = source_object;
---       CakeData *cake_data = task_data;
---       Cake *cake;
---       GError *error = NULL;
--- 
---       cake = bake_cake (baker, cake_data->radius, cake_data->flavor,
---                         cake_data->frosting, cake_data->message,
---                         cancellable, &error);
---       if (cake)
---         g_task_return_pointer (task, cake, g_object_unref);
---       else
---         g_task_return_error (task, error);
---     }
--- 
---     void
---     baker_bake_cake_async (Baker               *self,
---                            guint                radius,
---                            CakeFlavor           flavor,
---                            CakeFrostingType     frosting,
---                            const char          *message,
---                            GCancellable        *cancellable,
---                            GAsyncReadyCallback  callback,
---                            gpointer             user_data)
---     {
---       CakeData *cake_data;
---       GTask *task;
--- 
---       cake_data = g_slice_new (CakeData);
---       cake_data->radius = radius;
---       cake_data->flavor = flavor;
---       cake_data->frosting = frosting;
---       cake_data->message = g_strdup (message);
---       task = g_task_new (self, cancellable, callback, user_data);
---       g_task_set_task_data (task, cake_data, (GDestroyNotify) cake_data_free);
---       g_task_run_in_thread (task, bake_cake_thread);
---       g_object_unref (task);
---     }
--- 
---     Cake *
---     baker_bake_cake_finish (Baker         *self,
---                             GAsyncResult  *result,
---                             GError       **error)
---     {
---       g_return_val_if_fail (g_task_is_valid (result, self), NULL);
--- 
---       return g_task_propagate_pointer (G_TASK (result), error);
---     }
--- ```
--- 
--- ## Adding cancellability to uncancellable tasks
--- 
--- Finally, `g_task_run_in_thread()` and `g_task_run_in_thread_sync()`
--- can be used to turn an uncancellable operation into a
--- cancellable one. If you call `g_task_set_return_on_cancel()`,
--- passing `true`, then if the task's `GCancellable` is cancelled,
--- it will return control back to the caller immediately, while
--- allowing the task thread to continue running in the background
--- (and simply discarding its result when it finally does finish).
--- Provided that the task thread is careful about how it uses
--- locks and other externally-visible resources, this allows you
--- to make "GLib-friendly" asynchronous and cancellable
--- synchronous variants of blocking APIs.
--- 
--- Cancelling a task:
---   ```c
---     static void
---     bake_cake_thread (GTask         *task,
---                       gpointer       source_object,
---                       gpointer       task_data,
---                       GCancellable  *cancellable)
---     {
---       Baker *self = source_object;
---       CakeData *cake_data = task_data;
---       Cake *cake;
---       GError *error = NULL;
--- 
---       cake = bake_cake (baker, cake_data->radius, cake_data->flavor,
---                         cake_data->frosting, cake_data->message,
---                         &error);
---       if (error)
---         {
---           g_task_return_error (task, error);
---           return;
---         }
--- 
---       // If the task has already been cancelled, then we don't want to add
---       // the cake to the cake cache. Likewise, we don't  want to have the
---       // task get cancelled in the middle of updating the cache.
---       // `g_task_set_return_on_cancel()` will return `true` here if it managed
---       // to disable return-on-cancel, or `false` if the task was cancelled
---       // before it could.
---       if (g_task_set_return_on_cancel (task, FALSE))
---         {
---           // If the caller cancels at this point, their
---           // GAsyncReadyCallback won't be invoked until we return,
---           // so we don't have to worry that this code will run at
---           // the same time as that code does. But if there were
---           // other functions that might look at the cake cache,
---           // then we'd probably need a GMutex here as well.
---           baker_add_cake_to_cache (baker, cake);
---           g_task_return_pointer (task, cake, g_object_unref);
---         }
---     }
--- 
---     void
---     baker_bake_cake_async (Baker               *self,
---                            guint                radius,
---                            CakeFlavor           flavor,
---                            CakeFrostingType     frosting,
---                            const char          *message,
---                            GCancellable        *cancellable,
---                            GAsyncReadyCallback  callback,
---                            gpointer             user_data)
---     {
---       CakeData *cake_data;
---       GTask *task;
--- 
---       cake_data = g_slice_new (CakeData);
--- 
---       ...
--- 
---       task = g_task_new (self, cancellable, callback, user_data);
---       g_task_set_task_data (task, cake_data, (GDestroyNotify) cake_data_free);
---       g_task_set_return_on_cancel (task, TRUE);
---       g_task_run_in_thread (task, bake_cake_thread);
---     }
--- 
---     Cake *
---     baker_bake_cake_sync (Baker               *self,
---                           guint                radius,
---                           CakeFlavor           flavor,
---                           CakeFrostingType     frosting,
---                           const char          *message,
---                           GCancellable        *cancellable,
---                           GError             **error)
---     {
---       CakeData *cake_data;
---       GTask *task;
---       Cake *cake;
--- 
---       cake_data = g_slice_new (CakeData);
--- 
---       ...
--- 
---       task = g_task_new (self, cancellable, NULL, NULL);
---       g_task_set_task_data (task, cake_data, (GDestroyNotify) cake_data_free);
---       g_task_set_return_on_cancel (task, TRUE);
---       g_task_run_in_thread_sync (task, bake_cake_thread);
--- 
---       cake = g_task_propagate_pointer (task, error);
---       g_object_unref (task);
---       return cake;
---     }
--- ```
--- 
--- ## Porting from GSimpleAsyncResult
--- 
--- `GTask`'s API attempts to be simpler than `GSimpleAsyncResult`'s
--- in several ways:
--- - You can save task-specific data with `g_task_set_task_data()`, and
---   retrieve it later with `g_task_get_task_data()`. This replaces the
---   abuse of `g_simple_async_result_set_op_res_gpointer()` for the same
---   purpose with `GSimpleAsyncResult`.
--- - In addition to the task data, `GTask` also keeps track of the
---   [priority][io-priority], `GCancellable`, and
---   `GMainContext` associated with the task, so tasks that consist of
---   a chain of simpler asynchronous operations will have easy access
---   to those values when starting each sub-task.
--- - `g_task_return_error_if_cancelled()` provides simplified
---   handling for cancellation. In addition, cancellation
---   overrides any other `GTask` return value by default, like
---   `GSimpleAsyncResult` does when
---   `g_simple_async_result_set_check_cancellable()` is called.
---   (You can use `g_task_set_check_cancellable()` to turn off that
---   behavior.) On the other hand, `g_task_run_in_thread()`
---   guarantees that it will always run your
---   `task_func`, even if the task's `GCancellable`
---   is already cancelled before the task gets a chance to run;
---   you can start your `task_func` with a
---   `g_task_return_error_if_cancelled()` check if you need the
---   old behavior.
--- - The "return" methods (eg, `g_task_return_pointer()`)
---   automatically cause the task to be "completed" as well, and
---   there is no need to worry about the "complete" vs "complete
---   in idle" distinction. (`GTask` automatically figures out
---   whether the task's callback can be invoked directly, or
---   if it needs to be sent to another `GMainContext`, or delayed
---   until the next iteration of the current `GMainContext`.)
--- - The "finish" functions for `GTask` based operations are generally
---   much simpler than `GSimpleAsyncResult` ones, normally consisting
---   of only a single call to `g_task_propagate_pointer()` or the like.
---   Since `g_task_propagate_pointer()` "steals" the return value from
---   the `GTask`, it is not necessary to juggle pointers around to
---   prevent it from being freed twice.
--- - With `GSimpleAsyncResult`, it was common to call
---   `g_simple_async_result_propagate_error()` from the
---   ``_finish()`` wrapper function, and have
---   virtual method implementations only deal with successful
---   returns. This behavior is deprecated, because it makes it
---   difficult for a subclass to chain to a parent class's async
---   methods. Instead, the wrapper function should just be a
---   simple wrapper, and the virtual method should call an
---   appropriate `g_task_propagate_` function.
---   Note that wrapper methods can now use
---   `g_async_result_legacy_propagate_error()` to do old-style
---   `GSimpleAsyncResult` error-returning behavior, and
---   `g_async_result_is_tagged()` to check if a result is tagged as
---   having come from the ``_async()`` wrapper
---   function (for "short-circuit" results, such as when passing
---   0 to `g_input_stream_read_async()`).
--- 
--- ## Thread-safety considerations
--- 
--- Due to some infelicities in the API design, there is a
--- thread-safety concern that users of GTask have to be aware of:
--- 
--- If the `main` thread drops its last reference to the source object
--- or the task data before the task is finalized, then the finalizers
--- of these objects may be called on the worker thread.
--- 
--- This is a problem if the finalizers use non-threadsafe API, and
--- can lead to hard-to-debug crashes. Possible workarounds include:
--- 
--- - Clear task data in a signal handler for `notify::completed`
--- 
--- - Keep iterating a main context in the main thread and defer
---   dropping the reference to the source object to that main
---   context when the task is finalized
---
--- ---
---
---@class Gio.Task : GObject.Object, Gio.AsyncResult
---@operator call: Gio.Task
Gio.Task = {}

--- # method Gio.Task:get_cancellable()
---
--- Gets `task`'s `GCancellable`
---
--- ---
---
---@param self Gio.Task # a `GTask`
---@return Gio.Cancellable # `task`'s `GCancellable`
function Gio.Task:get_cancellable() end

--- # method Gio.Task:get_check_cancellable()
---
--- Gets `task`'s check-cancellable flag. See
--- `g_task_set_check_cancellable()` for more details.
---
--- ---
---
---@param self Gio.Task # the `GTask`
---@return (boolean|nil)
function Gio.Task:get_check_cancellable() end

--- # method Gio.Task:get_completed()
---
--- Gets the value of `GTask`:completed. This changes from `false` to `true` after
--- the task’s callback is invoked, and will return `false` if called from inside
--- the callback.
---
--- ---
---
---@param self Gio.Task # a `GTask`.
---@return (boolean|nil) # `true` if the task has completed, `false` otherwise.
function Gio.Task:get_completed() end

--- # method Gio.Task:get_context()
---
--- Gets the `GMainContext` that `task` will return its result in (that
--- is, the context that was the
--- [thread-default main context][g-main-context-push-thread-default]
--- at the point when `task` was created).
--- 
--- This will always return a non-`nil` value, even if the task's
--- context is the default `GMainContext`.
---
--- ---
---
---@param self Gio.Task # a `GTask`
---@return GLib.MainContext # `task`'s `GMainContext`
function Gio.Task:get_context() end

--- # method Gio.Task:get_name()
---
--- Gets `task`’s name. See `g_task_set_name()`.
---
--- ---
---
---@param self Gio.Task # a `GTask`
---@return string # `task`’s name, or `nil`
function Gio.Task:get_name() end

--- # method Gio.Task:get_priority()
---
--- Gets `task`'s priority
---
--- ---
---
---@param self Gio.Task # a `GTask`
---@return integer # `task`'s priority
function Gio.Task:get_priority() end

--- # method Gio.Task:get_return_on_cancel()
---
--- Gets `task`'s return-on-cancel flag. See
--- `g_task_set_return_on_cancel()` for more details.
---
--- ---
---
---@param self Gio.Task # the `GTask`
---@return (boolean|nil)
function Gio.Task:get_return_on_cancel() end

--- # method Gio.Task:get_source_object()
---
--- Gets the source object from `task`. Like
--- `g_async_result_get_source_object()`, but does not ref the object.
---
--- ---
---
---@param self Gio.Task # a `GTask`
---@return GObject.Object # `task`'s source object, or `nil`
function Gio.Task:get_source_object() end

--- # method Gio.Task:get_source_tag()
---
--- Gets `task`'s source tag. See `g_task_set_source_tag()`.
---
--- ---
---
---@param self Gio.Task # a `GTask`
---@return userdata # `task`'s source tag
function Gio.Task:get_source_tag() end

--- # method Gio.Task:get_task_data()
---
--- Gets `task`'s `task_data`.
---
--- ---
---
---@param self Gio.Task # a `GTask`
---@return userdata # `task`'s `task_data`.
function Gio.Task:get_task_data() end

--- # method Gio.Task:had_error()
---
--- Tests if `task` resulted in an error.
---
--- ---
---
---@param self Gio.Task # a `GTask`.
---@return (boolean|nil) # `true` if the task resulted in an error, `false` otherwise.
function Gio.Task:had_error() end

--- # method Gio.Task:propagate_boolean()
---
--- Gets the result of `task` as a `gboolean`.
--- 
--- If the task resulted in an error, or was cancelled, then this will
--- instead return `false` and set `error`.
--- 
--- Since this method transfers ownership of the return value (or
--- error) to the caller, you may only call it once.
---
--- ---
---
---@param self Gio.Task # a `GTask`.
---@return (boolean|nil) # the task result, or `false` on error
function Gio.Task:propagate_boolean() end

--- # method Gio.Task:propagate_int()
---
--- Gets the result of `task` as an integer (`gssize`).
--- 
--- If the task resulted in an error, or was cancelled, then this will
--- instead return -1 and set `error`.
--- 
--- Since this method transfers ownership of the return value (or
--- error) to the caller, you may only call it once.
---
--- ---
---
---@param self Gio.Task # a `GTask`.
---@return integer # the task result, or -1 on error
function Gio.Task:propagate_int() end

--- # method Gio.Task:propagate_pointer()
---
--- Gets the result of `task` as a pointer, and transfers ownership
--- of that value to the caller.
--- 
--- If the task resulted in an error, or was cancelled, then this will
--- instead return `nil` and set `error`.
--- 
--- Since this method transfers ownership of the return value (or
--- error) to the caller, you may only call it once.
---
--- ---
---
---@param self Gio.Task # a `GTask`
---@return userdata # the task result, or `nil` on error
function Gio.Task:propagate_pointer() end

--- # method Gio.Task:propagate_value()
---
--- Gets the result of `task` as a `GValue`, and transfers ownership of
--- that value to the caller. As with `g_task_return_value()`, this is
--- a generic low-level method; `g_task_propagate_pointer()` and the like
--- will usually be more useful for C code.
--- 
--- If the task resulted in an error, or was cancelled, then this will
--- instead set `error` and return `false`.
--- 
--- Since this method transfers ownership of the return value (or
--- error) to the caller, you may only call it once.
---
--- ---
---
---@param self Gio.Task # a `GTask`
---@param value GObject.Value # return location for the `GValue`
---@return (boolean|nil) # `true` if `task` succeeded, `false` on error.
function Gio.Task:propagate_value(value) end

--- # method Gio.Task:return_boolean()
---
--- Sets `task`'s result to `result` and completes the task (see
--- `g_task_return_pointer()` for more discussion of exactly what this
--- means).
---
--- ---
---
---@param self Gio.Task # a `GTask`.
---@param result (boolean|nil) # the `gboolean` result of a task function.
---@return nil
function Gio.Task:return_boolean(result) end

--- # method Gio.Task:return_error()
---
--- Sets `task`'s result to `error` (which `task` assumes ownership of)
--- and completes the task (see `g_task_return_pointer()` for more
--- discussion of exactly what this means).
--- 
--- Note that since the task takes ownership of `error`, and since the
--- task may be completed before returning from `g_task_return_error()`,
--- you cannot assume that `error` is still valid after calling this.
--- Call `g_error_copy()` on the error if you need to keep a local copy
--- as well.
--- 
--- See also `g_task_return_new_error()`.
---
--- ---
---
---@param self Gio.Task # a `GTask`.
---@param error GLib.Error # the `GError` result of a task function.
---@return nil
function Gio.Task:return_error(error) end

--- # method Gio.Task:return_error_if_cancelled()
---
--- Checks if `task`'s `GCancellable` has been cancelled, and if so, sets
--- `task`'s error accordingly and completes the task (see
--- `g_task_return_pointer()` for more discussion of exactly what this
--- means).
---
--- ---
---
---@param self Gio.Task # a `GTask`
---@return (boolean|nil) # `true` if `task` has been cancelled, `false` if not
function Gio.Task:return_error_if_cancelled() end

--- # method Gio.Task:return_int()
---
--- Sets `task`'s result to `result` and completes the task (see
--- `g_task_return_pointer()` for more discussion of exactly what this
--- means).
---
--- ---
---
---@param self Gio.Task # a `GTask`.
---@param result integer # the integer (`gssize`) result of a task function.
---@return nil
function Gio.Task:return_int(result) end

--- # method Gio.Task:return_pointer()
---
--- Sets `task`'s result to `result` and completes the task. If `result`
--- is not `nil`, then `result_destroy` will be used to free `result` if
--- the caller does not take ownership of it with
--- `g_task_propagate_pointer()`.
--- 
--- "Completes the task" means that for an ordinary asynchronous task
--- it will either invoke the task's callback, or else queue that
--- callback to be invoked in the proper `GMainContext`, or in the next
--- iteration of the current `GMainContext`. For a task run via
--- `g_task_run_in_thread()` or `g_task_run_in_thread_sync()`, calling this
--- method will save `result` to be returned to the caller later, but
--- the task will not actually be completed until the `GTaskThreadFunc`
--- exits.
--- 
--- Note that since the task may be completed before returning from
--- `g_task_return_pointer()`, you cannot assume that `result` is still
--- valid after calling this, unless you are still holding another
--- reference on it.
---
--- ---
---
---@param self Gio.Task # a `GTask`
---@param result? userdata # the pointer result of a task function
---@param result_destroy? GLib.DestroyNotify # a `GDestroyNotify` function.
---@return nil
function Gio.Task:return_pointer(result, result_destroy) end

--- # method Gio.Task:return_value()
---
--- Sets `task`'s result to `result` (by copying it) and completes the task.
--- 
--- If `result` is `nil` then a `GValue` of type %G_TYPE_POINTER
--- with a value of `nil` will be used for the result.
--- 
--- This is a very generic low-level method intended primarily for use
--- by language bindings; for C code, `g_task_return_pointer()` and the
--- like will normally be much easier to use.
---
--- ---
---
---@param self Gio.Task # a `GTask`
---@param result? GObject.Value # the `GValue` result of a task function
---@return nil
function Gio.Task:return_value(result) end

--- # method Gio.Task:run_in_thread()
---
--- Runs `task_func` in another thread. When `task_func` returns, `task`'s
--- `GAsyncReadyCallback` will be invoked in `task`'s `GMainContext`.
--- 
--- This takes a ref on `task` until the task completes.
--- 
--- See `GTaskThreadFunc` for more details about how `task_func` is handled.
--- 
--- Although GLib currently rate-limits the tasks queued via
--- `g_task_run_in_thread()`, you should not assume that it will always
--- do this. If you have a very large number of tasks to run (several tens of
--- tasks), but don't want them to all run at once, you should only queue a
--- limited number of them (around ten) at a time.
---
--- ---
---
---@param self Gio.Task # a `GTask`
---@param task_func Gio.TaskThreadFunc # a `GTaskThreadFunc`
---@return nil
function Gio.Task:run_in_thread(task_func) end

--- # method Gio.Task:run_in_thread_sync()
---
--- Runs `task_func` in another thread, and waits for it to return or be
--- cancelled. You can use `g_task_propagate_pointer()`, etc, afterward
--- to get the result of `task_func`.
--- 
--- See `GTaskThreadFunc` for more details about how `task_func` is handled.
--- 
--- Normally this is used with tasks created with a `nil`
--- `callback`, but note that even if the task does
--- have a callback, it will not be invoked when `task_func` returns.
--- `GTask`:completed will be set to `true` just before this function returns.
--- 
--- Although GLib currently rate-limits the tasks queued via
--- `g_task_run_in_thread_sync()`, you should not assume that it will
--- always do this. If you have a very large number of tasks to run,
--- but don't want them to all run at once, you should only queue a
--- limited number of them at a time.
---
--- ---
---
---@param self Gio.Task # a `GTask`
---@param task_func Gio.TaskThreadFunc # a `GTaskThreadFunc`
---@return nil
function Gio.Task:run_in_thread_sync(task_func) end

--- # method Gio.Task:set_check_cancellable()
---
--- Sets or clears `task`'s check-cancellable flag. If this is `true`
--- (the default), then `g_task_propagate_pointer()`, etc, and
--- `g_task_had_error()` will check the task's `GCancellable` first, and
--- if it has been cancelled, then they will consider the task to have
--- returned an "Operation was cancelled" error
--- (%G_IO_ERROR_CANCELLED), regardless of any other error or return
--- value the task may have had.
--- 
--- If `check_cancellable` is `false`, then the `GTask` will not check the
--- cancellable itself, and it is up to `task`'s owner to do this (eg,
--- via `g_task_return_error_if_cancelled()`).
--- 
--- If you are using `g_task_set_return_on_cancel()` as well, then
--- you must leave check-cancellable set `true`.
---
--- ---
---
---@param self Gio.Task # the `GTask`
---@param check_cancellable (boolean|nil) # whether `GTask` will check the state of its `GCancellable` for you.
---@return nil
function Gio.Task:set_check_cancellable(check_cancellable) end

--- # method Gio.Task:set_name()
---
--- Sets `task`’s name, used in debugging and profiling. The name defaults to
--- `nil`.
--- 
--- The task name should describe in a human readable way what the task does.
--- For example, ‘Open file’ or ‘Connect to network host’. It is used to set the
--- name of the `GSource` used for idle completion of the task.
--- 
--- This function may only be called before the `task` is first used in a thread
--- other than the one it was constructed in. It is called automatically by
--- `g_task_set_source_tag()` if not called already.
---
--- ---
---
---@param self Gio.Task # a `GTask`
---@param name? string # a human readable name for the task, or `nil` to unset it
---@return nil
function Gio.Task:set_name(name) end

--- # method Gio.Task:set_priority()
---
--- Sets `task`'s priority. If you do not call this, it will default to
--- %G_PRIORITY_DEFAULT.
--- 
--- This will affect the priority of `GSources` created with
--- `g_task_attach_source()` and the scheduling of tasks run in threads,
--- and can also be explicitly retrieved later via
--- `g_task_get_priority()`.
---
--- ---
---
---@param self Gio.Task # the `GTask`
---@param priority integer # the [priority][io-priority] of the request
---@return nil
function Gio.Task:set_priority(priority) end

--- # method Gio.Task:set_return_on_cancel()
---
--- Sets or clears `task`'s return-on-cancel flag. This is only
--- meaningful for tasks run via `g_task_run_in_thread()` or
--- `g_task_run_in_thread_sync()`.
--- 
--- If `return_on_cancel` is `true`, then cancelling `task`'s
--- `GCancellable` will immediately cause it to return, as though the
--- task's `GTaskThreadFunc` had called
--- `g_task_return_error_if_cancelled()` and then returned.
--- 
--- This allows you to create a cancellable wrapper around an
--- uninterruptible function. The `GTaskThreadFunc` just needs to be
--- careful that it does not modify any externally-visible state after
--- it has been cancelled. To do that, the thread should call
--- `g_task_set_return_on_cancel()` again to (atomically) set
--- return-on-cancel `false` before making externally-visible changes;
--- if the task gets cancelled before the return-on-cancel flag could
--- be changed, `g_task_set_return_on_cancel()` will indicate this by
--- returning `false`.
--- 
--- You can disable and re-enable this flag multiple times if you wish.
--- If the task's `GCancellable` is cancelled while return-on-cancel is
--- `false`, then calling `g_task_set_return_on_cancel()` to set it `true`
--- again will cause the task to be cancelled at that point.
--- 
--- If the task's `GCancellable` is already cancelled before you call
--- `g_task_run_in_thread()`/`g_task_run_in_thread_sync()`, then the
--- `GTaskThreadFunc` will still be run (for consistency), but the task
--- will also be completed right away.
---
--- ---
---
---@param self Gio.Task # the `GTask`
---@param return_on_cancel (boolean|nil) # whether the task returns automatically when it is cancelled.
---@return (boolean|nil) # `true` if `task`'s return-on-cancel flag was changed to match `return_on_cancel`. `false` if `task` has already been cancelled.
function Gio.Task:set_return_on_cancel(return_on_cancel) end

--- # method Gio.Task:set_source_tag()
---
--- Sets `task`'s source tag.
--- 
--- You can use this to tag a task return
--- value with a particular pointer (usually a pointer to the function
--- doing the tagging) and then later check it using
--- `g_task_get_source_tag()` (or `g_async_result_is_tagged()`) in the
--- task's "finish" function, to figure out if the response came from a
--- particular place.
--- 
--- A macro wrapper around this function will automatically set the
--- task’s name to the string form of `source_tag` if it’s not already
--- set, for convenience.
---
--- ---
---
---@param self Gio.Task # the `GTask`
---@param source_tag? userdata # an opaque pointer indicating the source of this task
---@return nil
function Gio.Task:set_source_tag(source_tag) end

--- # method Gio.Task:set_static_name()
---
--- Sets `task`’s name, used in debugging and profiling.
--- 
--- This is a variant of `g_task_set_name()` that avoids copying `name`.
---
--- ---
---
---@param self Gio.Task # a `GTask`
---@param name? string # a human readable name for the task. Must be a string literal
---@return nil
function Gio.Task:set_static_name(name) end

--- # method Gio.Task:set_task_data()
---
--- Sets `task`'s task data (freeing the existing task data, if any).
---
--- ---
---
---@param self Gio.Task # the `GTask`
---@param task_data? userdata # task-specific data
---@param task_data_destroy? GLib.DestroyNotify # `GDestroyNotify` for `task_data`
---@return nil
function Gio.Task:set_task_data(task_data, task_data_destroy) end

--- # function Gio.Task.is_valid()
---
--- Checks that `result` is a `GTask`, and that `source_object` is its
--- source object (or that `source_object` is `nil` and `result` has no
--- source object). This can be used in `g_return_if_fail()` checks.
---
--- ---
---
---@param result Gio.AsyncResult # A `GAsyncResult`
---@param source_object? GObject.Object # the source object expected to be associated with the task
---@return (boolean|nil) # `true` if `result` and `source_object` are valid, `false` if not
function Gio.Task.is_valid(result, source_object) end

--- # function Gio.Task.report_error()
---
--- Creates a `GTask` and then immediately calls `g_task_return_error()`
--- on it. Use this in the wrapper function of an asynchronous method
--- when you want to avoid even calling the virtual method. You can
--- then use `g_async_result_is_tagged()` in the finish method wrapper to
--- check if the result there is tagged as having been created by the
--- wrapper method, and deal with it appropriately if so.
--- 
--- See also `g_task_report_new_error()`.
---
--- ---
---
---@param source_object? GObject.Object # the `GObject` that owns this task, or `nil`.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`.
---@param callback_data? userdata # user data passed to `callback`.
---@param source_tag? userdata # an opaque pointer indicating the source of this task
---@param error GLib.Error # error to report
---@return nil
function Gio.Task.report_error(source_object, callback, callback_data, source_tag, error) end

--- # function Gio.Task.new()
---
--- Creates a `GTask` acting on `source_object`, which will eventually be
--- used to invoke `callback` in the current
--- [thread-default main context][g-main-context-push-thread-default].
--- 
--- Call this in the "start" method of your asynchronous method, and
--- pass the `GTask` around throughout the asynchronous operation. You
--- can use `g_task_set_task_data()` to attach task-specific data to the
--- object, which you can retrieve later via `g_task_get_task_data()`.
--- 
--- By default, if `cancellable` is cancelled, then the return value of
--- the task will always be %G_IO_ERROR_CANCELLED, even if the task had
--- already completed before the cancellation. This allows for
--- simplified handling in cases where cancellation may imply that
--- other objects that the task depends on have been destroyed. If you
--- do not want this behavior, you can use
--- `g_task_set_check_cancellable()` to change it.
---
--- ---
---
---@param source_object? GObject.Object # the `GObject` that owns this task, or `nil`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`.
---@param callback_data? userdata # user data passed to `callback`.
---@return Gio.Task # a `GTask`.
function Gio.Task.new(source_object, cancellable, callback, callback_data) end

--- # record Gio.TaskClass
---
---@class Gio.TaskClass
Gio.TaskClass = {}

---@alias Gio.TaskThreadFunc fun(task: Gio.Task, source_object: GObject.Object, task_data: userdata, cancellable: Gio.Cancellable): nil

--- # class Gio.TcpConnection
---
--- This is the subclass of `GSocketConnection` that is created
--- for TCP/IP sockets.
---
--- ---
---
---@class Gio.TcpConnection : Gio.SocketConnection
---@field parent_instance Gio.SocketConnection
---@field priv Gio.TcpConnectionPrivate
Gio.TcpConnection = {}

--- # method Gio.TcpConnection:get_graceful_disconnect()
---
--- Checks if graceful disconnects are used. See
--- `g_tcp_connection_set_graceful_disconnect()`.
---
--- ---
---
---@param self Gio.TcpConnection # a `GTcpConnection`
---@return (boolean|nil) # `true` if graceful disconnect is used on close, `false` otherwise
function Gio.TcpConnection:get_graceful_disconnect() end

--- # method Gio.TcpConnection:set_graceful_disconnect()
---
--- This enables graceful disconnects on close. A graceful disconnect
--- means that we signal the receiving end that the connection is terminated
--- and wait for it to close the connection before closing the connection.
--- 
--- A graceful disconnect means that we can be sure that we successfully sent
--- all the outstanding data to the other end, or get an error reported.
--- However, it also means we have to wait for all the data to reach the
--- other side and for it to acknowledge this by closing the socket, which may
--- take a while. For this reason it is disabled by default.
---
--- ---
---
---@param self Gio.TcpConnection # a `GTcpConnection`
---@param graceful_disconnect (boolean|nil) # Whether to do graceful disconnects or not
---@return nil
function Gio.TcpConnection:set_graceful_disconnect(graceful_disconnect) end

--- # record Gio.TcpConnectionClass
---
---@class Gio.TcpConnectionClass
---@field parent_class Gio.SocketConnectionClass
Gio.TcpConnectionClass = {}

--- # record Gio.TcpConnectionPrivate
---
---@class Gio.TcpConnectionPrivate
Gio.TcpConnectionPrivate = {}

--- # class Gio.TcpWrapperConnection
---
--- A `GTcpWrapperConnection` can be used to wrap a `GIOStream` that is
--- based on a `GSocket`, but which is not actually a
--- `GSocketConnection`. This is used by `GSocketClient` so that it can
--- always return a `GSocketConnection`, even when the connection it has
--- actually created is not directly a `GSocketConnection`.
---
--- ---
---
---@class Gio.TcpWrapperConnection : Gio.TcpConnection
---@field parent_instance Gio.TcpConnection
---@field priv Gio.TcpWrapperConnectionPrivate
---@operator call: Gio.TcpWrapperConnection
Gio.TcpWrapperConnection = {}

--- # method Gio.TcpWrapperConnection:get_base_io_stream()
---
--- Gets `conn`'s base `GIOStream`
---
--- ---
---
---@param self Gio.TcpWrapperConnection # a `GTcpWrapperConnection`
---@return Gio.IOStream # `conn`'s base `GIOStream`
function Gio.TcpWrapperConnection:get_base_io_stream() end

--- # function Gio.TcpWrapperConnection.new()
---
--- Wraps `base_io_stream` and `socket` together as a `GSocketConnection`.
---
--- ---
---
---@param base_io_stream Gio.IOStream # the `GIOStream` to wrap
---@param socket Gio.Socket # the `GSocket` associated with `base_io_stream`
---@return Gio.SocketConnection # the new `GSocketConnection`.
function Gio.TcpWrapperConnection.new(base_io_stream, socket) end

--- # record Gio.TcpWrapperConnectionClass
---
---@class Gio.TcpWrapperConnectionClass
---@field parent_class Gio.TcpConnectionClass
Gio.TcpWrapperConnectionClass = {}

--- # record Gio.TcpWrapperConnectionPrivate
---
---@class Gio.TcpWrapperConnectionPrivate
Gio.TcpWrapperConnectionPrivate = {}

--- # class Gio.TestDBus
---
--- A helper class for testing code which uses D-Bus without touching the user's
--- session bus.
--- 
--- Note that `GTestDBus` modifies the user’s environment, calling `setenv()`.
--- This is not thread-safe, so all `GTestDBus` calls should be completed before
--- threads are spawned, or should have appropriate locking to ensure no access
--- conflicts to environment variables shared between `GTestDBus` and other
--- threads.
--- 
--- ## Creating unit tests using GTestDBus
--- 
--- Testing of D-Bus services can be tricky because normally we only ever run
--- D-Bus services over an existing instance of the D-Bus daemon thus we
--- usually don't activate D-Bus services that are not yet installed into the
--- target system. The `GTestDBus` object makes this easier for us by taking care
--- of the lower level tasks such as running a private D-Bus daemon and looking
--- up uninstalled services in customizable locations, typically in your source
--- code tree.
--- 
--- The first thing you will need is a separate service description file for the
--- D-Bus daemon. Typically a `services` subdirectory of your `tests` directory
--- is a good place to put this file.
--- 
--- The service file should list your service along with an absolute path to the
--- uninstalled service executable in your source tree. Using autotools we would
--- achieve this by adding a file such as `my-server.service.in` in the services
--- directory and have it processed by configure.
--- ```c
---     [D-BUS Service]
---     Name=org.gtk.GDBus.Examples.ObjectManager
---     Exec=`abs_top_builddir`@/gio/tests/gdbus-example-objectmanager-server
--- ```
--- You will also need to indicate this service directory in your test
--- fixtures, so you will need to pass the path while compiling your
--- test cases. Typically this is done with autotools with an added
--- preprocessor flag specified to compile your tests such as:
--- ```c
---     -DTEST_SERVICES=\""$(abs_top_builddir)/tests/services"\"
--- ```
---     Once you have a service definition file which is local to your source tree,
--- you can proceed to set up a GTest fixture using the `GTestDBus` scaffolding.
--- 
--- An example of a test fixture for D-Bus services can be found
--- here:
--- [gdbus-test-fixture.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gdbus-test-fixture.c)
--- 
--- Note that these examples only deal with isolating the D-Bus aspect of your
--- service. To successfully run isolated unit tests on your service you may need
--- some additional modifications to your test case fixture. For example; if your
--- service uses GSettings and installs a schema then it is important that your test service
--- not load the schema in the ordinary installed location (chances are that your service
--- and schema files are not yet installed, or worse; there is an older version of the
--- schema file sitting in the install location).
--- 
--- Most of the time we can work around these obstacles using the
--- environment. Since the environment is inherited by the D-Bus daemon
--- created by `GTestDBus` and then in turn inherited by any services the
--- D-Bus daemon activates, using the setup routine for your fixture is
--- a practical place to help sandbox your runtime environment. For the
--- rather typical GSettings case we can work around this by setting
--- `GSETTINGS_SCHEMA_DIR` to the in tree directory holding your schemas
--- in the above `fixture_setup()` routine.
--- 
--- The GSettings schemas need to be locally pre-compiled for this to work. This can be achieved
--- by compiling the schemas locally as a step before running test cases, an autotools setup might
--- do the following in the directory holding schemas:
--- ```c
---     all-am:
---             $(GLIB_COMPILE_SCHEMAS) .
--- 
---     CLEANFILES += gschemas.compiled
--- ```
---
--- ---
---
---@class Gio.TestDBus : GObject.Object
---@operator call: Gio.TestDBus
Gio.TestDBus = {}

--- # method Gio.TestDBus:add_service_dir()
---
--- Add a path where dbus-daemon will look up .service files. This can't be
--- called after `g_test_dbus_up()`.
---
--- ---
---
---@param self Gio.TestDBus # a `GTestDBus`
---@param path string # path to a directory containing .service files
---@return nil
function Gio.TestDBus:add_service_dir(path) end

--- # method Gio.TestDBus:down()
---
--- Stop the session bus started by `g_test_dbus_up()`.
--- 
--- This will wait for the singleton returned by `g_bus_get()` or `g_bus_get_sync()`
--- to be destroyed. This is done to ensure that the next unit test won't get a
--- leaked singleton from this test.
---
--- ---
---
---@param self Gio.TestDBus # a `GTestDBus`
---@return nil
function Gio.TestDBus:down() end

--- # method Gio.TestDBus:get_bus_address()
---
--- Get the address on which dbus-daemon is running. If `g_test_dbus_up()` has not
--- been called yet, `nil` is returned. This can be used with
--- `g_dbus_connection_new_for_address()`.
---
--- ---
---
---@param self Gio.TestDBus # a `GTestDBus`
---@return string # the address of the bus, or `nil`.
function Gio.TestDBus:get_bus_address() end

--- # method Gio.TestDBus:get_flags()
---
--- Get the flags of the `GTestDBus` object.
---
--- ---
---
---@param self Gio.TestDBus # a `GTestDBus`
---@return Gio.TestDBusFlags # the value of `GTestDBus`:flags property
function Gio.TestDBus:get_flags() end

--- # method Gio.TestDBus:stop()
---
--- Stop the session bus started by `g_test_dbus_up()`.
--- 
--- Unlike `g_test_dbus_down()`, this won't verify the `GDBusConnection`
--- singleton returned by `g_bus_get()` or `g_bus_get_sync()` is destroyed. Unit
--- tests wanting to verify behaviour after the session bus has been stopped
--- can use this function but should still call `g_test_dbus_down()` when done.
---
--- ---
---
---@param self Gio.TestDBus # a `GTestDBus`
---@return nil
function Gio.TestDBus:stop() end

--- # method Gio.TestDBus:up()
---
--- Start a dbus-daemon instance and set DBUS_SESSION_BUS_ADDRESS. After this
--- call, it is safe for unit tests to start sending messages on the session bus.
--- 
--- If this function is called from setup callback of `g_test_add()`,
--- `g_test_dbus_down()` must be called in its teardown callback.
--- 
--- If this function is called from unit test's `main()`, then `g_test_dbus_down()`
--- must be called after `g_test_run()`.
---
--- ---
---
---@param self Gio.TestDBus # a `GTestDBus`
---@return nil
function Gio.TestDBus:up() end

--- # function Gio.TestDBus.unset()
---
--- Unset DISPLAY and DBUS_SESSION_BUS_ADDRESS env variables to ensure the test
--- won't use user's session bus.
--- 
--- This is useful for unit tests that want to verify behaviour when no session
--- bus is running. It is not necessary to call this if unit test already calls
--- `g_test_dbus_up()` before acquiring the session bus.
---
--- ---
---
---@return nil
function Gio.TestDBus.unset() end

--- # function Gio.TestDBus.new()
---
--- Create a new `GTestDBus` object.
---
--- ---
---
---@param flags Gio.TestDBusFlags # a `GTestDBusFlags`
---@return Gio.TestDBus # a new `GTestDBus`.
function Gio.TestDBus.new(flags) end

---@enum Gio.TestDBusFlags
Gio.TestDBusFlags = {}

--- # class Gio.ThemedIcon
---
--- `GThemedIcon` is an implementation of `GIcon` that supports icon themes.
--- `GThemedIcon` contains a list of all of the icons present in an icon
--- theme, so that icons can be looked up quickly. `GThemedIcon` does
--- not provide actual pixmaps for icons, just the icon names.
--- Ideally something like `gtk_icon_theme_choose_icon()` should be used to
--- resolve the list of names so that fallback icons work nicely with
--- themes that inherit other themes.
---
--- ---
---
---@class Gio.ThemedIcon : GObject.Object, Gio.Icon
---@operator call: Gio.ThemedIcon
Gio.ThemedIcon = {}

--- # method Gio.ThemedIcon:append_name()
---
--- Append a name to the list of icons from within `icon`.
--- 
--- Note that doing so invalidates the hash computed by prior calls
--- to `g_icon_hash()`.
---
--- ---
---
---@param self Gio.ThemedIcon # a `GThemedIcon`
---@param iconname string # name of icon to append to list of icons from within `icon`.
---@return nil
function Gio.ThemedIcon:append_name(iconname) end

--- # method Gio.ThemedIcon:get_names()
---
--- Gets the names of icons from within `icon`.
---
--- ---
---
---@param self Gio.ThemedIcon # a `GThemedIcon`.
---@return unknown[] # a list of icon names.
function Gio.ThemedIcon:get_names() end

--- # method Gio.ThemedIcon:prepend_name()
---
--- Prepend a name to the list of icons from within `icon`.
--- 
--- Note that doing so invalidates the hash computed by prior calls
--- to `g_icon_hash()`.
---
--- ---
---
---@param self Gio.ThemedIcon # a `GThemedIcon`
---@param iconname string # name of icon to prepend to list of icons from within `icon`.
---@return nil
function Gio.ThemedIcon:prepend_name(iconname) end

--- # function Gio.ThemedIcon.new()
---
--- Creates a new themed icon for `iconname`.
---
--- ---
---
---@param iconname string # a string containing an icon name.
---@return Gio.ThemedIcon # a new `GThemedIcon`.
function Gio.ThemedIcon.new(iconname) end

--- # function Gio.ThemedIcon.new_from_names()
---
--- Creates a new themed icon for `iconnames`.
---
--- ---
---
---@param iconnames unknown[] # an array of strings containing icon names.
---@param len integer # the length of the `iconnames` array, or -1 if `iconnames` is `nil`-terminated
---@return Gio.ThemedIcon # a new `GThemedIcon`
function Gio.ThemedIcon.new_from_names(iconnames, len) end

--- # function Gio.ThemedIcon.new_with_default_fallbacks()
---
--- Creates a new themed icon for `iconname`, and all the names
--- that can be created by shortening `iconname` at '-' characters.
--- 
--- In the following example, `icon1` and `icon2` are equivalent:
--- ```c
--- const char *names[] = {
---   "gnome-dev-cdrom-audio",
---   "gnome-dev-cdrom",
---   "gnome-dev",
---   "gnome"
--- };
--- 
--- icon1 = g_themed_icon_new_from_names (names, 4);
--- icon2 = g_themed_icon_new_with_default_fallbacks ("gnome-dev-cdrom-audio");
--- ```
---
--- ---
---
---@param iconname string # a string containing an icon name
---@return Gio.ThemedIcon # a new `GThemedIcon`.
function Gio.ThemedIcon.new_with_default_fallbacks(iconname) end

--- # record Gio.ThemedIconClass
---
---@class Gio.ThemedIconClass
Gio.ThemedIconClass = {}

--- # class Gio.ThreadedSocketService
---
--- A `GThreadedSocketService` is a simple subclass of `GSocketService`
--- that handles incoming connections by creating a worker thread and
--- dispatching the connection to it by emitting the
--- `GThreadedSocketService`::run signal in the new thread.
--- 
--- The signal handler may perform blocking IO and need not return
--- until the connection is closed.
--- 
--- The service is implemented using a thread pool, so there is a
--- limited amount of threads available to serve incoming requests.
--- The service automatically stops the `GSocketService` from accepting
--- new connections when all threads are busy.
--- 
--- As with `GSocketService`, you may connect to `GThreadedSocketService`::run,
--- or subclass and override the default handler.
---
--- ---
---
---@class Gio.ThreadedSocketService : Gio.SocketService
---@field parent_instance Gio.SocketService
---@field priv Gio.ThreadedSocketServicePrivate
---@operator call: Gio.ThreadedSocketService
Gio.ThreadedSocketService = {}

--- # function Gio.ThreadedSocketService.new()
---
--- Creates a new `GThreadedSocketService` with no listeners. Listeners
--- must be added with one of the `GSocketListener` "add" methods.
---
--- ---
---
---@param max_threads integer # the maximal number of threads to execute concurrently handling incoming clients, -1 means no limit
---@return Gio.SocketService # a new `GSocketService`.
function Gio.ThreadedSocketService.new(max_threads) end

--- # record Gio.ThreadedSocketServiceClass
---
---@class Gio.ThreadedSocketServiceClass
---@field parent_class Gio.SocketServiceClass
---@field run fun(service: Gio.ThreadedSocketService, connection: Gio.SocketConnection, source_object: GObject.Object): (boolean|nil)
Gio.ThreadedSocketServiceClass = {}

--- # record Gio.ThreadedSocketServicePrivate
---
---@class Gio.ThreadedSocketServicePrivate
Gio.ThreadedSocketServicePrivate = {}

---@enum Gio.TlsAuthenticationMode
Gio.TlsAuthenticationMode = {}

--- # interface Gio.TlsBackend
---
--- TLS (Transport Layer Security, aka SSL) and DTLS backend.
---
--- ---
---
---@class Gio.TlsBackend
Gio.TlsBackend = {}

--- # method Gio.TlsBackend:get_certificate_type()
---
--- Gets the `GType` of `backend`'s `GTlsCertificate` implementation.
---
--- ---
---
---@param self Gio.TlsBackend # the `GTlsBackend`
---@return Gio.GType # the `GType` of `backend`'s `GTlsCertificate` implementation.
function Gio.TlsBackend:get_certificate_type() end

--- # method Gio.TlsBackend:get_client_connection_type()
---
--- Gets the `GType` of `backend`'s `GTlsClientConnection` implementation.
---
--- ---
---
---@param self Gio.TlsBackend # the `GTlsBackend`
---@return Gio.GType # the `GType` of `backend`'s `GTlsClientConnection` implementation.
function Gio.TlsBackend:get_client_connection_type() end

--- # method Gio.TlsBackend:get_default_database()
---
--- Gets the default `GTlsDatabase` used to verify TLS connections.
---
--- ---
---
---@param self Gio.TlsBackend # the `GTlsBackend`
---@return Gio.TlsDatabase # the default database, which should be unreffed when done.
function Gio.TlsBackend:get_default_database() end

--- # method Gio.TlsBackend:get_dtls_client_connection_type()
---
--- Gets the `GType` of `backend`’s `GDtlsClientConnection` implementation.
---
--- ---
---
---@param self Gio.TlsBackend # the `GTlsBackend`
---@return Gio.GType # the `GType` of `backend`’s `GDtlsClientConnection` implementation, or %G_TYPE_INVALID if this backend doesn’t support DTLS.
function Gio.TlsBackend:get_dtls_client_connection_type() end

--- # method Gio.TlsBackend:get_dtls_server_connection_type()
---
--- Gets the `GType` of `backend`’s `GDtlsServerConnection` implementation.
---
--- ---
---
---@param self Gio.TlsBackend # the `GTlsBackend`
---@return Gio.GType # the `GType` of `backend`’s `GDtlsServerConnection` implementation, or %G_TYPE_INVALID if this backend doesn’t support DTLS.
function Gio.TlsBackend:get_dtls_server_connection_type() end

--- # method Gio.TlsBackend:get_file_database_type()
---
--- Gets the `GType` of `backend`'s `GTlsFileDatabase` implementation.
---
--- ---
---
---@param self Gio.TlsBackend # the `GTlsBackend`
---@return Gio.GType # the `GType` of backend's `GTlsFileDatabase` implementation.
function Gio.TlsBackend:get_file_database_type() end

--- # method Gio.TlsBackend:get_server_connection_type()
---
--- Gets the `GType` of `backend`'s `GTlsServerConnection` implementation.
---
--- ---
---
---@param self Gio.TlsBackend # the `GTlsBackend`
---@return Gio.GType # the `GType` of `backend`'s `GTlsServerConnection` implementation.
function Gio.TlsBackend:get_server_connection_type() end

--- # method Gio.TlsBackend:set_default_database()
---
--- Set the default `GTlsDatabase` used to verify TLS connections
--- 
--- Any subsequent call to `g_tls_backend_get_default_database()` will return
--- the database set in this call.  Existing databases and connections are not
--- modified.
--- 
--- Setting a `nil` default database will reset to using the system default
--- database as if `g_tls_backend_set_default_database()` had never been called.
---
--- ---
---
---@param self Gio.TlsBackend # the `GTlsBackend`
---@param database? Gio.TlsDatabase # the `GTlsDatabase`
---@return nil
function Gio.TlsBackend:set_default_database(database) end

--- # method Gio.TlsBackend:supports_dtls()
---
--- Checks if DTLS is supported. DTLS support may not be available even if TLS
--- support is available, and vice-versa.
---
--- ---
---
---@param self Gio.TlsBackend # the `GTlsBackend`
---@return (boolean|nil) # whether DTLS is supported
function Gio.TlsBackend:supports_dtls() end

--- # method Gio.TlsBackend:supports_tls()
---
--- Checks if TLS is supported; if this returns `false` for the default
--- `GTlsBackend`, it means no "real" TLS backend is available.
---
--- ---
---
---@param self Gio.TlsBackend # the `GTlsBackend`
---@return (boolean|nil) # whether or not TLS is supported
function Gio.TlsBackend:supports_tls() end

--- # function Gio.TlsBackend.get_default()
---
--- Gets the default `GTlsBackend` for the system.
---
--- ---
---
---@return Gio.TlsBackend # a `GTlsBackend`, which will be a dummy object if no TLS backend is available
function Gio.TlsBackend.get_default() end

--- # record Gio.TlsBackendInterface
---
--- Provides an interface for describing TLS-related types.
---
--- ---
---
---@class Gio.TlsBackendInterface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field supports_tls fun(backend: Gio.TlsBackend): (boolean|nil)
---@field get_certificate_type fun(): Gio.GType
---@field get_client_connection_type fun(): Gio.GType
---@field get_server_connection_type fun(): Gio.GType
---@field get_file_database_type fun(): Gio.GType
---@field get_default_database fun(backend: Gio.TlsBackend): Gio.TlsDatabase
---@field supports_dtls fun(backend: Gio.TlsBackend): (boolean|nil)
---@field get_dtls_client_connection_type fun(): Gio.GType
---@field get_dtls_server_connection_type fun(): Gio.GType
Gio.TlsBackendInterface = {}

--- # class Gio.TlsCertificate
---
--- A certificate used for TLS authentication and encryption.
--- This can represent either a certificate only (eg, the certificate
--- received by a client from a server), or the combination of
--- a certificate and a private key (which is needed when acting as a
--- `GTlsServerConnection`).
---
--- ---
---
---@class Gio.TlsCertificate : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.TlsCertificatePrivate
Gio.TlsCertificate = {}

--- # method Gio.TlsCertificate:get_dns_names()
---
--- Gets the value of `GTlsCertificate`:dns-names.
---
--- ---
---
---@param self Gio.TlsCertificate # a `GTlsCertificate`
---@return unknown[] # A `GPtrArray` of `GBytes` elements, or `nil` if it's not available.
function Gio.TlsCertificate:get_dns_names() end

--- # method Gio.TlsCertificate:get_ip_addresses()
---
--- Gets the value of `GTlsCertificate`:ip-addresses.
---
--- ---
---
---@param self Gio.TlsCertificate # a `GTlsCertificate`
---@return unknown[] # A `GPtrArray` of `GInetAddress` elements, or `nil` if it's not available.
function Gio.TlsCertificate:get_ip_addresses() end

--- # method Gio.TlsCertificate:get_issuer()
---
--- Gets the `GTlsCertificate` representing `cert`'s issuer, if known
---
--- ---
---
---@param self Gio.TlsCertificate # a `GTlsCertificate`
---@return Gio.TlsCertificate # The certificate of `cert`'s issuer, or `nil` if `cert` is self-signed or signed with an unknown certificate.
function Gio.TlsCertificate:get_issuer() end

--- # method Gio.TlsCertificate:get_issuer_name()
---
--- Returns the issuer name from the certificate.
---
--- ---
---
---@param self Gio.TlsCertificate # a `GTlsCertificate`
---@return string # The issuer name, or `nil` if it's not available.
function Gio.TlsCertificate:get_issuer_name() end

--- # method Gio.TlsCertificate:get_not_valid_after()
---
--- Returns the time at which the certificate became or will become invalid.
---
--- ---
---
---@param self Gio.TlsCertificate # a `GTlsCertificate`
---@return GLib.DateTime # The not-valid-after date, or `nil` if it's not available.
function Gio.TlsCertificate:get_not_valid_after() end

--- # method Gio.TlsCertificate:get_not_valid_before()
---
--- Returns the time at which the certificate became or will become valid.
---
--- ---
---
---@param self Gio.TlsCertificate # a `GTlsCertificate`
---@return GLib.DateTime # The not-valid-before date, or `nil` if it's not available.
function Gio.TlsCertificate:get_not_valid_before() end

--- # method Gio.TlsCertificate:get_subject_name()
---
--- Returns the subject name from the certificate.
---
--- ---
---
---@param self Gio.TlsCertificate # a `GTlsCertificate`
---@return string # The subject name, or `nil` if it's not available.
function Gio.TlsCertificate:get_subject_name() end

--- # method Gio.TlsCertificate:is_same()
---
--- Check if two `GTlsCertificate` objects represent the same certificate.
--- The raw DER byte data of the two certificates are checked for equality.
--- This has the effect that two certificates may compare equal even if
--- their `GTlsCertificate`:issuer, `GTlsCertificate`:private-key, or
--- `GTlsCertificate`:private-key-pem properties differ.
---
--- ---
---
---@param self Gio.TlsCertificate # first certificate to compare
---@param cert_two Gio.TlsCertificate # second certificate to compare
---@return (boolean|nil) # whether the same or not
function Gio.TlsCertificate:is_same(cert_two) end

--- # method Gio.TlsCertificate:verify()
---
--- This verifies `cert` and returns a set of `GTlsCertificateFlags`
--- indicating any problems found with it. This can be used to verify a
--- certificate outside the context of making a connection, or to
--- check a certificate against a CA that is not part of the system
--- CA database.
--- 
--- If `cert` is valid, %G_TLS_CERTIFICATE_NO_FLAGS is returned.
--- 
--- If `identity` is not `nil`, `cert`'s name(s) will be compared against
--- it, and %G_TLS_CERTIFICATE_BAD_IDENTITY will be set in the return
--- value if it does not match. If `identity` is `nil`, that bit will
--- never be set in the return value.
--- 
--- If `trusted_ca` is not `nil`, then `cert` (or one of the certificates
--- in its chain) must be signed by it, or else
--- %G_TLS_CERTIFICATE_UNKNOWN_CA will be set in the return value. If
--- `trusted_ca` is `nil`, that bit will never be set in the return
--- value.
--- 
--- GLib guarantees that if certificate verification fails, at least one
--- error will be set in the return value, but it does not guarantee
--- that all possible errors will be set. Accordingly, you may not safely
--- decide to ignore any particular type of error. For example, it would
--- be incorrect to mask %G_TLS_CERTIFICATE_EXPIRED if you want to allow
--- expired certificates, because this could potentially be the only
--- error flag set even if other problems exist with the certificate.
--- 
--- Because TLS session context is not used, `GTlsCertificate` may not
--- perform as many checks on the certificates as `GTlsConnection` would.
--- For example, certificate constraints may not be honored, and
--- revocation checks may not be performed. The best way to verify TLS
--- certificates used by a TLS connection is to let `GTlsConnection`
--- handle the verification.
---
--- ---
---
---@param self Gio.TlsCertificate # a `GTlsCertificate`
---@param identity? Gio.SocketConnectable # the expected peer identity
---@param trusted_ca? Gio.TlsCertificate # the certificate of a trusted authority
---@return Gio.TlsCertificateFlags # the appropriate `GTlsCertificateFlags`
function Gio.TlsCertificate:verify(identity, trusted_ca) end

--- # function Gio.TlsCertificate.list_new_from_file()
---
--- Creates one or more `GTlsCertificates` from the PEM-encoded
--- data in `file`. If `file` cannot be read or parsed, the function will
--- return `nil` and set `error`. If `file` does not contain any
--- PEM-encoded certificates, this will return an empty list and not
--- set `error`.
---
--- ---
---
---@param file string # file containing PEM-encoded certificates to import
---@return Gio.TlsCertificate[] # a `GList` containing `GTlsCertificate` objects. You must free the list and its contents when you are done with it.
function Gio.TlsCertificate.list_new_from_file(file) end

--- # function Gio.TlsCertificate.new_from_file()
---
--- Creates a `GTlsCertificate` from the data in `file`.
--- 
--- As of 2.72, if the filename ends in `.p12` or `.pfx` the data is loaded by
--- g_tls_certificate_new_from_pkcs12() otherwise it is loaded by
--- `g_tls_certificate_new_from_pem()`. See those functions for
--- exact details.
--- 
--- If `file` cannot be read or parsed, the function will return `nil` and
--- set `error`.
---
--- ---
---
---@param file string # file containing a certificate to import
---@return Gio.TlsCertificate # the new certificate, or `nil` on error
function Gio.TlsCertificate.new_from_file(file) end

--- # function Gio.TlsCertificate.new_from_file_with_password()
---
--- Creates a `GTlsCertificate` from the data in `file`.
--- 
--- If `file` cannot be read or parsed, the function will return `nil` and
--- set `error`.
--- 
--- Any unknown file types will error with %G_IO_ERROR_NOT_SUPPORTED.
--- Currently only `.p12` and `.pfx` files are supported.
--- See g_tls_certificate_new_from_pkcs12() for more details.
---
--- ---
---
---@param file string # file containing a certificate to import
---@param password string # password for PKCS #12 files
---@return Gio.TlsCertificate # the new certificate, or `nil` on error
function Gio.TlsCertificate.new_from_file_with_password(file, password) end

--- # function Gio.TlsCertificate.new_from_files()
---
--- Creates a `GTlsCertificate` from the PEM-encoded data in `cert_file`
--- and `key_file`. The returned certificate will be the first certificate
--- found in `cert_file`. As of GLib 2.44, if `cert_file` contains more
--- certificates it will try to load a certificate chain. All
--- certificates will be verified in the order found (top-level
--- certificate should be the last one in the file) and the
--- `GTlsCertificate`:issuer property of each certificate will be set
--- accordingly if the verification succeeds. If any certificate in the
--- chain cannot be verified, the first certificate in the file will
--- still be returned.
--- 
--- If either file cannot be read or parsed, the function will return
--- `nil` and set `error`. Otherwise, this behaves like
--- `g_tls_certificate_new_from_pem()`.
---
--- ---
---
---@param cert_file string # file containing one or more PEM-encoded certificates to import
---@param key_file string # file containing a PEM-encoded private key to import
---@return Gio.TlsCertificate # the new certificate, or `nil` on error
function Gio.TlsCertificate.new_from_files(cert_file, key_file) end

--- # function Gio.TlsCertificate.new_from_pem()
---
--- Creates a `GTlsCertificate` from the PEM-encoded data in `data`. If
--- `data` includes both a certificate and a private key, then the
--- returned certificate will include the private key data as well. (See
--- the `GTlsCertificate`:private-key-pem property for information about
--- supported formats.)
--- 
--- The returned certificate will be the first certificate found in
--- `data`. As of GLib 2.44, if `data` contains more certificates it will
--- try to load a certificate chain. All certificates will be verified in
--- the order found (top-level certificate should be the last one in the
--- file) and the `GTlsCertificate`:issuer property of each certificate
--- will be set accordingly if the verification succeeds. If any
--- certificate in the chain cannot be verified, the first certificate in
--- the file will still be returned.
---
--- ---
---
---@param data string # PEM-encoded certificate data
---@param length integer # the length of `data`, or -1 if it's 0-terminated.
---@return Gio.TlsCertificate # the new certificate, or `nil` if `data` is invalid
function Gio.TlsCertificate.new_from_pem(data, length) end

--- # function Gio.TlsCertificate.new_from_pkcs11_uris()
---
--- Creates a `GTlsCertificate` from a
--- [PKCS \#11](https://docs.oasis-open.org/pkcs11/pkcs11-base/v3.0/os/pkcs11-base-v3.0-os.html) URI.
--- 
--- An example `pkcs11_uri` would be `pkcs11:model=Model;manufacturer=Manufacture;serial=1;token=My%20Client%20Certificate;id=%01`
--- 
--- Where the token’s layout is:
--- 
--- ```c
--- Object 0:
---   URL: pkcs11:model=Model;manufacturer=Manufacture;serial=1;token=My%20Client%20Certificate;id=%01;object=private%20key;type=private
---   Type: Private key (RSA-2048)
---   ID: 01
--- 
--- Object 1:
---   URL: pkcs11:model=Model;manufacturer=Manufacture;serial=1;token=My%20Client%20Certificate;id=%01;object=Certificate%20for%20Authentication;type=cert
---   Type: X.509 Certificate (RSA-2048)
---   ID: 01
--- ```
--- 
--- In this case the certificate and private key would both be detected and used as expected.
--- `pkcs_uri` may also just reference an X.509 certificate object and then optionally
--- `private_key_pkcs11_uri` allows using a private key exposed under a different URI.
--- 
--- Note that the private key is not accessed until usage and may fail or require a PIN later.
---
--- ---
---
---@param pkcs11_uri string # A PKCS \#11 URI
---@param private_key_pkcs11_uri? string # A PKCS \#11 URI
---@return Gio.TlsCertificate # the new certificate, or `nil` on error
function Gio.TlsCertificate.new_from_pkcs11_uris(pkcs11_uri, private_key_pkcs11_uri) end

--- # function Gio.TlsCertificate.new_from_pkcs12()
---
--- Creates a `GTlsCertificate` from the data in `data`. It must contain
--- a certificate and matching private key.
--- 
--- If extra certificates are included they will be verified as a chain
--- and the `GTlsCertificate`:issuer property will be set.
--- All other data will be ignored.
--- 
--- You can pass as single password for all of the data which will be
--- used both for the PKCS #12 container as well as encrypted
--- private keys. If decryption fails it will error with
--- %G_TLS_ERROR_BAD_CERTIFICATE_PASSWORD.
--- 
--- This constructor requires support in the current `GTlsBackend`.
--- If support is missing it will error with
--- %G_IO_ERROR_NOT_SUPPORTED.
--- 
--- Other parsing failures will error with %G_TLS_ERROR_BAD_CERTIFICATE.
---
--- ---
---
---@param data unknown[] # DER-encoded PKCS #12 format certificate data
---@param length integer # the length of `data`
---@param password? string # optional password for encrypted certificate data
---@return Gio.TlsCertificate # the new certificate, or `nil` if `data` is invalid
function Gio.TlsCertificate.new_from_pkcs12(data, length, password) end

--- # record Gio.TlsCertificateClass
---
---@class Gio.TlsCertificateClass
---@field parent_class GObject.ObjectClass
---@field verify fun(cert: Gio.TlsCertificate, identity: Gio.SocketConnectable, trusted_ca: Gio.TlsCertificate): Gio.TlsCertificateFlags
---@field padding unknown[]
Gio.TlsCertificateClass = {}

---@enum Gio.TlsCertificateFlags
Gio.TlsCertificateFlags = {}

--- # record Gio.TlsCertificatePrivate
---
---@class Gio.TlsCertificatePrivate
Gio.TlsCertificatePrivate = {}

---@enum Gio.TlsCertificateRequestFlags
Gio.TlsCertificateRequestFlags = {}

---@enum Gio.TlsChannelBindingError
Gio.TlsChannelBindingError = {}

---@enum Gio.TlsChannelBindingType
Gio.TlsChannelBindingType = {}

--- # interface Gio.TlsClientConnection
---
--- `GTlsClientConnection` is the client-side subclass of
--- `GTlsConnection`, representing a client-side TLS connection.
---
--- ---
---
---@class Gio.TlsClientConnection
---@operator call: Gio.TlsClientConnection
Gio.TlsClientConnection = {}

--- # method Gio.TlsClientConnection:copy_session_state()
---
--- Possibly copies session state from one connection to another, for use
--- in TLS session resumption. This is not normally needed, but may be
--- used when the same session needs to be used between different
--- endpoints, as is required by some protocols, such as FTP over TLS.
--- `source` should have already completed a handshake and, since TLS 1.3,
--- it should have been used to read data at least once. `conn` should not
--- have completed a handshake.
--- 
--- It is not possible to know whether a call to this function will
--- actually do anything. Because session resumption is normally used
--- only for performance benefit, the TLS backend might not implement
--- this function. Even if implemented, it may not actually succeed in
--- allowing `conn` to resume `source`'s TLS session, because the server
--- may not have sent a session resumption token to `source`, or it may
--- refuse to accept the token from `conn`. There is no way to know
--- whether a call to this function is actually successful.
--- 
--- Using this function is not required to benefit from session
--- resumption. If the TLS backend supports session resumption, the
--- session will be resumed automatically if it is possible to do so
--- without weakening the privacy guarantees normally provided by TLS,
--- without need to call this function. For example, with TLS 1.3,
--- a session ticket will be automatically copied from any
--- `GTlsClientConnection` that has previously received session tickets
--- from the server, provided a ticket is available that has not
--- previously been used for session resumption, since session ticket
--- reuse would be a privacy weakness. Using this function causes the
--- ticket to be copied without regard for privacy considerations.
---
--- ---
---
---@param self Gio.TlsClientConnection # a `GTlsClientConnection`
---@param source Gio.TlsClientConnection # a `GTlsClientConnection`
---@return nil
function Gio.TlsClientConnection:copy_session_state(source) end

--- # method Gio.TlsClientConnection:get_accepted_cas()
---
--- Gets the list of distinguished names of the Certificate Authorities
--- that the server will accept certificates from. This will be set
--- during the TLS handshake if the server requests a certificate.
--- Otherwise, it will be `nil`.
--- 
--- Each item in the list is a `GByteArray` which contains the complete
--- subject DN of the certificate authority.
---
--- ---
---
---@param self Gio.TlsClientConnection # the `GTlsClientConnection`
---@return unknown[][] # the list of CA DNs. You should unref each element with `g_byte_array_unref()` and then the free the list with `g_list_free()`.
function Gio.TlsClientConnection:get_accepted_cas() end

--- # method Gio.TlsClientConnection:get_server_identity()
---
--- Gets `conn`'s expected server identity
---
--- ---
---
---@param self Gio.TlsClientConnection # the `GTlsClientConnection`
---@return Gio.SocketConnectable # a `GSocketConnectable` describing the expected server identity, or `nil` if the expected identity is not known.
function Gio.TlsClientConnection:get_server_identity() end

--- # method Gio.TlsClientConnection:get_use_ssl3()
---
--- SSL 3.0 is no longer supported. See
--- g_tls_client_connection_set_use_ssl3() for details.
---
--- ---
---
---@param self Gio.TlsClientConnection # the `GTlsClientConnection`
---@return (boolean|nil) # `false`
function Gio.TlsClientConnection:get_use_ssl3() end

--- # method Gio.TlsClientConnection:get_validation_flags()
---
--- Gets `conn`'s validation flags
--- 
--- This function does not work as originally designed and is impossible
--- to use correctly. See `GTlsClientConnection`:validation-flags for more
--- information.
---
--- ---
---
---@param self Gio.TlsClientConnection # the `GTlsClientConnection`
---@return Gio.TlsCertificateFlags # the validation flags
function Gio.TlsClientConnection:get_validation_flags() end

--- # method Gio.TlsClientConnection:set_server_identity()
---
--- Sets `conn`'s expected server identity, which is used both to tell
--- servers on virtual hosts which certificate to present, and also
--- to let `conn` know what name to look for in the certificate when
--- performing %G_TLS_CERTIFICATE_BAD_IDENTITY validation, if enabled.
---
--- ---
---
---@param self Gio.TlsClientConnection # the `GTlsClientConnection`
---@param identity Gio.SocketConnectable # a `GSocketConnectable` describing the expected server identity
---@return nil
function Gio.TlsClientConnection:set_server_identity(identity) end

--- # method Gio.TlsClientConnection:set_use_ssl3()
---
--- Since GLib 2.42.1, SSL 3.0 is no longer supported.
--- 
--- From GLib 2.42.1 through GLib 2.62, this function could be used to
--- force use of TLS 1.0, the lowest-supported TLS protocol version at
--- the time. In the past, this was needed to connect to broken TLS
--- servers that exhibited protocol version intolerance. Such servers
--- are no longer common, and using TLS 1.0 is no longer considered
--- acceptable.
--- 
--- Since GLib 2.64, this function does nothing.
---
--- ---
---
---@param self Gio.TlsClientConnection # the `GTlsClientConnection`
---@param use_ssl3 (boolean|nil) # a `gboolean`, ignored
---@return nil
function Gio.TlsClientConnection:set_use_ssl3(use_ssl3) end

--- # method Gio.TlsClientConnection:set_validation_flags()
---
--- Sets `conn`'s validation flags, to override the default set of
--- checks performed when validating a server certificate. By default,
--- %G_TLS_CERTIFICATE_VALIDATE_ALL is used.
--- 
--- This function does not work as originally designed and is impossible
--- to use correctly. See `GTlsClientConnection`:validation-flags for more
--- information.
---
--- ---
---
---@param self Gio.TlsClientConnection # the `GTlsClientConnection`
---@param flags Gio.TlsCertificateFlags # the `GTlsCertificateFlags` to use
---@return nil
function Gio.TlsClientConnection:set_validation_flags(flags) end

--- # function Gio.TlsClientConnection.new()
---
--- Creates a new `GTlsClientConnection` wrapping `base_io_stream` (which
--- must have pollable input and output streams) which is assumed to
--- communicate with the server identified by `server_identity`.
--- 
--- See the documentation for `GTlsConnection`:base-io-stream for restrictions
--- on when application code can run operations on the `base_io_stream` after
--- this function has returned.
---
--- ---
---
---@param base_io_stream Gio.IOStream # the `GIOStream` to wrap
---@param server_identity? Gio.SocketConnectable # the expected identity of the server
---@return Gio.TlsClientConnection # the new `GTlsClientConnection`, or `nil` on error
function Gio.TlsClientConnection.new(base_io_stream, server_identity) end

--- # record Gio.TlsClientConnectionInterface
---
--- vtable for a `GTlsClientConnection` implementation.
---
--- ---
---
---@class Gio.TlsClientConnectionInterface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field copy_session_state fun(conn: Gio.TlsClientConnection, source: Gio.TlsClientConnection): nil
Gio.TlsClientConnectionInterface = {}

--- # class Gio.TlsConnection
---
--- `GTlsConnection` is the base TLS connection class type, which wraps
--- a `GIOStream` and provides TLS encryption on top of it. Its
--- subclasses, `GTlsClientConnection` and `GTlsServerConnection`,
--- implement client-side and server-side TLS, respectively.
--- 
--- For DTLS (Datagram TLS) support, see `GDtlsConnection`.
---
--- ---
---
---@class Gio.TlsConnection : Gio.IOStream
---@field parent_instance Gio.IOStream
---@field priv Gio.TlsConnectionPrivate
Gio.TlsConnection = {}

--- # method Gio.TlsConnection:emit_accept_certificate()
---
--- Used by `GTlsConnection` implementations to emit the
--- `GTlsConnection`::accept-certificate signal.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@param peer_cert Gio.TlsCertificate # the peer's `GTlsCertificate`
---@param errors Gio.TlsCertificateFlags # the problems with `peer_cert`
---@return (boolean|nil) # `true` if one of the signal handlers has returned `true` to accept `peer_cert`
function Gio.TlsConnection:emit_accept_certificate(peer_cert, errors) end

--- # method Gio.TlsConnection:get_certificate()
---
--- Gets `conn`'s certificate, as set by
--- `g_tls_connection_set_certificate()`.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@return Gio.TlsCertificate # `conn`'s certificate, or `nil`
function Gio.TlsConnection:get_certificate() end

--- # method Gio.TlsConnection:get_channel_binding_data()
---
--- Query the TLS backend for TLS channel binding data of `type` for `conn`.
--- 
--- This call retrieves TLS channel binding data as specified in RFC
--- [5056](https://tools.ietf.org/html/rfc5056), RFC
--- [5929](https://tools.ietf.org/html/rfc5929), and related RFCs.  The
--- binding data is returned in `data`.  The `data` is resized by the callee
--- using `GByteArray` buffer management and will be freed when the `data`
--- is destroyed by `g_byte_array_unref()`. If `data` is `nil`, it will only
--- check whether TLS backend is able to fetch the data (e.g. whether `type`
--- is supported by the TLS backend). It does not guarantee that the data
--- will be available though.  That could happen if TLS connection does not
--- support `type` or the binding data is not available yet due to additional
--- negotiation or input required.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@param type Gio.TlsChannelBindingType # `GTlsChannelBindingType` type of data to fetch
---@param data? unknown[] # `GByteArray` is filled with the binding data, or `nil`
---@return (boolean|nil) # `true` on success, `false` otherwise
function Gio.TlsConnection:get_channel_binding_data(type, data) end

--- # method Gio.TlsConnection:get_ciphersuite_name()
---
--- Returns the name of the current TLS ciphersuite, or `nil` if the
--- connection has not handshaked or has been closed. Beware that the TLS
--- backend may use any of multiple different naming conventions, because
--- OpenSSL and GnuTLS have their own ciphersuite naming conventions that
--- are different from each other and different from the standard, IANA-
--- registered ciphersuite names. The ciphersuite name is intended to be
--- displayed to the user for informative purposes only, and parsing it
--- is not recommended.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@return string # The name of the current TLS ciphersuite, or `nil`
function Gio.TlsConnection:get_ciphersuite_name() end

--- # method Gio.TlsConnection:get_database()
---
--- Gets the certificate database that `conn` uses to verify
--- peer certificates. See `g_tls_connection_set_database()`.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@return Gio.TlsDatabase # the certificate database that `conn` uses or `nil`
function Gio.TlsConnection:get_database() end

--- # method Gio.TlsConnection:get_interaction()
---
--- Get the object that will be used to interact with the user. It will be used
--- for things like prompting the user for passwords. If `nil` is returned, then
--- no user interaction will occur for this connection.
---
--- ---
---
---@param self Gio.TlsConnection # a connection
---@return Gio.TlsInteraction # The interaction object.
function Gio.TlsConnection:get_interaction() end

--- # method Gio.TlsConnection:get_negotiated_protocol()
---
--- Gets the name of the application-layer protocol negotiated during
--- the handshake.
--- 
--- If the peer did not use the ALPN extension, or did not advertise a
--- protocol that matched one of `conn`'s protocols, or the TLS backend
--- does not support ALPN, then this will be `nil`. See
--- `g_tls_connection_set_advertised_protocols()`.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@return string # the negotiated protocol, or `nil`
function Gio.TlsConnection:get_negotiated_protocol() end

--- # method Gio.TlsConnection:get_peer_certificate()
---
--- Gets `conn`'s peer's certificate after the handshake has completed
--- or failed. (It is not set during the emission of
--- `GTlsConnection`::accept-certificate.)
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@return Gio.TlsCertificate # `conn`'s peer's certificate, or `nil`
function Gio.TlsConnection:get_peer_certificate() end

--- # method Gio.TlsConnection:get_peer_certificate_errors()
---
--- Gets the errors associated with validating `conn`'s peer's
--- certificate, after the handshake has completed or failed. (It is
--- not set during the emission of `GTlsConnection`::accept-certificate.)
--- 
--- See `GTlsConnection`:peer-certificate-errors for more information.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@return Gio.TlsCertificateFlags # `conn`'s peer's certificate errors
function Gio.TlsConnection:get_peer_certificate_errors() end

--- # method Gio.TlsConnection:get_protocol_version()
---
--- Returns the current TLS protocol version, which may be
--- %G_TLS_PROTOCOL_VERSION_UNKNOWN if the connection has not handshaked, or
--- has been closed, or if the TLS backend has implemented a protocol version
--- that is not a recognized `GTlsProtocolVersion`.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@return Gio.TlsProtocolVersion # The current TLS protocol version
function Gio.TlsConnection:get_protocol_version() end

--- # method Gio.TlsConnection:get_rehandshake_mode()
---
--- Gets `conn` rehandshaking mode. See
--- `g_tls_connection_set_rehandshake_mode()` for details.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@return Gio.TlsRehandshakeMode # %G_TLS_REHANDSHAKE_SAFELY
function Gio.TlsConnection:get_rehandshake_mode() end

--- # method Gio.TlsConnection:get_require_close_notify()
---
--- Tests whether or not `conn` expects a proper TLS close notification
--- when the connection is closed. See
--- `g_tls_connection_set_require_close_notify()` for details.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@return (boolean|nil) # `true` if `conn` requires a proper TLS close notification.
function Gio.TlsConnection:get_require_close_notify() end

--- # method Gio.TlsConnection:get_use_system_certdb()
---
--- Gets whether `conn` uses the system certificate database to verify
--- peer certificates. See `g_tls_connection_set_use_system_certdb()`.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@return (boolean|nil) # whether `conn` uses the system certificate database
function Gio.TlsConnection:get_use_system_certdb() end

--- # method Gio.TlsConnection:handshake()
---
--- Attempts a TLS handshake on `conn`.
--- 
--- On the client side, it is never necessary to call this method;
--- although the connection needs to perform a handshake after
--- connecting (or after sending a "STARTTLS"-type command),
--- `GTlsConnection` will handle this for you automatically when you try
--- to send or receive data on the connection. You can call
--- `g_tls_connection_handshake()` manually if you want to know whether
--- the initial handshake succeeded or failed (as opposed to just
--- immediately trying to use `conn` to read or write, in which case,
--- if it fails, it may not be possible to tell if it failed before or
--- after completing the handshake), but beware that servers may reject
--- client authentication after the handshake has completed, so a
--- successful handshake does not indicate the connection will be usable.
--- 
--- Likewise, on the server side, although a handshake is necessary at
--- the beginning of the communication, you do not need to call this
--- function explicitly unless you want clearer error reporting.
--- 
--- Previously, calling `g_tls_connection_handshake()` after the initial
--- handshake would trigger a rehandshake; however, this usage was
--- deprecated in GLib 2.60 because rehandshaking was removed from the
--- TLS protocol in TLS 1.3. Since GLib 2.64, calling this function after
--- the initial handshake will no longer do anything.
--- 
--- When using a `GTlsConnection` created by `GSocketClient`, the
--- `GSocketClient` performs the initial handshake, so calling this
--- function manually is not recommended.
--- 
--- `GTlsConnection`::accept_certificate may be emitted during the
--- handshake.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return (boolean|nil) # success or failure
function Gio.TlsConnection:handshake(cancellable) end

--- # method Gio.TlsConnection:handshake_async()
---
--- Asynchronously performs a TLS handshake on `conn`. See
--- `g_tls_connection_handshake()` for more information.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # callback to call when the handshake is complete
---@param user_data? userdata # the data to pass to the callback function
---@return nil
function Gio.TlsConnection:handshake_async(io_priority, cancellable, callback, user_data) end

--- # method Gio.TlsConnection:handshake_finish()
---
--- Finish an asynchronous TLS handshake operation. See
--- `g_tls_connection_handshake()` for more information.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` on success, `false` on failure, in which case `error` will be set.
function Gio.TlsConnection:handshake_finish(result) end

--- # method Gio.TlsConnection:set_advertised_protocols()
---
--- Sets the list of application-layer protocols to advertise that the
--- caller is willing to speak on this connection. The
--- Application-Layer Protocol Negotiation (ALPN) extension will be
--- used to negotiate a compatible protocol with the peer; use
--- `g_tls_connection_get_negotiated_protocol()` to find the negotiated
--- protocol after the handshake.  Specifying `nil` for the the value
--- of `protocols` will disable ALPN negotiation.
--- 
--- See [IANA TLS ALPN Protocol IDs](https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml`alpn`-protocol-ids)
--- for a list of registered protocol IDs.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@param protocols? unknown[] # a `nil`-terminated array of ALPN protocol names (eg, "http/1.1", "h2"), or `nil`
---@return nil
function Gio.TlsConnection:set_advertised_protocols(protocols) end

--- # method Gio.TlsConnection:set_certificate()
---
--- This sets the certificate that `conn` will present to its peer
--- during the TLS handshake. For a `GTlsServerConnection`, it is
--- mandatory to set this, and that will normally be done at construct
--- time.
--- 
--- For a `GTlsClientConnection`, this is optional. If a handshake fails
--- with %G_TLS_ERROR_CERTIFICATE_REQUIRED, that means that the server
--- requires a certificate, and if you try connecting again, you should
--- call this method first. You can call
--- `g_tls_client_connection_get_accepted_cas()` on the failed connection
--- to get a list of Certificate Authorities that the server will
--- accept certificates from.
--- 
--- (It is also possible that a server will allow the connection with
--- or without a certificate; in that case, if you don't provide a
--- certificate, you can tell that the server requested one by the fact
--- that `g_tls_client_connection_get_accepted_cas()` will return
--- non-`nil`.)
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@param certificate Gio.TlsCertificate # the certificate to use for `conn`
---@return nil
function Gio.TlsConnection:set_certificate(certificate) end

--- # method Gio.TlsConnection:set_database()
---
--- Sets the certificate database that is used to verify peer certificates.
--- This is set to the default database by default. See
--- `g_tls_backend_get_default_database()`. If set to `nil`, then
--- peer certificate validation will always set the
--- %G_TLS_CERTIFICATE_UNKNOWN_CA error (meaning
--- `GTlsConnection`::accept-certificate will always be emitted on
--- client-side connections, unless that bit is not set in
--- `GTlsClientConnection`:validation-flags).
--- 
--- There are nonintuitive security implications when using a non-default
--- database. See `GTlsConnection`:database for details.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@param database? Gio.TlsDatabase # a `GTlsDatabase`
---@return nil
function Gio.TlsConnection:set_database(database) end

--- # method Gio.TlsConnection:set_interaction()
---
--- Set the object that will be used to interact with the user. It will be used
--- for things like prompting the user for passwords.
--- 
--- The `interaction` argument will normally be a derived subclass of
--- `GTlsInteraction`. `nil` can also be provided if no user interaction
--- should occur for this connection.
---
--- ---
---
---@param self Gio.TlsConnection # a connection
---@param interaction? Gio.TlsInteraction # an interaction object, or `nil`
---@return nil
function Gio.TlsConnection:set_interaction(interaction) end

--- # method Gio.TlsConnection:set_rehandshake_mode()
---
--- Since GLib 2.64, changing the rehandshake mode is no longer supported
--- and will have no effect. With TLS 1.3, rehandshaking has been removed from
--- the TLS protocol, replaced by separate post-handshake authentication and
--- rekey operations.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@param mode Gio.TlsRehandshakeMode # the rehandshaking mode
---@return nil
function Gio.TlsConnection:set_rehandshake_mode(mode) end

--- # method Gio.TlsConnection:set_require_close_notify()
---
--- Sets whether or not `conn` expects a proper TLS close notification
--- before the connection is closed. If this is `true` (the default),
--- then `conn` will expect to receive a TLS close notification from its
--- peer before the connection is closed, and will return a
--- %G_TLS_ERROR_EOF error if the connection is closed without proper
--- notification (since this may indicate a network error, or
--- man-in-the-middle attack).
--- 
--- In some protocols, the application will know whether or not the
--- connection was closed cleanly based on application-level data
--- (because the application-level data includes a length field, or is
--- somehow self-delimiting); in this case, the close notify is
--- redundant and sometimes omitted. (TLS 1.1 explicitly allows this;
--- in TLS 1.0 it is technically an error, but often done anyway.) You
--- can use `g_tls_connection_set_require_close_notify()` to tell `conn`
--- to allow an "unannounced" connection close, in which case the close
--- will show up as a 0-length read, as in a non-TLS
--- `GSocketConnection`, and it is up to the application to check that
--- the data has been fully received.
--- 
--- Note that this only affects the behavior when the peer closes the
--- connection; when the application calls `g_io_stream_close()` itself
--- on `conn`, this will send a close notification regardless of the
--- setting of this property. If you explicitly want to do an unclean
--- close, you can close `conn`'s `GTlsConnection`:base-io-stream rather
--- than closing `conn` itself, but note that this may only be done when no other
--- operations are pending on `conn` or the base I/O stream.
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@param require_close_notify (boolean|nil) # whether or not to require close notification
---@return nil
function Gio.TlsConnection:set_require_close_notify(require_close_notify) end

--- # method Gio.TlsConnection:set_use_system_certdb()
---
--- Sets whether `conn` uses the system certificate database to verify
--- peer certificates. This is `true` by default. If set to `false`, then
--- peer certificate validation will always set the
--- %G_TLS_CERTIFICATE_UNKNOWN_CA error (meaning
--- `GTlsConnection`::accept-certificate will always be emitted on
--- client-side connections, unless that bit is not set in
--- `GTlsClientConnection`:validation-flags).
---
--- ---
---
---@param self Gio.TlsConnection # a `GTlsConnection`
---@param use_system_certdb (boolean|nil) # whether to use the system certificate database
---@return nil
function Gio.TlsConnection:set_use_system_certdb(use_system_certdb) end

--- # record Gio.TlsConnectionClass
---
--- The class structure for the `GTlsConnection` type.
---
--- ---
---
---@class Gio.TlsConnectionClass
---@field parent_class Gio.IOStreamClass # The parent class.
---@field accept_certificate fun(connection: Gio.TlsConnection, peer_cert: Gio.TlsCertificate, errors: Gio.TlsCertificateFlags): (boolean|nil)
---@field handshake fun(conn: Gio.TlsConnection, cancellable: Gio.Cancellable): (boolean|nil)
---@field handshake_async fun(conn: Gio.TlsConnection, io_priority: integer, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field handshake_finish fun(conn: Gio.TlsConnection, result: Gio.AsyncResult): (boolean|nil)
---@field get_binding_data fun(conn: Gio.TlsConnection, type: Gio.TlsChannelBindingType, data: unknown[]): (boolean|nil)
---@field get_negotiated_protocol fun(conn: Gio.TlsConnection): string
---@field padding unknown[]
Gio.TlsConnectionClass = {}

--- # record Gio.TlsConnectionPrivate
---
---@class Gio.TlsConnectionPrivate
Gio.TlsConnectionPrivate = {}

--- # class Gio.TlsDatabase
---
--- `GTlsDatabase` is used to look up certificates and other information
--- from a certificate or key store. It is an abstract base class which
--- TLS library specific subtypes override.
--- 
--- A `GTlsDatabase` may be accessed from multiple threads by the TLS backend.
--- All implementations are required to be fully thread-safe.
--- 
--- Most common client applications will not directly interact with
--- `GTlsDatabase`. It is used internally by `GTlsConnection`.
---
--- ---
---
---@class Gio.TlsDatabase : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.TlsDatabasePrivate
Gio.TlsDatabase = {}

--- # method Gio.TlsDatabase:create_certificate_handle()
---
--- Create a handle string for the certificate. The database will only be able
--- to create a handle for certificates that originate from the database. In
--- cases where the database cannot create a handle for a certificate, `nil`
--- will be returned.
--- 
--- This handle should be stable across various instances of the application,
--- and between applications. If a certificate is modified in the database,
--- then it is not guaranteed that this handle will continue to point to it.
---
--- ---
---
---@param self Gio.TlsDatabase # a `GTlsDatabase`
---@param certificate Gio.TlsCertificate # certificate for which to create a handle.
---@return string # a newly allocated string containing the handle.
function Gio.TlsDatabase:create_certificate_handle(certificate) end

--- # method Gio.TlsDatabase:lookup_certificate_for_handle()
---
--- Look up a certificate by its handle.
--- 
--- The handle should have been created by calling
--- `g_tls_database_create_certificate_handle()` on a `GTlsDatabase` object of
--- the same TLS backend. The handle is designed to remain valid across
--- instantiations of the database.
--- 
--- If the handle is no longer valid, or does not point to a certificate in
--- this database, then `nil` will be returned.
--- 
--- This function can block, use `g_tls_database_lookup_certificate_for_handle_async()` to perform
--- the lookup operation asynchronously.
---
--- ---
---
---@param self Gio.TlsDatabase # a `GTlsDatabase`
---@param handle string # a certificate handle
---@param interaction? Gio.TlsInteraction # used to interact with the user if necessary
---@param flags Gio.TlsDatabaseLookupFlags # Flags which affect the lookup.
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return Gio.TlsCertificate # a newly allocated `GTlsCertificate`, or `nil`. Use `g_object_unref()` to release the certificate.
function Gio.TlsDatabase:lookup_certificate_for_handle(handle, interaction, flags, cancellable) end

--- # method Gio.TlsDatabase:lookup_certificate_for_handle_async()
---
--- Asynchronously look up a certificate by its handle in the database. See
--- `g_tls_database_lookup_certificate_for_handle()` for more information.
---
--- ---
---
---@param self Gio.TlsDatabase # a `GTlsDatabase`
---@param handle string # a certificate handle
---@param interaction? Gio.TlsInteraction # used to interact with the user if necessary
---@param flags Gio.TlsDatabaseLookupFlags # Flags which affect the lookup.
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # callback to call when the operation completes
---@param user_data? userdata # the data to pass to the callback function
---@return nil
function Gio.TlsDatabase:lookup_certificate_for_handle_async(handle, interaction, flags, cancellable, callback, user_data) end

--- # method Gio.TlsDatabase:lookup_certificate_for_handle_finish()
---
--- Finish an asynchronous lookup of a certificate by its handle. See
--- `g_tls_database_lookup_certificate_for_handle()` for more information.
--- 
--- If the handle is no longer valid, or does not point to a certificate in
--- this database, then `nil` will be returned.
---
--- ---
---
---@param self Gio.TlsDatabase # a `GTlsDatabase`
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return Gio.TlsCertificate # a newly allocated `GTlsCertificate` object. Use `g_object_unref()` to release the certificate.
function Gio.TlsDatabase:lookup_certificate_for_handle_finish(result) end

--- # method Gio.TlsDatabase:lookup_certificate_issuer()
---
--- Look up the issuer of `certificate` in the database. The
--- `GTlsCertificate`:issuer property of `certificate` is not modified, and
--- the two certificates are not hooked into a chain.
--- 
--- This function can block. Use `g_tls_database_lookup_certificate_issuer_async()`
--- to perform the lookup operation asynchronously.
--- 
--- Beware this function cannot be used to build certification paths. The
--- issuer certificate returned by this function may not be the same as
--- the certificate that would actually be used to construct a valid
--- certification path during certificate verification.
--- [RFC 4158](https://datatracker.ietf.org/doc/html/rfc4158) explains
--- why an issuer certificate cannot be naively assumed to be part of the
--- the certification path (though GLib's TLS backends may not follow the
--- path building strategies outlined in this RFC). Due to the complexity
--- of certification path building, GLib does not provide any way to know
--- which certification path will actually be used when verifying a TLS
--- certificate. Accordingly, this function cannot be used to make
--- security-related decisions. Only GLib itself should make security
--- decisions about TLS certificates.
---
--- ---
---
---@param self Gio.TlsDatabase # a `GTlsDatabase`
---@param certificate Gio.TlsCertificate # a `GTlsCertificate`
---@param interaction? Gio.TlsInteraction # used to interact with the user if necessary
---@param flags Gio.TlsDatabaseLookupFlags # flags which affect the lookup operation
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return Gio.TlsCertificate # a newly allocated issuer `GTlsCertificate`, or `nil`. Use `g_object_unref()` to release the certificate.
function Gio.TlsDatabase:lookup_certificate_issuer(certificate, interaction, flags, cancellable) end

--- # method Gio.TlsDatabase:lookup_certificate_issuer_async()
---
--- Asynchronously look up the issuer of `certificate` in the database. See
--- `g_tls_database_lookup_certificate_issuer()` for more information.
---
--- ---
---
---@param self Gio.TlsDatabase # a `GTlsDatabase`
---@param certificate Gio.TlsCertificate # a `GTlsCertificate`
---@param interaction? Gio.TlsInteraction # used to interact with the user if necessary
---@param flags Gio.TlsDatabaseLookupFlags # flags which affect the lookup operation
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # callback to call when the operation completes
---@param user_data? userdata # the data to pass to the callback function
---@return nil
function Gio.TlsDatabase:lookup_certificate_issuer_async(certificate, interaction, flags, cancellable, callback, user_data) end

--- # method Gio.TlsDatabase:lookup_certificate_issuer_finish()
---
--- Finish an asynchronous lookup issuer operation. See
--- `g_tls_database_lookup_certificate_issuer()` for more information.
---
--- ---
---
---@param self Gio.TlsDatabase # a `GTlsDatabase`
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return Gio.TlsCertificate # a newly allocated issuer `GTlsCertificate`, or `nil`. Use `g_object_unref()` to release the certificate.
function Gio.TlsDatabase:lookup_certificate_issuer_finish(result) end

--- # method Gio.TlsDatabase:lookup_certificates_issued_by()
---
--- Look up certificates issued by this issuer in the database.
--- 
--- This function can block, use `g_tls_database_lookup_certificates_issued_by_async()` to perform
--- the lookup operation asynchronously.
---
--- ---
---
---@param self Gio.TlsDatabase # a `GTlsDatabase`
---@param issuer_raw_dn unknown[] # a `GByteArray` which holds the DER encoded issuer DN.
---@param interaction? Gio.TlsInteraction # used to interact with the user if necessary
---@param flags Gio.TlsDatabaseLookupFlags # Flags which affect the lookup operation.
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return Gio.TlsCertificate[] # a newly allocated list of `GTlsCertificate` objects. Use `g_object_unref()` on each certificate, and `g_list_free()` on the release the list.
function Gio.TlsDatabase:lookup_certificates_issued_by(issuer_raw_dn, interaction, flags, cancellable) end

--- # method Gio.TlsDatabase:lookup_certificates_issued_by_async()
---
--- Asynchronously look up certificates issued by this issuer in the database. See
--- `g_tls_database_lookup_certificates_issued_by()` for more information.
--- 
--- The database may choose to hold a reference to the issuer byte array for the duration
--- of of this asynchronous operation. The byte array should not be modified during
--- this time.
---
--- ---
---
---@param self Gio.TlsDatabase # a `GTlsDatabase`
---@param issuer_raw_dn unknown[] # a `GByteArray` which holds the DER encoded issuer DN.
---@param interaction? Gio.TlsInteraction # used to interact with the user if necessary
---@param flags Gio.TlsDatabaseLookupFlags # Flags which affect the lookup operation.
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # callback to call when the operation completes
---@param user_data? userdata # the data to pass to the callback function
---@return nil
function Gio.TlsDatabase:lookup_certificates_issued_by_async(issuer_raw_dn, interaction, flags, cancellable, callback, user_data) end

--- # method Gio.TlsDatabase:lookup_certificates_issued_by_finish()
---
--- Finish an asynchronous lookup of certificates. See
--- `g_tls_database_lookup_certificates_issued_by()` for more information.
---
--- ---
---
---@param self Gio.TlsDatabase # a `GTlsDatabase`
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return Gio.TlsCertificate[] # a newly allocated list of `GTlsCertificate` objects. Use `g_object_unref()` on each certificate, and `g_list_free()` on the release the list.
function Gio.TlsDatabase:lookup_certificates_issued_by_finish(result) end

--- # method Gio.TlsDatabase:verify_chain()
---
--- Determines the validity of a certificate chain, outside the context
--- of a TLS session.
--- 
--- `chain` is a chain of `GTlsCertificate` objects each pointing to the next
--- certificate in the chain by its `GTlsCertificate`:issuer property.
--- 
--- `purpose` describes the purpose (or usage) for which the certificate
--- is being used. Typically `purpose` will be set to %G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER
--- which means that the certificate is being used to authenticate a server
--- (and we are acting as the client).
--- 
--- The `identity` is used to ensure the server certificate is valid for
--- the expected peer identity. If the identity does not match the
--- certificate, %G_TLS_CERTIFICATE_BAD_IDENTITY will be set in the
--- return value. If `identity` is `nil`, that bit will never be set in
--- the return value. The peer identity may also be used to check for
--- pinned certificates (trust exceptions) in the database. These may
--- override the normal verification process on a host-by-host basis.
--- 
--- Currently there are no `flags`, and %G_TLS_DATABASE_VERIFY_NONE should be
--- used.
--- 
--- If `chain` is found to be valid, then the return value will be 0. If
--- `chain` is found to be invalid, then the return value will indicate at
--- least one problem found. If the function is unable to determine
--- whether `chain` is valid (for example, because `cancellable` is
--- triggered before it completes) then the return value will be
--- %G_TLS_CERTIFICATE_GENERIC_ERROR and `error` will be set accordingly.
--- `error` is not set when `chain` is successfully analyzed but found to
--- be invalid.
--- 
--- GLib guarantees that if certificate verification fails, at least one
--- error will be set in the return value, but it does not guarantee
--- that all possible errors will be set. Accordingly, you may not safely
--- decide to ignore any particular type of error. For example, it would
--- be incorrect to mask %G_TLS_CERTIFICATE_EXPIRED if you want to allow
--- expired certificates, because this could potentially be the only
--- error flag set even if other problems exist with the certificate.
--- 
--- Prior to GLib 2.48, GLib's default TLS backend modified `chain` to
--- represent the certification path built by `GTlsDatabase` during
--- certificate verification by adjusting the `GTlsCertificate`:issuer
--- property of each certificate in `chain`. Since GLib 2.48, this no
--- longer occurs, so you cannot rely on `GTlsCertificate`:issuer to
--- represent the actual certification path used during certificate
--- verification.
--- 
--- Because TLS session context is not used, `GTlsDatabase` may not
--- perform as many checks on the certificates as `GTlsConnection` would.
--- For example, certificate constraints may not be honored, and
--- revocation checks may not be performed. The best way to verify TLS
--- certificates used by a TLS connection is to let `GTlsConnection`
--- handle the verification.
--- 
--- The TLS backend may attempt to look up and add missing certificates
--- to the chain. This may involve HTTP requests to download missing
--- certificates.
--- 
--- This function can block. Use `g_tls_database_verify_chain_async()` to
--- perform the verification operation asynchronously.
---
--- ---
---
---@param self Gio.TlsDatabase # a `GTlsDatabase`
---@param chain Gio.TlsCertificate # a `GTlsCertificate` chain
---@param purpose string # the purpose that this certificate chain will be used for.
---@param identity? Gio.SocketConnectable # the expected peer identity
---@param interaction? Gio.TlsInteraction # used to interact with the user if necessary
---@param flags Gio.TlsDatabaseVerifyFlags # additional verify flags
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@return Gio.TlsCertificateFlags # the appropriate `GTlsCertificateFlags` which represents the result of verification.
function Gio.TlsDatabase:verify_chain(chain, purpose, identity, interaction, flags, cancellable) end

--- # method Gio.TlsDatabase:verify_chain_async()
---
--- Asynchronously determines the validity of a certificate chain after
--- looking up and adding any missing certificates to the chain. See
--- `g_tls_database_verify_chain()` for more information.
---
--- ---
---
---@param self Gio.TlsDatabase # a `GTlsDatabase`
---@param chain Gio.TlsCertificate # a `GTlsCertificate` chain
---@param purpose string # the purpose that this certificate chain will be used for.
---@param identity? Gio.SocketConnectable # the expected peer identity
---@param interaction? Gio.TlsInteraction # used to interact with the user if necessary
---@param flags Gio.TlsDatabaseVerifyFlags # additional verify flags
---@param cancellable? Gio.Cancellable # a `GCancellable`, or `nil`
---@param callback? Gio.AsyncReadyCallback # callback to call when the operation completes
---@param user_data? userdata # the data to pass to the callback function
---@return nil
function Gio.TlsDatabase:verify_chain_async(chain, purpose, identity, interaction, flags, cancellable, callback, user_data) end

--- # method Gio.TlsDatabase:verify_chain_finish()
---
--- Finish an asynchronous verify chain operation. See
--- `g_tls_database_verify_chain()` for more information.
--- 
--- If `chain` is found to be valid, then the return value will be 0. If
--- `chain` is found to be invalid, then the return value will indicate
--- the problems found. If the function is unable to determine whether
--- `chain` is valid or not (eg, because `cancellable` is triggered
--- before it completes) then the return value will be
--- %G_TLS_CERTIFICATE_GENERIC_ERROR and `error` will be set
--- accordingly. `error` is not set when `chain` is successfully analyzed
--- but found to be invalid.
---
--- ---
---
---@param self Gio.TlsDatabase # a `GTlsDatabase`
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return Gio.TlsCertificateFlags # the appropriate `GTlsCertificateFlags` which represents the result of verification.
function Gio.TlsDatabase:verify_chain_finish(result) end

--- # record Gio.TlsDatabaseClass
---
--- The class for `GTlsDatabase`. Derived classes should implement the various
--- virtual methods. _async and _finish methods have a default
--- implementation that runs the corresponding sync method in a thread.
---
--- ---
---
---@class Gio.TlsDatabaseClass
---@field parent_class GObject.ObjectClass
---@field verify_chain fun(self: Gio.TlsDatabase, chain: Gio.TlsCertificate, purpose: string, identity: Gio.SocketConnectable, interaction: Gio.TlsInteraction, flags: Gio.TlsDatabaseVerifyFlags, cancellable: Gio.Cancellable): Gio.TlsCertificateFlags
---@field verify_chain_async fun(self: Gio.TlsDatabase, chain: Gio.TlsCertificate, purpose: string, identity: Gio.SocketConnectable, interaction: Gio.TlsInteraction, flags: Gio.TlsDatabaseVerifyFlags, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field verify_chain_finish fun(self: Gio.TlsDatabase, result: Gio.AsyncResult): Gio.TlsCertificateFlags
---@field create_certificate_handle fun(self: Gio.TlsDatabase, certificate: Gio.TlsCertificate): string
---@field lookup_certificate_for_handle fun(self: Gio.TlsDatabase, handle: string, interaction: Gio.TlsInteraction, flags: Gio.TlsDatabaseLookupFlags, cancellable: Gio.Cancellable): Gio.TlsCertificate
---@field lookup_certificate_for_handle_async fun(self: Gio.TlsDatabase, handle: string, interaction: Gio.TlsInteraction, flags: Gio.TlsDatabaseLookupFlags, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field lookup_certificate_for_handle_finish fun(self: Gio.TlsDatabase, result: Gio.AsyncResult): Gio.TlsCertificate
---@field lookup_certificate_issuer fun(self: Gio.TlsDatabase, certificate: Gio.TlsCertificate, interaction: Gio.TlsInteraction, flags: Gio.TlsDatabaseLookupFlags, cancellable: Gio.Cancellable): Gio.TlsCertificate
---@field lookup_certificate_issuer_async fun(self: Gio.TlsDatabase, certificate: Gio.TlsCertificate, interaction: Gio.TlsInteraction, flags: Gio.TlsDatabaseLookupFlags, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field lookup_certificate_issuer_finish fun(self: Gio.TlsDatabase, result: Gio.AsyncResult): Gio.TlsCertificate
---@field lookup_certificates_issued_by fun(self: Gio.TlsDatabase, issuer_raw_dn: unknown[], interaction: Gio.TlsInteraction, flags: Gio.TlsDatabaseLookupFlags, cancellable: Gio.Cancellable): Gio.TlsCertificate[]
---@field lookup_certificates_issued_by_async fun(self: Gio.TlsDatabase, issuer_raw_dn: unknown[], interaction: Gio.TlsInteraction, flags: Gio.TlsDatabaseLookupFlags, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field lookup_certificates_issued_by_finish fun(self: Gio.TlsDatabase, result: Gio.AsyncResult): Gio.TlsCertificate[]
---@field padding unknown[]
Gio.TlsDatabaseClass = {}

---@enum Gio.TlsDatabaseLookupFlags
Gio.TlsDatabaseLookupFlags = {}

--- # record Gio.TlsDatabasePrivate
---
---@class Gio.TlsDatabasePrivate
Gio.TlsDatabasePrivate = {}

---@enum Gio.TlsDatabaseVerifyFlags
Gio.TlsDatabaseVerifyFlags = {}

---@enum Gio.TlsError
Gio.TlsError = {}

--- # interface Gio.TlsFileDatabase
---
--- `GTlsFileDatabase` is implemented by `GTlsDatabase` objects which load
--- their certificate information from a file. It is an interface which
--- TLS library specific subtypes implement.
---
--- ---
---
---@class Gio.TlsFileDatabase
---@operator call: Gio.TlsFileDatabase
Gio.TlsFileDatabase = {}

--- # function Gio.TlsFileDatabase.new()
---
--- Creates a new `GTlsFileDatabase` which uses anchor certificate authorities
--- in `anchors` to verify certificate chains.
--- 
--- The certificates in `anchors` must be PEM encoded.
---
--- ---
---
---@param anchors string # filename of anchor certificate authorities.
---@return Gio.TlsFileDatabase # the new `GTlsFileDatabase`, or `nil` on error
function Gio.TlsFileDatabase.new(anchors) end

--- # record Gio.TlsFileDatabaseInterface
---
--- Provides an interface for `GTlsFileDatabase` implementations.
---
--- ---
---
---@class Gio.TlsFileDatabaseInterface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field padding unknown[]
Gio.TlsFileDatabaseInterface = {}

--- # class Gio.TlsInteraction
---
--- `GTlsInteraction` provides a mechanism for the TLS connection and database
--- code to interact with the user. It can be used to ask the user for passwords.
--- 
--- To use a `GTlsInteraction` with a TLS connection use
--- `g_tls_connection_set_interaction()`.
--- 
--- Callers should instantiate a derived class that implements the various
--- interaction methods to show the required dialogs.
--- 
--- Callers should use the 'invoke' functions like
--- `g_tls_interaction_invoke_ask_password()` to run interaction methods. These
--- functions make sure that the interaction is invoked in the main loop
--- and not in the current thread, if the current thread is not running the
--- main loop.
--- 
--- Derived classes can choose to implement whichever interactions methods they'd
--- like to support by overriding those virtual methods in their class
--- initialization function. Any interactions not implemented will return
--- %G_TLS_INTERACTION_UNHANDLED. If a derived class implements an async method,
--- it must also implement the corresponding finish method.
---
--- ---
---
---@class Gio.TlsInteraction : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.TlsInteractionPrivate
Gio.TlsInteraction = {}

--- # method Gio.TlsInteraction:ask_password()
---
--- Run synchronous interaction to ask the user for a password. In general,
--- `g_tls_interaction_invoke_ask_password()` should be used instead of this
--- function.
--- 
--- Derived subclasses usually implement a password prompt, although they may
--- also choose to provide a password from elsewhere. The `password` value will
--- be filled in and then `callback` will be called. Alternatively the user may
--- abort this password request, which will usually abort the TLS connection.
--- 
--- If the interaction is cancelled by the cancellation object, or by the
--- user then %G_TLS_INTERACTION_FAILED will be returned with an error that
--- contains a %G_IO_ERROR_CANCELLED error code. Certain implementations may
--- not support immediate cancellation.
---
--- ---
---
---@param self Gio.TlsInteraction # a `GTlsInteraction` object
---@param password Gio.TlsPassword # a `GTlsPassword` object
---@param cancellable? Gio.Cancellable # an optional `GCancellable` cancellation object
---@return Gio.TlsInteractionResult # The status of the ask password interaction.
function Gio.TlsInteraction:ask_password(password, cancellable) end

--- # method Gio.TlsInteraction:ask_password_async()
---
--- Run asynchronous interaction to ask the user for a password. In general,
--- `g_tls_interaction_invoke_ask_password()` should be used instead of this
--- function.
--- 
--- Derived subclasses usually implement a password prompt, although they may
--- also choose to provide a password from elsewhere. The `password` value will
--- be filled in and then `callback` will be called. Alternatively the user may
--- abort this password request, which will usually abort the TLS connection.
--- 
--- If the interaction is cancelled by the cancellation object, or by the
--- user then %G_TLS_INTERACTION_FAILED will be returned with an error that
--- contains a %G_IO_ERROR_CANCELLED error code. Certain implementations may
--- not support immediate cancellation.
--- 
--- Certain implementations may not support immediate cancellation.
---
--- ---
---
---@param self Gio.TlsInteraction # a `GTlsInteraction` object
---@param password Gio.TlsPassword # a `GTlsPassword` object
---@param cancellable? Gio.Cancellable # an optional `GCancellable` cancellation object
---@param callback? Gio.AsyncReadyCallback # will be called when the interaction completes
---@param user_data? userdata # data to pass to the `callback`
---@return nil
function Gio.TlsInteraction:ask_password_async(password, cancellable, callback, user_data) end

--- # method Gio.TlsInteraction:ask_password_finish()
---
--- Complete an ask password user interaction request. This should be once
--- the `g_tls_interaction_ask_password_async()` completion callback is called.
--- 
--- If %G_TLS_INTERACTION_HANDLED is returned, then the `GTlsPassword` passed
--- to `g_tls_interaction_ask_password()` will have its password filled in.
--- 
--- If the interaction is cancelled by the cancellation object, or by the
--- user then %G_TLS_INTERACTION_FAILED will be returned with an error that
--- contains a %G_IO_ERROR_CANCELLED error code.
---
--- ---
---
---@param self Gio.TlsInteraction # a `GTlsInteraction` object
---@param result Gio.AsyncResult # the result passed to the callback
---@return Gio.TlsInteractionResult # The status of the ask password interaction.
function Gio.TlsInteraction:ask_password_finish(result) end

--- # method Gio.TlsInteraction:invoke_ask_password()
---
--- Invoke the interaction to ask the user for a password. It invokes this
--- interaction in the main loop, specifically the `GMainContext` returned by
--- `g_main_context_get_thread_default()` when the interaction is created. This
--- is called by called by `GTlsConnection` or `GTlsDatabase` to ask the user
--- for a password.
--- 
--- Derived subclasses usually implement a password prompt, although they may
--- also choose to provide a password from elsewhere. The `password` value will
--- be filled in and then `callback` will be called. Alternatively the user may
--- abort this password request, which will usually abort the TLS connection.
--- 
--- The implementation can either be a synchronous (eg: modal dialog) or an
--- asynchronous one (eg: modeless dialog). This function will take care of
--- calling which ever one correctly.
--- 
--- If the interaction is cancelled by the cancellation object, or by the
--- user then %G_TLS_INTERACTION_FAILED will be returned with an error that
--- contains a %G_IO_ERROR_CANCELLED error code. Certain implementations may
--- not support immediate cancellation.
---
--- ---
---
---@param self Gio.TlsInteraction # a `GTlsInteraction` object
---@param password Gio.TlsPassword # a `GTlsPassword` object
---@param cancellable? Gio.Cancellable # an optional `GCancellable` cancellation object
---@return Gio.TlsInteractionResult # The status of the ask password interaction.
function Gio.TlsInteraction:invoke_ask_password(password, cancellable) end

--- # method Gio.TlsInteraction:invoke_request_certificate()
---
--- Invoke the interaction to ask the user to choose a certificate to
--- use with the connection. It invokes this interaction in the main
--- loop, specifically the `GMainContext` returned by
--- `g_main_context_get_thread_default()` when the interaction is
--- created. This is called by called by `GTlsConnection` when the peer
--- requests a certificate during the handshake.
--- 
--- Derived subclasses usually implement a certificate selector,
--- although they may also choose to provide a certificate from
--- elsewhere. Alternatively the user may abort this certificate
--- request, which may or may not abort the TLS connection.
--- 
--- The implementation can either be a synchronous (eg: modal dialog) or an
--- asynchronous one (eg: modeless dialog). This function will take care of
--- calling which ever one correctly.
--- 
--- If the interaction is cancelled by the cancellation object, or by the
--- user then %G_TLS_INTERACTION_FAILED will be returned with an error that
--- contains a %G_IO_ERROR_CANCELLED error code. Certain implementations may
--- not support immediate cancellation.
---
--- ---
---
---@param self Gio.TlsInteraction # a `GTlsInteraction` object
---@param connection Gio.TlsConnection # a `GTlsConnection` object
---@param flags Gio.TlsCertificateRequestFlags # flags providing more information about the request
---@param cancellable? Gio.Cancellable # an optional `GCancellable` cancellation object
---@return Gio.TlsInteractionResult # The status of the certificate request interaction.
function Gio.TlsInteraction:invoke_request_certificate(connection, flags, cancellable) end

--- # method Gio.TlsInteraction:request_certificate()
---
--- Run synchronous interaction to ask the user to choose a certificate to use
--- with the connection. In general, `g_tls_interaction_invoke_request_certificate()`
--- should be used instead of this function.
--- 
--- Derived subclasses usually implement a certificate selector, although they may
--- also choose to provide a certificate from elsewhere. Alternatively the user may
--- abort this certificate request, which will usually abort the TLS connection.
--- 
--- If %G_TLS_INTERACTION_HANDLED is returned, then the `GTlsConnection`
--- passed to `g_tls_interaction_request_certificate()` will have had its
--- `GTlsConnection`:certificate filled in.
--- 
--- If the interaction is cancelled by the cancellation object, or by the
--- user then %G_TLS_INTERACTION_FAILED will be returned with an error that
--- contains a %G_IO_ERROR_CANCELLED error code. Certain implementations may
--- not support immediate cancellation.
---
--- ---
---
---@param self Gio.TlsInteraction # a `GTlsInteraction` object
---@param connection Gio.TlsConnection # a `GTlsConnection` object
---@param flags Gio.TlsCertificateRequestFlags # flags providing more information about the request
---@param cancellable? Gio.Cancellable # an optional `GCancellable` cancellation object
---@return Gio.TlsInteractionResult # The status of the request certificate interaction.
function Gio.TlsInteraction:request_certificate(connection, flags, cancellable) end

--- # method Gio.TlsInteraction:request_certificate_async()
---
--- Run asynchronous interaction to ask the user for a certificate to use with
--- the connection. In general, `g_tls_interaction_invoke_request_certificate()` should
--- be used instead of this function.
--- 
--- Derived subclasses usually implement a certificate selector, although they may
--- also choose to provide a certificate from elsewhere. `callback` will be called
--- when the operation completes. Alternatively the user may abort this certificate
--- request, which will usually abort the TLS connection.
---
--- ---
---
---@param self Gio.TlsInteraction # a `GTlsInteraction` object
---@param connection Gio.TlsConnection # a `GTlsConnection` object
---@param flags Gio.TlsCertificateRequestFlags # flags providing more information about the request
---@param cancellable? Gio.Cancellable # an optional `GCancellable` cancellation object
---@param callback? Gio.AsyncReadyCallback # will be called when the interaction completes
---@param user_data? userdata # data to pass to the `callback`
---@return nil
function Gio.TlsInteraction:request_certificate_async(connection, flags, cancellable, callback, user_data) end

--- # method Gio.TlsInteraction:request_certificate_finish()
---
--- Complete a request certificate user interaction request. This should be once
--- the `g_tls_interaction_request_certificate_async()` completion callback is called.
--- 
--- If %G_TLS_INTERACTION_HANDLED is returned, then the `GTlsConnection`
--- passed to `g_tls_interaction_request_certificate_async()` will have had its
--- `GTlsConnection`:certificate filled in.
--- 
--- If the interaction is cancelled by the cancellation object, or by the
--- user then %G_TLS_INTERACTION_FAILED will be returned with an error that
--- contains a %G_IO_ERROR_CANCELLED error code.
---
--- ---
---
---@param self Gio.TlsInteraction # a `GTlsInteraction` object
---@param result Gio.AsyncResult # the result passed to the callback
---@return Gio.TlsInteractionResult # The status of the request certificate interaction.
function Gio.TlsInteraction:request_certificate_finish(result) end

--- # record Gio.TlsInteractionClass
---
--- The class for `GTlsInteraction`. Derived classes implement the various
--- virtual interaction methods to handle TLS interactions.
--- 
--- Derived classes can choose to implement whichever interactions methods they'd
--- like to support by overriding those virtual methods in their class
--- initialization function. If a derived class implements an async method,
--- it must also implement the corresponding finish method.
--- 
--- The synchronous interaction methods should implement to display modal dialogs,
--- and the asynchronous methods to display modeless dialogs.
--- 
--- If the user cancels an interaction, then the result should be
--- %G_TLS_INTERACTION_FAILED and the error should be set with a domain of
--- %G_IO_ERROR and code of %G_IO_ERROR_CANCELLED.
---
--- ---
---
---@class Gio.TlsInteractionClass
---@field parent_class GObject.ObjectClass
---@field ask_password fun(interaction: Gio.TlsInteraction, password: Gio.TlsPassword, cancellable: Gio.Cancellable): Gio.TlsInteractionResult
---@field ask_password_async fun(interaction: Gio.TlsInteraction, password: Gio.TlsPassword, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field ask_password_finish fun(interaction: Gio.TlsInteraction, result: Gio.AsyncResult): Gio.TlsInteractionResult
---@field request_certificate fun(interaction: Gio.TlsInteraction, connection: Gio.TlsConnection, flags: Gio.TlsCertificateRequestFlags, cancellable: Gio.Cancellable): Gio.TlsInteractionResult
---@field request_certificate_async fun(interaction: Gio.TlsInteraction, connection: Gio.TlsConnection, flags: Gio.TlsCertificateRequestFlags, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field request_certificate_finish fun(interaction: Gio.TlsInteraction, result: Gio.AsyncResult): Gio.TlsInteractionResult
---@field padding unknown[]
Gio.TlsInteractionClass = {}

--- # record Gio.TlsInteractionPrivate
---
---@class Gio.TlsInteractionPrivate
Gio.TlsInteractionPrivate = {}

---@enum Gio.TlsInteractionResult
Gio.TlsInteractionResult = {}

--- # class Gio.TlsPassword
---
--- Holds a password used in TLS.
---
--- ---
---
---@class Gio.TlsPassword : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.TlsPasswordPrivate
---@operator call: Gio.TlsPassword
Gio.TlsPassword = {}

--- # method Gio.TlsPassword:get_description()
---
--- Get a description string about what the password will be used for.
---
--- ---
---
---@param self Gio.TlsPassword # a `GTlsPassword` object
---@return string # The description of the password.
function Gio.TlsPassword:get_description() end

--- # method Gio.TlsPassword:get_flags()
---
--- Get flags about the password.
---
--- ---
---
---@param self Gio.TlsPassword # a `GTlsPassword` object
---@return Gio.TlsPasswordFlags # The flags about the password.
function Gio.TlsPassword:get_flags() end

--- # method Gio.TlsPassword:get_value()
---
--- Get the password value. If `length` is not `nil` then it will be
--- filled in with the length of the password value. (Note that the
--- password value is not nul-terminated, so you can only pass `nil`
--- for `length` in contexts where you know the password will have a
--- certain fixed length.)
---
--- ---
---
---@param self Gio.TlsPassword # a `GTlsPassword` object
---@param length integer # location to place the length of the password.
---@return unknown[] # The password value (owned by the password object).
function Gio.TlsPassword:get_value(length) end

--- # method Gio.TlsPassword:get_warning()
---
--- Get a user readable translated warning. Usually this warning is a
--- representation of the password flags returned from
--- `g_tls_password_get_flags()`.
---
--- ---
---
---@param self Gio.TlsPassword # a `GTlsPassword` object
---@return string # The warning.
function Gio.TlsPassword:get_warning() end

--- # method Gio.TlsPassword:set_description()
---
--- Set a description string about what the password will be used for.
---
--- ---
---
---@param self Gio.TlsPassword # a `GTlsPassword` object
---@param description string # The description of the password
---@return nil
function Gio.TlsPassword:set_description(description) end

--- # method Gio.TlsPassword:set_flags()
---
--- Set flags about the password.
---
--- ---
---
---@param self Gio.TlsPassword # a `GTlsPassword` object
---@param flags Gio.TlsPasswordFlags # The flags about the password
---@return nil
function Gio.TlsPassword:set_flags(flags) end

--- # method Gio.TlsPassword:set_value()
---
--- Set the value for this password. The `value` will be copied by the password
--- object.
--- 
--- Specify the `length`, for a non-nul-terminated password. Pass -1 as
--- `length` if using a nul-terminated password, and `length` will be
--- calculated automatically. (Note that the terminating nul is not
--- considered part of the password in this case.)
---
--- ---
---
---@param self Gio.TlsPassword # a `GTlsPassword` object
---@param value unknown[] # the new password value
---@param length integer # the length of the password, or -1
---@return nil
function Gio.TlsPassword:set_value(value, length) end

--- # method Gio.TlsPassword:set_value_full()
---
--- Provide the value for this password.
--- 
--- The `value` will be owned by the password object, and later freed using
--- the `destroy` function callback.
--- 
--- Specify the `length`, for a non-nul-terminated password. Pass -1 as
--- `length` if using a nul-terminated password, and `length` will be
--- calculated automatically. (Note that the terminating nul is not
--- considered part of the password in this case.)
---
--- ---
---
---@param self Gio.TlsPassword # a `GTlsPassword` object
---@param value unknown[] # the value for the password
---@param length integer # the length of the password, or -1
---@param destroy? GLib.DestroyNotify # a function to use to free the password.
---@return nil
function Gio.TlsPassword:set_value_full(value, length, destroy) end

--- # method Gio.TlsPassword:set_warning()
---
--- Set a user readable translated warning. Usually this warning is a
--- representation of the password flags returned from
--- `g_tls_password_get_flags()`.
---
--- ---
---
---@param self Gio.TlsPassword # a `GTlsPassword` object
---@param warning string # The user readable warning
---@return nil
function Gio.TlsPassword:set_warning(warning) end

--- # function Gio.TlsPassword.new()
---
--- Create a new `GTlsPassword` object.
---
--- ---
---
---@param flags Gio.TlsPasswordFlags # the password flags
---@param description string # description of what the password is for
---@return Gio.TlsPassword # The newly allocated password object
function Gio.TlsPassword.new(flags, description) end

--- # record Gio.TlsPasswordClass
---
--- Class structure for `GTlsPassword`.
---
--- ---
---
---@class Gio.TlsPasswordClass
---@field parent_class GObject.ObjectClass
---@field get_value fun(password: Gio.TlsPassword, length: integer): unknown[]
---@field set_value fun(password: Gio.TlsPassword, value: unknown[], length: integer, destroy: GLib.DestroyNotify): nil
---@field get_default_warning fun(password: Gio.TlsPassword): string
---@field padding unknown[]
Gio.TlsPasswordClass = {}

---@enum Gio.TlsPasswordFlags
Gio.TlsPasswordFlags = {}

--- # record Gio.TlsPasswordPrivate
---
---@class Gio.TlsPasswordPrivate
Gio.TlsPasswordPrivate = {}

---@enum Gio.TlsProtocolVersion
Gio.TlsProtocolVersion = {}

---@enum Gio.TlsRehandshakeMode
Gio.TlsRehandshakeMode = {}

--- # interface Gio.TlsServerConnection
---
--- `GTlsServerConnection` is the server-side subclass of `GTlsConnection`,
--- representing a server-side TLS connection.
---
--- ---
---
---@class Gio.TlsServerConnection
---@operator call: Gio.TlsServerConnection
Gio.TlsServerConnection = {}

--- # function Gio.TlsServerConnection.new()
---
--- Creates a new `GTlsServerConnection` wrapping `base_io_stream` (which
--- must have pollable input and output streams).
--- 
--- See the documentation for `GTlsConnection`:base-io-stream for restrictions
--- on when application code can run operations on the `base_io_stream` after
--- this function has returned.
---
--- ---
---
---@param base_io_stream Gio.IOStream # the `GIOStream` to wrap
---@param certificate? Gio.TlsCertificate # the default server certificate, or `nil`
---@return Gio.TlsServerConnection # the new `GTlsServerConnection`, or `nil` on error
function Gio.TlsServerConnection.new(base_io_stream, certificate) end

--- # record Gio.TlsServerConnectionInterface
---
--- vtable for a `GTlsServerConnection` implementation.
---
--- ---
---
---@class Gio.TlsServerConnectionInterface
---@field g_iface GObject.TypeInterface # The parent interface.
Gio.TlsServerConnectionInterface = {}

--- # class Gio.UnixConnection
---
--- This is the subclass of `GSocketConnection` that is created
--- for UNIX domain sockets.
--- 
--- It contains functions to do some of the UNIX socket specific
--- functionality like passing file descriptors.
--- 
--- Since GLib 2.72, `GUnixConnection` is available on all platforms. It requires
--- underlying system support (such as Windows 10 with `AF_UNIX`) at run time.
--- 
--- Before GLib 2.72, `<gio/gunixconnection.h>` belonged to the UNIX-specific GIO
--- interfaces, thus you had to use the `gio-unix-2.0.pc` pkg-config file when
--- using it. This is no longer necessary since GLib 2.72.
---
--- ---
---
---@class Gio.UnixConnection : Gio.SocketConnection
---@field parent_instance Gio.SocketConnection
---@field priv Gio.UnixConnectionPrivate
Gio.UnixConnection = {}

--- # method Gio.UnixConnection:receive_credentials()
---
--- Receives credentials from the sending end of the connection.  The
--- sending end has to call `g_unix_connection_send_credentials()` (or
--- similar) for this to work.
--- 
--- As well as reading the credentials this also reads (and discards) a
--- single byte from the stream, as this is required for credentials
--- passing to work on some implementations.
--- 
--- This method can be expected to be available on the following platforms:
--- 
--- - Linux since GLib 2.26
--- - FreeBSD since GLib 2.26
--- - GNU/kFreeBSD since GLib 2.36
--- - Solaris, Illumos and OpenSolaris since GLib 2.40
--- - GNU/Hurd since GLib 2.40
--- 
--- Other ways to exchange credentials with a foreign peer includes the
--- `GUnixCredentialsMessage` type and `g_socket_get_credentials()` function.
---
--- ---
---
---@param self Gio.UnixConnection # A `GUnixConnection`.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`.
---@return Gio.Credentials # Received credentials on success (free with `g_object_unref()`), `nil` if `error` is set.
function Gio.UnixConnection:receive_credentials(cancellable) end

--- # method Gio.UnixConnection:receive_credentials_async()
---
--- Asynchronously receive credentials.
--- 
--- For more details, see `g_unix_connection_receive_credentials()` which is
--- the synchronous version of this call.
--- 
--- When the operation is finished, `callback` will be called. You can then call
--- `g_unix_connection_receive_credentials_finish()` to get the result of the operation.
---
--- ---
---
---@param self Gio.UnixConnection # A `GUnixConnection`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.UnixConnection:receive_credentials_async(cancellable, callback, user_data) end

--- # method Gio.UnixConnection:receive_credentials_finish()
---
--- Finishes an asynchronous receive credentials operation started with
--- `g_unix_connection_receive_credentials_async()`.
---
--- ---
---
---@param self Gio.UnixConnection # A `GUnixConnection`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return Gio.Credentials # a `GCredentials`, or `nil` on error. Free the returned object with `g_object_unref()`.
function Gio.UnixConnection:receive_credentials_finish(result) end

--- # method Gio.UnixConnection:receive_fd()
---
--- Receives a file descriptor from the sending end of the connection.
--- The sending end has to call `g_unix_connection_send_fd()` for this
--- to work.
--- 
--- As well as reading the fd this also reads a single byte from the
--- stream, as this is required for fd passing to work on some
--- implementations.
---
--- ---
---
---@param self Gio.UnixConnection # a `GUnixConnection`
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@return integer # a file descriptor on success, -1 on error.
function Gio.UnixConnection:receive_fd(cancellable) end

--- # method Gio.UnixConnection:send_credentials()
---
--- Passes the credentials of the current user the receiving side
--- of the connection. The receiving end has to call
--- `g_unix_connection_receive_credentials()` (or similar) to accept the
--- credentials.
--- 
--- As well as sending the credentials this also writes a single NUL
--- byte to the stream, as this is required for credentials passing to
--- work on some implementations.
--- 
--- This method can be expected to be available on the following platforms:
--- 
--- - Linux since GLib 2.26
--- - FreeBSD since GLib 2.26
--- - GNU/kFreeBSD since GLib 2.36
--- - Solaris, Illumos and OpenSolaris since GLib 2.40
--- - GNU/Hurd since GLib 2.40
--- 
--- Other ways to exchange credentials with a foreign peer includes the
--- `GUnixCredentialsMessage` type and `g_socket_get_credentials()` function.
---
--- ---
---
---@param self Gio.UnixConnection # A `GUnixConnection`.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`.
---@return (boolean|nil) # `true` on success, `false` if `error` is set.
function Gio.UnixConnection:send_credentials(cancellable) end

--- # method Gio.UnixConnection:send_credentials_async()
---
--- Asynchronously send credentials.
--- 
--- For more details, see `g_unix_connection_send_credentials()` which is
--- the synchronous version of this call.
--- 
--- When the operation is finished, `callback` will be called. You can then call
--- `g_unix_connection_send_credentials_finish()` to get the result of the operation.
---
--- ---
---
---@param self Gio.UnixConnection # A `GUnixConnection`.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.UnixConnection:send_credentials_async(cancellable, callback, user_data) end

--- # method Gio.UnixConnection:send_credentials_finish()
---
--- Finishes an asynchronous send credentials operation started with
--- `g_unix_connection_send_credentials_async()`.
---
--- ---
---
---@param self Gio.UnixConnection # A `GUnixConnection`.
---@param result Gio.AsyncResult # a `GAsyncResult`.
---@return (boolean|nil) # `true` if the operation was successful, otherwise `false`.
function Gio.UnixConnection:send_credentials_finish(result) end

--- # method Gio.UnixConnection:send_fd()
---
--- Passes a file descriptor to the receiving side of the
--- connection. The receiving end has to call `g_unix_connection_receive_fd()`
--- to accept the file descriptor.
--- 
--- As well as sending the fd this also writes a single byte to the
--- stream, as this is required for fd passing to work on some
--- implementations.
---
--- ---
---
---@param self Gio.UnixConnection # a `GUnixConnection`
---@param fd integer # a file descriptor
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # a `true` on success, `nil` on error.
function Gio.UnixConnection:send_fd(fd, cancellable) end

--- # record Gio.UnixConnectionClass
---
---@class Gio.UnixConnectionClass
---@field parent_class Gio.SocketConnectionClass
Gio.UnixConnectionClass = {}

--- # record Gio.UnixConnectionPrivate
---
---@class Gio.UnixConnectionPrivate
Gio.UnixConnectionPrivate = {}

--- # class Gio.UnixCredentialsMessage
---
--- This `GSocketControlMessage` contains a `GCredentials` instance.  It
--- may be sent using `g_socket_send_message()` and received using
--- `g_socket_receive_message()` over UNIX sockets (ie: sockets in the
--- %G_SOCKET_FAMILY_UNIX family).
--- 
--- For an easier way to send and receive credentials over
--- stream-oriented UNIX sockets, see
--- `g_unix_connection_send_credentials()` and
--- `g_unix_connection_receive_credentials()`. To receive credentials of
--- a foreign process connected to a socket, use
--- `g_socket_get_credentials()`.
--- 
--- Since GLib 2.72, `GUnixCredentialMessage` is available on all platforms. It
--- requires underlying system support (such as Windows 10 with `AF_UNIX`) at run
--- time.
--- 
--- Before GLib 2.72, `<gio/gunixcredentialsmessage.h>` belonged to the UNIX-specific
--- GIO interfaces, thus you had to use the `gio-unix-2.0.pc` pkg-config file
--- when using it. This is no longer necessary since GLib 2.72.
---
--- ---
---
---@class Gio.UnixCredentialsMessage : Gio.SocketControlMessage
---@field parent_instance Gio.SocketControlMessage
---@field priv Gio.UnixCredentialsMessagePrivate
---@operator call: Gio.UnixCredentialsMessage
Gio.UnixCredentialsMessage = {}

--- # method Gio.UnixCredentialsMessage:get_credentials()
---
--- Gets the credentials stored in `message`.
---
--- ---
---
---@param self Gio.UnixCredentialsMessage # A `GUnixCredentialsMessage`.
---@return Gio.Credentials # A `GCredentials` instance. Do not free, it is owned by `message`.
function Gio.UnixCredentialsMessage:get_credentials() end

--- # function Gio.UnixCredentialsMessage.is_supported()
---
--- Checks if passing `GCredentials` on a `GSocket` is supported on this platform.
---
--- ---
---
---@return (boolean|nil) # `true` if supported, `false` otherwise
function Gio.UnixCredentialsMessage.is_supported() end

--- # function Gio.UnixCredentialsMessage.new()
---
--- Creates a new `GUnixCredentialsMessage` with credentials matching the current processes.
---
--- ---
---
---@return Gio.SocketControlMessage # a new `GUnixCredentialsMessage`
function Gio.UnixCredentialsMessage.new() end

--- # function Gio.UnixCredentialsMessage.new_with_credentials()
---
--- Creates a new `GUnixCredentialsMessage` holding `credentials`.
---
--- ---
---
---@param credentials Gio.Credentials # A `GCredentials` object.
---@return Gio.SocketControlMessage # a new `GUnixCredentialsMessage`
function Gio.UnixCredentialsMessage.new_with_credentials(credentials) end

--- # record Gio.UnixCredentialsMessageClass
---
--- Class structure for `GUnixCredentialsMessage`.
---
--- ---
---
---@class Gio.UnixCredentialsMessageClass
---@field parent_class Gio.SocketControlMessageClass
Gio.UnixCredentialsMessageClass = {}

--- # record Gio.UnixCredentialsMessagePrivate
---
---@class Gio.UnixCredentialsMessagePrivate
Gio.UnixCredentialsMessagePrivate = {}

--- # class Gio.UnixFDList
---
--- A `GUnixFDList` contains a list of file descriptors.  It owns the file
--- descriptors that it contains, closing them when finalized.
--- 
--- It may be wrapped in a `GUnixFDMessage` and sent over a `GSocket` in
--- the %G_SOCKET_FAMILY_UNIX family by using `g_socket_send_message()`
--- and received using `g_socket_receive_message()`.
--- 
--- Before 2.74, `<gio/gunixfdlist.h>` belonged to the UNIX-specific GIO
--- interfaces, thus you had to use the `gio-unix-2.0.pc` pkg-config file when
--- using it.
--- 
--- Since 2.74, the API is available for Windows.
---
--- ---
---
---@class Gio.UnixFDList : GObject.Object
---@field parent_instance GObject.Object
---@field priv Gio.UnixFDListPrivate
---@operator call: Gio.UnixFDList
Gio.UnixFDList = {}

--- # method Gio.UnixFDList:append()
---
--- Adds a file descriptor to `list`.
--- 
--- The file descriptor is duplicated using `dup()`. You keep your copy
--- of the descriptor and the copy contained in `list` will be closed
--- when `list` is finalized.
--- 
--- A possible cause of failure is exceeding the per-process or
--- system-wide file descriptor limit.
--- 
--- The index of the file descriptor in the list is returned.  If you use
--- this index with `g_unix_fd_list_get()` then you will receive back a
--- duplicated copy of the same file descriptor.
---
--- ---
---
---@param self Gio.UnixFDList # a `GUnixFDList`
---@param fd integer # a valid open file descriptor
---@return integer # the index of the appended fd in case of success, else -1 (and `error` is set)
function Gio.UnixFDList:append(fd) end

--- # method Gio.UnixFDList:get()
---
--- Gets a file descriptor out of `list`.
--- 
--- `index_` specifies the index of the file descriptor to get.  It is a
--- programmer error for `index_` to be out of range; see
--- `g_unix_fd_list_get_length()`.
--- 
--- The file descriptor is duplicated using `dup()` and set as
--- close-on-exec before being returned.  You must call `close()` on it
--- when you are done.
--- 
--- A possible cause of failure is exceeding the per-process or
--- system-wide file descriptor limit.
---
--- ---
---
---@param self Gio.UnixFDList # a `GUnixFDList`
---@param index_ integer # the index into the list
---@return integer # the file descriptor, or -1 in case of error
function Gio.UnixFDList:get(index_) end

--- # method Gio.UnixFDList:get_length()
---
--- Gets the length of `list` (ie: the number of file descriptors
--- contained within).
---
--- ---
---
---@param self Gio.UnixFDList # a `GUnixFDList`
---@return integer # the length of `list`
function Gio.UnixFDList:get_length() end

--- # method Gio.UnixFDList:peek_fds()
---
--- Returns the array of file descriptors that is contained in this
--- object.
--- 
--- After this call, the descriptors remain the property of `list`.  The
--- caller must not close them and must not free the array.  The array is
--- valid only until `list` is changed in any way.
--- 
--- If `length` is non-`nil` then it is set to the number of file
--- descriptors in the returned array. The returned array is also
--- terminated with -1.
--- 
--- This function never returns `nil`. In case there are no file
--- descriptors contained in `list`, an empty array is returned.
---
--- ---
---
---@param self Gio.UnixFDList # a `GUnixFDList`
---@param length? integer # pointer to the length of the returned array, or `nil`
---@return unknown[] # an array of file descriptors
function Gio.UnixFDList:peek_fds(length) end

--- # method Gio.UnixFDList:steal_fds()
---
--- Returns the array of file descriptors that is contained in this
--- object.
--- 
--- After this call, the descriptors are no longer contained in
--- `list`. Further calls will return an empty list (unless more
--- descriptors have been added).
--- 
--- The return result of this function must be freed with `g_free()`.
--- The caller is also responsible for closing all of the file
--- descriptors.  The file descriptors in the array are set to
--- close-on-exec.
--- 
--- If `length` is non-`nil` then it is set to the number of file
--- descriptors in the returned array. The returned array is also
--- terminated with -1.
--- 
--- This function never returns `nil`. In case there are no file
--- descriptors contained in `list`, an empty array is returned.
---
--- ---
---
---@param self Gio.UnixFDList # a `GUnixFDList`
---@param length? integer # pointer to the length of the returned array, or `nil`
---@return unknown[] # an array of file descriptors
function Gio.UnixFDList:steal_fds(length) end

--- # function Gio.UnixFDList.new()
---
--- Creates a new `GUnixFDList` containing no file descriptors.
---
--- ---
---
---@return Gio.UnixFDList # a new `GUnixFDList`
function Gio.UnixFDList.new() end

--- # function Gio.UnixFDList.new_from_array()
---
--- Creates a new `GUnixFDList` containing the file descriptors given in
--- `fds`.  The file descriptors become the property of the new list and
--- may no longer be used by the caller.  The array itself is owned by
--- the caller.
--- 
--- Each file descriptor in the array should be set to close-on-exec.
--- 
--- If `n_fds` is -1 then `fds` must be terminated with -1.
---
--- ---
---
---@param fds unknown[] # the initial list of file descriptors
---@param n_fds integer # the length of `fds`, or -1
---@return Gio.UnixFDList # a new `GUnixFDList`
function Gio.UnixFDList.new_from_array(fds, n_fds) end

--- # record Gio.UnixFDListClass
---
---@class Gio.UnixFDListClass
---@field parent_class GObject.ObjectClass
Gio.UnixFDListClass = {}

--- # record Gio.UnixFDListPrivate
---
---@class Gio.UnixFDListPrivate
Gio.UnixFDListPrivate = {}

--- # class Gio.UnixFDMessage
---
--- This `GSocketControlMessage` contains a `GUnixFDList`.
--- It may be sent using `g_socket_send_message()` and received using
--- `g_socket_receive_message()` over UNIX sockets (ie: sockets in the
--- %G_SOCKET_FAMILY_UNIX family). The file descriptors are copied
--- between processes by the kernel.
--- 
--- For an easier way to send and receive file descriptors over
--- stream-oriented UNIX sockets, see `g_unix_connection_send_fd()` and
--- `g_unix_connection_receive_fd()`.
--- 
--- Note that `<gio/gunixfdmessage.h>` belongs to the UNIX-specific GIO
--- interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config
--- file when using it.
---
--- ---
---
---@class Gio.UnixFDMessage : Gio.SocketControlMessage
---@field parent_instance Gio.SocketControlMessage
---@field priv Gio.UnixFDMessagePrivate
---@operator call: Gio.UnixFDMessage
Gio.UnixFDMessage = {}

--- # method Gio.UnixFDMessage:append_fd()
---
--- Adds a file descriptor to `message`.
--- 
--- The file descriptor is duplicated using `dup()`. You keep your copy
--- of the descriptor and the copy contained in `message` will be closed
--- when `message` is finalized.
--- 
--- A possible cause of failure is exceeding the per-process or
--- system-wide file descriptor limit.
---
--- ---
---
---@param self Gio.UnixFDMessage # a `GUnixFDMessage`
---@param fd integer # a valid open file descriptor
---@return (boolean|nil) # `true` in case of success, else `false` (and `error` is set)
function Gio.UnixFDMessage:append_fd(fd) end

--- # method Gio.UnixFDMessage:get_fd_list()
---
--- Gets the `GUnixFDList` contained in `message`.  This function does not
--- return a reference to the caller, but the returned list is valid for
--- the lifetime of `message`.
---
--- ---
---
---@param self Gio.UnixFDMessage # a `GUnixFDMessage`
---@return Gio.UnixFDList # the `GUnixFDList` from `message`
function Gio.UnixFDMessage:get_fd_list() end

--- # method Gio.UnixFDMessage:steal_fds()
---
--- Returns the array of file descriptors that is contained in this
--- object.
--- 
--- After this call, the descriptors are no longer contained in
--- `message`. Further calls will return an empty list (unless more
--- descriptors have been added).
--- 
--- The return result of this function must be freed with `g_free()`.
--- The caller is also responsible for closing all of the file
--- descriptors.
--- 
--- If `length` is non-`nil` then it is set to the number of file
--- descriptors in the returned array. The returned array is also
--- terminated with -1.
--- 
--- This function never returns `nil`. In case there are no file
--- descriptors contained in `message`, an empty array is returned.
---
--- ---
---
---@param self Gio.UnixFDMessage # a `GUnixFDMessage`
---@param length? integer # pointer to the length of the returned array, or `nil`
---@return unknown[] # an array of file descriptors
function Gio.UnixFDMessage:steal_fds(length) end

--- # function Gio.UnixFDMessage.new()
---
--- Creates a new `GUnixFDMessage` containing an empty file descriptor
--- list.
---
--- ---
---
---@return Gio.SocketControlMessage # a new `GUnixFDMessage`
function Gio.UnixFDMessage.new() end

--- # function Gio.UnixFDMessage.new_with_fd_list()
---
--- Creates a new `GUnixFDMessage` containing `list`.
---
--- ---
---
---@param fd_list Gio.UnixFDList # a `GUnixFDList`
---@return Gio.SocketControlMessage # a new `GUnixFDMessage`
function Gio.UnixFDMessage.new_with_fd_list(fd_list) end

--- # record Gio.UnixFDMessageClass
---
---@class Gio.UnixFDMessageClass
---@field parent_class Gio.SocketControlMessageClass
Gio.UnixFDMessageClass = {}

--- # record Gio.UnixFDMessagePrivate
---
---@class Gio.UnixFDMessagePrivate
Gio.UnixFDMessagePrivate = {}

--- # class Gio.UnixInputStream
---
--- `GUnixInputStream` implements `GInputStream` for reading from a UNIX
--- file descriptor, including asynchronous operations. (If the file
--- descriptor refers to a socket or pipe, this will use `poll()` to do
--- asynchronous I/O. If it refers to a regular file, it will fall back
--- to doing asynchronous I/O in another thread.)
--- 
--- Note that `<gio/gunixinputstream.h>` belongs to the UNIX-specific GIO
--- interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config
--- file when using it.
---
--- ---
---
---@class Gio.UnixInputStream : Gio.InputStream, Gio.FileDescriptorBased, Gio.PollableInputStream
---@field parent_instance Gio.InputStream
---@field priv Gio.UnixInputStreamPrivate
---@operator call: Gio.UnixInputStream
Gio.UnixInputStream = {}

--- # method Gio.UnixInputStream:get_close_fd()
---
--- Returns whether the file descriptor of `stream` will be
--- closed when the stream is closed.
---
--- ---
---
---@param self Gio.UnixInputStream # a `GUnixInputStream`
---@return (boolean|nil) # `true` if the file descriptor is closed when done
function Gio.UnixInputStream:get_close_fd() end

--- # method Gio.UnixInputStream:get_fd()
---
--- Return the UNIX file descriptor that the stream reads from.
---
--- ---
---
---@param self Gio.UnixInputStream # a `GUnixInputStream`
---@return integer # The file descriptor of `stream`
function Gio.UnixInputStream:get_fd() end

--- # method Gio.UnixInputStream:set_close_fd()
---
--- Sets whether the file descriptor of `stream` shall be closed
--- when the stream is closed.
---
--- ---
---
---@param self Gio.UnixInputStream # a `GUnixInputStream`
---@param close_fd (boolean|nil) # `true` to close the file descriptor when done
---@return nil
function Gio.UnixInputStream:set_close_fd(close_fd) end

--- # function Gio.UnixInputStream.new()
---
--- Creates a new `GUnixInputStream` for the given `fd`.
--- 
--- If `close_fd` is `true`, the file descriptor will be closed
--- when the stream is closed.
---
--- ---
---
---@param fd integer # a UNIX file descriptor
---@param close_fd (boolean|nil) # `true` to close the file descriptor when done
---@return Gio.InputStream # a new `GUnixInputStream`
function Gio.UnixInputStream.new(fd, close_fd) end

--- # record Gio.UnixInputStreamClass
---
---@class Gio.UnixInputStreamClass
---@field parent_class Gio.InputStreamClass
Gio.UnixInputStreamClass = {}

--- # record Gio.UnixInputStreamPrivate
---
---@class Gio.UnixInputStreamPrivate
Gio.UnixInputStreamPrivate = {}

--- # record Gio.UnixMountEntry
---
--- Defines a Unix mount entry (e.g. <filename>/media/cdrom</filename>).
--- This corresponds roughly to a mtab entry.
---
--- ---
---
---@class Gio.UnixMountEntry
Gio.UnixMountEntry = {}

--- # class Gio.UnixMountMonitor
---
--- Watches `GUnixMounts` for changes.
---
--- ---
---
---@class Gio.UnixMountMonitor : GObject.Object
---@operator call: Gio.UnixMountMonitor
Gio.UnixMountMonitor = {}

--- # method Gio.UnixMountMonitor:set_rate_limit()
---
--- This function does nothing.
--- 
--- Before 2.44, this was a partially-effective way of controlling the
--- rate at which events would be reported under some uncommon
--- circumstances.  Since `mount_monitor` is a singleton, it also meant
--- that calling this function would have side effects for other users of
--- the monitor.
---
--- ---
---
---@param self Gio.UnixMountMonitor # a `GUnixMountMonitor`
---@param limit_msec integer # a integer with the limit in milliseconds to poll for changes.
---@return nil
function Gio.UnixMountMonitor:set_rate_limit(limit_msec) end

--- # function Gio.UnixMountMonitor.get()
---
--- Gets the `GUnixMountMonitor` for the current thread-default main
--- context.
--- 
--- The mount monitor can be used to monitor for changes to the list of
--- mounted filesystems as well as the list of mount points (ie: fstab
--- entries).
--- 
--- You must only call `g_object_unref()` on the return value from under
--- the same main context as you called this function.
---
--- ---
---
---@return Gio.UnixMountMonitor # the `GUnixMountMonitor`.
function Gio.UnixMountMonitor.get() end

--- # function Gio.UnixMountMonitor.new()
---
--- Deprecated alias for `g_unix_mount_monitor_get()`.
--- 
--- This function was never a true constructor, which is why it was
--- renamed.
---
--- ---
---
---@return Gio.UnixMountMonitor # a `GUnixMountMonitor`.
function Gio.UnixMountMonitor.new() end

--- # record Gio.UnixMountMonitorClass
---
---@class Gio.UnixMountMonitorClass
Gio.UnixMountMonitorClass = {}

--- # record Gio.UnixMountPoint
---
--- Defines a Unix mount point (e.g. <filename>/dev</filename>).
--- This corresponds roughly to a fstab entry.
---
--- ---
---
---@class Gio.UnixMountPoint
Gio.UnixMountPoint = {}

--- # method Gio.UnixMountPoint:compare()
---
--- Compares two unix mount points.
---
--- ---
---
---@param self Gio.UnixMountPoint # a `GUnixMount`.
---@param mount2 Gio.UnixMountPoint # a `GUnixMount`.
---@return integer # 1, 0 or -1 if `mount1` is greater than, equal to, or less than `mount2`, respectively.
function Gio.UnixMountPoint:compare(mount2) end

--- # method Gio.UnixMountPoint:copy()
---
--- Makes a copy of `mount_point`.
---
--- ---
---
---@param self Gio.UnixMountPoint # a `GUnixMountPoint`.
---@return Gio.UnixMountPoint # a new `GUnixMountPoint`
function Gio.UnixMountPoint:copy() end

--- # method Gio.UnixMountPoint:free()
---
--- Frees a unix mount point.
---
--- ---
---
---@param self Gio.UnixMountPoint # unix mount point to free.
---@return nil
function Gio.UnixMountPoint:free() end

--- # method Gio.UnixMountPoint:get_device_path()
---
--- Gets the device path for a unix mount point.
---
--- ---
---
---@param self Gio.UnixMountPoint # a `GUnixMountPoint`.
---@return string # a string containing the device path.
function Gio.UnixMountPoint:get_device_path() end

--- # method Gio.UnixMountPoint:get_fs_type()
---
--- Gets the file system type for the mount point.
---
--- ---
---
---@param self Gio.UnixMountPoint # a `GUnixMountPoint`.
---@return string # a string containing the file system type.
function Gio.UnixMountPoint:get_fs_type() end

--- # method Gio.UnixMountPoint:get_mount_path()
---
--- Gets the mount path for a unix mount point.
---
--- ---
---
---@param self Gio.UnixMountPoint # a `GUnixMountPoint`.
---@return string # a string containing the mount path.
function Gio.UnixMountPoint:get_mount_path() end

--- # method Gio.UnixMountPoint:get_options()
---
--- Gets the options for the mount point.
---
--- ---
---
---@param self Gio.UnixMountPoint # a `GUnixMountPoint`.
---@return string # a string containing the options.
function Gio.UnixMountPoint:get_options() end

--- # method Gio.UnixMountPoint:guess_can_eject()
---
--- Guesses whether a Unix mount point can be ejected.
---
--- ---
---
---@param self Gio.UnixMountPoint # a `GUnixMountPoint`
---@return (boolean|nil) # `true` if `mount_point` is deemed to be ejectable.
function Gio.UnixMountPoint:guess_can_eject() end

--- # method Gio.UnixMountPoint:guess_icon()
---
--- Guesses the icon of a Unix mount point.
---
--- ---
---
---@param self Gio.UnixMountPoint # a `GUnixMountPoint`
---@return Gio.Icon # a `GIcon`
function Gio.UnixMountPoint:guess_icon() end

--- # method Gio.UnixMountPoint:guess_name()
---
--- Guesses the name of a Unix mount point.
--- The result is a translated string.
---
--- ---
---
---@param self Gio.UnixMountPoint # a `GUnixMountPoint`
---@return string # A newly allocated string that must be freed with `g_free()`
function Gio.UnixMountPoint:guess_name() end

--- # method Gio.UnixMountPoint:guess_symbolic_icon()
---
--- Guesses the symbolic icon of a Unix mount point.
---
--- ---
---
---@param self Gio.UnixMountPoint # a `GUnixMountPoint`
---@return Gio.Icon # a `GIcon`
function Gio.UnixMountPoint:guess_symbolic_icon() end

--- # method Gio.UnixMountPoint:is_loopback()
---
--- Checks if a unix mount point is a loopback device.
---
--- ---
---
---@param self Gio.UnixMountPoint # a `GUnixMountPoint`.
---@return (boolean|nil) # `true` if the mount point is a loopback. `false` otherwise.
function Gio.UnixMountPoint:is_loopback() end

--- # method Gio.UnixMountPoint:is_readonly()
---
--- Checks if a unix mount point is read only.
---
--- ---
---
---@param self Gio.UnixMountPoint # a `GUnixMountPoint`.
---@return (boolean|nil) # `true` if a mount point is read only.
function Gio.UnixMountPoint:is_readonly() end

--- # method Gio.UnixMountPoint:is_user_mountable()
---
--- Checks if a unix mount point is mountable by the user.
---
--- ---
---
---@param self Gio.UnixMountPoint # a `GUnixMountPoint`.
---@return (boolean|nil) # `true` if the mount point is user mountable.
function Gio.UnixMountPoint:is_user_mountable() end

--- # function Gio.UnixMountPoint.at()
---
--- Gets a `GUnixMountPoint` for a given mount path. If `time_read` is set, it
--- will be filled with a unix timestamp for checking if the mount points have
--- changed since with `g_unix_mount_points_changed_since()`.
--- 
--- If more mount points have the same mount path, the last matching mount point
--- is returned.
---
--- ---
---
---@param mount_path string # path for a possible unix mount point.
---@param time_read? integer # guint64 to contain a timestamp.
---@return Gio.UnixMountPoint # a `GUnixMountPoint`, or `nil` if no match is found.
function Gio.UnixMountPoint.at(mount_path, time_read) end

--- # class Gio.UnixOutputStream
---
--- `GUnixOutputStream` implements `GOutputStream` for writing to a UNIX
--- file descriptor, including asynchronous operations. (If the file
--- descriptor refers to a socket or pipe, this will use `poll()` to do
--- asynchronous I/O. If it refers to a regular file, it will fall back
--- to doing asynchronous I/O in another thread.)
--- 
--- Note that `<gio/gunixoutputstream.h>` belongs to the UNIX-specific GIO
--- interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config file
--- when using it.
---
--- ---
---
---@class Gio.UnixOutputStream : Gio.OutputStream, Gio.FileDescriptorBased, Gio.PollableOutputStream
---@field parent_instance Gio.OutputStream
---@field priv Gio.UnixOutputStreamPrivate
---@operator call: Gio.UnixOutputStream
Gio.UnixOutputStream = {}

--- # method Gio.UnixOutputStream:get_close_fd()
---
--- Returns whether the file descriptor of `stream` will be
--- closed when the stream is closed.
---
--- ---
---
---@param self Gio.UnixOutputStream # a `GUnixOutputStream`
---@return (boolean|nil) # `true` if the file descriptor is closed when done
function Gio.UnixOutputStream:get_close_fd() end

--- # method Gio.UnixOutputStream:get_fd()
---
--- Return the UNIX file descriptor that the stream writes to.
---
--- ---
---
---@param self Gio.UnixOutputStream # a `GUnixOutputStream`
---@return integer # The file descriptor of `stream`
function Gio.UnixOutputStream:get_fd() end

--- # method Gio.UnixOutputStream:set_close_fd()
---
--- Sets whether the file descriptor of `stream` shall be closed
--- when the stream is closed.
---
--- ---
---
---@param self Gio.UnixOutputStream # a `GUnixOutputStream`
---@param close_fd (boolean|nil) # `true` to close the file descriptor when done
---@return nil
function Gio.UnixOutputStream:set_close_fd(close_fd) end

--- # function Gio.UnixOutputStream.new()
---
--- Creates a new `GUnixOutputStream` for the given `fd`.
--- 
--- If `close_fd`, is `true`, the file descriptor will be closed when
--- the output stream is destroyed.
---
--- ---
---
---@param fd integer # a UNIX file descriptor
---@param close_fd (boolean|nil) # `true` to close the file descriptor when done
---@return Gio.OutputStream # a new `GOutputStream`
function Gio.UnixOutputStream.new(fd, close_fd) end

--- # record Gio.UnixOutputStreamClass
---
---@class Gio.UnixOutputStreamClass
---@field parent_class Gio.OutputStreamClass
Gio.UnixOutputStreamClass = {}

--- # record Gio.UnixOutputStreamPrivate
---
---@class Gio.UnixOutputStreamPrivate
Gio.UnixOutputStreamPrivate = {}

--- # class Gio.UnixSocketAddress
---
--- Support for UNIX-domain (also known as local) sockets.
--- 
--- UNIX domain sockets are generally visible in the filesystem.
--- However, some systems support abstract socket names which are not
--- visible in the filesystem and not affected by the filesystem
--- permissions, visibility, etc. Currently this is only supported
--- under Linux. If you attempt to use abstract sockets on other
--- systems, function calls may return %G_IO_ERROR_NOT_SUPPORTED
--- errors. You can use `g_unix_socket_address_abstract_names_supported()`
--- to see if abstract names are supported.
--- 
--- Since GLib 2.72, `GUnixSocketAddress` is available on all platforms. It
--- requires underlying system support (such as Windows 10 with `AF_UNIX`) at
--- run time.
--- 
--- Before GLib 2.72, `<gio/gunixsocketaddress.h>` belonged to the UNIX-specific
--- GIO interfaces, thus you had to use the `gio-unix-2.0.pc` pkg-config file
--- when using it. This is no longer necessary since GLib 2.72.
---
--- ---
---
---@class Gio.UnixSocketAddress : Gio.SocketAddress, Gio.SocketConnectable
---@field parent_instance Gio.SocketAddress
---@field priv Gio.UnixSocketAddressPrivate
---@operator call: Gio.UnixSocketAddress
Gio.UnixSocketAddress = {}

--- # method Gio.UnixSocketAddress:get_address_type()
---
--- Gets `address`'s type.
---
--- ---
---
---@param self Gio.UnixSocketAddress # a `GInetSocketAddress`
---@return Gio.UnixSocketAddressType # a `GUnixSocketAddressType`
function Gio.UnixSocketAddress:get_address_type() end

--- # method Gio.UnixSocketAddress:get_is_abstract()
---
--- Tests if `address` is abstract.
---
--- ---
---
---@param self Gio.UnixSocketAddress # a `GInetSocketAddress`
---@return (boolean|nil) # `true` if the address is abstract, `false` otherwise
function Gio.UnixSocketAddress:get_is_abstract() end

--- # method Gio.UnixSocketAddress:get_path()
---
--- Gets `address`'s path, or for abstract sockets the "name".
--- 
--- Guaranteed to be zero-terminated, but an abstract socket
--- may contain embedded zeros, and thus you should use
--- `g_unix_socket_address_get_path_len()` to get the true length
--- of this string.
---
--- ---
---
---@param self Gio.UnixSocketAddress # a `GInetSocketAddress`
---@return string # the path for `address`
function Gio.UnixSocketAddress:get_path() end

--- # method Gio.UnixSocketAddress:get_path_len()
---
--- Gets the length of `address`'s path.
--- 
--- For details, see `g_unix_socket_address_get_path()`.
---
--- ---
---
---@param self Gio.UnixSocketAddress # a `GInetSocketAddress`
---@return integer # the length of the path
function Gio.UnixSocketAddress:get_path_len() end

--- # function Gio.UnixSocketAddress.abstract_names_supported()
---
--- Checks if abstract UNIX domain socket names are supported.
---
--- ---
---
---@return (boolean|nil) # `true` if supported, `false` otherwise
function Gio.UnixSocketAddress.abstract_names_supported() end

--- # function Gio.UnixSocketAddress.new()
---
--- Creates a new `GUnixSocketAddress` for `path`.
--- 
--- To create abstract socket addresses, on systems that support that,
--- use `g_unix_socket_address_new_abstract()`.
---
--- ---
---
---@param path string # the socket path
---@return Gio.SocketAddress # a new `GUnixSocketAddress`
function Gio.UnixSocketAddress.new(path) end

--- # function Gio.UnixSocketAddress.new_abstract()
---
--- Creates a new %G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED
--- `GUnixSocketAddress` for `path`.
---
--- ---
---
---@param path unknown[] # the abstract name
---@param path_len integer # the length of `path`, or -1
---@return Gio.SocketAddress # a new `GUnixSocketAddress`
function Gio.UnixSocketAddress.new_abstract(path, path_len) end

--- # function Gio.UnixSocketAddress.new_with_type()
---
--- Creates a new `GUnixSocketAddress` of type `type` with name `path`.
--- 
--- If `type` is %G_UNIX_SOCKET_ADDRESS_PATH, this is equivalent to
--- calling `g_unix_socket_address_new()`.
--- 
--- If `type` is %G_UNIX_SOCKET_ADDRESS_ANONYMOUS, `path` and `path_len` will be
--- ignored.
--- 
--- If `path_type` is %G_UNIX_SOCKET_ADDRESS_ABSTRACT, then `path_len`
--- bytes of `path` will be copied to the socket's path, and only those
--- bytes will be considered part of the name. (If `path_len` is -1,
--- then `path` is assumed to be NUL-terminated.) For example, if `path`
--- was "test", then calling `g_socket_address_get_native_size()` on the
--- returned socket would return 7 (2 bytes of overhead, 1 byte for the
--- abstract-socket indicator byte, and 4 bytes for the name "test").
--- 
--- If `path_type` is %G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED, then
--- `path_len` bytes of `path` will be copied to the socket's path, the
--- rest of the path will be padded with 0 bytes, and the entire
--- zero-padded buffer will be considered the name. (As above, if
--- `path_len` is -1, then `path` is assumed to be NUL-terminated.) In
--- this case, `g_socket_address_get_native_size()` will always return
--- the full size of a `struct sockaddr_un`, although
--- `g_unix_socket_address_get_path_len()` will still return just the
--- length of `path`.
--- 
--- %G_UNIX_SOCKET_ADDRESS_ABSTRACT is preferred over
--- %G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED for new programs. Of course,
--- when connecting to a server created by another process, you must
--- use the appropriate type corresponding to how that process created
--- its listening socket.
---
--- ---
---
---@param path unknown[] # the name
---@param path_len integer # the length of `path`, or -1
---@param type Gio.UnixSocketAddressType # a `GUnixSocketAddressType`
---@return Gio.SocketAddress # a new `GUnixSocketAddress`
function Gio.UnixSocketAddress.new_with_type(path, path_len, type) end

--- # record Gio.UnixSocketAddressClass
---
---@class Gio.UnixSocketAddressClass
---@field parent_class Gio.SocketAddressClass
Gio.UnixSocketAddressClass = {}

--- # record Gio.UnixSocketAddressPrivate
---
---@class Gio.UnixSocketAddressPrivate
Gio.UnixSocketAddressPrivate = {}

---@enum Gio.UnixSocketAddressType
Gio.UnixSocketAddressType = {}

--- # class Gio.Vfs
---
--- Entry point for using GIO functionality.
---
--- ---
---
---@class Gio.Vfs : GObject.Object
---@field parent_instance GObject.Object
Gio.Vfs = {}

--- # method Gio.Vfs:get_file_for_path()
---
--- Gets a `GFile` for `path`.
---
--- ---
---
---@param self Gio.Vfs # a `GVfs`.
---@param path string # a string containing a VFS path.
---@return Gio.File # a `GFile`. Free the returned object with `g_object_unref()`.
function Gio.Vfs:get_file_for_path(path) end

--- # method Gio.Vfs:get_file_for_uri()
---
--- Gets a `GFile` for `uri`.
--- 
--- This operation never fails, but the returned object
--- might not support any I/O operation if the URI
--- is malformed or if the URI scheme is not supported.
---
--- ---
---
---@param self Gio.Vfs # a`GVfs`.
---@param uri string # a string containing a URI
---@return Gio.File # a `GFile`. Free the returned object with `g_object_unref()`.
function Gio.Vfs:get_file_for_uri(uri) end

--- # method Gio.Vfs:get_supported_uri_schemes()
---
--- Gets a list of URI schemes supported by `vfs`.
---
--- ---
---
---@param self Gio.Vfs # a `GVfs`.
---@return unknown[] # a `nil`-terminated array of strings. The returned array belongs to GIO and must not be freed or modified.
function Gio.Vfs:get_supported_uri_schemes() end

--- # method Gio.Vfs:is_active()
---
--- Checks if the VFS is active.
---
--- ---
---
---@param self Gio.Vfs # a `GVfs`.
---@return (boolean|nil) # `true` if construction of the `vfs` was successful and it is now active.
function Gio.Vfs:is_active() end

--- # method Gio.Vfs:parse_name()
---
--- This operation never fails, but the returned object might
--- not support any I/O operations if the `parse_name` cannot
--- be parsed by the `GVfs` module.
---
--- ---
---
---@param self Gio.Vfs # a `GVfs`.
---@param parse_name string # a string to be parsed by the VFS module.
---@return Gio.File # a `GFile` for the given `parse_name`. Free the returned object with `g_object_unref()`.
function Gio.Vfs:parse_name(parse_name) end

--- # method Gio.Vfs:register_uri_scheme()
---
--- Registers `uri_func` and `parse_name_func` as the `GFile` URI and parse name
--- lookup functions for URIs with a scheme matching `scheme`.
--- Note that `scheme` is registered only within the running application, as
--- opposed to desktop-wide as it happens with GVfs backends.
--- 
--- When a `GFile` is requested with an URI containing `scheme` (e.g. through
--- `g_file_new_for_uri()`), `uri_func` will be called to allow a custom
--- constructor. The implementation of `uri_func` should not be blocking, and
--- must not call `g_vfs_register_uri_scheme()` or `g_vfs_unregister_uri_scheme()`.
--- 
--- When `g_file_parse_name()` is called with a parse name obtained from such file,
--- `parse_name_func` will be called to allow the `GFile` to be created again. In
--- that case, it's responsibility of `parse_name_func` to make sure the parse
--- name matches what the custom `GFile` implementation returned when
--- `g_file_get_parse_name()` was previously called. The implementation of
--- `parse_name_func` should not be blocking, and must not call
--- `g_vfs_register_uri_scheme()` or `g_vfs_unregister_uri_scheme()`.
--- 
--- It's an error to call this function twice with the same scheme. To unregister
--- a custom URI scheme, use `g_vfs_unregister_uri_scheme()`.
---
--- ---
---
---@param self Gio.Vfs # a `GVfs`
---@param scheme string # an URI scheme, e.g. "http"
---@param uri_func? Gio.VfsFileLookupFunc # a `GVfsFileLookupFunc`
---@param uri_data? userdata # custom data passed to be passed to `uri_func`, or `nil`
---@param uri_destroy? GLib.DestroyNotify # function to be called when unregistering the URI scheme, or when `vfs` is disposed, to free the resources used by the URI lookup function
---@param parse_name_func? Gio.VfsFileLookupFunc # a `GVfsFileLookupFunc`
---@param parse_name_data? userdata # custom data passed to be passed to `parse_name_func`, or `nil`
---@param parse_name_destroy? GLib.DestroyNotify # function to be called when unregistering the URI scheme, or when `vfs` is disposed, to free the resources used by the parse name lookup function
---@return (boolean|nil) # `true` if `scheme` was successfully registered, or `false` if a handler for `scheme` already exists.
function Gio.Vfs:register_uri_scheme(scheme, uri_func, uri_data, uri_destroy, parse_name_func, parse_name_data, parse_name_destroy) end

--- # method Gio.Vfs:unregister_uri_scheme()
---
--- Unregisters the URI handler for `scheme` previously registered with
--- `g_vfs_register_uri_scheme()`.
---
--- ---
---
---@param self Gio.Vfs # a `GVfs`
---@param scheme string # an URI scheme, e.g. "http"
---@return (boolean|nil) # `true` if `scheme` was successfully unregistered, or `false` if a handler for `scheme` does not exist.
function Gio.Vfs:unregister_uri_scheme(scheme) end

--- # function Gio.Vfs.get_default()
---
--- Gets the default `GVfs` for the system.
---
--- ---
---
---@return Gio.Vfs # a `GVfs`, which will be the local file system `GVfs` if no other implementation is available.
function Gio.Vfs.get_default() end

--- # function Gio.Vfs.get_local()
---
--- Gets the local `GVfs` for the system.
---
--- ---
---
---@return Gio.Vfs # a `GVfs`.
function Gio.Vfs.get_local() end

--- # record Gio.VfsClass
---
---@class Gio.VfsClass
---@field parent_class GObject.ObjectClass
---@field is_active fun(vfs: Gio.Vfs): (boolean|nil)
---@field get_file_for_path fun(vfs: Gio.Vfs, path: string): Gio.File
---@field get_file_for_uri fun(vfs: Gio.Vfs, uri: string): Gio.File
---@field get_supported_uri_schemes fun(vfs: Gio.Vfs): unknown[]
---@field parse_name fun(vfs: Gio.Vfs, parse_name: string): Gio.File
---@field local_file_add_info fun(vfs: Gio.Vfs, filename: string, device: integer, attribute_matcher: Gio.FileAttributeMatcher, info: Gio.FileInfo, cancellable: Gio.Cancellable, extra_data: userdata, free_extra_data: GLib.DestroyNotify): nil
---@field add_writable_namespaces fun(vfs: Gio.Vfs, list: Gio.FileAttributeInfoList): nil
---@field local_file_set_attributes fun(vfs: Gio.Vfs, filename: string, info: Gio.FileInfo, flags: Gio.FileQueryInfoFlags, cancellable: Gio.Cancellable): (boolean|nil)
---@field local_file_removed fun(vfs: Gio.Vfs, filename: string): nil
---@field local_file_moved fun(vfs: Gio.Vfs, source: string, dest: string): nil
Gio.VfsClass = {}

---@alias Gio.VfsFileLookupFunc fun(vfs: Gio.Vfs, identifier: string, user_data: userdata): Gio.File

--- # interface Gio.Volume
---
--- The `GVolume` interface represents user-visible objects that can be
--- mounted. Note, when porting from GnomeVFS, `GVolume` is the moral
--- equivalent of `GnomeVFSDrive`.
--- 
--- Mounting a `GVolume` instance is an asynchronous operation. For more
--- information about asynchronous operations, see `GAsyncResult` and
--- `GTask`. To mount a `GVolume`, first call `g_volume_mount()` with (at
--- least) the `GVolume` instance, optionally a `GMountOperation` object
--- and a `GAsyncReadyCallback`.
--- 
--- Typically, one will only want to pass `nil` for the
--- `GMountOperation` if automounting all volumes when a desktop session
--- starts since it's not desirable to put up a lot of dialogs asking
--- for credentials.
--- 
--- The callback will be fired when the operation has resolved (either
--- with success or failure), and a `GAsyncResult` instance will be
--- passed to the callback.  That callback should then call
--- `g_volume_mount_finish()` with the `GVolume` instance and the
--- `GAsyncResult` data to see if the operation was completed
--- successfully.  If an `error` is present when `g_volume_mount_finish()`
--- is called, then it will be filled with any error information.
--- 
--- ## Volume Identifiers # {`volume`-identifier}
--- 
--- It is sometimes necessary to directly access the underlying
--- operating system object behind a volume (e.g. for passing a volume
--- to an application via the commandline). For this purpose, GIO
--- allows to obtain an 'identifier' for the volume. There can be
--- different kinds of identifiers, such as Hal UDIs, filesystem labels,
--- traditional Unix devices (e.g. `/dev/sda2`), UUIDs. GIO uses predefined
--- strings as names for the different kinds of identifiers:
--- %G_VOLUME_IDENTIFIER_KIND_UUID, %G_VOLUME_IDENTIFIER_KIND_LABEL, etc.
--- Use `g_volume_get_identifier()` to obtain an identifier for a volume.
--- 
--- 
--- Note that %G_VOLUME_IDENTIFIER_KIND_HAL_UDI will only be available
--- when the gvfs hal volume monitor is in use. Other volume monitors
--- will generally be able to provide the %G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE
--- identifier, which can be used to obtain a hal device by means of
--- `libhal_manager_find_device_string_match()`.
---
--- ---
---
---@class Gio.Volume
Gio.Volume = {}

--- # method Gio.Volume:can_eject()
---
--- Checks if a volume can be ejected.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@return (boolean|nil) # `true` if the `volume` can be ejected. `false` otherwise
function Gio.Volume:can_eject() end

--- # method Gio.Volume:can_mount()
---
--- Checks if a volume can be mounted.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@return (boolean|nil) # `true` if the `volume` can be mounted. `false` otherwise
function Gio.Volume:can_mount() end

--- # method Gio.Volume:eject()
---
--- Ejects a volume. This is an asynchronous operation, and is
--- finished by calling `g_volume_eject_finish()` with the `volume`
--- and `GAsyncResult` returned in the `callback`.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@param flags Gio.MountUnmountFlags # flags affecting the unmount if required for eject
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`, or `nil`
---@param user_data? userdata # user data that gets passed to `callback`
---@return nil
function Gio.Volume:eject(flags, cancellable, callback, user_data) end

--- # method Gio.Volume:eject_finish()
---
--- Finishes ejecting a volume. If any errors occurred during the operation,
--- `error` will be set to contain the errors and `false` will be returned.
---
--- ---
---
---@param self Gio.Volume # pointer to a `GVolume`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true`, `false` if operation failed
function Gio.Volume:eject_finish(result) end

--- # method Gio.Volume:eject_with_operation()
---
--- Ejects a volume. This is an asynchronous operation, and is
--- finished by calling `g_volume_eject_with_operation_finish()` with the `volume`
--- and `GAsyncResult` data returned in the `callback`.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@param flags Gio.MountUnmountFlags # flags affecting the unmount if required for eject
---@param mount_operation? Gio.MountOperation # a `GMountOperation` or `nil` to avoid user interaction
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`, or `nil`
---@param user_data? userdata # user data passed to `callback`
---@return nil
function Gio.Volume:eject_with_operation(flags, mount_operation, cancellable, callback, user_data) end

--- # method Gio.Volume:eject_with_operation_finish()
---
--- Finishes ejecting a volume. If any errors occurred during the operation,
--- `error` will be set to contain the errors and `false` will be returned.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` if the volume was successfully ejected. `false` otherwise
function Gio.Volume:eject_with_operation_finish(result) end

--- # method Gio.Volume:enumerate_identifiers()
---
--- Gets the kinds of [identifiers][volume-identifier] that `volume` has.
--- Use `g_volume_get_identifier()` to obtain the identifiers themselves.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@return unknown[] # a `nil`-terminated array of strings containing kinds of identifiers. Use `g_strfreev()` to free.
function Gio.Volume:enumerate_identifiers() end

--- # method Gio.Volume:get_activation_root()
---
--- Gets the activation root for a `GVolume` if it is known ahead of
--- mount time. Returns `nil` otherwise. If not `nil` and if `volume`
--- is mounted, then the result of `g_mount_get_root()` on the
--- `GMount` object obtained from `g_volume_get_mount()` will always
--- either be equal or a prefix of what this function returns. In
--- other words, in code
--- 
--- ```c
---   GMount *mount;
---   GFile *mount_root
---   GFile *volume_activation_root;
--- 
---   mount = g_volume_get_mount (volume); // mounted, so never NULL
---   mount_root = g_mount_get_root (mount);
---   volume_activation_root = g_volume_get_activation_root (volume); // assume not NULL
--- ```
--- then the expression
--- ```c
---   (g_file_has_prefix (volume_activation_root, mount_root) ||
---    g_file_equal (volume_activation_root, mount_root))
--- ```
--- will always be `true`.
--- 
--- Activation roots are typically used in `GVolumeMonitor`
--- implementations to find the underlying mount to shadow, see
--- `g_mount_is_shadowed()` for more details.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@return Gio.File # the activation root of `volume` or `nil`. Use `g_object_unref()` to free.
function Gio.Volume:get_activation_root() end

--- # method Gio.Volume:get_drive()
---
--- Gets the drive for the `volume`.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@return Gio.Drive # a `GDrive` or `nil` if `volume` is not associated with a drive. The returned object should be unreffed with `g_object_unref()` when no longer needed.
function Gio.Volume:get_drive() end

--- # method Gio.Volume:get_icon()
---
--- Gets the icon for `volume`.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@return Gio.Icon # a `GIcon`. The returned object should be unreffed with `g_object_unref()` when no longer needed.
function Gio.Volume:get_icon() end

--- # method Gio.Volume:get_identifier()
---
--- Gets the identifier of the given kind for `volume`.
--- See the [introduction][volume-identifier] for more
--- information about volume identifiers.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@param kind string # the kind of identifier to return
---@return string # a newly allocated string containing the requested identifier, or `nil` if the `GVolume` doesn't have this kind of identifier
function Gio.Volume:get_identifier(kind) end

--- # method Gio.Volume:get_mount()
---
--- Gets the mount for the `volume`.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@return Gio.Mount # a `GMount` or `nil` if `volume` isn't mounted. The returned object should be unreffed with `g_object_unref()` when no longer needed.
function Gio.Volume:get_mount() end

--- # method Gio.Volume:get_name()
---
--- Gets the name of `volume`.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@return string # the name for the given `volume`. The returned string should be freed with `g_free()` when no longer needed.
function Gio.Volume:get_name() end

--- # method Gio.Volume:get_sort_key()
---
--- Gets the sort key for `volume`, if any.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@return string # Sorting key for `volume` or `nil` if no such key is available
function Gio.Volume:get_sort_key() end

--- # method Gio.Volume:get_symbolic_icon()
---
--- Gets the symbolic icon for `volume`.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@return Gio.Icon # a `GIcon`. The returned object should be unreffed with `g_object_unref()` when no longer needed.
function Gio.Volume:get_symbolic_icon() end

--- # method Gio.Volume:get_uuid()
---
--- Gets the UUID for the `volume`. The reference is typically based on
--- the file system UUID for the volume in question and should be
--- considered an opaque string. Returns `nil` if there is no UUID
--- available.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@return string # the UUID for `volume` or `nil` if no UUID can be computed. The returned string should be freed with `g_free()` when no longer needed.
function Gio.Volume:get_uuid() end

--- # method Gio.Volume:mount()
---
--- Mounts a volume. This is an asynchronous operation, and is
--- finished by calling `g_volume_mount_finish()` with the `volume`
--- and `GAsyncResult` returned in the `callback`.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@param flags Gio.MountMountFlags # flags affecting the operation
---@param mount_operation? Gio.MountOperation # a `GMountOperation` or `nil` to avoid user interaction
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`, or `nil`
---@param user_data? userdata # user data that gets passed to `callback`
---@return nil
function Gio.Volume:mount(flags, mount_operation, cancellable, callback, user_data) end

--- # method Gio.Volume:mount_finish()
---
--- Finishes mounting a volume. If any errors occurred during the operation,
--- `error` will be set to contain the errors and `false` will be returned.
--- 
--- If the mount operation succeeded, `g_volume_get_mount()` on `volume`
--- is guaranteed to return the mount right after calling this
--- function; there's no need to listen for the 'mount-added' signal on
--- `GVolumeMonitor`.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true`, `false` if operation failed
function Gio.Volume:mount_finish(result) end

--- # method Gio.Volume:should_automount()
---
--- Returns whether the volume should be automatically mounted.
---
--- ---
---
---@param self Gio.Volume # a `GVolume`
---@return (boolean|nil) # `true` if the volume should be automatically mounted
function Gio.Volume:should_automount() end

--- # record Gio.VolumeIface
---
--- Interface for implementing operations for mountable volumes.
---
--- ---
---
---@class Gio.VolumeIface
---@field g_iface GObject.TypeInterface # The parent interface.
---@field changed fun(volume: Gio.Volume): nil
---@field removed fun(volume: Gio.Volume): nil
---@field get_name fun(volume: Gio.Volume): string
---@field get_icon fun(volume: Gio.Volume): Gio.Icon
---@field get_uuid fun(volume: Gio.Volume): string
---@field get_drive fun(volume: Gio.Volume): Gio.Drive
---@field get_mount fun(volume: Gio.Volume): Gio.Mount
---@field can_mount fun(volume: Gio.Volume): (boolean|nil)
---@field can_eject fun(volume: Gio.Volume): (boolean|nil)
---@field mount_fn fun(volume: Gio.Volume, flags: Gio.MountMountFlags, mount_operation: Gio.MountOperation, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field mount_finish fun(volume: Gio.Volume, result: Gio.AsyncResult): (boolean|nil)
---@field eject fun(volume: Gio.Volume, flags: Gio.MountUnmountFlags, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field eject_finish fun(volume: Gio.Volume, result: Gio.AsyncResult): (boolean|nil)
---@field get_identifier fun(volume: Gio.Volume, kind: string): string
---@field enumerate_identifiers fun(volume: Gio.Volume): unknown[]
---@field should_automount fun(volume: Gio.Volume): (boolean|nil)
---@field get_activation_root fun(volume: Gio.Volume): Gio.File
---@field eject_with_operation fun(volume: Gio.Volume, flags: Gio.MountUnmountFlags, mount_operation: Gio.MountOperation, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback, user_data: userdata): nil
---@field eject_with_operation_finish fun(volume: Gio.Volume, result: Gio.AsyncResult): (boolean|nil)
---@field get_sort_key fun(volume: Gio.Volume): string
---@field get_symbolic_icon fun(volume: Gio.Volume): Gio.Icon
Gio.VolumeIface = {}

--- # class Gio.VolumeMonitor
---
--- `GVolumeMonitor` is for listing the user interesting devices and volumes
--- on the computer. In other words, what a file selector or file manager
--- would show in a sidebar.
--- 
--- `GVolumeMonitor` is not
--- [thread-default-context aware][g-main-context-push-thread-default],
--- and so should not be used other than from the main thread, with no
--- thread-default-context active.
--- 
--- In order to receive updates about volumes and mounts monitored through GVFS,
--- a main loop must be running.
---
--- ---
---
---@class Gio.VolumeMonitor : GObject.Object
---@field parent_instance GObject.Object
---@field priv userdata
Gio.VolumeMonitor = {}

--- # method Gio.VolumeMonitor:get_connected_drives()
---
--- Gets a list of drives connected to the system.
--- 
--- The returned list should be freed with `g_list_free()`, after
--- its elements have been unreffed with `g_object_unref()`.
---
--- ---
---
---@param self Gio.VolumeMonitor # a `GVolumeMonitor`.
---@return Gio.Drive[] # a `GList` of connected `GDrive` objects.
function Gio.VolumeMonitor:get_connected_drives() end

--- # method Gio.VolumeMonitor:get_mount_for_uuid()
---
--- Finds a `GMount` object by its UUID (see `g_mount_get_uuid()`)
---
--- ---
---
---@param self Gio.VolumeMonitor # a `GVolumeMonitor`.
---@param uuid string # the UUID to look for
---@return Gio.Mount # a `GMount` or `nil` if no such mount is available. Free the returned object with `g_object_unref()`.
function Gio.VolumeMonitor:get_mount_for_uuid(uuid) end

--- # method Gio.VolumeMonitor:get_mounts()
---
--- Gets a list of the mounts on the system.
--- 
--- The returned list should be freed with `g_list_free()`, after
--- its elements have been unreffed with `g_object_unref()`.
---
--- ---
---
---@param self Gio.VolumeMonitor # a `GVolumeMonitor`.
---@return Gio.Mount[] # a `GList` of `GMount` objects.
function Gio.VolumeMonitor:get_mounts() end

--- # method Gio.VolumeMonitor:get_volume_for_uuid()
---
--- Finds a `GVolume` object by its UUID (see `g_volume_get_uuid()`)
---
--- ---
---
---@param self Gio.VolumeMonitor # a `GVolumeMonitor`.
---@param uuid string # the UUID to look for
---@return Gio.Volume # a `GVolume` or `nil` if no such volume is available. Free the returned object with `g_object_unref()`.
function Gio.VolumeMonitor:get_volume_for_uuid(uuid) end

--- # method Gio.VolumeMonitor:get_volumes()
---
--- Gets a list of the volumes on the system.
--- 
--- The returned list should be freed with `g_list_free()`, after
--- its elements have been unreffed with `g_object_unref()`.
---
--- ---
---
---@param self Gio.VolumeMonitor # a `GVolumeMonitor`.
---@return Gio.Volume[] # a `GList` of `GVolume` objects.
function Gio.VolumeMonitor:get_volumes() end

--- # function Gio.VolumeMonitor.adopt_orphan_mount()
---
--- This function should be called by any `GVolumeMonitor`
--- implementation when a new `GMount` object is created that is not
--- associated with a `GVolume` object. It must be called just before
--- emitting the `mount_added` signal.
--- 
--- If the return value is not `nil`, the caller must associate the
--- returned `GVolume` object with the `GMount`. This involves returning
--- it in its `g_mount_get_volume()` implementation. The caller must
--- also listen for the "removed" signal on the returned object
--- and give up its reference when handling that signal
--- 
--- Similarly, if implementing `g_volume_monitor_adopt_orphan_mount()`,
--- the implementor must take a reference to `mount` and return it in
--- its `g_volume_get_mount()` implemented. Also, the implementor must
--- listen for the "unmounted" signal on `mount` and give up its
--- reference upon handling that signal.
--- 
--- There are two main use cases for this function.
--- 
--- One is when implementing a user space file system driver that reads
--- blocks of a block device that is already represented by the native
--- volume monitor (for example a CD Audio file system driver). Such
--- a driver will generate its own `GMount` object that needs to be
--- associated with the `GVolume` object that represents the volume.
--- 
--- The other is for implementing a `GVolumeMonitor` whose sole purpose
--- is to return `GVolume` objects representing entries in the users
--- "favorite servers" list or similar.
---
--- ---
---
---@param mount Gio.Mount # a `GMount` object to find a parent for
---@return Gio.Volume # the `GVolume` object that is the parent for `mount` or `nil` if no wants to adopt the `GMount`.
function Gio.VolumeMonitor.adopt_orphan_mount(mount) end

--- # function Gio.VolumeMonitor.get()
---
--- Gets the volume monitor used by gio.
---
--- ---
---
---@return Gio.VolumeMonitor # a reference to the `GVolumeMonitor` used by gio. Call `g_object_unref()` when done with it.
function Gio.VolumeMonitor.get() end

--- # record Gio.VolumeMonitorClass
---
---@class Gio.VolumeMonitorClass
---@field parent_class GObject.ObjectClass
---@field volume_added fun(volume_monitor: Gio.VolumeMonitor, volume: Gio.Volume): nil
---@field volume_removed fun(volume_monitor: Gio.VolumeMonitor, volume: Gio.Volume): nil
---@field volume_changed fun(volume_monitor: Gio.VolumeMonitor, volume: Gio.Volume): nil
---@field mount_added fun(volume_monitor: Gio.VolumeMonitor, mount: Gio.Mount): nil
---@field mount_removed fun(volume_monitor: Gio.VolumeMonitor, mount: Gio.Mount): nil
---@field mount_pre_unmount fun(volume_monitor: Gio.VolumeMonitor, mount: Gio.Mount): nil
---@field mount_changed fun(volume_monitor: Gio.VolumeMonitor, mount: Gio.Mount): nil
---@field drive_connected fun(volume_monitor: Gio.VolumeMonitor, drive: Gio.Drive): nil
---@field drive_disconnected fun(volume_monitor: Gio.VolumeMonitor, drive: Gio.Drive): nil
---@field drive_changed fun(volume_monitor: Gio.VolumeMonitor, drive: Gio.Drive): nil
---@field is_supported fun(): (boolean|nil)
---@field get_connected_drives fun(volume_monitor: Gio.VolumeMonitor): Gio.Drive[]
---@field get_volumes fun(volume_monitor: Gio.VolumeMonitor): Gio.Volume[]
---@field get_mounts fun(volume_monitor: Gio.VolumeMonitor): Gio.Mount[]
---@field get_volume_for_uuid fun(volume_monitor: Gio.VolumeMonitor, uuid: string): Gio.Volume
---@field get_mount_for_uuid fun(volume_monitor: Gio.VolumeMonitor, uuid: string): Gio.Mount
---@field drive_eject_button fun(volume_monitor: Gio.VolumeMonitor, drive: Gio.Drive): nil
---@field drive_stop_button fun(volume_monitor: Gio.VolumeMonitor, drive: Gio.Drive): nil
Gio.VolumeMonitorClass = {}

--- # class Gio.ZlibCompressor
---
--- `GZlibCompressor` is an implementation of `GConverter` that
--- compresses data using zlib.
---
--- ---
---
---@class Gio.ZlibCompressor : GObject.Object, Gio.Converter
---@operator call: Gio.ZlibCompressor
Gio.ZlibCompressor = {}

--- # method Gio.ZlibCompressor:get_file_info()
---
--- Returns the `GZlibCompressor`:file-info property.
---
--- ---
---
---@param self Gio.ZlibCompressor # a `GZlibCompressor`
---@return Gio.FileInfo # a `GFileInfo`, or `nil`
function Gio.ZlibCompressor:get_file_info() end

--- # method Gio.ZlibCompressor:set_file_info()
---
--- Sets `file_info` in `compressor`. If non-`nil`, and `compressor`'s
--- `GZlibCompressor`:format property is %G_ZLIB_COMPRESSOR_FORMAT_GZIP,
--- it will be used to set the file name and modification time in
--- the GZIP header of the compressed data.
--- 
--- Note: it is an error to call this function while a compression is in
--- progress; it may only be called immediately after creation of `compressor`,
--- or after resetting it with `g_converter_reset()`.
---
--- ---
---
---@param self Gio.ZlibCompressor # a `GZlibCompressor`
---@param file_info? Gio.FileInfo # a `GFileInfo`
---@return nil
function Gio.ZlibCompressor:set_file_info(file_info) end

--- # function Gio.ZlibCompressor.new()
---
--- Creates a new `GZlibCompressor`.
---
--- ---
---
---@param format Gio.ZlibCompressorFormat # The format to use for the compressed data
---@param level integer # compression level (0-9), -1 for default
---@return Gio.ZlibCompressor # a new `GZlibCompressor`
function Gio.ZlibCompressor.new(format, level) end

--- # record Gio.ZlibCompressorClass
---
---@class Gio.ZlibCompressorClass
---@field parent_class GObject.ObjectClass
Gio.ZlibCompressorClass = {}

---@enum Gio.ZlibCompressorFormat
Gio.ZlibCompressorFormat = {}

--- # class Gio.ZlibDecompressor
---
--- `GZlibDecompressor` is an implementation of `GConverter` that
--- decompresses data compressed with zlib.
---
--- ---
---
---@class Gio.ZlibDecompressor : GObject.Object, Gio.Converter
---@operator call: Gio.ZlibDecompressor
Gio.ZlibDecompressor = {}

--- # method Gio.ZlibDecompressor:get_file_info()
---
--- Retrieves the `GFileInfo` constructed from the GZIP header data
--- of compressed data processed by `compressor`, or `nil` if `decompressor`'s
--- `GZlibDecompressor`:format property is not %G_ZLIB_COMPRESSOR_FORMAT_GZIP,
--- or the header data was not fully processed yet, or it not present in the
--- data stream at all.
---
--- ---
---
---@param self Gio.ZlibDecompressor # a `GZlibDecompressor`
---@return Gio.FileInfo # a `GFileInfo`, or `nil`
function Gio.ZlibDecompressor:get_file_info() end

--- # function Gio.ZlibDecompressor.new()
---
--- Creates a new `GZlibDecompressor`.
---
--- ---
---
---@param format Gio.ZlibCompressorFormat # The format to use for the compressed data
---@return Gio.ZlibDecompressor # a new `GZlibDecompressor`
function Gio.ZlibDecompressor.new(format) end

--- # record Gio.ZlibDecompressorClass
---
---@class Gio.ZlibDecompressorClass
---@field parent_class GObject.ObjectClass
Gio.ZlibDecompressorClass = {}

--- # function Gio.action_name_is_valid()
---
--- Checks if `action_name` is valid.
--- 
--- `action_name` is valid if it consists only of alphanumeric characters,
--- plus '-' and '.'.  The empty string is not a valid action name.
--- 
--- It is an error to call this function with a non-utf8 `action_name`.
--- `action_name` must not be `nil`.
---
--- ---
---
---@param action_name string # a potential action name
---@return (boolean|nil) # `true` if `action_name` is valid
function Gio.action_name_is_valid(action_name) end

--- # function Gio.action_parse_detailed_name()
---
--- Parses a detailed action name into its separate name and target
--- components.
--- 
--- Detailed action names can have three formats.
--- 
--- The first format is used to represent an action name with no target
--- value and consists of just an action name containing no whitespace
--- nor the characters `:`, `(` or `)`.  For example: `app.action`.
--- 
--- The second format is used to represent an action with a target value
--- that is a non-empty string consisting only of alphanumerics, plus `-`
--- and `.`.  In that case, the action name and target value are
--- separated by a double colon (`::`).  For example:
--- `app.action::target`.
--- 
--- The third format is used to represent an action with any type of
--- target value, including strings.  The target value follows the action
--- name, surrounded in parens.  For example: `app.action(42)`.  The
--- target value is parsed using `g_variant_parse()`.  If a tuple-typed
--- value is desired, it must be specified in the same way, resulting in
--- two sets of parens, for example: `app.action((1,2,3))`.  A string
--- target can be specified this way as well: `app.action('target')`.
--- For strings, this third format must be used if target value is
--- empty or contains characters other than alphanumerics, `-` and `.`.
--- 
--- If this function returns `true`, a non-`nil` value is guaranteed to be returned
--- in `action_name` (if a pointer is passed in). A `nil` value may still be
--- returned in `target_value`, as the `detailed_name` may not contain a target.
--- 
--- If returned, the `GVariant` in `target_value` is guaranteed to not be floating.
---
--- ---
---
---@param detailed_name string # a detailed action name
---@param action_name? string # the action name
---@param target_value? GLib.Variant # the target value, or `nil` for no target
---@return (boolean|nil) # `true` if successful, else `false` with `error` set
function Gio.action_parse_detailed_name(detailed_name, action_name, target_value) end

--- # function Gio.action_print_detailed_name()
---
--- Formats a detailed action name from `action_name` and `target_value`.
--- 
--- It is an error to call this function with an invalid action name.
--- 
--- This function is the opposite of `g_action_parse_detailed_name()`.
--- It will produce a string that can be parsed back to the `action_name`
--- and `target_value` by that function.
--- 
--- See that function for the types of strings that will be printed by
--- this function.
---
--- ---
---
---@param action_name string # a valid action name
---@param target_value? GLib.Variant # a `GVariant` target value, or `nil`
---@return string # a detailed format string
function Gio.action_print_detailed_name(action_name, target_value) end

--- # function Gio.app_info_create_from_commandline()
---
--- Creates a new `GAppInfo` from the given information.
--- 
--- Note that for `commandline`, the quoting rules of the Exec key of the
--- [freedesktop.org Desktop Entry Specification](http://freedesktop.org/Standards/desktop-entry-spec)
--- are applied. For example, if the `commandline` contains
--- percent-encoded URIs, the percent-character must be doubled in order to prevent it from
--- being swallowed by Exec key unquoting. See the specification for exact quoting rules.
---
--- ---
---
---@param commandline string # the commandline to use
---@param application_name? string # the application name, or `nil` to use `commandline`
---@param flags Gio.AppInfoCreateFlags # flags that can specify details of the created `GAppInfo`
---@return Gio.AppInfo # new `GAppInfo` for given command.
function Gio.app_info_create_from_commandline(commandline, application_name, flags) end

--- # function Gio.app_info_get_all()
---
--- Gets a list of all of the applications currently registered
--- on this system.
--- 
--- For desktop files, this includes applications that have
--- `NoDisplay=true` set or are excluded from display by means
--- of `OnlyShowIn` or `NotShowIn`. See `g_app_info_should_show()`.
--- The returned list does not include applications which have
--- the `Hidden` key set.
---
--- ---
---
---@return Gio.AppInfo[] # a newly allocated `GList` of references to `GAppInfos`.
function Gio.app_info_get_all() end

--- # function Gio.app_info_get_all_for_type()
---
--- Gets a list of all `GAppInfos` for a given content type,
--- including the recommended and fallback `GAppInfos`. See
--- `g_app_info_get_recommended_for_type()` and
--- `g_app_info_get_fallback_for_type()`.
---
--- ---
---
---@param content_type string # the content type to find a `GAppInfo` for
---@return Gio.AppInfo[] # `GList` of `GAppInfos` for given `content_type` or `nil` on error.
function Gio.app_info_get_all_for_type(content_type) end

--- # function Gio.app_info_get_default_for_type()
---
--- Gets the default `GAppInfo` for a given content type.
---
--- ---
---
---@param content_type string # the content type to find a `GAppInfo` for
---@param must_support_uris (boolean|nil) # if `true`, the `GAppInfo` is expected to support URIs
---@return Gio.AppInfo # `GAppInfo` for given `content_type` or `nil` on error.
function Gio.app_info_get_default_for_type(content_type, must_support_uris) end

--- # function Gio.app_info_get_default_for_type_async()
---
--- Asynchronously gets the default `GAppInfo` for a given content type.
---
--- ---
---
---@param content_type string # the content type to find a `GAppInfo` for
---@param must_support_uris (boolean|nil) # if `true`, the `GAppInfo` is expected to support URIs
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is done
---@param user_data? userdata # data to pass to `callback`
---@return nil
function Gio.app_info_get_default_for_type_async(content_type, must_support_uris, cancellable, callback, user_data) end

--- # function Gio.app_info_get_default_for_type_finish()
---
--- Finishes a default `GAppInfo` lookup started by
--- `g_app_info_get_default_for_type_async()`.
--- 
--- If no `GAppInfo` is found, then `error` will be set to %G_IO_ERROR_NOT_FOUND.
---
--- ---
---
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return Gio.AppInfo # `GAppInfo` for given `content_type` or `nil` on error.
function Gio.app_info_get_default_for_type_finish(result) end

--- # function Gio.app_info_get_default_for_uri_scheme()
---
--- Gets the default application for handling URIs with
--- the given URI scheme. A URI scheme is the initial part
--- of the URI, up to but not including the ':', e.g. "http",
--- "ftp" or "sip".
---
--- ---
---
---@param uri_scheme string # a string containing a URI scheme.
---@return Gio.AppInfo # `GAppInfo` for given `uri_scheme` or `nil` on error.
function Gio.app_info_get_default_for_uri_scheme(uri_scheme) end

--- # function Gio.app_info_get_default_for_uri_scheme_async()
---
--- Asynchronously gets the default application for handling URIs with
--- the given URI scheme. A URI scheme is the initial part
--- of the URI, up to but not including the ':', e.g. "http",
--- "ftp" or "sip".
---
--- ---
---
---@param uri_scheme string # a string containing a URI scheme.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is done
---@param user_data? userdata # data to pass to `callback`
---@return nil
function Gio.app_info_get_default_for_uri_scheme_async(uri_scheme, cancellable, callback, user_data) end

--- # function Gio.app_info_get_default_for_uri_scheme_finish()
---
--- Finishes a default `GAppInfo` lookup started by
--- `g_app_info_get_default_for_uri_scheme_async()`.
--- 
--- If no `GAppInfo` is found, then `error` will be set to %G_IO_ERROR_NOT_FOUND.
---
--- ---
---
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return Gio.AppInfo # `GAppInfo` for given `uri_scheme` or `nil` on error.
function Gio.app_info_get_default_for_uri_scheme_finish(result) end

--- # function Gio.app_info_get_fallback_for_type()
---
--- Gets a list of fallback `GAppInfos` for a given content type, i.e.
--- those applications which claim to support the given content type
--- by MIME type subclassing and not directly.
---
--- ---
---
---@param content_type string # the content type to find a `GAppInfo` for
---@return Gio.AppInfo[] # `GList` of `GAppInfos` for given `content_type` or `nil` on error.
function Gio.app_info_get_fallback_for_type(content_type) end

--- # function Gio.app_info_get_recommended_for_type()
---
--- Gets a list of recommended `GAppInfos` for a given content type, i.e.
--- those applications which claim to support the given content type exactly,
--- and not by MIME type subclassing.
--- Note that the first application of the list is the last used one, i.e.
--- the last one for which `g_app_info_set_as_last_used_for_type()` has been
--- called.
---
--- ---
---
---@param content_type string # the content type to find a `GAppInfo` for
---@return Gio.AppInfo[] # `GList` of `GAppInfos` for given `content_type` or `nil` on error.
function Gio.app_info_get_recommended_for_type(content_type) end

--- # function Gio.app_info_launch_default_for_uri()
---
--- Utility function that launches the default application
--- registered to handle the specified uri. Synchronous I/O
--- is done on the uri to detect the type of the file if
--- required.
--- 
--- The D-Bus–activated applications don't have to be started if your application
--- terminates too soon after this function. To prevent this, use
--- `g_app_info_launch_default_for_uri_async()` instead.
---
--- ---
---
---@param uri string # the uri to show
---@param context? Gio.AppLaunchContext # an optional `GAppLaunchContext`
---@return (boolean|nil) # `true` on success, `false` on error.
function Gio.app_info_launch_default_for_uri(uri, context) end

--- # function Gio.app_info_launch_default_for_uri_async()
---
--- Async version of `g_app_info_launch_default_for_uri()`.
--- 
--- This version is useful if you are interested in receiving
--- error information in the case where the application is
--- sandboxed and the portal may present an application chooser
--- dialog to the user.
--- 
--- This is also useful if you want to be sure that the D-Bus–activated
--- applications are really started before termination and if you are interested
--- in receiving error information from their activation.
---
--- ---
---
---@param uri string # the uri to show
---@param context? Gio.AppLaunchContext # an optional `GAppLaunchContext`
---@param cancellable? Gio.Cancellable # a `GCancellable`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is done
---@param user_data? userdata # data to pass to `callback`
---@return nil
function Gio.app_info_launch_default_for_uri_async(uri, context, cancellable, callback, user_data) end

--- # function Gio.app_info_launch_default_for_uri_finish()
---
--- Finishes an asynchronous launch-default-for-uri operation.
---
--- ---
---
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return (boolean|nil) # `true` if the launch was successful, `false` if `error` is set
function Gio.app_info_launch_default_for_uri_finish(result) end

--- # function Gio.app_info_reset_type_associations()
---
--- Removes all changes to the type associations done by
--- `g_app_info_set_as_default_for_type()`,
--- `g_app_info_set_as_default_for_extension()`,
--- `g_app_info_add_supports_type()` or
--- `g_app_info_remove_supports_type()`.
---
--- ---
---
---@param content_type string # a content type
---@return nil
function Gio.app_info_reset_type_associations(content_type) end

--- # function Gio.async_initable_newv_async()
---
--- Helper function for constructing `GAsyncInitable` object. This is
--- similar to `g_object_newv()` but also initializes the object asynchronously.
--- 
--- When the initialization is finished, `callback` will be called. You can
--- then call `g_async_initable_new_finish()` to get the new object and check
--- for any errors.
---
--- ---
---
---@param object_type Gio.GType # a `GType` supporting `GAsyncInitable`.
---@param n_parameters integer # the number of parameters in `parameters`
---@param parameters GObject.Parameter # the parameters to use to construct the object
---@param io_priority integer # the [I/O priority][io-priority] of the operation
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the initialization is finished
---@param user_data? userdata # the data to pass to callback function
---@return nil
function Gio.async_initable_newv_async(object_type, n_parameters, parameters, io_priority, cancellable, callback, user_data) end

--- # function Gio.bus_get()
---
--- Asynchronously connects to the message bus specified by `bus_type`.
--- 
--- When the operation is finished, `callback` will be invoked. You can
--- then call `g_bus_get_finish()` to get the result of the operation.
--- 
--- This is an asynchronous failable function. See `g_bus_get_sync()` for
--- the synchronous version.
---
--- ---
---
---@param bus_type Gio.BusType # a `GBusType`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is satisfied
---@param user_data? userdata # the data to pass to `callback`
---@return nil
function Gio.bus_get(bus_type, cancellable, callback, user_data) end

--- # function Gio.bus_get_finish()
---
--- Finishes an operation started with `g_bus_get()`.
--- 
--- The returned object is a singleton, that is, shared with other
--- callers of `g_bus_get()` and `g_bus_get_sync()` for `bus_type`. In the
--- event that you need a private message bus connection, use
--- `g_dbus_address_get_for_bus_sync()` and
--- `g_dbus_connection_new_for_address()` with
--- G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT and
--- G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION flags.
--- 
--- Note that the returned `GDBusConnection` object will (usually) have
--- the `GDBusConnection`:exit-on-close property set to `true`.
---
--- ---
---
---@param res Gio.AsyncResult # a `GAsyncResult` obtained from the `GAsyncReadyCallback` passed to `g_bus_get()`
---@return Gio.DBusConnection # a `GDBusConnection` or `nil` if `error` is set. Free with `g_object_unref()`.
function Gio.bus_get_finish(res) end

--- # function Gio.bus_get_sync()
---
--- Synchronously connects to the message bus specified by `bus_type`.
--- Note that the returned object may shared with other callers,
--- e.g. if two separate parts of a process calls this function with
--- the same `bus_type`, they will share the same object.
--- 
--- This is a synchronous failable function. See `g_bus_get()` and
--- `g_bus_get_finish()` for the asynchronous version.
--- 
--- The returned object is a singleton, that is, shared with other
--- callers of `g_bus_get()` and `g_bus_get_sync()` for `bus_type`. In the
--- event that you need a private message bus connection, use
--- `g_dbus_address_get_for_bus_sync()` and
--- `g_dbus_connection_new_for_address()` with
--- G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT and
--- G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION flags.
--- 
--- Note that the returned `GDBusConnection` object will (usually) have
--- the `GDBusConnection`:exit-on-close property set to `true`.
---
--- ---
---
---@param bus_type Gio.BusType # a `GBusType`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@return Gio.DBusConnection # a `GDBusConnection` or `nil` if `error` is set. Free with `g_object_unref()`.
function Gio.bus_get_sync(bus_type, cancellable) end

--- # function Gio.bus_own_name_on_connection()
---
--- Version of `g_bus_own_name_on_connection()` using closures instead of
--- callbacks for easier binding in other languages.
---
--- ---
---
---@param connection Gio.DBusConnection # a `GDBusConnection`
---@param name string # the well-known name to own
---@param flags Gio.BusNameOwnerFlags # a set of flags from the `GBusNameOwnerFlags` enumeration
---@param name_acquired_closure? GObject.Closure # `GClosure` to invoke when `name` is acquired or `nil`
---@param name_lost_closure? GObject.Closure # `GClosure` to invoke when `name` is lost or `nil`
---@return integer # an identifier (never 0) that can be used with `g_bus_unown_name()` to stop owning the name.
function Gio.bus_own_name_on_connection(connection, name, flags, name_acquired_closure, name_lost_closure) end

--- # function Gio.bus_own_name()
---
--- Version of `g_bus_own_name()` using closures instead of callbacks for
--- easier binding in other languages.
---
--- ---
---
---@param bus_type Gio.BusType # the type of bus to own a name on
---@param name string # the well-known name to own
---@param flags Gio.BusNameOwnerFlags # a set of flags from the `GBusNameOwnerFlags` enumeration
---@param bus_acquired_closure? GObject.Closure # `GClosure` to invoke when connected to the bus of type `bus_type` or `nil`
---@param name_acquired_closure? GObject.Closure # `GClosure` to invoke when `name` is acquired or `nil`
---@param name_lost_closure? GObject.Closure # `GClosure` to invoke when `name` is lost or `nil`
---@return integer # an identifier (never 0) that can be used with `g_bus_unown_name()` to stop owning the name.
function Gio.bus_own_name(bus_type, name, flags, bus_acquired_closure, name_acquired_closure, name_lost_closure) end

--- # function Gio.bus_unown_name()
---
--- Stops owning a name.
--- 
--- Note that there may still be D-Bus traffic to process (relating to owning
--- and unowning the name) in the current thread-default `GMainContext` after
--- this function has returned. You should continue to iterate the `GMainContext`
--- until the `GDestroyNotify` function passed to `g_bus_own_name()` is called, in
--- order to avoid memory leaks through callbacks queued on the `GMainContext`
--- after it’s stopped being iterated.
---
--- ---
---
---@param owner_id integer # an identifier obtained from `g_bus_own_name()`
---@return nil
function Gio.bus_unown_name(owner_id) end

--- # function Gio.bus_unwatch_name()
---
--- Stops watching a name.
--- 
--- Note that there may still be D-Bus traffic to process (relating to watching
--- and unwatching the name) in the current thread-default `GMainContext` after
--- this function has returned. You should continue to iterate the `GMainContext`
--- until the `GDestroyNotify` function passed to `g_bus_watch_name()` is called, in
--- order to avoid memory leaks through callbacks queued on the `GMainContext`
--- after it’s stopped being iterated.
---
--- ---
---
---@param watcher_id integer # An identifier obtained from `g_bus_watch_name()`
---@return nil
function Gio.bus_unwatch_name(watcher_id) end

--- # function Gio.bus_watch_name_on_connection()
---
--- Version of `g_bus_watch_name_on_connection()` using closures instead of callbacks for
--- easier binding in other languages.
---
--- ---
---
---@param connection Gio.DBusConnection # A `GDBusConnection`.
---@param name string # The name (well-known or unique) to watch.
---@param flags Gio.BusNameWatcherFlags # Flags from the `GBusNameWatcherFlags` enumeration.
---@param name_appeared_closure? GObject.Closure # `GClosure` to invoke when `name` is known to exist or `nil`.
---@param name_vanished_closure? GObject.Closure # `GClosure` to invoke when `name` is known to not exist or `nil`.
---@return integer # An identifier (never 0) that can be used with `g_bus_unwatch_name()` to stop watching the name.
function Gio.bus_watch_name_on_connection(connection, name, flags, name_appeared_closure, name_vanished_closure) end

--- # function Gio.bus_watch_name()
---
--- Version of `g_bus_watch_name()` using closures instead of callbacks for
--- easier binding in other languages.
---
--- ---
---
---@param bus_type Gio.BusType # The type of bus to watch a name on.
---@param name string # The name (well-known or unique) to watch.
---@param flags Gio.BusNameWatcherFlags # Flags from the `GBusNameWatcherFlags` enumeration.
---@param name_appeared_closure? GObject.Closure # `GClosure` to invoke when `name` is known to exist or `nil`.
---@param name_vanished_closure? GObject.Closure # `GClosure` to invoke when `name` is known to not exist or `nil`.
---@return integer # An identifier (never 0) that can be used with `g_bus_unwatch_name()` to stop watching the name.
function Gio.bus_watch_name(bus_type, name, flags, name_appeared_closure, name_vanished_closure) end

--- # function Gio.content_type_can_be_executable()
---
--- Checks if a content type can be executable. Note that for instance
--- things like text files can be executables (i.e. scripts and batch files).
---
--- ---
---
---@param type string # a content type string
---@return (boolean|nil) # `true` if the file type corresponds to a type that can be executable, `false` otherwise.
function Gio.content_type_can_be_executable(type) end

--- # function Gio.content_type_equals()
---
--- Compares two content types for equality.
---
--- ---
---
---@param type1 string # a content type string
---@param type2 string # a content type string
---@return (boolean|nil) # `true` if the two strings are identical or equivalent, `false` otherwise.
function Gio.content_type_equals(type1, type2) end

--- # function Gio.content_type_from_mime_type()
---
--- Tries to find a content type based on the mime type name.
---
--- ---
---
---@param mime_type string # a mime type string
---@return string # Newly allocated string with content type or `nil`. Free with `g_free()`
function Gio.content_type_from_mime_type(mime_type) end

--- # function Gio.content_type_get_description()
---
--- Gets the human readable description of the content type.
---
--- ---
---
---@param type string # a content type string
---@return string # a short description of the content type `type`. Free the returned string with `g_free()`
function Gio.content_type_get_description(type) end

--- # function Gio.content_type_get_generic_icon_name()
---
--- Gets the generic icon name for a content type.
--- 
--- See the
--- [shared-mime-info](http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec)
--- specification for more on the generic icon name.
---
--- ---
---
---@param type string # a content type string
---@return string # the registered generic icon name for the given `type`, or `nil` if unknown. Free with `g_free()`
function Gio.content_type_get_generic_icon_name(type) end

--- # function Gio.content_type_get_icon()
---
--- Gets the icon for a content type.
---
--- ---
---
---@param type string # a content type string
---@return Gio.Icon # `GIcon` corresponding to the content type. Free the returned object with `g_object_unref()`
function Gio.content_type_get_icon(type) end

--- # function Gio.content_type_get_mime_dirs()
---
--- Get the list of directories which MIME data is loaded from. See
--- `g_content_type_set_mime_dirs()` for details.
---
--- ---
---
---@return unknown[] # `nil`-terminated list of directories to load MIME data from, including any `mime/` subdirectory, and with the first directory to try listed first
function Gio.content_type_get_mime_dirs() end

--- # function Gio.content_type_get_mime_type()
---
--- Gets the mime type for the content type, if one is registered.
---
--- ---
---
---@param type string # a content type string
---@return string # the registered mime type for the given `type`, or `nil` if unknown; free with `g_free()`.
function Gio.content_type_get_mime_type(type) end

--- # function Gio.content_type_get_symbolic_icon()
---
--- Gets the symbolic icon for a content type.
---
--- ---
---
---@param type string # a content type string
---@return Gio.Icon # symbolic `GIcon` corresponding to the content type. Free the returned object with `g_object_unref()`
function Gio.content_type_get_symbolic_icon(type) end

--- # function Gio.content_type_guess()
---
--- Guesses the content type based on example data. If the function is
--- uncertain, `result_uncertain` will be set to `true`. Either `filename`
--- or `data` may be `nil`, in which case the guess will be based solely
--- on the other argument.
---
--- ---
---
---@param filename? string # a path, or `nil`
---@param data? unknown[] # a stream of data, or `nil`
---@param data_size integer # the size of `data`
---@param result_uncertain? (boolean|nil) # return location for the certainty of the result, or `nil`
---@return string # a string indicating a guessed content type for the given data. Free with `g_free()`
function Gio.content_type_guess(filename, data, data_size, result_uncertain) end

--- # function Gio.content_type_guess_for_tree()
---
--- Tries to guess the type of the tree with root `root`, by
--- looking at the files it contains. The result is an array
--- of content types, with the best guess coming first.
--- 
--- The types returned all have the form x-content/foo, e.g.
--- x-content/audio-cdda (for audio CDs) or x-content/image-dcf
--- (for a camera memory card). See the
--- [shared-mime-info](http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec)
--- specification for more on x-content types.
--- 
--- This function is useful in the implementation of
--- `g_mount_guess_content_type()`.
---
--- ---
---
---@param root Gio.File # the root of the tree to guess a type for
---@return unknown[] # an `nil`-terminated array of zero or more content types. Free with `g_strfreev()`
function Gio.content_type_guess_for_tree(root) end

--- # function Gio.content_type_is_a()
---
--- Determines if `type` is a subset of `supertype`.
---
--- ---
---
---@param type string # a content type string
---@param supertype string # a content type string
---@return (boolean|nil) # `true` if `type` is a kind of `supertype`, `false` otherwise.
function Gio.content_type_is_a(type, supertype) end

--- # function Gio.content_type_is_mime_type()
---
--- Determines if `type` is a subset of `mime_type`.
--- Convenience wrapper around `g_content_type_is_a()`.
---
--- ---
---
---@param type string # a content type string
---@param mime_type string # a mime type string
---@return (boolean|nil) # `true` if `type` is a kind of `mime_type`, `false` otherwise.
function Gio.content_type_is_mime_type(type, mime_type) end

--- # function Gio.content_type_is_unknown()
---
--- Checks if the content type is the generic "unknown" type.
--- On UNIX this is the "application/octet-stream" mimetype,
--- while on win32 it is "*" and on OSX it is a dynamic type
--- or octet-stream.
---
--- ---
---
---@param type string # a content type string
---@return (boolean|nil) # `true` if the type is the unknown type.
function Gio.content_type_is_unknown(type) end

--- # function Gio.content_type_set_mime_dirs()
---
--- Set the list of directories used by GIO to load the MIME database.
--- If `dirs` is `nil`, the directories used are the default:
--- 
---  - the `mime` subdirectory of the directory in `$XDG_DATA_HOME`
---  - the `mime` subdirectory of every directory in `$XDG_DATA_DIRS`
--- 
--- This function is intended to be used when writing tests that depend on
--- information stored in the MIME database, in order to control the data.
--- 
--- Typically, in case your tests use %G_TEST_OPTION_ISOLATE_DIRS, but they
--- depend on the system’s MIME database, you should call this function
--- with `dirs` set to `nil` before calling `g_test_init()`, for instance:
--- 
--- ```c
---   // Load MIME data from the system
---   g_content_type_set_mime_dirs (NULL);
---   // Isolate the environment
---   g_test_init (&argc, &argv, G_TEST_OPTION_ISOLATE_DIRS, NULL);
--- 
---   …
--- 
---   return g_test_run ();
--- ```
---
--- ---
---
---@param dirs? unknown[] # `nil`-terminated list of directories to load MIME data from, including any `mime/` subdirectory, and with the first directory to try listed first
---@return nil
function Gio.content_type_set_mime_dirs(dirs) end

--- # function Gio.content_types_get_registered()
---
--- Gets a list of strings containing all the registered content types
--- known to the system. The list and its data should be freed using
--- `g_list_free_full (list, g_free)`.
---
--- ---
---
---@return string[] # list of the registered content types
function Gio.content_types_get_registered() end

--- # function Gio.dbus_address_escape_value()
---
--- Escape `string` so it can appear in a D-Bus address as the value
--- part of a key-value pair.
--- 
--- For instance, if `string` is `/run/bus-for-:0`,
--- this function would return `/run/bus-for-%3A0`,
--- which could be used in a D-Bus address like
--- `unix:nonce-tcp:host=127.0.0.1,port=42,noncefile=/run/bus-for-%3A0`.
---
--- ---
---
---@param string string # an unescaped string to be included in a D-Bus address as the value in a key-value pair
---@return string # a copy of `string` with all non-optionally-escaped bytes escaped
function Gio.dbus_address_escape_value(string) end

--- # function Gio.dbus_address_get_for_bus_sync()
---
--- Synchronously looks up the D-Bus address for the well-known message
--- bus instance specified by `bus_type`. This may involve using various
--- platform specific mechanisms.
--- 
--- The returned address will be in the
--- [D-Bus address format](https://dbus.freedesktop.org/doc/dbus-specification.html`addresses`).
---
--- ---
---
---@param bus_type Gio.BusType # a `GBusType`
---@param cancellable? Gio.Cancellable # a `GCancellable` or `nil`
---@return string # a valid D-Bus address string for `bus_type` or `nil` if `error` is set
function Gio.dbus_address_get_for_bus_sync(bus_type, cancellable) end

--- # function Gio.dbus_address_get_stream()
---
--- Asynchronously connects to an endpoint specified by `address` and
--- sets up the connection so it is in a state to run the client-side
--- of the D-Bus authentication conversation. `address` must be in the
--- [D-Bus address format](https://dbus.freedesktop.org/doc/dbus-specification.html`addresses`).
--- 
--- When the operation is finished, `callback` will be invoked. You can
--- then call `g_dbus_address_get_stream_finish()` to get the result of
--- the operation.
--- 
--- This is an asynchronous failable function. See
--- `g_dbus_address_get_stream_sync()` for the synchronous version.
---
--- ---
---
---@param address string # A valid D-Bus address.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`.
---@param callback? Gio.AsyncReadyCallback # A `GAsyncReadyCallback` to call when the request is satisfied.
---@param user_data? userdata # Data to pass to `callback`.
---@return nil
function Gio.dbus_address_get_stream(address, cancellable, callback, user_data) end

--- # function Gio.dbus_address_get_stream_finish()
---
--- Finishes an operation started with `g_dbus_address_get_stream()`.
--- 
--- A server is not required to set a GUID, so `out_guid` may be set to `nil`
--- even on success.
---
--- ---
---
---@param res Gio.AsyncResult # A `GAsyncResult` obtained from the GAsyncReadyCallback passed to `g_dbus_address_get_stream()`.
---@param out_guid? string # `nil` or return location to store the GUID extracted from `address`, if any.
---@return Gio.IOStream # A `GIOStream` or `nil` if `error` is set.
function Gio.dbus_address_get_stream_finish(res, out_guid) end

--- # function Gio.dbus_address_get_stream_sync()
---
--- Synchronously connects to an endpoint specified by `address` and
--- sets up the connection so it is in a state to run the client-side
--- of the D-Bus authentication conversation. `address` must be in the
--- [D-Bus address format](https://dbus.freedesktop.org/doc/dbus-specification.html`addresses`).
--- 
--- A server is not required to set a GUID, so `out_guid` may be set to `nil`
--- even on success.
--- 
--- This is a synchronous failable function. See
--- `g_dbus_address_get_stream()` for the asynchronous version.
---
--- ---
---
---@param address string # A valid D-Bus address.
---@param out_guid? string # `nil` or return location to store the GUID extracted from `address`, if any.
---@param cancellable? Gio.Cancellable # A `GCancellable` or `nil`.
---@return Gio.IOStream # A `GIOStream` or `nil` if `error` is set.
function Gio.dbus_address_get_stream_sync(address, out_guid, cancellable) end

--- # function Gio.dbus_annotation_info_lookup()
---
--- Looks up the value of an annotation.
--- 
--- The cost of this function is O(n) in number of annotations.
---
--- ---
---
---@param annotations? unknown[] # A `nil`-terminated array of annotations or `nil`.
---@param name string # The name of the annotation to look up.
---@return string # The value or `nil` if not found. Do not free, it is owned by `annotations`.
function Gio.dbus_annotation_info_lookup(annotations, name) end

--- # function Gio.dbus_error_encode_gerror()
---
--- Creates a D-Bus error name to use for `error`. If `error` matches
--- a registered error (cf. `g_dbus_error_register_error()`), the corresponding
--- D-Bus error name will be returned.
--- 
--- Otherwise the a name of the form
--- `org.gtk.GDBus.UnmappedGError.Quark._ESCAPED_QUARK_NAME.Code_ERROR_CODE`
--- will be used. This allows other GDBus applications to map the error
--- on the wire back to a `GError` using `g_dbus_error_new_for_dbus_error()`.
--- 
--- This function is typically only used in object mappings to put a
--- `GError` on the wire. Regular applications should not use it.
---
--- ---
---
---@param error GLib.Error # A `GError`.
---@return string # A D-Bus error name (never `nil`). Free with `g_free()`.
function Gio.dbus_error_encode_gerror(error) end

--- # function Gio.dbus_error_get_remote_error()
---
--- Gets the D-Bus error name used for `error`, if any.
--- 
--- This function is guaranteed to return a D-Bus error name for all
--- `GErrors` returned from functions handling remote method calls
--- (e.g. `g_dbus_connection_call_finish()`) unless
--- `g_dbus_error_strip_remote_error()` has been used on `error`.
---
--- ---
---
---@param error GLib.Error # a `GError`
---@return string # an allocated string or `nil` if the D-Bus error name could not be found. Free with `g_free()`.
function Gio.dbus_error_get_remote_error(error) end

--- # function Gio.dbus_error_is_remote_error()
---
--- Checks if `error` represents an error received via D-Bus from a remote peer. If so,
--- use `g_dbus_error_get_remote_error()` to get the name of the error.
---
--- ---
---
---@param error GLib.Error # A `GError`.
---@return (boolean|nil) # `true` if `error` represents an error from a remote peer, `false` otherwise.
function Gio.dbus_error_is_remote_error(error) end

--- # function Gio.dbus_error_new_for_dbus_error()
---
--- Creates a `GError` based on the contents of `dbus_error_name` and
--- `dbus_error_message`.
--- 
--- Errors registered with `g_dbus_error_register_error()` will be looked
--- up using `dbus_error_name` and if a match is found, the error domain
--- and code is used. Applications can use `g_dbus_error_get_remote_error()`
--- to recover `dbus_error_name`.
--- 
--- If a match against a registered error is not found and the D-Bus
--- error name is in a form as returned by `g_dbus_error_encode_gerror()`
--- the error domain and code encoded in the name is used to
--- create the `GError`. Also, `dbus_error_name` is added to the error message
--- such that it can be recovered with `g_dbus_error_get_remote_error()`.
--- 
--- Otherwise, a `GError` with the error code %G_IO_ERROR_DBUS_ERROR
--- in the %G_IO_ERROR error domain is returned. Also, `dbus_error_name` is
--- added to the error message such that it can be recovered with
--- `g_dbus_error_get_remote_error()`.
--- 
--- In all three cases, `dbus_error_name` can always be recovered from the
--- returned `GError` using the `g_dbus_error_get_remote_error()` function
--- (unless `g_dbus_error_strip_remote_error()` hasn't been used on the returned error).
--- 
--- This function is typically only used in object mappings to prepare
--- `GError` instances for applications. Regular applications should not use
--- it.
---
--- ---
---
---@param dbus_error_name string # D-Bus error name.
---@param dbus_error_message string # D-Bus error message.
---@return GLib.Error # An allocated `GError`. Free with `g_error_free()`.
function Gio.dbus_error_new_for_dbus_error(dbus_error_name, dbus_error_message) end

--- # function Gio.dbus_error_quark()
---
---@return GLib.Quark
function Gio.dbus_error_quark() end

--- # function Gio.dbus_error_register_error()
---
--- Creates an association to map between `dbus_error_name` and
--- `GErrors` specified by `error_domain` and `error_code`.
--- 
--- This is typically done in the routine that returns the `GQuark` for
--- an error domain.
---
--- ---
---
---@param error_domain GLib.Quark # A `GQuark` for an error domain.
---@param error_code integer # An error code.
---@param dbus_error_name string # A D-Bus error name.
---@return (boolean|nil) # `true` if the association was created, `false` if it already exists.
function Gio.dbus_error_register_error(error_domain, error_code, dbus_error_name) end

--- # function Gio.dbus_error_register_error_domain()
---
--- Helper function for associating a `GError` error domain with D-Bus error names.
--- 
--- While `quark_volatile` has a `volatile` qualifier, this is a historical
--- artifact and the argument passed to it should not be `volatile`.
---
--- ---
---
---@param error_domain_quark_name string # The error domain name.
---@param quark_volatile integer # A pointer where to store the `GQuark`.
---@param entries unknown[] # A pointer to `num_entries` `GDBusErrorEntry` struct items.
---@param num_entries integer # Number of items to register.
---@return nil
function Gio.dbus_error_register_error_domain(error_domain_quark_name, quark_volatile, entries, num_entries) end

--- # function Gio.dbus_error_strip_remote_error()
---
--- Looks for extra information in the error message used to recover
--- the D-Bus error name and strips it if found. If stripped, the
--- message field in `error` will correspond exactly to what was
--- received on the wire.
--- 
--- This is typically used when presenting errors to the end user.
---
--- ---
---
---@param error GLib.Error # A `GError`.
---@return (boolean|nil) # `true` if information was stripped, `false` otherwise.
function Gio.dbus_error_strip_remote_error(error) end

--- # function Gio.dbus_error_unregister_error()
---
--- Destroys an association previously set up with `g_dbus_error_register_error()`.
---
--- ---
---
---@param error_domain GLib.Quark # A `GQuark` for an error domain.
---@param error_code integer # An error code.
---@param dbus_error_name string # A D-Bus error name.
---@return (boolean|nil) # `true` if the association was destroyed, `false` if it wasn't found.
function Gio.dbus_error_unregister_error(error_domain, error_code, dbus_error_name) end

--- # function Gio.dbus_escape_object_path()
---
--- This is a language binding friendly version of `g_dbus_escape_object_path_bytestring()`.
---
--- ---
---
---@param s string # the string to escape
---@return string # an escaped version of `s`. Free with `g_free()`.
function Gio.dbus_escape_object_path(s) end

--- # function Gio.dbus_escape_object_path_bytestring()
---
--- Escapes `bytes` for use in a D-Bus object path component.
--- `bytes` is an array of zero or more nonzero bytes in an
--- unspecified encoding, followed by a single zero byte.
--- 
--- The escaping method consists of replacing all non-alphanumeric
--- characters (see `g_ascii_isalnum()`) with their hexadecimal value
--- preceded by an underscore (`_`). For example:
--- `foo.bar.baz` will become `foo_2ebar_2ebaz`.
--- 
--- This method is appropriate to use when the input is nearly
--- a valid object path component but is not when your input
--- is far from being a valid object path component.
--- Other escaping algorithms are also valid to use with
--- D-Bus object paths.
--- 
--- This can be reversed with `g_dbus_unescape_object_path()`.
---
--- ---
---
---@param bytes unknown[] # the string of bytes to escape
---@return string # an escaped version of `bytes`. Free with `g_free()`.
function Gio.dbus_escape_object_path_bytestring(bytes) end

--- # function Gio.dbus_generate_guid()
---
--- Generate a D-Bus GUID that can be used with
--- e.g. `g_dbus_connection_new()`.
--- 
--- See the
--- [D-Bus specification](https://dbus.freedesktop.org/doc/dbus-specification.html`uuids`)
--- regarding what strings are valid D-Bus GUIDs. The specification refers to
--- these as ‘UUIDs’ whereas GLib (for historical reasons) refers to them as
--- ‘GUIDs’. The terms are interchangeable.
--- 
--- Note that D-Bus GUIDs do not follow
--- [RFC 4122](https://datatracker.ietf.org/doc/html/rfc4122).
---
--- ---
---
---@return string # A valid D-Bus GUID. Free with `g_free()`.
function Gio.dbus_generate_guid() end

--- # function Gio.dbus_gvalue_to_gvariant()
---
--- Converts a `GValue` to a `GVariant` of the type indicated by the `type`
--- parameter.
--- 
--- The conversion is using the following rules:
--- 
--- - `G_TYPE_STRING`: 's', 'o', 'g' or 'ay'
--- - `G_TYPE_STRV`: 'as', 'ao' or 'aay'
--- - `G_TYPE_BOOLEAN`: 'b'
--- - `G_TYPE_UCHAR`: 'y'
--- - `G_TYPE_INT`: 'i', 'n'
--- - `G_TYPE_UINT`: 'u', 'q'
--- - `G_TYPE_INT64`: 'x'
--- - `G_TYPE_UINT64`: 't'
--- - `G_TYPE_DOUBLE`: 'd'
--- - `G_TYPE_VARIANT`: Any `GVariantType`
--- 
--- This can fail if e.g. `gvalue` is of type %G_TYPE_STRING and `type`
--- is 'i', i.e. %G_VARIANT_TYPE_INT32. It will also fail for any `GType`
--- (including e.g. %G_TYPE_OBJECT and %G_TYPE_BOXED derived-types) not
--- in the table above.
--- 
--- Note that if `gvalue` is of type %G_TYPE_VARIANT and its value is
--- `nil`, the empty `GVariant` instance (never `nil`) for `type` is
--- returned (e.g. 0 for scalar types, the empty string for string types,
--- '/' for object path types, the empty array for any array type and so on).
--- 
--- See the `g_dbus_gvariant_to_gvalue()` function for how to convert a
--- `GVariant` to a `GValue`.
---
--- ---
---
---@param gvalue GObject.Value # A `GValue` to convert to a `GVariant`
---@param type GLib.VariantType # A `GVariantType`
---@return GLib.Variant # A `GVariant` (never floating) of `GVariantType` `type` holding the data from `gvalue` or an empty `GVariant` in case of failure. Free with `g_variant_unref()`.
function Gio.dbus_gvalue_to_gvariant(gvalue, type) end

--- # function Gio.dbus_gvariant_to_gvalue()
---
--- Converts a `GVariant` to a `GValue`. If `value` is floating, it is consumed.
--- 
--- The rules specified in the `g_dbus_gvalue_to_gvariant()` function are
--- used - this function is essentially its reverse form. So, a `GVariant`
--- containing any basic or string array type will be converted to a `GValue`
--- containing a basic value or string array. Any other `GVariant` (handle,
--- variant, tuple, dict entry) will be converted to a `GValue` containing that
--- `GVariant`.
--- 
--- The conversion never fails - a valid `GValue` is always returned in
--- `out_gvalue`.
---
--- ---
---
---@param value GLib.Variant # A `GVariant`.
---@param out_gvalue GObject.Value # Return location pointing to a zero-filled (uninitialized) `GValue`.
---@return nil
function Gio.dbus_gvariant_to_gvalue(value, out_gvalue) end

--- # function Gio.dbus_is_address()
---
--- Checks if `string` is a
--- [D-Bus address](https://dbus.freedesktop.org/doc/dbus-specification.html`addresses`).
--- 
--- This doesn't check if `string` is actually supported by `GDBusServer`
--- or `GDBusConnection` - use `g_dbus_is_supported_address()` to do more
--- checks.
---
--- ---
---
---@param string string # A string.
---@return (boolean|nil) # `true` if `string` is a valid D-Bus address, `false` otherwise.
function Gio.dbus_is_address(string) end

--- # function Gio.dbus_is_error_name()
---
--- Check whether `string` is a valid D-Bus error name.
--- 
--- This function returns the same result as `g_dbus_is_interface_name()`,
--- because D-Bus error names are defined to have exactly the
--- same syntax as interface names.
---
--- ---
---
---@param string string # The string to check.
---@return (boolean|nil) # `true` if valid, `false` otherwise.
function Gio.dbus_is_error_name(string) end

--- # function Gio.dbus_is_guid()
---
--- Checks if `string` is a D-Bus GUID.
--- 
--- See the documentation for `g_dbus_generate_guid()` for more information about
--- the format of a GUID.
---
--- ---
---
---@param string string # The string to check.
---@return (boolean|nil) # `true` if `string` is a GUID, `false` otherwise.
function Gio.dbus_is_guid(string) end

--- # function Gio.dbus_is_interface_name()
---
--- Checks if `string` is a valid D-Bus interface name.
---
--- ---
---
---@param string string # The string to check.
---@return (boolean|nil) # `true` if valid, `false` otherwise.
function Gio.dbus_is_interface_name(string) end

--- # function Gio.dbus_is_member_name()
---
--- Checks if `string` is a valid D-Bus member (e.g. signal or method) name.
---
--- ---
---
---@param string string # The string to check.
---@return (boolean|nil) # `true` if valid, `false` otherwise.
function Gio.dbus_is_member_name(string) end

--- # function Gio.dbus_is_name()
---
--- Checks if `string` is a valid D-Bus bus name (either unique or well-known).
---
--- ---
---
---@param string string # The string to check.
---@return (boolean|nil) # `true` if valid, `false` otherwise.
function Gio.dbus_is_name(string) end

--- # function Gio.dbus_is_supported_address()
---
--- Like `g_dbus_is_address()` but also checks if the library supports the
--- transports in `string` and that key/value pairs for each transport
--- are valid. See the specification of the
--- [D-Bus address format](https://dbus.freedesktop.org/doc/dbus-specification.html`addresses`).
---
--- ---
---
---@param string string # A string.
---@return (boolean|nil) # `true` if `string` is a valid D-Bus address that is supported by this library, `false` if `error` is set.
function Gio.dbus_is_supported_address(string) end

--- # function Gio.dbus_is_unique_name()
---
--- Checks if `string` is a valid D-Bus unique bus name.
---
--- ---
---
---@param string string # The string to check.
---@return (boolean|nil) # `true` if valid, `false` otherwise.
function Gio.dbus_is_unique_name(string) end

--- # function Gio.dbus_unescape_object_path()
---
--- Unescapes an string that was previously escaped with
--- `g_dbus_escape_object_path()`. If the string is in a format that could
--- not have been returned by `g_dbus_escape_object_path()`, this function
--- returns `nil`.
--- 
--- Encoding alphanumeric characters which do not need to be
--- encoded is not allowed (e.g `_63` is not valid, the string
--- should contain `c` instead).
---
--- ---
---
---@param s string # the string to unescape
---@return unknown[] # an unescaped version of `s`, or `nil` if `s` is not a string returned from `g_dbus_escape_object_path()`. Free with `g_free()`.
function Gio.dbus_unescape_object_path(s) end

--- # function Gio.dtls_client_connection_new()
---
--- Creates a new `GDtlsClientConnection` wrapping `base_socket` which is
--- assumed to communicate with the server identified by `server_identity`.
---
--- ---
---
---@param base_socket Gio.DatagramBased # the `GDatagramBased` to wrap
---@param server_identity? Gio.SocketConnectable # the expected identity of the server
---@return Gio.DtlsClientConnection # the new `GDtlsClientConnection`, or `nil` on error
function Gio.dtls_client_connection_new(base_socket, server_identity) end

--- # function Gio.dtls_server_connection_new()
---
--- Creates a new `GDtlsServerConnection` wrapping `base_socket`.
---
--- ---
---
---@param base_socket Gio.DatagramBased # the `GDatagramBased` to wrap
---@param certificate? Gio.TlsCertificate # the default server certificate, or `nil`
---@return Gio.DtlsServerConnection # the new `GDtlsServerConnection`, or `nil` on error
function Gio.dtls_server_connection_new(base_socket, certificate) end

--- # function Gio.file_new_for_commandline_arg()
---
--- Creates a `GFile` with the given argument from the command line.
--- The value of `arg` can be either a URI, an absolute path or a
--- relative path resolved relative to the current working directory.
--- This operation never fails, but the returned object might not
--- support any I/O operation if `arg` points to a malformed path.
--- 
--- Note that on Windows, this function expects its argument to be in
--- UTF-8 -- not the system code page.  This means that you
--- should not use this function with string from argv as it is passed
--- to `main()`.  g_win32`_get_command_line()` will return a UTF-8 version of
--- the commandline.  `GApplication` also uses UTF-8 but
--- `g_application_command_line_create_file_for_arg()` may be more useful
--- for you there.  It is also always possible to use this function with
--- `GOptionContext` arguments of type %G_OPTION_ARG_FILENAME.
---
--- ---
---
---@param arg string # a command line string
---@return Gio.File # a new `GFile`. Free the returned object with `g_object_unref()`.
function Gio.file_new_for_commandline_arg(arg) end

--- # function Gio.file_new_for_commandline_arg_and_cwd()
---
--- Creates a `GFile` with the given argument from the command line.
--- 
--- This function is similar to `g_file_new_for_commandline_arg()` except
--- that it allows for passing the current working directory as an
--- argument instead of using the current working directory of the
--- process.
--- 
--- This is useful if the commandline argument was given in a context
--- other than the invocation of the current process.
--- 
--- See also `g_application_command_line_create_file_for_arg()`.
---
--- ---
---
---@param arg string # a command line string
---@param cwd string # the current working directory of the commandline
---@return Gio.File # a new `GFile`
function Gio.file_new_for_commandline_arg_and_cwd(arg, cwd) end

--- # function Gio.file_new_for_path()
---
--- Constructs a `GFile` for a given path. This operation never
--- fails, but the returned object might not support any I/O
--- operation if `path` is malformed.
---
--- ---
---
---@param path string # a string containing a relative or absolute path. The string must be encoded in the glib filename encoding.
---@return Gio.File # a new `GFile` for the given `path`. Free the returned object with `g_object_unref()`.
function Gio.file_new_for_path(path) end

--- # function Gio.file_new_for_uri()
---
--- Constructs a `GFile` for a given URI. This operation never
--- fails, but the returned object might not support any I/O
--- operation if `uri` is malformed or if the uri type is
--- not supported.
---
--- ---
---
---@param uri string # a UTF-8 string containing a URI
---@return Gio.File # a new `GFile` for the given `uri`. Free the returned object with `g_object_unref()`.
function Gio.file_new_for_uri(uri) end

--- # function Gio.file_new_tmp()
---
--- Opens a file in the preferred directory for temporary files (as
--- returned by `g_get_tmp_dir()`) and returns a `GFile` and
--- `GFileIOStream` pointing to it.
--- 
--- `tmpl` should be a string in the GLib file name encoding
--- containing a sequence of six 'X' characters, and containing no
--- directory components. If it is `nil`, a default template is used.
--- 
--- Unlike the other `GFile` constructors, this will return `nil` if
--- a temporary file could not be created.
---
--- ---
---
---@param tmpl? string # Template for the file name, as in `g_file_open_tmp()`, or `nil` for a default template
---@param iostream Gio.FileIOStream # on return, a `GFileIOStream` for the created file
---@return Gio.File # a new `GFile`. Free the returned object with `g_object_unref()`.
function Gio.file_new_tmp(tmpl, iostream) end

--- # function Gio.file_new_tmp_async()
---
--- Asynchronously opens a file in the preferred directory for temporary files
---  (as returned by `g_get_tmp_dir()`) as `g_file_new_tmp()`.
--- 
--- `tmpl` should be a string in the GLib file name encoding
--- containing a sequence of six 'X' characters, and containing no
--- directory components. If it is `nil`, a default template is used.
---
--- ---
---
---@param tmpl? string # Template for the file name, as in `g_file_open_tmp()`, or `nil` for a default template
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is done
---@param user_data? userdata # data to pass to `callback`
---@return nil
function Gio.file_new_tmp_async(tmpl, io_priority, cancellable, callback, user_data) end

--- # function Gio.file_new_tmp_dir_async()
---
--- Asynchronously creates a directory in the preferred directory for
--- temporary files (as returned by `g_get_tmp_dir()`) as `g_dir_make_tmp()`.
--- 
--- `tmpl` should be a string in the GLib file name encoding
--- containing a sequence of six 'X' characters, and containing no
--- directory components. If it is `nil`, a default template is used.
---
--- ---
---
---@param tmpl? string # Template for the file name, as in `g_dir_make_tmp()`, or `nil` for a default template
---@param io_priority integer # the [I/O priority][io-priority] of the request
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback` to call when the request is done
---@param user_data? userdata # data to pass to `callback`
---@return nil
function Gio.file_new_tmp_dir_async(tmpl, io_priority, cancellable, callback, user_data) end

--- # function Gio.file_new_tmp_dir_finish()
---
--- Finishes a temporary directory creation started by
--- `g_file_new_tmp_dir_async()`.
---
--- ---
---
---@param result Gio.AsyncResult # a `GAsyncResult`
---@return Gio.File # a new `GFile`. Free the returned object with `g_object_unref()`.
function Gio.file_new_tmp_dir_finish(result) end

--- # function Gio.file_new_tmp_finish()
---
--- Finishes a temporary file creation started by `g_file_new_tmp_async()`.
---
--- ---
---
---@param result Gio.AsyncResult # a `GAsyncResult`
---@param iostream Gio.FileIOStream # on return, a `GFileIOStream` for the created file
---@return Gio.File # a new `GFile`. Free the returned object with `g_object_unref()`.
function Gio.file_new_tmp_finish(result, iostream) end

--- # function Gio.file_parse_name()
---
--- Constructs a `GFile` with the given `parse_name` (i.e. something
--- given by `g_file_get_parse_name()`). This operation never fails,
--- but the returned object might not support any I/O operation if
--- the `parse_name` cannot be parsed.
---
--- ---
---
---@param parse_name string # a file name or path to be parsed
---@return Gio.File # a new `GFile`.
function Gio.file_parse_name(parse_name) end

--- # function Gio.icon_deserialize()
---
--- Deserializes a `GIcon` previously serialized using `g_icon_serialize()`.
---
--- ---
---
---@param value GLib.Variant # a `GVariant` created with `g_icon_serialize()`
---@return Gio.Icon # a `GIcon`, or `nil` when deserialization fails.
function Gio.icon_deserialize(value) end

--- # function Gio.icon_new_for_string()
---
--- Generate a `GIcon` instance from `str`. This function can fail if
--- `str` is not valid - see `g_icon_to_string()` for discussion.
--- 
--- If your application or library provides one or more `GIcon`
--- implementations you need to ensure that each `GType` is registered
--- with the type system prior to calling `g_icon_new_for_string()`.
---
--- ---
---
---@param str string # A string obtained via `g_icon_to_string()`.
---@return Gio.Icon # An object implementing the `GIcon` interface or `nil` if `error` is set.
function Gio.icon_new_for_string(str) end

--- # function Gio.initable_newv()
---
--- Helper function for constructing `GInitable` object. This is
--- similar to `g_object_newv()` but also initializes the object
--- and returns `nil`, setting an error on failure.
---
--- ---
---
---@param object_type Gio.GType # a `GType` supporting `GInitable`.
---@param n_parameters integer # the number of parameters in `parameters`
---@param parameters unknown[] # the parameters to use to construct the object
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return GObject.Object # a newly allocated `GObject`, or `nil` on error
function Gio.initable_newv(object_type, n_parameters, parameters, cancellable) end

--- # function Gio.io_error_from_errno()
---
--- Converts errno.h error codes into GIO error codes. The fallback
--- value %G_IO_ERROR_FAILED is returned for error codes not currently
--- handled (but note that future GLib releases may return a more
--- specific value instead).
--- 
--- As %errno is global and may be modified by intermediate function
--- calls, you should save its value as soon as the call which sets it
---
--- ---
---
---@param err_no integer # Error number as defined in errno.h.
---@return Gio.IOErrorEnum # `GIOErrorEnum` value for the given errno.h error number.
function Gio.io_error_from_errno(err_no) end

--- # function Gio.io_error_from_file_error()
---
--- Converts `GFileError` error codes into GIO error codes.
---
--- ---
---
---@param file_error GLib.FileError # a `GFileError`.
---@return Gio.IOErrorEnum # `GIOErrorEnum` value for the given `GFileError` error value.
function Gio.io_error_from_file_error(file_error) end

--- # function Gio.io_error_quark()
---
--- Gets the GIO Error Quark.
---
--- ---
---
---@return GLib.Quark # a `GQuark`.
function Gio.io_error_quark() end

--- # function Gio.io_extension_point_implement()
---
--- Registers `type` as extension for the extension point with name
--- `extension_point_name`.
--- 
--- If `type` has already been registered as an extension for this
--- extension point, the existing `GIOExtension` object is returned.
---
--- ---
---
---@param extension_point_name string # the name of the extension point
---@param type Gio.GType # the `GType` to register as extension
---@param extension_name string # the name for the extension
---@param priority integer # the priority for the extension
---@return Gio.IOExtension # a `GIOExtension` object for `GType`
function Gio.io_extension_point_implement(extension_point_name, type, extension_name, priority) end

--- # function Gio.io_extension_point_lookup()
---
--- Looks up an existing extension point.
---
--- ---
---
---@param name string # the name of the extension point
---@return Gio.IOExtensionPoint # the `GIOExtensionPoint`, or `nil` if there is no registered extension point with the given name.
function Gio.io_extension_point_lookup(name) end

--- # function Gio.io_extension_point_register()
---
--- Registers an extension point.
---
--- ---
---
---@param name string # The name of the extension point
---@return Gio.IOExtensionPoint # the new `GIOExtensionPoint`. This object is owned by GIO and should not be freed.
function Gio.io_extension_point_register(name) end

--- # function Gio.io_modules_load_all_in_directory()
---
--- Loads all the modules in the specified directory.
--- 
--- If don't require all modules to be initialized (and thus registering
--- all gtypes) then you can use `g_io_modules_scan_all_in_directory()`
--- which allows delayed/lazy loading of modules.
---
--- ---
---
---@param dirname string # pathname for a directory containing modules to load.
---@return Gio.IOModule[] # a list of `GIOModules` loaded from the directory, All the modules are loaded into memory, if you want to unload them (enabling on-demand loading) you must call `g_type_module_unuse()` on all the modules. Free the list with `g_list_free()`.
function Gio.io_modules_load_all_in_directory(dirname) end

--- # function Gio.io_modules_load_all_in_directory_with_scope()
---
--- Loads all the modules in the specified directory.
--- 
--- If don't require all modules to be initialized (and thus registering
--- all gtypes) then you can use `g_io_modules_scan_all_in_directory()`
--- which allows delayed/lazy loading of modules.
---
--- ---
---
---@param dirname string # pathname for a directory containing modules to load.
---@param scope Gio.IOModuleScope # a scope to use when scanning the modules.
---@return Gio.IOModule[] # a list of `GIOModules` loaded from the directory, All the modules are loaded into memory, if you want to unload them (enabling on-demand loading) you must call `g_type_module_unuse()` on all the modules. Free the list with `g_list_free()`.
function Gio.io_modules_load_all_in_directory_with_scope(dirname, scope) end

--- # function Gio.io_modules_scan_all_in_directory()
---
--- Scans all the modules in the specified directory, ensuring that
--- any extension point implemented by a module is registered.
--- 
--- This may not actually load and initialize all the types in each
--- module, some modules may be lazily loaded and initialized when
--- an extension point it implements is used with e.g.
--- `g_io_extension_point_get_extensions()` or
--- `g_io_extension_point_get_extension_by_name()`.
--- 
--- If you need to guarantee that all types are loaded in all the modules,
--- use `g_io_modules_load_all_in_directory()`.
---
--- ---
---
---@param dirname string # pathname for a directory containing modules to scan.
---@return nil
function Gio.io_modules_scan_all_in_directory(dirname) end

--- # function Gio.io_modules_scan_all_in_directory_with_scope()
---
--- Scans all the modules in the specified directory, ensuring that
--- any extension point implemented by a module is registered.
--- 
--- This may not actually load and initialize all the types in each
--- module, some modules may be lazily loaded and initialized when
--- an extension point it implements is used with e.g.
--- `g_io_extension_point_get_extensions()` or
--- `g_io_extension_point_get_extension_by_name()`.
--- 
--- If you need to guarantee that all types are loaded in all the modules,
--- use `g_io_modules_load_all_in_directory()`.
---
--- ---
---
---@param dirname string # pathname for a directory containing modules to scan.
---@param scope Gio.IOModuleScope # a scope to use when scanning the modules
---@return nil
function Gio.io_modules_scan_all_in_directory_with_scope(dirname, scope) end

--- # function Gio.io_scheduler_cancel_all_jobs()
---
--- Cancels all cancellable I/O jobs.
--- 
--- A job is cancellable if a `GCancellable` was passed into
--- `g_io_scheduler_push_job()`.
---
--- ---
---
---@return nil
function Gio.io_scheduler_cancel_all_jobs() end

--- # function Gio.io_scheduler_push_job()
---
--- Schedules the I/O job to run in another thread.
--- 
--- `notify` will be called on `user_data` after `job_func` has returned,
--- regardless whether the job was cancelled or has run to completion.
--- 
--- If `cancellable` is not `nil`, it can be used to cancel the I/O job
--- by calling `g_cancellable_cancel()` or by calling
--- `g_io_scheduler_cancel_all_jobs()`.
---
--- ---
---
---@param job_func Gio.IOSchedulerJobFunc # a `GIOSchedulerJobFunc`.
---@param user_data? userdata # data to pass to `job_func`
---@param notify? GLib.DestroyNotify # a `GDestroyNotify` for `user_data`, or `nil`
---@param io_priority integer # the [I/O priority][io-priority] of the request.
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return nil
function Gio.io_scheduler_push_job(job_func, user_data, notify, io_priority, cancellable) end

--- # function Gio.keyfile_settings_backend_new()
---
--- Creates a keyfile-backed `GSettingsBackend`.
--- 
--- The filename of the keyfile to use is given by `filename`.
--- 
--- All settings read to or written from the backend must fall under the
--- path given in `root_path` (which must start and end with a slash and
--- not contain two consecutive slashes).  `root_path` may be "/".
--- 
--- If `root_group` is non-`nil` then it specifies the name of the keyfile
--- group used for keys that are written directly below `root_path`.  For
--- example, if `root_path` is "/apps/example/" and `root_group` is
--- "toplevel", then settings the key "/apps/example/enabled" to a value
--- of `true` will cause the following to appear in the keyfile:
--- 
--- ```c
---   [toplevel]
---   enabled=true
--- ```
--- 
--- If `root_group` is `nil` then it is not permitted to store keys
--- directly below the `root_path`.
--- 
--- For keys not stored directly below `root_path` (ie: in a sub-path),
--- the name of the subpath (with the final slash stripped) is used as
--- the name of the keyfile group.  To continue the example, if
--- "/apps/example/profiles/default/font-size" were set to
--- 12 then the following would appear in the keyfile:
--- 
--- ```c
---   [profiles/default]
---   font-size=12
--- ```
--- 
--- The backend will refuse writes (and return writability as being
--- `false`) for keys outside of `root_path` and, in the event that
--- `root_group` is `nil`, also for keys directly under `root_path`.
--- Writes will also be refused if the backend detects that it has the
--- inability to rewrite the keyfile (ie: the containing directory is not
--- writable).
--- 
--- There is no checking done for your key namespace clashing with the
--- syntax of the key file format.  For example, if you have '[' or ']'
--- characters in your path names or '=' in your key names you may be in
--- trouble.
--- 
--- The backend reads default values from a keyfile called `defaults` in
--- the directory specified by the `GKeyfileSettingsBackend`:defaults-dir property,
--- and a list of locked keys from a text file with the name `locks` in
--- the same location.
---
--- ---
---
---@param filename string # the filename of the keyfile
---@param root_path string # the path under which all settings keys appear
---@param root_group? string # the group name corresponding to `root_path`, or `nil`
---@return Gio.SettingsBackend # a keyfile-backed `GSettingsBackend`
function Gio.keyfile_settings_backend_new(filename, root_path, root_group) end

--- # function Gio.memory_monitor_dup_default()
---
--- Gets a reference to the default `GMemoryMonitor` for the system.
---
--- ---
---
---@return Gio.MemoryMonitor # a new reference to the default `GMemoryMonitor`
function Gio.memory_monitor_dup_default() end

--- # function Gio.memory_settings_backend_new()
---
--- Creates a memory-backed `GSettingsBackend`.
--- 
--- This backend allows changes to settings, but does not write them
--- to any backing storage, so the next time you run your application,
--- the memory backend will start out with the default values again.
---
--- ---
---
---@return Gio.SettingsBackend # a newly created `GSettingsBackend`
function Gio.memory_settings_backend_new() end

--- # function Gio.network_monitor_get_default()
---
--- Gets the default `GNetworkMonitor` for the system.
---
--- ---
---
---@return Gio.NetworkMonitor # a `GNetworkMonitor`, which will be a dummy object if no network monitor is available
function Gio.network_monitor_get_default() end

--- # function Gio.networking_init()
---
--- Initializes the platform networking libraries (eg, on Windows, this
--- calls WSAS`tartup()`). GLib will call this itself if it is needed, so
--- you only need to call it if you directly call system networking
--- functions (without calling any GLib networking functions first).
---
--- ---
---
---@return nil
function Gio.networking_init() end

--- # function Gio.null_settings_backend_new()
---
--- Creates a readonly `GSettingsBackend`.
--- 
--- This backend does not allow changes to settings, so all settings
--- will always have their default values.
---
--- ---
---
---@return Gio.SettingsBackend # a newly created `GSettingsBackend`
function Gio.null_settings_backend_new() end

--- # function Gio.pollable_source_new()
---
--- Utility method for `GPollableInputStream` and `GPollableOutputStream`
--- implementations. Creates a new `GSource` that expects a callback of
--- type `GPollableSourceFunc`. The new source does not actually do
--- anything on its own; use `g_source_add_child_source()` to add other
--- sources to it to cause it to trigger.
---
--- ---
---
---@param pollable_stream GObject.Object # the stream associated with the new source
---@return GLib.Source # the new `GSource`.
function Gio.pollable_source_new(pollable_stream) end

--- # function Gio.pollable_source_new_full()
---
--- Utility method for `GPollableInputStream` and `GPollableOutputStream`
--- implementations. Creates a new `GSource`, as with
--- `g_pollable_source_new()`, but also attaching `child_source` (with a
--- dummy callback), and `cancellable`, if they are non-`nil`.
---
--- ---
---
---@param pollable_stream GObject.Object # the stream associated with the new source
---@param child_source? GLib.Source # optional child source to attach
---@param cancellable? Gio.Cancellable # optional `GCancellable` to attach
---@return GLib.Source # the new `GSource`.
function Gio.pollable_source_new_full(pollable_stream, child_source, cancellable) end

--- # function Gio.pollable_stream_read()
---
--- Tries to read from `stream`, as with `g_input_stream_read()` (if
--- `blocking` is `true`) or `g_pollable_input_stream_read_nonblocking()`
--- (if `blocking` is `false`). This can be used to more easily share
--- code between blocking and non-blocking implementations of a method.
--- 
--- If `blocking` is `false`, then `stream` must be a
--- `GPollableInputStream` for which `g_pollable_input_stream_can_poll()`
--- returns `true`, or else the behavior is undefined. If `blocking` is
--- `true`, then `stream` does not need to be a `GPollableInputStream`.
---
--- ---
---
---@param stream Gio.InputStream # a `GInputStream`
---@param buffer unknown[] # a buffer to read data into
---@param count integer # the number of bytes to read
---@param blocking (boolean|nil) # whether to do blocking I/O
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return integer # the number of bytes read, or -1 on error.
function Gio.pollable_stream_read(stream, buffer, count, blocking, cancellable) end

--- # function Gio.pollable_stream_write()
---
--- Tries to write to `stream`, as with `g_output_stream_write()` (if
--- `blocking` is `true`) or `g_pollable_output_stream_write_nonblocking()`
--- (if `blocking` is `false`). This can be used to more easily share
--- code between blocking and non-blocking implementations of a method.
--- 
--- If `blocking` is `false`, then `stream` must be a
--- `GPollableOutputStream` for which
--- `g_pollable_output_stream_can_poll()` returns `true` or else the
--- behavior is undefined. If `blocking` is `true`, then `stream` does not
--- need to be a `GPollableOutputStream`.
---
--- ---
---
---@param stream Gio.OutputStream # a `GOutputStream`.
---@param buffer unknown[] # the buffer containing the data to write.
---@param count integer # the number of bytes to write
---@param blocking (boolean|nil) # whether to do blocking I/O
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return integer # the number of bytes written, or -1 on error.
function Gio.pollable_stream_write(stream, buffer, count, blocking, cancellable) end

--- # function Gio.pollable_stream_write_all()
---
--- Tries to write `count` bytes to `stream`, as with
--- `g_output_stream_write_all()`, but using `g_pollable_stream_write()`
--- rather than `g_output_stream_write()`.
--- 
--- On a successful write of `count` bytes, `true` is returned, and
--- `bytes_written` is set to `count`.
--- 
--- If there is an error during the operation (including
--- %G_IO_ERROR_WOULD_BLOCK in the non-blocking case), `false` is
--- returned and `error` is set to indicate the error status,
--- `bytes_written` is updated to contain the number of bytes written
--- into the stream before the error occurred.
--- 
--- As with `g_pollable_stream_write()`, if `blocking` is `false`, then
--- `stream` must be a `GPollableOutputStream` for which
--- `g_pollable_output_stream_can_poll()` returns `true` or else the
--- behavior is undefined. If `blocking` is `true`, then `stream` does not
--- need to be a `GPollableOutputStream`.
---
--- ---
---
---@param stream Gio.OutputStream # a `GOutputStream`.
---@param buffer unknown[] # the buffer containing the data to write.
---@param count integer # the number of bytes to write
---@param blocking (boolean|nil) # whether to do blocking I/O
---@param bytes_written integer # location to store the number of bytes that was written to the stream
---@param cancellable? Gio.Cancellable # optional `GCancellable` object, `nil` to ignore.
---@return (boolean|nil) # `true` on success, `false` if there was an error
function Gio.pollable_stream_write_all(stream, buffer, count, blocking, bytes_written, cancellable) end

--- # function Gio.power_profile_monitor_dup_default()
---
--- Gets a reference to the default `GPowerProfileMonitor` for the system.
---
--- ---
---
---@return Gio.PowerProfileMonitor # a new reference to the default `GPowerProfileMonitor`
function Gio.power_profile_monitor_dup_default() end

--- # function Gio.proxy_get_default_for_protocol()
---
--- Find the `gio-proxy` extension point for a proxy implementation that supports
--- the specified protocol.
---
--- ---
---
---@param protocol string # the proxy protocol name (e.g. http, socks, etc)
---@return Gio.Proxy # return a `GProxy` or NULL if protocol is not supported.
function Gio.proxy_get_default_for_protocol(protocol) end

--- # function Gio.proxy_resolver_get_default()
---
--- Gets the default `GProxyResolver` for the system.
---
--- ---
---
---@return Gio.ProxyResolver # the default `GProxyResolver`, which will be a dummy object if no proxy resolver is available
function Gio.proxy_resolver_get_default() end

--- # function Gio.resolver_error_quark()
---
--- Gets the `GResolver` Error Quark.
---
--- ---
---
---@return GLib.Quark # a `GQuark`.
function Gio.resolver_error_quark() end

--- # function Gio.resource_error_quark()
---
--- Gets the `GResource` Error Quark.
---
--- ---
---
---@return GLib.Quark # a `GQuark`
function Gio.resource_error_quark() end

--- # function Gio.resource_load()
---
--- Loads a binary resource bundle and creates a `GResource` representation of it, allowing
--- you to query it for data.
--- 
--- If you want to use this resource in the global resource namespace you need
--- to register it with `g_resources_register()`.
--- 
--- If `filename` is empty or the data in it is corrupt,
--- %G_RESOURCE_ERROR_INTERNAL will be returned. If `filename` doesn’t exist, or
--- there is an error in reading it, an error from `g_mapped_file_new()` will be
--- returned.
---
--- ---
---
---@param filename string # the path of a filename to load, in the GLib filename encoding
---@return Gio.Resource # a new `GResource`, or `nil` on error
function Gio.resource_load(filename) end

--- # function Gio.resources_enumerate_children()
---
--- Returns all the names of children at the specified `path` in the set of
--- globally registered resources.
--- The return result is a `nil` terminated list of strings which should
--- be released with `g_strfreev()`.
--- 
--- `lookup_flags` controls the behaviour of the lookup.
---
--- ---
---
---@param path string # A pathname inside the resource
---@param lookup_flags Gio.ResourceLookupFlags # A `GResourceLookupFlags`
---@return unknown[] # an array of constant strings
function Gio.resources_enumerate_children(path, lookup_flags) end

--- # function Gio.resources_get_info()
---
--- Looks for a file at the specified `path` in the set of
--- globally registered resources and if found returns information about it.
--- 
--- `lookup_flags` controls the behaviour of the lookup.
---
--- ---
---
---@param path string # A pathname inside the resource
---@param lookup_flags Gio.ResourceLookupFlags # A `GResourceLookupFlags`
---@param size? integer # a location to place the length of the contents of the file, or `nil` if the length is not needed
---@param flags? integer # a location to place the `GResourceFlags` about the file, or `nil` if the flags are not needed
---@return (boolean|nil) # `true` if the file was found. `false` if there were errors
function Gio.resources_get_info(path, lookup_flags, size, flags) end

--- # function Gio.resources_lookup_data()
---
--- Looks for a file at the specified `path` in the set of
--- globally registered resources and returns a `GBytes` that
--- lets you directly access the data in memory.
--- 
--- The data is always followed by a zero byte, so you
--- can safely use the data as a C string. However, that byte
--- is not included in the size of the GBytes.
--- 
--- For uncompressed resource files this is a pointer directly into
--- the resource bundle, which is typically in some readonly data section
--- in the program binary. For compressed files we allocate memory on
--- the heap and automatically uncompress the data.
--- 
--- `lookup_flags` controls the behaviour of the lookup.
---
--- ---
---
---@param path string # A pathname inside the resource
---@param lookup_flags Gio.ResourceLookupFlags # A `GResourceLookupFlags`
---@return GLib.Bytes # `GBytes` or `nil` on error. Free the returned object with `g_bytes_unref()`
function Gio.resources_lookup_data(path, lookup_flags) end

--- # function Gio.resources_open_stream()
---
--- Looks for a file at the specified `path` in the set of
--- globally registered resources and returns a `GInputStream`
--- that lets you read the data.
--- 
--- `lookup_flags` controls the behaviour of the lookup.
---
--- ---
---
---@param path string # A pathname inside the resource
---@param lookup_flags Gio.ResourceLookupFlags # A `GResourceLookupFlags`
---@return Gio.InputStream # `GInputStream` or `nil` on error. Free the returned object with `g_object_unref()`
function Gio.resources_open_stream(path, lookup_flags) end

--- # function Gio.resources_register()
---
--- Registers the resource with the process-global set of resources.
--- Once a resource is registered the files in it can be accessed
--- with the global resource lookup functions like `g_resources_lookup_data()`.
---
--- ---
---
---@param resource Gio.Resource # A `GResource`
---@return nil
function Gio.resources_register(resource) end

--- # function Gio.resources_unregister()
---
--- Unregisters the resource from the process-global set of resources.
---
--- ---
---
---@param resource Gio.Resource # A `GResource`
---@return nil
function Gio.resources_unregister(resource) end

--- # function Gio.settings_schema_source_get_default()
---
--- Gets the default system schema source.
--- 
--- This function is not required for normal uses of `GSettings` but it
--- may be useful to authors of plugin management systems or to those who
--- want to introspect the content of schemas.
--- 
--- If no schemas are installed, `nil` will be returned.
--- 
--- The returned source may actually consist of multiple schema sources
--- from different directories, depending on which directories were given
--- in `XDG_DATA_DIRS` and `GSETTINGS_SCHEMA_DIR`. For this reason, all
--- lookups performed against the default source should probably be done
--- recursively.
---
--- ---
---
---@return Gio.SettingsSchemaSource # the default schema source
function Gio.settings_schema_source_get_default() end

--- # function Gio.simple_async_report_gerror_in_idle()
---
--- Reports an error in an idle function. Similar to
--- `g_simple_async_report_error_in_idle()`, but takes a `GError` rather
--- than building a new one.
---
--- ---
---
---@param object? GObject.Object # a `GObject`, or `nil`
---@param callback? Gio.AsyncReadyCallback # a `GAsyncReadyCallback`.
---@param user_data? userdata # user data passed to `callback`.
---@param error GLib.Error # the `GError` to report
---@return nil
function Gio.simple_async_report_gerror_in_idle(object, callback, user_data, error) end

--- # function Gio.tls_backend_get_default()
---
--- Gets the default `GTlsBackend` for the system.
---
--- ---
---
---@return Gio.TlsBackend # a `GTlsBackend`, which will be a dummy object if no TLS backend is available
function Gio.tls_backend_get_default() end

--- # function Gio.tls_channel_binding_error_quark()
---
--- Gets the TLS channel binding error quark.
---
--- ---
---
---@return GLib.Quark # a `GQuark`.
function Gio.tls_channel_binding_error_quark() end

--- # function Gio.tls_client_connection_new()
---
--- Creates a new `GTlsClientConnection` wrapping `base_io_stream` (which
--- must have pollable input and output streams) which is assumed to
--- communicate with the server identified by `server_identity`.
--- 
--- See the documentation for `GTlsConnection`:base-io-stream for restrictions
--- on when application code can run operations on the `base_io_stream` after
--- this function has returned.
---
--- ---
---
---@param base_io_stream Gio.IOStream # the `GIOStream` to wrap
---@param server_identity? Gio.SocketConnectable # the expected identity of the server
---@return Gio.TlsClientConnection # the new `GTlsClientConnection`, or `nil` on error
function Gio.tls_client_connection_new(base_io_stream, server_identity) end

--- # function Gio.tls_error_quark()
---
--- Gets the TLS error quark.
---
--- ---
---
---@return GLib.Quark # a `GQuark`.
function Gio.tls_error_quark() end

--- # function Gio.tls_file_database_new()
---
--- Creates a new `GTlsFileDatabase` which uses anchor certificate authorities
--- in `anchors` to verify certificate chains.
--- 
--- The certificates in `anchors` must be PEM encoded.
---
--- ---
---
---@param anchors string # filename of anchor certificate authorities.
---@return Gio.TlsFileDatabase # the new `GTlsFileDatabase`, or `nil` on error
function Gio.tls_file_database_new(anchors) end

--- # function Gio.tls_server_connection_new()
---
--- Creates a new `GTlsServerConnection` wrapping `base_io_stream` (which
--- must have pollable input and output streams).
--- 
--- See the documentation for `GTlsConnection`:base-io-stream for restrictions
--- on when application code can run operations on the `base_io_stream` after
--- this function has returned.
---
--- ---
---
---@param base_io_stream Gio.IOStream # the `GIOStream` to wrap
---@param certificate? Gio.TlsCertificate # the default server certificate, or `nil`
---@return Gio.TlsServerConnection # the new `GTlsServerConnection`, or `nil` on error
function Gio.tls_server_connection_new(base_io_stream, certificate) end

--- # function Gio.unix_is_mount_path_system_internal()
---
--- Determines if `mount_path` is considered an implementation of the
--- OS. This is primarily used for hiding mountable and mounted volumes
--- that only are used in the OS and has little to no relevance to the
--- casual user.
---
--- ---
---
---@param mount_path string # a mount path, e.g. `/media/disk` or `/usr`
---@return (boolean|nil) # `true` if `mount_path` is considered an implementation detail of the OS.
function Gio.unix_is_mount_path_system_internal(mount_path) end

--- # function Gio.unix_is_system_device_path()
---
--- Determines if `device_path` is considered a block device path which is only
--- used in implementation of the OS. This is primarily used for hiding
--- mounted volumes that are intended as APIs for programs to read, and system
--- administrators at a shell; rather than something that should, for example,
--- appear in a GUI. For example, the Linux `/proc` filesystem.
--- 
--- The list of device paths considered ‘system’ ones may change over time.
---
--- ---
---
---@param device_path string # a device path, e.g. `/dev/loop0` or `nfsd`
---@return (boolean|nil) # `true` if `device_path` is considered an implementation detail of the OS.
function Gio.unix_is_system_device_path(device_path) end

--- # function Gio.unix_is_system_fs_type()
---
--- Determines if `fs_type` is considered a type of file system which is only
--- used in implementation of the OS. This is primarily used for hiding
--- mounted volumes that are intended as APIs for programs to read, and system
--- administrators at a shell; rather than something that should, for example,
--- appear in a GUI. For example, the Linux `/proc` filesystem.
--- 
--- The list of file system types considered ‘system’ ones may change over time.
---
--- ---
---
---@param fs_type string # a file system type, e.g. `procfs` or `tmpfs`
---@return (boolean|nil) # `true` if `fs_type` is considered an implementation detail of the OS.
function Gio.unix_is_system_fs_type(fs_type) end

--- # function Gio.unix_mount_at()
---
--- Gets a `GUnixMountEntry` for a given mount path. If `time_read`
--- is set, it will be filled with a unix timestamp for checking
--- if the mounts have changed since with `g_unix_mounts_changed_since()`.
--- 
--- If more mounts have the same mount path, the last matching mount
--- is returned.
--- 
--- This will return `nil` if there is no mount point at `mount_path`.
---
--- ---
---
---@param mount_path string # path for a possible unix mount.
---@param time_read? integer # guint64 to contain a timestamp.
---@return Gio.UnixMountEntry # a `GUnixMountEntry`.
function Gio.unix_mount_at(mount_path, time_read) end

--- # function Gio.unix_mount_compare()
---
--- Compares two unix mounts.
---
--- ---
---
---@param mount1 Gio.UnixMountEntry # first `GUnixMountEntry` to compare.
---@param mount2 Gio.UnixMountEntry # second `GUnixMountEntry` to compare.
---@return integer # 1, 0 or -1 if `mount1` is greater than, equal to, or less than `mount2`, respectively.
function Gio.unix_mount_compare(mount1, mount2) end

--- # function Gio.unix_mount_copy()
---
--- Makes a copy of `mount_entry`.
---
--- ---
---
---@param mount_entry Gio.UnixMountEntry # a `GUnixMountEntry`.
---@return Gio.UnixMountEntry # a new `GUnixMountEntry`
function Gio.unix_mount_copy(mount_entry) end

--- # function Gio.unix_mount_for()
---
--- Gets a `GUnixMountEntry` for a given file path. If `time_read`
--- is set, it will be filled with a unix timestamp for checking
--- if the mounts have changed since with `g_unix_mounts_changed_since()`.
--- 
--- If more mounts have the same mount path, the last matching mount
--- is returned.
--- 
--- This will return `nil` if looking up the mount entry fails, if
--- `file_path` doesn’t exist or there is an I/O error.
---
--- ---
---
---@param file_path string # file path on some unix mount.
---@param time_read? integer # guint64 to contain a timestamp.
---@return Gio.UnixMountEntry # a `GUnixMountEntry`.
function Gio.unix_mount_for(file_path, time_read) end

--- # function Gio.unix_mount_free()
---
--- Frees a unix mount.
---
--- ---
---
---@param mount_entry Gio.UnixMountEntry # a `GUnixMountEntry`.
---@return nil
function Gio.unix_mount_free(mount_entry) end

--- # function Gio.unix_mount_get_device_path()
---
--- Gets the device path for a unix mount.
---
--- ---
---
---@param mount_entry Gio.UnixMountEntry # a `GUnixMount`.
---@return string # a string containing the device path.
function Gio.unix_mount_get_device_path(mount_entry) end

--- # function Gio.unix_mount_get_fs_type()
---
--- Gets the filesystem type for the unix mount.
---
--- ---
---
---@param mount_entry Gio.UnixMountEntry # a `GUnixMount`.
---@return string # a string containing the file system type.
function Gio.unix_mount_get_fs_type(mount_entry) end

--- # function Gio.unix_mount_get_mount_path()
---
--- Gets the mount path for a unix mount.
---
--- ---
---
---@param mount_entry Gio.UnixMountEntry # input `GUnixMountEntry` to get the mount path for.
---@return string # the mount path for `mount_entry`.
function Gio.unix_mount_get_mount_path(mount_entry) end

--- # function Gio.unix_mount_get_options()
---
--- Gets a comma-separated list of mount options for the unix mount. For example,
--- `rw,relatime,seclabel,data=ordered`.
--- 
--- This is similar to `g_unix_mount_point_get_options()`, but it takes
--- a `GUnixMountEntry` as an argument.
---
--- ---
---
---@param mount_entry Gio.UnixMountEntry # a `GUnixMountEntry`.
---@return string # a string containing the options, or `nil` if not available.
function Gio.unix_mount_get_options(mount_entry) end

--- # function Gio.unix_mount_get_root_path()
---
--- Gets the root of the mount within the filesystem. This is useful e.g. for
--- mounts created by bind operation, or btrfs subvolumes.
--- 
--- For example, the root path is equal to "/" for mount created by
--- "mount /dev/sda1 /mnt/foo" and "/bar" for
--- "mount --bind /mnt/foo/bar /mnt/bar".
---
--- ---
---
---@param mount_entry Gio.UnixMountEntry # a `GUnixMountEntry`.
---@return string # a string containing the root, or `nil` if not supported.
function Gio.unix_mount_get_root_path(mount_entry) end

--- # function Gio.unix_mount_guess_can_eject()
---
--- Guesses whether a Unix mount can be ejected.
---
--- ---
---
---@param mount_entry Gio.UnixMountEntry # a `GUnixMountEntry`
---@return (boolean|nil) # `true` if `mount_entry` is deemed to be ejectable.
function Gio.unix_mount_guess_can_eject(mount_entry) end

--- # function Gio.unix_mount_guess_icon()
---
--- Guesses the icon of a Unix mount.
---
--- ---
---
---@param mount_entry Gio.UnixMountEntry # a `GUnixMountEntry`
---@return Gio.Icon # a `GIcon`
function Gio.unix_mount_guess_icon(mount_entry) end

--- # function Gio.unix_mount_guess_name()
---
--- Guesses the name of a Unix mount.
--- The result is a translated string.
---
--- ---
---
---@param mount_entry Gio.UnixMountEntry # a `GUnixMountEntry`
---@return string # A newly allocated string that must be freed with `g_free()`
function Gio.unix_mount_guess_name(mount_entry) end

--- # function Gio.unix_mount_guess_should_display()
---
--- Guesses whether a Unix mount should be displayed in the UI.
---
--- ---
---
---@param mount_entry Gio.UnixMountEntry # a `GUnixMountEntry`
---@return (boolean|nil) # `true` if `mount_entry` is deemed to be displayable.
function Gio.unix_mount_guess_should_display(mount_entry) end

--- # function Gio.unix_mount_guess_symbolic_icon()
---
--- Guesses the symbolic icon of a Unix mount.
---
--- ---
---
---@param mount_entry Gio.UnixMountEntry # a `GUnixMountEntry`
---@return Gio.Icon # a `GIcon`
function Gio.unix_mount_guess_symbolic_icon(mount_entry) end

--- # function Gio.unix_mount_is_readonly()
---
--- Checks if a unix mount is mounted read only.
---
--- ---
---
---@param mount_entry Gio.UnixMountEntry # a `GUnixMount`.
---@return (boolean|nil) # `true` if `mount_entry` is read only.
function Gio.unix_mount_is_readonly(mount_entry) end

--- # function Gio.unix_mount_is_system_internal()
---
--- Checks if a Unix mount is a system mount. This is the Boolean OR of
--- `g_unix_is_system_fs_type()`, `g_unix_is_system_device_path()` and
--- `g_unix_is_mount_path_system_internal()` on `mount_entry`’s properties.
--- 
--- The definition of what a ‘system’ mount entry is may change over time as new
--- file system types and device paths are ignored.
---
--- ---
---
---@param mount_entry Gio.UnixMountEntry # a `GUnixMount`.
---@return (boolean|nil) # `true` if the unix mount is for a system path.
function Gio.unix_mount_is_system_internal(mount_entry) end

--- # function Gio.unix_mount_point_at()
---
--- Gets a `GUnixMountPoint` for a given mount path. If `time_read` is set, it
--- will be filled with a unix timestamp for checking if the mount points have
--- changed since with `g_unix_mount_points_changed_since()`.
--- 
--- If more mount points have the same mount path, the last matching mount point
--- is returned.
---
--- ---
---
---@param mount_path string # path for a possible unix mount point.
---@param time_read? integer # guint64 to contain a timestamp.
---@return Gio.UnixMountPoint # a `GUnixMountPoint`, or `nil` if no match is found.
function Gio.unix_mount_point_at(mount_path, time_read) end

--- # function Gio.unix_mount_points_changed_since()
---
--- Checks if the unix mount points have changed since a given unix time.
---
--- ---
---
---@param time integer # guint64 to contain a timestamp.
---@return (boolean|nil) # `true` if the mount points have changed since `time`.
function Gio.unix_mount_points_changed_since(time) end

--- # function Gio.unix_mount_points_get()
---
--- Gets a `GList` of `GUnixMountPoint` containing the unix mount points.
--- If `time_read` is set, it will be filled with the mount timestamp,
--- allowing for checking if the mounts have changed with
--- `g_unix_mount_points_changed_since()`.
---
--- ---
---
---@param time_read? integer # guint64 to contain a timestamp.
---@return Gio.UnixMountPoint[] # a `GList` of the UNIX mountpoints.
function Gio.unix_mount_points_get(time_read) end

--- # function Gio.unix_mounts_changed_since()
---
--- Checks if the unix mounts have changed since a given unix time.
---
--- ---
---
---@param time integer # guint64 to contain a timestamp.
---@return (boolean|nil) # `true` if the mounts have changed since `time`.
function Gio.unix_mounts_changed_since(time) end

--- # function Gio.unix_mounts_get()
---
--- Gets a `GList` of `GUnixMountEntry` containing the unix mounts.
--- If `time_read` is set, it will be filled with the mount
--- timestamp, allowing for checking if the mounts have changed
--- with `g_unix_mounts_changed_since()`.
---
--- ---
---
---@param time_read? integer # guint64 to contain a timestamp, or `nil`
---@return Gio.UnixMountEntry[] # a `GList` of the UNIX mounts.
function Gio.unix_mounts_get(time_read) end

return Gio

